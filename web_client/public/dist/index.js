/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./client/embed_viewers/custom_elements/pdf_viewer/pdf-viewer.hbs":
/*!************************************************************************!*\
  !*** ./client/embed_viewers/custom_elements/pdf_viewer/pdf-viewer.hbs ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
        const parser = new DOMParser();

        // Used to register contexts
        if (!document.__handlebar_custom_loader)
            document.__handlebar_custom_loader = {
                __next_obj_id: 0,
                __registered_ctx: {}
            }
        
        Handlebars.get_mime_icons = () => JSON.parse('{"application":{"content":{"javascript":"/images/icons/mime-icons/application/javascript.png","json":"/images/icons/mime-icons/application/json.png","pdf":"/images/icons/mime-icons/application/pdf.png","rar":"/images/icons/mime-icons/application/rar.png","tar":"/images/icons/mime-icons/application/tar.png","zip":"/images/icons/mime-icons/application/zip.png"},"base":"/images/icons/mime-icons/application.png"},"audio":{"base":"/images/icons/mime-icons/audio.png"},"chemical":{"base":"/images/icons/mime-icons/chemical.png"},"font":{"base":"/images/icons/mime-icons/font.png"},"gcode":{"base":"/images/icons/mime-icons/gcode.png"},"image":{"base":"/images/icons/mime-icons/image.png"},"message":{"base":"/images/icons/mime-icons/message.png"},"model":{"base":"/images/icons/mime-icons/model.png"},"text":{"content":{"css":"/images/icons/mime-icons/text/css.png","markdown":"/images/icons/mime-icons/text/markdown.png","plain":"/images/icons/mime-icons/text/plain.png","template":"/images/icons/mime-icons/text/template.png"},"base":"/images/icons/mime-icons/text.png"},"video":{"base":"/images/icons/mime-icons/video.png"},"x-conference":{"base":"/images/icons/mime-icons/x-conference.png"}}');
        
        module.exports = (data, ctx) => {
            if (ctx) {
                    if (!ctx['__handlebar_ctx_id']) {
                    ctx.__handlebar_ctx_id = ++document.__handlebar_custom_loader.__next_obj_id;
                    document.__handlebar_custom_loader.__registered_ctx[ctx.__handlebar_ctx_id] = ctx;
                }
                data.__handlebar_ctx_id = ctx.__handlebar_ctx_id;
            }
            
            const generated_html = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div style=\"height: 100%; display: flex; flex-direction:column\">\r\n    <div style=\"display: flex; background-color: #4b4b4b; height: 40px\">\r\n        <button onclick=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"page_prev()",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":3,"column":25},"end":{"line":3,"column":46}}}))
    + "\" style=\"min-width: 140px;\">Prev</button>\r\n        <button onclick=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"page_next()",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":4,"column":25},"end":{"line":4,"column":46}}}))
    + "\" style=\"min-width: 140px;\">Next</button>\r\n        <div style=\"flex-grow: 1\"></div>\r\n        <button onclick=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"dezoom()",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":6,"column":25},"end":{"line":6,"column":43}}}))
    + "\" style=\"min-width: 140px;\">Zoom-</button>\r\n        <button onclick=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"zoom()",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":7,"column":25},"end":{"line":7,"column":41}}}))
    + "\" style=\"min-width: 140px;\">Zoom+</button>\r\n    </div>\r\n    <div style=\"position: relative; flex-grow: 1\">\r\n        <div style=\"position: absolute; top: 0; left: 0; right: 0; bottom: 0; overflow-y: auto; display:flex; justify-content:center\">\r\n            <canvas style=\"height:fit-content\"></canvas>\r\n        </div>\r\n    </div>\r\n</div>";
},"useData":true})(data);
            const body = parser.parseFromString(generated_html, 'text/html').body;
            if (body.children.length === 1)
                return body.children[0];
            
            // Force children generation
            const children = [];
            for (let i = 0; i < body.children.length; ++i)
                children.push(body.children[i]);
            return children;
        }
        

/***/ }),

/***/ "./client/layout/administration/repos.hbs":
/*!************************************************!*\
  !*** ./client/layout/administration/repos.hbs ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
        const parser = new DOMParser();

        // Used to register contexts
        if (!document.__handlebar_custom_loader)
            document.__handlebar_custom_loader = {
                __next_obj_id: 0,
                __registered_ctx: {}
            }
        
        Handlebars.get_mime_icons = () => JSON.parse('{"application":{"content":{"javascript":"/images/icons/mime-icons/application/javascript.png","json":"/images/icons/mime-icons/application/json.png","pdf":"/images/icons/mime-icons/application/pdf.png","rar":"/images/icons/mime-icons/application/rar.png","tar":"/images/icons/mime-icons/application/tar.png","zip":"/images/icons/mime-icons/application/zip.png"},"base":"/images/icons/mime-icons/application.png"},"audio":{"base":"/images/icons/mime-icons/audio.png"},"chemical":{"base":"/images/icons/mime-icons/chemical.png"},"font":{"base":"/images/icons/mime-icons/font.png"},"gcode":{"base":"/images/icons/mime-icons/gcode.png"},"image":{"base":"/images/icons/mime-icons/image.png"},"message":{"base":"/images/icons/mime-icons/message.png"},"model":{"base":"/images/icons/mime-icons/model.png"},"text":{"content":{"css":"/images/icons/mime-icons/text/css.png","markdown":"/images/icons/mime-icons/text/markdown.png","plain":"/images/icons/mime-icons/text/plain.png","template":"/images/icons/mime-icons/text/template.png"},"base":"/images/icons/mime-icons/text.png"},"video":{"base":"/images/icons/mime-icons/video.png"},"x-conference":{"base":"/images/icons/mime-icons/x-conference.png"}}');
        
        module.exports = (data, ctx) => {
            if (ctx) {
                    if (!ctx['__handlebar_ctx_id']) {
                    ctx.__handlebar_ctx_id = ++document.__handlebar_custom_loader.__next_obj_id;
                    document.__handlebar_custom_loader.__registered_ctx[ctx.__handlebar_ctx_id] = ctx;
                }
                data.__handlebar_ctx_id = ctx.__handlebar_ctx_id;
            }
            
            const generated_html = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3="function", alias4=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"admin-user\">\r\n    <p>"
    + alias4(((helper = (helper = lookupProperty(helpers,"id") || (depth0 != null ? lookupProperty(depth0,"id") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"id","hash":{},"data":data,"loc":{"start":{"line":2,"column":7},"end":{"line":2,"column":13}}}) : helper)))
    + "</p>\r\n    <p>"
    + alias4(((helper = (helper = lookupProperty(helpers,"name") || (depth0 != null ? lookupProperty(depth0,"name") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data,"loc":{"start":{"line":3,"column":7},"end":{"line":3,"column":15}}}) : helper)))
    + "</p>\r\n    <p>"
    + alias4(((helper = (helper = lookupProperty(helpers,"display_name") || (depth0 != null ? lookupProperty(depth0,"display_name") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"display_name","hash":{},"data":data,"loc":{"start":{"line":4,"column":7},"end":{"line":4,"column":23}}}) : helper)))
    + "</p>\r\n    <p>"
    + alias4(((helper = (helper = lookupProperty(helpers,"owner") || (depth0 != null ? lookupProperty(depth0,"owner") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"owner","hash":{},"data":data,"loc":{"start":{"line":5,"column":7},"end":{"line":5,"column":16}}}) : helper)))
    + "</p>\r\n    <p>"
    + alias4(((helper = (helper = lookupProperty(helpers,"description") || (depth0 != null ? lookupProperty(depth0,"description") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"description","hash":{},"data":data,"loc":{"start":{"line":6,"column":7},"end":{"line":6,"column":22}}}) : helper)))
    + "</p>\r\n    <p>"
    + alias4(((helper = (helper = lookupProperty(helpers,"status") || (depth0 != null ? lookupProperty(depth0,"status") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"status","hash":{},"data":data,"loc":{"start":{"line":7,"column":7},"end":{"line":7,"column":17}}}) : helper)))
    + "</p>\r\n    <p>"
    + alias4(((helper = (helper = lookupProperty(helpers,"visitor_file_lifetime") || (depth0 != null ? lookupProperty(depth0,"visitor_file_lifetime") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"visitor_file_lifetime","hash":{},"data":data,"loc":{"start":{"line":8,"column":7},"end":{"line":8,"column":32}}}) : helper)))
    + "</p>\r\n    <p>"
    + alias4(((helper = (helper = lookupProperty(helpers,"max_file_size") || (depth0 != null ? lookupProperty(depth0,"max_file_size") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"max_file_size","hash":{},"data":data,"loc":{"start":{"line":9,"column":7},"end":{"line":9,"column":24}}}) : helper)))
    + "</p>\r\n    <p>"
    + alias4(((helper = (helper = lookupProperty(helpers,"allow_visitor_upload") || (depth0 != null ? lookupProperty(depth0,"allow_visitor_upload") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"allow_visitor_upload","hash":{},"data":data,"loc":{"start":{"line":10,"column":7},"end":{"line":10,"column":31}}}) : helper)))
    + "</p>\r\n</div>";
},"useData":true})(data);
            const body = parser.parseFromString(generated_html, 'text/html').body;
            if (body.children.length === 1)
                return body.children[0];
            
            // Force children generation
            const children = [];
            for (let i = 0; i < body.children.length; ++i)
                children.push(body.children[i]);
            return children;
        }
        

/***/ }),

/***/ "./client/layout/administration/stats.hbs":
/*!************************************************!*\
  !*** ./client/layout/administration/stats.hbs ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
        const parser = new DOMParser();

        // Used to register contexts
        if (!document.__handlebar_custom_loader)
            document.__handlebar_custom_loader = {
                __next_obj_id: 0,
                __registered_ctx: {}
            }
        
        Handlebars.get_mime_icons = () => JSON.parse('{"application":{"content":{"javascript":"/images/icons/mime-icons/application/javascript.png","json":"/images/icons/mime-icons/application/json.png","pdf":"/images/icons/mime-icons/application/pdf.png","rar":"/images/icons/mime-icons/application/rar.png","tar":"/images/icons/mime-icons/application/tar.png","zip":"/images/icons/mime-icons/application/zip.png"},"base":"/images/icons/mime-icons/application.png"},"audio":{"base":"/images/icons/mime-icons/audio.png"},"chemical":{"base":"/images/icons/mime-icons/chemical.png"},"font":{"base":"/images/icons/mime-icons/font.png"},"gcode":{"base":"/images/icons/mime-icons/gcode.png"},"image":{"base":"/images/icons/mime-icons/image.png"},"message":{"base":"/images/icons/mime-icons/message.png"},"model":{"base":"/images/icons/mime-icons/model.png"},"text":{"content":{"css":"/images/icons/mime-icons/text/css.png","markdown":"/images/icons/mime-icons/text/markdown.png","plain":"/images/icons/mime-icons/text/plain.png","template":"/images/icons/mime-icons/text/template.png"},"base":"/images/icons/mime-icons/text.png"},"video":{"base":"/images/icons/mime-icons/video.png"},"x-conference":{"base":"/images/icons/mime-icons/x-conference.png"}}');
        
        module.exports = (data, ctx) => {
            if (ctx) {
                    if (!ctx['__handlebar_ctx_id']) {
                    ctx.__handlebar_ctx_id = ++document.__handlebar_custom_loader.__next_obj_id;
                    document.__handlebar_custom_loader.__registered_ctx[ctx.__handlebar_ctx_id] = ctx;
                }
                data.__handlebar_ctx_id = ctx.__handlebar_ctx_id;
            }
            
            const generated_html = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3="function", alias4=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"admin-stats\">\r\n    <p>Directory count : "
    + alias4(((helper = (helper = lookupProperty(helpers,"dirs") || (depth0 != null ? lookupProperty(depth0,"dirs") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"dirs","hash":{},"data":data,"loc":{"start":{"line":2,"column":25},"end":{"line":2,"column":33}}}) : helper)))
    + "</p>\r\n    <p>File count : "
    + alias4(((helper = (helper = lookupProperty(helpers,"files") || (depth0 != null ? lookupProperty(depth0,"files") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"files","hash":{},"data":data,"loc":{"start":{"line":3,"column":20},"end":{"line":3,"column":29}}}) : helper)))
    + "</p>\r\n    <p>Real file count : "
    + alias4(((helper = (helper = lookupProperty(helpers,"effective_files") || (depth0 != null ? lookupProperty(depth0,"effective_files") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"effective_files","hash":{},"data":data,"loc":{"start":{"line":4,"column":25},"end":{"line":4,"column":44}}}) : helper)))
    + "</p>\r\n    <p>Total size : "
    + alias4(((helper = (helper = lookupProperty(helpers,"size") || (depth0 != null ? lookupProperty(depth0,"size") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"size","hash":{},"data":data,"loc":{"start":{"line":5,"column":20},"end":{"line":5,"column":28}}}) : helper)))
    + "</p>\r\n    <p>Real size : "
    + alias4(((helper = (helper = lookupProperty(helpers,"effective_size") || (depth0 != null ? lookupProperty(depth0,"effective_size") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"effective_size","hash":{},"data":data,"loc":{"start":{"line":6,"column":19},"end":{"line":6,"column":37}}}) : helper)))
    + "</p>\r\n    <p>Thumbnail count : "
    + alias4(((helper = (helper = lookupProperty(helpers,"thumbnails") || (depth0 != null ? lookupProperty(depth0,"thumbnails") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"thumbnails","hash":{},"data":data,"loc":{"start":{"line":7,"column":25},"end":{"line":7,"column":39}}}) : helper)))
    + "</p>\r\n</div>";
},"useData":true})(data);
            const body = parser.parseFromString(generated_html, 'text/html').body;
            if (body.children.length === 1)
                return body.children[0];
            
            // Force children generation
            const children = [];
            for (let i = 0; i < body.children.length; ++i)
                children.push(body.children[i]);
            return children;
        }
        

/***/ }),

/***/ "./client/layout/administration/user.hbs":
/*!***********************************************!*\
  !*** ./client/layout/administration/user.hbs ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
        const parser = new DOMParser();

        // Used to register contexts
        if (!document.__handlebar_custom_loader)
            document.__handlebar_custom_loader = {
                __next_obj_id: 0,
                __registered_ctx: {}
            }
        
        Handlebars.get_mime_icons = () => JSON.parse('{"application":{"content":{"javascript":"/images/icons/mime-icons/application/javascript.png","json":"/images/icons/mime-icons/application/json.png","pdf":"/images/icons/mime-icons/application/pdf.png","rar":"/images/icons/mime-icons/application/rar.png","tar":"/images/icons/mime-icons/application/tar.png","zip":"/images/icons/mime-icons/application/zip.png"},"base":"/images/icons/mime-icons/application.png"},"audio":{"base":"/images/icons/mime-icons/audio.png"},"chemical":{"base":"/images/icons/mime-icons/chemical.png"},"font":{"base":"/images/icons/mime-icons/font.png"},"gcode":{"base":"/images/icons/mime-icons/gcode.png"},"image":{"base":"/images/icons/mime-icons/image.png"},"message":{"base":"/images/icons/mime-icons/message.png"},"model":{"base":"/images/icons/mime-icons/model.png"},"text":{"content":{"css":"/images/icons/mime-icons/text/css.png","markdown":"/images/icons/mime-icons/text/markdown.png","plain":"/images/icons/mime-icons/text/plain.png","template":"/images/icons/mime-icons/text/template.png"},"base":"/images/icons/mime-icons/text.png"},"video":{"base":"/images/icons/mime-icons/video.png"},"x-conference":{"base":"/images/icons/mime-icons/x-conference.png"}}');
        
        module.exports = (data, ctx) => {
            if (ctx) {
                    if (!ctx['__handlebar_ctx_id']) {
                    ctx.__handlebar_ctx_id = ++document.__handlebar_custom_loader.__next_obj_id;
                    document.__handlebar_custom_loader.__registered_ctx[ctx.__handlebar_ctx_id] = ctx;
                }
                data.__handlebar_ctx_id = ctx.__handlebar_ctx_id;
            }
            
            const generated_html = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    return "selected";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3="function", alias4=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"admin-user\">\r\n    <p>"
    + alias4(((helper = (helper = lookupProperty(helpers,"id") || (depth0 != null ? lookupProperty(depth0,"id") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"id","hash":{},"data":data,"loc":{"start":{"line":2,"column":7},"end":{"line":2,"column":13}}}) : helper)))
    + "</p>\r\n    <p>"
    + alias4(((helper = (helper = lookupProperty(helpers,"name") || (depth0 != null ? lookupProperty(depth0,"name") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data,"loc":{"start":{"line":3,"column":7},"end":{"line":3,"column":15}}}) : helper)))
    + "</p>\r\n    <p>"
    + alias4(((helper = (helper = lookupProperty(helpers,"email") || (depth0 != null ? lookupProperty(depth0,"email") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"email","hash":{},"data":data,"loc":{"start":{"line":4,"column":7},"end":{"line":4,"column":16}}}) : helper)))
    + "</p>\r\n    <p>role</p>\r\n    <select name=\""
    + alias4(((helper = (helper = lookupProperty(helpers,"role") || (depth0 != null ? lookupProperty(depth0,"role") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"role","hash":{},"data":data,"loc":{"start":{"line":6,"column":18},"end":{"line":6,"column":26}}}) : helper)))
    + "\" onchange=\""
    + alias4((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"set_role(event)",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":6,"column":38},"end":{"line":6,"column":63}}}))
    + "\">\r\n        <option value=\"guest\" "
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"is_guest") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":7,"column":30},"end":{"line":7,"column":61}}})) != null ? stack1 : "")
    + ">Guest</option>\r\n        <option value=\"vip\" "
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"is_vip") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":8,"column":28},"end":{"line":8,"column":57}}})) != null ? stack1 : "")
    + ">Vip</option>\r\n        <option value=\"admin\" "
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"is_admin") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":9,"column":30},"end":{"line":9,"column":61}}})) != null ? stack1 : "")
    + ">Admin</option>\r\n    </select>\r\n    <p>"
    + alias4(((helper = (helper = lookupProperty(helpers,"allow_contact") || (depth0 != null ? lookupProperty(depth0,"allow_contact") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"allow_contact","hash":{},"data":data,"loc":{"start":{"line":11,"column":7},"end":{"line":11,"column":24}}}) : helper)))
    + "</p>\r\n</div>";
},"useData":true})(data);
            const body = parser.parseFromString(generated_html, 'text/html').body;
            if (body.children.length === 1)
                return body.children[0];
            
            // Force children generation
            const children = [];
            for (let i = 0; i < body.children.length; ++i)
                children.push(body.children[i]);
            return children;
        }
        

/***/ }),

/***/ "./client/layout/widgets/auth/reset_password.hbs":
/*!*******************************************************!*\
  !*** ./client/layout/widgets/auth/reset_password.hbs ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
        const parser = new DOMParser();

        // Used to register contexts
        if (!document.__handlebar_custom_loader)
            document.__handlebar_custom_loader = {
                __next_obj_id: 0,
                __registered_ctx: {}
            }
        
        Handlebars.get_mime_icons = () => JSON.parse('{"application":{"content":{"javascript":"/images/icons/mime-icons/application/javascript.png","json":"/images/icons/mime-icons/application/json.png","pdf":"/images/icons/mime-icons/application/pdf.png","rar":"/images/icons/mime-icons/application/rar.png","tar":"/images/icons/mime-icons/application/tar.png","zip":"/images/icons/mime-icons/application/zip.png"},"base":"/images/icons/mime-icons/application.png"},"audio":{"base":"/images/icons/mime-icons/audio.png"},"chemical":{"base":"/images/icons/mime-icons/chemical.png"},"font":{"base":"/images/icons/mime-icons/font.png"},"gcode":{"base":"/images/icons/mime-icons/gcode.png"},"image":{"base":"/images/icons/mime-icons/image.png"},"message":{"base":"/images/icons/mime-icons/message.png"},"model":{"base":"/images/icons/mime-icons/model.png"},"text":{"content":{"css":"/images/icons/mime-icons/text/css.png","markdown":"/images/icons/mime-icons/text/markdown.png","plain":"/images/icons/mime-icons/text/plain.png","template":"/images/icons/mime-icons/text/template.png"},"base":"/images/icons/mime-icons/text.png"},"video":{"base":"/images/icons/mime-icons/video.png"},"x-conference":{"base":"/images/icons/mime-icons/x-conference.png"}}');
        
        module.exports = (data, ctx) => {
            if (ctx) {
                    if (!ctx['__handlebar_ctx_id']) {
                    ctx.__handlebar_ctx_id = ++document.__handlebar_custom_loader.__next_obj_id;
                    document.__handlebar_custom_loader.__registered_ctx[ctx.__handlebar_ctx_id] = ctx;
                }
                data.__handlebar_ctx_id = ctx.__handlebar_ctx_id;
            }
            
            const generated_html = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<h1>Réinitialisation du mot de passe</h1>\r\n<form onsubmit=\""
    + container.escapeExpression((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),"reset(event)",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":2,"column":16},"end":{"line":2,"column":38}}}))
    + "\">\r\n    <div class=\"field\">\r\n        <label for='password'>\r\n            <input type=\"password\" name=\"password\" placeholder=\"Mot de passe\" id=\"password\" required>\r\n        </label>\r\n    </div>\r\n    <input type=\"submit\" value=\"Réinitialiser le mot de passe\">\r\n</form>";
},"useData":true})(data);
            const body = parser.parseFromString(generated_html, 'text/html').body;
            if (body.children.length === 1)
                return body.children[0];
            
            // Force children generation
            const children = [];
            for (let i = 0; i < body.children.length; ++i)
                children.push(body.children[i]);
            return children;
        }
        

/***/ }),

/***/ "./client/layout/widgets/auth/signin.hbs":
/*!***********************************************!*\
  !*** ./client/layout/widgets/auth/signin.hbs ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
        const parser = new DOMParser();

        // Used to register contexts
        if (!document.__handlebar_custom_loader)
            document.__handlebar_custom_loader = {
                __next_obj_id: 0,
                __registered_ctx: {}
            }
        
        Handlebars.get_mime_icons = () => JSON.parse('{"application":{"content":{"javascript":"/images/icons/mime-icons/application/javascript.png","json":"/images/icons/mime-icons/application/json.png","pdf":"/images/icons/mime-icons/application/pdf.png","rar":"/images/icons/mime-icons/application/rar.png","tar":"/images/icons/mime-icons/application/tar.png","zip":"/images/icons/mime-icons/application/zip.png"},"base":"/images/icons/mime-icons/application.png"},"audio":{"base":"/images/icons/mime-icons/audio.png"},"chemical":{"base":"/images/icons/mime-icons/chemical.png"},"font":{"base":"/images/icons/mime-icons/font.png"},"gcode":{"base":"/images/icons/mime-icons/gcode.png"},"image":{"base":"/images/icons/mime-icons/image.png"},"message":{"base":"/images/icons/mime-icons/message.png"},"model":{"base":"/images/icons/mime-icons/model.png"},"text":{"content":{"css":"/images/icons/mime-icons/text/css.png","markdown":"/images/icons/mime-icons/text/markdown.png","plain":"/images/icons/mime-icons/text/plain.png","template":"/images/icons/mime-icons/text/template.png"},"base":"/images/icons/mime-icons/text.png"},"video":{"base":"/images/icons/mime-icons/video.png"},"x-conference":{"base":"/images/icons/mime-icons/x-conference.png"}}');
        
        module.exports = (data, ctx) => {
            if (ctx) {
                    if (!ctx['__handlebar_ctx_id']) {
                    ctx.__handlebar_ctx_id = ++document.__handlebar_custom_loader.__next_obj_id;
                    document.__handlebar_custom_loader.__registered_ctx[ctx.__handlebar_ctx_id] = ctx;
                }
                data.__handlebar_ctx_id = ctx.__handlebar_ctx_id;
            }
            
            const generated_html = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<h1>Connexion</h1>\r\n<form onsubmit=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"signin(event)",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":2,"column":16},"end":{"line":2,"column":39}}}))
    + "\">\r\n    <div class=\"field\">\r\n        <label for='username'>\r\n            <input type=\"text\" name=\"username\" placeholder=\"Nom d'utilisateur\" id=\"username\" required>\r\n        </label>\r\n    </div>\r\n    <div class=\"field\">\r\n        <label for='password'>\r\n            <input type=\"password\" name=\"password\" placeholder=\"Mot de passe\" id=\"password\" required>\r\n        </label>\r\n    </div>\r\n\r\n    <input type=\"submit\" value=\"Se connecter\">\r\n    <a id=\"forgot-password\" onclick=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"reset_password()",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":15,"column":37},"end":{"line":15,"column":63}}}))
    + "\">mot de passe oublié</a>\r\n    <div class='footer'>\r\n        <p>Pas encore de compte ?</p> <a href=\"javascript:window.auth.open_modal_signup();\">Créer un compte</a>\r\n    </div>\r\n</form>";
},"useData":true})(data);
            const body = parser.parseFromString(generated_html, 'text/html').body;
            if (body.children.length === 1)
                return body.children[0];
            
            // Force children generation
            const children = [];
            for (let i = 0; i < body.children.length; ++i)
                children.push(body.children[i]);
            return children;
        }
        

/***/ }),

/***/ "./client/layout/widgets/auth/signup.hbs":
/*!***********************************************!*\
  !*** ./client/layout/widgets/auth/signup.hbs ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
        const parser = new DOMParser();

        // Used to register contexts
        if (!document.__handlebar_custom_loader)
            document.__handlebar_custom_loader = {
                __next_obj_id: 0,
                __registered_ctx: {}
            }
        
        Handlebars.get_mime_icons = () => JSON.parse('{"application":{"content":{"javascript":"/images/icons/mime-icons/application/javascript.png","json":"/images/icons/mime-icons/application/json.png","pdf":"/images/icons/mime-icons/application/pdf.png","rar":"/images/icons/mime-icons/application/rar.png","tar":"/images/icons/mime-icons/application/tar.png","zip":"/images/icons/mime-icons/application/zip.png"},"base":"/images/icons/mime-icons/application.png"},"audio":{"base":"/images/icons/mime-icons/audio.png"},"chemical":{"base":"/images/icons/mime-icons/chemical.png"},"font":{"base":"/images/icons/mime-icons/font.png"},"gcode":{"base":"/images/icons/mime-icons/gcode.png"},"image":{"base":"/images/icons/mime-icons/image.png"},"message":{"base":"/images/icons/mime-icons/message.png"},"model":{"base":"/images/icons/mime-icons/model.png"},"text":{"content":{"css":"/images/icons/mime-icons/text/css.png","markdown":"/images/icons/mime-icons/text/markdown.png","plain":"/images/icons/mime-icons/text/plain.png","template":"/images/icons/mime-icons/text/template.png"},"base":"/images/icons/mime-icons/text.png"},"video":{"base":"/images/icons/mime-icons/video.png"},"x-conference":{"base":"/images/icons/mime-icons/x-conference.png"}}');
        
        module.exports = (data, ctx) => {
            if (ctx) {
                    if (!ctx['__handlebar_ctx_id']) {
                    ctx.__handlebar_ctx_id = ++document.__handlebar_custom_loader.__next_obj_id;
                    document.__handlebar_custom_loader.__registered_ctx[ctx.__handlebar_ctx_id] = ctx;
                }
                data.__handlebar_ctx_id = ctx.__handlebar_ctx_id;
            }
            
            const generated_html = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<h1>Créer un compte</h1>\r\n<form onsubmit=\""
    + container.escapeExpression((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),"signup(event)",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":2,"column":16},"end":{"line":2,"column":39}}}))
    + "\">\r\n    <div class=\"field\">\r\n        <label for='username'>\r\n            <input type=\"text\" name=\"username\" placeholder=\"Nom d'utilisateur\" id=\"username\" required>\r\n        </label>\r\n    </div>\r\n    <div class=\"field\">\r\n        <label for='email'>\r\n            <input type=\"email\" name=\"email\" placeholder=\"e-mail\" id=\"email\" required>\r\n        </label>\r\n    </div>\r\n    <div class=\"field\">\r\n        <label for='password'>\r\n            <input type=\"password\" name=\"password\" placeholder=\"Mot de passe\" id=\"password\" required>\r\n        </label>\r\n    </div>\r\n\r\n    <input type=\"submit\" value=\"Créer un compte\">\r\n    <div class='footer'>\r\n        <p>Déjà membre ?</p> <a href=\"javascript:window.auth.open_modal_signin();\">Se connecter à votre\r\n        compte</a>\r\n    </div>\r\n</form>";
},"useData":true})(data);
            const body = parser.parseFromString(generated_html, 'text/html').body;
            if (body.children.length === 1)
                return body.children[0];
            
            // Force children generation
            const children = [];
            for (let i = 0; i < body.children.length; ++i)
                children.push(body.children[i]);
            return children;
        }
        

/***/ }),

/***/ "./client/layout/widgets/components/carousel/carousel_fullscreen.hbs":
/*!***************************************************************************!*\
  !*** ./client/layout/widgets/components/carousel/carousel_fullscreen.hbs ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
        const parser = new DOMParser();

        // Used to register contexts
        if (!document.__handlebar_custom_loader)
            document.__handlebar_custom_loader = {
                __next_obj_id: 0,
                __registered_ctx: {}
            }
        
        Handlebars.get_mime_icons = () => JSON.parse('{"application":{"content":{"javascript":"/images/icons/mime-icons/application/javascript.png","json":"/images/icons/mime-icons/application/json.png","pdf":"/images/icons/mime-icons/application/pdf.png","rar":"/images/icons/mime-icons/application/rar.png","tar":"/images/icons/mime-icons/application/tar.png","zip":"/images/icons/mime-icons/application/zip.png"},"base":"/images/icons/mime-icons/application.png"},"audio":{"base":"/images/icons/mime-icons/audio.png"},"chemical":{"base":"/images/icons/mime-icons/chemical.png"},"font":{"base":"/images/icons/mime-icons/font.png"},"gcode":{"base":"/images/icons/mime-icons/gcode.png"},"image":{"base":"/images/icons/mime-icons/image.png"},"message":{"base":"/images/icons/mime-icons/message.png"},"model":{"base":"/images/icons/mime-icons/model.png"},"text":{"content":{"css":"/images/icons/mime-icons/text/css.png","markdown":"/images/icons/mime-icons/text/markdown.png","plain":"/images/icons/mime-icons/text/plain.png","template":"/images/icons/mime-icons/text/template.png"},"base":"/images/icons/mime-icons/text.png"},"video":{"base":"/images/icons/mime-icons/video.png"},"x-conference":{"base":"/images/icons/mime-icons/x-conference.png"}}');
        
        module.exports = (data, ctx) => {
            if (ctx) {
                    if (!ctx['__handlebar_ctx_id']) {
                    ctx.__handlebar_ctx_id = ++document.__handlebar_custom_loader.__next_obj_id;
                    document.__handlebar_custom_loader.__registered_ctx[ctx.__handlebar_ctx_id] = ctx;
                }
                data.__handlebar_ctx_id = ctx.__handlebar_ctx_id;
            }
            
            const generated_html = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<div id=\"carousel-fullscreen-background\">\r\n    <div id=\"carousel-fullscreen\"></div>\r\n    <div id=\"carousel-fullscreen-list\"></div>\r\n</div>";
},"useData":true})(data);
            const body = parser.parseFromString(generated_html, 'text/html').body;
            if (body.children.length === 1)
                return body.children[0];
            
            // Force children generation
            const children = [];
            for (let i = 0; i < body.children.length; ++i)
                children.push(body.children[i]);
            return children;
        }
        

/***/ }),

/***/ "./client/layout/widgets/components/carousel/list/carousel_list.hbs":
/*!**************************************************************************!*\
  !*** ./client/layout/widgets/components/carousel/list/carousel_list.hbs ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
        const parser = new DOMParser();

        // Used to register contexts
        if (!document.__handlebar_custom_loader)
            document.__handlebar_custom_loader = {
                __next_obj_id: 0,
                __registered_ctx: {}
            }
        
        Handlebars.get_mime_icons = () => JSON.parse('{"application":{"content":{"javascript":"/images/icons/mime-icons/application/javascript.png","json":"/images/icons/mime-icons/application/json.png","pdf":"/images/icons/mime-icons/application/pdf.png","rar":"/images/icons/mime-icons/application/rar.png","tar":"/images/icons/mime-icons/application/tar.png","zip":"/images/icons/mime-icons/application/zip.png"},"base":"/images/icons/mime-icons/application.png"},"audio":{"base":"/images/icons/mime-icons/audio.png"},"chemical":{"base":"/images/icons/mime-icons/chemical.png"},"font":{"base":"/images/icons/mime-icons/font.png"},"gcode":{"base":"/images/icons/mime-icons/gcode.png"},"image":{"base":"/images/icons/mime-icons/image.png"},"message":{"base":"/images/icons/mime-icons/message.png"},"model":{"base":"/images/icons/mime-icons/model.png"},"text":{"content":{"css":"/images/icons/mime-icons/text/css.png","markdown":"/images/icons/mime-icons/text/markdown.png","plain":"/images/icons/mime-icons/text/plain.png","template":"/images/icons/mime-icons/text/template.png"},"base":"/images/icons/mime-icons/text.png"},"video":{"base":"/images/icons/mime-icons/video.png"},"x-conference":{"base":"/images/icons/mime-icons/x-conference.png"}}');
        
        module.exports = (data, ctx) => {
            if (ctx) {
                    if (!ctx['__handlebar_ctx_id']) {
                    ctx.__handlebar_ctx_id = ++document.__handlebar_custom_loader.__next_obj_id;
                    document.__handlebar_custom_loader.__registered_ctx[ctx.__handlebar_ctx_id] = ctx;
                }
                data.__handlebar_ctx_id = ctx.__handlebar_ctx_id;
            }
            
            const generated_html = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n<div class=\"carousel-list-root\">\r\n    <div class=\"carousel-list-scroller\">\r\n        <div class=\"carousel-list\">\r\n\r\n        </div>\r\n    </div>\r\n    <div class=\"carousel-move-left\"><button onclick=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"move_left()",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":8,"column":53},"end":{"line":8,"column":74}}}))
    + "\"><</button></div>\r\n    <div class=\"carousel-move-right\"><button onclick=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"move_right()",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":9,"column":54},"end":{"line":9,"column":76}}}))
    + "\">></button></div>\r\n</div>";
},"useData":true})(data);
            const body = parser.parseFromString(generated_html, 'text/html').body;
            if (body.children.length === 1)
                return body.children[0];
            
            // Force children generation
            const children = [];
            for (let i = 0; i < body.children.length; ++i)
                children.push(body.children[i]);
            return children;
        }
        

/***/ }),

/***/ "./client/layout/widgets/components/carousel/list/carousel_list_item.hbs":
/*!*******************************************************************************!*\
  !*** ./client/layout/widgets/components/carousel/list/carousel_list_item.hbs ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
        const parser = new DOMParser();

        // Used to register contexts
        if (!document.__handlebar_custom_loader)
            document.__handlebar_custom_loader = {
                __next_obj_id: 0,
                __registered_ctx: {}
            }
        
        Handlebars.get_mime_icons = () => JSON.parse('{"application":{"content":{"javascript":"/images/icons/mime-icons/application/javascript.png","json":"/images/icons/mime-icons/application/json.png","pdf":"/images/icons/mime-icons/application/pdf.png","rar":"/images/icons/mime-icons/application/rar.png","tar":"/images/icons/mime-icons/application/tar.png","zip":"/images/icons/mime-icons/application/zip.png"},"base":"/images/icons/mime-icons/application.png"},"audio":{"base":"/images/icons/mime-icons/audio.png"},"chemical":{"base":"/images/icons/mime-icons/chemical.png"},"font":{"base":"/images/icons/mime-icons/font.png"},"gcode":{"base":"/images/icons/mime-icons/gcode.png"},"image":{"base":"/images/icons/mime-icons/image.png"},"message":{"base":"/images/icons/mime-icons/message.png"},"model":{"base":"/images/icons/mime-icons/model.png"},"text":{"content":{"css":"/images/icons/mime-icons/text/css.png","markdown":"/images/icons/mime-icons/text/markdown.png","plain":"/images/icons/mime-icons/text/plain.png","template":"/images/icons/mime-icons/text/template.png"},"base":"/images/icons/mime-icons/text.png"},"video":{"base":"/images/icons/mime-icons/video.png"},"x-conference":{"base":"/images/icons/mime-icons/x-conference.png"}}');
        
        module.exports = (data, ctx) => {
            if (ctx) {
                    if (!ctx['__handlebar_ctx_id']) {
                    ctx.__handlebar_ctx_id = ++document.__handlebar_custom_loader.__next_obj_id;
                    document.__handlebar_custom_loader.__registered_ctx[ctx.__handlebar_ctx_id] = ctx;
                }
                data.__handlebar_ctx_id = ctx.__handlebar_ctx_id;
            }
            
            const generated_html = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"carousel-item\">\r\n    <button class=\"carousel-item-button\" onclick=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"on_click()",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":2,"column":50},"end":{"line":2,"column":70}}}))
    + "\">\r\n        "
    + alias3((lookupProperty(helpers,"item_thumbnail")||(depth0 && lookupProperty(depth0,"item_thumbnail"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"item") : depth0),{"name":"item_thumbnail","hash":{},"data":data,"loc":{"start":{"line":3,"column":8},"end":{"line":3,"column":31}}}))
    + "\r\n    </button>\r\n</div>";
},"useData":true})(data);
            const body = parser.parseFromString(generated_html, 'text/html').body;
            if (body.children.length === 1)
                return body.children[0];
            
            // Force children generation
            const children = [];
            for (let i = 0; i < body.children.length; ++i)
                children.push(body.children[i]);
            return children;
        }
        

/***/ }),

/***/ "./client/layout/widgets/components/carousel/overlay/carousel_overlay.hbs":
/*!********************************************************************************!*\
  !*** ./client/layout/widgets/components/carousel/overlay/carousel_overlay.hbs ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
        const parser = new DOMParser();

        // Used to register contexts
        if (!document.__handlebar_custom_loader)
            document.__handlebar_custom_loader = {
                __next_obj_id: 0,
                __registered_ctx: {}
            }
        
        Handlebars.get_mime_icons = () => JSON.parse('{"application":{"content":{"javascript":"/images/icons/mime-icons/application/javascript.png","json":"/images/icons/mime-icons/application/json.png","pdf":"/images/icons/mime-icons/application/pdf.png","rar":"/images/icons/mime-icons/application/rar.png","tar":"/images/icons/mime-icons/application/tar.png","zip":"/images/icons/mime-icons/application/zip.png"},"base":"/images/icons/mime-icons/application.png"},"audio":{"base":"/images/icons/mime-icons/audio.png"},"chemical":{"base":"/images/icons/mime-icons/chemical.png"},"font":{"base":"/images/icons/mime-icons/font.png"},"gcode":{"base":"/images/icons/mime-icons/gcode.png"},"image":{"base":"/images/icons/mime-icons/image.png"},"message":{"base":"/images/icons/mime-icons/message.png"},"model":{"base":"/images/icons/mime-icons/model.png"},"text":{"content":{"css":"/images/icons/mime-icons/text/css.png","markdown":"/images/icons/mime-icons/text/markdown.png","plain":"/images/icons/mime-icons/text/plain.png","template":"/images/icons/mime-icons/text/template.png"},"base":"/images/icons/mime-icons/text.png"},"video":{"base":"/images/icons/mime-icons/video.png"},"x-conference":{"base":"/images/icons/mime-icons/x-conference.png"}}');
        
        module.exports = (data, ctx) => {
            if (ctx) {
                    if (!ctx['__handlebar_ctx_id']) {
                    ctx.__handlebar_ctx_id = ++document.__handlebar_custom_loader.__next_obj_id;
                    document.__handlebar_custom_loader.__registered_ctx[ctx.__handlebar_ctx_id] = ctx;
                }
                data.__handlebar_ctx_id = ctx.__handlebar_ctx_id;
            }
            
            const generated_html = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, alias4=container.lambda, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"carousel-overlay\">\r\n    <div class=\"data-container\">\r\n        <div class=\"stats\">\r\n            "
    + alias3((lookupProperty(helpers,"typeicon")||(depth0 && lookupProperty(depth0,"typeicon"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"item") : depth0)) != null ? lookupProperty(stack1,"mimetype") : stack1),{"name":"typeicon","hash":{},"data":data,"loc":{"start":{"line":4,"column":12},"end":{"line":4,"column":38}}}))
    + "\r\n            <div class=\"substats\">\r\n                <p id=\"item-mime-type\">"
    + alias3(alias4(((stack1 = (depth0 != null ? lookupProperty(depth0,"item") : depth0)) != null ? lookupProperty(stack1,"mimetype") : stack1), depth0))
    + "</p>\r\n                <p id=\"item-size\">Poids : "
    + alias3(((helper = (helper = lookupProperty(helpers,"file_size") || (depth0 != null ? lookupProperty(depth0,"file_size") : depth0)) != null ? helper : alias2),(typeof helper === "function" ? helper.call(alias1,{"name":"file_size","hash":{},"data":data,"loc":{"start":{"line":7,"column":42},"end":{"line":7,"column":55}}}) : helper)))
    + "</p>\r\n            </div>\r\n        </div>\r\n        <div class=\"title desktop-title\">\r\n            <h1 id=\"item-title\">"
    + alias3(alias4(((stack1 = (depth0 != null ? lookupProperty(depth0,"item") : depth0)) != null ? lookupProperty(stack1,"name") : stack1), depth0))
    + "</h1>\r\n        </div>\r\n        <div class=\"right-buttons\">\r\n            <div class=\"action-buttons\">\r\n                <button class=\"plus-button\" onclick=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"share(event)",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":15,"column":53},"end":{"line":15,"column":75}}}))
    + "\"><img\r\n                        src=\"/images/icons/icons8-url-96.png\" alt=\"Share\"></button>\r\n                <button class=\"plus-button\" onclick=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"download(event)",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":17,"column":53},"end":{"line":17,"column":78}}}))
    + "\"><img\r\n                        src=\"/images/icons/icons8-download-96.png\" alt=\"Download\"></button>\r\n            </div>\r\n            <button class=\"cancel-button\" onclick=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"close_carousel(event)",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":20,"column":51},"end":{"line":20,"column":82}}}))
    + "\">X</button>\r\n        </div>\r\n    </div>\r\n    <div class=\"title mobile-title\">\r\n        <h1 id=\"item-title\">"
    + alias3(alias4(((stack1 = (depth0 != null ? lookupProperty(depth0,"item") : depth0)) != null ? lookupProperty(stack1,"name") : stack1), depth0))
    + "</h1>\r\n    </div>\r\n    <div class=\"hseparator\"></div>\r\n</div>";
},"useData":true})(data);
            const body = parser.parseFromString(generated_html, 'text/html').body;
            if (body.children.length === 1)
                return body.children[0];
            
            // Force children generation
            const children = [];
            for (let i = 0; i < body.children.length; ++i)
                children.push(body.children[i]);
            return children;
        }
        

/***/ }),

/***/ "./client/layout/widgets/components/carousel/viewport/carousel_viewport.hbs":
/*!**********************************************************************************!*\
  !*** ./client/layout/widgets/components/carousel/viewport/carousel_viewport.hbs ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
        const parser = new DOMParser();

        // Used to register contexts
        if (!document.__handlebar_custom_loader)
            document.__handlebar_custom_loader = {
                __next_obj_id: 0,
                __registered_ctx: {}
            }
        
        Handlebars.get_mime_icons = () => JSON.parse('{"application":{"content":{"javascript":"/images/icons/mime-icons/application/javascript.png","json":"/images/icons/mime-icons/application/json.png","pdf":"/images/icons/mime-icons/application/pdf.png","rar":"/images/icons/mime-icons/application/rar.png","tar":"/images/icons/mime-icons/application/tar.png","zip":"/images/icons/mime-icons/application/zip.png"},"base":"/images/icons/mime-icons/application.png"},"audio":{"base":"/images/icons/mime-icons/audio.png"},"chemical":{"base":"/images/icons/mime-icons/chemical.png"},"font":{"base":"/images/icons/mime-icons/font.png"},"gcode":{"base":"/images/icons/mime-icons/gcode.png"},"image":{"base":"/images/icons/mime-icons/image.png"},"message":{"base":"/images/icons/mime-icons/message.png"},"model":{"base":"/images/icons/mime-icons/model.png"},"text":{"content":{"css":"/images/icons/mime-icons/text/css.png","markdown":"/images/icons/mime-icons/text/markdown.png","plain":"/images/icons/mime-icons/text/plain.png","template":"/images/icons/mime-icons/text/template.png"},"base":"/images/icons/mime-icons/text.png"},"video":{"base":"/images/icons/mime-icons/video.png"},"x-conference":{"base":"/images/icons/mime-icons/x-conference.png"}}');
        
        module.exports = (data, ctx) => {
            if (ctx) {
                    if (!ctx['__handlebar_ctx_id']) {
                    ctx.__handlebar_ctx_id = ++document.__handlebar_custom_loader.__next_obj_id;
                    document.__handlebar_custom_loader.__registered_ctx[ctx.__handlebar_ctx_id] = ctx;
                }
                data.__handlebar_ctx_id = ctx.__handlebar_ctx_id;
            }
            
            const generated_html = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"carousel-viewport\">\r\n    <div class=\"carousel-item-image\">\r\n        "
    + container.escapeExpression((lookupProperty(helpers,"item_image")||(depth0 && lookupProperty(depth0,"item_image"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"item") : depth0),{"name":"item_image","hash":{},"data":data,"loc":{"start":{"line":3,"column":8},"end":{"line":3,"column":27}}}))
    + "\r\n    </div>\r\n    <div class=\"carousel-description\"></div>\r\n</div>";
},"useData":true})(data);
            const body = parser.parseFromString(generated_html, 'text/html').body;
            if (body.children.length === 1)
                return body.children[0];
            
            // Force children generation
            const children = [];
            for (let i = 0; i < body.children.length; ++i)
                children.push(body.children[i]);
            return children;
        }
        

/***/ }),

/***/ "./client/layout/widgets/components/context_action.hbs":
/*!*************************************************************!*\
  !*** ./client/layout/widgets/components/context_action.hbs ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
        const parser = new DOMParser();

        // Used to register contexts
        if (!document.__handlebar_custom_loader)
            document.__handlebar_custom_loader = {
                __next_obj_id: 0,
                __registered_ctx: {}
            }
        
        Handlebars.get_mime_icons = () => JSON.parse('{"application":{"content":{"javascript":"/images/icons/mime-icons/application/javascript.png","json":"/images/icons/mime-icons/application/json.png","pdf":"/images/icons/mime-icons/application/pdf.png","rar":"/images/icons/mime-icons/application/rar.png","tar":"/images/icons/mime-icons/application/tar.png","zip":"/images/icons/mime-icons/application/zip.png"},"base":"/images/icons/mime-icons/application.png"},"audio":{"base":"/images/icons/mime-icons/audio.png"},"chemical":{"base":"/images/icons/mime-icons/chemical.png"},"font":{"base":"/images/icons/mime-icons/font.png"},"gcode":{"base":"/images/icons/mime-icons/gcode.png"},"image":{"base":"/images/icons/mime-icons/image.png"},"message":{"base":"/images/icons/mime-icons/message.png"},"model":{"base":"/images/icons/mime-icons/model.png"},"text":{"content":{"css":"/images/icons/mime-icons/text/css.png","markdown":"/images/icons/mime-icons/text/markdown.png","plain":"/images/icons/mime-icons/text/plain.png","template":"/images/icons/mime-icons/text/template.png"},"base":"/images/icons/mime-icons/text.png"},"video":{"base":"/images/icons/mime-icons/video.png"},"x-conference":{"base":"/images/icons/mime-icons/x-conference.png"}}');
        
        module.exports = (data, ctx) => {
            if (ctx) {
                    if (!ctx['__handlebar_ctx_id']) {
                    ctx.__handlebar_ctx_id = ++document.__handlebar_custom_loader.__next_obj_id;
                    document.__handlebar_custom_loader.__registered_ctx[ctx.__handlebar_ctx_id] = ctx;
                }
                data.__handlebar_ctx_id = ctx.__handlebar_ctx_id;
            }
            
            const generated_html = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=container.lambda, alias2=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "            <button onclick=\"window.context_action.click_object('"
    + alias2(alias1((depth0 != null ? lookupProperty(depth0,"title") : depth0), depth0))
    + "')\" "
    + ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"checked") : depth0),{"name":"if","hash":{},"fn":container.program(2, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":3,"column":83},"end":{"line":3,"column":133}}})) != null ? stack1 : "")
    + ">\r\n                <img src=\""
    + alias2(alias1((depth0 != null ? lookupProperty(depth0,"image") : depth0), depth0))
    + "\" alt=\""
    + alias2(alias1((depth0 != null ? lookupProperty(depth0,"title") : depth0), depth0))
    + "\">\r\n                <p>"
    + alias2(alias1((depth0 != null ? lookupProperty(depth0,"title") : depth0), depth0))
    + "</p>\r\n            </button>\r\n";
},"2":function(container,depth0,helpers,partials,data) {
    return "class=\"context-checked\"";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"context-action-box\">\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"actions") : depth0),{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":2,"column":4},"end":{"line":7,"column":13}}})) != null ? stack1 : "")
    + "</div>";
},"useData":true})(data);
            const body = parser.parseFromString(generated_html, 'text/html').body;
            if (body.children.length === 1)
                return body.children[0];
            
            // Force children generation
            const children = [];
            for (let i = 0; i < body.children.length; ++i)
                children.push(body.children[i]);
            return children;
        }
        

/***/ }),

/***/ "./client/layout/widgets/create_repos/create_repos.hbs":
/*!*************************************************************!*\
  !*** ./client/layout/widgets/create_repos/create_repos.hbs ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
        const parser = new DOMParser();

        // Used to register contexts
        if (!document.__handlebar_custom_loader)
            document.__handlebar_custom_loader = {
                __next_obj_id: 0,
                __registered_ctx: {}
            }
        
        Handlebars.get_mime_icons = () => JSON.parse('{"application":{"content":{"javascript":"/images/icons/mime-icons/application/javascript.png","json":"/images/icons/mime-icons/application/json.png","pdf":"/images/icons/mime-icons/application/pdf.png","rar":"/images/icons/mime-icons/application/rar.png","tar":"/images/icons/mime-icons/application/tar.png","zip":"/images/icons/mime-icons/application/zip.png"},"base":"/images/icons/mime-icons/application.png"},"audio":{"base":"/images/icons/mime-icons/audio.png"},"chemical":{"base":"/images/icons/mime-icons/chemical.png"},"font":{"base":"/images/icons/mime-icons/font.png"},"gcode":{"base":"/images/icons/mime-icons/gcode.png"},"image":{"base":"/images/icons/mime-icons/image.png"},"message":{"base":"/images/icons/mime-icons/message.png"},"model":{"base":"/images/icons/mime-icons/model.png"},"text":{"content":{"css":"/images/icons/mime-icons/text/css.png","markdown":"/images/icons/mime-icons/text/markdown.png","plain":"/images/icons/mime-icons/text/plain.png","template":"/images/icons/mime-icons/text/template.png"},"base":"/images/icons/mime-icons/text.png"},"video":{"base":"/images/icons/mime-icons/video.png"},"x-conference":{"base":"/images/icons/mime-icons/x-conference.png"}}');
        
        module.exports = (data, ctx) => {
            if (ctx) {
                    if (!ctx['__handlebar_ctx_id']) {
                    ctx.__handlebar_ctx_id = ++document.__handlebar_custom_loader.__next_obj_id;
                    document.__handlebar_custom_loader.__registered_ctx[ctx.__handlebar_ctx_id] = ctx;
                }
                data.__handlebar_ctx_id = ctx.__handlebar_ctx_id;
            }
            
            const generated_html = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<h1>Nouveau dépôt</h1>\r\n<form action=\"/api/create-repos\" method=\"post\">\r\n    <div class=\"field\">\r\n        <label for='name'>\r\n            <input type=\"text\" name=\"name\" placeholder=\"Nom\" id=\"name\" required>\r\n        </label>\r\n    </div>\r\n    <div class=\"field\">\r\n        <label for='type'>\r\n            <select name=\"type\" onChange=\"\" id=\"type\">\r\n                <option>Invisible</option>\r\n                <option>Publique</option>\r\n                <option>Privé</option>\r\n            </select>\r\n        </label>\r\n    </div>\r\n    <input type=\"submit\" value=\"Nouveau dépot\">\r\n</form>";
},"useData":true})(data);
            const body = parser.parseFromString(generated_html, 'text/html').body;
            if (body.children.length === 1)
                return body.children[0];
            
            // Force children generation
            const children = [];
            for (let i = 0; i < body.children.length; ++i)
                children.push(body.children[i]);
            return children;
        }
        

/***/ }),

/***/ "./client/layout/widgets/delete_repos/delete_repos.hbs":
/*!*************************************************************!*\
  !*** ./client/layout/widgets/delete_repos/delete_repos.hbs ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
        const parser = new DOMParser();

        // Used to register contexts
        if (!document.__handlebar_custom_loader)
            document.__handlebar_custom_loader = {
                __next_obj_id: 0,
                __registered_ctx: {}
            }
        
        Handlebars.get_mime_icons = () => JSON.parse('{"application":{"content":{"javascript":"/images/icons/mime-icons/application/javascript.png","json":"/images/icons/mime-icons/application/json.png","pdf":"/images/icons/mime-icons/application/pdf.png","rar":"/images/icons/mime-icons/application/rar.png","tar":"/images/icons/mime-icons/application/tar.png","zip":"/images/icons/mime-icons/application/zip.png"},"base":"/images/icons/mime-icons/application.png"},"audio":{"base":"/images/icons/mime-icons/audio.png"},"chemical":{"base":"/images/icons/mime-icons/chemical.png"},"font":{"base":"/images/icons/mime-icons/font.png"},"gcode":{"base":"/images/icons/mime-icons/gcode.png"},"image":{"base":"/images/icons/mime-icons/image.png"},"message":{"base":"/images/icons/mime-icons/message.png"},"model":{"base":"/images/icons/mime-icons/model.png"},"text":{"content":{"css":"/images/icons/mime-icons/text/css.png","markdown":"/images/icons/mime-icons/text/markdown.png","plain":"/images/icons/mime-icons/text/plain.png","template":"/images/icons/mime-icons/text/template.png"},"base":"/images/icons/mime-icons/text.png"},"video":{"base":"/images/icons/mime-icons/video.png"},"x-conference":{"base":"/images/icons/mime-icons/x-conference.png"}}');
        
        module.exports = (data, ctx) => {
            if (ctx) {
                    if (!ctx['__handlebar_ctx_id']) {
                    ctx.__handlebar_ctx_id = ++document.__handlebar_custom_loader.__next_obj_id;
                    document.__handlebar_custom_loader.__registered_ctx[ctx.__handlebar_ctx_id] = ctx;
                }
                data.__handlebar_ctx_id = ctx.__handlebar_ctx_id;
            }
            
            const generated_html = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<h1>Supprimer ce dépôt et toutes ses données ?</h1>\r\n\r\n<div class=\"progress-container\">\r\n    <div class=\"progress-bar\"></div>\r\n</div>\r\n<div class=\"delete-repos\">\r\n    <button onclick=\"modal.close_modal()\" class=\"cancel-button\">Annuler</button>\r\n    <input type=\"submit\" onclick=\""
    + container.escapeExpression((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),"clicked()",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":8,"column":34},"end":{"line":8,"column":53}}}))
    + "\" value=\"Veuillez patienter\" id=\"countdown-button\" disabled>\r\n</div>";
},"useData":true})(data);
            const body = parser.parseFromString(generated_html, 'text/html').body;
            if (body.children.length === 1)
                return body.children[0];
            
            // Force children generation
            const children = [];
            for (let i = 0; i < body.children.length; ++i)
                children.push(body.children[i]);
            return children;
        }
        

/***/ }),

/***/ "./client/layout/widgets/edit_repos/edit_repos.hbs":
/*!*********************************************************!*\
  !*** ./client/layout/widgets/edit_repos/edit_repos.hbs ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
        const parser = new DOMParser();

        // Used to register contexts
        if (!document.__handlebar_custom_loader)
            document.__handlebar_custom_loader = {
                __next_obj_id: 0,
                __registered_ctx: {}
            }
        
        Handlebars.get_mime_icons = () => JSON.parse('{"application":{"content":{"javascript":"/images/icons/mime-icons/application/javascript.png","json":"/images/icons/mime-icons/application/json.png","pdf":"/images/icons/mime-icons/application/pdf.png","rar":"/images/icons/mime-icons/application/rar.png","tar":"/images/icons/mime-icons/application/tar.png","zip":"/images/icons/mime-icons/application/zip.png"},"base":"/images/icons/mime-icons/application.png"},"audio":{"base":"/images/icons/mime-icons/audio.png"},"chemical":{"base":"/images/icons/mime-icons/chemical.png"},"font":{"base":"/images/icons/mime-icons/font.png"},"gcode":{"base":"/images/icons/mime-icons/gcode.png"},"image":{"base":"/images/icons/mime-icons/image.png"},"message":{"base":"/images/icons/mime-icons/message.png"},"model":{"base":"/images/icons/mime-icons/model.png"},"text":{"content":{"css":"/images/icons/mime-icons/text/css.png","markdown":"/images/icons/mime-icons/text/markdown.png","plain":"/images/icons/mime-icons/text/plain.png","template":"/images/icons/mime-icons/text/template.png"},"base":"/images/icons/mime-icons/text.png"},"video":{"base":"/images/icons/mime-icons/video.png"},"x-conference":{"base":"/images/icons/mime-icons/x-conference.png"}}');
        
        module.exports = (data, ctx) => {
            if (ctx) {
                    if (!ctx['__handlebar_ctx_id']) {
                    ctx.__handlebar_ctx_id = ++document.__handlebar_custom_loader.__next_obj_id;
                    document.__handlebar_custom_loader.__registered_ctx[ctx.__handlebar_ctx_id] = ctx;
                }
                data.__handlebar_ctx_id = ctx.__handlebar_ctx_id;
            }
            
            const generated_html = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    return "selected";
},"3":function(container,depth0,helpers,partials,data) {
    return "checked";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3="function", alias4=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<h1>Modifier le dépôt "
    + alias4(((helper = (helper = lookupProperty(helpers,"display_name") || (depth0 != null ? lookupProperty(depth0,"display_name") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"display_name","hash":{},"data":data,"loc":{"start":{"line":1,"column":22},"end":{"line":1,"column":38}}}) : helper)))
    + "</h1>\r\n<form>\r\n    <div class=\"field\">\r\n        <p>Nom</p>\r\n        <label for='display_name'>\r\n            <input type=\"text\" name=\"display_name\" placeholder=\"Nom\" id=\"display_name\" required\r\n                   value=\""
    + alias4(((helper = (helper = lookupProperty(helpers,"display_name") || (depth0 != null ? lookupProperty(depth0,"display_name") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"display_name","hash":{},"data":data,"loc":{"start":{"line":7,"column":26},"end":{"line":7,"column":42}}}) : helper)))
    + "\">\r\n        </label>\r\n    </div>\r\n    <div class=\"field\">\r\n        <p>Description</p>\r\n        <label for='description'>\r\n            <textarea name=\"description\" placeholder=\"Description\" id=\"description\" rows=\"8\">"
    + alias4(((helper = (helper = lookupProperty(helpers,"description") || (depth0 != null ? lookupProperty(depth0,"description") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"description","hash":{},"data":data,"loc":{"start":{"line":13,"column":93},"end":{"line":13,"column":108}}}) : helper)))
    + "</textarea>\r\n        </label>\r\n    </div>\r\n    <div class=\"field\">\r\n        <p>Taille maximale des fichiers</p>\r\n        <label for='max_file_size'>\r\n            <input type=\"number\" name=\"max_file_size\" id=\"max_file_size\" required value=\""
    + alias4(((helper = (helper = lookupProperty(helpers,"max_file_size") || (depth0 != null ? lookupProperty(depth0,"max_file_size") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"max_file_size","hash":{},"data":data,"loc":{"start":{"line":19,"column":89},"end":{"line":19,"column":106}}}) : helper)))
    + "\">\r\n        </label>\r\n    </div>\r\n    <div class=\"field\">\r\n        <p>Durée de vie des données invités</p>\r\n        <label for='guest_file_lifetime'>\r\n            <input type=\"number\" name=\"guest_file_lifetime\" id=\"guest_file_lifetime\" required\r\n                   value=\""
    + alias4(((helper = (helper = lookupProperty(helpers,"visitor_file_lifetime") || (depth0 != null ? lookupProperty(depth0,"visitor_file_lifetime") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"visitor_file_lifetime","hash":{},"data":data,"loc":{"start":{"line":26,"column":26},"end":{"line":26,"column":51}}}) : helper)))
    + "\">\r\n        </label>\r\n    </div>\r\n    <div class=\"danger-zone\">\r\n        <h2>⚠️Danger zone⚠️</h2>\r\n        <div class=\"field\">\r\n            <p>Nom dans l'url</p>\r\n            <label for='name'>\r\n                <input type=\"text\" name=\"name\" id=\"name\" required value=\""
    + alias4(((helper = (helper = lookupProperty(helpers,"name") || (depth0 != null ? lookupProperty(depth0,"name") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"name","hash":{},"data":data,"loc":{"start":{"line":34,"column":73},"end":{"line":34,"column":81}}}) : helper)))
    + "\">\r\n            </label>\r\n        </div>\r\n        <div class=\"field\">\r\n            <p>Visibilité</p>\r\n            <label for='status'>\r\n                <select name=\"status\" onChange=\"\" id=\"status\">\r\n                    <option value=\"hidden\" "
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"prop_hidden") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":41,"column":43},"end":{"line":41,"column":77}}})) != null ? stack1 : "")
    + ">Invisible</option>\r\n                    <option value=\"public\" "
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"prop_public") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":42,"column":43},"end":{"line":42,"column":77}}})) != null ? stack1 : "")
    + ">Publique</option>\r\n                    <option value=\"private\" "
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"prop_private") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":43,"column":44},"end":{"line":43,"column":79}}})) != null ? stack1 : "")
    + ">Privé</option>\r\n                </select>\r\n            </label>\r\n        </div>\r\n        <div class=\"field\">\r\n            <p>Ouvrir la mise en ligne de fichiers à tous </p>\r\n            <label for='allow_visitor_upload'>\r\n                <input type=\"checkbox\" name=\"allow_visitor_upload\" id=\"allow_visitor_upload\"\r\n                       "
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"allow_visitor_upload") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":51,"column":23},"end":{"line":51,"column":65}}})) != null ? stack1 : "")
    + ">\r\n            </label>\r\n        </div>\r\n        <button type=\"button\" class=\"cancel-button\" onclick=\""
    + alias4((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"on_delete_repos()",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":54,"column":61},"end":{"line":54,"column":88}}}))
    + "\">Supprimer le dépôt et son\r\n            contenu\r\n        </button>\r\n    </div>\r\n    <input type=\"button\" value=\"Confirmer\" onclick=\""
    + alias4((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"submit()",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":58,"column":52},"end":{"line":58,"column":70}}}))
    + "\">\r\n</form>";
},"useData":true})(data);
            const body = parser.parseFromString(generated_html, 'text/html').body;
            if (body.children.length === 1)
                return body.children[0];
            
            // Force children generation
            const children = [];
            for (let i = 0; i < body.children.length; ++i)
                children.push(body.children[i]);
            return children;
        }
        

/***/ }),

/***/ "./client/layout/widgets/repos_settings/add_authorization.hbs":
/*!********************************************************************!*\
  !*** ./client/layout/widgets/repos_settings/add_authorization.hbs ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
        const parser = new DOMParser();

        // Used to register contexts
        if (!document.__handlebar_custom_loader)
            document.__handlebar_custom_loader = {
                __next_obj_id: 0,
                __registered_ctx: {}
            }
        
        Handlebars.get_mime_icons = () => JSON.parse('{"application":{"content":{"javascript":"/images/icons/mime-icons/application/javascript.png","json":"/images/icons/mime-icons/application/json.png","pdf":"/images/icons/mime-icons/application/pdf.png","rar":"/images/icons/mime-icons/application/rar.png","tar":"/images/icons/mime-icons/application/tar.png","zip":"/images/icons/mime-icons/application/zip.png"},"base":"/images/icons/mime-icons/application.png"},"audio":{"base":"/images/icons/mime-icons/audio.png"},"chemical":{"base":"/images/icons/mime-icons/chemical.png"},"font":{"base":"/images/icons/mime-icons/font.png"},"gcode":{"base":"/images/icons/mime-icons/gcode.png"},"image":{"base":"/images/icons/mime-icons/image.png"},"message":{"base":"/images/icons/mime-icons/message.png"},"model":{"base":"/images/icons/mime-icons/model.png"},"text":{"content":{"css":"/images/icons/mime-icons/text/css.png","markdown":"/images/icons/mime-icons/text/markdown.png","plain":"/images/icons/mime-icons/text/plain.png","template":"/images/icons/mime-icons/text/template.png"},"base":"/images/icons/mime-icons/text.png"},"video":{"base":"/images/icons/mime-icons/video.png"},"x-conference":{"base":"/images/icons/mime-icons/x-conference.png"}}');
        
        module.exports = (data, ctx) => {
            if (ctx) {
                    if (!ctx['__handlebar_ctx_id']) {
                    ctx.__handlebar_ctx_id = ++document.__handlebar_custom_loader.__next_obj_id;
                    document.__handlebar_custom_loader.__registered_ctx[ctx.__handlebar_ctx_id] = ctx;
                }
                data.__handlebar_ctx_id = ctx.__handlebar_ctx_id;
            }
            
            const generated_html = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<h1>Autoriser un nouvel utilisateur</h1>\r\n<form onsubmit=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"add(event)",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":2,"column":16},"end":{"line":2,"column":36}}}))
    + "\">\r\n    <div class=\"field\">\r\n        <label for='username'>\r\n            <input type=\"text\" name=\"username\" placeholder=\"Nom d'utilisateur\" id=\"username\" required>\r\n        </label>\r\n    </div>\r\n    <div class=\"field\">\r\n        <label for='access_type'>\r\n            <select class=\"field\" id='access_type' name=\""
    + alias3(((helper = (helper = lookupProperty(helpers,"access_type") || (depth0 != null ? lookupProperty(depth0,"access_type") : depth0)) != null ? helper : alias2),(typeof helper === "function" ? helper.call(alias1,{"name":"access_type","hash":{},"data":data,"loc":{"start":{"line":10,"column":57},"end":{"line":10,"column":72}}}) : helper)))
    + "\">\r\n                <option value=\"read-only\" selected>Lecture seule</option>\r\n                <option value=\"contributor\">Contributeur</option>\r\n                <option value=\"moderator\">Modérateur</option>\r\n            </select>\r\n        </label>\r\n    </div>\r\n\r\n    <input type=\"submit\" value=\"Autoriser\">\r\n</form>";
},"useData":true})(data);
            const body = parser.parseFromString(generated_html, 'text/html').body;
            if (body.children.length === 1)
                return body.children[0];
            
            // Force children generation
            const children = [];
            for (let i = 0; i < body.children.length; ++i)
                children.push(body.children[i]);
            return children;
        }
        

/***/ }),

/***/ "./client/layout/widgets/repos_settings/authorization.hbs":
/*!****************************************************************!*\
  !*** ./client/layout/widgets/repos_settings/authorization.hbs ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
        const parser = new DOMParser();

        // Used to register contexts
        if (!document.__handlebar_custom_loader)
            document.__handlebar_custom_loader = {
                __next_obj_id: 0,
                __registered_ctx: {}
            }
        
        Handlebars.get_mime_icons = () => JSON.parse('{"application":{"content":{"javascript":"/images/icons/mime-icons/application/javascript.png","json":"/images/icons/mime-icons/application/json.png","pdf":"/images/icons/mime-icons/application/pdf.png","rar":"/images/icons/mime-icons/application/rar.png","tar":"/images/icons/mime-icons/application/tar.png","zip":"/images/icons/mime-icons/application/zip.png"},"base":"/images/icons/mime-icons/application.png"},"audio":{"base":"/images/icons/mime-icons/audio.png"},"chemical":{"base":"/images/icons/mime-icons/chemical.png"},"font":{"base":"/images/icons/mime-icons/font.png"},"gcode":{"base":"/images/icons/mime-icons/gcode.png"},"image":{"base":"/images/icons/mime-icons/image.png"},"message":{"base":"/images/icons/mime-icons/message.png"},"model":{"base":"/images/icons/mime-icons/model.png"},"text":{"content":{"css":"/images/icons/mime-icons/text/css.png","markdown":"/images/icons/mime-icons/text/markdown.png","plain":"/images/icons/mime-icons/text/plain.png","template":"/images/icons/mime-icons/text/template.png"},"base":"/images/icons/mime-icons/text.png"},"video":{"base":"/images/icons/mime-icons/video.png"},"x-conference":{"base":"/images/icons/mime-icons/x-conference.png"}}');
        
        module.exports = (data, ctx) => {
            if (ctx) {
                    if (!ctx['__handlebar_ctx_id']) {
                    ctx.__handlebar_ctx_id = ++document.__handlebar_custom_loader.__next_obj_id;
                    document.__handlebar_custom_loader.__registered_ctx[ctx.__handlebar_ctx_id] = ctx;
                }
                data.__handlebar_ctx_id = ctx.__handlebar_ctx_id;
            }
            
            const generated_html = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    return "root_item";
},"3":function(container,depth0,helpers,partials,data) {
    return "selected";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3="function", alias4=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"repos-setting-authorization\">\r\n    <div class=\"column\">\r\n        <p class=\"field\">"
    + alias4(((helper = (helper = lookupProperty(helpers,"username") || (depth0 != null ? lookupProperty(depth0,"username") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"username","hash":{},"data":data,"loc":{"start":{"line":3,"column":25},"end":{"line":3,"column":37}}}) : helper)))
    + "</p>\r\n    </div>\r\n    <div class=\"column\">\r\n        <p class=\"field\">"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"root_item") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":6,"column":25},"end":{"line":6,"column":58}}})) != null ? stack1 : "")
    + "</p>\r\n    </div>\r\n    <div class=\"column\">\r\n        <select class=\"field\" name=\""
    + alias4(((helper = (helper = lookupProperty(helpers,"access_type") || (depth0 != null ? lookupProperty(depth0,"access_type") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"access_type","hash":{},"data":data,"loc":{"start":{"line":9,"column":36},"end":{"line":9,"column":51}}}) : helper)))
    + "\" onchange=\""
    + alias4((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"set_access_type(event)",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":9,"column":63},"end":{"line":9,"column":95}}}))
    + "\">\r\n            <option value=\"read-only\" "
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"is_read_only") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":10,"column":38},"end":{"line":10,"column":73}}})) != null ? stack1 : "")
    + ">Lecture seule</option>\r\n            <option value=\"contributor\" "
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"is_contributor") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":11,"column":40},"end":{"line":11,"column":77}}})) != null ? stack1 : "")
    + ">Contributeur</option>\r\n            <option value=\"moderator\" "
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"is_moderator") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":12,"column":38},"end":{"line":12,"column":73}}})) != null ? stack1 : "")
    + ">Modérateur</option>\r\n        </select>\r\n    </div>\r\n    <div class=\"column\">\r\n        <button class=\"cancel-button field\" onclick=\""
    + alias4((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"remove(event)",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":16,"column":53},"end":{"line":16,"column":76}}}))
    + "\">X</button>\r\n    </div>\r\n</div>";
},"useData":true})(data);
            const body = parser.parseFromString(generated_html, 'text/html').body;
            if (body.children.length === 1)
                return body.children[0];
            
            // Force children generation
            const children = [];
            for (let i = 0; i < body.children.length; ++i)
                children.push(body.children[i]);
            return children;
        }
        

/***/ }),

/***/ "./client/layout/widgets/repos_settings/infos.hbs":
/*!********************************************************!*\
  !*** ./client/layout/widgets/repos_settings/infos.hbs ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
        const parser = new DOMParser();

        // Used to register contexts
        if (!document.__handlebar_custom_loader)
            document.__handlebar_custom_loader = {
                __next_obj_id: 0,
                __registered_ctx: {}
            }
        
        Handlebars.get_mime_icons = () => JSON.parse('{"application":{"content":{"javascript":"/images/icons/mime-icons/application/javascript.png","json":"/images/icons/mime-icons/application/json.png","pdf":"/images/icons/mime-icons/application/pdf.png","rar":"/images/icons/mime-icons/application/rar.png","tar":"/images/icons/mime-icons/application/tar.png","zip":"/images/icons/mime-icons/application/zip.png"},"base":"/images/icons/mime-icons/application.png"},"audio":{"base":"/images/icons/mime-icons/audio.png"},"chemical":{"base":"/images/icons/mime-icons/chemical.png"},"font":{"base":"/images/icons/mime-icons/font.png"},"gcode":{"base":"/images/icons/mime-icons/gcode.png"},"image":{"base":"/images/icons/mime-icons/image.png"},"message":{"base":"/images/icons/mime-icons/message.png"},"model":{"base":"/images/icons/mime-icons/model.png"},"text":{"content":{"css":"/images/icons/mime-icons/text/css.png","markdown":"/images/icons/mime-icons/text/markdown.png","plain":"/images/icons/mime-icons/text/plain.png","template":"/images/icons/mime-icons/text/template.png"},"base":"/images/icons/mime-icons/text.png"},"video":{"base":"/images/icons/mime-icons/video.png"},"x-conference":{"base":"/images/icons/mime-icons/x-conference.png"}}');
        
        module.exports = (data, ctx) => {
            if (ctx) {
                    if (!ctx['__handlebar_ctx_id']) {
                    ctx.__handlebar_ctx_id = ++document.__handlebar_custom_loader.__next_obj_id;
                    document.__handlebar_custom_loader.__registered_ctx[ctx.__handlebar_ctx_id] = ctx;
                }
                data.__handlebar_ctx_id = ctx.__handlebar_ctx_id;
            }
            
            const generated_html = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var alias1=container.lambda, alias2=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "            <p>- "
    + alias2(alias1((depth0 != null ? lookupProperty(depth0,"count") : depth0), depth0))
    + " "
    + alias2(alias1((depth0 != null ? lookupProperty(depth0,"mimetype") : depth0), depth0))
    + "</p>\r\n";
},"3":function(container,depth0,helpers,partials,data) {
    var alias1=container.lambda, alias2=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "            <p>- "
    + alias2(alias1((depth0 != null ? lookupProperty(depth0,"name") : depth0), depth0))
    + " ("
    + alias2(alias1((depth0 != null ? lookupProperty(depth0,"items") : depth0), depth0))
    + " éléments)</p>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3="function", alias4=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div>\r\n    <p>Dépot :</p><p class=\"smaller\">"
    + alias4(((helper = (helper = lookupProperty(helpers,"total_count") || (depth0 != null ? lookupProperty(depth0,"total_count") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"total_count","hash":{},"data":data,"loc":{"start":{"line":2,"column":37},"end":{"line":2,"column":52}}}) : helper)))
    + " éléments, "
    + alias4(((helper = (helper = lookupProperty(helpers,"total_dirs") || (depth0 != null ? lookupProperty(depth0,"total_dirs") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"total_dirs","hash":{},"data":data,"loc":{"start":{"line":2,"column":63},"end":{"line":2,"column":77}}}) : helper)))
    + " dossiers ("
    + alias4(((helper = (helper = lookupProperty(helpers,"total_size") || (depth0 != null ? lookupProperty(depth0,"total_size") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"total_size","hash":{},"data":data,"loc":{"start":{"line":2,"column":88},"end":{"line":2,"column":102}}}) : helper)))
    + ")</p>\r\n    <p>Dont dans la corbeille :</p><p class=\"smaller\">"
    + alias4(((helper = (helper = lookupProperty(helpers,"trash_count") || (depth0 != null ? lookupProperty(depth0,"trash_count") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"trash_count","hash":{},"data":data,"loc":{"start":{"line":3,"column":54},"end":{"line":3,"column":69}}}) : helper)))
    + " éléments, "
    + alias4(((helper = (helper = lookupProperty(helpers,"trash_dirs") || (depth0 != null ? lookupProperty(depth0,"trash_dirs") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"trash_dirs","hash":{},"data":data,"loc":{"start":{"line":3,"column":80},"end":{"line":3,"column":94}}}) : helper)))
    + " dossiers ("
    + alias4(((helper = (helper = lookupProperty(helpers,"trash_size") || (depth0 != null ? lookupProperty(depth0,"trash_size") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"trash_size","hash":{},"data":data,"loc":{"start":{"line":3,"column":105},"end":{"line":3,"column":119}}}) : helper)))
    + ")</p>\r\n    <p>"
    + alias4(((helper = (helper = lookupProperty(helpers,"num_extensions") || (depth0 != null ? lookupProperty(depth0,"num_extensions") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"num_extensions","hash":{},"data":data,"loc":{"start":{"line":4,"column":7},"end":{"line":4,"column":25}}}) : helper)))
    + " extensions :</p>\r\n    <div class=\"item_list\">\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(alias1,(depth0 != null ? lookupProperty(depth0,"extensions") : depth0),{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":6,"column":8},"end":{"line":8,"column":17}}})) != null ? stack1 : "")
    + "    </div>\r\n    <p>"
    + alias4(((helper = (helper = lookupProperty(helpers,"num_contributors") || (depth0 != null ? lookupProperty(depth0,"num_contributors") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"num_contributors","hash":{},"data":data,"loc":{"start":{"line":10,"column":7},"end":{"line":10,"column":27}}}) : helper)))
    + " contributeurs :</p>\r\n    <div class=\"item_list\">\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(alias1,(depth0 != null ? lookupProperty(depth0,"contributors") : depth0),{"name":"each","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":12,"column":8},"end":{"line":14,"column":17}}})) != null ? stack1 : "")
    + "    </div>\r\n</div>";
},"useData":true})(data);
            const body = parser.parseFromString(generated_html, 'text/html').body;
            if (body.children.length === 1)
                return body.children[0];
            
            // Force children generation
            const children = [];
            for (let i = 0; i < body.children.length; ++i)
                children.push(body.children[i]);
            return children;
        }
        

/***/ }),

/***/ "./client/layout/widgets/toolbar/toolbar_menu.hbs":
/*!********************************************************!*\
  !*** ./client/layout/widgets/toolbar/toolbar_menu.hbs ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
        const parser = new DOMParser();

        // Used to register contexts
        if (!document.__handlebar_custom_loader)
            document.__handlebar_custom_loader = {
                __next_obj_id: 0,
                __registered_ctx: {}
            }
        
        Handlebars.get_mime_icons = () => JSON.parse('{"application":{"content":{"javascript":"/images/icons/mime-icons/application/javascript.png","json":"/images/icons/mime-icons/application/json.png","pdf":"/images/icons/mime-icons/application/pdf.png","rar":"/images/icons/mime-icons/application/rar.png","tar":"/images/icons/mime-icons/application/tar.png","zip":"/images/icons/mime-icons/application/zip.png"},"base":"/images/icons/mime-icons/application.png"},"audio":{"base":"/images/icons/mime-icons/audio.png"},"chemical":{"base":"/images/icons/mime-icons/chemical.png"},"font":{"base":"/images/icons/mime-icons/font.png"},"gcode":{"base":"/images/icons/mime-icons/gcode.png"},"image":{"base":"/images/icons/mime-icons/image.png"},"message":{"base":"/images/icons/mime-icons/message.png"},"model":{"base":"/images/icons/mime-icons/model.png"},"text":{"content":{"css":"/images/icons/mime-icons/text/css.png","markdown":"/images/icons/mime-icons/text/markdown.png","plain":"/images/icons/mime-icons/text/plain.png","template":"/images/icons/mime-icons/text/template.png"},"base":"/images/icons/mime-icons/text.png"},"video":{"base":"/images/icons/mime-icons/video.png"},"x-conference":{"base":"/images/icons/mime-icons/x-conference.png"}}');
        
        module.exports = (data, ctx) => {
            if (ctx) {
                    if (!ctx['__handlebar_ctx_id']) {
                    ctx.__handlebar_ctx_id = ++document.__handlebar_custom_loader.__next_obj_id;
                    document.__handlebar_custom_loader.__registered_ctx[ctx.__handlebar_ctx_id] = ctx;
                }
                data.__handlebar_ctx_id = ctx.__handlebar_ctx_id;
            }
            
            const generated_html = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div id=\"toolbar-menu\">\r\n    <p id=\"toolbar-stats\">vide / 0 fichiers</p>\r\n    <div class=\"search-div\">\r\n        <label>\r\n            <input type=\"text\" placeholder=\"Chercher un élément\" id=\"toolbar-search-text\" onchange\r\n                   onpropertychange\r\n                   onkeyuponpaste oninput=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"update_search(event)",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":7,"column":43},"end":{"line":7,"column":73}}}))
    + "\">\r\n        </label>\r\n        <button onclick=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"search()",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":9,"column":25},"end":{"line":9,"column":43}}}))
    + "\" id=\"toolbar-search\"><img alt=\"search\"\r\n                                                                      src=\"/images/icons/icons8-search-100.png\">\r\n        </button>\r\n    </div>\r\n    <button onclick=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"download()",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":13,"column":21},"end":{"line":13,"column":41}}}))
    + "\"><img src=\"/images/icons/icons8-download-96.png\" alt=\"download\"></button>\r\n    <button onclick=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"more()",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":14,"column":21},"end":{"line":14,"column":37}}}))
    + "\"><img alt=\"more\" src=\"/images/icons/icons8-ellipsis-90.png\"></button>\r\n</div>";
},"useData":true})(data);
            const body = parser.parseFromString(generated_html, 'text/html').body;
            if (body.children.length === 1)
                return body.children[0];
            
            // Force children generation
            const children = [];
            for (let i = 0; i < body.children.length; ++i)
                children.push(body.children[i]);
            return children;
        }
        

/***/ }),

/***/ "./client/layout/widgets/upload/directory.hbs":
/*!****************************************************!*\
  !*** ./client/layout/widgets/upload/directory.hbs ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
        const parser = new DOMParser();

        // Used to register contexts
        if (!document.__handlebar_custom_loader)
            document.__handlebar_custom_loader = {
                __next_obj_id: 0,
                __registered_ctx: {}
            }
        
        Handlebars.get_mime_icons = () => JSON.parse('{"application":{"content":{"javascript":"/images/icons/mime-icons/application/javascript.png","json":"/images/icons/mime-icons/application/json.png","pdf":"/images/icons/mime-icons/application/pdf.png","rar":"/images/icons/mime-icons/application/rar.png","tar":"/images/icons/mime-icons/application/tar.png","zip":"/images/icons/mime-icons/application/zip.png"},"base":"/images/icons/mime-icons/application.png"},"audio":{"base":"/images/icons/mime-icons/audio.png"},"chemical":{"base":"/images/icons/mime-icons/chemical.png"},"font":{"base":"/images/icons/mime-icons/font.png"},"gcode":{"base":"/images/icons/mime-icons/gcode.png"},"image":{"base":"/images/icons/mime-icons/image.png"},"message":{"base":"/images/icons/mime-icons/message.png"},"model":{"base":"/images/icons/mime-icons/model.png"},"text":{"content":{"css":"/images/icons/mime-icons/text/css.png","markdown":"/images/icons/mime-icons/text/markdown.png","plain":"/images/icons/mime-icons/text/plain.png","template":"/images/icons/mime-icons/text/template.png"},"base":"/images/icons/mime-icons/text.png"},"video":{"base":"/images/icons/mime-icons/video.png"},"x-conference":{"base":"/images/icons/mime-icons/x-conference.png"}}');
        
        module.exports = (data, ctx) => {
            if (ctx) {
                    if (!ctx['__handlebar_ctx_id']) {
                    ctx.__handlebar_ctx_id = ++document.__handlebar_custom_loader.__next_obj_id;
                    document.__handlebar_custom_loader.__registered_ctx[ctx.__handlebar_ctx_id] = ctx;
                }
                data.__handlebar_ctx_id = ctx.__handlebar_ctx_id;
            }
            
            const generated_html = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"folder\">\r\n    <div class=\"folder-button\"  onclick=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"clicked()",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":2,"column":41},"end":{"line":2,"column":60}}}))
    + "\" onmouseenter=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"enter()",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":2,"column":76},"end":{"line":2,"column":93}}}))
    + "\" onmouseleave=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"leave()",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":2,"column":109},"end":{"line":2,"column":126}}}))
    + "\">\r\n        <img src=\"/images/icons/icons8-folder-96.png\" alt=\"folder\">\r\n        <h2>loading...</h2>\r\n        <button class=\"trash cancel-button\" style=\"opacity: 0\" onclick=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"removed()",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":5,"column":72},"end":{"line":5,"column":91}}}))
    + "\">\r\n            <img src='/images/icons/icons8-trash-52.png' alt=\"supprimer\">\r\n        </button>\r\n    </div>\r\n    <div class=\"folder-content\" style=\"display: none\">\r\n    </div>\r\n</div>\r\n";
},"useData":true})(data);
            const body = parser.parseFromString(generated_html, 'text/html').body;
            if (body.children.length === 1)
                return body.children[0];
            
            // Force children generation
            const children = [];
            for (let i = 0; i < body.children.length; ++i)
                children.push(body.children[i]);
            return children;
        }
        

/***/ }),

/***/ "./client/layout/widgets/upload/file.hbs":
/*!***********************************************!*\
  !*** ./client/layout/widgets/upload/file.hbs ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
        const parser = new DOMParser();

        // Used to register contexts
        if (!document.__handlebar_custom_loader)
            document.__handlebar_custom_loader = {
                __next_obj_id: 0,
                __registered_ctx: {}
            }
        
        Handlebars.get_mime_icons = () => JSON.parse('{"application":{"content":{"javascript":"/images/icons/mime-icons/application/javascript.png","json":"/images/icons/mime-icons/application/json.png","pdf":"/images/icons/mime-icons/application/pdf.png","rar":"/images/icons/mime-icons/application/rar.png","tar":"/images/icons/mime-icons/application/tar.png","zip":"/images/icons/mime-icons/application/zip.png"},"base":"/images/icons/mime-icons/application.png"},"audio":{"base":"/images/icons/mime-icons/audio.png"},"chemical":{"base":"/images/icons/mime-icons/chemical.png"},"font":{"base":"/images/icons/mime-icons/font.png"},"gcode":{"base":"/images/icons/mime-icons/gcode.png"},"image":{"base":"/images/icons/mime-icons/image.png"},"message":{"base":"/images/icons/mime-icons/message.png"},"model":{"base":"/images/icons/mime-icons/model.png"},"text":{"content":{"css":"/images/icons/mime-icons/text/css.png","markdown":"/images/icons/mime-icons/text/markdown.png","plain":"/images/icons/mime-icons/text/plain.png","template":"/images/icons/mime-icons/text/template.png"},"base":"/images/icons/mime-icons/text.png"},"video":{"base":"/images/icons/mime-icons/video.png"},"x-conference":{"base":"/images/icons/mime-icons/x-conference.png"}}');
        
        module.exports = (data, ctx) => {
            if (ctx) {
                    if (!ctx['__handlebar_ctx_id']) {
                    ctx.__handlebar_ctx_id = ++document.__handlebar_custom_loader.__next_obj_id;
                    document.__handlebar_custom_loader.__registered_ctx[ctx.__handlebar_ctx_id] = ctx;
                }
                data.__handlebar_ctx_id = ctx.__handlebar_ctx_id;
            }
            
            const generated_html = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, alias4="function", lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"file\" onmouseenter=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"enter()",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":1,"column":32},"end":{"line":1,"column":49}}}))
    + "\" onmouseleave=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"leave()",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":1,"column":65},"end":{"line":1,"column":82}}}))
    + "\">\r\n    "
    + alias3((lookupProperty(helpers,"item_thumbnail")||(depth0 && lookupProperty(depth0,"item_thumbnail"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"item") : depth0),{"name":"item_thumbnail","hash":{},"data":data,"loc":{"start":{"line":2,"column":4},"end":{"line":2,"column":27}}}))
    + "\r\n    <p>"
    + alias3(((helper = (helper = lookupProperty(helpers,"name") || (depth0 != null ? lookupProperty(depth0,"name") : depth0)) != null ? helper : alias2),(typeof helper === alias4 ? helper.call(alias1,{"name":"name","hash":{},"data":data,"loc":{"start":{"line":3,"column":7},"end":{"line":3,"column":15}}}) : helper)))
    + " ("
    + alias3(((helper = (helper = lookupProperty(helpers,"size") || (depth0 != null ? lookupProperty(depth0,"size") : depth0)) != null ? helper : alias2),(typeof helper === alias4 ? helper.call(alias1,{"name":"size","hash":{},"data":data,"loc":{"start":{"line":3,"column":17},"end":{"line":3,"column":25}}}) : helper)))
    + ")</p>\r\n    <button class=\"trash cancel-button\" style=\"opacity: 0\" onclick=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"removed()",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":4,"column":68},"end":{"line":4,"column":87}}}))
    + "\">\r\n        <img src='/images/icons/icons8-trash-52.png' alt=\"supprimer\">\r\n    </button>\r\n</div>\r\n";
},"useData":true})(data);
            const body = parser.parseFromString(generated_html, 'text/html').body;
            if (body.children.length === 1)
                return body.children[0];
            
            // Force children generation
            const children = [];
            for (let i = 0; i < body.children.length; ++i)
                children.push(body.children[i]);
            return children;
        }
        

/***/ }),

/***/ "./client/layout/widgets/upload/upload_form.hbs":
/*!******************************************************!*\
  !*** ./client/layout/widgets/upload/upload_form.hbs ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
        const parser = new DOMParser();

        // Used to register contexts
        if (!document.__handlebar_custom_loader)
            document.__handlebar_custom_loader = {
                __next_obj_id: 0,
                __registered_ctx: {}
            }
        
        Handlebars.get_mime_icons = () => JSON.parse('{"application":{"content":{"javascript":"/images/icons/mime-icons/application/javascript.png","json":"/images/icons/mime-icons/application/json.png","pdf":"/images/icons/mime-icons/application/pdf.png","rar":"/images/icons/mime-icons/application/rar.png","tar":"/images/icons/mime-icons/application/tar.png","zip":"/images/icons/mime-icons/application/zip.png"},"base":"/images/icons/mime-icons/application.png"},"audio":{"base":"/images/icons/mime-icons/audio.png"},"chemical":{"base":"/images/icons/mime-icons/chemical.png"},"font":{"base":"/images/icons/mime-icons/font.png"},"gcode":{"base":"/images/icons/mime-icons/gcode.png"},"image":{"base":"/images/icons/mime-icons/image.png"},"message":{"base":"/images/icons/mime-icons/message.png"},"model":{"base":"/images/icons/mime-icons/model.png"},"text":{"content":{"css":"/images/icons/mime-icons/text/css.png","markdown":"/images/icons/mime-icons/text/markdown.png","plain":"/images/icons/mime-icons/text/plain.png","template":"/images/icons/mime-icons/text/template.png"},"base":"/images/icons/mime-icons/text.png"},"video":{"base":"/images/icons/mime-icons/video.png"},"x-conference":{"base":"/images/icons/mime-icons/x-conference.png"}}');
        
        module.exports = (data, ctx) => {
            if (ctx) {
                    if (!ctx['__handlebar_ctx_id']) {
                    ctx.__handlebar_ctx_id = ++document.__handlebar_custom_loader.__next_obj_id;
                    document.__handlebar_custom_loader.__registered_ctx[ctx.__handlebar_ctx_id] = ctx;
                }
                data.__handlebar_ctx_id = ctx.__handlebar_ctx_id;
            }
            
            const generated_html = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<h1>Envoyer des fichiers</h1>\r\n<div class=\"file-list-box\"></div>\r\n<div class=\"bottom-buttons\">\r\n    <button class=\"plus-button\" onclick=\"window.upload.open_file_dialog()\">+</button>\r\n    <button class=\"plus-button right-plus\" onclick=\"window.upload.cleanup_button()\"><img src=\"/images/icons/icons8-clean-52.png\"></button>\r\n    <button class=\"cancel-button\" onclick=\"window.modal.close_modal()\">Annuler</button>\r\n    <button class=\"confirm-button\" onclick=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"send()",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":7,"column":44},"end":{"line":7,"column":60}}}))
    + "\">Envoyer</button>\r\n    <div class=\"global-status\" style=\"display: none\">\r\n        <div class=\"progress-container\">\r\n            <p>Initialisation...</p>\r\n            <div class=\"sub-progress-bar\"></div>\r\n            <div class=\"progress-bar\"></div>\r\n        </div>\r\n        <button onclick=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"pause(this)",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":14,"column":25},"end":{"line":14,"column":46}}}))
    + "\"><img src=\"/images/icons/icons8-pause-30.png\" alt=\"pause\"></button>\r\n    </div>\r\n</div>";
},"useData":true})(data);
            const body = parser.parseFromString(generated_html, 'text/html').body;
            if (body.children.length === 1)
                return body.children[0];
            
            // Force children generation
            const children = [];
            for (let i = 0; i < body.children.length; ++i)
                children.push(body.children[i]);
            return children;
        }
        

/***/ }),

/***/ "./client/layout/widgets/user_settings/user_infos.hbs":
/*!************************************************************!*\
  !*** ./client/layout/widgets/user_settings/user_infos.hbs ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
        const parser = new DOMParser();

        // Used to register contexts
        if (!document.__handlebar_custom_loader)
            document.__handlebar_custom_loader = {
                __next_obj_id: 0,
                __registered_ctx: {}
            }
        
        Handlebars.get_mime_icons = () => JSON.parse('{"application":{"content":{"javascript":"/images/icons/mime-icons/application/javascript.png","json":"/images/icons/mime-icons/application/json.png","pdf":"/images/icons/mime-icons/application/pdf.png","rar":"/images/icons/mime-icons/application/rar.png","tar":"/images/icons/mime-icons/application/tar.png","zip":"/images/icons/mime-icons/application/zip.png"},"base":"/images/icons/mime-icons/application.png"},"audio":{"base":"/images/icons/mime-icons/audio.png"},"chemical":{"base":"/images/icons/mime-icons/chemical.png"},"font":{"base":"/images/icons/mime-icons/font.png"},"gcode":{"base":"/images/icons/mime-icons/gcode.png"},"image":{"base":"/images/icons/mime-icons/image.png"},"message":{"base":"/images/icons/mime-icons/message.png"},"model":{"base":"/images/icons/mime-icons/model.png"},"text":{"content":{"css":"/images/icons/mime-icons/text/css.png","markdown":"/images/icons/mime-icons/text/markdown.png","plain":"/images/icons/mime-icons/text/plain.png","template":"/images/icons/mime-icons/text/template.png"},"base":"/images/icons/mime-icons/text.png"},"video":{"base":"/images/icons/mime-icons/video.png"},"x-conference":{"base":"/images/icons/mime-icons/x-conference.png"}}');
        
        module.exports = (data, ctx) => {
            if (ctx) {
                    if (!ctx['__handlebar_ctx_id']) {
                    ctx.__handlebar_ctx_id = ++document.__handlebar_custom_loader.__next_obj_id;
                    document.__handlebar_custom_loader.__registered_ctx[ctx.__handlebar_ctx_id] = ctx;
                }
                data.__handlebar_ctx_id = ctx.__handlebar_ctx_id;
            }
            
            const generated_html = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    return "checked";
},"3":function(container,depth0,helpers,partials,data) {
    var alias1=container.lambda, alias2=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                <div class=\"hseparator\"></div>\r\n                <div class=\"device\">\r\n                    <p class=\"device-name\">"
    + alias2(alias1((depth0 != null ? lookupProperty(depth0,"device") : depth0), depth0))
    + "</p>\r\n                    <p>"
    + alias2(alias1((depth0 != null ? lookupProperty(depth0,"expdate") : depth0), depth0))
    + "</p>\r\n                    <button class=\"cancel-button\" token="
    + alias2(alias1((depth0 != null ? lookupProperty(depth0,"token") : depth0), depth0))
    + " onclick=\"window.user_settings.get().delete_auth_token(this)\"><img src='/images/icons/icons8-trash-52.png'></button>\r\n                </div>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=container.lambda, alias2=container.escapeExpression, alias3=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div>\r\n    <h1>Informations Utilisateur</h1>\r\n    <div class=\"hseparator\"></div>\r\n    <h2>Données personnelles</h2>\r\n    <div class=\"table\">\r\n        <div class=\"fields\">\r\n            <p>Nom</p>\r\n            <p>Email</p>\r\n            <p>Rôle</p>\r\n            <p>Mot de passe</p>\r\n            <p>Email publique</p>\r\n        </div>\r\n        <div class=\"values\">\r\n            <p>"
    + alias2(alias1(((stack1 = (depth0 != null ? lookupProperty(depth0,"user") : depth0)) != null ? lookupProperty(stack1,"name") : stack1), depth0))
    + "</p>\r\n            <p>"
    + alias2(alias1(((stack1 = (depth0 != null ? lookupProperty(depth0,"user") : depth0)) != null ? lookupProperty(stack1,"email") : stack1), depth0))
    + "</p>\r\n            <p>"
    + alias2(alias1(((stack1 = (depth0 != null ? lookupProperty(depth0,"user") : depth0)) != null ? lookupProperty(stack1,"role") : stack1), depth0))
    + "</p>\r\n            <button onclick=\""
    + alias2((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||container.hooks.helperMissing).call(alias3,"reset_password()",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":17,"column":29},"end":{"line":17,"column":55}}}))
    + "\">Changer le mot de passe</button>\r\n            <label>\r\n                <input type=\"checkbox\" "
    + ((stack1 = lookupProperty(helpers,"if").call(alias3,((stack1 = (depth0 != null ? lookupProperty(depth0,"user") : depth0)) != null ? lookupProperty(stack1,"allow_contact") : stack1),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":19,"column":39},"end":{"line":19,"column":79}}})) != null ? stack1 : "")
    + ">\r\n            </label>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"hseparator\"></div>\r\n    <div>\r\n        <h2>Appareils connectés</h2>\r\n        <div id=\"connected-devices-list\">\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(alias3,(depth0 != null ? lookupProperty(depth0,"tokens") : depth0),{"name":"each","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":28,"column":12},"end":{"line":35,"column":21}}})) != null ? stack1 : "")
    + "\r\n        </div>\r\n    </div>\r\n    <div class=\"hseparator\"></div>\r\n</div>";
},"useData":true})(data);
            const body = parser.parseFromString(generated_html, 'text/html').body;
            if (body.children.length === 1)
                return body.children[0];
            
            // Force children generation
            const children = [];
            for (let i = 0; i < body.children.length; ++i)
                children.push(body.children[i]);
            return children;
        }
        

/***/ }),

/***/ "./client/layout/widgets/viewport/directory.hbs":
/*!******************************************************!*\
  !*** ./client/layout/widgets/viewport/directory.hbs ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
        const parser = new DOMParser();

        // Used to register contexts
        if (!document.__handlebar_custom_loader)
            document.__handlebar_custom_loader = {
                __next_obj_id: 0,
                __registered_ctx: {}
            }
        
        Handlebars.get_mime_icons = () => JSON.parse('{"application":{"content":{"javascript":"/images/icons/mime-icons/application/javascript.png","json":"/images/icons/mime-icons/application/json.png","pdf":"/images/icons/mime-icons/application/pdf.png","rar":"/images/icons/mime-icons/application/rar.png","tar":"/images/icons/mime-icons/application/tar.png","zip":"/images/icons/mime-icons/application/zip.png"},"base":"/images/icons/mime-icons/application.png"},"audio":{"base":"/images/icons/mime-icons/audio.png"},"chemical":{"base":"/images/icons/mime-icons/chemical.png"},"font":{"base":"/images/icons/mime-icons/font.png"},"gcode":{"base":"/images/icons/mime-icons/gcode.png"},"image":{"base":"/images/icons/mime-icons/image.png"},"message":{"base":"/images/icons/mime-icons/message.png"},"model":{"base":"/images/icons/mime-icons/model.png"},"text":{"content":{"css":"/images/icons/mime-icons/text/css.png","markdown":"/images/icons/mime-icons/text/markdown.png","plain":"/images/icons/mime-icons/text/plain.png","template":"/images/icons/mime-icons/text/template.png"},"base":"/images/icons/mime-icons/text.png"},"video":{"base":"/images/icons/mime-icons/video.png"},"x-conference":{"base":"/images/icons/mime-icons/x-conference.png"}}');
        
        module.exports = (data, ctx) => {
            if (ctx) {
                    if (!ctx['__handlebar_ctx_id']) {
                    ctx.__handlebar_ctx_id = ++document.__handlebar_custom_loader.__next_obj_id;
                    document.__handlebar_custom_loader.__registered_ctx[ctx.__handlebar_ctx_id] = ctx;
                }
                data.__handlebar_ctx_id = ctx.__handlebar_ctx_id;
            }
            
            const generated_html = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class='object-button global-prevent-select' ondblclick=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"dblclicked(event)",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":1,"column":61},"end":{"line":1,"column":88}}}))
    + "\" onclick=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"clicked(event)",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":1,"column":99},"end":{"line":1,"column":123}}}))
    + "\"\r\n     onmouseenter=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"enter()",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":2,"column":19},"end":{"line":2,"column":36}}}))
    + "\" onmouseleave=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"leave()",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":2,"column":52},"end":{"line":2,"column":69}}}))
    + "\" oncontextmenu=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"context_menu(event)",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":2,"column":86},"end":{"line":2,"column":115}}}))
    + "\">\r\n    <div class=\"item-preview folder\">\r\n        <div class=\"item_thumbnail\">\r\n            "
    + alias3((lookupProperty(helpers,"item_thumbnail")||(depth0 && lookupProperty(depth0,"item_thumbnail"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"item") : depth0),{"name":"item_thumbnail","hash":{},"data":data,"loc":{"start":{"line":5,"column":12},"end":{"line":5,"column":35}}}))
    + "\r\n        </div>\r\n        <p>"
    + alias3(container.lambda(((stack1 = (depth0 != null ? lookupProperty(depth0,"item") : depth0)) != null ? lookupProperty(stack1,"name") : stack1), depth0))
    + "</p>\r\n    </div>\r\n</div>\r\n";
},"useData":true})(data);
            const body = parser.parseFromString(generated_html, 'text/html').body;
            if (body.children.length === 1)
                return body.children[0];
            
            // Force children generation
            const children = [];
            for (let i = 0; i < body.children.length; ++i)
                children.push(body.children[i]);
            return children;
        }
        

/***/ }),

/***/ "./client/layout/widgets/viewport/file.hbs":
/*!*************************************************!*\
  !*** ./client/layout/widgets/viewport/file.hbs ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
        const parser = new DOMParser();

        // Used to register contexts
        if (!document.__handlebar_custom_loader)
            document.__handlebar_custom_loader = {
                __next_obj_id: 0,
                __registered_ctx: {}
            }
        
        Handlebars.get_mime_icons = () => JSON.parse('{"application":{"content":{"javascript":"/images/icons/mime-icons/application/javascript.png","json":"/images/icons/mime-icons/application/json.png","pdf":"/images/icons/mime-icons/application/pdf.png","rar":"/images/icons/mime-icons/application/rar.png","tar":"/images/icons/mime-icons/application/tar.png","zip":"/images/icons/mime-icons/application/zip.png"},"base":"/images/icons/mime-icons/application.png"},"audio":{"base":"/images/icons/mime-icons/audio.png"},"chemical":{"base":"/images/icons/mime-icons/chemical.png"},"font":{"base":"/images/icons/mime-icons/font.png"},"gcode":{"base":"/images/icons/mime-icons/gcode.png"},"image":{"base":"/images/icons/mime-icons/image.png"},"message":{"base":"/images/icons/mime-icons/message.png"},"model":{"base":"/images/icons/mime-icons/model.png"},"text":{"content":{"css":"/images/icons/mime-icons/text/css.png","markdown":"/images/icons/mime-icons/text/markdown.png","plain":"/images/icons/mime-icons/text/plain.png","template":"/images/icons/mime-icons/text/template.png"},"base":"/images/icons/mime-icons/text.png"},"video":{"base":"/images/icons/mime-icons/video.png"},"x-conference":{"base":"/images/icons/mime-icons/x-conference.png"}}');
        
        module.exports = (data, ctx) => {
            if (ctx) {
                    if (!ctx['__handlebar_ctx_id']) {
                    ctx.__handlebar_ctx_id = ++document.__handlebar_custom_loader.__next_obj_id;
                    document.__handlebar_custom_loader.__registered_ctx[ctx.__handlebar_ctx_id] = ctx;
                }
                data.__handlebar_ctx_id = ctx.__handlebar_ctx_id;
            }
            
            const generated_html = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return " ("
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"display_size") || (depth0 != null ? lookupProperty(depth0,"display_size") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"display_size","hash":{},"data":data,"loc":{"start":{"line":5,"column":60},"end":{"line":5,"column":76}}}) : helper)))
    + ")";
},"3":function(container,depth0,helpers,partials,data) {
    var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return " ("
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"display_date") || (depth0 != null ? lookupProperty(depth0,"display_date") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"display_date","hash":{},"data":data,"loc":{"start":{"line":5,"column":106},"end":{"line":5,"column":122}}}) : helper)))
    + ")";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class='object-button global-prevent-select' ondblclick=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"dblclicked(event)",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":1,"column":61},"end":{"line":1,"column":88}}}))
    + "\" onclick=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"clicked(event)",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":1,"column":99},"end":{"line":1,"column":123}}}))
    + "\"\r\n     onmouseenter=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"enter()",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":2,"column":19},"end":{"line":2,"column":36}}}))
    + "\" onmouseleave=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"leave()",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":2,"column":52},"end":{"line":2,"column":69}}}))
    + "\" oncontextmenu=\""
    + alias3((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||alias2).call(alias1,"context_menu(event)",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":2,"column":86},"end":{"line":2,"column":115}}}))
    + "\">\r\n\r\n    "
    + alias3((lookupProperty(helpers,"item_thumbnail")||(depth0 && lookupProperty(depth0,"item_thumbnail"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"item") : depth0),{"name":"item_thumbnail","hash":{},"data":data,"loc":{"start":{"line":4,"column":4},"end":{"line":4,"column":27}}}))
    + "\r\n    <p class=\"item-name\">"
    + alias3(container.lambda(((stack1 = (depth0 != null ? lookupProperty(depth0,"item") : depth0)) != null ? lookupProperty(stack1,"name") : stack1), depth0))
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"display_size") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":5,"column":38},"end":{"line":5,"column":84}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"display_date") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":5,"column":84},"end":{"line":5,"column":130}}})) != null ? stack1 : "")
    + "</p>\r\n</div>";
},"useData":true})(data);
            const body = parser.parseFromString(generated_html, 'text/html').body;
            if (body.children.length === 1)
                return body.children[0];
            
            // Force children generation
            const children = [];
            for (let i = 0; i < body.children.length; ++i)
                children.push(body.children[i]);
            return children;
        }
        

/***/ }),

/***/ "./client/layout/widgets/viewport/menus/edit_directory.hbs":
/*!*****************************************************************!*\
  !*** ./client/layout/widgets/viewport/menus/edit_directory.hbs ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
        const parser = new DOMParser();

        // Used to register contexts
        if (!document.__handlebar_custom_loader)
            document.__handlebar_custom_loader = {
                __next_obj_id: 0,
                __registered_ctx: {}
            }
        
        Handlebars.get_mime_icons = () => JSON.parse('{"application":{"content":{"javascript":"/images/icons/mime-icons/application/javascript.png","json":"/images/icons/mime-icons/application/json.png","pdf":"/images/icons/mime-icons/application/pdf.png","rar":"/images/icons/mime-icons/application/rar.png","tar":"/images/icons/mime-icons/application/tar.png","zip":"/images/icons/mime-icons/application/zip.png"},"base":"/images/icons/mime-icons/application.png"},"audio":{"base":"/images/icons/mime-icons/audio.png"},"chemical":{"base":"/images/icons/mime-icons/chemical.png"},"font":{"base":"/images/icons/mime-icons/font.png"},"gcode":{"base":"/images/icons/mime-icons/gcode.png"},"image":{"base":"/images/icons/mime-icons/image.png"},"message":{"base":"/images/icons/mime-icons/message.png"},"model":{"base":"/images/icons/mime-icons/model.png"},"text":{"content":{"css":"/images/icons/mime-icons/text/css.png","markdown":"/images/icons/mime-icons/text/markdown.png","plain":"/images/icons/mime-icons/text/plain.png","template":"/images/icons/mime-icons/text/template.png"},"base":"/images/icons/mime-icons/text.png"},"video":{"base":"/images/icons/mime-icons/video.png"},"x-conference":{"base":"/images/icons/mime-icons/x-conference.png"}}');
        
        module.exports = (data, ctx) => {
            if (ctx) {
                    if (!ctx['__handlebar_ctx_id']) {
                    ctx.__handlebar_ctx_id = ++document.__handlebar_custom_loader.__next_obj_id;
                    document.__handlebar_custom_loader.__registered_ctx[ctx.__handlebar_ctx_id] = ctx;
                }
                data.__handlebar_ctx_id = ctx.__handlebar_ctx_id;
            }
            
            const generated_html = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    return "checked";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=container.lambda, alias2=container.escapeExpression, alias3=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<h1>Modifier le dossier "
    + alias2(alias1(((stack1 = (depth0 != null ? lookupProperty(depth0,"item") : depth0)) != null ? lookupProperty(stack1,"name") : stack1), depth0))
    + "</h1>\r\n<form onsubmit=\""
    + alias2((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||container.hooks.helperMissing).call(alias3,"submit(event)",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":2,"column":16},"end":{"line":2,"column":39}}}))
    + "\">\r\n    <div class=\"field\">\r\n        <label for='name'>\r\n            <input type=\"text\" name=\"name\" placeholder=\"Nom\" id=\"name\" required value=\""
    + alias2(alias1(((stack1 = (depth0 != null ? lookupProperty(depth0,"item") : depth0)) != null ? lookupProperty(stack1,"name") : stack1), depth0))
    + "\">\r\n        </label>\r\n    </div>\r\n    <div class=\"field\">\r\n        <label for='description'>\r\n            <textarea name=\"description\" placeholder=\"Description\" id=\"description\" rows=\"8\">"
    + alias2(alias1(((stack1 = (depth0 != null ? lookupProperty(depth0,"item") : depth0)) != null ? lookupProperty(stack1,"description") : stack1), depth0))
    + "</textarea>\r\n        </label>\r\n    </div>\r\n    <div class=\"field\">\r\n        <p>Ouvrir la mise en ligne de fichiers à tous </p>\r\n        <label for='open_upload'>\r\n            <input type=\"checkbox\" name=\"open_upload\" id=\"open_upload\" "
    + ((stack1 = lookupProperty(helpers,"if").call(alias3,((stack1 = (depth0 != null ? lookupProperty(depth0,"item") : depth0)) != null ? lookupProperty(stack1,"open_upload") : stack1),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":16,"column":71},"end":{"line":16,"column":109}}})) != null ? stack1 : "")
    + ">\r\n        </label>\r\n    </div>\r\n    <input type=\"submit\" value=\"Valider\">\r\n</form>";
},"useData":true})(data);
            const body = parser.parseFromString(generated_html, 'text/html').body;
            if (body.children.length === 1)
                return body.children[0];
            
            // Force children generation
            const children = [];
            for (let i = 0; i < body.children.length; ++i)
                children.push(body.children[i]);
            return children;
        }
        

/***/ }),

/***/ "./client/layout/widgets/viewport/menus/edit_file.hbs":
/*!************************************************************!*\
  !*** ./client/layout/widgets/viewport/menus/edit_file.hbs ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
        const parser = new DOMParser();

        // Used to register contexts
        if (!document.__handlebar_custom_loader)
            document.__handlebar_custom_loader = {
                __next_obj_id: 0,
                __registered_ctx: {}
            }
        
        Handlebars.get_mime_icons = () => JSON.parse('{"application":{"content":{"javascript":"/images/icons/mime-icons/application/javascript.png","json":"/images/icons/mime-icons/application/json.png","pdf":"/images/icons/mime-icons/application/pdf.png","rar":"/images/icons/mime-icons/application/rar.png","tar":"/images/icons/mime-icons/application/tar.png","zip":"/images/icons/mime-icons/application/zip.png"},"base":"/images/icons/mime-icons/application.png"},"audio":{"base":"/images/icons/mime-icons/audio.png"},"chemical":{"base":"/images/icons/mime-icons/chemical.png"},"font":{"base":"/images/icons/mime-icons/font.png"},"gcode":{"base":"/images/icons/mime-icons/gcode.png"},"image":{"base":"/images/icons/mime-icons/image.png"},"message":{"base":"/images/icons/mime-icons/message.png"},"model":{"base":"/images/icons/mime-icons/model.png"},"text":{"content":{"css":"/images/icons/mime-icons/text/css.png","markdown":"/images/icons/mime-icons/text/markdown.png","plain":"/images/icons/mime-icons/text/plain.png","template":"/images/icons/mime-icons/text/template.png"},"base":"/images/icons/mime-icons/text.png"},"video":{"base":"/images/icons/mime-icons/video.png"},"x-conference":{"base":"/images/icons/mime-icons/x-conference.png"}}');
        
        module.exports = (data, ctx) => {
            if (ctx) {
                    if (!ctx['__handlebar_ctx_id']) {
                    ctx.__handlebar_ctx_id = ++document.__handlebar_custom_loader.__next_obj_id;
                    document.__handlebar_custom_loader.__registered_ctx[ctx.__handlebar_ctx_id] = ctx;
                }
                data.__handlebar_ctx_id = ctx.__handlebar_ctx_id;
            }
            
            const generated_html = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=container.lambda, alias2=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<h1>Modifier le fichier "
    + alias2(alias1(((stack1 = (depth0 != null ? lookupProperty(depth0,"item") : depth0)) != null ? lookupProperty(stack1,"name") : stack1), depth0))
    + "</h1>\r\n<form onsubmit=\""
    + alias2((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),"submit(event)",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":2,"column":16},"end":{"line":2,"column":39}}}))
    + "\">\r\n    <div class=\"field edit-file-name\">\r\n        <label for='name'>\r\n            <input type=\"text\" name=\"name\" placeholder=\"Nom\" id=\"name\" value=\""
    + alias2(alias1(((stack1 = (depth0 != null ? lookupProperty(depth0,"item") : depth0)) != null ? lookupProperty(stack1,"name") : stack1), depth0))
    + "\">\r\n        </label>\r\n        <label for='extension' style=\"flex-grow: unset; padding-left: 10px\">\r\n            <input type=\"text\" name=\"extension\" placeholder=\"Extension\" id=\"extension\" value=\""
    + alias2(alias1(((stack1 = (depth0 != null ? lookupProperty(depth0,"item") : depth0)) != null ? lookupProperty(stack1,"extension") : stack1), depth0))
    + "\">\r\n        </label>\r\n    </div>\r\n    <div class=\"field\">\r\n        <label for='description'>\r\n            <textarea name=\"description\" placeholder=\"Description\" id=\"description\" rows=\"8\">"
    + alias2(alias1(((stack1 = (depth0 != null ? lookupProperty(depth0,"item") : depth0)) != null ? lookupProperty(stack1,"description") : stack1), depth0))
    + "</textarea>\r\n        </label>\r\n    </div>\r\n    <input type=\"submit\" value=\"Valider\">\r\n</form>";
},"useData":true})(data);
            const body = parser.parseFromString(generated_html, 'text/html').body;
            if (body.children.length === 1)
                return body.children[0];
            
            // Force children generation
            const children = [];
            for (let i = 0; i < body.children.length; ++i)
                children.push(body.children[i]);
            return children;
        }
        

/***/ }),

/***/ "./client/layout/widgets/viewport/menus/make_directory.hbs":
/*!*****************************************************************!*\
  !*** ./client/layout/widgets/viewport/menus/make_directory.hbs ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
        const parser = new DOMParser();

        // Used to register contexts
        if (!document.__handlebar_custom_loader)
            document.__handlebar_custom_loader = {
                __next_obj_id: 0,
                __registered_ctx: {}
            }
        
        Handlebars.get_mime_icons = () => JSON.parse('{"application":{"content":{"javascript":"/images/icons/mime-icons/application/javascript.png","json":"/images/icons/mime-icons/application/json.png","pdf":"/images/icons/mime-icons/application/pdf.png","rar":"/images/icons/mime-icons/application/rar.png","tar":"/images/icons/mime-icons/application/tar.png","zip":"/images/icons/mime-icons/application/zip.png"},"base":"/images/icons/mime-icons/application.png"},"audio":{"base":"/images/icons/mime-icons/audio.png"},"chemical":{"base":"/images/icons/mime-icons/chemical.png"},"font":{"base":"/images/icons/mime-icons/font.png"},"gcode":{"base":"/images/icons/mime-icons/gcode.png"},"image":{"base":"/images/icons/mime-icons/image.png"},"message":{"base":"/images/icons/mime-icons/message.png"},"model":{"base":"/images/icons/mime-icons/model.png"},"text":{"content":{"css":"/images/icons/mime-icons/text/css.png","markdown":"/images/icons/mime-icons/text/markdown.png","plain":"/images/icons/mime-icons/text/plain.png","template":"/images/icons/mime-icons/text/template.png"},"base":"/images/icons/mime-icons/text.png"},"video":{"base":"/images/icons/mime-icons/video.png"},"x-conference":{"base":"/images/icons/mime-icons/x-conference.png"}}');
        
        module.exports = (data, ctx) => {
            if (ctx) {
                    if (!ctx['__handlebar_ctx_id']) {
                    ctx.__handlebar_ctx_id = ++document.__handlebar_custom_loader.__next_obj_id;
                    document.__handlebar_custom_loader.__registered_ctx[ctx.__handlebar_ctx_id] = ctx;
                }
                data.__handlebar_ctx_id = ctx.__handlebar_ctx_id;
            }
            
            const generated_html = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<h1>Nouveau Dossier</h1>\r\n<form onsubmit=\""
    + container.escapeExpression((lookupProperty(helpers,"ctx")||(depth0 && lookupProperty(depth0,"ctx"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),"mkdir(event)",{"name":"ctx","hash":{},"data":data,"loc":{"start":{"line":2,"column":16},"end":{"line":2,"column":38}}}))
    + "\">\r\n    <div class=\"field\">\r\n        <label for='name'>\r\n            <input type=\"text\" name=\"name\" placeholder=\"Nom\" id=\"name\" required>\r\n        </label>\r\n    </div>\r\n    <input type=\"submit\" value=\"Créer le dossier\">\r\n</form>";
},"useData":true})(data);
            const body = parser.parseFromString(generated_html, 'text/html').body;
            if (body.children.length === 1)
                return body.children[0];
            
            // Force children generation
            const children = [];
            for (let i = 0; i < body.children.length; ++i)
                children.push(body.children[i]);
            return children;
        }
        

/***/ }),

/***/ "./client/common/tools/client_string.js":
/*!**********************************************!*\
  !*** ./client/common/tools/client_string.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ClientString: () => (/* binding */ ClientString),
/* harmony export */   UrlPath: () => (/* binding */ UrlPath)
/* harmony export */ });
class ClientString {
  /**
   * @param data {ClientString|null}
   */
  constructor() {
    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    if (data && data._encoded_string_data) {
      console.assert(typeof data === 'object' && typeof data._encoded_string_data === 'string', "invalid source string data : ", data);
      this._encoded_string_data = data._encoded_string_data;
    }
  }

  /**
   * @param DbData {string}
   * @constructor {ClientString}
   */
  static FromClient(DbData) {
    let object = new ClientString();
    if (DbData) {
      console.assert(typeof DbData === 'string');
      object._encoded_string_data = encodeURIComponent(DbData);
    }
    return object;
  }

  /**
   * Plain text decoded string
   * @return {string}
   */
  plain() {
    return this._encoded_string_data ? decodeURIComponent(this._encoded_string_data) : '';
  }

  /**
   * Encoded string data
   * @return {string}
   */
  encoded() {
    return this._encoded_string_data ? this._encoded_string_data : '';
  }

  /**
   * Url compatible string data
   * @return {string}
   */
  for_url() {
    return this._encoded_string_data ? this._encoded_string_data : '';
  }

  /**
   * @return {string}
   */
  toString() {
    return this.plain();
  }
}
class UrlPath {
  constructor() {}
  absolute_url() {}
}


/***/ }),

/***/ "./client/common/tools/filesystem.js":
/*!*******************************************!*\
  !*** ./client/common/tools/filesystem.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const mime = __webpack_require__(/*! mime */ "./node_modules/mime/index.js");
function prepare_file(file, directory) {
  file.callback_removed = file.callback_removed === undefined ? null : file.callback_removed;
  file.directory = directory;
  file.remove = () => directory.remove_file(file);
  file.absolute_path = () => {
    return directory.absolute_path() + file.name;
  };
  file.is_file = true;
  file.is_directory = false;
  if (!file.timestamp && file.lastModified) file.timestamp = file.lastModified;
  if (!file.mimetype && file.type && file.type !== '') file.mimetype = file.type;
  if (!file.mimetype) file.mimetype = mime.getType(file.name);
  return file;
}
function clear_file(file) {
  delete file['callback_removed'];
  file['directory'] = undefined;
  delete file['remove'];
  return file;
}
class Directory {
  /**
   * @param name {string}
   * @param parent {Directory|null}
   */
  constructor(name) {
    let parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    this.parent = parent;
    this.name = name;
    this.size = 0;
    this.content_size = 0;
    this.content_files = 0;
    this["is_directory"] = true;
    this["is_file"] = false;
    this.directories = {};
    this.files = [];

    /**
     * @callback callback_file_added
     * @param {*} new_file
     */

    /**
     * @callback callback_directory_added
     * @param {Directory} new_dir
     */

    /**
     * @callback callback_stats_updated
     * @param {number} content_size
     * @param {number} content_files
     */

    /**
     * @callback callback_removed
     */

    /**
     * @type {callback_file_added}
     */
    this.callback_file_added = null;
    /**
     * @type {callback_directory_added}
     */
    this.callback_directory_added = null;
    /**
     * @type {callback_stats_updated}
     */
    this.callback_stats_updated = null;
    /**
     * @type {callback_removed}
     */
    this.callback_removed = null;
  }
  add_file(file) {
    prepare_file(file, this);
    for (const dir of this.parent_dirs()) {
      dir.content_size += Number(file.size);
      dir.content_files += 1;
      if (dir.callback_stats_updated) dir.callback_stats_updated(dir.content_size, dir.content_files);
    }
    this.files.push(file);
    if (this.callback_file_added) this.callback_file_added(file);
    return file;
  }
  _remove_if_empty_internal() {
    // auto remove folder if empty
    if (this.files.length === 0 && Object.values(this.directories).length === 0 && this.parent) {
      if (this.callback_removed) this.callback_removed();
      delete this.parent.directories[this.name];
      this.parent._remove_if_empty_internal();
      this.parent = null;
    }
  }
  remove_file(file) {
    let found = false;
    for (let i = 0; i < this.files.length; ++i) {
      if (this.files[i] === file) {
        found = true;
        this.files.splice(i, 1);
      }
    }

    // Update stats
    if (found) {
      for (const dir of this.parent_dirs()) {
        dir.content_size -= file.size;
        dir.content_files -= 1;
        if (dir.callback_stats_updated) dir.callback_stats_updated(dir.content_size, dir.content_files);
      }
      if (file['callback_removed']) file['callback_removed']();
      clear_file(file);
      this._remove_if_empty_internal();
      return file;
    }
    return null;
  }

  /**
   * @return {string}
   */
  absolute_path() {
    let exclude_root = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    return this.parent ? `${this.parent.absolute_path(exclude_root)}${this.name}/` : '/';
  }

  /**
   * @return {Directory[]}
   */
  parent_dirs() {
    return this.parent ? [this].concat(this.parent.parent_dirs()) : [this];
  }
  remove() {
    for (let i = this.files.length - 1; i >= 0; --i) {
      this.remove_file(this.files[i]);
    }
    for (const dir of Object.values(this.directories)) dir.remove();
    if (this.parent) delete this.parent.directories[this.name];
    if (this.callback_removed) this.callback_removed();
    if (this.parent) this.parent._remove_if_empty_internal();
    this.parent = null;
  }
}
class Filesystem {
  /**
   * @param root_name {string}
   */
  constructor(root_name) {
    this.root = new Directory(root_name, null);
  }

  /**
   * @param file
   * @param path {string} Directory path
   * @return {null|*}
   */
  add_file(file, path) {
    if (file.size === 0) return;
    const directory = this.directory_from_path(path, true);
    return directory.add_file(file);
  }

  /**
   * @param path {string}
   * @param create_if_not_found {boolean}
   * @return {Directory|null}
   */
  directory_from_path(path) {
    let create_if_not_found = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    const list_path = [];
    for (const item of path.split('/')) if (item !== '') list_path.push(item);
    list_path.reverse();
    const ite = (dir, remaining) => {
      if (remaining.length === 0) return dir;
      const name = remaining.pop();
      if (dir.directories[name]) return ite(dir.directories[name], remaining);else if (create_if_not_found) {
        dir.directories[name] = new Directory(name, dir);
        if (dir.callback_directory_added) dir.callback_directory_added(dir.directories[name]);
        return ite(dir.directories[name], remaining);
      }
      return null;
    };
    return ite(this.root, list_path);
  }
  remove_file(file) {
    if (!file.directory) return null;
    return file.directory.remove_file(file);
  }
  get_random_file() {
    const internal_get_random_file = dir => {
      if (dir.files.length > 0) return dir.files[0];
      const dirs = Object.values(dir.directories);
      for (const dir of dirs) {
        const file = internal_get_random_file(dir);
        if (file) return file;
      }
      return null;
    };
    return internal_get_random_file(this.root);
  }
  clear() {
    for (let i = this.root.files.length - 1; i >= 0; --i) this.remove_file(this.root.files[i]);
    for (const directory of Object.values(this.root.directories)) directory.remove();
  }
}
module.exports = {
  Filesystem
};
//export {Filesystem}

/***/ }),

/***/ "./client/common/tools/filesystem_upload.js":
/*!**************************************************!*\
  !*** ./client/common/tools/filesystem_upload.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FilesystemUpload: () => (/* binding */ FilesystemUpload)
/* harmony export */ });
/* harmony import */ var _layout_widgets_components_message_box_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../layout/widgets/components/message_box.js */ "./client/layout/widgets/components/message_box.js");
/* harmony import */ var _layout_widgets_viewport_repos_builder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../layout/widgets/viewport/repos_builder */ "./client/layout/widgets/viewport/repos_builder.js");
/* harmony import */ var _filesystem_v2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./filesystem_v2 */ "./client/common/tools/filesystem_v2.js");
/* harmony import */ var _filesystem_v2__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_filesystem_v2__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ "./client/common/tools/utils.js");




class TransferStats {
  constructor() {
    this.timestamp = performance.now();
    this.last_sent = null;
    this.total = 0;
    this.speed_measures = [];
  }
  speed() {
    let average = 0;
    for (const measure of this.speed_measures) average += measure;
    average /= this.speed_measures.length;
    return average;
  }
  remaining() {
    return (this.total - this.last_sent) / this.speed();
  }
  update(sent, total) {
    if (!this.last_sent) {
      this.last_sent = sent;
      return;
    }
    if (performance.now() - this.timestamp < 100) return;
    const added = sent - this.last_sent;
    const elapsed = performance.now() - this.timestamp;
    this.timestamp = performance.now();
    const local_speed = added / elapsed * 1000;
    this.speed_measures.push(local_speed);
    this.total = total;
    this.last_sent = sent;
  }
}
class ChunkedFileStream {
  static MAX_BATCH_SIZE = (() => this.max_batch_size = 50 * 1024 * 1024)();

  /**
   * @param file {File}
   */
  constructor(file) {
    /**
     * @type {File}
     */
    this.file = file;

    /**
     * @type {number}
     * @private
     */
    this._cursor = 0;

    /**
     * @type {number}
     * @private
     */
    this._last_cursor = 0;

    /**
     * @type {null|number}
     */
    this.stream_id = null;
  }
  get_next_chunk() {
    this._last_cursor = this._cursor;
    if (!this.file) return null;
    if (this._cursor === this.file.size) return null;
    this._cursor += Math.min(this.file.size - this._cursor, ChunkedFileStream.MAX_BATCH_SIZE);
    return this.file.slice(this._last_cursor, this._cursor);
  }
  cancel_chunk() {
    this._cursor = this._last_cursor;
  }
  chunk_number() {
    return Math.ceil(this.file.size / ChunkedFileStream.MAX_BATCH_SIZE);
  }
  sent_chunk() {
    return Math.floor(this._last_cursor / ChunkedFileStream.MAX_BATCH_SIZE);
  }
}
class UploadStream {
  /**
   * @callback callback_on_progress
   * @param file {File}
   * @param sent_chunks {number}
   * @param total_chunks {number}
   * @param sent_bytes {number}
   * @param total_bytes {number}
   * @param process_percent {number}
   */

  /**
   * @callback callback_file_sent
   * @param file {File}
   */

  /**
   * @callback callback_file_canceled
   * @param file {File}
   */

  /**
   *
   * @param file_stream {ChunkedFileStream}
   * @param url {string}
   * @param on_progress {callback_on_progress}
   * @param on_file_sent {callback_file_sent}
   * @param on_cancel {callback_file_canceled}
   */
  constructor(file_stream, url, on_progress, on_file_sent, on_cancel) {
    /**
     * @type {callback_file_sent}
     * @private
     */
    this._on_file_sent = on_file_sent;

    /**
     * @type {callback_file_sent}
     * @private
     */
    this._on_cancel = on_cancel;

    /**
     * @type {callback_on_progress}
     * @private
     */
    this._on_progress = on_progress;

    /**
     * @type {string}
     * @private
     */
    this._url = url;

    /**
     * @type {ChunkedFileStream}
     * @private
     */
    this._file_stream = file_stream;

    /**
     * @type {XMLHttpRequest}
     * @private
     */
    this._request = new XMLHttpRequest();
    const this_ref = this;
    this._request.onreadystatechange = () => {
      if (!this_ref._running) return;
      if (this_ref._request.readyState === 4) {
        if (this_ref._request.status === 0) return (0,_layout_widgets_components_message_box_js__WEBPACK_IMPORTED_MODULE_0__.print_message)("error", `Server error`, "connection closed");
        if (this_ref._request.response.length === 0) return (0,_layout_widgets_components_message_box_js__WEBPACK_IMPORTED_MODULE_0__.print_message)("error", `Unhandled response`, `${this_ref._request.status}`);
        this_ref._handle_result(this_ref._request.status, JSON.parse(this_ref._request.response));
      }
    };
    this._request.upload.addEventListener("progress", event => {
      this_ref._chunk_progress = event.loaded;
      this._update_progress();
    });

    /**
     * @type {null|string}
     * @private
     */
    this._stream_id = null;

    /**
     * @type {number}
     * @private
     */
    this._process_percent = 0;

    /**
     * @type {number}
     * @private
     */
    this._chunk_progress = 0;
  }
  go() {
    this._running = true;
    this._push_next_chunk();
  }
  hold() {
    this._running = false;
    this._request.abort();
    this._file_stream.cancel_chunk();
  }

  /**
   * @param code {number}
   * @param data {object: {stream_id:string, process_percent:number, message:string, file:object, created_directories:object[]}}
   */
  _handle_result(code, data) {
    if (code !== 200 || !data) {
      this.hold();
      if (data && data.message) (0,_layout_widgets_components_message_box_js__WEBPACK_IMPORTED_MODULE_0__.print_message)('error', data.message.title, data ? data.message.content : 'unknown error');else (0,_layout_widgets_components_message_box_js__WEBPACK_IMPORTED_MODULE_0__.print_message)('error', "Upload failed", 'unknown error');
      console.error(`Upload failed :`, data);
      this._on_cancel(this._file_stream.file);
      return;
    }
    if (data.message) (0,_layout_widgets_components_message_box_js__WEBPACK_IMPORTED_MODULE_0__.print_message)('info', data.message.title ? data.message.title : data.message, data.message.content ? data.message.content : "");
    if (!data.stream_id) {
      this.hold();
      return;
    }
    this._process_percent = Number(data.process_percent);
    this._update_progress();

    /**
     * @type {number}
     * @private
     */
    this._stream_id = data.stream_id;
    if (data.created_directories) for (const directory of data.created_directories) _layout_widgets_viewport_repos_builder__WEBPACK_IMPORTED_MODULE_1__.REPOS_BUILDER.filesystem.add_object(_filesystem_v2__WEBPACK_IMPORTED_MODULE_2__.FilesystemObject.FromServerData(directory));
    if (data.file) {
      _layout_widgets_viewport_repos_builder__WEBPACK_IMPORTED_MODULE_1__.REPOS_BUILDER.filesystem.add_object(_filesystem_v2__WEBPACK_IMPORTED_MODULE_2__.FilesystemObject.FromServerData(data.file));
    }
    this._push_next_chunk();
  }
  _push_next_chunk() {
    if (!this._running) return;
    const chunk = this._file_stream.get_next_chunk();
    if (!chunk) {
      if (this._process_percent < 1.0) {
        if (!this._stream_id) {
          this.hold();
          (0,_layout_widgets_components_message_box_js__WEBPACK_IMPORTED_MODULE_0__.print_message)('error', `Invalid stream id received during process step`);
          console.error(`Invalid stream id received during process step`);
          return;
        }
        setTimeout(() => {
          this._request.open("POST", this._url);
          this._request.setRequestHeader('content-token', this._stream_id.toString());
          this._request.send();
        }, 500);
        return;
      } else return this._on_file_sent(this._file_stream.file);
    }
    this._request.open("POST", this._url);
    if (!this._stream_id) {
      this._request.setRequestHeader('content-name', encodeURIComponent(this._file_stream.file.name));
      this._request.setRequestHeader('content-size', this._file_stream.file.size);
      this._request.setRequestHeader('content-timestamp', this._file_stream.file.timestamp);
      this._request.setRequestHeader('content-mimetype', this._file_stream.file.mimetype);
      const absolute_path = _layout_widgets_viewport_repos_builder__WEBPACK_IMPORTED_MODULE_1__.REPOS_BUILDER.navigator.filesystem.make_string_path_to_object(_layout_widgets_viewport_repos_builder__WEBPACK_IMPORTED_MODULE_1__.REPOS_BUILDER.navigator.get_current_directory()) + this._file_stream.file.directory.absolute_path().replaceAll('//', '/');
      this._request.setRequestHeader('content-path', encodeURIComponent(absolute_path));
      if (this._file_stream.file.description) this._request.setRequestHeader('content-description', this._file_stream.file.description ? encodeURIComponent(this._file_stream.file.description) : '');
    } else {
      this._request.setRequestHeader('content-token', this._stream_id.toString());
    }
    this._request.send(chunk);
  }
  _update_progress() {
    if (this._on_progress) {
      this._on_progress(this._file_stream.file, this._file_stream.sent_chunk(), this._file_stream.chunk_number(), this._file_stream.sent_chunk() * ChunkedFileStream.MAX_BATCH_SIZE + this._chunk_progress, this._file_stream.file.size, this._process_percent);
    }
  }
}
class FilesystemUpload {
  /**
   * @param filesystem {Filesystem}
   * @param url {string}
   */
  constructor(filesystem, url) {
    /**
     * @type {Filesystem}
     * @private
     */
    this._filesystem = filesystem;

    /**
     * @type {boolean}
     */
    this.is_running = false;

    /**
     * @type {string}
     */
    this.url = `${_utils__WEBPACK_IMPORTED_MODULE_3__.PAGE_CONTEXT.repos_path()}/send/${_layout_widgets_viewport_repos_builder__WEBPACK_IMPORTED_MODULE_1__.REPOS_BUILDER.navigator.get_current_directory() ? _layout_widgets_viewport_repos_builder__WEBPACK_IMPORTED_MODULE_1__.REPOS_BUILDER.navigator.get_current_directory() : ''}`;
    this.total_content_size = this._filesystem.root.content_size;
    this.total_content_sent = 0;
    this.total_file_count = this._filesystem.root.content_files;
    this.total_file_sent = 0;

    /**
     * @callback callback_finished
     */
    /**
     * @type {null|callback_finished}
     */
    this.callback_finished = null;

    /**
     * @callback callback_file_uploaded
     * @param {File}
     */
    /**
     * @type {null|callback_file_uploaded}
     */
    this.callback_file_uploaded = null;

    /**
     * @type {UploadStream}
     * @private
     */
    this._current_stream = null;

    /**
     * @callback callback_update_progress
     * @param file_name {string}
     * @param file_size {number}
     * @param uploaded_files {number}
     * @param total_files {number}
     * @param uploaded_size {number}
     * @param file_uploaded_size {number}
     * @param total_size {number}
     * @param process_percent {number|null}
     * @param speed {number}
     * @param remaining_time {number}
     */
    /**
     * @type {callback_update_progress}
     */
    this.callback_update_progress = null;
    this.on_stop = null;
  }
  start() {
    this.transfer_stats = new TransferStats();
    this.is_running = true;
    if (this._current_stream) {
      this._current_stream.go();
    } else {
      this.total_content_size = this._filesystem.root.content_size;
      this.total_content_sent = 0;
      this.total_file_count = this._filesystem.root.content_files;
      this.total_file_sent = 0;
      this.total_file_sent = 0;
      this._next();
    }
  }
  _next() {
    const this_ref = this;
    const new_file = this._filesystem.get_random_file();
    if (!new_file) return this.stop(true);
    this._current_stream = new UploadStream(new ChunkedFileStream(new_file), this.url, (file, sent_chunks, total_chunks, sent_bytes, total_bytes, process_percent) => {
      if (this_ref.callback_update_progress) {
        this.transfer_stats.update(this_ref.total_content_sent + sent_bytes, this_ref.total_content_size);
        this_ref.callback_update_progress(file.name, file.size, this_ref.total_file_sent, this_ref.total_file_count, this_ref.total_content_sent + sent_bytes, this_ref.total_content_sent + file.size, this_ref.total_content_size, process_percent, this.transfer_stats.speed(), this.transfer_stats.remaining());
      }
    }, file => {
      this_ref.total_file_sent += 1;
      this.total_content_sent += file.size;
      this._filesystem.remove_file(file);
      delete this_ref._current_stream;
      this_ref._next();
    }, file => {
      this_ref.stop(false);
    });
    this._current_stream.go();
  }
  pause() {
    this.is_running = false;
    if (this._current_stream) this._current_stream.hold();
  }
  stop(finished) {
    this.pause();
    delete this._current_stream;
    if (this.on_stop) this.on_stop(finished);
  }
}


/***/ }),

/***/ "./client/common/tools/filesystem_v2.js":
/*!**********************************************!*\
  !*** ./client/common/tools/filesystem_v2.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const {
  PAGE_CONTEXT,
  humanFileSize
} = __webpack_require__(/*! ./utils */ "./client/common/tools/utils.js");
const {
  LOCAL_USER
} = __webpack_require__(/*! ./user */ "./client/common/tools/user.js");
const {
  parse_fetch_result
} = __webpack_require__(/*! ../../layout/widgets/components/message_box */ "./client/layout/widgets/components/message_box.js");
const {
  ClientString
} = __webpack_require__(/*! ./client_string */ "./client/common/tools/client_string.js");
class FilesystemObject {
  /**
   * @param server_data {Object}
   * @return {FilesystemObject}
   * @constructor
   */
  static FromServerData(server_data) {
    const Object = new FilesystemObject();
    Object.id = Number(server_data.id);
    Object.repos = server_data.repos;
    Object.owner = server_data.owner;
    Object.name = new ClientString(server_data.name);
    Object.is_regular_file = server_data.is_regular_file;
    Object.description = server_data.description ? new ClientString(server_data.description) : ClientString.FromClient('');
    Object.parent_item = server_data.parent_item;
    Object.is_trash = server_data.is_trash;
    Object.absolute_path = new ClientString(server_data.absolute_path);
    if (Object.is_regular_file) {
      Object.size = Number(server_data.size);
      Object.mimetype = new ClientString(server_data.mimetype);
      Object.timestamp = server_data.timestamp;
    } else {
      Object.open_upload = server_data.open_upload;
    }
    return Object;
  }

  /**
   * @param object_id {number}
   * @return {Promise<FilesystemObject>}
   * @constructor
   */
  static async FetchFromServer(object_id) {
    return await new Promise(resolve => {
      fetch(`${PAGE_CONTEXT.repos_path()}/content/${object_id}`, {
        headers: {
          'content-authtoken': LOCAL_USER.get_token(),
          'accept': 'application/json'
        }
      }).then(async response => await parse_fetch_result(response)).then(json => {
        resolve(this.FromServerData(json));
      });
    });
  }
  constructor() {
    /**
     * @type {number|null}
     */
    this.id = null;

    /**
     * @type {number|null}
     */
    this.repos = null;

    /**
     * @type {number|null}
     */
    this.owner = null;

    /**
     * @type {ClientString|null}
     */
    this.name = null;

    /**
     * @type {boolean|null}
     */
    this.is_regular_file = null;

    /**
     * @type {ClientString|null}
     */
    this.description = null;

    /**
     * @type {number|null}
     */
    this.parent_item = null;

    /**
     * @type {boolean}
     */
    this.is_trash = false;

    /**
     * @type {number}
     */
    this.size = 0;

    /**
     * @type {ClientString|null}
     */
    this.mimetype = null;

    /**
     * @type {number|null}
     */
    this.timestamp = null;

    /**
     * @type {Filesystem}
     */
    this.filesystem = null;

    /**
     * @type {ClientString<string>}
     */
    this.absolute_path = new ClientString();
  }
}
class ObjectListener {
  constructor() {
    /**
     * @callback callback_object_added
     * @param {*} new_file
     */
    /**
     * Called when the total size or object count of this directory have been updated
     * @type {callback_object_added}
     */
    this.on_add_object = null;

    /**
     * Called when an object have been modified
     * @type {callback_object_added}
     */
    this.on_update_object = null;

    /**
     * Called when an object have been removed
     * @type {callback_object_added}
     */
    this.on_remove_object = null;

    /**
     * @type {number}
     * @private
     */
    this._id = -1;

    /**
     * @type {ObjectInternalMetadata}
     * @private
     */
    this._parent = null;
  }
  destroy() {
    if (this._parent && this._id) this._parent.listeners.delete(this._id);
    this._parent = null;
    this._id = -1;
  }
}
class ObjectInternalMetadata {
  constructor() {
    /**
     * @type {Set<number>}
     */
    this.children = new Set();

    /**
     * @type {Map<number, ObjectListener>}
     */
    this.listeners = new Map();

    /**
     * @type {number}
     */
    this.content_size = 0;

    /**
     * @type {number}
     */
    this.content_count = 0;
  }
}
class Filesystem {
  /**
   * @param filesystem_name {ClientString}
   */
  constructor(filesystem_name) {
    /**
     * @type {ClientString}
     */
    this.name = new ClientString(filesystem_name);

    /**
     * @type {Map<number, FilesystemObject>}
     * @private
     */
    this._content = new Map();

    /**
     * @type {Map<number, ObjectInternalMetadata>}
     * @private
     */
    this._object_internal_metadata = new Map();

    /**
     * @type {ObjectInternalMetadata}
     * @private
     */
    this._root_meta_data = new ObjectInternalMetadata();

    /**
     * @type {Set<number>}
     * @private
     */
    this._roots = new Set();

    /**
     * @type {boolean}
     * @private
     */
    this._root_dirty = true;
  }

  /**
   * @param object {FilesystemObject}
   */
  add_object(object) {
    console.assert(object.id != null);
    object.filesystem = this;
    this._content.set(object.id, object);
    this._roots.add(object.id);
    let object_metadata = this._object_internal_metadata.get(object.id);
    if (!object_metadata) {
      object_metadata = new ObjectInternalMetadata();
      this._object_internal_metadata.set(object.id, object_metadata);
    }
    if (object.is_regular_file) {
      object_metadata.content_count = 1;
      object_metadata.content_size = object.size;
    }
    if (object.parent_item) {
      let parent_metadata = this._object_internal_metadata.get(object.parent_item);
      if (!parent_metadata) {
        parent_metadata = new ObjectInternalMetadata();
        this._object_internal_metadata.set(object.parent_item, parent_metadata);
      }
      parent_metadata.children.add(object.id);
      for (const [_, listener] of parent_metadata.listeners) listener.on_add_object(object.id);
    } else {
      this._root_meta_data.children.add(object.id);
      for (const [_, listener] of this._root_meta_data.listeners) listener.on_add_object(object.id);
    }

    // Update parent sizes recursively
    let parent_object = object;
    do {
      const parent_id = parent_object.parent_item;
      if (parent_id) {
        const parent_object_metadata = this._object_internal_metadata.get(parent_id);
        if (parent_object_metadata) {
          parent_object_metadata.content_count += object_metadata.content_count;
          parent_object_metadata.content_size += object_metadata.content_size;
        }
        parent_object = object.parent_item ? this._content.get(parent_object.parent_item) : null;
      } else {
        parent_object = null;
        this._root_meta_data.content_count += object_metadata.content_count;
        this._root_meta_data.content_size += object_metadata.content_size;
      }
    } while (parent_object);
    this._root_dirty = true;
  }

  /**
   * @param object_id {number}
   * @param only_dereference {boolean} Don't delete children if set to true
   */
  remove_object(object_id) {
    let only_dereference = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    const data = this._content.get(object_id);
    if (data) {
      const metadata = this._object_internal_metadata.get(object_id);
      if (metadata && !only_dereference) {
        for (const child of metadata.children) this.remove_object(child);
      }
      const parent_metadata = data.parent_item ? this._object_internal_metadata.get(data.parent_item) : this._root_meta_data;
      if (parent_metadata) {
        parent_metadata.children.delete(object_id);
        for (const [id, listener] of parent_metadata.listeners) listener.on_remove_object(object_id);
      }
      if (!only_dereference) this._object_internal_metadata.delete(object_id);
      this._content.delete(object_id);
      if (this._roots.has(object_id)) {
        this._roots.delete(object_id);
        this._root_dirty = true;
      }
    }
  }

  /**
   * @return {Set<number>}
   */
  get_roots() {
    if (this._root_dirty) {
      this._roots.clear();
      for (const [_, object] of this._content) if (!object.parent_item || !this._content.has(object.parent_item)) this._roots.add(object.id);
    }
    return this._roots;
  }

  /**
   * @param file_id {number}
   * @return {FilesystemObject}
   */
  get_object_data(file_id) {
    return this._content.get(file_id);
  }

  /**
   * @callback callback_sorter
   * @param {FilesystemObject} a
   * @param {FilesystemObject} b
   */

  /**
   * @param parent_id {number|null}
   * @return {number[]}
   */
  get_objects_in_directory(parent_id) {
    let objects = new Set();
    if (!parent_id) {
      objects = this.get_roots();
    } else {
      const metadata = this._object_internal_metadata.get(parent_id);
      if (metadata) objects = metadata.children;
    }
    return Array.from(objects);
  }

  /**
   * @param parent_id {number|null}
   * @return {number[]}
   */
  get_objects_in_directory_recursive(parent_id) {
    let objects = new Set();
    if (!parent_id) {
      objects = this._content.keys();
    } else {
      const metadata = this.get_object_data(parent_id);
      if (!metadata || metadata.is_regular_file) return [];
      for (const [id, data] of this._content) {
        if (data.absolute_path.plain().startsWith(metadata.absolute_path.plain())) objects.add(id);
      }
    }
    return Array.from(objects);
  }

  /**
   * @param path {string}
   * @return {null|number}
   */
  get_object_from_path(path) {
    path = path.trim();
    if (path.startsWith('/')) path = path.substring(1);
    if (path.endsWith('/')) path = path.substring(0, path.length - 1);
    let file = null;
    const path_name = path.split("/");
    if (path_name.length !== 0) {
      for (const name of path_name) {
        let metadata = file ? this._object_internal_metadata.get(file) : this._root_meta_data;
        if (!metadata) break;
        for (const child of metadata.children) {
          const child_object = this._content.get(child);
          if (child_object) if (child_object.name.plain() === name) {
            file = child;
            break;
          }
        }
      }
    }
    return file;
  }
  clear() {
    this._roots.clear();
    this._content.clear();
    this._object_internal_metadata.clear();
  }
  create_listener(object_id) {
    const metadata = object_id ? this._object_internal_metadata.get(object_id) : this._root_meta_data;
    if (metadata) {
      let id = null;
      do {
        id = Math.random();
      } while (metadata.listeners.has(id));
      const listener = new ObjectListener();
      listener._id = id;
      listener._parent = metadata;
      metadata.listeners.set(id, listener);
      return listener;
    }
    return null;
  }

  /**
   * @param object {number}
   * @return {number[]}
   */
  make_path_to_object(object) {
    const result = [];
    let data = this.get_object_data(object);
    while (data) {
      result.push(object);
      object = data.parent_item;
      data = this.get_object_data(object);
    }
    return result.reverse();
  }

  /**
   * @param object {number}
   * @return {number}
   */
  make_string_path_to_object(object) {
    let result = "/";
    let data = this.get_object_data(object);
    while (data) {
      result = "/" + data.name + result;
      object = data.parent_item;
      data = this.get_object_data(object);
    }
    return result;
  }

  /**
   * @param object {number}
   * @return {{size: null, count: null}|{size: number, count: number}}
   */
  get_object_content_stats(object) {
    const metadata = object ? this._object_internal_metadata.get(object) : this._root_meta_data;
    if (metadata) {
      return {
        count: metadata.content_count,
        size: metadata.content_size
      };
    }
    return {
      count: null,
      size: null
    };
  }
}
module.exports = {
  Filesystem,
  FilesystemObject,
  ObjectListener
};

/***/ }),

/***/ "./client/common/tools/get_item_thumbnail.js":
/*!***************************************************!*\
  !*** ./client/common/tools/get_item_thumbnail.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   from_distant_repos: () => (/* binding */ from_distant_repos),
/* harmony export */   from_local_path: () => (/* binding */ from_local_path)
/* harmony export */ });
/* harmony import */ var _mime_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mime_utils */ "./client/common/tools/mime_utils.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./client/common/tools/utils.js");


function from_distant_repos(item) {
  const mime = item.mimetype.plain().split('/');
  switch (mime[0]) {
    case 'video':
      return `<div class="item-small">
                            <img class="item-background" src="${_utils__WEBPACK_IMPORTED_MODULE_1__.PAGE_CONTEXT.repos_path()}/thumbnail/${item.id}" alt="fichier: '${item.name}" onError="this.onError = null; this.src='/images/icons/mime-icons/video.png'"/>
                            <img class="item-overlay" src="/images/icons/icons8-play-64.png" alt="play button">
                        </div>`;
    case 'image':
      return `<img class="item-small" src="${_utils__WEBPACK_IMPORTED_MODULE_1__.PAGE_CONTEXT.repos_path()}/thumbnail/${item.id}" alt="fichier: ${item.name}" onError="this.onError = null; this.src='/images/icons/mime-icons/image.png'"/>`;
    case 'application':
      switch (mime[1]) {
        case 'x-pdf':
        case 'pdf':
          return `<img class="item-small" src="${_utils__WEBPACK_IMPORTED_MODULE_1__.PAGE_CONTEXT.repos_path()}/thumbnail/${item.id}" alt="fichier: ${item.name}" onError="this.onError = null; this.src='/images/icons/mime-icons/image.png'"/>`;
      }
      break;
  }
  return `<img class="item-small" src="${(0,_mime_utils__WEBPACK_IMPORTED_MODULE_0__.get_mime_icon_path)(item.mimetype)}" alt="document: ${item.name}"/>`;
}
function from_local_path(item) {
  switch (item.mimetype.plain().split('/')[0]) {
    case 'image':
      return `<img class="item-small" src="${URL.createObjectURL(item)}" alt="image: ${item.name}" onError="this.onError = null; this.src='/images/icons/mime-icons/image.png'"/>`;
    case 'video':
      return `<video class="item-small" preload="auto" data-setup="{}" preload="auto" height="100%" width="100%">
                        <source src="${URL.createObjectURL(item)}" type="${item.mimetype}">
                    </video>`;
  }
  return `<img class="item-small" src="${(0,_mime_utils__WEBPACK_IMPORTED_MODULE_0__.get_mime_icon_path)(item.mimetype)}" alt="document: ${item.name}"/>`;
}


/***/ }),

/***/ "./client/common/tools/mime_utils.js":
/*!*******************************************!*\
  !*** ./client/common/tools/mime_utils.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UNDEFINED_MIME_STRING: () => (/* binding */ UNDEFINED_MIME_STRING),
/* harmony export */   get_mime_icon_path: () => (/* binding */ get_mime_icon_path),
/* harmony export */   is_mimetype_valid: () => (/* binding */ is_mimetype_valid)
/* harmony export */ });
const Handlebars = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");

/**
 * @param mimetype {ClientString}
 * @return {string}
 */
function get_mime_alias(mimetype) {
  switch (mimetype.plain()) {
    case 'application/x-zip':
    case 'application/x-zip-compressed':
      return 'application/zip';
    case 'application/x-javascript':
      return 'application/javascript';
    case 'text/jade':
    case 'text/pug':
      return 'text/template';
  }
  return mimetype.plain();
}

/**
 * @param mimetype {ClientString}
 * @return {boolean}
 */
function is_mimetype_valid(mimetype) {
  if (!mimetype) return false;
  switch (mimetype.plain()) {
    case '':
    case 'undefined':
    case 'null':
      return false;
  }
  return true;
}

/**
 * @param mimetype {ClientString}
 * @return {string}
 */
function get_mime_icon_path(mimetype) {
  if (!is_mimetype_valid(mimetype)) return '/images/icons/no-mime-icon.png';
  const [mime_left, mime_right] = get_mime_alias(mimetype).split('/');
  const mime_icons = Handlebars.get_mime_icons();
  const mime_category = mime_icons[mime_left];
  if (!mime_category) return '/images/icons/no-mime-icon.png';
  if (mime_category.content) {
    const mime_type = mime_category.content[mime_right];
    if (!mime_type) return mime_category.base;
    return mime_type;
  }
  return mime_category.base;
}
const UNDEFINED_MIME_STRING = `<img class="item-small" src="/images/icons/no-mime-icon.png" alt="undefined-type"/>`;


/***/ }),

/***/ "./client/common/tools/navigator.js":
/*!******************************************!*\
  !*** ./client/common/tools/navigator.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Navigator: () => (/* binding */ Navigator)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./client/common/tools/utils.js");
/* harmony import */ var _layout_widgets_components_message_box__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../layout/widgets/components/message_box */ "./client/layout/widgets/components/message_box.js");
/* harmony import */ var _layout_widgets_viewport_item_context_action__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../layout/widgets/viewport/item_context_action */ "./client/layout/widgets/viewport/item_context_action.js");



class Navigator {
  /**
   * @param repos_builder {ReposBuilder}
   */
  constructor(repos_builder) {
    this.last_hover_item = null;
    this.hover_item_callbacks = [];

    /**
     * @type {Set<number>}
     */
    this.selected_items = new Set();
    this.last_selected_item = null;
    this.selected_item_callbacks = [];
    this.current_directory = undefined;

    /**
     * @callback callback_directory_changed
     * @param {number} new_item
     * @param {boolean} is_selected
     */

    /**
     * @type {callback_directory_changed[]}
     */
    this.changed_dir_callbacks = [];

    /**
     * @type {Filesystem}
     */
    this.filesystem = repos_builder.filesystem;

    /**
     * @type {ReposBuilder}
     */
    this.repos_builder = repos_builder;
  }
  set_hover_item(item) {
    if (item !== this.last_hover_item) {
      for (const callback of this.hover_item_callbacks) callback(item, this.last_hover_item);
    }
    this.last_hover_item = item;
  }
  get_hover_item() {
    return this.last_hover_item;
  }
  on_hover_item(callback) {
    this.hover_item_callbacks.push(callback);
  }
  enter_touch_selection_mode() {
    let enter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    this.is_touch_selection_mode = enter;
    if (enter) {
      document.getElementById('mobile-selection-header').classList.add('mobile-selection-mode');
      document.getElementById('mobile-selection-close-button').onclick = () => {
        this.enter_touch_selection_mode(false);
      };
      const action_div = document.getElementById('mobile-selection-action-buttons');
      action_div.innerHTML = '';
      const cut_button = document.createElement('button');
      const cut_image = document.createElement('img');
      cut_image.src = '/images/icons/icons8-cut-48.png';
      cut_button.append(cut_image);
      cut_button.onclick = () => {
        this.cut_selection();
      };
      cut_button.classList.add('plus-button');
      action_div.append(cut_button);
      const more_button = document.createElement('button');
      const remove_image = document.createElement('img');
      remove_image.src = '/images/icons/icons8-ellipsis-90.png';
      more_button.append(remove_image);
      more_button.classList.add('more-button');
      more_button.onclick = () => {
        (0,_layout_widgets_viewport_item_context_action__WEBPACK_IMPORTED_MODULE_2__.spawn_item_context_action)(this.last_selected_item);
      };
      action_div.append(more_button);
    } else {
      this.is_touch_selection_mode = false;
      document.getElementById('mobile-selection-header').classList.remove('mobile-selection-mode');
      this.clear_selection();
    }
  }

  /**
   * @param item {number}
   * @param shift_key {boolean}
   * @param ctrl_key {boolean}
   * @param force_select {boolean}
   */
  select_item(item, shift_key, ctrl_key) {
    let force_select = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    if (shift_key) {
      if (!this.last_selected_item) this.last_selected_item = item;
      const dir_content = this.repos_builder.directory_content;
      let start_index = 0;
      for (const i in dir_content.objects) if (dir_content.objects[i].id === item) start_index = Number(i);
      let end_index = 0;
      for (const i in dir_content.objects) if (dir_content.objects[i].id === this.last_selected_item) end_index = Number(i);

      // Swap if needed
      if (start_index > end_index) [start_index, end_index] = [end_index, start_index];
      const items_to_keep_selected = new Set();
      for (let i = start_index; i <= end_index; ++i) items_to_keep_selected.add(dir_content.objects[i].id);
      if (!ctrl_key && !force_select) for (const selected of this.selected_items) if (!items_to_keep_selected.has(selected)) this._select_item_internal(selected, false);
      for (const item of items_to_keep_selected) this._select_item_internal(item, true);
    } else {
      this.last_selected_item = item;
      if (ctrl_key || this.is_touch_selection_mode || force_select && this.selected_items.has(item)) {
        if (this.selected_items.has(item)) this._select_item_internal(item, force_select);else this._select_item_internal(item, true);
      } else {
        for (const elem of this.selected_items) if (elem !== item) this._select_item_internal(elem, false);
        if (this.selected_items.has(item)) this._select_item_internal(item, force_select);else this._select_item_internal(item, true);
      }
    }
  }
  _select_item_internal(item, selected) {
    if (selected && !this.selected_items.has(item)) {
      this.selected_items.add(item);
      for (const callback of this.selected_item_callbacks) callback(item, true);
    } else if (!selected && this.selected_items.has(item)) {
      this.selected_items.delete(item);
      for (const callback of this.selected_item_callbacks) callback(item, false);
    }
    if (this.is_touch_selection_mode) {
      document.getElementById('mobile-selection-info').innerText = `${this.selected_items.size}`;
      if (this.selected_items.size === 0) {
        this.enter_touch_selection_mode(false);
      }
    }
  }
  view_item(item) {
    if (!this.selected_items.has(item)) {
      this.selected_items.add(item);
      for (const callback of this.selected_item_callbacks) callback(item, true);
    }
  }
  clear_selection() {
    if (this.is_touch_selection_mode) this.enter_touch_selection_mode(false);
    this.last_selected_item = null;
    for (const item of this.selected_items) for (const callback of this.selected_item_callbacks) callback(item, false);
    this.selected_items.clear();
  }

  /**
   * @param callback {callback_directory_changed}
   */
  bind_on_select_item(callback) {
    this.selected_item_callbacks.push(callback);
  }
  set_current_dir(item) {
    let skip_push_state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    this.last_hover_item = null;
    this.last_selected_item = null;
    this.clear_selection();
    if (item !== this.current_directory) {
      this.current_directory = item;
      for (const callback of this.changed_dir_callbacks) callback(item);
      if (!skip_push_state) {
        history.pushState(item, "", `${_utils__WEBPACK_IMPORTED_MODULE_0__.PAGE_CONTEXT.repos_path()}/tree${this.get_string_path_to_directory(item)}`);
      }
    }
  }
  get_string_path_to_directory(item) {
    let full_path_string = "/";
    for (const dir of this.filesystem.make_path_to_object(item)) {
      const dir_data = this.filesystem.get_object_data(dir);
      full_path_string += dir_data.name.plain() + "/";
    }
    return full_path_string;
  }
  get_current_directory() {
    return this.current_directory;
  }

  /**
   * @param callback {callback_directory_changed}
   */
  on_changed_dir(callback) {
    this.changed_dir_callbacks.push(callback);
  }
  cut_selection() {
    /**
     * @type {number[]}
     */
    this.clipboard_items = Array.from(this.selected_items);
    this.clear_selection();
  }

  /**
   * @param parent_id {number | null}
   * @returns {Promise<void>}
   */
  async move_clipboard_to_parent(parent_id) {
    if (!this.clipboard_items || this.clipboard_items.length === 0) return;
    const res = await (0,_layout_widgets_components_message_box__WEBPACK_IMPORTED_MODULE_1__.parse_fetch_result)(await fetch(`${_utils__WEBPACK_IMPORTED_MODULE_0__.PAGE_CONTEXT.repos_path()}/move-item/${parent_id ? parent_id : ''}`, {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        item_ids: this.clipboard_items
      })
    }));
    if (!res.message) {
      for (const item of this.clipboard_items) {
        const old_item = this.filesystem.get_object_data(item);
        this.filesystem.remove_object(item, true);
        old_item.parent_item = parent_id;
        this.filesystem.add_object(old_item);
      }
    }
    delete this.clipboard_items;
  }
}


/***/ }),

/***/ "./client/common/tools/user.js":
/*!*************************************!*\
  !*** ./client/common/tools/user.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LOCAL_USER: () => (/* binding */ LOCAL_USER)
/* harmony export */ });
/* harmony import */ var _layout_widgets_components_message_box__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../layout/widgets/components/message_box */ "./client/layout/widgets/components/message_box.js");
/* harmony import */ var _client_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./client_string */ "./client/common/tools/client_string.js");


const dayjs = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
const utc = __webpack_require__(/*! dayjs/plugin/utc */ "./node_modules/dayjs/plugin/utc.js");
dayjs.extend(utc);
class CookieString {
  constructor(data) {
    this._cookies = new Map();
    if (!data) return;
    const ca = data.split(';');
    for (const c of ca) {
      const s = c.split("=");
      if (s.length === 1) continue;
      if (s[1].length === 0) continue;
      this.set(s[0][0] === " " ? s[0].substring(1) : s[0], s[1]);
    }
  }
  set(key, value) {
    let exp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    if (!value === null && this._cookies[key]) delete this._cookies.delete(key);
    this._cookies.set(key, {
      value: value,
      exp: exp
    });
  }
  read(key) {
    const cookie = this._cookies.get(key);
    return cookie ? cookie.value : null;
  }
  save() {
    if (document.cookie.length !== 0) for (const cookie of document.cookie.split(";")) document.cookie = `${cookie}; SameSite=Strict; expires=${new Date(0).toUTCString()}; path=/`;
    for (const [key, value] of this._cookies.entries()) {
      if (value.exp) document.cookie = `${key}=${value.value}; SameSite=Strict; expire=${dayjs.unix(value.exp).toDate().toUTCString()}; Max-Age=${value.exp - dayjs().unix()}; path=/`;else document.cookie = `${key}=${value.value}; SameSite=Strict; Max-Age=${86400 * 365 * 10}; path=/`;
    }
  }
}
class User {
  constructor() {
    const cookies = new CookieString(document.cookie);
    this._authtoken = cookies.read("authtoken");
    this._last_uri = document.documentURI;
    if (this._authtoken) this._authtoken_exp = cookies.read("authtoken-exp");
    /**
     * @type {string | null}
     * @private
     */
    this._last_repos = cookies.read("last-repos");
    if (!this._last_repos) this._last_repos = "";
    this.save_cookies();
  }
  get_token() {
    return this._authtoken;
  }

  /**
   * @returns {Promise<[]>}
   */
  async get_last_repos() {
    const repos = this._last_repos.split('.').filter(Boolean);
    return await (0,_layout_widgets_components_message_box__WEBPACK_IMPORTED_MODULE_0__.parse_fetch_result)(await fetch('/api/repos-data', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(repos)
    }));
  }

  /**
   * @param repos_id {string}
   */
  push_last_repos(repos_id) {
    let repos_list = this._last_repos.split('.').filter(Boolean);
    if (repos_list.length > 10) {
      repos_list = repos_list.reverse();
      repos_list.pop();
      repos_list = repos_list.reverse();
    }
    const new_repos_list = [];
    for (const repo of repos_list) if (String(repos_id) !== String(repo)) new_repos_list.push(repo);
    new_repos_list.push(repos_id);
    this._last_repos = '';
    for (const item of new_repos_list) this._last_repos += `${item}.`;
    this.save_cookies();
  }
  auth_header(header) {
    if (!header) header = {};
    header['content-authtoken'] = this._authtoken;
    return header;
  }

  /**
   * @param username {ClientString}
   * @param password {string}
   * @return {Promise<void>}
   */
  async login(username, password) {
    const authtoken = await (0,_layout_widgets_components_message_box__WEBPACK_IMPORTED_MODULE_0__.parse_fetch_result)(await fetch('/api/create-authtoken', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        username: new _client_string__WEBPACK_IMPORTED_MODULE_1__.ClientString(username),
        password: String(password),
        device: _client_string__WEBPACK_IMPORTED_MODULE_1__.ClientString.FromClient(navigator.userAgent)
      })
    }));
    if (authtoken.token) {
      this._authtoken = authtoken.token;
      this._authtoken_exp = authtoken.expiration_date;
      this.save_cookies();
      window.location.reload();
    }
  }

  /**
   * @param username {ClientString}
   * @param email {ClientString}
   * @param password {string}
   * @return {Promise<void>}
   */
  async register(username, email, password) {
    const authtoken = await (0,_layout_widgets_components_message_box__WEBPACK_IMPORTED_MODULE_0__.parse_fetch_result)(await fetch('/api/create-user', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        username: new _client_string__WEBPACK_IMPORTED_MODULE_1__.ClientString(username),
        email: new _client_string__WEBPACK_IMPORTED_MODULE_1__.ClientString(email),
        password: String(password),
        device: _client_string__WEBPACK_IMPORTED_MODULE_1__.ClientString.FromClient(navigator.userAgent)
      })
    }));
    if (authtoken.token) {
      this._authtoken = authtoken.token;
      this._authtoken_exp = authtoken.expiration_date;
      this.save_cookies();
      window.location = `/${username}/`;
    }
  }
  async logout() {
    if (this._authtoken) await (0,_layout_widgets_components_message_box__WEBPACK_IMPORTED_MODULE_0__.parse_fetch_result)(await fetch(`/api/delete-authtoken/${this._authtoken}`, {
      method: 'POST'
    }));
    delete this._authtoken;
    delete this._authtoken_exp;
    this.save_cookies();
    window.location.reload();
  }
  save_cookies() {
    const cookies = new CookieString();
    if (this._authtoken) if (this._authtoken_exp) cookies.set("authtoken", this._authtoken, this._authtoken_exp);else cookies.set("authtoken", this._authtoken, dayjs().unix() + 36000);
    if (this._authtoken_exp) cookies.set("authtoken-exp", this._authtoken_exp);
    cookies.set("last-repos", this._last_repos);
    cookies.save();
  }
}
const LOCAL_USER = new User();
window.LOCAL_USER = LOCAL_USER;


/***/ }),

/***/ "./client/common/tools/utils.js":
/*!**************************************!*\
  !*** ./client/common/tools/utils.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PAGE_CONTEXT: () => (/* binding */ PAGE_CONTEXT),
/* harmony export */   humanFileSize: () => (/* binding */ humanFileSize),
/* harmony export */   human_readable_timestamp: () => (/* binding */ human_readable_timestamp),
/* harmony export */   is_touch_device: () => (/* binding */ is_touch_device),
/* harmony export */   object_to_decoded_string: () => (/* binding */ object_to_decoded_string),
/* harmony export */   permissions: () => (/* binding */ permissions),
/* harmony export */   seconds_to_str: () => (/* binding */ seconds_to_str)
/* harmony export */ });
/* harmony import */ var _client_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./client_string */ "./client/common/tools/client_string.js");

const dayjs = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
const utc = __webpack_require__(/*! dayjs/plugin/utc */ "./node_modules/dayjs/plugin/utc.js");
dayjs.extend(utc);
function humanFileSize(bytes) {
  const thresh = 1024;
  if (Math.abs(bytes) < thresh) {
    return bytes + ' o';
  }
  const units = ['ko', 'Mo', 'Go', 'To', 'Po', 'Eo', 'Zo', 'Yo'];
  let u = -1;
  const r = 10;
  do {
    bytes /= thresh;
    ++u;
  } while (Math.round(Math.abs(bytes) * r) / r >= thresh && u < units.length - 1);
  return bytes.toFixed(1) + ' ' + units[u];
}
function seconds_to_str(in_seconds) {
  const milliseconds = in_seconds * 1000;
  function numberEnding(number) {
    return number > 1 ? 's' : '';
  }
  let temp = Math.floor(milliseconds / 1000);
  const years = Math.floor(temp / 31536000);
  if (years) {
    return years + ' année' + numberEnding(years);
  }
  const days = Math.floor((temp %= 31536000) / 86400);
  if (days) {
    return days + ' jour' + numberEnding(days);
  }
  const hours = Math.floor((temp %= 86400) / 3600);
  if (hours) {
    return hours + ' heure' + numberEnding(hours);
  }
  const minutes = Math.floor((temp %= 3600) / 60);
  if (minutes) {
    return minutes + ' minute' + numberEnding(minutes);
  }
  const seconds = temp % 60;
  if (seconds) {
    return seconds + ' seconde' + numberEnding(seconds);
  }
  return '0s';
}
function human_readable_timestamp(timestamp) {
  return dayjs.unix(timestamp).locale('fr').format('DD/MM/YYYY - HH:MM:ss');
}
class PageContext {
  /**
   * @param data {{
   *      connected_user:{id:number, email: ClientString, name:ClientString, role:string},
   *      display_user:{id:number, name: ClientString},
   *      display_repos:{id:number, description:ClientString, name: ClientString, owner:number, status:string, display_name:ClientString, max_file_size:number, visitor_file_lifetime:number, allow_visitor_upload:number}
   *      request_path:ClientString,
   *  } || null} */

  constructor(data) {
    if (!data) return;
    this.connected_user = data.connected_user;
    if (this.connected_user) {
      this.connected_user.name = new _client_string__WEBPACK_IMPORTED_MODULE_0__.ClientString(this.connected_user.name);
      this.connected_user.email = new _client_string__WEBPACK_IMPORTED_MODULE_0__.ClientString(this.connected_user.email);
    }
    this.display_user = data.display_user;
    if (this.display_user) {
      this.display_user.name = new _client_string__WEBPACK_IMPORTED_MODULE_0__.ClientString(this.display_user.name);
    }
    this.display_repos = data.display_repos;
    if (data.display_repos) {
      this.display_repos.name = new _client_string__WEBPACK_IMPORTED_MODULE_0__.ClientString(data.display_repos.name);
      this.display_repos.description = new _client_string__WEBPACK_IMPORTED_MODULE_0__.ClientString(data.display_repos.description);
      this.display_repos.display_name = new _client_string__WEBPACK_IMPORTED_MODULE_0__.ClientString(data.display_repos.display_name);
    }
    this.request_path = _client_string__WEBPACK_IMPORTED_MODULE_0__.ClientString.FromClient(decodeURI(data.request_path));
  }
  user_path() {
    if (this.display_user) return `/${this.display_user.name.for_url()}`;
    return null;
  }
  repos_path() {
    if (this.display_user && this.display_repos) return `/${this.display_user.name.for_url()}/${this.display_repos.name.for_url()}`;
    return null;
  }
}
const PAGE_CONTEXT = new PageContext(typeof __PAGE_CONTEXT === 'undefined' ? null : __PAGE_CONTEXT);
class Permissions {
  /**
   * @param repos_url {string}
   * @return {Promise<boolean>}
   */
  async can_user_edit_repos(repos_url) {
    return (await fetch(`${repos_url}/permissions/edit`)).status === 200;
  }

  /**
   * @param repos_url {string}
   * @return {Promise<boolean>}
   */
  async can_user_upload_to_repos(repos_url) {
    return (await fetch(`${repos_url}/permissions/upload`)).status === 200;
  }

  /**
   * @param repos_url {string}
   * @param item_id {string}
   * @return {Promise<boolean>}
   */
  async can_user_edit_item(repos_url, item_id) {
    return (await fetch(`${repos_url}/permissions/edit/${item_id ? item_id : ""}`)).status === 200;
  }

  /**
   * @param repos_url {string}
   * @param object {number}
   * @return {Promise<boolean>}
   */
  async can_user_upload_to_directory(repos_url, object) {
    return (await fetch(`${repos_url}/permissions/upload/${object ? object : ""}`)).status === 200;
  }
}
function is_touch_device() {
  return window.matchMedia("(pointer: coarse)").matches;
}
const permissions = new Permissions();

/**
 * @param object {object}
 * @return {object}
 */
function object_to_decoded_string(object) {
  for (const [field, value] of Object.entries(object)) {
    if (value._encoded_string_data) {
      object[field] = new _client_string__WEBPACK_IMPORTED_MODULE_0__.ClientString(value).plain();
    }
  }
  return object;
}
window.utils = {
  humanFileSize,
  seconds_to_str,
  PAGE_CONTEXT,
  permissions
};


/***/ }),

/***/ "./client/embed_viewers/custom_elements/document/code.js":
/*!***************************************************************!*\
  !*** ./client/embed_viewers/custom_elements/document/code.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

class DocumentCode extends HTMLElement {
  constructor() {
    super();
    this.style.width = '100%';
    this.style.height = '100%';
    this.style.maxHeight = '100%';
    this.style.overflow = 'auto';
    this['white-space'] = 'pre-wrap';
    if (this.hasAttribute('src') && this.hasAttribute('class')) fetch(this.getAttribute('src')).then(data => data.text()).then(text => {
      const code = document.createElement('code');
      code.classList.add(this.getAttribute('class'));
      code['data-prismjs-copy'] = "Copy code";
      code.innerHTML = text.substring(0, Math.min(text.length, 200000));
      const pre = document.createElement('pre');
      pre.classList.add('line-numbers');
      pre.append(code);
      this.append(pre);
      Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_prismjs_plugins_autolinker_prism-autolinker_css-node_modules_prismjs_plu-70c122"), __webpack_require__.e("client_embed_viewers_custom_elements_document_prism_loader_js")]).then(__webpack_require__.bind(__webpack_require__, /*! ./prism_loader.js */ "./client/embed_viewers/custom_elements/document/prism_loader.js")).then(prism_loader => {
        prism_loader.build(this);
      });
    });
  }
}
customElements.define("document-code", DocumentCode);

/***/ }),

/***/ "./client/embed_viewers/custom_elements/document/markdown.js":
/*!*******************************************************************!*\
  !*** ./client/embed_viewers/custom_elements/document/markdown.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

class DocumentMarkdown extends HTMLElement {
  constructor() {
    super();
    this.style.backgroundColor = '#f5f5f5';
    this.style.color = '#262626';
    this.style.width = '100%';
    this.style.height = '100%';
    this.style.maxHeight = '100%';
    this.style.overflow = 'auto';
    if (this.hasAttribute('src')) fetch(this.getAttribute('src')).then(data => data.text()).then(text => {
      __webpack_require__.e(/*! import() */ "client_embed_viewers_custom_elements_document_showdown_loader_js").then(__webpack_require__.bind(__webpack_require__, /*! ./showdown_loader.js */ "./client/embed_viewers/custom_elements/document/showdown_loader.js")).then(showdown_loader => {
        this.innerHTML = showdown_loader.convert_text(text);
      });
    });
  }
}
customElements.define("document-markdown", DocumentMarkdown);

/***/ }),

/***/ "./client/embed_viewers/custom_elements/pdf_viewer/pdf-viewer.js":
/*!***********************************************************************!*\
  !*** ./client/embed_viewers/custom_elements/pdf_viewer/pdf-viewer.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

class PdfViewer extends HTMLElement {
  constructor() {
    super();
    this.style.backgroundColor = '#f5f5f5';
    this.style.color = '#262626';
    this.style.width = '100%';
    this.style.height = '100%';
    this.style.maxHeight = '100%';
    if (!this.hasAttribute('src')) return;
    this.pdfDoc = null;
    this.pageNum = 1;
    this.pageRendering = false;
    this.pageNumPending = null;
    this.scale = 0.8;
    const this_ref = this;
    const display = __webpack_require__(/*! ./pdf-viewer.hbs */ "./client/embed_viewers/custom_elements/pdf_viewer/pdf-viewer.hbs")({}, {
      'page_next': () => {
        this.ask_for_page(this.pageNum + 1);
      },
      'page_prev': () => {
        this.ask_for_page(this.pageNum + 1);
      },
      'zoom': () => {
        this.zoom(this.scale * 1.2);
      },
      'dezoom': () => {
        this.zoom(this.scale / 1.2);
      }
    });
    this.canvas = display.getElementsByTagName('canvas')[0];
    this.attachShadow({
      mode: 'open'
    }).append(display);
    Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_pdfjs-dist_build_pdf_mjs"), __webpack_require__.e("client_embed_viewers_custom_elements_pdf_viewer_pdfjsdist_loader_js")]).then(__webpack_require__.bind(__webpack_require__, /*! ./pdfjsdist_loader */ "./client/embed_viewers/custom_elements/pdf_viewer/pdfjsdist_loader.js")).then(pdfjs => {
      pdfjs.get_pdf_js_dist().getDocument(this.getAttribute('src')).promise.then(function (pdfDocument) {
        this_ref.pdfDoc = pdfDocument;
        this_ref.render_page(1);
      });
    });
  }
  zoom(new_level) {
    this.scale = new_level;
    if (!this.pageNumPending) this.render_page(this.pageNum);
  }
  ask_for_page(number) {
    if (this.pageRendering) this.pageNumPending = number;else this.render_page(number);
  }
  render_page(page_number) {
    this.pageNum = page_number;
    const this_ref = this;
    return this.pdfDoc.getPage(this.pageNum).then(function (pdfPage) {
      // Display page on the existing canvas with 100% scale.
      const viewport = pdfPage.getViewport({
        scale: this_ref.scale
      });
      this_ref.canvas.width = viewport.width;
      this_ref.canvas.height = viewport.height;
      const ctx = this_ref.canvas.getContext("2d");
      const renderTask = pdfPage.render({
        canvasContext: ctx,
        viewport
      });
      this_ref.pageRendering = true;
      return renderTask.promise.then(function () {
        this_ref.pageRendering = false;
        if (this_ref.pageNumPending !== null) {
          this_ref.render_page(this_ref.pageNumPending);
          this_ref.pageNumPending = null;
        }
      });
    });
  }
}
customElements.define("pdf-embed", PdfViewer);

/***/ }),

/***/ "./client/layout/administration/administration_panel.js":
/*!**************************************************************!*\
  !*** ./client/layout/administration/administration_panel.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _common_tools_user__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/tools/user */ "./client/common/tools/user.js");
/* harmony import */ var _widgets_components_message_box__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../widgets/components/message_box */ "./client/layout/widgets/components/message_box.js");
/* harmony import */ var _common_tools_client_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/tools/client_string */ "./client/common/tools/client_string.js");
/* harmony import */ var _common_tools_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/tools/utils */ "./client/common/tools/utils.js");




__webpack_require__(/*! ./administration.scss */ "./client/layout/administration/administration.scss");
const user_hbs = __webpack_require__(/*! ./user.hbs */ "./client/layout/administration/user.hbs");
const repos_hbs = __webpack_require__(/*! ./repos.hbs */ "./client/layout/administration/repos.hbs");
const stats_hbs = __webpack_require__(/*! ./stats.hbs */ "./client/layout/administration/stats.hbs");
class AdministrationPanel {
  constructor(stat_div, user_list_div, repo_list_div) {
    this.stat_div = stat_div;
    this.user_list_div = user_list_div;
    this.repo_list_div = repo_list_div;
    this.refresh_data();
  }
  async refresh_data() {
    fetch(`/administration/stats/`, {
      headers: {
        'content-authtoken': _common_tools_user__WEBPACK_IMPORTED_MODULE_0__.LOCAL_USER.get_token(),
        'accept': 'application/json'
      }
    }).then(async response => await (0,_widgets_components_message_box__WEBPACK_IMPORTED_MODULE_1__.parse_fetch_result)(response)).then(json => {
      json.effective_size = (0,_common_tools_utils__WEBPACK_IMPORTED_MODULE_3__.humanFileSize)(json.effective_size);
      json.size = (0,_common_tools_utils__WEBPACK_IMPORTED_MODULE_3__.humanFileSize)(json.size);
      this.stat_div.append(stats_hbs(json, {}));
    });
    let user_list = new Map();
    await fetch(`/administration/userlist/`, {
      headers: {
        'content-authtoken': _common_tools_user__WEBPACK_IMPORTED_MODULE_0__.LOCAL_USER.get_token(),
        'accept': 'application/json'
      }
    }).then(async response => await (0,_widgets_components_message_box__WEBPACK_IMPORTED_MODULE_1__.parse_fetch_result)(response)).then(json => {
      for (let user of json) {
        user_list.set(user.id, user);
        this.user_list_div.append(user_hbs({
          id: user.id,
          name: new _common_tools_client_string__WEBPACK_IMPORTED_MODULE_2__.ClientString(user.name).plain(),
          email: new _common_tools_client_string__WEBPACK_IMPORTED_MODULE_2__.ClientString(user.email).plain(),
          is_guest: user.role === "guest",
          is_vip: user.role === "vip",
          is_admin: user.role === "admin",
          allow_contact: user.allow_contact
        }, {
          set_role: async event => {
            if (event.target.value === 'admin') return;
            await (0,_widgets_components_message_box__WEBPACK_IMPORTED_MODULE_1__.parse_fetch_result)(await fetch('/administration/setrole', {
              method: 'POST',
              headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                target: user.id,
                role: event.target.value
              })
            }));
          },
          delete_user: event => {},
          reset_password: event => {}
        }));
      }
    });
    fetch(`/administration/reposlist/`, {
      headers: {
        'content-authtoken': _common_tools_user__WEBPACK_IMPORTED_MODULE_0__.LOCAL_USER.get_token(),
        'accept': 'application/json'
      }
    }).then(async response => await (0,_widgets_components_message_box__WEBPACK_IMPORTED_MODULE_1__.parse_fetch_result)(response)).then(json => {
      for (let repos of json) {
        this.repo_list_div.append(repos_hbs({
          id: repos.id,
          name: new _common_tools_client_string__WEBPACK_IMPORTED_MODULE_2__.ClientString(repos.name).plain(),
          display_name: new _common_tools_client_string__WEBPACK_IMPORTED_MODULE_2__.ClientString(repos.display_name).plain(),
          owner: new _common_tools_client_string__WEBPACK_IMPORTED_MODULE_2__.ClientString(user_list.get(repos.owner).name).plain(),
          description: new _common_tools_client_string__WEBPACK_IMPORTED_MODULE_2__.ClientString(repos.description).plain(),
          status: repos.status,
          visitor_file_lifetime: (0,_common_tools_utils__WEBPACK_IMPORTED_MODULE_3__.seconds_to_str)(repos.visitor_file_lifetime),
          max_file_size: (0,_common_tools_utils__WEBPACK_IMPORTED_MODULE_3__.humanFileSize)(repos.max_file_size),
          allow_visitor_upload: (0,_common_tools_utils__WEBPACK_IMPORTED_MODULE_3__.humanFileSize)(repos.allow_visitor_upload)
        }, {
          delete_user: event => {},
          reset_password: event => {}
        }));
      }
    });
  }
}
window.administration = {
  AdministrationPanel
};

/***/ }),

/***/ "./client/layout/drop_box.js":
/*!***********************************!*\
  !*** ./client/layout/drop_box.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _common_tools_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/tools/utils */ "./client/common/tools/utils.js");
/* harmony import */ var _widgets_viewport_repos_builder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./widgets/viewport/repos_builder */ "./client/layout/widgets/viewport/repos_builder.js");


const drop_box = document.createElement('div');
drop_box.classList.add('drop-box');
let WILL_DROP = null;
function reset_style() {
  drop_box.classList.remove('hover');
  drop_box.classList.remove('forbidden');
}
document.body.addEventListener('dragenter', async event => {
  if (!WILL_DROP) {
    WILL_DROP = new Promise(async resolve => {
      if (!_common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.PAGE_CONTEXT.display_repos) return resolve(false);
      const directory = _widgets_viewport_repos_builder__WEBPACK_IMPORTED_MODULE_1__.REPOS_BUILDER.navigator.get_current_directory();
      if (directory && (await _common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.permissions.can_user_upload_to_directory(_common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.PAGE_CONTEXT.repos_path(), directory)) || (await _common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.permissions.can_user_upload_to_repos(_common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.PAGE_CONTEXT.repos_path()))) {
        resolve(true);
      } else resolve(false);
    });
  }
  event.preventDefault();
  if (!WILL_DROP || !(await WILL_DROP)) {
    drop_box.classList.add('forbidden');
    return;
  }
  drop_box.classList.add('hover');
});
document.body.addEventListener('mouseout', event => {
  WILL_DROP = null;
  reset_style();
  event.preventDefault();
});
document.body.addEventListener('dragover', async event => {
  event.preventDefault();
});
document.body.addEventListener('drop', async event => {
  reset_style();
  event.preventDefault();
  if (!WILL_DROP || !(await WILL_DROP)) {
    if (_common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.PAGE_CONTEXT.display_repos) window.location = `TODO OPEN UPLOAD PAGE HEHE`;
    return;
  }
  if (!event.dataTransfer) {
    return;
  }
  if (event.dataTransfer.items) {
    [...event.dataTransfer.items].forEach((item, i) => {
      const process_entry = (entry, path) => {
        if (entry.isDirectory) {
          path = `${path ? path : ''}/${entry.name}`;
          entry.createReader().readEntries(entries => {
            for (const new_entry of entries) process_entry(new_entry, path);
          });
        } else {
          entry.file(file => {
            if (file.size === 0) return;
            upload.add_file_to_upload(file, path);
          });
        }
      };
      if (item.kind === "file") {
        const entry = "getAsEntry" in DataTransferItem.prototype ? item.getAsEntry() : item.webkitGetAsEntry();
        process_entry(entry);
      }
    });
  } else {
    [...event.dataTransfer.files].forEach((file, _) => {
      upload.add_file_to_upload(file, '/');
    });
  }
});
document.body.append(drop_box);

/***/ }),

/***/ "./client/layout/handlebars_helpers.js":
/*!*********************************************!*\
  !*** ./client/layout/handlebars_helpers.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var handlebars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! handlebars */ "./node_modules/handlebars/dist/cjs/handlebars.js");
/* harmony import */ var handlebars__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(handlebars__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _common_tools_mime_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/tools/mime_utils */ "./client/common/tools/mime_utils.js");
/* harmony import */ var _common_tools_client_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/tools/client_string */ "./client/common/tools/client_string.js");




/* ################## HELPER {ITEM_THUMBNAIL} ################## */
const get_item_thumbnail = __webpack_require__(/*! ../common/tools/get_item_thumbnail */ "./client/common/tools/get_item_thumbnail.js");
handlebars__WEBPACK_IMPORTED_MODULE_0___default().registerHelper("item_thumbnail", item => {
  //@TODO : remove this temporary fix and use the new filesystem
  if (item.is_file) {
    item.is_regular_file = true;
    item.mimetype = _common_tools_client_string__WEBPACK_IMPORTED_MODULE_2__.ClientString.FromClient(item.mimetype);
  }

  // CASE : IS STANDARD FILE
  if (item.is_regular_file) {
    if (!(0,_common_tools_mime_utils__WEBPACK_IMPORTED_MODULE_1__.is_mimetype_valid)(item.mimetype)) return new (handlebars__WEBPACK_IMPORTED_MODULE_0___default().SafeString)(_common_tools_mime_utils__WEBPACK_IMPORTED_MODULE_1__.UNDEFINED_MIME_STRING);
    // Distant repos
    if (item.id) {
      return new (handlebars__WEBPACK_IMPORTED_MODULE_0___default().SafeString)(get_item_thumbnail.from_distant_repos(item));
    }
    // Filesystem file
    else if (item.lastModified) {
      return new (handlebars__WEBPACK_IMPORTED_MODULE_0___default().SafeString)(get_item_thumbnail.from_local_path(item));
    }
  }
  // CASE : IS DIRECTORY
  else {
    return new (handlebars__WEBPACK_IMPORTED_MODULE_0___default().SafeString)(`<img src="/images/icons/icons8-folder-96.png" alt="dossier: ${item.name}">`);
  }
});

/* ################## HELPER {CTX} ################## */
handlebars__WEBPACK_IMPORTED_MODULE_0___default().registerHelper("typeicon", function (options) {
  return new (handlebars__WEBPACK_IMPORTED_MODULE_0___default().SafeString)(`<img class='typeicon' alt='typeicon' src="${(0,_common_tools_mime_utils__WEBPACK_IMPORTED_MODULE_1__.get_mime_icon_path)(options)}">`);
});

/* ################## HELPER {CTX} ################## */
handlebars__WEBPACK_IMPORTED_MODULE_0___default().registerHelper("ctx", function (options) {
  if (!this['__handlebar_ctx_id']) return console.error('This template was not instanced with a context');
  return new (handlebars__WEBPACK_IMPORTED_MODULE_0___default().SafeString)("console.assert(document.__handlebar_custom_loader.__registered_ctx[" + this['__handlebar_ctx_id'] + "], 'no context provided for : " + options + " on object :', this, '\\n Available contexts :', document.__handlebar_custom_loader.__registered_ctx); document.__handlebar_custom_loader.__registered_ctx[" + this['__handlebar_ctx_id'] + "]." + options);
});

/* ################## HELPER {MARKDOWN} ################## */
handlebars__WEBPACK_IMPORTED_MODULE_0___default().registerHelper("markdown", function (options) {
  const converter = new ((__webpack_require__(/*! showdown */ "./node_modules/showdown/dist/showdown.js").Converter))();
  return new (handlebars__WEBPACK_IMPORTED_MODULE_0___default().SafeString)(converter.makeHtml(options.toString()));
});

/***/ }),

/***/ "./client/layout/widgets/auth/auth.js":
/*!********************************************!*\
  !*** ./client/layout/widgets/auth/auth.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   logout: () => (/* binding */ logout),
/* harmony export */   open_modal_signin: () => (/* binding */ open_modal_signin),
/* harmony export */   open_modal_signup: () => (/* binding */ open_modal_signup)
/* harmony export */ });
/* harmony import */ var _components_modal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/modal.js */ "./client/layout/widgets/components/modal.js");
/* harmony import */ var _components_message_box_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/message_box.js */ "./client/layout/widgets/components/message_box.js");
/* harmony import */ var _signin_hbs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./signin.hbs */ "./client/layout/widgets/auth/signin.hbs");
/* harmony import */ var _signin_hbs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_signin_hbs__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _signup_hbs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./signup.hbs */ "./client/layout/widgets/auth/signup.hbs");
/* harmony import */ var _signup_hbs__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_signup_hbs__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _reset_password_hbs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./reset_password.hbs */ "./client/layout/widgets/auth/reset_password.hbs");
/* harmony import */ var _reset_password_hbs__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_reset_password_hbs__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _common_tools_user__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../common/tools/user */ "./client/common/tools/user.js");
/* harmony import */ var _common_tools_client_string__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../common/tools/client_string */ "./client/common/tools/client_string.js");


__webpack_require__(/*! ./auth.scss */ "./client/layout/widgets/auth/auth.scss");





function open_modal_signin() {
  (0,_components_modal_js__WEBPACK_IMPORTED_MODULE_0__.open_modal)(_signin_hbs__WEBPACK_IMPORTED_MODULE_2___default()({}, {
    signin: async e => {
      e.preventDefault();
      await _common_tools_user__WEBPACK_IMPORTED_MODULE_5__.LOCAL_USER.login(_common_tools_client_string__WEBPACK_IMPORTED_MODULE_6__.ClientString.FromClient(document.getElementById('username').value), document.getElementById('password').value);
    },
    reset_password: async e => {
      if (document.getElementById('username').value.length === 0) return (0,_components_message_box_js__WEBPACK_IMPORTED_MODULE_1__.print_message)('error', "Spécifiez un utilisateur", "Veuillez spécifier un nom d'utilisateur ou un mail.");
      const res = await (0,_components_message_box_js__WEBPACK_IMPORTED_MODULE_1__.parse_fetch_result)(await fetch(`/api/reset-password/`, {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          email: _common_tools_client_string__WEBPACK_IMPORTED_MODULE_6__.ClientString.FromClient(document.getElementById('username').value)
        })
      }));
      if (!res.message) (0,_components_message_box_js__WEBPACK_IMPORTED_MODULE_1__.print_message)('info', 'Mail de réinitialisation envoyé', 'Vérifiez votre boite mail pour poursuivre la procédure de réinitialisation');
    }
  }), '500px', '400px', 'auth');
}
function open_modal_signup() {
  (0,_components_modal_js__WEBPACK_IMPORTED_MODULE_0__.open_modal)(_signup_hbs__WEBPACK_IMPORTED_MODULE_3___default()({}, {
    signup: async e => {
      e.preventDefault();
      if (!document.getElementById('email').validity.valid) {
        await (0,_components_message_box_js__WEBPACK_IMPORTED_MODULE_1__.print_message)('error', 'Email invalide', 'veuillez spécifier un email valide');
        return;
      }
      await _common_tools_user__WEBPACK_IMPORTED_MODULE_5__.LOCAL_USER.register(_common_tools_client_string__WEBPACK_IMPORTED_MODULE_6__.ClientString.FromClient(document.getElementById('username').value), _common_tools_client_string__WEBPACK_IMPORTED_MODULE_6__.ClientString.FromClient(document.getElementById('email').value), document.getElementById('password').value);
    }
  }), '500px', '450px', 'auth');
}
function open_modal_reset_password(reset_token) {
  (0,_components_modal_js__WEBPACK_IMPORTED_MODULE_0__.open_modal)(_reset_password_hbs__WEBPACK_IMPORTED_MODULE_4___default()({}, {
    reset: async e => {
      e.preventDefault();
      const res = await (0,_components_message_box_js__WEBPACK_IMPORTED_MODULE_1__.parse_fetch_result)(await fetch(`/api/reset-password/${reset_token}/`, {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          password: String(document.getElementById('password').value)
        })
      }));
      if (!res.message) (0,_components_message_box_js__WEBPACK_IMPORTED_MODULE_1__.print_message)('info', "Mot de passe réinitialisé", "Connectez vous avez votre nouveau mot de passe");
      location.href = '/';
    }
  }), '500px', '250px', 'auth');
}
async function logout() {
  await _common_tools_user__WEBPACK_IMPORTED_MODULE_5__.LOCAL_USER.logout();
}
window.auth = {
  open_modal_signin,
  open_modal_signup,
  logout,
  open_modal_reset_password
};


/***/ }),

/***/ "./client/layout/widgets/components/carousel/carousel.js":
/*!***************************************************************!*\
  !*** ./client/layout/widgets/components/carousel/carousel.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Carousel: () => (/* binding */ Carousel)
/* harmony export */ });
/* harmony import */ var _viewport_carousel_viewport__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./viewport/carousel_viewport */ "./client/layout/widgets/components/carousel/viewport/carousel_viewport.js");
/* harmony import */ var _overlay_carousel_overlay__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./overlay/carousel_overlay */ "./client/layout/widgets/components/carousel/overlay/carousel_overlay.js");


__webpack_require__(/*! ./carousel.scss */ "./client/layout/widgets/components/carousel/carousel.scss");
__webpack_require__(/*! ./carousel_fullscreen.scss */ "./client/layout/widgets/components/carousel/carousel_fullscreen.scss");
const carousel_fullscreen_hbs = __webpack_require__(/*! ./carousel_fullscreen.hbs */ "./client/layout/widgets/components/carousel/carousel_fullscreen.hbs");
let FULLSCREEN_CONTAINER = null;
class Carousel {
  /**
   * @param list {CarouselList}
   * @param container {HTMLElement}
   * @param base_item
   */
  constructor(list, container, base_item) {
    this.list = list;
    list.on_select_item = item => {
      __webpack_require__.e(/*! import() */ "client_embed_viewers_index_js").then(__webpack_require__.bind(__webpack_require__, /*! ../../../../embed_viewers */ "./client/embed_viewers/index.js")).then(async _ => {
        new _viewport_carousel_viewport__WEBPACK_IMPORTED_MODULE_0__.CarouselViewport(container, item);
        new _overlay_carousel_overlay__WEBPACK_IMPORTED_MODULE_1__.CarouselOverlay(this, container, item);
      });
    };
    list.select_item(base_item, true);
    this.container = container;
  }
  static get_fullscreen_container() {
    if (!FULLSCREEN_CONTAINER) {
      const new_container = carousel_fullscreen_hbs({});
      document.body.append(new_container);
      FULLSCREEN_CONTAINER = {
        root: new_container,
        background_container: document.getElementById('carousel-fullscreen'),
        list_container: document.getElementById('carousel-fullscreen-list')
      };
    }
    return FULLSCREEN_CONTAINER;
  }
  close() {
    if (this.on_close) this.on_close();
    this.container.innerHTML = null;
  }
}


/***/ }),

/***/ "./client/layout/widgets/components/carousel/list/carousel_list.js":
/*!*************************************************************************!*\
  !*** ./client/layout/widgets/components/carousel/list/carousel_list.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CarouselList: () => (/* binding */ CarouselList)
/* harmony export */ });
const carousel_list_hbs = __webpack_require__(/*! ./carousel_list.hbs */ "./client/layout/widgets/components/carousel/list/carousel_list.hbs");
const carousel_list_item_hbs = __webpack_require__(/*! ./carousel_list_item.hbs */ "./client/layout/widgets/components/carousel/list/carousel_list_item.hbs");
class CarouselList {
  /**
   * @param directory_content {DirectoryContent}
   * @param on_select_item
   */
  constructor(directory_content, on_select_item) {
    this.directory_content = directory_content;
    /**
     * @type {number[]}
     */
    this.objects = [];
    for (const entry of directory_content.objects) this.objects.push(entry.id);
    this.on_select_item = on_select_item;
    this._last_selected = null;
    this.element_map = new Map();
  }
  select_item(meta_data) {
    let scroll_center = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (this._last_selected) {
      this._last_selected.classList.remove('selected');
    }
    this._last_selected = this.element_map.get(meta_data.id);
    if (!this._last_selected) return;
    this._last_selected.classList.add('selected');
    if (this.on_select_item) this.on_select_item(meta_data);
    this._last_selected.scrollIntoView({
      behavior: "smooth",
      inline: scroll_center ? 'center' : 'nearest'
    });
    this.update_left_right_buttons();
  }
  select_next() {
    const meta_data = this.directory_content.navigator.filesystem.get_object_data(this._last_selected.nextSibling.item_id);
    if (meta_data.is_regular_file) {
      this.select_item(meta_data, true);
    }
  }
  select_previous() {
    const meta_data = this.directory_content.navigator.filesystem.get_object_data(this._last_selected.previousSibling.item_id);
    if (meta_data.is_regular_file) {
      this.select_item(meta_data, true);
    }
  }

  /**
   @param container {HTMLElement}
   */
  build_visual(container) {
    container.innerHTML = '';
    const carousel_list = carousel_list_hbs({}, {
      move_left: () => {
        this.select_previous();
      },
      move_right: () => {
        this.select_next();
      }
    });
    this.move_left_button = carousel_list.getElementsByClassName('carousel-move-left')[0];
    this.move_right_button = carousel_list.getElementsByClassName('carousel-move-right')[0];
    const carousel_list_div = carousel_list.getElementsByClassName('carousel-list')[0];
    this.container = carousel_list_div;
    carousel_list_div.addEventListener('wheel', e => {
      carousel_list.scrollLeft += e.deltaY * 0.5;
    });
    carousel_list_div.innerHTML = '';
    const left_spacer = document.createElement('div');
    left_spacer.style.width = '100px';
    carousel_list_div.append(left_spacer);
    for (const object of this.objects) {
      const meta_data = this.directory_content.navigator.filesystem.get_object_data(object);
      if (meta_data.is_regular_file) {
        const callbacks = {};
        const item = carousel_list_item_hbs({
          item: meta_data
        }, callbacks);
        this.element_map.set(meta_data.id, item);
        callbacks.on_click = () => {
          this.select_item(meta_data);
        };
        item.item_id = meta_data.id;
        carousel_list_div.append(item);
      }
    }
    const right_spacer = document.createElement('div');
    right_spacer.style.width = '100px';
    carousel_list_div.append(right_spacer);
    container.append(carousel_list);
    this.update_left_right_buttons();
  }
  update_left_right_buttons() {
    if (this.move_left_button) {
      if (!this._last_selected || !this._last_selected.previousSibling.classList.contains('carousel-item')) this.move_left_button.style.display = 'none';else this.move_left_button.style.display = 'unset';
    }
    if (this.move_right_button) {
      if (!this._last_selected || !this._last_selected.nextSibling.classList.contains('carousel-item')) this.move_right_button.style.display = 'none';else this.move_right_button.style.display = 'unset';
    }
  }
}


/***/ }),

/***/ "./client/layout/widgets/components/carousel/overlay/carousel_overlay.js":
/*!*******************************************************************************!*\
  !*** ./client/layout/widgets/components/carousel/overlay/carousel_overlay.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CarouselOverlay: () => (/* binding */ CarouselOverlay)
/* harmony export */ });
/* harmony import */ var _common_tools_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../common/tools/utils */ "./client/common/tools/utils.js");
/* harmony import */ var _message_box__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../message_box */ "./client/layout/widgets/components/message_box.js");


class CarouselOverlay {
  /**
   * @param carousel {Carousel}
   * @param container {HTMLElement}
   * @param item
   */
  constructor(carousel, container, item) {
    this.carousel = carousel;
    this.container = container;
    this.carousel_overlay = __webpack_require__(/*! ./carousel_overlay.hbs */ "./client/layout/widgets/components/carousel/overlay/carousel_overlay.hbs")({
      item: item,
      file_size: (0,_common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.humanFileSize)(item.size)
    }, {
      close_carousel: () => {
        carousel.close();
      },
      download: () => {
        window.open(`${_common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.PAGE_CONTEXT.repos_path()}/file/${item.id}`, '_blank').focus();
      },
      share: async () => {
        let url = `${location.origin}${_common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.PAGE_CONTEXT.repos_path()}/file/${item.id}`;
        await navigator.clipboard.writeText(url);
        (0,_message_box__WEBPACK_IMPORTED_MODULE_1__.print_message)('info', 'Lien copié dans le presse - papier', url);
      }
    });
    container.firstChild.before(this.carousel_overlay);
  }
}


/***/ }),

/***/ "./client/layout/widgets/components/carousel/viewport/carousel_viewport.js":
/*!*********************************************************************************!*\
  !*** ./client/layout/widgets/components/carousel/viewport/carousel_viewport.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CarouselViewport: () => (/* binding */ CarouselViewport)
/* harmony export */ });
const carousel_item_hbs = __webpack_require__(/*! ./carousel_viewport.hbs */ "./client/layout/widgets/components/carousel/viewport/carousel_viewport.hbs");
function clamp(s, a, b) {
  return s < a ? a : s > b ? b : s;
}
class CarouselViewport {
  constructor(container, item) {
    container.innerHTML = '';
    /**
     * @type {HTMLElement}
     */
    const visual = carousel_item_hbs({
      item: item
    });
    if (item.description && item.description.plain() !== '') {
      __webpack_require__.e(/*! import() */ "client_embed_viewers_custom_elements_document_showdown_loader_js").then(__webpack_require__.bind(__webpack_require__, /*! ../../../../../embed_viewers/custom_elements/document/showdown_loader */ "./client/embed_viewers/custom_elements/document/showdown_loader.js")).then(showdown => {
        const directory_description = visual.getElementsByClassName('carousel-description')[0];
        if (directory_description) {
          directory_description.innerHTML = showdown.convert_text(item.description.plain());
          directory_description.style.padding = '20px';
          directory_description.style.display = 'unset';
        }
      });
    }
    container.append(visual);
    this.scale = 1;
    this.translationX = 0;
    this.translationY = 0;
    visual.addEventListener("wheel", e => {
      if (e.ctrlKey) {
        e.stopPropagation();
        const zoom = -clamp(e.deltaY, -29, 29) / 30 + 1;
        this.scale = clamp(this.scale * zoom, 1, 50);
        const offsetX = e.clientX - window.width / 2;
        const offsetY = e.clientY - window.height / 2;
        visual.style.transform = `scale(${this.scale}) translate(${this.translationX}px, ${this.translationY}px)`;
        e.preventDefault();
      }
    });
  }
}


/***/ }),

/***/ "./client/layout/widgets/components/context_action.js":
/*!************************************************************!*\
  !*** ./client/layout/widgets/components/context_action.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   spawn_context_action: () => (/* binding */ spawn_context_action)
/* harmony export */ });
const context_action_hbs = __webpack_require__(/*! ./context_action.hbs */ "./client/layout/widgets/components/context_action.hbs");
const mouse_pos = {
  x: 0,
  y: 0
};
document.addEventListener('mousemove', event => {
  mouse_pos.x = event.clientX;
  mouse_pos.y = event.clientY;
});
document.addEventListener('click', () => {
  if (last_context_action) last_context_action.remove();
  last_context_action = null;
});
document.oncontextmenu = () => {
  if (last_context_action) last_context_action.remove();
  last_context_action = null;
};
let last_context_action = null;
let objects = {};
function click_object(id) {
  objects[id]();
}
function spawn_context_action(actions) {
  setTimeout(() => {
    if (last_context_action) last_context_action.remove();
    objects = {};
    for (const action of actions) objects[action.title] = () => {
      if (last_context_action) last_context_action.remove();
      last_context_action = null;
      action.action();
    };
    last_context_action = context_action_hbs({
      actions: actions
    });
    last_context_action.style.left = Math.min(window.innerWidth - 200, mouse_pos.x) + 'px';
    last_context_action.style.top = Math.min(window.innerHeight - 40 * actions.length, mouse_pos.y) + 'px';
    document.body.append(last_context_action);
  }, 10);
}
window.context_action = {
  spawn_context_action,
  click_object
};


/***/ }),

/***/ "./client/layout/widgets/components/message_box.js":
/*!*********************************************************!*\
  !*** ./client/layout/widgets/components/message_box.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   close_message: () => (/* binding */ close_message),
/* harmony export */   parse_fetch_result: () => (/* binding */ parse_fetch_result),
/* harmony export */   print_message: () => (/* binding */ print_message)
/* harmony export */ });
const message_box = document.getElementById('message-box');
const message_box_message = document.getElementById('message-box-message');
let message_timeout = null;
function print_message(severity, title, message) {
  console.warn(`Message [${severity}] : ${title}\n${message}`);
  message_box.classList.add('message-box-open');
  message_box.classList.remove('message-box-close');
  message_box.querySelector('h1').innerText = title;
  message_box_message.innerText = message;
  if (message_timeout) clearTimeout(message_timeout);
  message_timeout = setTimeout(() => {
    message_box.classList.remove('message-box-open');
    message_box.classList.add('message-box-close');
    message_timeout = null;
  }, 15000);
}
async function parse_fetch_result(result) {
  if (result.redirected) {
    window.location.href = result.url;
    return null;
  }
  let jsonData = undefined;
  try {
    jsonData = await result.text();
    jsonData = JSON.parse(jsonData);
  } catch {}
  if (jsonData) {
    if (jsonData && jsonData.message) print_message(jsonData.message.severity, jsonData.message.title, jsonData.message.content);
    return jsonData;
  } else if (result.status) {
    if (result.status !== 200 && result.status !== 201 && result.status !== 202) print_message("Error", "Unknown error", `${result.status} : ${result.statusText}`);
  }
  return jsonData;
}
function close_message() {
  message_box.classList.remove('message-box-open');
  message_box.classList.add('message-box-close');
  message_timeout = null;
}
window.message_box = {
  print_message,
  parse_fetch_result,
  close_message
};


/***/ }),

/***/ "./client/layout/widgets/components/modal.js":
/*!***************************************************!*\
  !*** ./client/layout/widgets/components/modal.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   close_modal: () => (/* binding */ close_modal),
/* harmony export */   is_modal_open: () => (/* binding */ is_modal_open),
/* harmony export */   open_modal: () => (/* binding */ open_modal)
/* harmony export */ });
const modal = document.getElementById('modal');
const modal_content = document.getElementById('modal-content');
function close_modal() {
  if (modal_content.on_close_modal) if (!modal_content.on_close_modal()) return;
  modal.classList.remove('show');
}

/**
 * @param content
 * @param custom_width {string|null}
 * @param custom_height {string|null}
 * @param modal_class {string|null}
 * @return {HTMLElement}
 */
function open_modal(content) {
  let custom_width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  let custom_height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  let modal_class = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  modal_content.classList.remove(...modal_content.classList);
  modal.classList.add('show');
  if (custom_width) modal_content.style.width = custom_width;else modal_content.style.width = 'fit-content';
  if (custom_height) modal_content.style.height = custom_height;else modal_content.style.height = 'fit-content';
  modal_content.innerHTML = "";
  if (modal_class) modal_content.classList.add(modal_class);
  if (content.length) for (const item of content) modal_content.append(item);else modal_content.append(content);
  modal_content.on_close_modal = null;
  const inputs = modal_content.getElementsByTagName('input');
  if (inputs.length !== 0) inputs[0].focus();
  return modal_content;
}
function is_modal_open() {
  return modal.classList.contains('show');
}
window.modal = {
  open_modal,
  close_modal,
  is_opened: is_modal_open
};


/***/ }),

/***/ "./client/layout/widgets/create_repos/create-repos-form.js":
/*!*****************************************************************!*\
  !*** ./client/layout/widgets/create_repos/create-repos-form.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   open_create_repos_modal: () => (/* binding */ open_create_repos_modal)
/* harmony export */ });
/* harmony import */ var _components_modal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/modal.js */ "./client/layout/widgets/components/modal.js");

__webpack_require__(/*! ./create-repos.scss */ "./client/layout/widgets/create_repos/create-repos.scss");
const create_repos = __webpack_require__(/*! ./create_repos.hbs */ "./client/layout/widgets/create_repos/create_repos.hbs");
function open_create_repos_modal() {
  (0,_components_modal_js__WEBPACK_IMPORTED_MODULE_0__.open_modal)(create_repos(), '500px', '350px', 'create-repos');
}
window.create_repos = {
  open_create_repos_modal
};


/***/ }),

/***/ "./client/layout/widgets/delete_repos/delete_repos_form.js":
/*!*****************************************************************!*\
  !*** ./client/layout/widgets/delete_repos/delete_repos_form.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   delete_repos: () => (/* binding */ delete_repos)
/* harmony export */ });
/* harmony import */ var _components_modal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/modal.js */ "./client/layout/widgets/components/modal.js");

__webpack_require__(/*! ./delete-repos.scss */ "./client/layout/widgets/delete_repos/delete-repos.scss");
const delete_repos_form = __webpack_require__(/*! ./delete_repos.hbs */ "./client/layout/widgets/delete_repos/delete_repos.hbs");
function delete_repos(e) {
  (0,_components_modal_js__WEBPACK_IMPORTED_MODULE_0__.open_modal)(delete_repos_form(e, {
    clicked: async () => {
      if (remaining_s <= 0) {
        await fetch(`/${e.username}/${e.name}/delete`, {
          method: 'POST'
        });
        window.location = `/`;
      }
    }
  }), '500px', '180px', 'delete-repos');
  let remaining_s = 5;
  const countdown_bar = document.getElementsByClassName('progress-bar')[0];
  const countdown_button = document.getElementById('countdown-button');
  countdown_button.disabled = true;
  const countdown = () => {
    if (remaining_s > 0) {
      remaining_s -= 1 / 30;
      setTimeout(countdown, 1000 / 30);
    } else {
      countdown_button.disabled = false;
      countdown_button.value = 'Supprimer';
      return;
    }
    countdown_button.value = `${Math.ceil(remaining_s)}s`;
    countdown_bar.style.width = `${100 - remaining_s * 20}%`;
  };
  countdown();
}
window.delete_repos = {
  delete_repos
};


/***/ }),

/***/ "./client/layout/widgets/edit_repos/edit_repos_form.js":
/*!*************************************************************!*\
  !*** ./client/layout/widgets/edit_repos/edit_repos_form.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   edit_repos: () => (/* binding */ edit_repos)
/* harmony export */ });
/* harmony import */ var _components_modal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/modal.js */ "./client/layout/widgets/components/modal.js");
/* harmony import */ var _delete_repos_delete_repos_form__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../delete_repos/delete_repos_form */ "./client/layout/widgets/delete_repos/delete_repos_form.js");
/* harmony import */ var _common_tools_client_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/tools/client_string */ "./client/common/tools/client_string.js");
/* harmony import */ var _components_message_box__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/message_box */ "./client/layout/widgets/components/message_box.js");




__webpack_require__(/*! ./edit-repos.scss */ "./client/layout/widgets/edit_repos/edit-repos.scss");
const edit_repos_form = __webpack_require__(/*! ./edit_repos.hbs */ "./client/layout/widgets/edit_repos/edit_repos.hbs");
function edit_repos(e) {
  e.prop_public = e.status === 'public';
  e.prop_hidden = e.status === 'hidden';
  e.prop_private = e.status === 'private';
  (0,_components_modal_js__WEBPACK_IMPORTED_MODULE_0__.open_modal)(edit_repos_form(e, {
    submit: async () => {
      const data = {
        display_name: _common_tools_client_string__WEBPACK_IMPORTED_MODULE_2__.ClientString.FromClient(document.getElementById('display_name').value),
        description: _common_tools_client_string__WEBPACK_IMPORTED_MODULE_2__.ClientString.FromClient(document.getElementById('description').value),
        max_file_size: document.getElementById('max_file_size').value,
        guest_file_lifetime: document.getElementById('guest_file_lifetime').value,
        name: _common_tools_client_string__WEBPACK_IMPORTED_MODULE_2__.ClientString.FromClient(document.getElementById('name').value),
        status: document.getElementById('status').value,
        allow_visitor_upload: document.getElementById('allow_visitor_upload').checked
      };
      await (0,_components_message_box__WEBPACK_IMPORTED_MODULE_3__.parse_fetch_result)(await fetch(`${window.origin}/${new _common_tools_client_string__WEBPACK_IMPORTED_MODULE_2__.ClientString(e.username).encoded()}/${_common_tools_client_string__WEBPACK_IMPORTED_MODULE_2__.ClientString.FromClient(e.name).encoded()}/update`, {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      }));
      window.location.reload();
      (0,_components_modal_js__WEBPACK_IMPORTED_MODULE_0__.close_modal)();
    },
    on_delete_repos: () => (0,_delete_repos_delete_repos_form__WEBPACK_IMPORTED_MODULE_1__.delete_repos)(e)
  }), null, null, 'edit-repos');
}


/***/ }),

/***/ "./client/layout/widgets/repos_settings/repos_settings.js":
/*!****************************************************************!*\
  !*** ./client/layout/widgets/repos_settings/repos_settings.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _common_tools_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/tools/utils */ "./client/common/tools/utils.js");
/* harmony import */ var _common_tools_client_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/tools/client_string */ "./client/common/tools/client_string.js");
/* harmony import */ var _edit_repos_edit_repos_form__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../edit_repos/edit_repos_form */ "./client/layout/widgets/edit_repos/edit_repos_form.js");
/* harmony import */ var _components_message_box__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/message_box */ "./client/layout/widgets/components/message_box.js");
/* harmony import */ var _components_modal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/modal */ "./client/layout/widgets/components/modal.js");
/* harmony import */ var _common_tools_user__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../common/tools/user */ "./client/common/tools/user.js");
/* harmony import */ var _common_tools_filesystem_v2__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../common/tools/filesystem_v2 */ "./client/common/tools/filesystem_v2.js");
/* harmony import */ var _common_tools_filesystem_v2__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_common_tools_filesystem_v2__WEBPACK_IMPORTED_MODULE_6__);







const authorization_hbs = __webpack_require__(/*! ./authorization.hbs */ "./client/layout/widgets/repos_settings/authorization.hbs");
const infos_hbs = __webpack_require__(/*! ./infos.hbs */ "./client/layout/widgets/repos_settings/infos.hbs");
const add_authorization_hbs = __webpack_require__(/*! ./add_authorization.hbs */ "./client/layout/widgets/repos_settings/add_authorization.hbs");
__webpack_require__(/*! ./repos_settings.scss */ "./client/layout/widgets/repos_settings/repos_settings.scss");
class ReposSettings {
  constructor(repos) {
    /**
     * @type {HTMLElement}
     */
    this.root = document.getElementById('repos-settings-root');
    this.repos = repos;
    this.fill_authorizations();
    this.fill_information();
  }
  async fill_information() {
    const trash_content = await (0,_components_message_box__WEBPACK_IMPORTED_MODULE_3__.parse_fetch_result)(await fetch(`${_common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.PAGE_CONTEXT.repos_path()}/trash/`, {
      headers: {
        'content-authtoken': _common_tools_user__WEBPACK_IMPORTED_MODULE_5__.LOCAL_USER.get_token(),
        'accept': 'application/json'
      }
    }));
    const repos_content = await (0,_components_message_box__WEBPACK_IMPORTED_MODULE_3__.parse_fetch_result)(await fetch(`${_common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.PAGE_CONTEXT.repos_path()}/content/`, {
      headers: {
        'content-authtoken': _common_tools_user__WEBPACK_IMPORTED_MODULE_5__.LOCAL_USER.get_token(),
        'accept': 'application/json'
      }
    }));
    let total_count = 0;
    let total_size = 0;
    let total_directories = 0;
    let trash_count = 0;
    let trash_size = 0;
    let trash_directories = 0;
    const extensions = new Map();
    const contributors = new Map();
    for (const item of repos_content) {
      if (item.is_regular_file) {
        total_count += 1;
        total_size += item.size;
        const mime = new _common_tools_client_string__WEBPACK_IMPORTED_MODULE_1__.ClientString(item.mimetype).plain();
        extensions.set(mime, (extensions.get(mime) | 0) + 1);
      } else total_directories += 1;
      contributors.set(item.owner, (contributors.get(item.owner) | 0) + 1);
    }
    for (const item of trash_content) {
      if (item.is_regular_file) {
        total_count += 1;
        trash_count += 1;
        total_size += item.size;
        trash_size += item.size;
        const mime = new _common_tools_client_string__WEBPACK_IMPORTED_MODULE_1__.ClientString(item.mimetype).plain();
        extensions.set(mime, (extensions.get(mime) | 0) + 1);
      } else {
        total_directories += 1;
        trash_directories += 1;
      }
      contributors.set(item.owner, (contributors.get(item.owner) | 0) + 1);
    }
    const ext_array = [];
    for (const [key, value] of extensions) ext_array.push({
      mimetype: key,
      count: value
    });
    const contrib_array = [];
    for (const [key, value] of contributors) contrib_array.push({
      name: key,
      items: value
    });
    const info_div_container = document.getElementById('repos-settings-information');
    const info_div = infos_hbs({
      total_count: total_count,
      total_dirs: total_directories,
      total_size: (0,_common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.humanFileSize)(total_size),
      trash_count: trash_count,
      trash_dirs: trash_directories,
      trash_size: (0,_common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.humanFileSize)(trash_size),
      num_extensions: extensions.size,
      extensions: ext_array.sort((a, b) => b.count - a.count).slice(0, 100),
      num_contributors: contributors.size,
      contributors: contrib_array.sort((a, b) => b.items - a.items).slice(0, 100)
    }, {});
    info_div_container.append(info_div);
  }
  async fill_authorizations() {
    const authorizations = await (0,_components_message_box__WEBPACK_IMPORTED_MODULE_3__.parse_fetch_result)(await fetch(`${_common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.PAGE_CONTEXT.repos_path()}/authorizations/`));
    if (authorizations.message) return;
    const authorizations_div = document.getElementById('repos-settings-authorizations');
    for (const authorization of authorizations) {
      const authorization_div = authorization_hbs({
        username: new _common_tools_client_string__WEBPACK_IMPORTED_MODULE_1__.ClientString(authorization.owner.name).plain(),
        root_item: authorization.root_item ? new _common_tools_client_string__WEBPACK_IMPORTED_MODULE_1__.ClientString(authorization.root_item.name).plain() : null,
        access_type: authorization.access_type,
        is_read_only: authorization.access_type === 'read-only',
        is_contributor: authorization.access_type === 'contributor',
        is_moderator: authorization.access_type === 'moderator'
      }, {
        set_access_type: async e => {
          await (0,_components_message_box__WEBPACK_IMPORTED_MODULE_3__.parse_fetch_result)(await fetch(`${_common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.PAGE_CONTEXT.repos_path()}/update-authorization/`, {
            method: 'POST',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              owner: authorization.owner.id,
              repos: authorization.repos,
              root_item: authorization.root_item ? authorization.root_item.id : null,
              access_type: e.target.value
            })
          }));
        },
        remove: async e => {
          await (0,_components_message_box__WEBPACK_IMPORTED_MODULE_3__.parse_fetch_result)(await fetch(`${_common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.PAGE_CONTEXT.repos_path()}/update-authorization/`, {
            method: 'POST',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              owner: authorization.owner.id,
              repos: authorization.repos,
              root_item: authorization.root_item ? authorization.root_item.id : null,
              remove: true
            })
          }));
          e.target.parentElement.remove();
        }
      });
      authorizations_div.append(authorization_div);
    }
  }
  add_authorization() {
    (0,_components_modal__WEBPACK_IMPORTED_MODULE_4__.open_modal)(add_authorization_hbs({}, {
      add: async e => {
        e.preventDefault();
        if (!document.getElementById('username').validity.valid) {
          await (0,_components_message_box__WEBPACK_IMPORTED_MODULE_3__.print_message)('error', 'Nom d\'utilsiateur invalide', 'veuillez spécifier un utilisateur valide');
          return;
        }
        const res = await (0,_components_message_box__WEBPACK_IMPORTED_MODULE_3__.parse_fetch_result)(await fetch(`${_common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.PAGE_CONTEXT.repos_path()}/add-authorization/`, {
          method: 'POST',
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            owner: _common_tools_client_string__WEBPACK_IMPORTED_MODULE_1__.ClientString.FromClient(document.getElementById('username').value),
            root_item: null,
            access_type: document.getElementById('access_type').value
          })
        }));
        if (!res.message) window.location.reload();
      }
    }), '500px', '300px', 'auth');
  }
  edit_settings() {
    const repos_data = JSON.parse(JSON.stringify(_common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.PAGE_CONTEXT.display_repos));
    repos_data.name = new _common_tools_client_string__WEBPACK_IMPORTED_MODULE_1__.ClientString(repos_data.name).plain();
    repos_data.description = new _common_tools_client_string__WEBPACK_IMPORTED_MODULE_1__.ClientString(repos_data.description).plain();
    repos_data.username = _common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.PAGE_CONTEXT.display_user.name;
    repos_data.display_name = new _common_tools_client_string__WEBPACK_IMPORTED_MODULE_1__.ClientString(repos_data.display_name).plain();
    (0,_edit_repos_edit_repos_form__WEBPACK_IMPORTED_MODULE_2__.edit_repos)(repos_data);
  }
}
let REPOS_SETTINGS = null;
window.repos_settings = {
  load: () => {
    REPOS_SETTINGS = new ReposSettings(_common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.PAGE_CONTEXT.display_repos);
  },
  /**
   * @returns {ReposSettings}
   */
  get() {
    return REPOS_SETTINGS;
  }
};

/***/ }),

/***/ "./client/layout/widgets/toolbar/toolbar.js":
/*!**************************************************!*\
  !*** ./client/layout/widgets/toolbar/toolbar.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const toolbar_menu_hbs = __webpack_require__(/*! ./toolbar_menu.hbs */ "./client/layout/widgets/toolbar/toolbar_menu.hbs");
const {
  print_message,
  parse_fetch_result
} = __webpack_require__(/*! ../components/message_box */ "./client/layout/widgets/components/message_box.js");
const {
  PAGE_CONTEXT,
  humanFileSize,
  permissions
} = __webpack_require__(/*! ../../../common/tools/utils */ "./client/common/tools/utils.js");
const {
  spawn_context_action
} = __webpack_require__(/*! ../components/context_action */ "./client/layout/widgets/components/context_action.js");
const {
  ClientString
} = __webpack_require__(/*! ../../../common/tools/client_string */ "./client/common/tools/client_string.js");
const {
  open_modal,
  close_modal
} = __webpack_require__(/*! ../components/modal */ "./client/layout/widgets/components/modal.js");
const {
  FilesystemObject
} = __webpack_require__(/*! ../../../common/tools/filesystem_v2 */ "./client/common/tools/filesystem_v2.js");
const edit_dir_hbs = __webpack_require__(/*! ../viewport/menus/edit_directory.hbs */ "./client/layout/widgets/viewport/menus/edit_directory.hbs");
__webpack_require__(/*! ./toolbar.scss */ "./client/layout/widgets/toolbar/toolbar.scss");
const {
  LexicographicFilter
} = __webpack_require__(/*! ../viewport/filter/filter_lex */ "./client/layout/widgets/viewport/filter/filter_lex.js");
const {
  TypeFilter
} = __webpack_require__(/*! ../viewport/filter/filter_type */ "./client/layout/widgets/viewport/filter/filter_type.js");
const {
  SizeFilter
} = __webpack_require__(/*! ../viewport/filter/filter_size */ "./client/layout/widgets/viewport/filter/filter_size.js");
const {
  DateFilter
} = __webpack_require__(/*! ../viewport/filter/filter_date */ "./client/layout/widgets/viewport/filter/filter_date.js");
class Toolbar {
  constructor(directory_content) {
    this.directory_content = directory_content;
    this.directory_content.navigator.on_changed_dir(async new_dir => {
      await this.update_path(new_dir);
    });
    const tool_buttons = document.getElementById('viewport_toolbar');
    if (!tool_buttons) return;
    const menu = toolbar_menu_hbs({}, {
      download: () => {
        window.open(`${PAGE_CONTEXT.repos_path()}/file${directory_content.navigator.current_directory ? "/" + directory_content.navigator.current_directory : ''}`, '_blank').focus();
      },
      search: () => {
        this.switch_search_mode(true);
      },
      more: async () => {
        const actions = [];
        if (this.directory_content.navigator.clipboard_items && this.directory_content.navigator.clipboard_items.length !== 0) actions.push({
          title: "Coller ici",
          action: async () => {
            await this.directory_content.navigator.move_clipboard_to_parent(this.directory_content.navigator.get_current_directory());
          },
          image: '/images/icons/icons8-paste-96.png'
        });
        actions.push({
          title: "Trier par ...",
          action: () => {
            this.open_sort_by_menu();
          },
          image: '/images/icons/icons8-sort-100.png'
        });
        actions.push({
          title: "Tous les fichiers",
          checked: this.directory_content.get_filter()._files_recursive,
          action: async () => {
            await this.directory_content.only_files_recursive();
          },
          image: '/images/icons/icons8-file-sort-96.png'
        });
        if (this.directory_content.navigator.current_directory && (await permissions.can_user_edit_item(PAGE_CONTEXT.repos_path(), this.directory_content.navigator.current_directory))) {
          actions.push({
            title: "Modifier le dossier",
            action: async () => {
              const item = this.directory_content.navigator.filesystem.get_object_data(this.directory_content.navigator.current_directory);
              open_modal(edit_dir_hbs({
                item: item
              }, {
                submit: async e => {
                  e.preventDefault();
                  const data = {
                    name: ClientString.FromClient(document.getElementById('name').value),
                    description: ClientString.FromClient(document.getElementById('description').value),
                    open_upload: document.getElementById('open_upload').checked
                  };
                  const updated_item = await parse_fetch_result(await fetch(`${PAGE_CONTEXT.repos_path()}/update/${item.id}`, {
                    method: 'POST',
                    headers: {
                      'Accept': 'application/json',
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                  }));
                  this.directory_content.navigator.filesystem.remove_object(item.id);
                  this.directory_content.navigator.filesystem.add_object(FilesystemObject.FromServerData(updated_item));
                  close_modal();
                }
              }));
            },
            image: '/images/icons/icons8-edit-96.png'
          });
        }
        actions.push({
          title: "Corbeille",
          action: async () => {
            await this.directory_content.owner.go_to_trash();
            this.directory_content = this.directory_content.owner.directory_content;
            await this.update_path();
          },
          image: '/images/icons/icons8-trash-96.png'
        });
        spawn_context_action(actions);
      },
      update_search: e => {
        this.switch_search_mode(true);
        this.directory_content.filter_text(e.target.value);
      }
    });
    tool_buttons.append(menu);
  }
  async update_path(new_dir) {
    const current_path = document.getElementById('current-path');
    const content_text = document.getElementById('toolbar-stats');
    const stats = this.directory_content.navigator.filesystem.get_object_content_stats(new_dir);
    content_text.innerText = `${humanFileSize(stats.size)} / ${stats.count} fichiers`;
    current_path.innerHTML = '';
    if (this.directory_content.owner.is_looking_trash) {
      const trash_img = document.createElement('img');
      trash_img.src = '/images/icons/icons8-trash-52.png';
      const exit_button = document.createElement('button');
      const exit_text = document.createElement('p');
      exit_text.innerText = 'Quitter la corbeille';
      exit_button.append(trash_img);
      exit_button.append(exit_text);
      exit_button.onclick = () => {
        this.directory_content.navigator.set_current_dir(null);
        this.directory_content.owner.exit_trash();
        this.update_path();
      };
      current_path.append(exit_button);
    } else {
      const button = document.createElement('button');
      const home_img = document.createElement('img');
      home_img.src = '/images/icons/icons8-home-96.png';
      button.append(home_img);
      button.onclick = () => {
        this.directory_content.navigator.set_current_dir(null);
      };
      current_path.append(button);
      const path_to_obj = this.directory_content.navigator.filesystem.make_path_to_object(new_dir);
      if (path_to_obj.length !== 0) {
        const separator = document.createElement('p');
        separator.innerText = '>';
        current_path.append(separator);
      }
      for (const dir of this.directory_content.navigator.filesystem.make_path_to_object(new_dir)) {
        const dir_data = this.directory_content.navigator.filesystem.get_object_data(dir);
        if (dir_data.parent_item) {
          // Add separator between directories
          const separator = document.createElement('p');
          separator.innerText = '>';
          current_path.append(separator);
        }
        // Add button for each directory of the current path
        const button = document.createElement('button');
        button.innerText = dir_data.name.toString();
        button.onclick = () => {
          this.directory_content.navigator.set_current_dir(dir);
        };
        current_path.append(button);
      }
    }
  }
  switch_search_mode(enabled) {
    const search_button = document.getElementById('toolbar-search');
    const content_text = document.getElementById('toolbar-stats');
    const search_text = document.getElementById('toolbar-search-text');
    if (enabled) {
      content_text.style.width = '0';
      search_text.style.display = 'flex';
      search_button.style.pointerEvents = 'none';
      search_text.focus();
      if (this.search_handle) clearTimeout(this.search_handle);
      this.search_handle = setTimeout(() => {
        this.switch_search_mode(false);
      }, 5000);
    } else {
      if (search_text.value.length !== 0) {
        content_text.innerText = search_text.value;
        content_text.style.display = 'flex';
      } else {
        const stats = this.directory_content.navigator.filesystem.get_object_content_stats(this.directory_content.navigator.current_directory);
        content_text.innerText = `${humanFileSize(stats.size)} / ${stats.count} fichiers`;
      }
      content_text.style.width = 'unset';
      search_text.style.display = 'none';
      search_button.style.pointerEvents = 'unset';
    }
  }
  open_sort_by_menu() {
    const actions = [];
    actions.push({
      title: "Tri alphabétique A-Z",
      checked: this.directory_content.get_filter() instanceof LexicographicFilter && !this.directory_content.get_filter().reverse,
      action: async () => {
        await this.directory_content.set_filter(new LexicographicFilter(this.directory_content.navigator.filesystem));
      },
      image: '/images/icons/icons8-sort-96.png'
    });
    actions.push({
      title: "Tri alphabétique Z-A",
      checked: this.directory_content.get_filter() instanceof LexicographicFilter && this.directory_content.get_filter().reverse,
      action: async () => {
        await this.directory_content.set_filter(new LexicographicFilter(this.directory_content.navigator.filesystem).reverse_filter());
      },
      image: '/images/icons/icons8-sort-96.png'
    });
    actions.push({
      title: "Type",
      checked: this.directory_content.get_filter() instanceof TypeFilter,
      action: async () => {
        await this.directory_content.set_filter(new TypeFilter(this.directory_content.navigator.filesystem));
      },
      image: '/images/icons/icons8-file-sort-96.png'
    });
    actions.push({
      title: "Taille",
      checked: this.directory_content.get_filter() instanceof SizeFilter,
      action: async () => {
        await this.directory_content.set_filter(new SizeFilter(this.directory_content.navigator.filesystem));
      },
      image: '/images/icons/icons8-weight-96.png'
    });
    actions.push({
      title: "Date croissant",
      checked: this.directory_content.get_filter() instanceof DateFilter && !this.directory_content.get_filter().reverse,
      action: async () => {
        await this.directory_content.set_filter(new DateFilter(this.directory_content.navigator.filesystem));
      },
      image: '/images/icons/icons8-date-96.png'
    });
    actions.push({
      title: "Date décroissant",
      checked: this.directory_content.get_filter() instanceof DateFilter && this.directory_content.get_filter().reverse,
      action: async () => {
        await this.directory_content.set_filter(new DateFilter(this.directory_content.navigator.filesystem).reverse_filter());
      },
      image: '/images/icons/icons8-date-96.png'
    });
    spawn_context_action(actions);
  }
}
module.exports = {
  Toolbar
};

/***/ }),

/***/ "./client/layout/widgets/upload/upload_form.js":
/*!*****************************************************!*\
  !*** ./client/layout/widgets/upload/upload_form.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   add_file_to_upload: () => (/* binding */ add_file_to_upload),
/* harmony export */   open_file_dialog: () => (/* binding */ open_file_dialog),
/* harmony export */   open_or_update_modal: () => (/* binding */ open_or_update_modal)
/* harmony export */ });
/* harmony import */ var _components_modal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/modal.js */ "./client/layout/widgets/components/modal.js");
/* harmony import */ var _common_tools_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/tools/utils.js */ "./client/common/tools/utils.js");
/* harmony import */ var _components_message_box_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/message_box.js */ "./client/layout/widgets/components/message_box.js");
/* harmony import */ var _common_tools_filesystem_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../common/tools/filesystem.js */ "./client/common/tools/filesystem.js");
/* harmony import */ var _common_tools_filesystem_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_common_tools_filesystem_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _common_tools_filesystem_upload_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../common/tools/filesystem_upload.js */ "./client/common/tools/filesystem_upload.js");
/* harmony import */ var _upload_form_hbs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./upload_form.hbs */ "./client/layout/widgets/upload/upload_form.hbs");
/* harmony import */ var _upload_form_hbs__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_upload_form_hbs__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _file_hbs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./file.hbs */ "./client/layout/widgets/upload/file.hbs");
/* harmony import */ var _file_hbs__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_file_hbs__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _directory_hbs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./directory.hbs */ "./client/layout/widgets/upload/directory.hbs");
/* harmony import */ var _directory_hbs__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_directory_hbs__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _components_context_action__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../components/context_action */ "./client/layout/widgets/components/context_action.js");
/* harmony import */ var _common_tools_filesystem_v2__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../common/tools/filesystem_v2 */ "./client/common/tools/filesystem_v2.js");
/* harmony import */ var _common_tools_filesystem_v2__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_common_tools_filesystem_v2__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _viewport_repos_builder__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../viewport/repos_builder */ "./client/layout/widgets/viewport/repos_builder.js");











__webpack_require__(/*! ./upload.scss */ "./client/layout/widgets/upload/upload.scss");
const url = `${_common_tools_utils_js__WEBPACK_IMPORTED_MODULE_1__.PAGE_CONTEXT.repos_path()}/send/`;
let filesystem = _common_tools_utils_js__WEBPACK_IMPORTED_MODULE_1__.PAGE_CONTEXT.display_repos ? new _common_tools_filesystem_js__WEBPACK_IMPORTED_MODULE_3__.Filesystem(_common_tools_utils_js__WEBPACK_IMPORTED_MODULE_1__.PAGE_CONTEXT.display_repos.name) : null;
let stop_process = false;
let add_file_button = null;
let cancel_upload = null;
let upload_button = null;
let global_status_div = null;
let global_status_text = null;
function add_file_to_upload(file, path) {
  if (!(0,_components_modal_js__WEBPACK_IMPORTED_MODULE_0__.is_modal_open)()) open_upload_modal_for_files();
  filesystem.add_file(file, path ? path : '/');
}
let open_upload_modal_timeout = null;
function open_or_update_modal() {
  if (open_upload_modal_timeout) clearTimeout(open_upload_modal_timeout);
  open_upload_modal_timeout = setTimeout(() => {
    open_upload_modal_for_files();
    open_upload_modal_timeout = null;
  }, 100);
}

/**
 * @param viewport_filesystem {Filesystem}
 * @param search_dir {Directory}
 * @param viewport_id {number}
 */
function cleanup_path(viewport_filesystem, search_dir, viewport_id) {
  const server_objects = viewport_filesystem.get_objects_in_directory(viewport_id, null);
  const client_files = new Map();
  for (const object of search_dir.files) client_files.set(object.name, object);
  const client_dirs = new Map();
  for (const object of Object.values(search_dir.directories)) client_dirs.set(object.name, object);
  for (const object of server_objects) {
    const viewport_obj_data = viewport_filesystem.get_object_data(object);
    if (!viewport_obj_data.is_regular_file) continue;
    const client_object = client_files.get(viewport_obj_data.name.plain());
    if (client_object) filesystem.remove_file(client_object);
  }
  for (const object of server_objects) {
    const viewport_obj_data = viewport_filesystem.get_object_data(object);
    if (viewport_obj_data.is_regular_file) continue;
    const local_dir = client_dirs.get(viewport_obj_data.name.plain());
    if (local_dir) cleanup_path(viewport_filesystem, local_dir, object);
  }
}
function cleanup_button() {
  const viewport_filesystem = _viewport_repos_builder__WEBPACK_IMPORTED_MODULE_10__.REPOS_BUILDER.filesystem;
  if (!viewport_filesystem) return;
  cleanup_path(viewport_filesystem, filesystem.root, _viewport_repos_builder__WEBPACK_IMPORTED_MODULE_10__.REPOS_BUILDER.navigator.get_current_directory());
}
let filesystem_upload = null;
function open_upload_modal_for_files() {
  filesystem_upload = _common_tools_utils_js__WEBPACK_IMPORTED_MODULE_1__.PAGE_CONTEXT.display_repos ? new _common_tools_filesystem_upload_js__WEBPACK_IMPORTED_MODULE_4__.FilesystemUpload(filesystem, url) : null;
  if (filesystem_upload) {
    filesystem_upload.callback_finished = () => {
      (0,_components_modal_js__WEBPACK_IMPORTED_MODULE_0__.close_modal)();
      (0,_components_message_box_js__WEBPACK_IMPORTED_MODULE_2__.print_message)('info', 'Tache terminée', 'Mise en ligne des fichiers terminée avec succès.');
    };
    filesystem_upload.callback_file_uploaded = async (_, context) => {
      const file = await _common_tools_filesystem_v2__WEBPACK_IMPORTED_MODULE_9__.FilesystemObject.FetchFromServer(context.file_id);
      _viewport_repos_builder__WEBPACK_IMPORTED_MODULE_10__.REPOS_BUILDER.filesystem.add_object(file);
    };
  }
  filesystem.clear();
  const gen_dir = (dir, parent_div) => {
    const ctx = {};
    const directory = _directory_hbs__WEBPACK_IMPORTED_MODULE_7___default()({
      item: dir
    }, ctx);
    const dir_content = directory.getElementsByClassName('folder-content')[0];
    ctx.enter = () => directory.getElementsByClassName('cancel-button')[0].style.opacity = '1';
    ctx.leave = () => directory.getElementsByClassName('cancel-button')[0].style.opacity = '0';
    ctx.clicked = () => {
      if (!dir_content.expanded) {
        dir_content.expanded = true;
        if (!dir_content.generate_content) {
          dir_content.generate_content = true;
          for (const child_dir of Object.values(dir.directories)) gen_dir(child_dir, dir_content);
          for (const file of dir.files) gen_file(file, dir_content);
        }
        dir_content.style.display = 'flex';
      } else {
        dir_content.expanded = false;
        dir_content.style.display = 'none';
      }
    };
    ctx.removed = () => dir.remove();
    const title = directory.getElementsByTagName('h2')[0];
    dir.callback_stats_updated = (content_size, content_files) => title.innerText = `${dir.name} (${(0,_common_tools_utils_js__WEBPACK_IMPORTED_MODULE_1__.humanFileSize)(content_size)} - ${content_files} fichiers)`;
    dir.callback_stats_updated(dir.content_size, dir.content_files);
    dir.callback_directory_added = new_dir => {
      if (dir_content.generate_content) gen_dir(new_dir, dir_content);
    };
    dir.callback_file_added = new_file => {
      if (dir_content.generate_content) gen_file(new_file, dir_content);
    };
    dir.callback_removed = () => directory.remove();
    parent_div.append(directory);
  };
  const gen_file = (file, parent_div) => {
    const ctx = {
      removed: () => {},
      enter: () => {},
      leave: () => {}
    };
    const file_dom = _file_hbs__WEBPACK_IMPORTED_MODULE_6___default()({
      item: file,
      name: file.name,
      size: (0,_common_tools_utils_js__WEBPACK_IMPORTED_MODULE_1__.humanFileSize)(file.size)
    }, ctx);
    ctx.removed = () => filesystem.remove_file(file);
    ctx.enter = () => file_dom.getElementsByClassName('cancel-button')[0].style.opacity = '1';
    ctx.leave = () => file_dom.getElementsByClassName('cancel-button')[0].style.opacity = '0';
    file.callback_removed = () => file_dom.remove();
    parent_div.append(file_dom);
  };
  const modal_parent = (0,_components_modal_js__WEBPACK_IMPORTED_MODULE_0__.open_modal)(_upload_form_hbs__WEBPACK_IMPORTED_MODULE_5___default()({}, {
    send: start_upload,
    pause: button => {
      if (button.paused) {
        button.paused = false;
        button.firstChild.src = '/images/icons/icons8-pause-30.png';
        filesystem_upload.start();
      } else {
        button.paused = true;
        button.firstChild.src = '/images/icons/icons8-play-64.png';
        filesystem_upload.pause();
      }
    }
  }), '80vw', '90vh', 'upload');
  const title = modal_parent.getElementsByTagName('h1')[0];
  const container = modal_parent.getElementsByClassName('file-list-box')[0];
  const global_progress_bar = modal_parent.getElementsByClassName('progress-bar')[0];
  const global_sub_progress_bar = modal_parent.getElementsByClassName('sub-progress-bar')[0];
  add_file_button = modal_parent.getElementsByClassName('plus-button')[0];
  upload_button = modal_parent.getElementsByClassName('confirm-button')[0];
  cancel_upload = modal_parent.getElementsByClassName('cancel-button')[0];
  global_status_div = modal_parent.getElementsByClassName('global-status')[0];
  global_status_text = global_status_div.getElementsByTagName('p')[0];
  filesystem.root.callback_stats_updated = (content_size, content_files) => title.innerText = content_files === 0 ? 'Envoyer des fichiers' : title.innerText = `${content_files} fichiers (${(0,_common_tools_utils_js__WEBPACK_IMPORTED_MODULE_1__.humanFileSize)(content_size)})`;
  filesystem.root.callback_file_added = new_file => gen_file(new_file, container);
  filesystem.root.callback_directory_added = new_dir => gen_dir(new_dir, container);
  filesystem_upload.callback_update_progress = (file_name, file_size, file_sent, total_files, uploaded_bytes, file_uploaded_bytes, total_size, process_percent, speed, remaining) => {
    global_progress_bar.style.width = `${uploaded_bytes / total_size * 100}%`;
    global_sub_progress_bar.style.width = `${file_uploaded_bytes / total_size * 100}%`;
    global_status_text.innerText = `${Math.round(uploaded_bytes / total_size * 100)}% (${(0,_common_tools_utils_js__WEBPACK_IMPORTED_MODULE_1__.humanFileSize)(uploaded_bytes)} / ${(0,_common_tools_utils_js__WEBPACK_IMPORTED_MODULE_1__.humanFileSize)(total_size)}) - ${(0,_common_tools_utils_js__WEBPACK_IMPORTED_MODULE_1__.humanFileSize)(speed)}/s (~${(0,_common_tools_utils_js__WEBPACK_IMPORTED_MODULE_1__.seconds_to_str)(remaining)})\n${file_name} (${(0,_common_tools_utils_js__WEBPACK_IMPORTED_MODULE_1__.humanFileSize)(file_size)})`;
    if (uploaded_bytes === file_uploaded_bytes && process_percent < 1.0) global_status_text.innerText += `\npost processing : ${Math.round(process_percent * 100)}%`;
  };
  filesystem_upload.on_stop = finished => {
    add_file_button.style.display = "block";
    upload_button.style.display = "block";
    global_status_div.style.display = 'none';
    cancel_upload.value = "Annuler";
    cancel_upload.onclick = _components_modal_js__WEBPACK_IMPORTED_MODULE_0__.close_modal;
    stop_process = true;
    if (finished) {
      (0,_components_modal_js__WEBPACK_IMPORTED_MODULE_0__.close_modal)();
      (0,_components_message_box_js__WEBPACK_IMPORTED_MODULE_2__.print_message)("Info", "Upload finished", "Successfully uploaded content");
    }
  };
  modal_parent.on_close_modal = () => {
    if (filesystem_upload.is_running) {
      filesystem_upload.pause();
      if (confirm('Un transfert est en cours, êtes vous sur de l\'interrompre ?')) {
        filesystem_upload.stop();
        filesystem.clear();
        return true;
      }
      filesystem_upload.start();
      return false;
    }
    return true;
  };
}
async function start_upload() {
  stop_process = false;
  add_file_button.style.display = "none";
  upload_button.style.display = "none";
  global_status_div.style.display = 'flex';
  cancel_upload.onclick = () => {
    filesystem_upload.stop();
  };
  cancel_upload.value = "Arrêter";
  const button = global_status_div.getElementsByTagName('button')[0];
  button.paused = false;
  button.firstChild.src = '/images/icons/icons8-pause-30.png';
  filesystem_upload.start();
}
function open_file_browser(directory) {
  const inputElement = document.createElement("input");
  inputElement.type = "file";
  if (directory) {
    inputElement.webkitdirectory = true;
    inputElement.directory = true;
    inputElement.multiple = true;
  } else {
    inputElement.multiple = true;
  }
  inputElement.addEventListener("change", e => {
    for (const file of e.target['files']) {
      const path = (file.webkitRelativePath ? file.webkitRelativePath : '').split('/');
      path.pop();
      add_file_to_upload(file, path.length > 0 ? path.join('/') : '');
    }
  });
  inputElement.dispatchEvent(new MouseEvent("click"));
}
function open_file_dialog() {
  (0,_components_context_action__WEBPACK_IMPORTED_MODULE_8__.spawn_context_action)([{
    title: "Ajouter des fichiers",
    action: async () => open_file_browser(false),
    image: '/images/icons/icons8-file-96.png'
  }, {
    title: "Ajouter un dossier et son contenu",
    action: async () => open_file_browser(true),
    image: '/images/icons/icons8-folder-96.png'
  }]);
}
window.upload = {
  add_file_to_upload,
  open_file_dialog,
  cleanup_button,
  open_or_update_modal
};


/***/ }),

/***/ "./client/layout/widgets/user_settings/user_settings.js":
/*!**************************************************************!*\
  !*** ./client/layout/widgets/user_settings/user_settings.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _common_tools_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/tools/utils */ "./client/common/tools/utils.js");
/* harmony import */ var _components_message_box__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/message_box */ "./client/layout/widgets/components/message_box.js");
/* harmony import */ var _common_tools_client_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/tools/client_string */ "./client/common/tools/client_string.js");



__webpack_require__(/*! ./user_settings.scss */ "./client/layout/widgets/user_settings/user_settings.scss");
const user_infos_hbs = __webpack_require__(/*! ./user_infos.hbs */ "./client/layout/widgets/user_settings/user_infos.hbs");
class UserSettings {
  constructor(user) {
    /**
     * @type {HTMLElement}
     */
    this.root = document.getElementById('user-settings-root');
    this.user = user;
  }
  clear_page() {
    for (const button of document.getElementsByClassName('setting-button')) button.classList.remove('selected');
    document.getElementById('user-settings-container').innerHTML = '';
  }
  async go_to_user(button) {
    this.clear_page();
    button.classList.add('selected');
    const tokens = await (0,_components_message_box__WEBPACK_IMPORTED_MODULE_1__.parse_fetch_result)(await fetch(`${_common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.PAGE_CONTEXT.user_path()}/user-token-list/`));
    for (const token of tokens) {
      token.device = decodeURIComponent(token.device);
      token.expdate = (0,_common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.human_readable_timestamp)(token.expdate);
    }
    document.getElementById('user-settings-container').append(user_infos_hbs({
      user: (0,_common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.object_to_decoded_string)(this.user),
      tokens: tokens
    }, {
      reset_password: async () => {
        const res = await (0,_components_message_box__WEBPACK_IMPORTED_MODULE_1__.parse_fetch_result)(await fetch(`/api/reset-password/`, {
          method: 'POST',
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            email: _common_tools_client_string__WEBPACK_IMPORTED_MODULE_2__.ClientString.FromClient(this.user.email)
          })
        }));
        if (!res.message) (0,_components_message_box__WEBPACK_IMPORTED_MODULE_1__.print_message)('info', 'Mail de réinitialisation envoyé', 'Vérifiez votre boite mail pour poursuivre la procédure de réinitialisation');
      }
    }));
  }
  async delete_auth_token(button) {
    const res = await (0,_components_message_box__WEBPACK_IMPORTED_MODULE_1__.parse_fetch_result)(await fetch(`/api/delete-authtoken/${button.getAttribute('token')}`, {
      method: 'POST'
    }));
    if (!res.message) button.parentElement.remove();
  }
  async go_to_repos(button) {
    this.clear_page();
    button.classList.add('selected');
  }
}
let USER_SETTINGS = null;
window.user_settings = {
  load: () => {
    USER_SETTINGS = new UserSettings(_common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.PAGE_CONTEXT.connected_user);
  },
  /**
   * @returns {UserSettings}
   */
  get() {
    return USER_SETTINGS;
  }
};

/***/ }),

/***/ "./client/layout/widgets/viewport/directory_content.js":
/*!*************************************************************!*\
  !*** ./client/layout/widgets/viewport/directory_content.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DirectoryContent: () => (/* binding */ DirectoryContent)
/* harmony export */ });
/* harmony import */ var _common_tools_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/tools/utils */ "./client/common/tools/utils.js");
/* harmony import */ var _repos_builder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./repos_builder */ "./client/layout/widgets/viewport/repos_builder.js");
/* harmony import */ var _filter_filter_lex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./filter/filter_lex */ "./client/layout/widgets/viewport/filter/filter_lex.js");
/* harmony import */ var _filter_filter_size__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./filter/filter_size */ "./client/layout/widgets/viewport/filter/filter_size.js");
/* harmony import */ var _filter_filter_date__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./filter/filter_date */ "./client/layout/widgets/viewport/filter/filter_date.js");





const make_directory_hbs = __webpack_require__(/*! ./menus/make_directory.hbs */ "./client/layout/widgets/viewport/menus/make_directory.hbs");
const {
  print_message,
  parse_fetch_result
} = __webpack_require__(/*! ../components/message_box */ "./client/layout/widgets/components/message_box.js");
const {
  PAGE_CONTEXT
} = __webpack_require__(/*! ../../../common/tools/utils */ "./client/common/tools/utils.js");
const {
  ClientString
} = __webpack_require__(/*! ../../../common/tools/client_string */ "./client/common/tools/client_string.js");
const {
  FilesystemObject
} = __webpack_require__(/*! ../../../common/tools/filesystem_v2 */ "./client/common/tools/filesystem_v2.js");
const {
  close_modal,
  open_modal
} = __webpack_require__(/*! ../components/modal */ "./client/layout/widgets/components/modal.js");
const {
  spawn_context_action
} = __webpack_require__(/*! ../components/context_action */ "./client/layout/widgets/components/context_action.js");
const directory_hbs = __webpack_require__(/*! ./directory.hbs */ "./client/layout/widgets/viewport/directory.hbs");
const {
  spawn_item_context_action
} = __webpack_require__(/*! ./item_context_action */ "./client/layout/widgets/viewport/item_context_action.js");
const file_hbs = __webpack_require__(/*! ./file.hbs */ "./client/layout/widgets/viewport/file.hbs");
const {
  Carousel
} = __webpack_require__(/*! ../components/carousel/carousel */ "./client/layout/widgets/components/carousel/carousel.js");
const {
  CarouselList
} = __webpack_require__(/*! ../components/carousel/list/carousel_list */ "./client/layout/widgets/components/carousel/list/carousel_list.js");

/**
 * @type {ReposFilter}
 */
let last_filter = null;

/**
 * @type {boolean}
 */
let show_all_files = false;

/**
 * @type {string}
 */
let string_filter = '';
class DirectoryContent {
  /**
   * @param owner{ReposBuilder}
   */
  constructor(owner) {
    /**
     * @type {Navigator}
     */
    this.navigator = owner.navigator;

    /**
     * @type {ReposBuilder}
     */
    this.owner = owner;

    /**
     * @type {{id:number, data:FilesystemObject}[]}
     */
    this.objects = [];

    /**
     * @type {HTMLElement}
     */
    this.viewport_container = document.getElementById('file-list');

    /**
     * @type {Map<number, HTMLElement>}
     */
    this.entry_widgets = new Map();

    /**
     * @type {Carousel}
     */
    this.item_carousel = null;
    if (!last_filter) last_filter = new _filter_filter_lex__WEBPACK_IMPORTED_MODULE_2__.LexicographicFilter(this.owner.filesystem);
    this._update_directory_listener();
    this.navigator.bind_on_select_item((item, should_select) => {
      const widget = this.entry_widgets.get(item);
      if (widget) {
        if (should_select) {
          widget.classList.add("selected");
          widget.scrollIntoView({
            behavior: "smooth",
            block: "nearest" + "",
            inline: "nearest"
          });
        } else {
          widget.classList.remove("selected");
        }
      }
    });
    this.regen_content();
    const file_background = document.getElementById('file-list-box');
    if (file_background) file_background.oncontextmenu = event => {
      if (event.target !== file_background && event.target !== document.getElementById('file-list')) {
        event.preventDefault();
        return;
      }
      const actions = [];
      actions.push({
        title: "Nouveau Dossier",
        action: async () => {
          const make_directory = make_directory_hbs({}, {
            mkdir: async e => {
              e.preventDefault();
              const re = /[<>:"\/\\|?*\x00-\x1F]|^(?:aux|con|clock\$|nul|prn|com[1-9]|lpt[1-9])$/i;
              if (re.test(document.getElementById('name').value)) {
                print_message(Error, "Invalid directory name", document.getElementById('name').value);
                return;
              }
              const new_dir = await parse_fetch_result(await fetch(`${PAGE_CONTEXT.repos_path()}/make-directory${this.navigator.get_current_directory() ? '/' + this.navigator.get_current_directory() : ''}`, {
                method: 'POST',
                headers: {
                  'Accept': 'application/json',
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  name: ClientString.FromClient(document.getElementById('name').value),
                  open_upload: false
                })
              }));
              if (new_dir && new_dir.id) {
                _repos_builder__WEBPACK_IMPORTED_MODULE_1__.REPOS_BUILDER.filesystem.add_object(FilesystemObject.FromServerData(new_dir));
              }
              close_modal();
            }
          });
          open_modal(make_directory, '500px', '250px', 'make-directory');
        },
        image: '/images/icons/icons8-add-folder-48.png'
      });
      if (this.navigator.clipboard_items && this.navigator.clipboard_items.length !== 0) actions.push({
        title: "Coller ici",
        action: async () => {
          await this.navigator.move_clipboard_to_parent(this.navigator.get_current_directory());
        },
        image: '/images/icons/icons8-paste-96.png'
      });
      spawn_context_action(actions);
      event.preventDefault();
    };
  }
  _update_directory_listener() {
    if (this.current_directory_listener) this.current_directory_listener.destroy();
    delete this.current_directory_listener;

    /**
     * @type {ObjectListener}
     */
    this.current_directory_listener = this.owner.filesystem.create_listener(this.navigator.get_current_directory());
    if (this.current_directory_listener) {
      this.current_directory_listener.on_add_object = object_id => {
        const object = this.owner.filesystem.get_object_data(object_id);
        if (object.is_regular_file) this._on_file_added(object);else this._on_directory_added(object);
      };
      this.current_directory_listener.on_remove_object = object_id => {
        this._on_item_removed(object_id);
      };
      this.current_directory_listener.on_update_object = object_id => {
        this._on_item_removed(object_id);
        const new_data = this.owner.filesystem.get_object_data(object_id);
        if (new_data) {
          if (new_data.is_regular_file) this._on_file_added(new_data);else this._on_directory_added(new_data);
        }
      };
    }
  }

  /**
   * @param new_filter {ReposFilter}
   */
  set_filter(new_filter) {
    last_filter = new_filter;
    last_filter.set_name_filter(string_filter);
    last_filter.only_files_recursive(show_all_files);
    this.regen_content();
  }

  /**
   * @param text {string}
   */
  filter_text(text) {
    last_filter.set_name_filter(text);
    string_filter = text;
    this.regen_content();
  }
  get_filter() {
    return last_filter;
  }
  only_files_recursive() {
    last_filter.only_files_recursive(!last_filter._files_recursive);
    show_all_files = last_filter._files_recursive;
    this.regen_content();
  }
  destroy() {
    this.current_directory_listener.destroy();
  }
  directories_data() {
    const data = [];
    for (const object of this.objects) if (!object.data.is_regular_file) data.push(object.data);
    return data;
  }
  files_data() {
    const data = [];
    for (const object of this.objects) if (object.data.is_regular_file) data.push(object.data);
    return data;
  }
  regen_content() {
    this.objects = [];
    if (!this.viewport_container) return;
    this.viewport_container.innerHTML = '';
    const filtered_elements = last_filter.get_directory_content(this.navigator.get_current_directory());
    //@TODO : display more than 1000 items
    for (const object of filtered_elements.slice(0, 1000)) this.objects.push({
      id: object.id,
      data: object
    });
    if (this.viewport_container) this.viewport_container.innerHTML = null;
    for (const object of this.directories_data()) this._on_directory_added(object);
    for (const object of this.files_data()) this._on_file_added(object);
    this._update_directory_listener();
  }

  /**
   * @param item {FilesystemObject}
   * @param element {HTMLElement}
   * @private
   */
  _add_element_decorations(item, element) {
    if (item.owner !== PAGE_CONTEXT.display_repos.owner) {
      const user_icon = document.createElement('img');
      user_icon.classList.add('user-icon');
      user_icon.src = '/images/icons/icons8-user-60.png';
      element.append(user_icon);
    }
    if (!item.is_regular_file) {
      if (item.open_upload) {
        const open_upload_icon = document.createElement('img');
        open_upload_icon.classList.add('open-upload-icon');
        open_upload_icon.src = '/images/icons/icons8-check-60.png';
        element.getElementsByTagName('img')[0].src = '/images/icons/icons8-opened-folder-96.png';
      }
    }
  }

  /**
   * @param directory {FilesystemObject}
   * @private
   */
  _on_directory_added(directory) {
    const dir_div = directory_hbs({
      item: directory
    }, {
      dblclicked: event => {
        if ((0,_common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.is_touch_device)()) return;
        if (!event.target.classList.contains('open-context-button') && !_repos_builder__WEBPACK_IMPORTED_MODULE_1__.REPOS_BUILDER.is_looking_trash) this.navigator.set_current_dir(directory.id);
      },
      clicked: event => {
        if ((0,_common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.is_touch_device)()) {
          if (!this.navigator.is_touch_selection_mode && !_repos_builder__WEBPACK_IMPORTED_MODULE_1__.REPOS_BUILDER.is_looking_trash) this.navigator.set_current_dir(directory.id);else this.navigator.select_item(directory.id, event.shiftKey, event.ctrlKey);
        } else this.navigator.select_item(directory.id, event.shiftKey, event.ctrlKey);
      },
      enter: () => this.navigator.set_hover_item(directory.id),
      leave: () => {
        if (this.navigator.get_hover_item() === directory.id) this.navigator.set_hover_item(null);
      },
      context_menu: event => {
        if ((0,_common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.is_touch_device)()) {
          if (this.navigator.is_touch_selection_mode) {
            spawn_item_context_action(directory);
            this.navigator.select_item(directory.id, event.shiftKey, event.ctrlKey, true);
          } else {
            this.navigator.enter_touch_selection_mode();
            this.navigator.select_item(directory.id, event.shiftKey, event.ctrlKey);
          }
        } else {
          this.navigator.select_item(directory.id, event.shiftKey, event.ctrlKey, true);
          spawn_item_context_action(directory);
        }
        event.preventDefault();
      }
    });
    this.entry_widgets.set(directory.id, dir_div);
    this._add_element_decorations(directory, dir_div);
    dir_div.object = directory;
    if (this.viewport_container) this.viewport_container.append(dir_div);
  }

  /**
   * @param file {FilesystemObject}
   * @private
   */
  _on_file_added(file) {
    let display_size = null;
    if (last_filter instanceof _filter_filter_size__WEBPACK_IMPORTED_MODULE_3__.SizeFilter) display_size = (0,_common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.humanFileSize)(file.size);
    let display_date = null;
    if (last_filter instanceof _filter_filter_date__WEBPACK_IMPORTED_MODULE_4__.DateFilter) display_date = (0,_common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.human_readable_timestamp)(file.timestamp / 1000);
    const file_div = file_hbs({
      item: file,
      display_size: display_size,
      display_date: display_date
    }, {
      dblclicked: event => {
        if ((0,_common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.is_touch_device)()) return;
        if (event.target.classList.contains('open-context-button')) return;
        this.navigator.select_item(file.id, event.shiftKey, event.ctrlKey, true);
        this.open_item_carousel();
      },
      clicked: event => {
        if ((0,_common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.is_touch_device)()) {
          if (!this.navigator.is_touch_selection_mode) {
            this.navigator.select_item(file.id, event.shiftKey, event.ctrlKey, true);
            this.open_item_carousel();
          } else this.navigator.select_item(file.id, event.shiftKey, event.ctrlKey);
        } else {
          this.navigator.select_item(file.id, event.shiftKey, event.ctrlKey);
        }
      },
      enter: () => this.navigator.set_hover_item(file.id),
      leave: () => {
        if (this.navigator.get_hover_item() === file.id) this.navigator.set_hover_item(null);
      },
      context_menu: event => {
        if ((0,_common_tools_utils__WEBPACK_IMPORTED_MODULE_0__.is_touch_device)()) {
          if (this.navigator.is_touch_selection_mode) {
            spawn_item_context_action(file);
            this.navigator.select_item(file.id, event.shiftKey, event.ctrlKey, true);
          } else {
            this.navigator.enter_touch_selection_mode();
            this.navigator.select_item(file.id, event.shiftKey, event.ctrlKey);
          }
        } else {
          this.navigator.select_item(file.id, event.shiftKey, event.ctrlKey, true);
          spawn_item_context_action(file);
        }
        event.preventDefault();
      }
    });
    this.entry_widgets.set(file.id, file_div);
    this._add_element_decorations(file, file_div);
    file_div.object = file;
    this.viewport_container.append(file_div);
  }

  /**
   * @param item {number}
   * @private
   */
  _on_item_removed(item) {
    let widget = this.entry_widgets.get(item);
    if (widget) widget.remove();
    this.entry_widgets.delete(item);
    for (let i = 0; i < this.objects.length; ++i) if (this.objects[i].id === item) return this.objects.splice(i, 1);
  }

  /**
   * @param object {number|null}
   * @return {number|null}
   */
  get_item_index(object) {
    if (!object && this.objects.length !== 0) return null;
    if (this.objects.length === 0) return null;
    for (let i = 0; i < this.objects.length; ++i) if (this.objects[i].id === object) return i;
    return null;
  }

  /**
   * @param index {number|null}
   * @return {number|null}
   */
  get_item_at_index(index) {
    if (index >= this.objects.length || index < 0) return null;
    return this.objects[index].id;
  }

  /**
   * @param object {number}
   * @param only_files {boolean}
   * @return {number|null}
   */
  get_item_after(object) {
    let only_files = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    const file_index = this.get_item_index(object);
    if (file_index === null) return this.objects.length !== 0 ? this.objects[0].id : null;
    for (let i = 0; i < this.objects.length; ++i) {
      const id = (i + file_index + 1) % this.objects.length;
      if (!only_files || this.objects[id].data.is_regular_file) return this.objects[id].id;
    }
    return null;
  }

  /**
   * @param object {number}
   * @param only_files {boolean}
   * @return {number|null}
   */
  get_item_before(object) {
    let only_files = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    const file_index = this.get_item_index(object);
    if (file_index === null) return this.objects.length !== 0 ? this.objects[this.objects.length - 1].id : null;
    for (let i = this.objects.length - 1; i >= 0; --i) {
      const id = (i + file_index) % this.objects.length;
      if (!only_files || this.objects[id].data.is_regular_file) return this.objects[id].id;
    }
    return null;
  }
  open_item_carousel() {
    if (this.item_carousel) {
      this.item_carousel.close();
      this.item_carousel = null;
    }
    const container = Carousel.get_fullscreen_container();
    container.root.style.display = 'flex';
    const item_list = new CarouselList(this);
    item_list.build_visual(container.list_container);
    this.item_carousel = new Carousel(item_list, container.background_container, this.navigator.filesystem.get_object_data(this.navigator.last_selected_item));
    this.item_carousel.on_close = () => {
      container.root.style.display = 'none';
    };
  }
  close_carousel() {
    if (this.item_carousel) this.item_carousel.close();
    delete this.item_carousel;
    this.item_carousel = null;
  }
}


/***/ }),

/***/ "./client/layout/widgets/viewport/file_list_customization.js":
/*!*******************************************************************!*\
  !*** ./client/layout/widgets/viewport/file_list_customization.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _common_tools_user__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/tools/user */ "./client/common/tools/user.js");
/* harmony import */ var _common_tools_client_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/tools/client_string */ "./client/common/tools/client_string.js");
/* harmony import */ var _common_tools_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/tools/utils */ "./client/common/tools/utils.js");
/* harmony import */ var _components_context_action__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/context_action */ "./client/layout/widgets/components/context_action.js");
/* harmony import */ var _edit_repos_edit_repos_form__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../edit_repos/edit_repos_form */ "./client/layout/widgets/edit_repos/edit_repos_form.js");
/* harmony import */ var _components_message_box__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../components/message_box */ "./client/layout/widgets/components/message_box.js");
/* harmony import */ var _repos_builder__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./repos_builder */ "./client/layout/widgets/viewport/repos_builder.js");







async function update_last_repos() {
  const repos_list = document.getElementById('last-repos-list');
  if (!repos_list) return;
  repos_list.innerHTML = '';
  const elements = await _common_tools_user__WEBPACK_IMPORTED_MODULE_0__.LOCAL_USER.get_last_repos();
  for (const repos of elements.reverse()) {
    const button = document.createElement('button');
    button.onclick = () => {
      window.location.href = `${window.origin}/${new _common_tools_client_string__WEBPACK_IMPORTED_MODULE_1__.ClientString(repos.username).encoded()}/${new _common_tools_client_string__WEBPACK_IMPORTED_MODULE_1__.ClientString(repos.name).encoded()}`;
    };
    button.classList.add('repos-list-item');
    if (_common_tools_utils__WEBPACK_IMPORTED_MODULE_2__.PAGE_CONTEXT && _common_tools_utils__WEBPACK_IMPORTED_MODULE_2__.PAGE_CONTEXT.display_repos && _common_tools_utils__WEBPACK_IMPORTED_MODULE_2__.PAGE_CONTEXT.display_repos.id === repos.id) button.classList.add('selected-repos');
    const button_img = document.createElement('img');
    if (repos.status === 'public') button_img.src = '/images/icons/icons8-public-96.png';
    if (repos.status === 'hidden') button_img.src = '/images/icons/icons8-invisible-96.png';
    if (repos.status === 'private') button_img.src = '/images/icons/icons8-locked-96.png';
    const button_text = document.createElement('p');
    button_text.innerText = new _common_tools_client_string__WEBPACK_IMPORTED_MODULE_1__.ClientString(repos.name).plain();
    button.append(button_text);
    button.append(button_img);
    button.oncontextmenu = event => {
      open_repos_context_menu(repos.id);
      event.preventDefault();
    };
    button.repos_id = repos.id;
    repos_list.append(button);
  }
}
update_last_repos();
for (const button of document.getElementsByClassName('repos-list-item')) {
  button.oncontextmenu = event => {
    open_repos_context_menu(button.getAttribute('repos_id'));
    event.preventDefault();
  };
}
async function open_repos_context_menu(repos_id) {
  const actions = [];
  if (!_repos_builder__WEBPACK_IMPORTED_MODULE_6__.REPOS_BUILDER) return;
  const repos_data = await (0,_components_message_box__WEBPACK_IMPORTED_MODULE_5__.parse_fetch_result)(await fetch('/api/repos-data', {
    method: 'POST',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    },
    body: JSON.stringify([repos_id])
  }));
  if (repos_data.length > 0 && (await _common_tools_utils__WEBPACK_IMPORTED_MODULE_2__.permissions.can_user_edit_repos(`${window.origin}/${new _common_tools_client_string__WEBPACK_IMPORTED_MODULE_1__.ClientString(repos_data[0].username).for_url()}/${new _common_tools_client_string__WEBPACK_IMPORTED_MODULE_1__.ClientString(repos_data[0].name).for_url()}`))) {
    actions.push({
      title: "Informations & réglages",
      action: async () => {
        if (repos_data.length === 1) {
          window.location.href = `${window.origin}/${new _common_tools_client_string__WEBPACK_IMPORTED_MODULE_1__.ClientString(repos_data[0].username).encoded()}/${new _common_tools_client_string__WEBPACK_IMPORTED_MODULE_1__.ClientString(repos_data[0].name).encoded()}/settings/`;
        }
      },
      image: '/images/icons/icons8-edit-96.png'
    });
  }
  if (Number(repos_id) === Number(_common_tools_utils__WEBPACK_IMPORTED_MODULE_2__.PAGE_CONTEXT.display_repos.id)) {
    actions.push({
      title: "Corbeille",
      action: async () => {
        await _repos_builder__WEBPACK_IMPORTED_MODULE_6__.REPOS_BUILDER.go_to_trash(true);
        await _repos_builder__WEBPACK_IMPORTED_MODULE_6__.REPOS_BUILDER.path_builder.update_path();
      },
      image: '/images/icons/icons8-trash-96.png'
    });
  }
  (0,_components_context_action__WEBPACK_IMPORTED_MODULE_3__.spawn_context_action)(actions);
}
window.file_list = {
  open_repos_context_menu
};

/***/ }),

/***/ "./client/layout/widgets/viewport/filter/base_filter.js":
/*!**************************************************************!*\
  !*** ./client/layout/widgets/viewport/filter/base_filter.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ReposFilter: () => (/* binding */ ReposFilter)
/* harmony export */ });
class ReposFilter {
  /**
   * @param filesystem {Filesystem}
   */
  constructor(filesystem) {
    console.assert(filesystem, "invalid filesystem");
    this.filesystem = filesystem;
    this.name_filter = '';
  }

  /**
   * @param filter {string}
   */
  set_name_filter(filter) {
    this.name_filter = filter;
  }
  only_files_recursive() {
    let enable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    this._files_recursive = enable;
    return this;
  }

  /**
   * @param parent_directory {number}
   * @returns {FilesystemObject[]}
   */
  get_directory_content(parent_directory) {
    const content = [];
    if (this._files_recursive) {
      for (const elem of this.filesystem.get_objects_in_directory(parent_directory)) {
        const data = this.filesystem.get_object_data(elem);
        if (!data.is_regular_file) content.push(data);
      }
      for (const elem of this.filesystem.get_objects_in_directory_recursive(parent_directory)) {
        const data = this.filesystem.get_object_data(elem);
        if (data.is_regular_file) content.push(data);
      }
    } else for (const elem of this.filesystem.get_objects_in_directory(parent_directory)) content.push(this.filesystem.get_object_data(elem));

    // Name filter
    if (this.name_filter.length !== 0) {
      const filter_text = this.name_filter.toLowerCase();
      const filtered_content = [];
      for (const elem of content) if (elem.name.plain().toLowerCase().includes(filter_text)) filtered_content.push(elem);
      return filtered_content;
    }
    return content;
  }

  /**
   * @param entries {FilesystemObject[]}
   * @param reverse {boolean}
   * @returns {{directories: FilesystemObject[], files: FilesystemObject[]}}
   */
  lex_sort_entries(entries) {
    let reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    const directories = [];
    const files = [];
    for (const entry of entries) {
      if (entry.is_regular_file) files.push(entry);else directories.push(entry);
    }
    if (reverse) return {
      directories: directories.sort((a, b) => b.name.plain().localeCompare(a.name.plain())),
      files: files.sort((a, b) => b.name.plain().localeCompare(a.name.plain()))
    };else return {
      directories: directories.sort((a, b) => a.name.plain().localeCompare(b.name.plain())),
      files: files.sort((a, b) => a.name.plain().localeCompare(b.name.plain()))
    };
  }
}


/***/ }),

/***/ "./client/layout/widgets/viewport/filter/filter_date.js":
/*!**************************************************************!*\
  !*** ./client/layout/widgets/viewport/filter/filter_date.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DateFilter: () => (/* binding */ DateFilter)
/* harmony export */ });
/* harmony import */ var _base_filter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base_filter */ "./client/layout/widgets/viewport/filter/base_filter.js");

class DateFilter extends _base_filter__WEBPACK_IMPORTED_MODULE_0__.ReposFilter {
  reverse_filter() {
    this.reverse = true;
    return this;
  }
  get_directory_content(parent_directory) {
    const entries = this.lex_sort_entries(super.get_directory_content(parent_directory), this.reverse);
    if (this.reverse) return entries.directories.concat(entries.files.sort((a, b) => b.timestamp > a.timestamp || b.name.plain().localeCompare(a.name.plain())));else return entries.directories.concat(entries.files.sort((a, b) => a.timestamp > b.timestamp || a.name.plain().localeCompare(b.name.plain())));
  }
}


/***/ }),

/***/ "./client/layout/widgets/viewport/filter/filter_lex.js":
/*!*************************************************************!*\
  !*** ./client/layout/widgets/viewport/filter/filter_lex.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LexicographicFilter: () => (/* binding */ LexicographicFilter)
/* harmony export */ });
/* harmony import */ var _base_filter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base_filter */ "./client/layout/widgets/viewport/filter/base_filter.js");

class LexicographicFilter extends _base_filter__WEBPACK_IMPORTED_MODULE_0__.ReposFilter {
  reverse_filter() {
    this.reverse = true;
    return this;
  }
  get_directory_content(parent_directory) {
    const entries = this.lex_sort_entries(super.get_directory_content(parent_directory), this.reverse);
    return entries.directories.concat(entries.files);
  }
}


/***/ }),

/***/ "./client/layout/widgets/viewport/filter/filter_size.js":
/*!**************************************************************!*\
  !*** ./client/layout/widgets/viewport/filter/filter_size.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SizeFilter: () => (/* binding */ SizeFilter)
/* harmony export */ });
/* harmony import */ var _base_filter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base_filter */ "./client/layout/widgets/viewport/filter/base_filter.js");

class SizeFilter extends _base_filter__WEBPACK_IMPORTED_MODULE_0__.ReposFilter {
  get_directory_content(parent_directory) {
    const entries = this.lex_sort_entries(super.get_directory_content(parent_directory), this.reverse);
    return entries.directories.concat(entries.files.sort((a, b) => a.size < b.size || a.name.plain().localeCompare(b.name.plain())));
  }
}


/***/ }),

/***/ "./client/layout/widgets/viewport/filter/filter_type.js":
/*!**************************************************************!*\
  !*** ./client/layout/widgets/viewport/filter/filter_type.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TypeFilter: () => (/* binding */ TypeFilter)
/* harmony export */ });
/* harmony import */ var _base_filter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base_filter */ "./client/layout/widgets/viewport/filter/base_filter.js");

class TypeFilter extends _base_filter__WEBPACK_IMPORTED_MODULE_0__.ReposFilter {
  get_directory_content(parent_directory) {
    const entries = this.lex_sort_entries(super.get_directory_content(parent_directory), this.reverse);
    return entries.directories.concat(entries.files.sort((a, b) => a.mimetype.plain().localeCompare(b.mimetype.plain()) || a.name.plain().localeCompare(b.name.plain())));
  }
}


/***/ }),

/***/ "./client/layout/widgets/viewport/item_context_action.js":
/*!***************************************************************!*\
  !*** ./client/layout/widgets/viewport/item_context_action.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   spawn_item_context_action: () => (/* binding */ spawn_item_context_action)
/* harmony export */ });
/* harmony import */ var _components_context_action_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/context_action.js */ "./client/layout/widgets/components/context_action.js");
/* harmony import */ var _components_modal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/modal.js */ "./client/layout/widgets/components/modal.js");
/* harmony import */ var _components_message_box_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/message_box.js */ "./client/layout/widgets/components/message_box.js");
/* harmony import */ var _repos_builder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./repos_builder */ "./client/layout/widgets/viewport/repos_builder.js");
/* harmony import */ var _common_tools_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../common/tools/utils */ "./client/common/tools/utils.js");
/* harmony import */ var _common_tools_client_string__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../common/tools/client_string */ "./client/common/tools/client_string.js");
/* harmony import */ var _common_tools_filesystem_v2__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../common/tools/filesystem_v2 */ "./client/common/tools/filesystem_v2.js");
/* harmony import */ var _common_tools_filesystem_v2__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_common_tools_filesystem_v2__WEBPACK_IMPORTED_MODULE_6__);







const edit_dir_hbs = __webpack_require__(/*! ./menus/edit_directory.hbs */ "./client/layout/widgets/viewport/menus/edit_directory.hbs");
const edit_file_hbs = __webpack_require__(/*! ./menus/edit_file.hbs */ "./client/layout/widgets/viewport/menus/edit_file.hbs");
async function spawn_item_context_action(item) {
  if (!_common_tools_utils__WEBPACK_IMPORTED_MODULE_4__.PAGE_CONTEXT.display_repos) return;
  const actions = [];
  actions.push({
    title: "Partager",
    action: async () => {
      let url = `${location.origin}${_common_tools_utils__WEBPACK_IMPORTED_MODULE_4__.PAGE_CONTEXT.repos_path()}/file/${item.id}`;
      await navigator.clipboard.writeText(url);
      (0,_components_message_box_js__WEBPACK_IMPORTED_MODULE_2__.print_message)('info', 'Lien copié dans le presse - papier', url);
    },
    image: '/images/icons/icons8-url-96.png'
  });
  actions.push({
    title: "Télécharger",
    action: () => {
      window.open(`${_common_tools_utils__WEBPACK_IMPORTED_MODULE_4__.PAGE_CONTEXT.repos_path()}/file/${item.id}`, '_blank').focus();
    },
    image: '/images/icons/icons8-download-96.png'
  });
  if (await _common_tools_utils__WEBPACK_IMPORTED_MODULE_4__.permissions.can_user_edit_item(_common_tools_utils__WEBPACK_IMPORTED_MODULE_4__.PAGE_CONTEXT.repos_path(), item.id)) {
    if (_repos_builder__WEBPACK_IMPORTED_MODULE_3__.REPOS_BUILDER.navigator.selected_items.size <= 1) actions.push({
      title: "Modifier",
      action: () => {
        if (item.is_regular_file) {
          const ext_split = item.name.plain().split('.');
          const name = ext_split.length <= 1 ? item.name : ext_split[0];
          const extension = ext_split.length <= 1 ? '' : ext_split[ext_split.length - 1];
          (0,_components_modal_js__WEBPACK_IMPORTED_MODULE_1__.open_modal)(edit_file_hbs({
            item: {
              name: name,
              extension: extension,
              description: item.description
            }
          }, {
            submit: async e => {
              e.preventDefault();
              const final_name = document.getElementById('name').value;
              const final_extension = document.getElementById('extension').value;
              const data = {
                name: _common_tools_client_string__WEBPACK_IMPORTED_MODULE_5__.ClientString.FromClient(final_name + (final_extension.length !== 0 ? `.${final_extension}` : '')),
                description: _common_tools_client_string__WEBPACK_IMPORTED_MODULE_5__.ClientString.FromClient(document.getElementById('description').value)
              };
              const updated_item = await (0,_components_message_box_js__WEBPACK_IMPORTED_MODULE_2__.parse_fetch_result)(await fetch(`${_common_tools_utils__WEBPACK_IMPORTED_MODULE_4__.PAGE_CONTEXT.repos_path()}/update/${item.id}`, {
                method: 'POST',
                headers: {
                  'Accept': 'application/json',
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
              }));
              _repos_builder__WEBPACK_IMPORTED_MODULE_3__.REPOS_BUILDER.filesystem.remove_object(item.id);
              _repos_builder__WEBPACK_IMPORTED_MODULE_3__.REPOS_BUILDER.filesystem.add_object(_common_tools_filesystem_v2__WEBPACK_IMPORTED_MODULE_6__.FilesystemObject.FromServerData(updated_item));
              (0,_components_modal_js__WEBPACK_IMPORTED_MODULE_1__.close_modal)();
            }
          }));
        } else (0,_components_modal_js__WEBPACK_IMPORTED_MODULE_1__.open_modal)(edit_dir_hbs({
          item: item
        }, {
          submit: async e => {
            e.preventDefault();
            const data = {
              name: _common_tools_client_string__WEBPACK_IMPORTED_MODULE_5__.ClientString.FromClient(document.getElementById('name').value),
              description: _common_tools_client_string__WEBPACK_IMPORTED_MODULE_5__.ClientString.FromClient(document.getElementById('description').value),
              open_upload: document.getElementById('open_upload').checked
            };
            const updated_item = await (0,_components_message_box_js__WEBPACK_IMPORTED_MODULE_2__.parse_fetch_result)(await fetch(`${_common_tools_utils__WEBPACK_IMPORTED_MODULE_4__.PAGE_CONTEXT.repos_path()}/update/${item.id}`, {
              method: 'POST',
              headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(data)
            }));
            _repos_builder__WEBPACK_IMPORTED_MODULE_3__.REPOS_BUILDER.filesystem.remove_object(item.id);
            _repos_builder__WEBPACK_IMPORTED_MODULE_3__.REPOS_BUILDER.filesystem.add_object(_common_tools_filesystem_v2__WEBPACK_IMPORTED_MODULE_6__.FilesystemObject.FromServerData(updated_item));
            (0,_components_modal_js__WEBPACK_IMPORTED_MODULE_1__.close_modal)();
          }
        }));
      },
      image: '/images/icons/icons8-edit-96.png'
    });
    actions.push({
      title: "Couper",
      action: () => {
        _repos_builder__WEBPACK_IMPORTED_MODULE_3__.REPOS_BUILDER.cut_selection();
      },
      image: '/images/icons/icons8-cut-48.png'
    });
    if (_repos_builder__WEBPACK_IMPORTED_MODULE_3__.REPOS_BUILDER.is_looking_trash) {
      actions.push({
        title: "Restaurer",
        action: async () => {
          const result = await fetch(`${_common_tools_utils__WEBPACK_IMPORTED_MODULE_4__.PAGE_CONTEXT.repos_path()}/restore-from-trash/`, {
            method: 'POST',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(Array.from(_repos_builder__WEBPACK_IMPORTED_MODULE_3__.REPOS_BUILDER.navigator.selected_items))
          });
          if (result.status === 200) {
            for (const elem of await result.json()) _repos_builder__WEBPACK_IMPORTED_MODULE_3__.REPOS_BUILDER.filesystem.remove_object(elem);
            _repos_builder__WEBPACK_IMPORTED_MODULE_3__.REPOS_BUILDER.directory_content.regen_content();
            (0,_components_message_box_js__WEBPACK_IMPORTED_MODULE_2__.print_message)('info', `File restored`, `Successfully restored ${item.name}`);
            (0,_components_modal_js__WEBPACK_IMPORTED_MODULE_1__.close_modal)();
          } else if (result.status === 403) {
            window.location = `/auth/signin/`;
          } else {
            (0,_components_message_box_js__WEBPACK_IMPORTED_MODULE_2__.print_message)('error', `Failed to restore ${item.name}`, result.status);
            (0,_components_modal_js__WEBPACK_IMPORTED_MODULE_1__.close_modal)();
          }
        },
        image: '/images/icons/icons8-restore-96.png'
      });
      actions.push({
        title: "Supprimer définitivement",
        action: () => {
          const div = document.createElement('div');
          const p = document.createElement('p');
          p.innerText = `Êtes vous sur de supprimer définitivement ${item.name} ?`;
          div.append(p);
          const no_button = document.createElement('button');
          no_button.classList.add('cancel-button');
          no_button.innerText = 'Non';
          no_button.onclick = () => {
            (0,_components_modal_js__WEBPACK_IMPORTED_MODULE_1__.close_modal)();
          };
          div.append(no_button);
          const confirm_button = document.createElement('button');
          confirm_button.innerText = 'Oui';
          confirm_button.onclick = async () => {
            const result = await fetch(`${_common_tools_utils__WEBPACK_IMPORTED_MODULE_4__.PAGE_CONTEXT.repos_path()}/remove/`, {
              method: 'POST',
              headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(Array.from(_repos_builder__WEBPACK_IMPORTED_MODULE_3__.REPOS_BUILDER.navigator.selected_items))
            });
            if (result.status === 200) {
              for (const elem of await result.json()) _repos_builder__WEBPACK_IMPORTED_MODULE_3__.REPOS_BUILDER.filesystem.remove_object(elem);
              _repos_builder__WEBPACK_IMPORTED_MODULE_3__.REPOS_BUILDER.directory_content.regen_content();
              (0,_components_message_box_js__WEBPACK_IMPORTED_MODULE_2__.print_message)('info', `File removed`, `Successfully removed ${item.name}`);
              (0,_components_modal_js__WEBPACK_IMPORTED_MODULE_1__.close_modal)();
            } else if (result.status === 403) {
              window.location = `/auth/signin/`;
            } else {
              (0,_components_message_box_js__WEBPACK_IMPORTED_MODULE_2__.print_message)('error', `Failed to remove ${item.name}`, result.status);
              (0,_components_modal_js__WEBPACK_IMPORTED_MODULE_1__.close_modal)();
            }
          };
          div.append(confirm_button);
          (0,_components_modal_js__WEBPACK_IMPORTED_MODULE_1__.open_modal)(div, '500px', '100px');
        },
        image: '/images/icons/icons8-trash-52.png'
      });
    } else {
      actions.push({
        title: "Déplacer dans la corbeille",
        action: () => {
          const div = document.createElement('div');
          const p = document.createElement('p');
          p.innerText = `Êtes vous sur de vouloir déplacer ${item.name} dans la corbeille ?`;
          div.append(p);
          const no_button = document.createElement('button');
          no_button.classList.add('cancel-button');
          no_button.innerText = 'Non';
          no_button.onclick = () => {
            (0,_components_modal_js__WEBPACK_IMPORTED_MODULE_1__.close_modal)();
          };
          div.append(no_button);
          const confirm_button = document.createElement('button');
          confirm_button.innerText = 'Oui';
          confirm_button.onclick = async () => {
            await _repos_builder__WEBPACK_IMPORTED_MODULE_3__.REPOS_BUILDER.move_selection_to_trash();
          };
          div.append(confirm_button);
          (0,_components_modal_js__WEBPACK_IMPORTED_MODULE_1__.open_modal)(div, '500px', '100px');
        },
        image: '/images/icons/icons8-trash-52.png'
      });
    }
  }
  (0,_components_context_action_js__WEBPACK_IMPORTED_MODULE_0__.spawn_context_action)(actions);
}


/***/ }),

/***/ "./client/layout/widgets/viewport/repos_builder.js":
/*!*********************************************************!*\
  !*** ./client/layout/widgets/viewport/repos_builder.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   REPOS_BUILDER: () => (/* binding */ REPOS_BUILDER)
/* harmony export */ });
/* harmony import */ var _components_message_box_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/message_box.js */ "./client/layout/widgets/components/message_box.js");
/* harmony import */ var _common_tools_filesystem_v2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/tools/filesystem_v2.js */ "./client/common/tools/filesystem_v2.js");
/* harmony import */ var _common_tools_filesystem_v2_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_common_tools_filesystem_v2_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _common_tools_navigator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/tools/navigator.js */ "./client/common/tools/navigator.js");
/* harmony import */ var _common_tools_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../common/tools/utils */ "./client/common/tools/utils.js");
/* harmony import */ var _common_tools_user__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../common/tools/user */ "./client/common/tools/user.js");
/* harmony import */ var _components_modal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../components/modal */ "./client/layout/widgets/components/modal.js");
/* harmony import */ var _directory_content__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./directory_content */ "./client/layout/widgets/viewport/directory_content.js");
/* harmony import */ var _toolbar_toolbar__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../toolbar/toolbar */ "./client/layout/widgets/toolbar/toolbar.js");
/* harmony import */ var _toolbar_toolbar__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_toolbar_toolbar__WEBPACK_IMPORTED_MODULE_7__);








__webpack_require__(/*! ./item.scss */ "./client/layout/widgets/viewport/item.scss");
class ReposBuilder {
  constructor(repo) {
    this.repo = repo;

    /**
     * @type {Filesystem}
     */
    this.filesystem = new _common_tools_filesystem_v2_js__WEBPACK_IMPORTED_MODULE_1__.Filesystem(this.repo.display_name);

    /**
     * @type {Navigator}
     */
    this.navigator = new _common_tools_navigator_js__WEBPACK_IMPORTED_MODULE_2__.Navigator(this);

    /**
     * @type {DirectoryContent}
     */
    this.directory_content = new _directory_content__WEBPACK_IMPORTED_MODULE_6__.DirectoryContent(this);

    /**
     * @type {Toolbar}
     */
    this.path_builder = new _toolbar_toolbar__WEBPACK_IMPORTED_MODULE_7__.Toolbar(this.directory_content);
    this.navigator.on_changed_dir(async new_dir => {
      this.directory_content.destroy();
      this.directory_content = new _directory_content__WEBPACK_IMPORTED_MODULE_6__.DirectoryContent(this);
      this.path_builder.directory_content = this.directory_content;

      // Show directory or repo description
      const dir_data = this.filesystem.get_object_data(new_dir);
      const description = new_dir && dir_data && dir_data.parent_item !== null ? dir_data.description.plain() : _common_tools_utils__WEBPACK_IMPORTED_MODULE_3__.PAGE_CONTEXT.display_repos.description.plain();
      if (description && description !== '' && description !== 'null') {
        __webpack_require__.e(/*! import() */ "client_embed_viewers_custom_elements_document_showdown_loader_js").then(__webpack_require__.bind(__webpack_require__, /*! ../../../embed_viewers/custom_elements/document/showdown_loader */ "./client/embed_viewers/custom_elements/document/showdown_loader.js")).then(showdown => {
          const directory_description = document.getElementById('directory-description');
          if (directory_description) {
            directory_description.innerHTML = showdown.convert_text(description);
            directory_description.style.padding = '20px';
          }
        });
      } else {
        const directory_description = document.getElementById('directory-description');
        if (directory_description) {
          directory_description.innerText = '';
          directory_description.style.padding = '0';
        }
      }
      const upload_button = document.getElementById('upload-button');
      if (upload_button) upload_button.remove();
      if ((await _common_tools_utils__WEBPACK_IMPORTED_MODULE_3__.permissions.can_user_upload_to_directory(_common_tools_utils__WEBPACK_IMPORTED_MODULE_3__.PAGE_CONTEXT.repos_path(), new_dir)) || (await _common_tools_utils__WEBPACK_IMPORTED_MODULE_3__.permissions.can_user_upload_to_repos(_common_tools_utils__WEBPACK_IMPORTED_MODULE_3__.PAGE_CONTEXT.repos_path()))) {
        const upload_button = document.createElement('button');
        upload_button.onclick = () => upload.open_or_update_modal();
        upload_button.innerText = '+';
        upload_button.classList.add('plus-button');
        const upload_button_container = document.createElement('div');
        upload_button_container.id = 'upload-button';
        upload_button_container.append(upload_button);
        document.getElementById('file-list-box').append(upload_button_container);
        window.addEventListener('resize', () => {
          if (upload_button_container && upload_button_container.parentElement) {
            upload_button_container.style.width = upload_button_container.parentElement.offsetWidth + 'px';
            upload_button_container.style.height = upload_button_container.parentElement.offsetHeight + 'px';
          }
        });
        upload_button_container.style.width = upload_button_container.parentElement.offsetWidth + 'px';
        upload_button_container.style.height = upload_button_container.parentElement.offsetHeight + 'px';
      }
    });
    this.fetch_repos_content(false).then(async () => {
      this.navigator.set_current_dir(this.filesystem.get_object_from_path(_common_tools_utils__WEBPACK_IMPORTED_MODULE_3__.PAGE_CONTEXT.request_path.plain()));
    });
    const this_ref = this;
    window.addEventListener('popstate', event => {
      if ((0,_components_modal__WEBPACK_IMPORTED_MODULE_5__.is_modal_open)()) {
        (0,_components_modal__WEBPACK_IMPORTED_MODULE_5__.close_modal)();
        history.pushState(this_ref.navigator.current_directory, "", `${_common_tools_utils__WEBPACK_IMPORTED_MODULE_3__.PAGE_CONTEXT.repos_path()}/tree${this_ref.navigator.get_string_path_to_directory(this_ref.navigator.current_directory)}`);
        return;
      }
      if (this.directory_content.item_carousel) {
        this.directory_content.close_carousel();
        history.pushState(this_ref.navigator.current_directory, "", `${_common_tools_utils__WEBPACK_IMPORTED_MODULE_3__.PAGE_CONTEXT.repos_path()}/tree${this_ref.navigator.get_string_path_to_directory(this_ref.navigator.current_directory)}`);
        return;
      }
      this_ref.navigator.set_current_dir(event.state, true);
    }, false);
    document.addEventListener('keydown', event => {
      if (event.target.type === 'text') return;
      if (event.key === 'Backspace' || event.key === 'Escape') {
        if ((0,_components_modal__WEBPACK_IMPORTED_MODULE_5__.is_modal_open)()) {
          if (event.key === 'Escape') (0,_components_modal__WEBPACK_IMPORTED_MODULE_5__.close_modal)();
          return;
        }
        if (this.directory_content.item_carousel) {
          this.directory_content.close_carousel();
        } else {
          if (event.key === 'Escape' && this.navigator.selected_items.size !== 0) this.navigator.clear_selection();else {
            const current_data = this.filesystem.get_object_data(this.navigator.get_current_directory());
            if (current_data) {
              this.navigator.set_current_dir(current_data.parent_item);
              this.navigator.select_item(current_data.id, false, false);
            }
          }
        }
      }
      if (event.key === 'ArrowRight') {
        if (this.directory_content && this.directory_content.item_carousel) {
          this.directory_content.item_carousel.list.select_next();
          return;
        } else if ((0,_components_modal__WEBPACK_IMPORTED_MODULE_5__.is_modal_open)()) return;
        this.select_next_element(event);
      }
      if (event.key === 'ArrowLeft') {
        if (this.directory_content && this.directory_content.item_carousel) {
          this.directory_content.item_carousel.list.select_previous();
          return;
        } else if ((0,_components_modal__WEBPACK_IMPORTED_MODULE_5__.is_modal_open)()) return;
        this.select_previous_element(event);
      }
      if (event.key === 'ArrowUp') {
        if ((0,_components_modal__WEBPACK_IMPORTED_MODULE_5__.is_modal_open)() || this.directory_content && this.directory_content.item_carousel) return;
        const item_per_row = this.directory_content.viewport_container.offsetWidth / 120;
        for (let i = 1; i < item_per_row; ++i) this.select_previous_element(event);
      }
      if (event.key === 'ArrowDown') {
        if ((0,_components_modal__WEBPACK_IMPORTED_MODULE_5__.is_modal_open)() || this.directory_content && this.directory_content.item_carousel) return;
        const item_per_row = this.directory_content.viewport_container.offsetWidth / 120;
        for (let i = 1; i < item_per_row; ++i) this.select_next_element(event);
      }
      if (event.key === 'Enter') {
        if ((0,_components_modal__WEBPACK_IMPORTED_MODULE_5__.is_modal_open)()) return;
        const current_data = this.filesystem.get_object_data(this.navigator.last_selected_item);
        if (current_data) {
          if (current_data.is_regular_file) {
            this.directory_content.open_item_carousel();
          } else this.navigator.set_current_dir(current_data.id);
        }
      }
      if (!(0,_components_modal__WEBPACK_IMPORTED_MODULE_5__.is_modal_open)() && !this.directory_content.item_carousel) {
        if ((event.key === 'a' || event.key === 'A') && event.ctrlKey) {
          for (const elem of this.directory_content.objects) this.navigator.select_item(elem.id, false, true, true);
          event.preventDefault();
        }
        if ((event.key === 'x' || event.key === 'X') && event.ctrlKey) {
          this.cut_selection();
        }
        if ((event.key === 'v' || event.key === 'V') && event.ctrlKey) {
          this.navigator.move_clipboard_to_parent(this.navigator.get_current_directory());
        }
        if (event.key === 'Delete') {
          this.move_selection_to_trash();
        }
      }
    }, false);
    _common_tools_user__WEBPACK_IMPORTED_MODULE_4__.LOCAL_USER.push_last_repos(this.repo.id);
  }
  cut_selection() {
    for (const elem of REPOS_BUILDER.navigator.selected_items) REPOS_BUILDER.directory_content._on_item_removed(elem);
    REPOS_BUILDER.navigator.cut_selection();
  }
  async move_selection_to_trash() {
    const result = await fetch(`${_common_tools_utils__WEBPACK_IMPORTED_MODULE_3__.PAGE_CONTEXT.repos_path()}/move-to-trash/`, {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(Array.from(REPOS_BUILDER.navigator.selected_items))
    });
    if (result.status === 200) {
      const removed_elems = await result.json();
      for (const elem of removed_elems) REPOS_BUILDER.filesystem.remove_object(elem);
      (0,_components_message_box_js__WEBPACK_IMPORTED_MODULE_0__.print_message)('info', `File removed`, `Successfully removed ${removed_elems.length} elements`);
      (0,_components_modal__WEBPACK_IMPORTED_MODULE_5__.close_modal)();
    } else if (result.status === 403) {
      window.location = `/auth/signin/`;
    } else {
      (0,_components_message_box_js__WEBPACK_IMPORTED_MODULE_0__.print_message)('error', `Failed to remove ${item.name}`, result.status);
      (0,_components_modal__WEBPACK_IMPORTED_MODULE_5__.close_modal)();
    }
  }
  async fetch_repos_content() {
    let is_trash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    const time_a = performance.now();
    this.filesystem.clear();
    await fetch(`${_common_tools_utils__WEBPACK_IMPORTED_MODULE_3__.PAGE_CONTEXT.repos_path()}/${is_trash ? "trash" : "content"}/`, {
      headers: {
        'content-authtoken': _common_tools_user__WEBPACK_IMPORTED_MODULE_4__.LOCAL_USER.get_token(),
        'accept': 'application/json'
      }
    }).then(async response => await (0,_components_message_box_js__WEBPACK_IMPORTED_MODULE_0__.parse_fetch_result)(response)).then(json => {
      const time_b = performance.now();
      for (const item of json) this.filesystem.add_object(_common_tools_filesystem_v2_js__WEBPACK_IMPORTED_MODULE_1__.FilesystemObject.FromServerData(item));
      const time_c = performance.now();
      console.info(`Retrieved repo content. Fetch : ${time_b - time_a}ms, Display : ${time_c - time_b}ms`);
    });
  }
  select_previous_element(event) {
    this.navigator.select_item(this.directory_content.get_item_before(this.navigator.last_selected_item, !!this.directory_content.item_carousel), false, event.ctrlKey || event.shiftKey);
  }
  select_next_element(event) {
    this.navigator.select_item(this.directory_content.get_item_after(this.navigator.last_selected_item, !!this.directory_content.item_carousel), false, event.ctrlKey || event.shiftKey);
  }
  async go_to_trash() {
    this.is_looking_trash = true;
    await this.fetch_repos_content(true);
    this.directory_content.regen_content();
  }
  async exit_trash() {
    this.is_looking_trash = false;
    await this.fetch_repos_content(false);
    this.directory_content.regen_content();
  }
}
const REPOS_BUILDER = _common_tools_utils__WEBPACK_IMPORTED_MODULE_3__.PAGE_CONTEXT.display_repos && document.getElementById('file-list') ? new ReposBuilder(_common_tools_utils__WEBPACK_IMPORTED_MODULE_3__.PAGE_CONTEXT.display_repos) : null;


/***/ }),

/***/ "./node_modules/dayjs/dayjs.min.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/dayjs.min.js ***!
  \*****************************************/
/***/ (function(module) {

!function(t,e){ true?module.exports=e():0}(this,(function(){"use strict";var t=1e3,e=6e4,n=36e5,r="millisecond",i="second",s="minute",u="hour",a="day",o="week",c="month",f="quarter",h="year",d="date",l="Invalid Date",$=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,y=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ordinal:function(t){var e=["th","st","nd","rd"],n=t%100;return"["+t+(e[(n-20)%10]||e[n]||e[0])+"]"}},m=function(t,e,n){var r=String(t);return!r||r.length>=e?t:""+Array(e+1-r.length).join(n)+t},v={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return(e<=0?"+":"-")+m(r,2,"0")+":"+m(i,2,"0")},m:function t(e,n){if(e.date()<n.date())return-t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,c),s=n-i<0,u=e.clone().add(r+(s?-1:1),c);return+(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return{M:c,y:h,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:f}[t]||String(t||"").toLowerCase().replace(/s$/,"")},u:function(t){return void 0===t}},g="en",D={};D[g]=M;var p="$isDayjsObject",S=function(t){return t instanceof _||!(!t||!t[p])},w=function t(e,n,r){var i;if(!e)return g;if("string"==typeof e){var s=e.toLowerCase();D[s]&&(i=s),n&&(D[s]=n,i=s);var u=e.split("-");if(!i&&u.length>1)return t(u[0])}else{var a=e.name;D[a]=e,i=a}return!r&&i&&(g=i),i||!r&&g},O=function(t,e){if(S(t))return t.clone();var n="object"==typeof e?e:{};return n.date=t,n.args=arguments,new _(n)},b=v;b.l=w,b.i=S,b.w=function(t,e){return O(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function M(t){this.$L=w(t.locale,null,!0),this.parse(t),this.$x=this.$x||t.x||{},this[p]=!0}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(b.u(e))return new Date;if(e instanceof Date)return new Date(e);if("string"==typeof e&&!/Z$/i.test(e)){var r=e.match($);if(r){var i=r[2]-1||0,s=(r[7]||"0").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.init()},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},m.$utils=function(){return b},m.isValid=function(){return!(this.$d.toString()===l)},m.isSame=function(t,e){var n=O(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return O(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<O(t)},m.$g=function(t,e,n){return b.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!b.u(e)||e,f=b.p(t),l=function(t,e){var i=b.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},$=function(t,e){return b.w(n.toDate()[t].apply(n.toDate("s"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,v="set"+(this.$u?"UTC":"");switch(f){case h:return r?l(1,0):l(31,11);case c:return r?l(1,M):l(0,M+1);case o:var g=this.$locale().weekStart||0,D=(y<g?y+7:y)-g;return l(r?m-D:m+(6-D),M);case a:case d:return $(v+"Hours",0);case u:return $(v+"Minutes",1);case s:return $(v+"Seconds",2);case i:return $(v+"Milliseconds",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=b.p(t),f="set"+(this.$u?"UTC":""),l=(n={},n[a]=f+"Date",n[d]=f+"Date",n[c]=f+"Month",n[h]=f+"FullYear",n[u]=f+"Hours",n[s]=f+"Minutes",n[i]=f+"Seconds",n[r]=f+"Milliseconds",n)[o],$=o===a?this.$D+(e-this.$W):e;if(o===c||o===h){var y=this.clone().set(d,1);y.$d[l]($),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d}else l&&this.$d[l]($);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[b.p(t)]()},m.add=function(r,f){var d,l=this;r=Number(r);var $=b.p(f),y=function(t){var e=O(l);return b.w(e.date(e.date()+Math.round(t*r)),l)};if($===c)return this.set(c,this.$M+r);if($===h)return this.set(h,this.$y+r);if($===a)return y(1);if($===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[$]||1,m=this.$d.getTime()+r*M;return b.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||l;var r=t||"YYYY-MM-DDTHH:mm:ssZ",i=b.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,c=n.months,f=n.meridiem,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].slice(0,s)},d=function(t){return b.s(s%12||12,t,"0")},$=f||function(t,e,n){var r=t<12?"AM":"PM";return n?r.toLowerCase():r};return r.replace(y,(function(t,r){return r||function(t){switch(t){case"YY":return String(e.$y).slice(-2);case"YYYY":return b.s(e.$y,4,"0");case"M":return a+1;case"MM":return b.s(a+1,2,"0");case"MMM":return h(n.monthsShort,a,c,3);case"MMMM":return h(c,a);case"D":return e.$D;case"DD":return b.s(e.$D,2,"0");case"d":return String(e.$W);case"dd":return h(n.weekdaysMin,e.$W,o,2);case"ddd":return h(n.weekdaysShort,e.$W,o,3);case"dddd":return o[e.$W];case"H":return String(s);case"HH":return b.s(s,2,"0");case"h":return d(1);case"hh":return d(2);case"a":return $(s,u,!0);case"A":return $(s,u,!1);case"m":return String(u);case"mm":return b.s(u,2,"0");case"s":return String(e.$s);case"ss":return b.s(e.$s,2,"0");case"SSS":return b.s(e.$ms,3,"0");case"Z":return i}return null}(t)||i.replace(":","")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,l){var $,y=this,M=b.p(d),m=O(r),v=(m.utcOffset()-this.utcOffset())*e,g=this-m,D=function(){return b.m(y,m)};switch(M){case h:$=D()/12;break;case c:$=D();break;case f:$=D()/3;break;case o:$=(g-v)/6048e5;break;case a:$=(g-v)/864e5;break;case u:$=g/n;break;case s:$=g/e;break;case i:$=g/t;break;default:$=g}return l?$:b.a($)},m.daysInMonth=function(){return this.endOf(c).$D},m.$locale=function(){return D[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=w(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return b.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),k=_.prototype;return O.prototype=k,[["$ms",r],["$s",i],["$m",s],["$H",u],["$W",a],["$M",c],["$y",h],["$D",d]].forEach((function(t){k[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),O.extend=function(t,e){return t.$i||(t(e,_,O),t.$i=!0),O},O.locale=w,O.isDayjs=S,O.unix=function(t){return O(1e3*t)},O.en=D[g],O.Ls=D,O.p={},O}));

/***/ }),

/***/ "./node_modules/dayjs/plugin/utc.js":
/*!******************************************!*\
  !*** ./node_modules/dayjs/plugin/utc.js ***!
  \******************************************/
/***/ (function(module) {

!function(t,i){ true?module.exports=i():0}(this,(function(){"use strict";var t="minute",i=/[+-]\d\d(?::?\d\d)?/g,e=/([+-]|\d\d)/g;return function(s,f,n){var u=f.prototype;n.utc=function(t){var i={date:t,utc:!0,args:arguments};return new f(i)},u.utc=function(i){var e=n(this.toDate(),{locale:this.$L,utc:!0});return i?e.add(this.utcOffset(),t):e},u.local=function(){return n(this.toDate(),{locale:this.$L,utc:!1})};var o=u.parse;u.parse=function(t){t.utc&&(this.$u=!0),this.$utils().u(t.$offset)||(this.$offset=t.$offset),o.call(this,t)};var r=u.init;u.init=function(){if(this.$u){var t=this.$d;this.$y=t.getUTCFullYear(),this.$M=t.getUTCMonth(),this.$D=t.getUTCDate(),this.$W=t.getUTCDay(),this.$H=t.getUTCHours(),this.$m=t.getUTCMinutes(),this.$s=t.getUTCSeconds(),this.$ms=t.getUTCMilliseconds()}else r.call(this)};var a=u.utcOffset;u.utcOffset=function(s,f){var n=this.$utils().u;if(n(s))return this.$u?0:n(this.$offset)?a.call(this):this.$offset;if("string"==typeof s&&(s=function(t){void 0===t&&(t="");var s=t.match(i);if(!s)return null;var f=(""+s[0]).match(e)||["-",0,0],n=f[0],u=60*+f[1]+ +f[2];return 0===u?0:"+"===n?u:-u}(s),null===s))return this;var u=Math.abs(s)<=16?60*s:s,o=this;if(f)return o.$offset=u,o.$u=0===s,o;if(0!==s){var r=this.$u?this.toDate().getTimezoneOffset():-1*this.utcOffset();(o=this.local().add(u+r,t)).$offset=u,o.$x.$localOffset=r}else o=this.utc();return o};var h=u.format;u.format=function(t){var i=t||(this.$u?"YYYY-MM-DDTHH:mm:ss[Z]":"");return h.call(this,i)},u.valueOf=function(){var t=this.$utils().u(this.$offset)?0:this.$offset+(this.$x.$localOffset||this.$d.getTimezoneOffset());return this.$d.valueOf()-6e4*t},u.isUTC=function(){return!!this.$u},u.toISOString=function(){return this.toDate().toISOString()},u.toString=function(){return this.toDate().toUTCString()};var l=u.toDate;u.toDate=function(t){return"s"===t&&this.$offset?n(this.format("YYYY-MM-DD HH:mm:ss:SSS")).toDate():l.call(this)};var c=u.diff;u.diff=function(t,i,e){if(t&&this.$u===t.$u)return c.call(this,t,i,e);var s=this.local(),f=n(t).local();return c.call(s,f,i,e)}}}));

/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars.js":
/*!********************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _handlebarsRuntime = __webpack_require__(/*! ./handlebars.runtime */ "./node_modules/handlebars/dist/cjs/handlebars.runtime.js");

var _handlebarsRuntime2 = _interopRequireDefault(_handlebarsRuntime);

// Compiler imports

var _handlebarsCompilerAst = __webpack_require__(/*! ./handlebars/compiler/ast */ "./node_modules/handlebars/dist/cjs/handlebars/compiler/ast.js");

var _handlebarsCompilerAst2 = _interopRequireDefault(_handlebarsCompilerAst);

var _handlebarsCompilerBase = __webpack_require__(/*! ./handlebars/compiler/base */ "./node_modules/handlebars/dist/cjs/handlebars/compiler/base.js");

var _handlebarsCompilerCompiler = __webpack_require__(/*! ./handlebars/compiler/compiler */ "./node_modules/handlebars/dist/cjs/handlebars/compiler/compiler.js");

var _handlebarsCompilerJavascriptCompiler = __webpack_require__(/*! ./handlebars/compiler/javascript-compiler */ "./node_modules/handlebars/dist/cjs/handlebars/compiler/javascript-compiler.js");

var _handlebarsCompilerJavascriptCompiler2 = _interopRequireDefault(_handlebarsCompilerJavascriptCompiler);

var _handlebarsCompilerVisitor = __webpack_require__(/*! ./handlebars/compiler/visitor */ "./node_modules/handlebars/dist/cjs/handlebars/compiler/visitor.js");

var _handlebarsCompilerVisitor2 = _interopRequireDefault(_handlebarsCompilerVisitor);

var _handlebarsNoConflict = __webpack_require__(/*! ./handlebars/no-conflict */ "./node_modules/handlebars/dist/cjs/handlebars/no-conflict.js");

var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

var _create = _handlebarsRuntime2['default'].create;
function create() {
  var hb = _create();

  hb.compile = function (input, options) {
    return _handlebarsCompilerCompiler.compile(input, options, hb);
  };
  hb.precompile = function (input, options) {
    return _handlebarsCompilerCompiler.precompile(input, options, hb);
  };

  hb.AST = _handlebarsCompilerAst2['default'];
  hb.Compiler = _handlebarsCompilerCompiler.Compiler;
  hb.JavaScriptCompiler = _handlebarsCompilerJavascriptCompiler2['default'];
  hb.Parser = _handlebarsCompilerBase.parser;
  hb.parse = _handlebarsCompilerBase.parse;
  hb.parseWithoutProcessing = _handlebarsCompilerBase.parseWithoutProcessing;

  return hb;
}

var inst = create();
inst.create = create;

_handlebarsNoConflict2['default'](inst);

inst.Visitor = _handlebarsCompilerVisitor2['default'];

inst['default'] = inst;

exports["default"] = inst;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9oYW5kbGViYXJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7aUNBQW9CLHNCQUFzQjs7Ozs7O3FDQUcxQiwyQkFBMkI7Ozs7c0NBS3BDLDRCQUE0Qjs7MENBQ1csZ0NBQWdDOztvREFDL0MsMkNBQTJDOzs7O3lDQUN0RCwrQkFBK0I7Ozs7b0NBRTVCLDBCQUEwQjs7OztBQUVqRCxJQUFJLE9BQU8sR0FBRywrQkFBUSxNQUFNLENBQUM7QUFDN0IsU0FBUyxNQUFNLEdBQUc7QUFDaEIsTUFBSSxFQUFFLEdBQUcsT0FBTyxFQUFFLENBQUM7O0FBRW5CLElBQUUsQ0FBQyxPQUFPLEdBQUcsVUFBUyxLQUFLLEVBQUUsT0FBTyxFQUFFO0FBQ3BDLFdBQU8sb0NBQVEsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztHQUNwQyxDQUFDO0FBQ0YsSUFBRSxDQUFDLFVBQVUsR0FBRyxVQUFTLEtBQUssRUFBRSxPQUFPLEVBQUU7QUFDdkMsV0FBTyx1Q0FBVyxLQUFLLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0dBQ3ZDLENBQUM7O0FBRUYsSUFBRSxDQUFDLEdBQUcscUNBQU0sQ0FBQztBQUNiLElBQUUsQ0FBQyxRQUFRLHVDQUFXLENBQUM7QUFDdkIsSUFBRSxDQUFDLGtCQUFrQixvREFBcUIsQ0FBQztBQUMzQyxJQUFFLENBQUMsTUFBTSxpQ0FBUyxDQUFDO0FBQ25CLElBQUUsQ0FBQyxLQUFLLGdDQUFRLENBQUM7QUFDakIsSUFBRSxDQUFDLHNCQUFzQixpREFBeUIsQ0FBQzs7QUFFbkQsU0FBTyxFQUFFLENBQUM7Q0FDWDs7QUFFRCxJQUFJLElBQUksR0FBRyxNQUFNLEVBQUUsQ0FBQztBQUNwQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQzs7QUFFckIsa0NBQVcsSUFBSSxDQUFDLENBQUM7O0FBRWpCLElBQUksQ0FBQyxPQUFPLHlDQUFVLENBQUM7O0FBRXZCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUM7O3FCQUVSLElBQUkiLCJmaWxlIjoiaGFuZGxlYmFycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBydW50aW1lIGZyb20gJy4vaGFuZGxlYmFycy5ydW50aW1lJztcblxuLy8gQ29tcGlsZXIgaW1wb3J0c1xuaW1wb3J0IEFTVCBmcm9tICcuL2hhbmRsZWJhcnMvY29tcGlsZXIvYXN0JztcbmltcG9ydCB7XG4gIHBhcnNlciBhcyBQYXJzZXIsXG4gIHBhcnNlLFxuICBwYXJzZVdpdGhvdXRQcm9jZXNzaW5nXG59IGZyb20gJy4vaGFuZGxlYmFycy9jb21waWxlci9iYXNlJztcbmltcG9ydCB7IENvbXBpbGVyLCBjb21waWxlLCBwcmVjb21waWxlIH0gZnJvbSAnLi9oYW5kbGViYXJzL2NvbXBpbGVyL2NvbXBpbGVyJztcbmltcG9ydCBKYXZhU2NyaXB0Q29tcGlsZXIgZnJvbSAnLi9oYW5kbGViYXJzL2NvbXBpbGVyL2phdmFzY3JpcHQtY29tcGlsZXInO1xuaW1wb3J0IFZpc2l0b3IgZnJvbSAnLi9oYW5kbGViYXJzL2NvbXBpbGVyL3Zpc2l0b3InO1xuXG5pbXBvcnQgbm9Db25mbGljdCBmcm9tICcuL2hhbmRsZWJhcnMvbm8tY29uZmxpY3QnO1xuXG5sZXQgX2NyZWF0ZSA9IHJ1bnRpbWUuY3JlYXRlO1xuZnVuY3Rpb24gY3JlYXRlKCkge1xuICBsZXQgaGIgPSBfY3JlYXRlKCk7XG5cbiAgaGIuY29tcGlsZSA9IGZ1bmN0aW9uKGlucHV0LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGNvbXBpbGUoaW5wdXQsIG9wdGlvbnMsIGhiKTtcbiAgfTtcbiAgaGIucHJlY29tcGlsZSA9IGZ1bmN0aW9uKGlucHV0LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHByZWNvbXBpbGUoaW5wdXQsIG9wdGlvbnMsIGhiKTtcbiAgfTtcblxuICBoYi5BU1QgPSBBU1Q7XG4gIGhiLkNvbXBpbGVyID0gQ29tcGlsZXI7XG4gIGhiLkphdmFTY3JpcHRDb21waWxlciA9IEphdmFTY3JpcHRDb21waWxlcjtcbiAgaGIuUGFyc2VyID0gUGFyc2VyO1xuICBoYi5wYXJzZSA9IHBhcnNlO1xuICBoYi5wYXJzZVdpdGhvdXRQcm9jZXNzaW5nID0gcGFyc2VXaXRob3V0UHJvY2Vzc2luZztcblxuICByZXR1cm4gaGI7XG59XG5cbmxldCBpbnN0ID0gY3JlYXRlKCk7XG5pbnN0LmNyZWF0ZSA9IGNyZWF0ZTtcblxubm9Db25mbGljdChpbnN0KTtcblxuaW5zdC5WaXNpdG9yID0gVmlzaXRvcjtcblxuaW5zdFsnZGVmYXVsdCddID0gaW5zdDtcblxuZXhwb3J0IGRlZmF1bHQgaW5zdDtcbiJdfQ==


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars.runtime.js":
/*!****************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars.runtime.js ***!
  \****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

// istanbul ignore next

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _handlebarsBase = __webpack_require__(/*! ./handlebars/base */ "./node_modules/handlebars/dist/cjs/handlebars/base.js");

var base = _interopRequireWildcard(_handlebarsBase);

// Each of these augment the Handlebars object. No need to setup here.
// (This is done to easily share code between commonjs and browse envs)

var _handlebarsSafeString = __webpack_require__(/*! ./handlebars/safe-string */ "./node_modules/handlebars/dist/cjs/handlebars/safe-string.js");

var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);

var _handlebarsException = __webpack_require__(/*! ./handlebars/exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _handlebarsException2 = _interopRequireDefault(_handlebarsException);

var _handlebarsUtils = __webpack_require__(/*! ./handlebars/utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var Utils = _interopRequireWildcard(_handlebarsUtils);

var _handlebarsRuntime = __webpack_require__(/*! ./handlebars/runtime */ "./node_modules/handlebars/dist/cjs/handlebars/runtime.js");

var runtime = _interopRequireWildcard(_handlebarsRuntime);

var _handlebarsNoConflict = __webpack_require__(/*! ./handlebars/no-conflict */ "./node_modules/handlebars/dist/cjs/handlebars/no-conflict.js");

var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

// For compatibility and usage outside of module systems, make the Handlebars object a namespace
function create() {
  var hb = new base.HandlebarsEnvironment();

  Utils.extend(hb, base);
  hb.SafeString = _handlebarsSafeString2['default'];
  hb.Exception = _handlebarsException2['default'];
  hb.Utils = Utils;
  hb.escapeExpression = Utils.escapeExpression;

  hb.VM = runtime;
  hb.template = function (spec) {
    return runtime.template(spec, hb);
  };

  return hb;
}

var inst = create();
inst.create = create;

_handlebarsNoConflict2['default'](inst);

inst['default'] = inst;

exports["default"] = inst;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9oYW5kbGViYXJzLnJ1bnRpbWUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OEJBQXNCLG1CQUFtQjs7SUFBN0IsSUFBSTs7Ozs7b0NBSU8sMEJBQTBCOzs7O21DQUMzQix3QkFBd0I7Ozs7K0JBQ3ZCLG9CQUFvQjs7SUFBL0IsS0FBSzs7aUNBQ1Esc0JBQXNCOztJQUFuQyxPQUFPOztvQ0FFSSwwQkFBMEI7Ozs7O0FBR2pELFNBQVMsTUFBTSxHQUFHO0FBQ2hCLE1BQUksRUFBRSxHQUFHLElBQUksSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7O0FBRTFDLE9BQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3ZCLElBQUUsQ0FBQyxVQUFVLG9DQUFhLENBQUM7QUFDM0IsSUFBRSxDQUFDLFNBQVMsbUNBQVksQ0FBQztBQUN6QixJQUFFLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztBQUNqQixJQUFFLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixDQUFDOztBQUU3QyxJQUFFLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQztBQUNoQixJQUFFLENBQUMsUUFBUSxHQUFHLFVBQVMsSUFBSSxFQUFFO0FBQzNCLFdBQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDbkMsQ0FBQzs7QUFFRixTQUFPLEVBQUUsQ0FBQztDQUNYOztBQUVELElBQUksSUFBSSxHQUFHLE1BQU0sRUFBRSxDQUFDO0FBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDOztBQUVyQixrQ0FBVyxJQUFJLENBQUMsQ0FBQzs7QUFFakIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQzs7cUJBRVIsSUFBSSIsImZpbGUiOiJoYW5kbGViYXJzLnJ1bnRpbWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBiYXNlIGZyb20gJy4vaGFuZGxlYmFycy9iYXNlJztcblxuLy8gRWFjaCBvZiB0aGVzZSBhdWdtZW50IHRoZSBIYW5kbGViYXJzIG9iamVjdC4gTm8gbmVlZCB0byBzZXR1cCBoZXJlLlxuLy8gKFRoaXMgaXMgZG9uZSB0byBlYXNpbHkgc2hhcmUgY29kZSBiZXR3ZWVuIGNvbW1vbmpzIGFuZCBicm93c2UgZW52cylcbmltcG9ydCBTYWZlU3RyaW5nIGZyb20gJy4vaGFuZGxlYmFycy9zYWZlLXN0cmluZyc7XG5pbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4vaGFuZGxlYmFycy9leGNlcHRpb24nO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSAnLi9oYW5kbGViYXJzL3V0aWxzJztcbmltcG9ydCAqIGFzIHJ1bnRpbWUgZnJvbSAnLi9oYW5kbGViYXJzL3J1bnRpbWUnO1xuXG5pbXBvcnQgbm9Db25mbGljdCBmcm9tICcuL2hhbmRsZWJhcnMvbm8tY29uZmxpY3QnO1xuXG4vLyBGb3IgY29tcGF0aWJpbGl0eSBhbmQgdXNhZ2Ugb3V0c2lkZSBvZiBtb2R1bGUgc3lzdGVtcywgbWFrZSB0aGUgSGFuZGxlYmFycyBvYmplY3QgYSBuYW1lc3BhY2VcbmZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgbGV0IGhiID0gbmV3IGJhc2UuSGFuZGxlYmFyc0Vudmlyb25tZW50KCk7XG5cbiAgVXRpbHMuZXh0ZW5kKGhiLCBiYXNlKTtcbiAgaGIuU2FmZVN0cmluZyA9IFNhZmVTdHJpbmc7XG4gIGhiLkV4Y2VwdGlvbiA9IEV4Y2VwdGlvbjtcbiAgaGIuVXRpbHMgPSBVdGlscztcbiAgaGIuZXNjYXBlRXhwcmVzc2lvbiA9IFV0aWxzLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgaGIuVk0gPSBydW50aW1lO1xuICBoYi50ZW1wbGF0ZSA9IGZ1bmN0aW9uKHNwZWMpIHtcbiAgICByZXR1cm4gcnVudGltZS50ZW1wbGF0ZShzcGVjLCBoYik7XG4gIH07XG5cbiAgcmV0dXJuIGhiO1xufVxuXG5sZXQgaW5zdCA9IGNyZWF0ZSgpO1xuaW5zdC5jcmVhdGUgPSBjcmVhdGU7XG5cbm5vQ29uZmxpY3QoaW5zdCk7XG5cbmluc3RbJ2RlZmF1bHQnXSA9IGluc3Q7XG5cbmV4cG9ydCBkZWZhdWx0IGluc3Q7XG4iXX0=


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/base.js":
/*!*************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/base.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
exports.HandlebarsEnvironment = HandlebarsEnvironment;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var _exception = __webpack_require__(/*! ./exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _exception2 = _interopRequireDefault(_exception);

var _helpers = __webpack_require__(/*! ./helpers */ "./node_modules/handlebars/dist/cjs/handlebars/helpers.js");

var _decorators = __webpack_require__(/*! ./decorators */ "./node_modules/handlebars/dist/cjs/handlebars/decorators.js");

var _logger = __webpack_require__(/*! ./logger */ "./node_modules/handlebars/dist/cjs/handlebars/logger.js");

var _logger2 = _interopRequireDefault(_logger);

var _internalProtoAccess = __webpack_require__(/*! ./internal/proto-access */ "./node_modules/handlebars/dist/cjs/handlebars/internal/proto-access.js");

var VERSION = '4.7.8';
exports.VERSION = VERSION;
var COMPILER_REVISION = 8;
exports.COMPILER_REVISION = COMPILER_REVISION;
var LAST_COMPATIBLE_COMPILER_REVISION = 7;

exports.LAST_COMPATIBLE_COMPILER_REVISION = LAST_COMPATIBLE_COMPILER_REVISION;
var REVISION_CHANGES = {
  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
  2: '== 1.0.0-rc.3',
  3: '== 1.0.0-rc.4',
  4: '== 1.x.x',
  5: '== 2.0.0-alpha.x',
  6: '>= 2.0.0-beta.1',
  7: '>= 4.0.0 <4.3.0',
  8: '>= 4.3.0'
};

exports.REVISION_CHANGES = REVISION_CHANGES;
var objectType = '[object Object]';

function HandlebarsEnvironment(helpers, partials, decorators) {
  this.helpers = helpers || {};
  this.partials = partials || {};
  this.decorators = decorators || {};

  _helpers.registerDefaultHelpers(this);
  _decorators.registerDefaultDecorators(this);
}

HandlebarsEnvironment.prototype = {
  constructor: HandlebarsEnvironment,

  logger: _logger2['default'],
  log: _logger2['default'].log,

  registerHelper: function registerHelper(name, fn) {
    if (_utils.toString.call(name) === objectType) {
      if (fn) {
        throw new _exception2['default']('Arg not supported with multiple helpers');
      }
      _utils.extend(this.helpers, name);
    } else {
      this.helpers[name] = fn;
    }
  },
  unregisterHelper: function unregisterHelper(name) {
    delete this.helpers[name];
  },

  registerPartial: function registerPartial(name, partial) {
    if (_utils.toString.call(name) === objectType) {
      _utils.extend(this.partials, name);
    } else {
      if (typeof partial === 'undefined') {
        throw new _exception2['default']('Attempting to register a partial called "' + name + '" as undefined');
      }
      this.partials[name] = partial;
    }
  },
  unregisterPartial: function unregisterPartial(name) {
    delete this.partials[name];
  },

  registerDecorator: function registerDecorator(name, fn) {
    if (_utils.toString.call(name) === objectType) {
      if (fn) {
        throw new _exception2['default']('Arg not supported with multiple decorators');
      }
      _utils.extend(this.decorators, name);
    } else {
      this.decorators[name] = fn;
    }
  },
  unregisterDecorator: function unregisterDecorator(name) {
    delete this.decorators[name];
  },
  /**
   * Reset the memory of illegal property accesses that have already been logged.
   * @deprecated should only be used in handlebars test-cases
   */
  resetLoggedPropertyAccesses: function resetLoggedPropertyAccesses() {
    _internalProtoAccess.resetLoggedProperties();
  }
};

var log = _logger2['default'].log;

exports.log = log;
exports.createFrame = _utils.createFrame;
exports.logger = _logger2['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2Jhc2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7cUJBQThDLFNBQVM7O3lCQUNqQyxhQUFhOzs7O3VCQUNJLFdBQVc7OzBCQUNSLGNBQWM7O3NCQUNyQyxVQUFVOzs7O21DQUNTLHlCQUF5Qjs7QUFFeEQsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDOztBQUN4QixJQUFNLGlCQUFpQixHQUFHLENBQUMsQ0FBQzs7QUFDNUIsSUFBTSxpQ0FBaUMsR0FBRyxDQUFDLENBQUM7OztBQUU1QyxJQUFNLGdCQUFnQixHQUFHO0FBQzlCLEdBQUMsRUFBRSxhQUFhO0FBQ2hCLEdBQUMsRUFBRSxlQUFlO0FBQ2xCLEdBQUMsRUFBRSxlQUFlO0FBQ2xCLEdBQUMsRUFBRSxVQUFVO0FBQ2IsR0FBQyxFQUFFLGtCQUFrQjtBQUNyQixHQUFDLEVBQUUsaUJBQWlCO0FBQ3BCLEdBQUMsRUFBRSxpQkFBaUI7QUFDcEIsR0FBQyxFQUFFLFVBQVU7Q0FDZCxDQUFDOzs7QUFFRixJQUFNLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQzs7QUFFOUIsU0FBUyxxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRTtBQUNuRSxNQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sSUFBSSxFQUFFLENBQUM7QUFDN0IsTUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLElBQUksRUFBRSxDQUFDO0FBQy9CLE1BQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxJQUFJLEVBQUUsQ0FBQzs7QUFFbkMsa0NBQXVCLElBQUksQ0FBQyxDQUFDO0FBQzdCLHdDQUEwQixJQUFJLENBQUMsQ0FBQztDQUNqQzs7QUFFRCxxQkFBcUIsQ0FBQyxTQUFTLEdBQUc7QUFDaEMsYUFBVyxFQUFFLHFCQUFxQjs7QUFFbEMsUUFBTSxxQkFBUTtBQUNkLEtBQUcsRUFBRSxvQkFBTyxHQUFHOztBQUVmLGdCQUFjLEVBQUUsd0JBQVMsSUFBSSxFQUFFLEVBQUUsRUFBRTtBQUNqQyxRQUFJLGdCQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxVQUFVLEVBQUU7QUFDdEMsVUFBSSxFQUFFLEVBQUU7QUFDTixjQUFNLDJCQUFjLHlDQUF5QyxDQUFDLENBQUM7T0FDaEU7QUFDRCxvQkFBTyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQzVCLE1BQU07QUFDTCxVQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztLQUN6QjtHQUNGO0FBQ0Qsa0JBQWdCLEVBQUUsMEJBQVMsSUFBSSxFQUFFO0FBQy9CLFdBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUMzQjs7QUFFRCxpQkFBZSxFQUFFLHlCQUFTLElBQUksRUFBRSxPQUFPLEVBQUU7QUFDdkMsUUFBSSxnQkFBUyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssVUFBVSxFQUFFO0FBQ3RDLG9CQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDN0IsTUFBTTtBQUNMLFVBQUksT0FBTyxPQUFPLEtBQUssV0FBVyxFQUFFO0FBQ2xDLGNBQU0seUVBQ3dDLElBQUksb0JBQ2pELENBQUM7T0FDSDtBQUNELFVBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDO0tBQy9CO0dBQ0Y7QUFDRCxtQkFBaUIsRUFBRSwyQkFBUyxJQUFJLEVBQUU7QUFDaEMsV0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQzVCOztBQUVELG1CQUFpQixFQUFFLDJCQUFTLElBQUksRUFBRSxFQUFFLEVBQUU7QUFDcEMsUUFBSSxnQkFBUyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssVUFBVSxFQUFFO0FBQ3RDLFVBQUksRUFBRSxFQUFFO0FBQ04sY0FBTSwyQkFBYyw0Q0FBNEMsQ0FBQyxDQUFDO09BQ25FO0FBQ0Qsb0JBQU8sSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUMvQixNQUFNO0FBQ0wsVUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7S0FDNUI7R0FDRjtBQUNELHFCQUFtQixFQUFFLDZCQUFTLElBQUksRUFBRTtBQUNsQyxXQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDOUI7Ozs7O0FBS0QsNkJBQTJCLEVBQUEsdUNBQUc7QUFDNUIsZ0RBQXVCLENBQUM7R0FDekI7Q0FDRixDQUFDOztBQUVLLElBQUksR0FBRyxHQUFHLG9CQUFPLEdBQUcsQ0FBQzs7O1FBRW5CLFdBQVc7UUFBRSxNQUFNIiwiZmlsZSI6ImJhc2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVGcmFtZSwgZXh0ZW5kLCB0b1N0cmluZyB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuL2V4Y2VwdGlvbic7XG5pbXBvcnQgeyByZWdpc3RlckRlZmF1bHRIZWxwZXJzIH0gZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCB7IHJlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnMgfSBmcm9tICcuL2RlY29yYXRvcnMnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyByZXNldExvZ2dlZFByb3BlcnRpZXMgfSBmcm9tICcuL2ludGVybmFsL3Byb3RvLWFjY2Vzcyc7XG5cbmV4cG9ydCBjb25zdCBWRVJTSU9OID0gJzQuNy44JztcbmV4cG9ydCBjb25zdCBDT01QSUxFUl9SRVZJU0lPTiA9IDg7XG5leHBvcnQgY29uc3QgTEFTVF9DT01QQVRJQkxFX0NPTVBJTEVSX1JFVklTSU9OID0gNztcblxuZXhwb3J0IGNvbnN0IFJFVklTSU9OX0NIQU5HRVMgPSB7XG4gIDE6ICc8PSAxLjAucmMuMicsIC8vIDEuMC5yYy4yIGlzIGFjdHVhbGx5IHJldjIgYnV0IGRvZXNuJ3QgcmVwb3J0IGl0XG4gIDI6ICc9PSAxLjAuMC1yYy4zJyxcbiAgMzogJz09IDEuMC4wLXJjLjQnLFxuICA0OiAnPT0gMS54LngnLFxuICA1OiAnPT0gMi4wLjAtYWxwaGEueCcsXG4gIDY6ICc+PSAyLjAuMC1iZXRhLjEnLFxuICA3OiAnPj0gNC4wLjAgPDQuMy4wJyxcbiAgODogJz49IDQuMy4wJ1xufTtcblxuY29uc3Qgb2JqZWN0VHlwZSA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG5leHBvcnQgZnVuY3Rpb24gSGFuZGxlYmFyc0Vudmlyb25tZW50KGhlbHBlcnMsIHBhcnRpYWxzLCBkZWNvcmF0b3JzKSB7XG4gIHRoaXMuaGVscGVycyA9IGhlbHBlcnMgfHwge307XG4gIHRoaXMucGFydGlhbHMgPSBwYXJ0aWFscyB8fCB7fTtcbiAgdGhpcy5kZWNvcmF0b3JzID0gZGVjb3JhdG9ycyB8fCB7fTtcblxuICByZWdpc3RlckRlZmF1bHRIZWxwZXJzKHRoaXMpO1xuICByZWdpc3RlckRlZmF1bHREZWNvcmF0b3JzKHRoaXMpO1xufVxuXG5IYW5kbGViYXJzRW52aXJvbm1lbnQucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogSGFuZGxlYmFyc0Vudmlyb25tZW50LFxuXG4gIGxvZ2dlcjogbG9nZ2VyLFxuICBsb2c6IGxvZ2dlci5sb2csXG5cbiAgcmVnaXN0ZXJIZWxwZXI6IGZ1bmN0aW9uKG5hbWUsIGZuKSB7XG4gICAgaWYgKHRvU3RyaW5nLmNhbGwobmFtZSkgPT09IG9iamVjdFR5cGUpIHtcbiAgICAgIGlmIChmbikge1xuICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdBcmcgbm90IHN1cHBvcnRlZCB3aXRoIG11bHRpcGxlIGhlbHBlcnMnKTtcbiAgICAgIH1cbiAgICAgIGV4dGVuZCh0aGlzLmhlbHBlcnMsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhlbHBlcnNbbmFtZV0gPSBmbjtcbiAgICB9XG4gIH0sXG4gIHVucmVnaXN0ZXJIZWxwZXI6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5oZWxwZXJzW25hbWVdO1xuICB9LFxuXG4gIHJlZ2lzdGVyUGFydGlhbDogZnVuY3Rpb24obmFtZSwgcGFydGlhbCkge1xuICAgIGlmICh0b1N0cmluZy5jYWxsKG5hbWUpID09PSBvYmplY3RUeXBlKSB7XG4gICAgICBleHRlbmQodGhpcy5wYXJ0aWFscywgbmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgcGFydGlhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcbiAgICAgICAgICBgQXR0ZW1wdGluZyB0byByZWdpc3RlciBhIHBhcnRpYWwgY2FsbGVkIFwiJHtuYW1lfVwiIGFzIHVuZGVmaW5lZGBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucGFydGlhbHNbbmFtZV0gPSBwYXJ0aWFsO1xuICAgIH1cbiAgfSxcbiAgdW5yZWdpc3RlclBhcnRpYWw6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5wYXJ0aWFsc1tuYW1lXTtcbiAgfSxcblxuICByZWdpc3RlckRlY29yYXRvcjogZnVuY3Rpb24obmFtZSwgZm4pIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgaWYgKGZuKSB7XG4gICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ0FyZyBub3Qgc3VwcG9ydGVkIHdpdGggbXVsdGlwbGUgZGVjb3JhdG9ycycpO1xuICAgICAgfVxuICAgICAgZXh0ZW5kKHRoaXMuZGVjb3JhdG9ycywgbmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGVjb3JhdG9yc1tuYW1lXSA9IGZuO1xuICAgIH1cbiAgfSxcbiAgdW5yZWdpc3RlckRlY29yYXRvcjogZnVuY3Rpb24obmFtZSkge1xuICAgIGRlbGV0ZSB0aGlzLmRlY29yYXRvcnNbbmFtZV07XG4gIH0sXG4gIC8qKlxuICAgKiBSZXNldCB0aGUgbWVtb3J5IG9mIGlsbGVnYWwgcHJvcGVydHkgYWNjZXNzZXMgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiBsb2dnZWQuXG4gICAqIEBkZXByZWNhdGVkIHNob3VsZCBvbmx5IGJlIHVzZWQgaW4gaGFuZGxlYmFycyB0ZXN0LWNhc2VzXG4gICAqL1xuICByZXNldExvZ2dlZFByb3BlcnR5QWNjZXNzZXMoKSB7XG4gICAgcmVzZXRMb2dnZWRQcm9wZXJ0aWVzKCk7XG4gIH1cbn07XG5cbmV4cG9ydCBsZXQgbG9nID0gbG9nZ2VyLmxvZztcblxuZXhwb3J0IHsgY3JlYXRlRnJhbWUsIGxvZ2dlciB9O1xuIl19


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/compiler/ast.js":
/*!*********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/compiler/ast.js ***!
  \*********************************************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
var AST = {
  // Public API used to evaluate derived attributes regarding AST nodes
  helpers: {
    // a mustache is definitely a helper if:
    // * it is an eligible helper, and
    // * it has at least one parameter or hash segment
    helperExpression: function helperExpression(node) {
      return node.type === 'SubExpression' || (node.type === 'MustacheStatement' || node.type === 'BlockStatement') && !!(node.params && node.params.length || node.hash);
    },

    scopedId: function scopedId(path) {
      return (/^\.|this\b/.test(path.original)
      );
    },

    // an ID is simple if it only has one part, and that part is not
    // `..` or `this`.
    simpleId: function simpleId(path) {
      return path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth;
    }
  }
};

// Must be exported as an object rather than the root of the module as the jison lexer
// must modify the object to operate properly.
exports["default"] = AST;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2NvbXBpbGVyL2FzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxJQUFJLEdBQUcsR0FBRzs7QUFFUixTQUFPLEVBQUU7Ozs7QUFJUCxvQkFBZ0IsRUFBRSwwQkFBUyxJQUFJLEVBQUU7QUFDL0IsYUFDRSxJQUFJLENBQUMsSUFBSSxLQUFLLGVBQWUsSUFDNUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLG1CQUFtQixJQUNqQyxJQUFJLENBQUMsSUFBSSxLQUFLLGdCQUFnQixDQUFBLElBQzlCLENBQUMsRUFBRSxBQUFDLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLElBQUssSUFBSSxDQUFDLElBQUksQ0FBQSxBQUFDLEFBQUMsQ0FDdkQ7S0FDSDs7QUFFRCxZQUFRLEVBQUUsa0JBQVMsSUFBSSxFQUFFO0FBQ3ZCLGFBQU8sYUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQUM7S0FDekM7Ozs7QUFJRCxZQUFRLEVBQUUsa0JBQVMsSUFBSSxFQUFFO0FBQ3ZCLGFBQ0UsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUNyRTtLQUNIO0dBQ0Y7Q0FDRixDQUFDOzs7O3FCQUlhLEdBQUciLCJmaWxlIjoiYXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IEFTVCA9IHtcbiAgLy8gUHVibGljIEFQSSB1c2VkIHRvIGV2YWx1YXRlIGRlcml2ZWQgYXR0cmlidXRlcyByZWdhcmRpbmcgQVNUIG5vZGVzXG4gIGhlbHBlcnM6IHtcbiAgICAvLyBhIG11c3RhY2hlIGlzIGRlZmluaXRlbHkgYSBoZWxwZXIgaWY6XG4gICAgLy8gKiBpdCBpcyBhbiBlbGlnaWJsZSBoZWxwZXIsIGFuZFxuICAgIC8vICogaXQgaGFzIGF0IGxlYXN0IG9uZSBwYXJhbWV0ZXIgb3IgaGFzaCBzZWdtZW50XG4gICAgaGVscGVyRXhwcmVzc2lvbjogZnVuY3Rpb24obm9kZSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgbm9kZS50eXBlID09PSAnU3ViRXhwcmVzc2lvbicgfHxcbiAgICAgICAgKChub2RlLnR5cGUgPT09ICdNdXN0YWNoZVN0YXRlbWVudCcgfHxcbiAgICAgICAgICBub2RlLnR5cGUgPT09ICdCbG9ja1N0YXRlbWVudCcpICYmXG4gICAgICAgICAgISEoKG5vZGUucGFyYW1zICYmIG5vZGUucGFyYW1zLmxlbmd0aCkgfHwgbm9kZS5oYXNoKSlcbiAgICAgICk7XG4gICAgfSxcblxuICAgIHNjb3BlZElkOiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICByZXR1cm4gL15cXC58dGhpc1xcYi8udGVzdChwYXRoLm9yaWdpbmFsKTtcbiAgICB9LFxuXG4gICAgLy8gYW4gSUQgaXMgc2ltcGxlIGlmIGl0IG9ubHkgaGFzIG9uZSBwYXJ0LCBhbmQgdGhhdCBwYXJ0IGlzIG5vdFxuICAgIC8vIGAuLmAgb3IgYHRoaXNgLlxuICAgIHNpbXBsZUlkOiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBwYXRoLnBhcnRzLmxlbmd0aCA9PT0gMSAmJiAhQVNULmhlbHBlcnMuc2NvcGVkSWQocGF0aCkgJiYgIXBhdGguZGVwdGhcbiAgICAgICk7XG4gICAgfVxuICB9XG59O1xuXG4vLyBNdXN0IGJlIGV4cG9ydGVkIGFzIGFuIG9iamVjdCByYXRoZXIgdGhhbiB0aGUgcm9vdCBvZiB0aGUgbW9kdWxlIGFzIHRoZSBqaXNvbiBsZXhlclxuLy8gbXVzdCBtb2RpZnkgdGhlIG9iamVjdCB0byBvcGVyYXRlIHByb3Blcmx5LlxuZXhwb3J0IGRlZmF1bHQgQVNUO1xuIl19


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/compiler/base.js":
/*!**********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/compiler/base.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
exports.parseWithoutProcessing = parseWithoutProcessing;
exports.parse = parse;
// istanbul ignore next

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _parser = __webpack_require__(/*! ./parser */ "./node_modules/handlebars/dist/cjs/handlebars/compiler/parser.js");

var _parser2 = _interopRequireDefault(_parser);

var _whitespaceControl = __webpack_require__(/*! ./whitespace-control */ "./node_modules/handlebars/dist/cjs/handlebars/compiler/whitespace-control.js");

var _whitespaceControl2 = _interopRequireDefault(_whitespaceControl);

var _helpers = __webpack_require__(/*! ./helpers */ "./node_modules/handlebars/dist/cjs/handlebars/compiler/helpers.js");

var Helpers = _interopRequireWildcard(_helpers);

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

exports.parser = _parser2['default'];

var yy = {};
_utils.extend(yy, Helpers);

function parseWithoutProcessing(input, options) {
  // Just return if an already-compiled AST was passed in.
  if (input.type === 'Program') {
    return input;
  }

  _parser2['default'].yy = yy;

  // Altering the shared object here, but this is ok as parser is a sync operation
  yy.locInfo = function (locInfo) {
    return new yy.SourceLocation(options && options.srcName, locInfo);
  };

  var ast = _parser2['default'].parse(input);

  return ast;
}

function parse(input, options) {
  var ast = parseWithoutProcessing(input, options);
  var strip = new _whitespaceControl2['default'](options);

  return strip.accept(ast);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2NvbXBpbGVyL2Jhc2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztzQkFBbUIsVUFBVTs7OztpQ0FDQyxzQkFBc0I7Ozs7dUJBQzNCLFdBQVc7O0lBQXhCLE9BQU87O3FCQUNJLFVBQVU7O1FBRXhCLE1BQU07O0FBRWYsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQ1osY0FBTyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7O0FBRWIsU0FBUyxzQkFBc0IsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFOztBQUVyRCxNQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUFFO0FBQzVCLFdBQU8sS0FBSyxDQUFDO0dBQ2Q7O0FBRUQsc0JBQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQzs7O0FBR2YsSUFBRSxDQUFDLE9BQU8sR0FBRyxVQUFTLE9BQU8sRUFBRTtBQUM3QixXQUFPLElBQUksRUFBRSxDQUFDLGNBQWMsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztHQUNuRSxDQUFDOztBQUVGLE1BQUksR0FBRyxHQUFHLG9CQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQzs7QUFFOUIsU0FBTyxHQUFHLENBQUM7Q0FDWjs7QUFFTSxTQUFTLEtBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFO0FBQ3BDLE1BQUksR0FBRyxHQUFHLHNCQUFzQixDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNqRCxNQUFJLEtBQUssR0FBRyxtQ0FBc0IsT0FBTyxDQUFDLENBQUM7O0FBRTNDLFNBQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMxQiIsImZpbGUiOiJiYXNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhcnNlciBmcm9tICcuL3BhcnNlcic7XG5pbXBvcnQgV2hpdGVzcGFjZUNvbnRyb2wgZnJvbSAnLi93aGl0ZXNwYWNlLWNvbnRyb2wnO1xuaW1wb3J0ICogYXMgSGVscGVycyBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgeyBwYXJzZXIgfTtcblxubGV0IHl5ID0ge307XG5leHRlbmQoeXksIEhlbHBlcnMpO1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VXaXRob3V0UHJvY2Vzc2luZyhpbnB1dCwgb3B0aW9ucykge1xuICAvLyBKdXN0IHJldHVybiBpZiBhbiBhbHJlYWR5LWNvbXBpbGVkIEFTVCB3YXMgcGFzc2VkIGluLlxuICBpZiAoaW5wdXQudHlwZSA9PT0gJ1Byb2dyYW0nKSB7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9XG5cbiAgcGFyc2VyLnl5ID0geXk7XG5cbiAgLy8gQWx0ZXJpbmcgdGhlIHNoYXJlZCBvYmplY3QgaGVyZSwgYnV0IHRoaXMgaXMgb2sgYXMgcGFyc2VyIGlzIGEgc3luYyBvcGVyYXRpb25cbiAgeXkubG9jSW5mbyA9IGZ1bmN0aW9uKGxvY0luZm8pIHtcbiAgICByZXR1cm4gbmV3IHl5LlNvdXJjZUxvY2F0aW9uKG9wdGlvbnMgJiYgb3B0aW9ucy5zcmNOYW1lLCBsb2NJbmZvKTtcbiAgfTtcblxuICBsZXQgYXN0ID0gcGFyc2VyLnBhcnNlKGlucHV0KTtcblxuICByZXR1cm4gYXN0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgbGV0IGFzdCA9IHBhcnNlV2l0aG91dFByb2Nlc3NpbmcoaW5wdXQsIG9wdGlvbnMpO1xuICBsZXQgc3RyaXAgPSBuZXcgV2hpdGVzcGFjZUNvbnRyb2wob3B0aW9ucyk7XG5cbiAgcmV0dXJuIHN0cmlwLmFjY2VwdChhc3QpO1xufVxuIl19


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/compiler/code-gen.js":
/*!**************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/compiler/code-gen.js ***!
  \**************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
/* global define, require */


exports.__esModule = true;

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var SourceNode = undefined;

try {
  /* istanbul ignore next */
  if (false) { var SourceMap; }
} catch (err) {}
/* NOP */

/* istanbul ignore if: tested but not covered in istanbul due to dist build  */
if (!SourceNode) {
  SourceNode = function (line, column, srcFile, chunks) {
    this.src = '';
    if (chunks) {
      this.add(chunks);
    }
  };
  /* istanbul ignore next */
  SourceNode.prototype = {
    add: function add(chunks) {
      if (_utils.isArray(chunks)) {
        chunks = chunks.join('');
      }
      this.src += chunks;
    },
    prepend: function prepend(chunks) {
      if (_utils.isArray(chunks)) {
        chunks = chunks.join('');
      }
      this.src = chunks + this.src;
    },
    toStringWithSourceMap: function toStringWithSourceMap() {
      return { code: this.toString() };
    },
    toString: function toString() {
      return this.src;
    }
  };
}

function castChunk(chunk, codeGen, loc) {
  if (_utils.isArray(chunk)) {
    var ret = [];

    for (var i = 0, len = chunk.length; i < len; i++) {
      ret.push(codeGen.wrap(chunk[i], loc));
    }
    return ret;
  } else if (typeof chunk === 'boolean' || typeof chunk === 'number') {
    // Handle primitives that the SourceNode will throw up on
    return chunk + '';
  }
  return chunk;
}

function CodeGen(srcFile) {
  this.srcFile = srcFile;
  this.source = [];
}

CodeGen.prototype = {
  isEmpty: function isEmpty() {
    return !this.source.length;
  },
  prepend: function prepend(source, loc) {
    this.source.unshift(this.wrap(source, loc));
  },
  push: function push(source, loc) {
    this.source.push(this.wrap(source, loc));
  },

  merge: function merge() {
    var source = this.empty();
    this.each(function (line) {
      source.add(['  ', line, '\n']);
    });
    return source;
  },

  each: function each(iter) {
    for (var i = 0, len = this.source.length; i < len; i++) {
      iter(this.source[i]);
    }
  },

  empty: function empty() {
    var loc = this.currentLocation || { start: {} };
    return new SourceNode(loc.start.line, loc.start.column, this.srcFile);
  },
  wrap: function wrap(chunk) {
    var loc = arguments.length <= 1 || arguments[1] === undefined ? this.currentLocation || { start: {} } : arguments[1];

    if (chunk instanceof SourceNode) {
      return chunk;
    }

    chunk = castChunk(chunk, this, loc);

    return new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk);
  },

  functionCall: function functionCall(fn, type, params) {
    params = this.generateList(params);
    return this.wrap([fn, type ? '.' + type + '(' : '(', params, ')']);
  },

  quotedString: function quotedString(str) {
    return '"' + (str + '').replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\u2028/g, '\\u2028') // Per Ecma-262 7.3 + 7.8.4
    .replace(/\u2029/g, '\\u2029') + '"';
  },

  objectLiteral: function objectLiteral(obj) {
    // istanbul ignore next

    var _this = this;

    var pairs = [];

    Object.keys(obj).forEach(function (key) {
      var value = castChunk(obj[key], _this);
      if (value !== 'undefined') {
        pairs.push([_this.quotedString(key), ':', value]);
      }
    });

    var ret = this.generateList(pairs);
    ret.prepend('{');
    ret.add('}');
    return ret;
  },

  generateList: function generateList(entries) {
    var ret = this.empty();

    for (var i = 0, len = entries.length; i < len; i++) {
      if (i) {
        ret.add(',');
      }

      ret.add(castChunk(entries[i], this));
    }

    return ret;
  },

  generateArray: function generateArray(entries) {
    var ret = this.generateList(entries);
    ret.prepend('[');
    ret.add(']');

    return ret;
  }
};

exports["default"] = CodeGen;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/compiler/compiler.js":
/*!**************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/compiler/compiler.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* eslint-disable new-cap */



exports.__esModule = true;
exports.Compiler = Compiler;
exports.precompile = precompile;
exports.compile = compile;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _exception = __webpack_require__(/*! ../exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _exception2 = _interopRequireDefault(_exception);

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var _ast = __webpack_require__(/*! ./ast */ "./node_modules/handlebars/dist/cjs/handlebars/compiler/ast.js");

var _ast2 = _interopRequireDefault(_ast);

var slice = [].slice;

function Compiler() {}

// the foundHelper register will disambiguate helper lookup from finding a
// function in a context. This is necessary for mustache compatibility, which
// requires that context functions in blocks are evaluated by blockHelperMissing,
// and then proceed as if the resulting value was provided to blockHelperMissing.

Compiler.prototype = {
  compiler: Compiler,

  equals: function equals(other) {
    var len = this.opcodes.length;
    if (other.opcodes.length !== len) {
      return false;
    }

    for (var i = 0; i < len; i++) {
      var opcode = this.opcodes[i],
          otherOpcode = other.opcodes[i];
      if (opcode.opcode !== otherOpcode.opcode || !argEquals(opcode.args, otherOpcode.args)) {
        return false;
      }
    }

    // We know that length is the same between the two arrays because they are directly tied
    // to the opcode behavior above.
    len = this.children.length;
    for (var i = 0; i < len; i++) {
      if (!this.children[i].equals(other.children[i])) {
        return false;
      }
    }

    return true;
  },

  guid: 0,

  compile: function compile(program, options) {
    this.sourceNode = [];
    this.opcodes = [];
    this.children = [];
    this.options = options;
    this.stringParams = options.stringParams;
    this.trackIds = options.trackIds;

    options.blockParams = options.blockParams || [];

    options.knownHelpers = _utils.extend(Object.create(null), {
      helperMissing: true,
      blockHelperMissing: true,
      each: true,
      'if': true,
      unless: true,
      'with': true,
      log: true,
      lookup: true
    }, options.knownHelpers);

    return this.accept(program);
  },

  compileProgram: function compileProgram(program) {
    var childCompiler = new this.compiler(),
        // eslint-disable-line new-cap
    result = childCompiler.compile(program, this.options),
        guid = this.guid++;

    this.usePartial = this.usePartial || result.usePartial;

    this.children[guid] = result;
    this.useDepths = this.useDepths || result.useDepths;

    return guid;
  },

  accept: function accept(node) {
    /* istanbul ignore next: Sanity code */
    if (!this[node.type]) {
      throw new _exception2['default']('Unknown type: ' + node.type, node);
    }

    this.sourceNode.unshift(node);
    var ret = this[node.type](node);
    this.sourceNode.shift();
    return ret;
  },

  Program: function Program(program) {
    this.options.blockParams.unshift(program.blockParams);

    var body = program.body,
        bodyLength = body.length;
    for (var i = 0; i < bodyLength; i++) {
      this.accept(body[i]);
    }

    this.options.blockParams.shift();

    this.isSimple = bodyLength === 1;
    this.blockParams = program.blockParams ? program.blockParams.length : 0;

    return this;
  },

  BlockStatement: function BlockStatement(block) {
    transformLiteralToPath(block);

    var program = block.program,
        inverse = block.inverse;

    program = program && this.compileProgram(program);
    inverse = inverse && this.compileProgram(inverse);

    var type = this.classifySexpr(block);

    if (type === 'helper') {
      this.helperSexpr(block, program, inverse);
    } else if (type === 'simple') {
      this.simpleSexpr(block);

      // now that the simple mustache is resolved, we need to
      // evaluate it by executing `blockHelperMissing`
      this.opcode('pushProgram', program);
      this.opcode('pushProgram', inverse);
      this.opcode('emptyHash');
      this.opcode('blockValue', block.path.original);
    } else {
      this.ambiguousSexpr(block, program, inverse);

      // now that the simple mustache is resolved, we need to
      // evaluate it by executing `blockHelperMissing`
      this.opcode('pushProgram', program);
      this.opcode('pushProgram', inverse);
      this.opcode('emptyHash');
      this.opcode('ambiguousBlockValue');
    }

    this.opcode('append');
  },

  DecoratorBlock: function DecoratorBlock(decorator) {
    var program = decorator.program && this.compileProgram(decorator.program);
    var params = this.setupFullMustacheParams(decorator, program, undefined),
        path = decorator.path;

    this.useDecorators = true;
    this.opcode('registerDecorator', params.length, path.original);
  },

  PartialStatement: function PartialStatement(partial) {
    this.usePartial = true;

    var program = partial.program;
    if (program) {
      program = this.compileProgram(partial.program);
    }

    var params = partial.params;
    if (params.length > 1) {
      throw new _exception2['default']('Unsupported number of partial arguments: ' + params.length, partial);
    } else if (!params.length) {
      if (this.options.explicitPartialContext) {
        this.opcode('pushLiteral', 'undefined');
      } else {
        params.push({ type: 'PathExpression', parts: [], depth: 0 });
      }
    }

    var partialName = partial.name.original,
        isDynamic = partial.name.type === 'SubExpression';
    if (isDynamic) {
      this.accept(partial.name);
    }

    this.setupFullMustacheParams(partial, program, undefined, true);

    var indent = partial.indent || '';
    if (this.options.preventIndent && indent) {
      this.opcode('appendContent', indent);
      indent = '';
    }

    this.opcode('invokePartial', isDynamic, partialName, indent);
    this.opcode('append');
  },
  PartialBlockStatement: function PartialBlockStatement(partialBlock) {
    this.PartialStatement(partialBlock);
  },

  MustacheStatement: function MustacheStatement(mustache) {
    this.SubExpression(mustache);

    if (mustache.escaped && !this.options.noEscape) {
      this.opcode('appendEscaped');
    } else {
      this.opcode('append');
    }
  },
  Decorator: function Decorator(decorator) {
    this.DecoratorBlock(decorator);
  },

  ContentStatement: function ContentStatement(content) {
    if (content.value) {
      this.opcode('appendContent', content.value);
    }
  },

  CommentStatement: function CommentStatement() {},

  SubExpression: function SubExpression(sexpr) {
    transformLiteralToPath(sexpr);
    var type = this.classifySexpr(sexpr);

    if (type === 'simple') {
      this.simpleSexpr(sexpr);
    } else if (type === 'helper') {
      this.helperSexpr(sexpr);
    } else {
      this.ambiguousSexpr(sexpr);
    }
  },
  ambiguousSexpr: function ambiguousSexpr(sexpr, program, inverse) {
    var path = sexpr.path,
        name = path.parts[0],
        isBlock = program != null || inverse != null;

    this.opcode('getContext', path.depth);

    this.opcode('pushProgram', program);
    this.opcode('pushProgram', inverse);

    path.strict = true;
    this.accept(path);

    this.opcode('invokeAmbiguous', name, isBlock);
  },

  simpleSexpr: function simpleSexpr(sexpr) {
    var path = sexpr.path;
    path.strict = true;
    this.accept(path);
    this.opcode('resolvePossibleLambda');
  },

  helperSexpr: function helperSexpr(sexpr, program, inverse) {
    var params = this.setupFullMustacheParams(sexpr, program, inverse),
        path = sexpr.path,
        name = path.parts[0];

    if (this.options.knownHelpers[name]) {
      this.opcode('invokeKnownHelper', params.length, name);
    } else if (this.options.knownHelpersOnly) {
      throw new _exception2['default']('You specified knownHelpersOnly, but used the unknown helper ' + name, sexpr);
    } else {
      path.strict = true;
      path.falsy = true;

      this.accept(path);
      this.opcode('invokeHelper', params.length, path.original, _ast2['default'].helpers.simpleId(path));
    }
  },

  PathExpression: function PathExpression(path) {
    this.addDepth(path.depth);
    this.opcode('getContext', path.depth);

    var name = path.parts[0],
        scoped = _ast2['default'].helpers.scopedId(path),
        blockParamId = !path.depth && !scoped && this.blockParamIndex(name);

    if (blockParamId) {
      this.opcode('lookupBlockParam', blockParamId, path.parts);
    } else if (!name) {
      // Context reference, i.e. `{{foo .}}` or `{{foo ..}}`
      this.opcode('pushContext');
    } else if (path.data) {
      this.options.data = true;
      this.opcode('lookupData', path.depth, path.parts, path.strict);
    } else {
      this.opcode('lookupOnContext', path.parts, path.falsy, path.strict, scoped);
    }
  },

  StringLiteral: function StringLiteral(string) {
    this.opcode('pushString', string.value);
  },

  NumberLiteral: function NumberLiteral(number) {
    this.opcode('pushLiteral', number.value);
  },

  BooleanLiteral: function BooleanLiteral(bool) {
    this.opcode('pushLiteral', bool.value);
  },

  UndefinedLiteral: function UndefinedLiteral() {
    this.opcode('pushLiteral', 'undefined');
  },

  NullLiteral: function NullLiteral() {
    this.opcode('pushLiteral', 'null');
  },

  Hash: function Hash(hash) {
    var pairs = hash.pairs,
        i = 0,
        l = pairs.length;

    this.opcode('pushHash');

    for (; i < l; i++) {
      this.pushParam(pairs[i].value);
    }
    while (i--) {
      this.opcode('assignToHash', pairs[i].key);
    }
    this.opcode('popHash');
  },

  // HELPERS
  opcode: function opcode(name) {
    this.opcodes.push({
      opcode: name,
      args: slice.call(arguments, 1),
      loc: this.sourceNode[0].loc
    });
  },

  addDepth: function addDepth(depth) {
    if (!depth) {
      return;
    }

    this.useDepths = true;
  },

  classifySexpr: function classifySexpr(sexpr) {
    var isSimple = _ast2['default'].helpers.simpleId(sexpr.path);

    var isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);

    // a mustache is an eligible helper if:
    // * its id is simple (a single part, not `this` or `..`)
    var isHelper = !isBlockParam && _ast2['default'].helpers.helperExpression(sexpr);

    // if a mustache is an eligible helper but not a definite
    // helper, it is ambiguous, and will be resolved in a later
    // pass or at runtime.
    var isEligible = !isBlockParam && (isHelper || isSimple);

    // if ambiguous, we can possibly resolve the ambiguity now
    // An eligible helper is one that does not have a complex path, i.e. `this.foo`, `../foo` etc.
    if (isEligible && !isHelper) {
      var _name = sexpr.path.parts[0],
          options = this.options;
      if (options.knownHelpers[_name]) {
        isHelper = true;
      } else if (options.knownHelpersOnly) {
        isEligible = false;
      }
    }

    if (isHelper) {
      return 'helper';
    } else if (isEligible) {
      return 'ambiguous';
    } else {
      return 'simple';
    }
  },

  pushParams: function pushParams(params) {
    for (var i = 0, l = params.length; i < l; i++) {
      this.pushParam(params[i]);
    }
  },

  pushParam: function pushParam(val) {
    var value = val.value != null ? val.value : val.original || '';

    if (this.stringParams) {
      if (value.replace) {
        value = value.replace(/^(\.?\.\/)*/g, '').replace(/\//g, '.');
      }

      if (val.depth) {
        this.addDepth(val.depth);
      }
      this.opcode('getContext', val.depth || 0);
      this.opcode('pushStringParam', value, val.type);

      if (val.type === 'SubExpression') {
        // SubExpressions get evaluated and passed in
        // in string params mode.
        this.accept(val);
      }
    } else {
      if (this.trackIds) {
        var blockParamIndex = undefined;
        if (val.parts && !_ast2['default'].helpers.scopedId(val) && !val.depth) {
          blockParamIndex = this.blockParamIndex(val.parts[0]);
        }
        if (blockParamIndex) {
          var blockParamChild = val.parts.slice(1).join('.');
          this.opcode('pushId', 'BlockParam', blockParamIndex, blockParamChild);
        } else {
          value = val.original || value;
          if (value.replace) {
            value = value.replace(/^this(?:\.|$)/, '').replace(/^\.\//, '').replace(/^\.$/, '');
          }

          this.opcode('pushId', val.type, value);
        }
      }
      this.accept(val);
    }
  },

  setupFullMustacheParams: function setupFullMustacheParams(sexpr, program, inverse, omitEmpty) {
    var params = sexpr.params;
    this.pushParams(params);

    this.opcode('pushProgram', program);
    this.opcode('pushProgram', inverse);

    if (sexpr.hash) {
      this.accept(sexpr.hash);
    } else {
      this.opcode('emptyHash', omitEmpty);
    }

    return params;
  },

  blockParamIndex: function blockParamIndex(name) {
    for (var depth = 0, len = this.options.blockParams.length; depth < len; depth++) {
      var blockParams = this.options.blockParams[depth],
          param = blockParams && _utils.indexOf(blockParams, name);
      if (blockParams && param >= 0) {
        return [depth, param];
      }
    }
  }
};

function precompile(input, options, env) {
  if (input == null || typeof input !== 'string' && input.type !== 'Program') {
    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.precompile. You passed ' + input);
  }

  options = options || {};
  if (!('data' in options)) {
    options.data = true;
  }
  if (options.compat) {
    options.useDepths = true;
  }

  var ast = env.parse(input, options),
      environment = new env.Compiler().compile(ast, options);
  return new env.JavaScriptCompiler().compile(environment, options);
}

function compile(input, options, env) {
  if (options === undefined) options = {};

  if (input == null || typeof input !== 'string' && input.type !== 'Program') {
    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.compile. You passed ' + input);
  }

  options = _utils.extend({}, options);
  if (!('data' in options)) {
    options.data = true;
  }
  if (options.compat) {
    options.useDepths = true;
  }

  var compiled = undefined;

  function compileInput() {
    var ast = env.parse(input, options),
        environment = new env.Compiler().compile(ast, options),
        templateSpec = new env.JavaScriptCompiler().compile(environment, options, undefined, true);
    return env.template(templateSpec);
  }

  // Template is only compiled on first use and cached after that point.
  function ret(context, execOptions) {
    if (!compiled) {
      compiled = compileInput();
    }
    return compiled.call(this, context, execOptions);
  }
  ret._setup = function (setupOptions) {
    if (!compiled) {
      compiled = compileInput();
    }
    return compiled._setup(setupOptions);
  };
  ret._child = function (i, data, blockParams, depths) {
    if (!compiled) {
      compiled = compileInput();
    }
    return compiled._child(i, data, blockParams, depths);
  };
  return ret;
}

function argEquals(a, b) {
  if (a === b) {
    return true;
  }

  if (_utils.isArray(a) && _utils.isArray(b) && a.length === b.length) {
    for (var i = 0; i < a.length; i++) {
      if (!argEquals(a[i], b[i])) {
        return false;
      }
    }
    return true;
  }
}

function transformLiteralToPath(sexpr) {
  if (!sexpr.path.parts) {
    var literal = sexpr.path;
    // Casting to string here to make false and 0 literal values play nicely with the rest
    // of the system.
    sexpr.path = {
      type: 'PathExpression',
      data: false,
      depth: 0,
      parts: [literal.original + ''],
      original: literal.original + '',
      loc: literal.loc
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/compiler/helpers.js":
/*!*************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/compiler/helpers.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
exports.SourceLocation = SourceLocation;
exports.id = id;
exports.stripFlags = stripFlags;
exports.stripComment = stripComment;
exports.preparePath = preparePath;
exports.prepareMustache = prepareMustache;
exports.prepareRawBlock = prepareRawBlock;
exports.prepareBlock = prepareBlock;
exports.prepareProgram = prepareProgram;
exports.preparePartialBlock = preparePartialBlock;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _exception = __webpack_require__(/*! ../exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _exception2 = _interopRequireDefault(_exception);

function validateClose(open, close) {
  close = close.path ? close.path.original : close;

  if (open.path.original !== close) {
    var errorNode = { loc: open.path.loc };

    throw new _exception2['default'](open.path.original + " doesn't match " + close, errorNode);
  }
}

function SourceLocation(source, locInfo) {
  this.source = source;
  this.start = {
    line: locInfo.first_line,
    column: locInfo.first_column
  };
  this.end = {
    line: locInfo.last_line,
    column: locInfo.last_column
  };
}

function id(token) {
  if (/^\[.*\]$/.test(token)) {
    return token.substring(1, token.length - 1);
  } else {
    return token;
  }
}

function stripFlags(open, close) {
  return {
    open: open.charAt(2) === '~',
    close: close.charAt(close.length - 3) === '~'
  };
}

function stripComment(comment) {
  return comment.replace(/^\{\{~?!-?-?/, '').replace(/-?-?~?\}\}$/, '');
}

function preparePath(data, parts, loc) {
  loc = this.locInfo(loc);

  var original = data ? '@' : '',
      dig = [],
      depth = 0;

  for (var i = 0, l = parts.length; i < l; i++) {
    var part = parts[i].part,

    // If we have [] syntax then we do not treat path references as operators,
    // i.e. foo.[this] resolves to approximately context.foo['this']
    isLiteral = parts[i].original !== part;
    original += (parts[i].separator || '') + part;

    if (!isLiteral && (part === '..' || part === '.' || part === 'this')) {
      if (dig.length > 0) {
        throw new _exception2['default']('Invalid path: ' + original, { loc: loc });
      } else if (part === '..') {
        depth++;
      }
    } else {
      dig.push(part);
    }
  }

  return {
    type: 'PathExpression',
    data: data,
    depth: depth,
    parts: dig,
    original: original,
    loc: loc
  };
}

function prepareMustache(path, params, hash, open, strip, locInfo) {
  // Must use charAt to support IE pre-10
  var escapeFlag = open.charAt(3) || open.charAt(2),
      escaped = escapeFlag !== '{' && escapeFlag !== '&';

  var decorator = /\*/.test(open);
  return {
    type: decorator ? 'Decorator' : 'MustacheStatement',
    path: path,
    params: params,
    hash: hash,
    escaped: escaped,
    strip: strip,
    loc: this.locInfo(locInfo)
  };
}

function prepareRawBlock(openRawBlock, contents, close, locInfo) {
  validateClose(openRawBlock, close);

  locInfo = this.locInfo(locInfo);
  var program = {
    type: 'Program',
    body: contents,
    strip: {},
    loc: locInfo
  };

  return {
    type: 'BlockStatement',
    path: openRawBlock.path,
    params: openRawBlock.params,
    hash: openRawBlock.hash,
    program: program,
    openStrip: {},
    inverseStrip: {},
    closeStrip: {},
    loc: locInfo
  };
}

function prepareBlock(openBlock, program, inverseAndProgram, close, inverted, locInfo) {
  if (close && close.path) {
    validateClose(openBlock, close);
  }

  var decorator = /\*/.test(openBlock.open);

  program.blockParams = openBlock.blockParams;

  var inverse = undefined,
      inverseStrip = undefined;

  if (inverseAndProgram) {
    if (decorator) {
      throw new _exception2['default']('Unexpected inverse block on decorator', inverseAndProgram);
    }

    if (inverseAndProgram.chain) {
      inverseAndProgram.program.body[0].closeStrip = close.strip;
    }

    inverseStrip = inverseAndProgram.strip;
    inverse = inverseAndProgram.program;
  }

  if (inverted) {
    inverted = inverse;
    inverse = program;
    program = inverted;
  }

  return {
    type: decorator ? 'DecoratorBlock' : 'BlockStatement',
    path: openBlock.path,
    params: openBlock.params,
    hash: openBlock.hash,
    program: program,
    inverse: inverse,
    openStrip: openBlock.strip,
    inverseStrip: inverseStrip,
    closeStrip: close && close.strip,
    loc: this.locInfo(locInfo)
  };
}

function prepareProgram(statements, loc) {
  if (!loc && statements.length) {
    var firstLoc = statements[0].loc,
        lastLoc = statements[statements.length - 1].loc;

    /* istanbul ignore else */
    if (firstLoc && lastLoc) {
      loc = {
        source: firstLoc.source,
        start: {
          line: firstLoc.start.line,
          column: firstLoc.start.column
        },
        end: {
          line: lastLoc.end.line,
          column: lastLoc.end.column
        }
      };
    }
  }

  return {
    type: 'Program',
    body: statements,
    strip: {},
    loc: loc
  };
}

function preparePartialBlock(open, program, close, locInfo) {
  validateClose(open, close);

  return {
    type: 'PartialBlockStatement',
    name: open.path,
    params: open.params,
    hash: open.hash,
    program: program,
    openStrip: open.strip,
    closeStrip: close && close.strip,
    loc: this.locInfo(locInfo)
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/compiler/javascript-compiler.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/compiler/javascript-compiler.js ***!
  \*************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _base = __webpack_require__(/*! ../base */ "./node_modules/handlebars/dist/cjs/handlebars/base.js");

var _exception = __webpack_require__(/*! ../exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _exception2 = _interopRequireDefault(_exception);

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var _codeGen = __webpack_require__(/*! ./code-gen */ "./node_modules/handlebars/dist/cjs/handlebars/compiler/code-gen.js");

var _codeGen2 = _interopRequireDefault(_codeGen);

function Literal(value) {
  this.value = value;
}

function JavaScriptCompiler() {}

JavaScriptCompiler.prototype = {
  // PUBLIC API: You can override these methods in a subclass to provide
  // alternative compiled forms for name lookup and buffering semantics
  nameLookup: function nameLookup(parent, name /*,  type */) {
    return this.internalNameLookup(parent, name);
  },
  depthedLookup: function depthedLookup(name) {
    return [this.aliasable('container.lookup'), '(depths, ', JSON.stringify(name), ')'];
  },

  compilerInfo: function compilerInfo() {
    var revision = _base.COMPILER_REVISION,
        versions = _base.REVISION_CHANGES[revision];
    return [revision, versions];
  },

  appendToBuffer: function appendToBuffer(source, location, explicit) {
    // Force a source as this simplifies the merge logic.
    if (!_utils.isArray(source)) {
      source = [source];
    }
    source = this.source.wrap(source, location);

    if (this.environment.isSimple) {
      return ['return ', source, ';'];
    } else if (explicit) {
      // This is a case where the buffer operation occurs as a child of another
      // construct, generally braces. We have to explicitly output these buffer
      // operations to ensure that the emitted code goes in the correct location.
      return ['buffer += ', source, ';'];
    } else {
      source.appendToBuffer = true;
      return source;
    }
  },

  initializeBuffer: function initializeBuffer() {
    return this.quotedString('');
  },
  // END PUBLIC API
  internalNameLookup: function internalNameLookup(parent, name) {
    this.lookupPropertyFunctionIsUsed = true;
    return ['lookupProperty(', parent, ',', JSON.stringify(name), ')'];
  },

  lookupPropertyFunctionIsUsed: false,

  compile: function compile(environment, options, context, asObject) {
    this.environment = environment;
    this.options = options;
    this.stringParams = this.options.stringParams;
    this.trackIds = this.options.trackIds;
    this.precompile = !asObject;

    this.name = this.environment.name;
    this.isChild = !!context;
    this.context = context || {
      decorators: [],
      programs: [],
      environments: []
    };

    this.preamble();

    this.stackSlot = 0;
    this.stackVars = [];
    this.aliases = {};
    this.registers = { list: [] };
    this.hashes = [];
    this.compileStack = [];
    this.inlineStack = [];
    this.blockParams = [];

    this.compileChildren(environment, options);

    this.useDepths = this.useDepths || environment.useDepths || environment.useDecorators || this.options.compat;
    this.useBlockParams = this.useBlockParams || environment.useBlockParams;

    var opcodes = environment.opcodes,
        opcode = undefined,
        firstLoc = undefined,
        i = undefined,
        l = undefined;

    for (i = 0, l = opcodes.length; i < l; i++) {
      opcode = opcodes[i];

      this.source.currentLocation = opcode.loc;
      firstLoc = firstLoc || opcode.loc;
      this[opcode.opcode].apply(this, opcode.args);
    }

    // Flush any trailing content that might be pending.
    this.source.currentLocation = firstLoc;
    this.pushSource('');

    /* istanbul ignore next */
    if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {
      throw new _exception2['default']('Compile completed with content left on stack');
    }

    if (!this.decorators.isEmpty()) {
      this.useDecorators = true;

      this.decorators.prepend(['var decorators = container.decorators, ', this.lookupPropertyFunctionVarDeclaration(), ';\n']);
      this.decorators.push('return fn;');

      if (asObject) {
        this.decorators = Function.apply(this, ['fn', 'props', 'container', 'depth0', 'data', 'blockParams', 'depths', this.decorators.merge()]);
      } else {
        this.decorators.prepend('function(fn, props, container, depth0, data, blockParams, depths) {\n');
        this.decorators.push('}\n');
        this.decorators = this.decorators.merge();
      }
    } else {
      this.decorators = undefined;
    }

    var fn = this.createFunctionContext(asObject);
    if (!this.isChild) {
      var ret = {
        compiler: this.compilerInfo(),
        main: fn
      };

      if (this.decorators) {
        ret.main_d = this.decorators; // eslint-disable-line camelcase
        ret.useDecorators = true;
      }

      var _context = this.context;
      var programs = _context.programs;
      var decorators = _context.decorators;

      for (i = 0, l = programs.length; i < l; i++) {
        if (programs[i]) {
          ret[i] = programs[i];
          if (decorators[i]) {
            ret[i + '_d'] = decorators[i];
            ret.useDecorators = true;
          }
        }
      }

      if (this.environment.usePartial) {
        ret.usePartial = true;
      }
      if (this.options.data) {
        ret.useData = true;
      }
      if (this.useDepths) {
        ret.useDepths = true;
      }
      if (this.useBlockParams) {
        ret.useBlockParams = true;
      }
      if (this.options.compat) {
        ret.compat = true;
      }

      if (!asObject) {
        ret.compiler = JSON.stringify(ret.compiler);

        this.source.currentLocation = { start: { line: 1, column: 0 } };
        ret = this.objectLiteral(ret);

        if (options.srcName) {
          ret = ret.toStringWithSourceMap({ file: options.destName });
          ret.map = ret.map && ret.map.toString();
        } else {
          ret = ret.toString();
        }
      } else {
        ret.compilerOptions = this.options;
      }

      return ret;
    } else {
      return fn;
    }
  },

  preamble: function preamble() {
    // track the last context pushed into place to allow skipping the
    // getContext opcode when it would be a noop
    this.lastContext = 0;
    this.source = new _codeGen2['default'](this.options.srcName);
    this.decorators = new _codeGen2['default'](this.options.srcName);
  },

  createFunctionContext: function createFunctionContext(asObject) {
    // istanbul ignore next

    var _this = this;

    var varDeclarations = '';

    var locals = this.stackVars.concat(this.registers.list);
    if (locals.length > 0) {
      varDeclarations += ', ' + locals.join(', ');
    }

    // Generate minimizer alias mappings
    //
    // When using true SourceNodes, this will update all references to the given alias
    // as the source nodes are reused in situ. For the non-source node compilation mode,
    // aliases will not be used, but this case is already being run on the client and
    // we aren't concern about minimizing the template size.
    var aliasCount = 0;
    Object.keys(this.aliases).forEach(function (alias) {
      var node = _this.aliases[alias];
      if (node.children && node.referenceCount > 1) {
        varDeclarations += ', alias' + ++aliasCount + '=' + alias;
        node.children[0] = 'alias' + aliasCount;
      }
    });

    if (this.lookupPropertyFunctionIsUsed) {
      varDeclarations += ', ' + this.lookupPropertyFunctionVarDeclaration();
    }

    var params = ['container', 'depth0', 'helpers', 'partials', 'data'];

    if (this.useBlockParams || this.useDepths) {
      params.push('blockParams');
    }
    if (this.useDepths) {
      params.push('depths');
    }

    // Perform a second pass over the output to merge content when possible
    var source = this.mergeSource(varDeclarations);

    if (asObject) {
      params.push(source);

      return Function.apply(this, params);
    } else {
      return this.source.wrap(['function(', params.join(','), ') {\n  ', source, '}']);
    }
  },
  mergeSource: function mergeSource(varDeclarations) {
    var isSimple = this.environment.isSimple,
        appendOnly = !this.forceBuffer,
        appendFirst = undefined,
        sourceSeen = undefined,
        bufferStart = undefined,
        bufferEnd = undefined;
    this.source.each(function (line) {
      if (line.appendToBuffer) {
        if (bufferStart) {
          line.prepend('  + ');
        } else {
          bufferStart = line;
        }
        bufferEnd = line;
      } else {
        if (bufferStart) {
          if (!sourceSeen) {
            appendFirst = true;
          } else {
            bufferStart.prepend('buffer += ');
          }
          bufferEnd.add(';');
          bufferStart = bufferEnd = undefined;
        }

        sourceSeen = true;
        if (!isSimple) {
          appendOnly = false;
        }
      }
    });

    if (appendOnly) {
      if (bufferStart) {
        bufferStart.prepend('return ');
        bufferEnd.add(';');
      } else if (!sourceSeen) {
        this.source.push('return "";');
      }
    } else {
      varDeclarations += ', buffer = ' + (appendFirst ? '' : this.initializeBuffer());

      if (bufferStart) {
        bufferStart.prepend('return buffer + ');
        bufferEnd.add(';');
      } else {
        this.source.push('return buffer;');
      }
    }

    if (varDeclarations) {
      this.source.prepend('var ' + varDeclarations.substring(2) + (appendFirst ? '' : ';\n'));
    }

    return this.source.merge();
  },

  lookupPropertyFunctionVarDeclaration: function lookupPropertyFunctionVarDeclaration() {
    return '\n      lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    }\n    '.trim();
  },

  // [blockValue]
  //
  // On stack, before: hash, inverse, program, value
  // On stack, after: return value of blockHelperMissing
  //
  // The purpose of this opcode is to take a block of the form
  // `{{#this.foo}}...{{/this.foo}}`, resolve the value of `foo`, and
  // replace it on the stack with the result of properly
  // invoking blockHelperMissing.
  blockValue: function blockValue(name) {
    var blockHelperMissing = this.aliasable('container.hooks.blockHelperMissing'),
        params = [this.contextName(0)];
    this.setupHelperArgs(name, 0, params);

    var blockName = this.popStack();
    params.splice(1, 0, blockName);

    this.push(this.source.functionCall(blockHelperMissing, 'call', params));
  },

  // [ambiguousBlockValue]
  //
  // On stack, before: hash, inverse, program, value
  // Compiler value, before: lastHelper=value of last found helper, if any
  // On stack, after, if no lastHelper: same as [blockValue]
  // On stack, after, if lastHelper: value
  ambiguousBlockValue: function ambiguousBlockValue() {
    // We're being a bit cheeky and reusing the options value from the prior exec
    var blockHelperMissing = this.aliasable('container.hooks.blockHelperMissing'),
        params = [this.contextName(0)];
    this.setupHelperArgs('', 0, params, true);

    this.flushInline();

    var current = this.topStack();
    params.splice(1, 0, current);

    this.pushSource(['if (!', this.lastHelper, ') { ', current, ' = ', this.source.functionCall(blockHelperMissing, 'call', params), '}']);
  },

  // [appendContent]
  //
  // On stack, before: ...
  // On stack, after: ...
  //
  // Appends the string value of `content` to the current buffer
  appendContent: function appendContent(content) {
    if (this.pendingContent) {
      content = this.pendingContent + content;
    } else {
      this.pendingLocation = this.source.currentLocation;
    }

    this.pendingContent = content;
  },

  // [append]
  //
  // On stack, before: value, ...
  // On stack, after: ...
  //
  // Coerces `value` to a String and appends it to the current buffer.
  //
  // If `value` is truthy, or 0, it is coerced into a string and appended
  // Otherwise, the empty string is appended
  append: function append() {
    if (this.isInline()) {
      this.replaceStack(function (current) {
        return [' != null ? ', current, ' : ""'];
      });

      this.pushSource(this.appendToBuffer(this.popStack()));
    } else {
      var local = this.popStack();
      this.pushSource(['if (', local, ' != null) { ', this.appendToBuffer(local, undefined, true), ' }']);
      if (this.environment.isSimple) {
        this.pushSource(['else { ', this.appendToBuffer("''", undefined, true), ' }']);
      }
    }
  },

  // [appendEscaped]
  //
  // On stack, before: value, ...
  // On stack, after: ...
  //
  // Escape `value` and append it to the buffer
  appendEscaped: function appendEscaped() {
    this.pushSource(this.appendToBuffer([this.aliasable('container.escapeExpression'), '(', this.popStack(), ')']));
  },

  // [getContext]
  //
  // On stack, before: ...
  // On stack, after: ...
  // Compiler value, after: lastContext=depth
  //
  // Set the value of the `lastContext` compiler value to the depth
  getContext: function getContext(depth) {
    this.lastContext = depth;
  },

  // [pushContext]
  //
  // On stack, before: ...
  // On stack, after: currentContext, ...
  //
  // Pushes the value of the current context onto the stack.
  pushContext: function pushContext() {
    this.pushStackLiteral(this.contextName(this.lastContext));
  },

  // [lookupOnContext]
  //
  // On stack, before: ...
  // On stack, after: currentContext[name], ...
  //
  // Looks up the value of `name` on the current context and pushes
  // it onto the stack.
  lookupOnContext: function lookupOnContext(parts, falsy, strict, scoped) {
    var i = 0;

    if (!scoped && this.options.compat && !this.lastContext) {
      // The depthed query is expected to handle the undefined logic for the root level that
      // is implemented below, so we evaluate that directly in compat mode
      this.push(this.depthedLookup(parts[i++]));
    } else {
      this.pushContext();
    }

    this.resolvePath('context', parts, i, falsy, strict);
  },

  // [lookupBlockParam]
  //
  // On stack, before: ...
  // On stack, after: blockParam[name], ...
  //
  // Looks up the value of `parts` on the given block param and pushes
  // it onto the stack.
  lookupBlockParam: function lookupBlockParam(blockParamId, parts) {
    this.useBlockParams = true;

    this.push(['blockParams[', blockParamId[0], '][', blockParamId[1], ']']);
    this.resolvePath('context', parts, 1);
  },

  // [lookupData]
  //
  // On stack, before: ...
  // On stack, after: data, ...
  //
  // Push the data lookup operator
  lookupData: function lookupData(depth, parts, strict) {
    if (!depth) {
      this.pushStackLiteral('data');
    } else {
      this.pushStackLiteral('container.data(data, ' + depth + ')');
    }

    this.resolvePath('data', parts, 0, true, strict);
  },

  resolvePath: function resolvePath(type, parts, i, falsy, strict) {
    // istanbul ignore next

    var _this2 = this;

    if (this.options.strict || this.options.assumeObjects) {
      this.push(strictLookup(this.options.strict && strict, this, parts, i, type));
      return;
    }

    var len = parts.length;
    for (; i < len; i++) {
      /* eslint-disable no-loop-func */
      this.replaceStack(function (current) {
        var lookup = _this2.nameLookup(current, parts[i], type);
        // We want to ensure that zero and false are handled properly if the context (falsy flag)
        // needs to have the special handling for these values.
        if (!falsy) {
          return [' != null ? ', lookup, ' : ', current];
        } else {
          // Otherwise we can use generic falsy handling
          return [' && ', lookup];
        }
      });
      /* eslint-enable no-loop-func */
    }
  },

  // [resolvePossibleLambda]
  //
  // On stack, before: value, ...
  // On stack, after: resolved value, ...
  //
  // If the `value` is a lambda, replace it on the stack by
  // the return value of the lambda
  resolvePossibleLambda: function resolvePossibleLambda() {
    this.push([this.aliasable('container.lambda'), '(', this.popStack(), ', ', this.contextName(0), ')']);
  },

  // [pushStringParam]
  //
  // On stack, before: ...
  // On stack, after: string, currentContext, ...
  //
  // This opcode is designed for use in string mode, which
  // provides the string value of a parameter along with its
  // depth rather than resolving it immediately.
  pushStringParam: function pushStringParam(string, type) {
    this.pushContext();
    this.pushString(type);

    // If it's a subexpression, the string result
    // will be pushed after this opcode.
    if (type !== 'SubExpression') {
      if (typeof string === 'string') {
        this.pushString(string);
      } else {
        this.pushStackLiteral(string);
      }
    }
  },

  emptyHash: function emptyHash(omitEmpty) {
    if (this.trackIds) {
      this.push('{}'); // hashIds
    }
    if (this.stringParams) {
      this.push('{}'); // hashContexts
      this.push('{}'); // hashTypes
    }
    this.pushStackLiteral(omitEmpty ? 'undefined' : '{}');
  },
  pushHash: function pushHash() {
    if (this.hash) {
      this.hashes.push(this.hash);
    }
    this.hash = { values: {}, types: [], contexts: [], ids: [] };
  },
  popHash: function popHash() {
    var hash = this.hash;
    this.hash = this.hashes.pop();

    if (this.trackIds) {
      this.push(this.objectLiteral(hash.ids));
    }
    if (this.stringParams) {
      this.push(this.objectLiteral(hash.contexts));
      this.push(this.objectLiteral(hash.types));
    }

    this.push(this.objectLiteral(hash.values));
  },

  // [pushString]
  //
  // On stack, before: ...
  // On stack, after: quotedString(string), ...
  //
  // Push a quoted version of `string` onto the stack
  pushString: function pushString(string) {
    this.pushStackLiteral(this.quotedString(string));
  },

  // [pushLiteral]
  //
  // On stack, before: ...
  // On stack, after: value, ...
  //
  // Pushes a value onto the stack. This operation prevents
  // the compiler from creating a temporary variable to hold
  // it.
  pushLiteral: function pushLiteral(value) {
    this.pushStackLiteral(value);
  },

  // [pushProgram]
  //
  // On stack, before: ...
  // On stack, after: program(guid), ...
  //
  // Push a program expression onto the stack. This takes
  // a compile-time guid and converts it into a runtime-accessible
  // expression.
  pushProgram: function pushProgram(guid) {
    if (guid != null) {
      this.pushStackLiteral(this.programExpression(guid));
    } else {
      this.pushStackLiteral(null);
    }
  },

  // [registerDecorator]
  //
  // On stack, before: hash, program, params..., ...
  // On stack, after: ...
  //
  // Pops off the decorator's parameters, invokes the decorator,
  // and inserts the decorator into the decorators list.
  registerDecorator: function registerDecorator(paramSize, name) {
    var foundDecorator = this.nameLookup('decorators', name, 'decorator'),
        options = this.setupHelperArgs(name, paramSize);

    this.decorators.push(['fn = ', this.decorators.functionCall(foundDecorator, '', ['fn', 'props', 'container', options]), ' || fn;']);
  },

  // [invokeHelper]
  //
  // On stack, before: hash, inverse, program, params..., ...
  // On stack, after: result of helper invocation
  //
  // Pops off the helper's parameters, invokes the helper,
  // and pushes the helper's return value onto the stack.
  //
  // If the helper is not found, `helperMissing` is called.
  invokeHelper: function invokeHelper(paramSize, name, isSimple) {
    var nonHelper = this.popStack(),
        helper = this.setupHelper(paramSize, name);

    var possibleFunctionCalls = [];

    if (isSimple) {
      // direct call to helper
      possibleFunctionCalls.push(helper.name);
    }
    // call a function from the input object
    possibleFunctionCalls.push(nonHelper);
    if (!this.options.strict) {
      possibleFunctionCalls.push(this.aliasable('container.hooks.helperMissing'));
    }

    var functionLookupCode = ['(', this.itemsSeparatedBy(possibleFunctionCalls, '||'), ')'];
    var functionCall = this.source.functionCall(functionLookupCode, 'call', helper.callParams);
    this.push(functionCall);
  },

  itemsSeparatedBy: function itemsSeparatedBy(items, separator) {
    var result = [];
    result.push(items[0]);
    for (var i = 1; i < items.length; i++) {
      result.push(separator, items[i]);
    }
    return result;
  },
  // [invokeKnownHelper]
  //
  // On stack, before: hash, inverse, program, params..., ...
  // On stack, after: result of helper invocation
  //
  // This operation is used when the helper is known to exist,
  // so a `helperMissing` fallback is not required.
  invokeKnownHelper: function invokeKnownHelper(paramSize, name) {
    var helper = this.setupHelper(paramSize, name);
    this.push(this.source.functionCall(helper.name, 'call', helper.callParams));
  },

  // [invokeAmbiguous]
  //
  // On stack, before: hash, inverse, program, params..., ...
  // On stack, after: result of disambiguation
  //
  // This operation is used when an expression like `{{foo}}`
  // is provided, but we don't know at compile-time whether it
  // is a helper or a path.
  //
  // This operation emits more code than the other options,
  // and can be avoided by passing the `knownHelpers` and
  // `knownHelpersOnly` flags at compile-time.
  invokeAmbiguous: function invokeAmbiguous(name, helperCall) {
    this.useRegister('helper');

    var nonHelper = this.popStack();

    this.emptyHash();
    var helper = this.setupHelper(0, name, helperCall);

    var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');

    var lookup = ['(', '(helper = ', helperName, ' || ', nonHelper, ')'];
    if (!this.options.strict) {
      lookup[0] = '(helper = ';
      lookup.push(' != null ? helper : ', this.aliasable('container.hooks.helperMissing'));
    }

    this.push(['(', lookup, helper.paramsInit ? ['),(', helper.paramsInit] : [], '),', '(typeof helper === ', this.aliasable('"function"'), ' ? ', this.source.functionCall('helper', 'call', helper.callParams), ' : helper))']);
  },

  // [invokePartial]
  //
  // On stack, before: context, ...
  // On stack after: result of partial invocation
  //
  // This operation pops off a context, invokes a partial with that context,
  // and pushes the result of the invocation back.
  invokePartial: function invokePartial(isDynamic, name, indent) {
    var params = [],
        options = this.setupParams(name, 1, params);

    if (isDynamic) {
      name = this.popStack();
      delete options.name;
    }

    if (indent) {
      options.indent = JSON.stringify(indent);
    }
    options.helpers = 'helpers';
    options.partials = 'partials';
    options.decorators = 'container.decorators';

    if (!isDynamic) {
      params.unshift(this.nameLookup('partials', name, 'partial'));
    } else {
      params.unshift(name);
    }

    if (this.options.compat) {
      options.depths = 'depths';
    }
    options = this.objectLiteral(options);
    params.push(options);

    this.push(this.source.functionCall('container.invokePartial', '', params));
  },

  // [assignToHash]
  //
  // On stack, before: value, ..., hash, ...
  // On stack, after: ..., hash, ...
  //
  // Pops a value off the stack and assigns it to the current hash
  assignToHash: function assignToHash(key) {
    var value = this.popStack(),
        context = undefined,
        type = undefined,
        id = undefined;

    if (this.trackIds) {
      id = this.popStack();
    }
    if (this.stringParams) {
      type = this.popStack();
      context = this.popStack();
    }

    var hash = this.hash;
    if (context) {
      hash.contexts[key] = context;
    }
    if (type) {
      hash.types[key] = type;
    }
    if (id) {
      hash.ids[key] = id;
    }
    hash.values[key] = value;
  },

  pushId: function pushId(type, name, child) {
    if (type === 'BlockParam') {
      this.pushStackLiteral('blockParams[' + name[0] + '].path[' + name[1] + ']' + (child ? ' + ' + JSON.stringify('.' + child) : ''));
    } else if (type === 'PathExpression') {
      this.pushString(name);
    } else if (type === 'SubExpression') {
      this.pushStackLiteral('true');
    } else {
      this.pushStackLiteral('null');
    }
  },

  // HELPERS

  compiler: JavaScriptCompiler,

  compileChildren: function compileChildren(environment, options) {
    var children = environment.children,
        child = undefined,
        compiler = undefined;

    for (var i = 0, l = children.length; i < l; i++) {
      child = children[i];
      compiler = new this.compiler(); // eslint-disable-line new-cap

      var existing = this.matchExistingProgram(child);

      if (existing == null) {
        this.context.programs.push(''); // Placeholder to prevent name conflicts for nested children
        var index = this.context.programs.length;
        child.index = index;
        child.name = 'program' + index;
        this.context.programs[index] = compiler.compile(child, options, this.context, !this.precompile);
        this.context.decorators[index] = compiler.decorators;
        this.context.environments[index] = child;

        this.useDepths = this.useDepths || compiler.useDepths;
        this.useBlockParams = this.useBlockParams || compiler.useBlockParams;
        child.useDepths = this.useDepths;
        child.useBlockParams = this.useBlockParams;
      } else {
        child.index = existing.index;
        child.name = 'program' + existing.index;

        this.useDepths = this.useDepths || existing.useDepths;
        this.useBlockParams = this.useBlockParams || existing.useBlockParams;
      }
    }
  },
  matchExistingProgram: function matchExistingProgram(child) {
    for (var i = 0, len = this.context.environments.length; i < len; i++) {
      var environment = this.context.environments[i];
      if (environment && environment.equals(child)) {
        return environment;
      }
    }
  },

  programExpression: function programExpression(guid) {
    var child = this.environment.children[guid],
        programParams = [child.index, 'data', child.blockParams];

    if (this.useBlockParams || this.useDepths) {
      programParams.push('blockParams');
    }
    if (this.useDepths) {
      programParams.push('depths');
    }

    return 'container.program(' + programParams.join(', ') + ')';
  },

  useRegister: function useRegister(name) {
    if (!this.registers[name]) {
      this.registers[name] = true;
      this.registers.list.push(name);
    }
  },

  push: function push(expr) {
    if (!(expr instanceof Literal)) {
      expr = this.source.wrap(expr);
    }

    this.inlineStack.push(expr);
    return expr;
  },

  pushStackLiteral: function pushStackLiteral(item) {
    this.push(new Literal(item));
  },

  pushSource: function pushSource(source) {
    if (this.pendingContent) {
      this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation));
      this.pendingContent = undefined;
    }

    if (source) {
      this.source.push(source);
    }
  },

  replaceStack: function replaceStack(callback) {
    var prefix = ['('],
        stack = undefined,
        createdStack = undefined,
        usedLiteral = undefined;

    /* istanbul ignore next */
    if (!this.isInline()) {
      throw new _exception2['default']('replaceStack on non-inline');
    }

    // We want to merge the inline statement into the replacement statement via ','
    var top = this.popStack(true);

    if (top instanceof Literal) {
      // Literals do not need to be inlined
      stack = [top.value];
      prefix = ['(', stack];
      usedLiteral = true;
    } else {
      // Get or create the current stack name for use by the inline
      createdStack = true;
      var _name = this.incrStack();

      prefix = ['((', this.push(_name), ' = ', top, ')'];
      stack = this.topStack();
    }

    var item = callback.call(this, stack);

    if (!usedLiteral) {
      this.popStack();
    }
    if (createdStack) {
      this.stackSlot--;
    }
    this.push(prefix.concat(item, ')'));
  },

  incrStack: function incrStack() {
    this.stackSlot++;
    if (this.stackSlot > this.stackVars.length) {
      this.stackVars.push('stack' + this.stackSlot);
    }
    return this.topStackName();
  },
  topStackName: function topStackName() {
    return 'stack' + this.stackSlot;
  },
  flushInline: function flushInline() {
    var inlineStack = this.inlineStack;
    this.inlineStack = [];
    for (var i = 0, len = inlineStack.length; i < len; i++) {
      var entry = inlineStack[i];
      /* istanbul ignore if */
      if (entry instanceof Literal) {
        this.compileStack.push(entry);
      } else {
        var stack = this.incrStack();
        this.pushSource([stack, ' = ', entry, ';']);
        this.compileStack.push(stack);
      }
    }
  },
  isInline: function isInline() {
    return this.inlineStack.length;
  },

  popStack: function popStack(wrapped) {
    var inline = this.isInline(),
        item = (inline ? this.inlineStack : this.compileStack).pop();

    if (!wrapped && item instanceof Literal) {
      return item.value;
    } else {
      if (!inline) {
        /* istanbul ignore next */
        if (!this.stackSlot) {
          throw new _exception2['default']('Invalid stack pop');
        }
        this.stackSlot--;
      }
      return item;
    }
  },

  topStack: function topStack() {
    var stack = this.isInline() ? this.inlineStack : this.compileStack,
        item = stack[stack.length - 1];

    /* istanbul ignore if */
    if (item instanceof Literal) {
      return item.value;
    } else {
      return item;
    }
  },

  contextName: function contextName(context) {
    if (this.useDepths && context) {
      return 'depths[' + context + ']';
    } else {
      return 'depth' + context;
    }
  },

  quotedString: function quotedString(str) {
    return this.source.quotedString(str);
  },

  objectLiteral: function objectLiteral(obj) {
    return this.source.objectLiteral(obj);
  },

  aliasable: function aliasable(name) {
    var ret = this.aliases[name];
    if (ret) {
      ret.referenceCount++;
      return ret;
    }

    ret = this.aliases[name] = this.source.wrap(name);
    ret.aliasable = true;
    ret.referenceCount = 1;

    return ret;
  },

  setupHelper: function setupHelper(paramSize, name, blockHelper) {
    var params = [],
        paramsInit = this.setupHelperArgs(name, paramSize, params, blockHelper);
    var foundHelper = this.nameLookup('helpers', name, 'helper'),
        callContext = this.aliasable(this.contextName(0) + ' != null ? ' + this.contextName(0) + ' : (container.nullContext || {})');

    return {
      params: params,
      paramsInit: paramsInit,
      name: foundHelper,
      callParams: [callContext].concat(params)
    };
  },

  setupParams: function setupParams(helper, paramSize, params) {
    var options = {},
        contexts = [],
        types = [],
        ids = [],
        objectArgs = !params,
        param = undefined;

    if (objectArgs) {
      params = [];
    }

    options.name = this.quotedString(helper);
    options.hash = this.popStack();

    if (this.trackIds) {
      options.hashIds = this.popStack();
    }
    if (this.stringParams) {
      options.hashTypes = this.popStack();
      options.hashContexts = this.popStack();
    }

    var inverse = this.popStack(),
        program = this.popStack();

    // Avoid setting fn and inverse if neither are set. This allows
    // helpers to do a check for `if (options.fn)`
    if (program || inverse) {
      options.fn = program || 'container.noop';
      options.inverse = inverse || 'container.noop';
    }

    // The parameters go on to the stack in order (making sure that they are evaluated in order)
    // so we need to pop them off the stack in reverse order
    var i = paramSize;
    while (i--) {
      param = this.popStack();
      params[i] = param;

      if (this.trackIds) {
        ids[i] = this.popStack();
      }
      if (this.stringParams) {
        types[i] = this.popStack();
        contexts[i] = this.popStack();
      }
    }

    if (objectArgs) {
      options.args = this.source.generateArray(params);
    }

    if (this.trackIds) {
      options.ids = this.source.generateArray(ids);
    }
    if (this.stringParams) {
      options.types = this.source.generateArray(types);
      options.contexts = this.source.generateArray(contexts);
    }

    if (this.options.data) {
      options.data = 'data';
    }
    if (this.useBlockParams) {
      options.blockParams = 'blockParams';
    }
    return options;
  },

  setupHelperArgs: function setupHelperArgs(helper, paramSize, params, useRegister) {
    var options = this.setupParams(helper, paramSize, params);
    options.loc = JSON.stringify(this.source.currentLocation);
    options = this.objectLiteral(options);
    if (useRegister) {
      this.useRegister('options');
      params.push('options');
      return ['options=', options];
    } else if (params) {
      params.push(options);
      return '';
    } else {
      return options;
    }
  }
};

(function () {
  var reservedWords = ('break else new var' + ' case finally return void' + ' catch for switch while' + ' continue function this with' + ' default if throw' + ' delete in try' + ' do instanceof typeof' + ' abstract enum int short' + ' boolean export interface static' + ' byte extends long super' + ' char final native synchronized' + ' class float package throws' + ' const goto private transient' + ' debugger implements protected volatile' + ' double import public let yield await' + ' null true false').split(' ');

  var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};

  for (var i = 0, l = reservedWords.length; i < l; i++) {
    compilerWords[reservedWords[i]] = true;
  }
})();

/**
 * @deprecated May be removed in the next major version
 */
JavaScriptCompiler.isValidJavaScriptVariableName = function (name) {
  return !JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name);
};

function strictLookup(requireTerminal, compiler, parts, i, type) {
  var stack = compiler.popStack(),
      len = parts.length;
  if (requireTerminal) {
    len--;
  }

  for (; i < len; i++) {
    stack = compiler.nameLookup(stack, parts[i], type);
  }

  if (requireTerminal) {
    return [compiler.aliasable('container.strict'), '(', stack, ', ', compiler.quotedString(parts[i]), ', ', JSON.stringify(compiler.source.currentLocation), ' )'];
  } else {
    return stack;
  }
}

exports["default"] = JavaScriptCompiler;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/compiler/parser.js":
/*!************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/compiler/parser.js ***!
  \************************************************************************/
/***/ ((module, exports) => {

"use strict";
// File ignored in coverage tests via setting in .istanbul.yml
/* Jison generated parser */


exports.__esModule = true;
var handlebars = (function () {
    var parser = { trace: function trace() {},
        yy: {},
        symbols_: { "error": 2, "root": 3, "program": 4, "EOF": 5, "program_repetition0": 6, "statement": 7, "mustache": 8, "block": 9, "rawBlock": 10, "partial": 11, "partialBlock": 12, "content": 13, "COMMENT": 14, "CONTENT": 15, "openRawBlock": 16, "rawBlock_repetition0": 17, "END_RAW_BLOCK": 18, "OPEN_RAW_BLOCK": 19, "helperName": 20, "openRawBlock_repetition0": 21, "openRawBlock_option0": 22, "CLOSE_RAW_BLOCK": 23, "openBlock": 24, "block_option0": 25, "closeBlock": 26, "openInverse": 27, "block_option1": 28, "OPEN_BLOCK": 29, "openBlock_repetition0": 30, "openBlock_option0": 31, "openBlock_option1": 32, "CLOSE": 33, "OPEN_INVERSE": 34, "openInverse_repetition0": 35, "openInverse_option0": 36, "openInverse_option1": 37, "openInverseChain": 38, "OPEN_INVERSE_CHAIN": 39, "openInverseChain_repetition0": 40, "openInverseChain_option0": 41, "openInverseChain_option1": 42, "inverseAndProgram": 43, "INVERSE": 44, "inverseChain": 45, "inverseChain_option0": 46, "OPEN_ENDBLOCK": 47, "OPEN": 48, "mustache_repetition0": 49, "mustache_option0": 50, "OPEN_UNESCAPED": 51, "mustache_repetition1": 52, "mustache_option1": 53, "CLOSE_UNESCAPED": 54, "OPEN_PARTIAL": 55, "partialName": 56, "partial_repetition0": 57, "partial_option0": 58, "openPartialBlock": 59, "OPEN_PARTIAL_BLOCK": 60, "openPartialBlock_repetition0": 61, "openPartialBlock_option0": 62, "param": 63, "sexpr": 64, "OPEN_SEXPR": 65, "sexpr_repetition0": 66, "sexpr_option0": 67, "CLOSE_SEXPR": 68, "hash": 69, "hash_repetition_plus0": 70, "hashSegment": 71, "ID": 72, "EQUALS": 73, "blockParams": 74, "OPEN_BLOCK_PARAMS": 75, "blockParams_repetition_plus0": 76, "CLOSE_BLOCK_PARAMS": 77, "path": 78, "dataName": 79, "STRING": 80, "NUMBER": 81, "BOOLEAN": 82, "UNDEFINED": 83, "NULL": 84, "DATA": 85, "pathSegments": 86, "SEP": 87, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 5: "EOF", 14: "COMMENT", 15: "CONTENT", 18: "END_RAW_BLOCK", 19: "OPEN_RAW_BLOCK", 23: "CLOSE_RAW_BLOCK", 29: "OPEN_BLOCK", 33: "CLOSE", 34: "OPEN_INVERSE", 39: "OPEN_INVERSE_CHAIN", 44: "INVERSE", 47: "OPEN_ENDBLOCK", 48: "OPEN", 51: "OPEN_UNESCAPED", 54: "CLOSE_UNESCAPED", 55: "OPEN_PARTIAL", 60: "OPEN_PARTIAL_BLOCK", 65: "OPEN_SEXPR", 68: "CLOSE_SEXPR", 72: "ID", 73: "EQUALS", 75: "OPEN_BLOCK_PARAMS", 77: "CLOSE_BLOCK_PARAMS", 80: "STRING", 81: "NUMBER", 82: "BOOLEAN", 83: "UNDEFINED", 84: "NULL", 85: "DATA", 87: "SEP" },
        productions_: [0, [3, 2], [4, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [13, 1], [10, 3], [16, 5], [9, 4], [9, 4], [24, 6], [27, 6], [38, 6], [43, 2], [45, 3], [45, 1], [26, 3], [8, 5], [8, 5], [11, 5], [12, 3], [59, 5], [63, 1], [63, 1], [64, 5], [69, 1], [71, 3], [74, 3], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [56, 1], [56, 1], [79, 2], [78, 1], [86, 3], [86, 1], [6, 0], [6, 2], [17, 0], [17, 2], [21, 0], [21, 2], [22, 0], [22, 1], [25, 0], [25, 1], [28, 0], [28, 1], [30, 0], [30, 2], [31, 0], [31, 1], [32, 0], [32, 1], [35, 0], [35, 2], [36, 0], [36, 1], [37, 0], [37, 1], [40, 0], [40, 2], [41, 0], [41, 1], [42, 0], [42, 1], [46, 0], [46, 1], [49, 0], [49, 2], [50, 0], [50, 1], [52, 0], [52, 2], [53, 0], [53, 1], [57, 0], [57, 2], [58, 0], [58, 1], [61, 0], [61, 2], [62, 0], [62, 1], [66, 0], [66, 2], [67, 0], [67, 1], [70, 1], [70, 2], [76, 1], [76, 2]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:
                    return $$[$0 - 1];
                    break;
                case 2:
                    this.$ = yy.prepareProgram($$[$0]);
                    break;
                case 3:
                    this.$ = $$[$0];
                    break;
                case 4:
                    this.$ = $$[$0];
                    break;
                case 5:
                    this.$ = $$[$0];
                    break;
                case 6:
                    this.$ = $$[$0];
                    break;
                case 7:
                    this.$ = $$[$0];
                    break;
                case 8:
                    this.$ = $$[$0];
                    break;
                case 9:
                    this.$ = {
                        type: 'CommentStatement',
                        value: yy.stripComment($$[$0]),
                        strip: yy.stripFlags($$[$0], $$[$0]),
                        loc: yy.locInfo(this._$)
                    };

                    break;
                case 10:
                    this.$ = {
                        type: 'ContentStatement',
                        original: $$[$0],
                        value: $$[$0],
                        loc: yy.locInfo(this._$)
                    };

                    break;
                case 11:
                    this.$ = yy.prepareRawBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 12:
                    this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1] };
                    break;
                case 13:
                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], false, this._$);
                    break;
                case 14:
                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], true, this._$);
                    break;
                case 15:
                    this.$ = { open: $$[$0 - 5], path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
                    break;
                case 16:
                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
                    break;
                case 17:
                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
                    break;
                case 18:
                    this.$ = { strip: yy.stripFlags($$[$0 - 1], $$[$0 - 1]), program: $$[$0] };
                    break;
                case 19:
                    var inverse = yy.prepareBlock($$[$0 - 2], $$[$0 - 1], $$[$0], $$[$0], false, this._$),
                        program = yy.prepareProgram([inverse], $$[$0 - 1].loc);
                    program.chained = true;

                    this.$ = { strip: $$[$0 - 2].strip, program: program, chain: true };

                    break;
                case 20:
                    this.$ = $$[$0];
                    break;
                case 21:
                    this.$ = { path: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 2], $$[$0]) };
                    break;
                case 22:
                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
                    break;
                case 23:
                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
                    break;
                case 24:
                    this.$ = {
                        type: 'PartialStatement',
                        name: $$[$0 - 3],
                        params: $$[$0 - 2],
                        hash: $$[$0 - 1],
                        indent: '',
                        strip: yy.stripFlags($$[$0 - 4], $$[$0]),
                        loc: yy.locInfo(this._$)
                    };

                    break;
                case 25:
                    this.$ = yy.preparePartialBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 26:
                    this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 4], $$[$0]) };
                    break;
                case 27:
                    this.$ = $$[$0];
                    break;
                case 28:
                    this.$ = $$[$0];
                    break;
                case 29:
                    this.$ = {
                        type: 'SubExpression',
                        path: $$[$0 - 3],
                        params: $$[$0 - 2],
                        hash: $$[$0 - 1],
                        loc: yy.locInfo(this._$)
                    };

                    break;
                case 30:
                    this.$ = { type: 'Hash', pairs: $$[$0], loc: yy.locInfo(this._$) };
                    break;
                case 31:
                    this.$ = { type: 'HashPair', key: yy.id($$[$0 - 2]), value: $$[$0], loc: yy.locInfo(this._$) };
                    break;
                case 32:
                    this.$ = yy.id($$[$0 - 1]);
                    break;
                case 33:
                    this.$ = $$[$0];
                    break;
                case 34:
                    this.$ = $$[$0];
                    break;
                case 35:
                    this.$ = { type: 'StringLiteral', value: $$[$0], original: $$[$0], loc: yy.locInfo(this._$) };
                    break;
                case 36:
                    this.$ = { type: 'NumberLiteral', value: Number($$[$0]), original: Number($$[$0]), loc: yy.locInfo(this._$) };
                    break;
                case 37:
                    this.$ = { type: 'BooleanLiteral', value: $$[$0] === 'true', original: $$[$0] === 'true', loc: yy.locInfo(this._$) };
                    break;
                case 38:
                    this.$ = { type: 'UndefinedLiteral', original: undefined, value: undefined, loc: yy.locInfo(this._$) };
                    break;
                case 39:
                    this.$ = { type: 'NullLiteral', original: null, value: null, loc: yy.locInfo(this._$) };
                    break;
                case 40:
                    this.$ = $$[$0];
                    break;
                case 41:
                    this.$ = $$[$0];
                    break;
                case 42:
                    this.$ = yy.preparePath(true, $$[$0], this._$);
                    break;
                case 43:
                    this.$ = yy.preparePath(false, $$[$0], this._$);
                    break;
                case 44:
                    $$[$0 - 2].push({ part: yy.id($$[$0]), original: $$[$0], separator: $$[$0 - 1] });this.$ = $$[$0 - 2];
                    break;
                case 45:
                    this.$ = [{ part: yy.id($$[$0]), original: $$[$0] }];
                    break;
                case 46:
                    this.$ = [];
                    break;
                case 47:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 48:
                    this.$ = [];
                    break;
                case 49:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 50:
                    this.$ = [];
                    break;
                case 51:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 58:
                    this.$ = [];
                    break;
                case 59:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 64:
                    this.$ = [];
                    break;
                case 65:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 70:
                    this.$ = [];
                    break;
                case 71:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 78:
                    this.$ = [];
                    break;
                case 79:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 82:
                    this.$ = [];
                    break;
                case 83:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 86:
                    this.$ = [];
                    break;
                case 87:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 90:
                    this.$ = [];
                    break;
                case 91:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 94:
                    this.$ = [];
                    break;
                case 95:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 98:
                    this.$ = [$$[$0]];
                    break;
                case 99:
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 100:
                    this.$ = [$$[$0]];
                    break;
                case 101:
                    $$[$0 - 1].push($$[$0]);
                    break;
            }
        },
        table: [{ 3: 1, 4: 2, 5: [2, 46], 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 1: [3] }, { 5: [1, 4] }, { 5: [2, 2], 7: 5, 8: 6, 9: 7, 10: 8, 11: 9, 12: 10, 13: 11, 14: [1, 12], 15: [1, 20], 16: 17, 19: [1, 23], 24: 15, 27: 16, 29: [1, 21], 34: [1, 22], 39: [2, 2], 44: [2, 2], 47: [2, 2], 48: [1, 13], 51: [1, 14], 55: [1, 18], 59: 19, 60: [1, 24] }, { 1: [2, 1] }, { 5: [2, 47], 14: [2, 47], 15: [2, 47], 19: [2, 47], 29: [2, 47], 34: [2, 47], 39: [2, 47], 44: [2, 47], 47: [2, 47], 48: [2, 47], 51: [2, 47], 55: [2, 47], 60: [2, 47] }, { 5: [2, 3], 14: [2, 3], 15: [2, 3], 19: [2, 3], 29: [2, 3], 34: [2, 3], 39: [2, 3], 44: [2, 3], 47: [2, 3], 48: [2, 3], 51: [2, 3], 55: [2, 3], 60: [2, 3] }, { 5: [2, 4], 14: [2, 4], 15: [2, 4], 19: [2, 4], 29: [2, 4], 34: [2, 4], 39: [2, 4], 44: [2, 4], 47: [2, 4], 48: [2, 4], 51: [2, 4], 55: [2, 4], 60: [2, 4] }, { 5: [2, 5], 14: [2, 5], 15: [2, 5], 19: [2, 5], 29: [2, 5], 34: [2, 5], 39: [2, 5], 44: [2, 5], 47: [2, 5], 48: [2, 5], 51: [2, 5], 55: [2, 5], 60: [2, 5] }, { 5: [2, 6], 14: [2, 6], 15: [2, 6], 19: [2, 6], 29: [2, 6], 34: [2, 6], 39: [2, 6], 44: [2, 6], 47: [2, 6], 48: [2, 6], 51: [2, 6], 55: [2, 6], 60: [2, 6] }, { 5: [2, 7], 14: [2, 7], 15: [2, 7], 19: [2, 7], 29: [2, 7], 34: [2, 7], 39: [2, 7], 44: [2, 7], 47: [2, 7], 48: [2, 7], 51: [2, 7], 55: [2, 7], 60: [2, 7] }, { 5: [2, 8], 14: [2, 8], 15: [2, 8], 19: [2, 8], 29: [2, 8], 34: [2, 8], 39: [2, 8], 44: [2, 8], 47: [2, 8], 48: [2, 8], 51: [2, 8], 55: [2, 8], 60: [2, 8] }, { 5: [2, 9], 14: [2, 9], 15: [2, 9], 19: [2, 9], 29: [2, 9], 34: [2, 9], 39: [2, 9], 44: [2, 9], 47: [2, 9], 48: [2, 9], 51: [2, 9], 55: [2, 9], 60: [2, 9] }, { 20: 25, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 36, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 37, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 4: 38, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 15: [2, 48], 17: 39, 18: [2, 48] }, { 20: 41, 56: 40, 64: 42, 65: [1, 43], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 44, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 5: [2, 10], 14: [2, 10], 15: [2, 10], 18: [2, 10], 19: [2, 10], 29: [2, 10], 34: [2, 10], 39: [2, 10], 44: [2, 10], 47: [2, 10], 48: [2, 10], 51: [2, 10], 55: [2, 10], 60: [2, 10] }, { 20: 45, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 46, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 47, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 41, 56: 48, 64: 42, 65: [1, 43], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [2, 78], 49: 49, 65: [2, 78], 72: [2, 78], 80: [2, 78], 81: [2, 78], 82: [2, 78], 83: [2, 78], 84: [2, 78], 85: [2, 78] }, { 23: [2, 33], 33: [2, 33], 54: [2, 33], 65: [2, 33], 68: [2, 33], 72: [2, 33], 75: [2, 33], 80: [2, 33], 81: [2, 33], 82: [2, 33], 83: [2, 33], 84: [2, 33], 85: [2, 33] }, { 23: [2, 34], 33: [2, 34], 54: [2, 34], 65: [2, 34], 68: [2, 34], 72: [2, 34], 75: [2, 34], 80: [2, 34], 81: [2, 34], 82: [2, 34], 83: [2, 34], 84: [2, 34], 85: [2, 34] }, { 23: [2, 35], 33: [2, 35], 54: [2, 35], 65: [2, 35], 68: [2, 35], 72: [2, 35], 75: [2, 35], 80: [2, 35], 81: [2, 35], 82: [2, 35], 83: [2, 35], 84: [2, 35], 85: [2, 35] }, { 23: [2, 36], 33: [2, 36], 54: [2, 36], 65: [2, 36], 68: [2, 36], 72: [2, 36], 75: [2, 36], 80: [2, 36], 81: [2, 36], 82: [2, 36], 83: [2, 36], 84: [2, 36], 85: [2, 36] }, { 23: [2, 37], 33: [2, 37], 54: [2, 37], 65: [2, 37], 68: [2, 37], 72: [2, 37], 75: [2, 37], 80: [2, 37], 81: [2, 37], 82: [2, 37], 83: [2, 37], 84: [2, 37], 85: [2, 37] }, { 23: [2, 38], 33: [2, 38], 54: [2, 38], 65: [2, 38], 68: [2, 38], 72: [2, 38], 75: [2, 38], 80: [2, 38], 81: [2, 38], 82: [2, 38], 83: [2, 38], 84: [2, 38], 85: [2, 38] }, { 23: [2, 39], 33: [2, 39], 54: [2, 39], 65: [2, 39], 68: [2, 39], 72: [2, 39], 75: [2, 39], 80: [2, 39], 81: [2, 39], 82: [2, 39], 83: [2, 39], 84: [2, 39], 85: [2, 39] }, { 23: [2, 43], 33: [2, 43], 54: [2, 43], 65: [2, 43], 68: [2, 43], 72: [2, 43], 75: [2, 43], 80: [2, 43], 81: [2, 43], 82: [2, 43], 83: [2, 43], 84: [2, 43], 85: [2, 43], 87: [1, 50] }, { 72: [1, 35], 86: 51 }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 52: 52, 54: [2, 82], 65: [2, 82], 72: [2, 82], 80: [2, 82], 81: [2, 82], 82: [2, 82], 83: [2, 82], 84: [2, 82], 85: [2, 82] }, { 25: 53, 38: 55, 39: [1, 57], 43: 56, 44: [1, 58], 45: 54, 47: [2, 54] }, { 28: 59, 43: 60, 44: [1, 58], 47: [2, 56] }, { 13: 62, 15: [1, 20], 18: [1, 61] }, { 33: [2, 86], 57: 63, 65: [2, 86], 72: [2, 86], 80: [2, 86], 81: [2, 86], 82: [2, 86], 83: [2, 86], 84: [2, 86], 85: [2, 86] }, { 33: [2, 40], 65: [2, 40], 72: [2, 40], 80: [2, 40], 81: [2, 40], 82: [2, 40], 83: [2, 40], 84: [2, 40], 85: [2, 40] }, { 33: [2, 41], 65: [2, 41], 72: [2, 41], 80: [2, 41], 81: [2, 41], 82: [2, 41], 83: [2, 41], 84: [2, 41], 85: [2, 41] }, { 20: 64, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 65, 47: [1, 66] }, { 30: 67, 33: [2, 58], 65: [2, 58], 72: [2, 58], 75: [2, 58], 80: [2, 58], 81: [2, 58], 82: [2, 58], 83: [2, 58], 84: [2, 58], 85: [2, 58] }, { 33: [2, 64], 35: 68, 65: [2, 64], 72: [2, 64], 75: [2, 64], 80: [2, 64], 81: [2, 64], 82: [2, 64], 83: [2, 64], 84: [2, 64], 85: [2, 64] }, { 21: 69, 23: [2, 50], 65: [2, 50], 72: [2, 50], 80: [2, 50], 81: [2, 50], 82: [2, 50], 83: [2, 50], 84: [2, 50], 85: [2, 50] }, { 33: [2, 90], 61: 70, 65: [2, 90], 72: [2, 90], 80: [2, 90], 81: [2, 90], 82: [2, 90], 83: [2, 90], 84: [2, 90], 85: [2, 90] }, { 20: 74, 33: [2, 80], 50: 71, 63: 72, 64: 75, 65: [1, 43], 69: 73, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 72: [1, 79] }, { 23: [2, 42], 33: [2, 42], 54: [2, 42], 65: [2, 42], 68: [2, 42], 72: [2, 42], 75: [2, 42], 80: [2, 42], 81: [2, 42], 82: [2, 42], 83: [2, 42], 84: [2, 42], 85: [2, 42], 87: [1, 50] }, { 20: 74, 53: 80, 54: [2, 84], 63: 81, 64: 75, 65: [1, 43], 69: 82, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 83, 47: [1, 66] }, { 47: [2, 55] }, { 4: 84, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 47: [2, 20] }, { 20: 85, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 86, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 26: 87, 47: [1, 66] }, { 47: [2, 57] }, { 5: [2, 11], 14: [2, 11], 15: [2, 11], 19: [2, 11], 29: [2, 11], 34: [2, 11], 39: [2, 11], 44: [2, 11], 47: [2, 11], 48: [2, 11], 51: [2, 11], 55: [2, 11], 60: [2, 11] }, { 15: [2, 49], 18: [2, 49] }, { 20: 74, 33: [2, 88], 58: 88, 63: 89, 64: 75, 65: [1, 43], 69: 90, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 65: [2, 94], 66: 91, 68: [2, 94], 72: [2, 94], 80: [2, 94], 81: [2, 94], 82: [2, 94], 83: [2, 94], 84: [2, 94], 85: [2, 94] }, { 5: [2, 25], 14: [2, 25], 15: [2, 25], 19: [2, 25], 29: [2, 25], 34: [2, 25], 39: [2, 25], 44: [2, 25], 47: [2, 25], 48: [2, 25], 51: [2, 25], 55: [2, 25], 60: [2, 25] }, { 20: 92, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 74, 31: 93, 33: [2, 60], 63: 94, 64: 75, 65: [1, 43], 69: 95, 70: 76, 71: 77, 72: [1, 78], 75: [2, 60], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 74, 33: [2, 66], 36: 96, 63: 97, 64: 75, 65: [1, 43], 69: 98, 70: 76, 71: 77, 72: [1, 78], 75: [2, 66], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 74, 22: 99, 23: [2, 52], 63: 100, 64: 75, 65: [1, 43], 69: 101, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 74, 33: [2, 92], 62: 102, 63: 103, 64: 75, 65: [1, 43], 69: 104, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 105] }, { 33: [2, 79], 65: [2, 79], 72: [2, 79], 80: [2, 79], 81: [2, 79], 82: [2, 79], 83: [2, 79], 84: [2, 79], 85: [2, 79] }, { 33: [2, 81] }, { 23: [2, 27], 33: [2, 27], 54: [2, 27], 65: [2, 27], 68: [2, 27], 72: [2, 27], 75: [2, 27], 80: [2, 27], 81: [2, 27], 82: [2, 27], 83: [2, 27], 84: [2, 27], 85: [2, 27] }, { 23: [2, 28], 33: [2, 28], 54: [2, 28], 65: [2, 28], 68: [2, 28], 72: [2, 28], 75: [2, 28], 80: [2, 28], 81: [2, 28], 82: [2, 28], 83: [2, 28], 84: [2, 28], 85: [2, 28] }, { 23: [2, 30], 33: [2, 30], 54: [2, 30], 68: [2, 30], 71: 106, 72: [1, 107], 75: [2, 30] }, { 23: [2, 98], 33: [2, 98], 54: [2, 98], 68: [2, 98], 72: [2, 98], 75: [2, 98] }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 73: [1, 108], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 23: [2, 44], 33: [2, 44], 54: [2, 44], 65: [2, 44], 68: [2, 44], 72: [2, 44], 75: [2, 44], 80: [2, 44], 81: [2, 44], 82: [2, 44], 83: [2, 44], 84: [2, 44], 85: [2, 44], 87: [2, 44] }, { 54: [1, 109] }, { 54: [2, 83], 65: [2, 83], 72: [2, 83], 80: [2, 83], 81: [2, 83], 82: [2, 83], 83: [2, 83], 84: [2, 83], 85: [2, 83] }, { 54: [2, 85] }, { 5: [2, 13], 14: [2, 13], 15: [2, 13], 19: [2, 13], 29: [2, 13], 34: [2, 13], 39: [2, 13], 44: [2, 13], 47: [2, 13], 48: [2, 13], 51: [2, 13], 55: [2, 13], 60: [2, 13] }, { 38: 55, 39: [1, 57], 43: 56, 44: [1, 58], 45: 111, 46: 110, 47: [2, 76] }, { 33: [2, 70], 40: 112, 65: [2, 70], 72: [2, 70], 75: [2, 70], 80: [2, 70], 81: [2, 70], 82: [2, 70], 83: [2, 70], 84: [2, 70], 85: [2, 70] }, { 47: [2, 18] }, { 5: [2, 14], 14: [2, 14], 15: [2, 14], 19: [2, 14], 29: [2, 14], 34: [2, 14], 39: [2, 14], 44: [2, 14], 47: [2, 14], 48: [2, 14], 51: [2, 14], 55: [2, 14], 60: [2, 14] }, { 33: [1, 113] }, { 33: [2, 87], 65: [2, 87], 72: [2, 87], 80: [2, 87], 81: [2, 87], 82: [2, 87], 83: [2, 87], 84: [2, 87], 85: [2, 87] }, { 33: [2, 89] }, { 20: 74, 63: 115, 64: 75, 65: [1, 43], 67: 114, 68: [2, 96], 69: 116, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 117] }, { 32: 118, 33: [2, 62], 74: 119, 75: [1, 120] }, { 33: [2, 59], 65: [2, 59], 72: [2, 59], 75: [2, 59], 80: [2, 59], 81: [2, 59], 82: [2, 59], 83: [2, 59], 84: [2, 59], 85: [2, 59] }, { 33: [2, 61], 75: [2, 61] }, { 33: [2, 68], 37: 121, 74: 122, 75: [1, 120] }, { 33: [2, 65], 65: [2, 65], 72: [2, 65], 75: [2, 65], 80: [2, 65], 81: [2, 65], 82: [2, 65], 83: [2, 65], 84: [2, 65], 85: [2, 65] }, { 33: [2, 67], 75: [2, 67] }, { 23: [1, 123] }, { 23: [2, 51], 65: [2, 51], 72: [2, 51], 80: [2, 51], 81: [2, 51], 82: [2, 51], 83: [2, 51], 84: [2, 51], 85: [2, 51] }, { 23: [2, 53] }, { 33: [1, 124] }, { 33: [2, 91], 65: [2, 91], 72: [2, 91], 80: [2, 91], 81: [2, 91], 82: [2, 91], 83: [2, 91], 84: [2, 91], 85: [2, 91] }, { 33: [2, 93] }, { 5: [2, 22], 14: [2, 22], 15: [2, 22], 19: [2, 22], 29: [2, 22], 34: [2, 22], 39: [2, 22], 44: [2, 22], 47: [2, 22], 48: [2, 22], 51: [2, 22], 55: [2, 22], 60: [2, 22] }, { 23: [2, 99], 33: [2, 99], 54: [2, 99], 68: [2, 99], 72: [2, 99], 75: [2, 99] }, { 73: [1, 108] }, { 20: 74, 63: 125, 64: 75, 65: [1, 43], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 23], 14: [2, 23], 15: [2, 23], 19: [2, 23], 29: [2, 23], 34: [2, 23], 39: [2, 23], 44: [2, 23], 47: [2, 23], 48: [2, 23], 51: [2, 23], 55: [2, 23], 60: [2, 23] }, { 47: [2, 19] }, { 47: [2, 77] }, { 20: 74, 33: [2, 72], 41: 126, 63: 127, 64: 75, 65: [1, 43], 69: 128, 70: 76, 71: 77, 72: [1, 78], 75: [2, 72], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 24], 14: [2, 24], 15: [2, 24], 19: [2, 24], 29: [2, 24], 34: [2, 24], 39: [2, 24], 44: [2, 24], 47: [2, 24], 48: [2, 24], 51: [2, 24], 55: [2, 24], 60: [2, 24] }, { 68: [1, 129] }, { 65: [2, 95], 68: [2, 95], 72: [2, 95], 80: [2, 95], 81: [2, 95], 82: [2, 95], 83: [2, 95], 84: [2, 95], 85: [2, 95] }, { 68: [2, 97] }, { 5: [2, 21], 14: [2, 21], 15: [2, 21], 19: [2, 21], 29: [2, 21], 34: [2, 21], 39: [2, 21], 44: [2, 21], 47: [2, 21], 48: [2, 21], 51: [2, 21], 55: [2, 21], 60: [2, 21] }, { 33: [1, 130] }, { 33: [2, 63] }, { 72: [1, 132], 76: 131 }, { 33: [1, 133] }, { 33: [2, 69] }, { 15: [2, 12], 18: [2, 12] }, { 14: [2, 26], 15: [2, 26], 19: [2, 26], 29: [2, 26], 34: [2, 26], 47: [2, 26], 48: [2, 26], 51: [2, 26], 55: [2, 26], 60: [2, 26] }, { 23: [2, 31], 33: [2, 31], 54: [2, 31], 68: [2, 31], 72: [2, 31], 75: [2, 31] }, { 33: [2, 74], 42: 134, 74: 135, 75: [1, 120] }, { 33: [2, 71], 65: [2, 71], 72: [2, 71], 75: [2, 71], 80: [2, 71], 81: [2, 71], 82: [2, 71], 83: [2, 71], 84: [2, 71], 85: [2, 71] }, { 33: [2, 73], 75: [2, 73] }, { 23: [2, 29], 33: [2, 29], 54: [2, 29], 65: [2, 29], 68: [2, 29], 72: [2, 29], 75: [2, 29], 80: [2, 29], 81: [2, 29], 82: [2, 29], 83: [2, 29], 84: [2, 29], 85: [2, 29] }, { 14: [2, 15], 15: [2, 15], 19: [2, 15], 29: [2, 15], 34: [2, 15], 39: [2, 15], 44: [2, 15], 47: [2, 15], 48: [2, 15], 51: [2, 15], 55: [2, 15], 60: [2, 15] }, { 72: [1, 137], 77: [1, 136] }, { 72: [2, 100], 77: [2, 100] }, { 14: [2, 16], 15: [2, 16], 19: [2, 16], 29: [2, 16], 34: [2, 16], 44: [2, 16], 47: [2, 16], 48: [2, 16], 51: [2, 16], 55: [2, 16], 60: [2, 16] }, { 33: [1, 138] }, { 33: [2, 75] }, { 33: [2, 32] }, { 72: [2, 101], 77: [2, 101] }, { 14: [2, 17], 15: [2, 17], 19: [2, 17], 29: [2, 17], 34: [2, 17], 39: [2, 17], 44: [2, 17], 47: [2, 17], 48: [2, 17], 51: [2, 17], 55: [2, 17], 60: [2, 17] }],
        defaultActions: { 4: [2, 1], 54: [2, 55], 56: [2, 20], 60: [2, 57], 73: [2, 81], 82: [2, 85], 86: [2, 18], 90: [2, 89], 101: [2, 53], 104: [2, 93], 110: [2, 19], 111: [2, 77], 116: [2, 97], 119: [2, 63], 122: [2, 69], 135: [2, 75], 136: [2, 32] },
        parseError: function parseError(str, hash) {
            throw new Error(str);
        },
        parse: function parse(input) {
            var self = this,
                stack = [0],
                vstack = [null],
                lstack = [],
                table = this.table,
                yytext = "",
                yylineno = 0,
                yyleng = 0,
                recovering = 0,
                TERROR = 2,
                EOF = 1;
            this.lexer.setInput(input);
            this.lexer.yy = this.yy;
            this.yy.lexer = this.lexer;
            this.yy.parser = this;
            if (typeof this.lexer.yylloc == "undefined") this.lexer.yylloc = {};
            var yyloc = this.lexer.yylloc;
            lstack.push(yyloc);
            var ranges = this.lexer.options && this.lexer.options.ranges;
            if (typeof this.yy.parseError === "function") this.parseError = this.yy.parseError;
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            function lex() {
                var token;
                token = self.lexer.lex() || 1;
                if (typeof token !== "number") {
                    token = self.symbols_[token] || token;
                }
                return token;
            }
            var symbol,
                preErrorSymbol,
                state,
                action,
                a,
                r,
                yyval = {},
                p,
                len,
                newState,
                expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == "undefined") {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === "undefined" || !action.length || !action[0]) {
                    var errStr = "";
                    if (!recovering) {
                        expected = [];
                        for (p in table[state]) if (this.terminals_[p] && p > 2) {
                            expected.push("'" + this.terminals_[p] + "'");
                        }
                        if (this.lexer.showPosition) {
                            errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                        } else {
                            errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1 ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
                        }
                        this.parseError(errStr, { text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected });
                    }
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(this.lexer.yytext);
                        lstack.push(this.lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = this.lexer.yyleng;
                            yytext = this.lexer.yytext;
                            yylineno = this.lexer.yylineno;
                            yyloc = this.lexer.yylloc;
                            if (recovering > 0) recovering--;
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = { first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column };
                        if (ranges) {
                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                        }
                        r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
                        if (typeof r !== "undefined") {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        }
    };
    /* Jison generated lexer */
    var lexer = (function () {
        var lexer = { EOF: 1,
            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },
            setInput: function setInput(input) {
                this._input = input;
                this._more = this._less = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = { first_line: 1, first_column: 0, last_line: 1, last_column: 0 };
                if (this.options.ranges) this.yylloc.range = [0, 0];
                this.offset = 0;
                return this;
            },
            input: function input() {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) this.yylloc.range[1]++;

                this._input = this._input.slice(1);
                return ch;
            },
            unput: function unput(ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) this.yylineno -= lines.length - 1;
                var r = this.yylloc.range;

                this.yylloc = { first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                return this;
            },
            more: function more() {
                this._more = true;
                return this;
            },
            less: function less(n) {
                this.unput(this.match.slice(n));
            },
            pastInput: function pastInput() {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },
            upcomingInput: function upcomingInput() {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },
            showPosition: function showPosition() {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },
            next: function next() {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) this.done = true;

                var token, match, tempMatch, index, col, lines;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (!this.options.flex) break;
                    }
                }
                if (match) {
                    lines = match[0].match(/(?:\r\n?|\n).*/g);
                    if (lines) this.yylineno += lines.length;
                    this.yylloc = { first_line: this.yylloc.last_line,
                        last_line: this.yylineno + 1,
                        first_column: this.yylloc.last_column,
                        last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length };
                    this.yytext += match[0];
                    this.match += match[0];
                    this.matches = match;
                    this.yyleng = this.yytext.length;
                    if (this.options.ranges) {
                        this.yylloc.range = [this.offset, this.offset += this.yyleng];
                    }
                    this._more = false;
                    this._input = this._input.slice(match[0].length);
                    this.matched += match[0];
                    token = this.performAction.call(this, this.yy, this, rules[index], this.conditionStack[this.conditionStack.length - 1]);
                    if (this.done && this._input) this.done = false;
                    if (token) return token;else return;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), { text: "", token: null, line: this.yylineno });
                }
            },
            lex: function lex() {
                var r = this.next();
                if (typeof r !== 'undefined') {
                    return r;
                } else {
                    return this.lex();
                }
            },
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },
            popState: function popState() {
                return this.conditionStack.pop();
            },
            _currentRules: function _currentRules() {
                return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
            },
            topState: function topState() {
                return this.conditionStack[this.conditionStack.length - 2];
            },
            pushState: function begin(condition) {
                this.begin(condition);
            } };
        lexer.options = {};
        lexer.performAction = function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {

            function strip(start, end) {
                return yy_.yytext = yy_.yytext.substring(start, yy_.yyleng - end + start);
            }

            var YYSTATE = YY_START;
            switch ($avoiding_name_collisions) {
                case 0:
                    if (yy_.yytext.slice(-2) === "\\\\") {
                        strip(0, 1);
                        this.begin("mu");
                    } else if (yy_.yytext.slice(-1) === "\\") {
                        strip(0, 1);
                        this.begin("emu");
                    } else {
                        this.begin("mu");
                    }
                    if (yy_.yytext) return 15;

                    break;
                case 1:
                    return 15;
                    break;
                case 2:
                    this.popState();
                    return 15;

                    break;
                case 3:
                    this.begin('raw');return 15;
                    break;
                case 4:
                    this.popState();
                    // Should be using `this.topState()` below, but it currently
                    // returns the second top instead of the first top. Opened an
                    // issue about it at https://github.com/zaach/jison/issues/291
                    if (this.conditionStack[this.conditionStack.length - 1] === 'raw') {
                        return 15;
                    } else {
                        strip(5, 9);
                        return 'END_RAW_BLOCK';
                    }

                    break;
                case 5:
                    return 15;
                    break;
                case 6:
                    this.popState();
                    return 14;

                    break;
                case 7:
                    return 65;
                    break;
                case 8:
                    return 68;
                    break;
                case 9:
                    return 19;
                    break;
                case 10:
                    this.popState();
                    this.begin('raw');
                    return 23;

                    break;
                case 11:
                    return 55;
                    break;
                case 12:
                    return 60;
                    break;
                case 13:
                    return 29;
                    break;
                case 14:
                    return 47;
                    break;
                case 15:
                    this.popState();return 44;
                    break;
                case 16:
                    this.popState();return 44;
                    break;
                case 17:
                    return 34;
                    break;
                case 18:
                    return 39;
                    break;
                case 19:
                    return 51;
                    break;
                case 20:
                    return 48;
                    break;
                case 21:
                    this.unput(yy_.yytext);
                    this.popState();
                    this.begin('com');

                    break;
                case 22:
                    this.popState();
                    return 14;

                    break;
                case 23:
                    return 48;
                    break;
                case 24:
                    return 73;
                    break;
                case 25:
                    return 72;
                    break;
                case 26:
                    return 72;
                    break;
                case 27:
                    return 87;
                    break;
                case 28:
                    // ignore whitespace
                    break;
                case 29:
                    this.popState();return 54;
                    break;
                case 30:
                    this.popState();return 33;
                    break;
                case 31:
                    yy_.yytext = strip(1, 2).replace(/\\"/g, '"');return 80;
                    break;
                case 32:
                    yy_.yytext = strip(1, 2).replace(/\\'/g, "'");return 80;
                    break;
                case 33:
                    return 85;
                    break;
                case 34:
                    return 82;
                    break;
                case 35:
                    return 82;
                    break;
                case 36:
                    return 83;
                    break;
                case 37:
                    return 84;
                    break;
                case 38:
                    return 81;
                    break;
                case 39:
                    return 75;
                    break;
                case 40:
                    return 77;
                    break;
                case 41:
                    return 72;
                    break;
                case 42:
                    yy_.yytext = yy_.yytext.replace(/\\([\\\]])/g, '$1');return 72;
                    break;
                case 43:
                    return 'INVALID';
                    break;
                case 44:
                    return 5;
                    break;
            }
        };
        lexer.rules = [/^(?:[^\x00]*?(?=(\{\{)))/, /^(?:[^\x00]+)/, /^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/, /^(?:\{\{\{\{(?=[^/]))/, /^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/, /^(?:[^\x00]+?(?=(\{\{\{\{)))/, /^(?:[\s\S]*?--(~)?\}\})/, /^(?:\()/, /^(?:\))/, /^(?:\{\{\{\{)/, /^(?:\}\}\}\})/, /^(?:\{\{(~)?>)/, /^(?:\{\{(~)?#>)/, /^(?:\{\{(~)?#\*?)/, /^(?:\{\{(~)?\/)/, /^(?:\{\{(~)?\^\s*(~)?\}\})/, /^(?:\{\{(~)?\s*else\s*(~)?\}\})/, /^(?:\{\{(~)?\^)/, /^(?:\{\{(~)?\s*else\b)/, /^(?:\{\{(~)?\{)/, /^(?:\{\{(~)?&)/, /^(?:\{\{(~)?!--)/, /^(?:\{\{(~)?![\s\S]*?\}\})/, /^(?:\{\{(~)?\*?)/, /^(?:=)/, /^(?:\.\.)/, /^(?:\.(?=([=~}\s\/.)|])))/, /^(?:[\/.])/, /^(?:\s+)/, /^(?:\}(~)?\}\})/, /^(?:(~)?\}\})/, /^(?:"(\\["]|[^"])*")/, /^(?:'(\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~}\s)])))/, /^(?:false(?=([~}\s)])))/, /^(?:undefined(?=([~}\s)])))/, /^(?:null(?=([~}\s)])))/, /^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/, /^(?:as\s+\|)/, /^(?:\|)/, /^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/, /^(?:\[(\\\]|[^\]])*\])/, /^(?:.)/, /^(?:$)/];
        lexer.conditions = { "mu": { "rules": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "inclusive": false }, "emu": { "rules": [2], "inclusive": false }, "com": { "rules": [6], "inclusive": false }, "raw": { "rules": [3, 4, 5], "inclusive": false }, "INITIAL": { "rules": [0, 1, 44], "inclusive": true } };
        return lexer;
    })();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }Parser.prototype = parser;parser.Parser = Parser;
    return new Parser();
})();exports["default"] = handlebars;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/compiler/visitor.js":
/*!*************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/compiler/visitor.js ***!
  \*************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _exception = __webpack_require__(/*! ../exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _exception2 = _interopRequireDefault(_exception);

function Visitor() {
  this.parents = [];
}

Visitor.prototype = {
  constructor: Visitor,
  mutating: false,

  // Visits a given value. If mutating, will replace the value if necessary.
  acceptKey: function acceptKey(node, name) {
    var value = this.accept(node[name]);
    if (this.mutating) {
      // Hacky sanity check: This may have a few false positives for type for the helper
      // methods but will generally do the right thing without a lot of overhead.
      if (value && !Visitor.prototype[value.type]) {
        throw new _exception2['default']('Unexpected node type "' + value.type + '" found when accepting ' + name + ' on ' + node.type);
      }
      node[name] = value;
    }
  },

  // Performs an accept operation with added sanity check to ensure
  // required keys are not removed.
  acceptRequired: function acceptRequired(node, name) {
    this.acceptKey(node, name);

    if (!node[name]) {
      throw new _exception2['default'](node.type + ' requires ' + name);
    }
  },

  // Traverses a given array. If mutating, empty respnses will be removed
  // for child elements.
  acceptArray: function acceptArray(array) {
    for (var i = 0, l = array.length; i < l; i++) {
      this.acceptKey(array, i);

      if (!array[i]) {
        array.splice(i, 1);
        i--;
        l--;
      }
    }
  },

  accept: function accept(object) {
    if (!object) {
      return;
    }

    /* istanbul ignore next: Sanity code */
    if (!this[object.type]) {
      throw new _exception2['default']('Unknown type: ' + object.type, object);
    }

    if (this.current) {
      this.parents.unshift(this.current);
    }
    this.current = object;

    var ret = this[object.type](object);

    this.current = this.parents.shift();

    if (!this.mutating || ret) {
      return ret;
    } else if (ret !== false) {
      return object;
    }
  },

  Program: function Program(program) {
    this.acceptArray(program.body);
  },

  MustacheStatement: visitSubExpression,
  Decorator: visitSubExpression,

  BlockStatement: visitBlock,
  DecoratorBlock: visitBlock,

  PartialStatement: visitPartial,
  PartialBlockStatement: function PartialBlockStatement(partial) {
    visitPartial.call(this, partial);

    this.acceptKey(partial, 'program');
  },

  ContentStatement: function ContentStatement() /* content */{},
  CommentStatement: function CommentStatement() /* comment */{},

  SubExpression: visitSubExpression,

  PathExpression: function PathExpression() /* path */{},

  StringLiteral: function StringLiteral() /* string */{},
  NumberLiteral: function NumberLiteral() /* number */{},
  BooleanLiteral: function BooleanLiteral() /* bool */{},
  UndefinedLiteral: function UndefinedLiteral() /* literal */{},
  NullLiteral: function NullLiteral() /* literal */{},

  Hash: function Hash(hash) {
    this.acceptArray(hash.pairs);
  },
  HashPair: function HashPair(pair) {
    this.acceptRequired(pair, 'value');
  }
};

function visitSubExpression(mustache) {
  this.acceptRequired(mustache, 'path');
  this.acceptArray(mustache.params);
  this.acceptKey(mustache, 'hash');
}
function visitBlock(block) {
  visitSubExpression.call(this, block);

  this.acceptKey(block, 'program');
  this.acceptKey(block, 'inverse');
}
function visitPartial(partial) {
  this.acceptRequired(partial, 'name');
  this.acceptArray(partial.params);
  this.acceptKey(partial, 'hash');
}

exports["default"] = Visitor;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/compiler/whitespace-control.js":
/*!************************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/compiler/whitespace-control.js ***!
  \************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _visitor = __webpack_require__(/*! ./visitor */ "./node_modules/handlebars/dist/cjs/handlebars/compiler/visitor.js");

var _visitor2 = _interopRequireDefault(_visitor);

function WhitespaceControl() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  this.options = options;
}
WhitespaceControl.prototype = new _visitor2['default']();

WhitespaceControl.prototype.Program = function (program) {
  var doStandalone = !this.options.ignoreStandalone;

  var isRoot = !this.isRootSeen;
  this.isRootSeen = true;

  var body = program.body;
  for (var i = 0, l = body.length; i < l; i++) {
    var current = body[i],
        strip = this.accept(current);

    if (!strip) {
      continue;
    }

    var _isPrevWhitespace = isPrevWhitespace(body, i, isRoot),
        _isNextWhitespace = isNextWhitespace(body, i, isRoot),
        openStandalone = strip.openStandalone && _isPrevWhitespace,
        closeStandalone = strip.closeStandalone && _isNextWhitespace,
        inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;

    if (strip.close) {
      omitRight(body, i, true);
    }
    if (strip.open) {
      omitLeft(body, i, true);
    }

    if (doStandalone && inlineStandalone) {
      omitRight(body, i);

      if (omitLeft(body, i)) {
        // If we are on a standalone node, save the indent info for partials
        if (current.type === 'PartialStatement') {
          // Pull out the whitespace from the final line
          current.indent = /([ \t]+$)/.exec(body[i - 1].original)[1];
        }
      }
    }
    if (doStandalone && openStandalone) {
      omitRight((current.program || current.inverse).body);

      // Strip out the previous content node if it's whitespace only
      omitLeft(body, i);
    }
    if (doStandalone && closeStandalone) {
      // Always strip the next node
      omitRight(body, i);

      omitLeft((current.inverse || current.program).body);
    }
  }

  return program;
};

WhitespaceControl.prototype.BlockStatement = WhitespaceControl.prototype.DecoratorBlock = WhitespaceControl.prototype.PartialBlockStatement = function (block) {
  this.accept(block.program);
  this.accept(block.inverse);

  // Find the inverse program that is involed with whitespace stripping.
  var program = block.program || block.inverse,
      inverse = block.program && block.inverse,
      firstInverse = inverse,
      lastInverse = inverse;

  if (inverse && inverse.chained) {
    firstInverse = inverse.body[0].program;

    // Walk the inverse chain to find the last inverse that is actually in the chain.
    while (lastInverse.chained) {
      lastInverse = lastInverse.body[lastInverse.body.length - 1].program;
    }
  }

  var strip = {
    open: block.openStrip.open,
    close: block.closeStrip.close,

    // Determine the standalone candiacy. Basically flag our content as being possibly standalone
    // so our parent can determine if we actually are standalone
    openStandalone: isNextWhitespace(program.body),
    closeStandalone: isPrevWhitespace((firstInverse || program).body)
  };

  if (block.openStrip.close) {
    omitRight(program.body, null, true);
  }

  if (inverse) {
    var inverseStrip = block.inverseStrip;

    if (inverseStrip.open) {
      omitLeft(program.body, null, true);
    }

    if (inverseStrip.close) {
      omitRight(firstInverse.body, null, true);
    }
    if (block.closeStrip.open) {
      omitLeft(lastInverse.body, null, true);
    }

    // Find standalone else statments
    if (!this.options.ignoreStandalone && isPrevWhitespace(program.body) && isNextWhitespace(firstInverse.body)) {
      omitLeft(program.body);
      omitRight(firstInverse.body);
    }
  } else if (block.closeStrip.open) {
    omitLeft(program.body, null, true);
  }

  return strip;
};

WhitespaceControl.prototype.Decorator = WhitespaceControl.prototype.MustacheStatement = function (mustache) {
  return mustache.strip;
};

WhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function (node) {
  /* istanbul ignore next */
  var strip = node.strip || {};
  return {
    inlineStandalone: true,
    open: strip.open,
    close: strip.close
  };
};

function isPrevWhitespace(body, i, isRoot) {
  if (i === undefined) {
    i = body.length;
  }

  // Nodes that end with newlines are considered whitespace (but are special
  // cased for strip operations)
  var prev = body[i - 1],
      sibling = body[i - 2];
  if (!prev) {
    return isRoot;
  }

  if (prev.type === 'ContentStatement') {
    return (sibling || !isRoot ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(prev.original);
  }
}
function isNextWhitespace(body, i, isRoot) {
  if (i === undefined) {
    i = -1;
  }

  var next = body[i + 1],
      sibling = body[i + 2];
  if (!next) {
    return isRoot;
  }

  if (next.type === 'ContentStatement') {
    return (sibling || !isRoot ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(next.original);
  }
}

// Marks the node to the right of the position as omitted.
// I.e. {{foo}}' ' will mark the ' ' node as omitted.
//
// If i is undefined, then the first child will be marked as such.
//
// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
// content is met.
function omitRight(body, i, multiple) {
  var current = body[i == null ? 0 : i + 1];
  if (!current || current.type !== 'ContentStatement' || !multiple && current.rightStripped) {
    return;
  }

  var original = current.value;
  current.value = current.value.replace(multiple ? /^\s+/ : /^[ \t]*\r?\n?/, '');
  current.rightStripped = current.value !== original;
}

// Marks the node to the left of the position as omitted.
// I.e. ' '{{foo}} will mark the ' ' node as omitted.
//
// If i is undefined then the last child will be marked as such.
//
// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
// content is met.
function omitLeft(body, i, multiple) {
  var current = body[i == null ? body.length - 1 : i - 1];
  if (!current || current.type !== 'ContentStatement' || !multiple && current.leftStripped) {
    return;
  }

  // We omit the last node if it's whitespace only and not preceded by a non-content node.
  var original = current.value;
  current.value = current.value.replace(multiple ? /\s+$/ : /[ \t]+$/, '');
  current.leftStripped = current.value !== original;
  return current.leftStripped;
}

exports["default"] = WhitespaceControl;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/decorators.js":
/*!*******************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/decorators.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
exports.registerDefaultDecorators = registerDefaultDecorators;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _decoratorsInline = __webpack_require__(/*! ./decorators/inline */ "./node_modules/handlebars/dist/cjs/handlebars/decorators/inline.js");

var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);

function registerDefaultDecorators(instance) {
  _decoratorsInline2['default'](instance);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2RlY29yYXRvcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Z0NBQTJCLHFCQUFxQjs7OztBQUV6QyxTQUFTLHlCQUF5QixDQUFDLFFBQVEsRUFBRTtBQUNsRCxnQ0FBZSxRQUFRLENBQUMsQ0FBQztDQUMxQiIsImZpbGUiOiJkZWNvcmF0b3JzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJlZ2lzdGVySW5saW5lIGZyb20gJy4vZGVjb3JhdG9ycy9pbmxpbmUnO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9ycyhpbnN0YW5jZSkge1xuICByZWdpc3RlcklubGluZShpbnN0YW5jZSk7XG59XG4iXX0=


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/decorators/inline.js":
/*!**************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/decorators/inline.js ***!
  \**************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

exports["default"] = function (instance) {
  instance.registerDecorator('inline', function (fn, props, container, options) {
    var ret = fn;
    if (!props.partials) {
      props.partials = {};
      ret = function (context, options) {
        // Create a new partials stack frame prior to exec.
        var original = container.partials;
        container.partials = _utils.extend({}, original, props.partials);
        var ret = fn(context, options);
        container.partials = original;
        return ret;
      };
    }

    props.partials[options.args[0]] = options.fn;

    return ret;
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2RlY29yYXRvcnMvaW5saW5lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQXVCLFVBQVU7O3FCQUVsQixVQUFTLFFBQVEsRUFBRTtBQUNoQyxVQUFRLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLFVBQVMsRUFBRSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFO0FBQzNFLFFBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUNiLFFBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFO0FBQ25CLFdBQUssQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBQ3BCLFNBQUcsR0FBRyxVQUFTLE9BQU8sRUFBRSxPQUFPLEVBQUU7O0FBRS9CLFlBQUksUUFBUSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUM7QUFDbEMsaUJBQVMsQ0FBQyxRQUFRLEdBQUcsY0FBTyxFQUFFLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMxRCxZQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQy9CLGlCQUFTLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztBQUM5QixlQUFPLEdBQUcsQ0FBQztPQUNaLENBQUM7S0FDSDs7QUFFRCxTQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDOztBQUU3QyxXQUFPLEdBQUcsQ0FBQztHQUNaLENBQUMsQ0FBQztDQUNKIiwiZmlsZSI6ImlubGluZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4dGVuZCB9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJEZWNvcmF0b3IoJ2lubGluZScsIGZ1bmN0aW9uKGZuLCBwcm9wcywgY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICAgbGV0IHJldCA9IGZuO1xuICAgIGlmICghcHJvcHMucGFydGlhbHMpIHtcbiAgICAgIHByb3BzLnBhcnRpYWxzID0ge307XG4gICAgICByZXQgPSBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgICAgIC8vIENyZWF0ZSBhIG5ldyBwYXJ0aWFscyBzdGFjayBmcmFtZSBwcmlvciB0byBleGVjLlxuICAgICAgICBsZXQgb3JpZ2luYWwgPSBjb250YWluZXIucGFydGlhbHM7XG4gICAgICAgIGNvbnRhaW5lci5wYXJ0aWFscyA9IGV4dGVuZCh7fSwgb3JpZ2luYWwsIHByb3BzLnBhcnRpYWxzKTtcbiAgICAgICAgbGV0IHJldCA9IGZuKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBvcmlnaW5hbDtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcHJvcHMucGFydGlhbHNbb3B0aW9ucy5hcmdzWzBdXSA9IG9wdGlvbnMuZm47XG5cbiAgICByZXR1cm4gcmV0O1xuICB9KTtcbn1cbiJdfQ==


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/exception.js":
/*!******************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/exception.js ***!
  \******************************************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;
var errorProps = ['description', 'fileName', 'lineNumber', 'endLineNumber', 'message', 'name', 'number', 'stack'];

function Exception(message, node) {
  var loc = node && node.loc,
      line = undefined,
      endLineNumber = undefined,
      column = undefined,
      endColumn = undefined;

  if (loc) {
    line = loc.start.line;
    endLineNumber = loc.end.line;
    column = loc.start.column;
    endColumn = loc.end.column;

    message += ' - ' + line + ':' + column;
  }

  var tmp = Error.prototype.constructor.call(this, message);

  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
  for (var idx = 0; idx < errorProps.length; idx++) {
    this[errorProps[idx]] = tmp[errorProps[idx]];
  }

  /* istanbul ignore else */
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, Exception);
  }

  try {
    if (loc) {
      this.lineNumber = line;
      this.endLineNumber = endLineNumber;

      // Work around issue under safari where we can't directly set the column value
      /* istanbul ignore next */
      if (Object.defineProperty) {
        Object.defineProperty(this, 'column', {
          value: column,
          enumerable: true
        });
        Object.defineProperty(this, 'endColumn', {
          value: endColumn,
          enumerable: true
        });
      } else {
        this.column = column;
        this.endColumn = endColumn;
      }
    }
  } catch (nop) {
    /* Ignore if the browser is very particular */
  }
}

Exception.prototype = new Error();

exports["default"] = Exception;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2V4Y2VwdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxJQUFNLFVBQVUsR0FBRyxDQUNqQixhQUFhLEVBQ2IsVUFBVSxFQUNWLFlBQVksRUFDWixlQUFlLEVBQ2YsU0FBUyxFQUNULE1BQU0sRUFDTixRQUFRLEVBQ1IsT0FBTyxDQUNSLENBQUM7O0FBRUYsU0FBUyxTQUFTLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRTtBQUNoQyxNQUFJLEdBQUcsR0FBRyxJQUFJLElBQUksSUFBSSxDQUFDLEdBQUc7TUFDeEIsSUFBSSxZQUFBO01BQ0osYUFBYSxZQUFBO01BQ2IsTUFBTSxZQUFBO01BQ04sU0FBUyxZQUFBLENBQUM7O0FBRVosTUFBSSxHQUFHLEVBQUU7QUFDUCxRQUFJLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7QUFDdEIsaUJBQWEsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQztBQUM3QixVQUFNLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDMUIsYUFBUyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDOztBQUUzQixXQUFPLElBQUksS0FBSyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsTUFBTSxDQUFDO0dBQ3hDOztBQUVELE1BQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7OztBQUcxRCxPQUFLLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsRUFBRTtBQUNoRCxRQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0dBQzlDOzs7QUFHRCxNQUFJLEtBQUssQ0FBQyxpQkFBaUIsRUFBRTtBQUMzQixTQUFLLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0dBQzFDOztBQUVELE1BQUk7QUFDRixRQUFJLEdBQUcsRUFBRTtBQUNQLFVBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3ZCLFVBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDOzs7O0FBSW5DLFVBQUksTUFBTSxDQUFDLGNBQWMsRUFBRTtBQUN6QixjQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUU7QUFDcEMsZUFBSyxFQUFFLE1BQU07QUFDYixvQkFBVSxFQUFFLElBQUk7U0FDakIsQ0FBQyxDQUFDO0FBQ0gsY0FBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFO0FBQ3ZDLGVBQUssRUFBRSxTQUFTO0FBQ2hCLG9CQUFVLEVBQUUsSUFBSTtTQUNqQixDQUFDLENBQUM7T0FDSixNQUFNO0FBQ0wsWUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDckIsWUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7T0FDNUI7S0FDRjtHQUNGLENBQUMsT0FBTyxHQUFHLEVBQUU7O0dBRWI7Q0FDRjs7QUFFRCxTQUFTLENBQUMsU0FBUyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7O3FCQUVuQixTQUFTIiwiZmlsZSI6ImV4Y2VwdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGVycm9yUHJvcHMgPSBbXG4gICdkZXNjcmlwdGlvbicsXG4gICdmaWxlTmFtZScsXG4gICdsaW5lTnVtYmVyJyxcbiAgJ2VuZExpbmVOdW1iZXInLFxuICAnbWVzc2FnZScsXG4gICduYW1lJyxcbiAgJ251bWJlcicsXG4gICdzdGFjaydcbl07XG5cbmZ1bmN0aW9uIEV4Y2VwdGlvbihtZXNzYWdlLCBub2RlKSB7XG4gIGxldCBsb2MgPSBub2RlICYmIG5vZGUubG9jLFxuICAgIGxpbmUsXG4gICAgZW5kTGluZU51bWJlcixcbiAgICBjb2x1bW4sXG4gICAgZW5kQ29sdW1uO1xuXG4gIGlmIChsb2MpIHtcbiAgICBsaW5lID0gbG9jLnN0YXJ0LmxpbmU7XG4gICAgZW5kTGluZU51bWJlciA9IGxvYy5lbmQubGluZTtcbiAgICBjb2x1bW4gPSBsb2Muc3RhcnQuY29sdW1uO1xuICAgIGVuZENvbHVtbiA9IGxvYy5lbmQuY29sdW1uO1xuXG4gICAgbWVzc2FnZSArPSAnIC0gJyArIGxpbmUgKyAnOicgKyBjb2x1bW47XG4gIH1cblxuICBsZXQgdG1wID0gRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgbWVzc2FnZSk7XG5cbiAgLy8gVW5mb3J0dW5hdGVseSBlcnJvcnMgYXJlIG5vdCBlbnVtZXJhYmxlIGluIENocm9tZSAoYXQgbGVhc3QpLCBzbyBgZm9yIHByb3AgaW4gdG1wYCBkb2Vzbid0IHdvcmsuXG4gIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGVycm9yUHJvcHMubGVuZ3RoOyBpZHgrKykge1xuICAgIHRoaXNbZXJyb3JQcm9wc1tpZHhdXSA9IHRtcFtlcnJvclByb3BzW2lkeF1dO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgRXhjZXB0aW9uKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgaWYgKGxvYykge1xuICAgICAgdGhpcy5saW5lTnVtYmVyID0gbGluZTtcbiAgICAgIHRoaXMuZW5kTGluZU51bWJlciA9IGVuZExpbmVOdW1iZXI7XG5cbiAgICAgIC8vIFdvcmsgYXJvdW5kIGlzc3VlIHVuZGVyIHNhZmFyaSB3aGVyZSB3ZSBjYW4ndCBkaXJlY3RseSBzZXQgdGhlIGNvbHVtbiB2YWx1ZVxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdjb2x1bW4nLCB7XG4gICAgICAgICAgdmFsdWU6IGNvbHVtbixcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2VuZENvbHVtbicsIHtcbiAgICAgICAgICB2YWx1ZTogZW5kQ29sdW1uLFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNvbHVtbiA9IGNvbHVtbjtcbiAgICAgICAgdGhpcy5lbmRDb2x1bW4gPSBlbmRDb2x1bW47XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChub3ApIHtcbiAgICAvKiBJZ25vcmUgaWYgdGhlIGJyb3dzZXIgaXMgdmVyeSBwYXJ0aWN1bGFyICovXG4gIH1cbn1cblxuRXhjZXB0aW9uLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpO1xuXG5leHBvcnQgZGVmYXVsdCBFeGNlcHRpb247XG4iXX0=


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers.js":
/*!****************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
exports.registerDefaultHelpers = registerDefaultHelpers;
exports.moveHelperToHooks = moveHelperToHooks;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _helpersBlockHelperMissing = __webpack_require__(/*! ./helpers/block-helper-missing */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/block-helper-missing.js");

var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);

var _helpersEach = __webpack_require__(/*! ./helpers/each */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/each.js");

var _helpersEach2 = _interopRequireDefault(_helpersEach);

var _helpersHelperMissing = __webpack_require__(/*! ./helpers/helper-missing */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/helper-missing.js");

var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);

var _helpersIf = __webpack_require__(/*! ./helpers/if */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/if.js");

var _helpersIf2 = _interopRequireDefault(_helpersIf);

var _helpersLog = __webpack_require__(/*! ./helpers/log */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/log.js");

var _helpersLog2 = _interopRequireDefault(_helpersLog);

var _helpersLookup = __webpack_require__(/*! ./helpers/lookup */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/lookup.js");

var _helpersLookup2 = _interopRequireDefault(_helpersLookup);

var _helpersWith = __webpack_require__(/*! ./helpers/with */ "./node_modules/handlebars/dist/cjs/handlebars/helpers/with.js");

var _helpersWith2 = _interopRequireDefault(_helpersWith);

function registerDefaultHelpers(instance) {
  _helpersBlockHelperMissing2['default'](instance);
  _helpersEach2['default'](instance);
  _helpersHelperMissing2['default'](instance);
  _helpersIf2['default'](instance);
  _helpersLog2['default'](instance);
  _helpersLookup2['default'](instance);
  _helpersWith2['default'](instance);
}

function moveHelperToHooks(instance, helperName, keepHelper) {
  if (instance.helpers[helperName]) {
    instance.hooks[helperName] = instance.helpers[helperName];
    if (!keepHelper) {
      delete instance.helpers[helperName];
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O3lDQUF1QyxnQ0FBZ0M7Ozs7MkJBQzlDLGdCQUFnQjs7OztvQ0FDUCwwQkFBMEI7Ozs7eUJBQ3JDLGNBQWM7Ozs7MEJBQ2IsZUFBZTs7Ozs2QkFDWixrQkFBa0I7Ozs7MkJBQ3BCLGdCQUFnQjs7OztBQUVsQyxTQUFTLHNCQUFzQixDQUFDLFFBQVEsRUFBRTtBQUMvQyx5Q0FBMkIsUUFBUSxDQUFDLENBQUM7QUFDckMsMkJBQWEsUUFBUSxDQUFDLENBQUM7QUFDdkIsb0NBQXNCLFFBQVEsQ0FBQyxDQUFDO0FBQ2hDLHlCQUFXLFFBQVEsQ0FBQyxDQUFDO0FBQ3JCLDBCQUFZLFFBQVEsQ0FBQyxDQUFDO0FBQ3RCLDZCQUFlLFFBQVEsQ0FBQyxDQUFDO0FBQ3pCLDJCQUFhLFFBQVEsQ0FBQyxDQUFDO0NBQ3hCOztBQUVNLFNBQVMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7QUFDbEUsTUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFO0FBQ2hDLFlBQVEsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUMxRCxRQUFJLENBQUMsVUFBVSxFQUFFO0FBQ2YsYUFBTyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQ3JDO0dBQ0Y7Q0FDRiIsImZpbGUiOiJoZWxwZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJlZ2lzdGVyQmxvY2tIZWxwZXJNaXNzaW5nIGZyb20gJy4vaGVscGVycy9ibG9jay1oZWxwZXItbWlzc2luZyc7XG5pbXBvcnQgcmVnaXN0ZXJFYWNoIGZyb20gJy4vaGVscGVycy9lYWNoJztcbmltcG9ydCByZWdpc3RlckhlbHBlck1pc3NpbmcgZnJvbSAnLi9oZWxwZXJzL2hlbHBlci1taXNzaW5nJztcbmltcG9ydCByZWdpc3RlcklmIGZyb20gJy4vaGVscGVycy9pZic7XG5pbXBvcnQgcmVnaXN0ZXJMb2cgZnJvbSAnLi9oZWxwZXJzL2xvZyc7XG5pbXBvcnQgcmVnaXN0ZXJMb29rdXAgZnJvbSAnLi9oZWxwZXJzL2xvb2t1cCc7XG5pbXBvcnQgcmVnaXN0ZXJXaXRoIGZyb20gJy4vaGVscGVycy93aXRoJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyRGVmYXVsdEhlbHBlcnMoaW5zdGFuY2UpIHtcbiAgcmVnaXN0ZXJCbG9ja0hlbHBlck1pc3NpbmcoaW5zdGFuY2UpO1xuICByZWdpc3RlckVhY2goaW5zdGFuY2UpO1xuICByZWdpc3RlckhlbHBlck1pc3NpbmcoaW5zdGFuY2UpO1xuICByZWdpc3RlcklmKGluc3RhbmNlKTtcbiAgcmVnaXN0ZXJMb2coaW5zdGFuY2UpO1xuICByZWdpc3Rlckxvb2t1cChpbnN0YW5jZSk7XG4gIHJlZ2lzdGVyV2l0aChpbnN0YW5jZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlSGVscGVyVG9Ib29rcyhpbnN0YW5jZSwgaGVscGVyTmFtZSwga2VlcEhlbHBlcikge1xuICBpZiAoaW5zdGFuY2UuaGVscGVyc1toZWxwZXJOYW1lXSkge1xuICAgIGluc3RhbmNlLmhvb2tzW2hlbHBlck5hbWVdID0gaW5zdGFuY2UuaGVscGVyc1toZWxwZXJOYW1lXTtcbiAgICBpZiAoIWtlZXBIZWxwZXIpIHtcbiAgICAgIGRlbGV0ZSBpbnN0YW5jZS5oZWxwZXJzW2hlbHBlck5hbWVdO1xuICAgIH1cbiAgfVxufVxuIl19


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/block-helper-missing.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/block-helper-missing.js ***!
  \*************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

exports["default"] = function (instance) {
  instance.registerHelper('blockHelperMissing', function (context, options) {
    var inverse = options.inverse,
        fn = options.fn;

    if (context === true) {
      return fn(this);
    } else if (context === false || context == null) {
      return inverse(this);
    } else if (_utils.isArray(context)) {
      if (context.length > 0) {
        if (options.ids) {
          options.ids = [options.name];
        }

        return instance.helpers.each(context, options);
      } else {
        return inverse(this);
      }
    } else {
      if (options.data && options.ids) {
        var data = _utils.createFrame(options.data);
        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);
        options = { data: data };
      }

      return fn(context, options);
    }
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvYmxvY2staGVscGVyLW1pc3NpbmcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztxQkFBd0QsVUFBVTs7cUJBRW5ELFVBQVMsUUFBUSxFQUFFO0FBQ2hDLFVBQVEsQ0FBQyxjQUFjLENBQUMsb0JBQW9CLEVBQUUsVUFBUyxPQUFPLEVBQUUsT0FBTyxFQUFFO0FBQ3ZFLFFBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPO1FBQzNCLEVBQUUsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDOztBQUVsQixRQUFJLE9BQU8sS0FBSyxJQUFJLEVBQUU7QUFDcEIsYUFBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDakIsTUFBTSxJQUFJLE9BQU8sS0FBSyxLQUFLLElBQUksT0FBTyxJQUFJLElBQUksRUFBRTtBQUMvQyxhQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN0QixNQUFNLElBQUksZUFBUSxPQUFPLENBQUMsRUFBRTtBQUMzQixVQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBQ3RCLFlBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUNmLGlCQUFPLENBQUMsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlCOztBQUVELGVBQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO09BQ2hELE1BQU07QUFDTCxlQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztPQUN0QjtLQUNGLE1BQU07QUFDTCxVQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUMvQixZQUFJLElBQUksR0FBRyxtQkFBWSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDckMsWUFBSSxDQUFDLFdBQVcsR0FBRyx5QkFDakIsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQ3hCLE9BQU8sQ0FBQyxJQUFJLENBQ2IsQ0FBQztBQUNGLGVBQU8sR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztPQUMxQjs7QUFFRCxhQUFPLEVBQUUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDN0I7R0FDRixDQUFDLENBQUM7Q0FDSiIsImZpbGUiOiJibG9jay1oZWxwZXItbWlzc2luZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFwcGVuZENvbnRleHRQYXRoLCBjcmVhdGVGcmFtZSwgaXNBcnJheSB9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2Jsb2NrSGVscGVyTWlzc2luZycsIGZ1bmN0aW9uKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBsZXQgaW52ZXJzZSA9IG9wdGlvbnMuaW52ZXJzZSxcbiAgICAgIGZuID0gb3B0aW9ucy5mbjtcblxuICAgIGlmIChjb250ZXh0ID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gZm4odGhpcyk7XG4gICAgfSBlbHNlIGlmIChjb250ZXh0ID09PSBmYWxzZSB8fCBjb250ZXh0ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShjb250ZXh0KSkge1xuICAgICAgaWYgKGNvbnRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAob3B0aW9ucy5pZHMpIHtcbiAgICAgICAgICBvcHRpb25zLmlkcyA9IFtvcHRpb25zLm5hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLmhlbHBlcnMuZWFjaChjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIGxldCBkYXRhID0gY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoKFxuICAgICAgICAgIG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCxcbiAgICAgICAgICBvcHRpb25zLm5hbWVcbiAgICAgICAgKTtcbiAgICAgICAgb3B0aW9ucyA9IHsgZGF0YTogZGF0YSB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm4oY29udGV4dCwgb3B0aW9ucyk7XG4gICAgfVxuICB9KTtcbn1cbiJdfQ==


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/each.js":
/*!*********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/each.js ***!
  \*********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var _exception = __webpack_require__(/*! ../exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _exception2 = _interopRequireDefault(_exception);

exports["default"] = function (instance) {
  instance.registerHelper('each', function (context, options) {
    if (!options) {
      throw new _exception2['default']('Must pass iterator to #each');
    }

    var fn = options.fn,
        inverse = options.inverse,
        i = 0,
        ret = '',
        data = undefined,
        contextPath = undefined;

    if (options.data && options.ids) {
      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
    }

    if (_utils.isFunction(context)) {
      context = context.call(this);
    }

    if (options.data) {
      data = _utils.createFrame(options.data);
    }

    function execIteration(field, index, last) {
      if (data) {
        data.key = field;
        data.index = index;
        data.first = index === 0;
        data.last = !!last;

        if (contextPath) {
          data.contextPath = contextPath + field;
        }
      }

      ret = ret + fn(context[field], {
        data: data,
        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])
      });
    }

    if (context && typeof context === 'object') {
      if (_utils.isArray(context)) {
        for (var j = context.length; i < j; i++) {
          if (i in context) {
            execIteration(i, i, i === context.length - 1);
          }
        }
      } else if (typeof Symbol === 'function' && context[Symbol.iterator]) {
        var newContext = [];
        var iterator = context[Symbol.iterator]();
        for (var it = iterator.next(); !it.done; it = iterator.next()) {
          newContext.push(it.value);
        }
        context = newContext;
        for (var j = context.length; i < j; i++) {
          execIteration(i, i, i === context.length - 1);
        }
      } else {
        (function () {
          var priorKey = undefined;

          Object.keys(context).forEach(function (key) {
            // We're running the iterations one step out of sync so we can detect
            // the last iteration without have to scan the object twice and create
            // an itermediate keys array.
            if (priorKey !== undefined) {
              execIteration(priorKey, i - 1);
            }
            priorKey = key;
            i++;
          });
          if (priorKey !== undefined) {
            execIteration(priorKey, i - 1, true);
          }
        })();
      }
    }

    if (i === 0) {
      ret = inverse(this);
    }

    return ret;
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvZWFjaC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O3FCQU1PLFVBQVU7O3lCQUNLLGNBQWM7Ozs7cUJBRXJCLFVBQVMsUUFBUSxFQUFFO0FBQ2hDLFVBQVEsQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLFVBQVMsT0FBTyxFQUFFLE9BQU8sRUFBRTtBQUN6RCxRQUFJLENBQUMsT0FBTyxFQUFFO0FBQ1osWUFBTSwyQkFBYyw2QkFBNkIsQ0FBQyxDQUFDO0tBQ3BEOztBQUVELFFBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQyxFQUFFO1FBQ2pCLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTztRQUN6QixDQUFDLEdBQUcsQ0FBQztRQUNMLEdBQUcsR0FBRyxFQUFFO1FBQ1IsSUFBSSxZQUFBO1FBQ0osV0FBVyxZQUFBLENBQUM7O0FBRWQsUUFBSSxPQUFPLENBQUMsSUFBSSxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUU7QUFDL0IsaUJBQVcsR0FDVCx5QkFBa0IsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztLQUNyRTs7QUFFRCxRQUFJLGtCQUFXLE9BQU8sQ0FBQyxFQUFFO0FBQ3ZCLGFBQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzlCOztBQUVELFFBQUksT0FBTyxDQUFDLElBQUksRUFBRTtBQUNoQixVQUFJLEdBQUcsbUJBQVksT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ2xDOztBQUVELGFBQVMsYUFBYSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO0FBQ3pDLFVBQUksSUFBSSxFQUFFO0FBQ1IsWUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7QUFDakIsWUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDbkIsWUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLEtBQUssQ0FBQyxDQUFDO0FBQ3pCLFlBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQzs7QUFFbkIsWUFBSSxXQUFXLEVBQUU7QUFDZixjQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsR0FBRyxLQUFLLENBQUM7U0FDeEM7T0FDRjs7QUFFRCxTQUFHLEdBQ0QsR0FBRyxHQUNILEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDakIsWUFBSSxFQUFFLElBQUk7QUFDVixtQkFBVyxFQUFFLG1CQUNYLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUN2QixDQUFDLFdBQVcsR0FBRyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQzVCO09BQ0YsQ0FBQyxDQUFDO0tBQ047O0FBRUQsUUFBSSxPQUFPLElBQUksT0FBTyxPQUFPLEtBQUssUUFBUSxFQUFFO0FBQzFDLFVBQUksZUFBUSxPQUFPLENBQUMsRUFBRTtBQUNwQixhQUFLLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN2QyxjQUFJLENBQUMsSUFBSSxPQUFPLEVBQUU7QUFDaEIseUJBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1dBQy9DO1NBQ0Y7T0FDRixNQUFNLElBQUksT0FBTyxNQUFNLEtBQUssVUFBVSxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDbkUsWUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDO0FBQ3RCLFlBQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztBQUM1QyxhQUFLLElBQUksRUFBRSxHQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxHQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRTtBQUM3RCxvQkFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0I7QUFDRCxlQUFPLEdBQUcsVUFBVSxDQUFDO0FBQ3JCLGFBQUssSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ3ZDLHVCQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztTQUMvQztPQUNGLE1BQU07O0FBQ0wsY0FBSSxRQUFRLFlBQUEsQ0FBQzs7QUFFYixnQkFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxHQUFHLEVBQUk7Ozs7QUFJbEMsZ0JBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtBQUMxQiwyQkFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDaEM7QUFDRCxvQkFBUSxHQUFHLEdBQUcsQ0FBQztBQUNmLGFBQUMsRUFBRSxDQUFDO1dBQ0wsQ0FBQyxDQUFDO0FBQ0gsY0FBSSxRQUFRLEtBQUssU0FBUyxFQUFFO0FBQzFCLHlCQUFhLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7V0FDdEM7O09BQ0Y7S0FDRjs7QUFFRCxRQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDWCxTQUFHLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3JCOztBQUVELFdBQU8sR0FBRyxDQUFDO0dBQ1osQ0FBQyxDQUFDO0NBQ0oiLCJmaWxlIjoiZWFjaC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGFwcGVuZENvbnRleHRQYXRoLFxuICBibG9ja1BhcmFtcyxcbiAgY3JlYXRlRnJhbWUsXG4gIGlzQXJyYXksXG4gIGlzRnVuY3Rpb25cbn0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IEV4Y2VwdGlvbiBmcm9tICcuLi9leGNlcHRpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignZWFjaCcsIGZ1bmN0aW9uKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ011c3QgcGFzcyBpdGVyYXRvciB0byAjZWFjaCcpO1xuICAgIH1cblxuICAgIGxldCBmbiA9IG9wdGlvbnMuZm4sXG4gICAgICBpbnZlcnNlID0gb3B0aW9ucy5pbnZlcnNlLFxuICAgICAgaSA9IDAsXG4gICAgICByZXQgPSAnJyxcbiAgICAgIGRhdGEsXG4gICAgICBjb250ZXh0UGF0aDtcblxuICAgIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5pZHMpIHtcbiAgICAgIGNvbnRleHRQYXRoID1cbiAgICAgICAgYXBwZW5kQ29udGV4dFBhdGgob3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoLCBvcHRpb25zLmlkc1swXSkgKyAnLic7XG4gICAgfVxuXG4gICAgaWYgKGlzRnVuY3Rpb24oY29udGV4dCkpIHtcbiAgICAgIGNvbnRleHQgPSBjb250ZXh0LmNhbGwodGhpcyk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZGF0YSkge1xuICAgICAgZGF0YSA9IGNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXhlY0l0ZXJhdGlvbihmaWVsZCwgaW5kZXgsIGxhc3QpIHtcbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIGRhdGEua2V5ID0gZmllbGQ7XG4gICAgICAgIGRhdGEuaW5kZXggPSBpbmRleDtcbiAgICAgICAgZGF0YS5maXJzdCA9IGluZGV4ID09PSAwO1xuICAgICAgICBkYXRhLmxhc3QgPSAhIWxhc3Q7XG5cbiAgICAgICAgaWYgKGNvbnRleHRQYXRoKSB7XG4gICAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IGNvbnRleHRQYXRoICsgZmllbGQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0ID1cbiAgICAgICAgcmV0ICtcbiAgICAgICAgZm4oY29udGV4dFtmaWVsZF0sIHtcbiAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgIGJsb2NrUGFyYW1zOiBibG9ja1BhcmFtcyhcbiAgICAgICAgICAgIFtjb250ZXh0W2ZpZWxkXSwgZmllbGRdLFxuICAgICAgICAgICAgW2NvbnRleHRQYXRoICsgZmllbGQsIG51bGxdXG4gICAgICAgICAgKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoY29udGV4dCAmJiB0eXBlb2YgY29udGV4dCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChpc0FycmF5KGNvbnRleHQpKSB7XG4gICAgICAgIGZvciAobGV0IGogPSBjb250ZXh0Lmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgICAgIGlmIChpIGluIGNvbnRleHQpIHtcbiAgICAgICAgICAgIGV4ZWNJdGVyYXRpb24oaSwgaSwgaSA9PT0gY29udGV4dC5sZW5ndGggLSAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBjb250ZXh0W1N5bWJvbC5pdGVyYXRvcl0pIHtcbiAgICAgICAgY29uc3QgbmV3Q29udGV4dCA9IFtdO1xuICAgICAgICBjb25zdCBpdGVyYXRvciA9IGNvbnRleHRbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgICBmb3IgKGxldCBpdCA9IGl0ZXJhdG9yLm5leHQoKTsgIWl0LmRvbmU7IGl0ID0gaXRlcmF0b3IubmV4dCgpKSB7XG4gICAgICAgICAgbmV3Q29udGV4dC5wdXNoKGl0LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0ID0gbmV3Q29udGV4dDtcbiAgICAgICAgZm9yIChsZXQgaiA9IGNvbnRleHQubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgICAgZXhlY0l0ZXJhdGlvbihpLCBpLCBpID09PSBjb250ZXh0Lmxlbmd0aCAtIDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgcHJpb3JLZXk7XG5cbiAgICAgICAgT2JqZWN0LmtleXMoY29udGV4dCkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgIC8vIFdlJ3JlIHJ1bm5pbmcgdGhlIGl0ZXJhdGlvbnMgb25lIHN0ZXAgb3V0IG9mIHN5bmMgc28gd2UgY2FuIGRldGVjdFxuICAgICAgICAgIC8vIHRoZSBsYXN0IGl0ZXJhdGlvbiB3aXRob3V0IGhhdmUgdG8gc2NhbiB0aGUgb2JqZWN0IHR3aWNlIGFuZCBjcmVhdGVcbiAgICAgICAgICAvLyBhbiBpdGVybWVkaWF0ZSBrZXlzIGFycmF5LlxuICAgICAgICAgIGlmIChwcmlvcktleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBleGVjSXRlcmF0aW9uKHByaW9yS2V5LCBpIC0gMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByaW9yS2V5ID0ga2V5O1xuICAgICAgICAgIGkrKztcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwcmlvcktleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZXhlY0l0ZXJhdGlvbihwcmlvcktleSwgaSAtIDEsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGkgPT09IDApIHtcbiAgICAgIHJldCA9IGludmVyc2UodGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbiAgfSk7XG59XG4iXX0=


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/helper-missing.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/helper-missing.js ***!
  \*******************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _exception = __webpack_require__(/*! ../exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _exception2 = _interopRequireDefault(_exception);

exports["default"] = function (instance) {
  instance.registerHelper('helperMissing', function () /* [args, ]options */{
    if (arguments.length === 1) {
      // A missing field in a {{foo}} construct.
      return undefined;
    } else {
      // Someone is actually trying to call something, blow up.
      throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
    }
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvaGVscGVyLW1pc3NpbmcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozt5QkFBc0IsY0FBYzs7OztxQkFFckIsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxlQUFlLEVBQUUsaUNBQWdDO0FBQ3ZFLFFBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7O0FBRTFCLGFBQU8sU0FBUyxDQUFDO0tBQ2xCLE1BQU07O0FBRUwsWUFBTSwyQkFDSixtQkFBbUIsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUNqRSxDQUFDO0tBQ0g7R0FDRixDQUFDLENBQUM7Q0FDSiIsImZpbGUiOiJoZWxwZXItbWlzc2luZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi4vZXhjZXB0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2hlbHBlck1pc3NpbmcnLCBmdW5jdGlvbigvKiBbYXJncywgXW9wdGlvbnMgKi8pIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgLy8gQSBtaXNzaW5nIGZpZWxkIGluIGEge3tmb299fSBjb25zdHJ1Y3QuXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTb21lb25lIGlzIGFjdHVhbGx5IHRyeWluZyB0byBjYWxsIHNvbWV0aGluZywgYmxvdyB1cC5cbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXG4gICAgICAgICdNaXNzaW5nIGhlbHBlcjogXCInICsgYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXS5uYW1lICsgJ1wiJ1xuICAgICAgKTtcbiAgICB9XG4gIH0pO1xufVxuIl19


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/if.js":
/*!*******************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/if.js ***!
  \*******************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var _exception = __webpack_require__(/*! ../exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _exception2 = _interopRequireDefault(_exception);

exports["default"] = function (instance) {
  instance.registerHelper('if', function (conditional, options) {
    if (arguments.length != 2) {
      throw new _exception2['default']('#if requires exactly one argument');
    }
    if (_utils.isFunction(conditional)) {
      conditional = conditional.call(this);
    }

    // Default behavior is to render the positive path if the value is truthy and not empty.
    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
      return options.inverse(this);
    } else {
      return options.fn(this);
    }
  });

  instance.registerHelper('unless', function (conditional, options) {
    if (arguments.length != 2) {
      throw new _exception2['default']('#unless requires exactly one argument');
    }
    return instance.helpers['if'].call(this, conditional, {
      fn: options.inverse,
      inverse: options.fn,
      hash: options.hash
    });
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvaWYuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztxQkFBb0MsVUFBVTs7eUJBQ3hCLGNBQWM7Ozs7cUJBRXJCLFVBQVMsUUFBUSxFQUFFO0FBQ2hDLFVBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFVBQVMsV0FBVyxFQUFFLE9BQU8sRUFBRTtBQUMzRCxRQUFJLFNBQVMsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO0FBQ3pCLFlBQU0sMkJBQWMsbUNBQW1DLENBQUMsQ0FBQztLQUMxRDtBQUNELFFBQUksa0JBQVcsV0FBVyxDQUFDLEVBQUU7QUFDM0IsaUJBQVcsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3RDOzs7OztBQUtELFFBQUksQUFBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFJLENBQUMsV0FBVyxJQUFLLGVBQVEsV0FBVyxDQUFDLEVBQUU7QUFDdkUsYUFBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzlCLE1BQU07QUFDTCxhQUFPLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDekI7R0FDRixDQUFDLENBQUM7O0FBRUgsVUFBUSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsVUFBUyxXQUFXLEVBQUUsT0FBTyxFQUFFO0FBQy9ELFFBQUksU0FBUyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7QUFDekIsWUFBTSwyQkFBYyx1Q0FBdUMsQ0FBQyxDQUFDO0tBQzlEO0FBQ0QsV0FBTyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFO0FBQ3BELFFBQUUsRUFBRSxPQUFPLENBQUMsT0FBTztBQUNuQixhQUFPLEVBQUUsT0FBTyxDQUFDLEVBQUU7QUFDbkIsVUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJO0tBQ25CLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQztDQUNKIiwiZmlsZSI6ImlmLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNFbXB0eSwgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCBFeGNlcHRpb24gZnJvbSAnLi4vZXhjZXB0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2lmJywgZnVuY3Rpb24oY29uZGl0aW9uYWwsIG9wdGlvbnMpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPSAyKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCcjaWYgcmVxdWlyZXMgZXhhY3RseSBvbmUgYXJndW1lbnQnKTtcbiAgICB9XG4gICAgaWYgKGlzRnVuY3Rpb24oY29uZGl0aW9uYWwpKSB7XG4gICAgICBjb25kaXRpb25hbCA9IGNvbmRpdGlvbmFsLmNhbGwodGhpcyk7XG4gICAgfVxuXG4gICAgLy8gRGVmYXVsdCBiZWhhdmlvciBpcyB0byByZW5kZXIgdGhlIHBvc2l0aXZlIHBhdGggaWYgdGhlIHZhbHVlIGlzIHRydXRoeSBhbmQgbm90IGVtcHR5LlxuICAgIC8vIFRoZSBgaW5jbHVkZVplcm9gIG9wdGlvbiBtYXkgYmUgc2V0IHRvIHRyZWF0IHRoZSBjb25kdGlvbmFsIGFzIHB1cmVseSBub3QgZW1wdHkgYmFzZWQgb24gdGhlXG4gICAgLy8gYmVoYXZpb3Igb2YgaXNFbXB0eS4gRWZmZWN0aXZlbHkgdGhpcyBkZXRlcm1pbmVzIGlmIDAgaXMgaGFuZGxlZCBieSB0aGUgcG9zaXRpdmUgcGF0aCBvciBuZWdhdGl2ZS5cbiAgICBpZiAoKCFvcHRpb25zLmhhc2guaW5jbHVkZVplcm8gJiYgIWNvbmRpdGlvbmFsKSB8fCBpc0VtcHR5KGNvbmRpdGlvbmFsKSkge1xuICAgICAgcmV0dXJuIG9wdGlvbnMuaW52ZXJzZSh0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9wdGlvbnMuZm4odGhpcyk7XG4gICAgfVxuICB9KTtcblxuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcigndW5sZXNzJywgZnVuY3Rpb24oY29uZGl0aW9uYWwsIG9wdGlvbnMpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPSAyKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCcjdW5sZXNzIHJlcXVpcmVzIGV4YWN0bHkgb25lIGFyZ3VtZW50Jyk7XG4gICAgfVxuICAgIHJldHVybiBpbnN0YW5jZS5oZWxwZXJzWydpZiddLmNhbGwodGhpcywgY29uZGl0aW9uYWwsIHtcbiAgICAgIGZuOiBvcHRpb25zLmludmVyc2UsXG4gICAgICBpbnZlcnNlOiBvcHRpb25zLmZuLFxuICAgICAgaGFzaDogb3B0aW9ucy5oYXNoXG4gICAgfSk7XG4gIH0pO1xufVxuIl19


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/log.js":
/*!********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/log.js ***!
  \********************************************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;

exports["default"] = function (instance) {
  instance.registerHelper('log', function () /* message, options */{
    var args = [undefined],
        options = arguments[arguments.length - 1];
    for (var i = 0; i < arguments.length - 1; i++) {
      args.push(arguments[i]);
    }

    var level = 1;
    if (options.hash.level != null) {
      level = options.hash.level;
    } else if (options.data && options.data.level != null) {
      level = options.data.level;
    }
    args[0] = level;

    instance.log.apply(instance, args);
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvbG9nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQWUsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsa0NBQWlDO0FBQzlELFFBQUksSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDO1FBQ3BCLE9BQU8sR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztBQUM1QyxTQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDN0MsVUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN6Qjs7QUFFRCxRQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDZCxRQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksRUFBRTtBQUM5QixXQUFLLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7S0FDNUIsTUFBTSxJQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxFQUFFO0FBQ3JELFdBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztLQUM1QjtBQUNELFFBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7O0FBRWhCLFlBQVEsQ0FBQyxHQUFHLE1BQUEsQ0FBWixRQUFRLEVBQVEsSUFBSSxDQUFDLENBQUM7R0FDdkIsQ0FBQyxDQUFDO0NBQ0oiLCJmaWxlIjoibG9nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2xvZycsIGZ1bmN0aW9uKC8qIG1lc3NhZ2UsIG9wdGlvbnMgKi8pIHtcbiAgICBsZXQgYXJncyA9IFt1bmRlZmluZWRdLFxuICAgICAgb3B0aW9ucyA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICB9XG5cbiAgICBsZXQgbGV2ZWwgPSAxO1xuICAgIGlmIChvcHRpb25zLmhhc2gubGV2ZWwgIT0gbnVsbCkge1xuICAgICAgbGV2ZWwgPSBvcHRpb25zLmhhc2gubGV2ZWw7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5kYXRhLmxldmVsICE9IG51bGwpIHtcbiAgICAgIGxldmVsID0gb3B0aW9ucy5kYXRhLmxldmVsO1xuICAgIH1cbiAgICBhcmdzWzBdID0gbGV2ZWw7XG5cbiAgICBpbnN0YW5jZS5sb2coLi4uYXJncyk7XG4gIH0pO1xufVxuIl19


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/lookup.js":
/*!***********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/lookup.js ***!
  \***********************************************************************/
/***/ ((module, exports) => {

"use strict";


exports.__esModule = true;

exports["default"] = function (instance) {
  instance.registerHelper('lookup', function (obj, field, options) {
    if (!obj) {
      // Note for 5.0: Change to "obj == null" in 5.0
      return obj;
    }
    return options.lookupProperty(obj, field);
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvbG9va3VwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQWUsVUFBUyxRQUFRLEVBQUU7QUFDaEMsVUFBUSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsVUFBUyxHQUFHLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRTtBQUM5RCxRQUFJLENBQUMsR0FBRyxFQUFFOztBQUVSLGFBQU8sR0FBRyxDQUFDO0tBQ1o7QUFDRCxXQUFPLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0dBQzNDLENBQUMsQ0FBQztDQUNKIiwiZmlsZSI6Imxvb2t1cC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdsb29rdXAnLCBmdW5jdGlvbihvYmosIGZpZWxkLCBvcHRpb25zKSB7XG4gICAgaWYgKCFvYmopIHtcbiAgICAgIC8vIE5vdGUgZm9yIDUuMDogQ2hhbmdlIHRvIFwib2JqID09IG51bGxcIiBpbiA1LjBcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zLmxvb2t1cFByb3BlcnR5KG9iaiwgZmllbGQpO1xuICB9KTtcbn1cbiJdfQ==


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/helpers/with.js":
/*!*********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/helpers/with.js ***!
  \*********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var _exception = __webpack_require__(/*! ../exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _exception2 = _interopRequireDefault(_exception);

exports["default"] = function (instance) {
  instance.registerHelper('with', function (context, options) {
    if (arguments.length != 2) {
      throw new _exception2['default']('#with requires exactly one argument');
    }
    if (_utils.isFunction(context)) {
      context = context.call(this);
    }

    var fn = options.fn;

    if (!_utils.isEmpty(context)) {
      var data = options.data;
      if (options.data && options.ids) {
        data = _utils.createFrame(options.data);
        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);
      }

      return fn(context, {
        data: data,
        blockParams: _utils.blockParams([context], [data && data.contextPath])
      });
    } else {
      return options.inverse(this);
    }
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2hlbHBlcnMvd2l0aC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O3FCQU1PLFVBQVU7O3lCQUNLLGNBQWM7Ozs7cUJBRXJCLFVBQVMsUUFBUSxFQUFFO0FBQ2hDLFVBQVEsQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLFVBQVMsT0FBTyxFQUFFLE9BQU8sRUFBRTtBQUN6RCxRQUFJLFNBQVMsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO0FBQ3pCLFlBQU0sMkJBQWMscUNBQXFDLENBQUMsQ0FBQztLQUM1RDtBQUNELFFBQUksa0JBQVcsT0FBTyxDQUFDLEVBQUU7QUFDdkIsYUFBTyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDOUI7O0FBRUQsUUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLEVBQUUsQ0FBQzs7QUFFcEIsUUFBSSxDQUFDLGVBQVEsT0FBTyxDQUFDLEVBQUU7QUFDckIsVUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztBQUN4QixVQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUMvQixZQUFJLEdBQUcsbUJBQVksT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pDLFlBQUksQ0FBQyxXQUFXLEdBQUcseUJBQ2pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUN4QixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUNmLENBQUM7T0FDSDs7QUFFRCxhQUFPLEVBQUUsQ0FBQyxPQUFPLEVBQUU7QUFDakIsWUFBSSxFQUFFLElBQUk7QUFDVixtQkFBVyxFQUFFLG1CQUFZLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO09BQ2hFLENBQUMsQ0FBQztLQUNKLE1BQU07QUFDTCxhQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDOUI7R0FDRixDQUFDLENBQUM7Q0FDSiIsImZpbGUiOiJ3aXRoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgYXBwZW5kQ29udGV4dFBhdGgsXG4gIGJsb2NrUGFyYW1zLFxuICBjcmVhdGVGcmFtZSxcbiAgaXNFbXB0eSxcbiAgaXNGdW5jdGlvblxufSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgRXhjZXB0aW9uIGZyb20gJy4uL2V4Y2VwdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCd3aXRoJywgZnVuY3Rpb24oY29udGV4dCwgb3B0aW9ucykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9IDIpIHtcbiAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJyN3aXRoIHJlcXVpcmVzIGV4YWN0bHkgb25lIGFyZ3VtZW50Jyk7XG4gICAgfVxuICAgIGlmIChpc0Z1bmN0aW9uKGNvbnRleHQpKSB7XG4gICAgICBjb250ZXh0ID0gY29udGV4dC5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIGxldCBmbiA9IG9wdGlvbnMuZm47XG5cbiAgICBpZiAoIWlzRW1wdHkoY29udGV4dCkpIHtcbiAgICAgIGxldCBkYXRhID0gb3B0aW9ucy5kYXRhO1xuICAgICAgaWYgKG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmlkcykge1xuICAgICAgICBkYXRhID0gY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoKFxuICAgICAgICAgIG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCxcbiAgICAgICAgICBvcHRpb25zLmlkc1swXVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm4oY29udGV4dCwge1xuICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICBibG9ja1BhcmFtczogYmxvY2tQYXJhbXMoW2NvbnRleHRdLCBbZGF0YSAmJiBkYXRhLmNvbnRleHRQYXRoXSlcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb3B0aW9ucy5pbnZlcnNlKHRoaXMpO1xuICAgIH1cbiAgfSk7XG59XG4iXX0=


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/internal/create-new-lookup-object.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/internal/create-new-lookup-object.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
exports.createNewLookupObject = createNewLookupObject;

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

/**
 * Create a new object with "null"-prototype to avoid truthy results on prototype properties.
 * The resulting object can be used with "object[property]" to check if a property exists
 * @param {...object} sources a varargs parameter of source objects that will be merged
 * @returns {object}
 */

function createNewLookupObject() {
  for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {
    sources[_key] = arguments[_key];
  }

  return _utils.extend.apply(undefined, [Object.create(null)].concat(sources));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2ludGVybmFsL2NyZWF0ZS1uZXctbG9va3VwLW9iamVjdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztxQkFBdUIsVUFBVTs7Ozs7Ozs7O0FBUTFCLFNBQVMscUJBQXFCLEdBQWE7b0NBQVQsT0FBTztBQUFQLFdBQU87OztBQUM5QyxTQUFPLGdDQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQUssT0FBTyxFQUFDLENBQUM7Q0FDaEQiLCJmaWxlIjoiY3JlYXRlLW5ldy1sb29rdXAtb2JqZWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBvYmplY3Qgd2l0aCBcIm51bGxcIi1wcm90b3R5cGUgdG8gYXZvaWQgdHJ1dGh5IHJlc3VsdHMgb24gcHJvdG90eXBlIHByb3BlcnRpZXMuXG4gKiBUaGUgcmVzdWx0aW5nIG9iamVjdCBjYW4gYmUgdXNlZCB3aXRoIFwib2JqZWN0W3Byb3BlcnR5XVwiIHRvIGNoZWNrIGlmIGEgcHJvcGVydHkgZXhpc3RzXG4gKiBAcGFyYW0gey4uLm9iamVjdH0gc291cmNlcyBhIHZhcmFyZ3MgcGFyYW1ldGVyIG9mIHNvdXJjZSBvYmplY3RzIHRoYXQgd2lsbCBiZSBtZXJnZWRcbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOZXdMb29rdXBPYmplY3QoLi4uc291cmNlcykge1xuICByZXR1cm4gZXh0ZW5kKE9iamVjdC5jcmVhdGUobnVsbCksIC4uLnNvdXJjZXMpO1xufVxuIl19


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/internal/proto-access.js":
/*!******************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/internal/proto-access.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
exports.createProtoAccessControl = createProtoAccessControl;
exports.resultIsAllowed = resultIsAllowed;
exports.resetLoggedProperties = resetLoggedProperties;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _createNewLookupObject = __webpack_require__(/*! ./create-new-lookup-object */ "./node_modules/handlebars/dist/cjs/handlebars/internal/create-new-lookup-object.js");

var _logger = __webpack_require__(/*! ../logger */ "./node_modules/handlebars/dist/cjs/handlebars/logger.js");

var _logger2 = _interopRequireDefault(_logger);

var loggedProperties = Object.create(null);

function createProtoAccessControl(runtimeOptions) {
  var defaultMethodWhiteList = Object.create(null);
  defaultMethodWhiteList['constructor'] = false;
  defaultMethodWhiteList['__defineGetter__'] = false;
  defaultMethodWhiteList['__defineSetter__'] = false;
  defaultMethodWhiteList['__lookupGetter__'] = false;

  var defaultPropertyWhiteList = Object.create(null);
  // eslint-disable-next-line no-proto
  defaultPropertyWhiteList['__proto__'] = false;

  return {
    properties: {
      whitelist: _createNewLookupObject.createNewLookupObject(defaultPropertyWhiteList, runtimeOptions.allowedProtoProperties),
      defaultValue: runtimeOptions.allowProtoPropertiesByDefault
    },
    methods: {
      whitelist: _createNewLookupObject.createNewLookupObject(defaultMethodWhiteList, runtimeOptions.allowedProtoMethods),
      defaultValue: runtimeOptions.allowProtoMethodsByDefault
    }
  };
}

function resultIsAllowed(result, protoAccessControl, propertyName) {
  if (typeof result === 'function') {
    return checkWhiteList(protoAccessControl.methods, propertyName);
  } else {
    return checkWhiteList(protoAccessControl.properties, propertyName);
  }
}

function checkWhiteList(protoAccessControlForType, propertyName) {
  if (protoAccessControlForType.whitelist[propertyName] !== undefined) {
    return protoAccessControlForType.whitelist[propertyName] === true;
  }
  if (protoAccessControlForType.defaultValue !== undefined) {
    return protoAccessControlForType.defaultValue;
  }
  logUnexpecedPropertyAccessOnce(propertyName);
  return false;
}

function logUnexpecedPropertyAccessOnce(propertyName) {
  if (loggedProperties[propertyName] !== true) {
    loggedProperties[propertyName] = true;
    _logger2['default'].log('error', 'Handlebars: Access has been denied to resolve the property "' + propertyName + '" because it is not an "own property" of its parent.\n' + 'You can add a runtime option to disable the check or this warning:\n' + 'See https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details');
  }
}

function resetLoggedProperties() {
  Object.keys(loggedProperties).forEach(function (propertyName) {
    delete loggedProperties[propertyName];
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2ludGVybmFsL3Byb3RvLWFjY2Vzcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O3FDQUFzQyw0QkFBNEI7O3NCQUMvQyxXQUFXOzs7O0FBRTlCLElBQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQzs7QUFFdEMsU0FBUyx3QkFBd0IsQ0FBQyxjQUFjLEVBQUU7QUFDdkQsTUFBSSxzQkFBc0IsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pELHdCQUFzQixDQUFDLGFBQWEsQ0FBQyxHQUFHLEtBQUssQ0FBQztBQUM5Qyx3QkFBc0IsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEtBQUssQ0FBQztBQUNuRCx3QkFBc0IsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEtBQUssQ0FBQztBQUNuRCx3QkFBc0IsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEtBQUssQ0FBQzs7QUFFbkQsTUFBSSx3QkFBd0IsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDOztBQUVuRCwwQkFBd0IsQ0FBQyxXQUFXLENBQUMsR0FBRyxLQUFLLENBQUM7O0FBRTlDLFNBQU87QUFDTCxjQUFVLEVBQUU7QUFDVixlQUFTLEVBQUUsNkNBQ1Qsd0JBQXdCLEVBQ3hCLGNBQWMsQ0FBQyxzQkFBc0IsQ0FDdEM7QUFDRCxrQkFBWSxFQUFFLGNBQWMsQ0FBQyw2QkFBNkI7S0FDM0Q7QUFDRCxXQUFPLEVBQUU7QUFDUCxlQUFTLEVBQUUsNkNBQ1Qsc0JBQXNCLEVBQ3RCLGNBQWMsQ0FBQyxtQkFBbUIsQ0FDbkM7QUFDRCxrQkFBWSxFQUFFLGNBQWMsQ0FBQywwQkFBMEI7S0FDeEQ7R0FDRixDQUFDO0NBQ0g7O0FBRU0sU0FBUyxlQUFlLENBQUMsTUFBTSxFQUFFLGtCQUFrQixFQUFFLFlBQVksRUFBRTtBQUN4RSxNQUFJLE9BQU8sTUFBTSxLQUFLLFVBQVUsRUFBRTtBQUNoQyxXQUFPLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7R0FDakUsTUFBTTtBQUNMLFdBQU8sY0FBYyxDQUFDLGtCQUFrQixDQUFDLFVBQVUsRUFBRSxZQUFZLENBQUMsQ0FBQztHQUNwRTtDQUNGOztBQUVELFNBQVMsY0FBYyxDQUFDLHlCQUF5QixFQUFFLFlBQVksRUFBRTtBQUMvRCxNQUFJLHlCQUF5QixDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsS0FBSyxTQUFTLEVBQUU7QUFDbkUsV0FBTyx5QkFBeUIsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLEtBQUssSUFBSSxDQUFDO0dBQ25FO0FBQ0QsTUFBSSx5QkFBeUIsQ0FBQyxZQUFZLEtBQUssU0FBUyxFQUFFO0FBQ3hELFdBQU8seUJBQXlCLENBQUMsWUFBWSxDQUFDO0dBQy9DO0FBQ0QsZ0NBQThCLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDN0MsU0FBTyxLQUFLLENBQUM7Q0FDZDs7QUFFRCxTQUFTLDhCQUE4QixDQUFDLFlBQVksRUFBRTtBQUNwRCxNQUFJLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxLQUFLLElBQUksRUFBRTtBQUMzQyxvQkFBZ0IsQ0FBQyxZQUFZLENBQUMsR0FBRyxJQUFJLENBQUM7QUFDdEMsd0JBQU8sR0FBRyxDQUNSLE9BQU8sRUFDUCxpRUFBK0QsWUFBWSxvSUFDSCxvSEFDMkMsQ0FDcEgsQ0FBQztHQUNIO0NBQ0Y7O0FBRU0sU0FBUyxxQkFBcUIsR0FBRztBQUN0QyxRQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsWUFBWSxFQUFJO0FBQ3BELFdBQU8sZ0JBQWdCLENBQUMsWUFBWSxDQUFDLENBQUM7R0FDdkMsQ0FBQyxDQUFDO0NBQ0oiLCJmaWxlIjoicHJvdG8tYWNjZXNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlTmV3TG9va3VwT2JqZWN0IH0gZnJvbSAnLi9jcmVhdGUtbmV3LWxvb2t1cC1vYmplY3QnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuLi9sb2dnZXInO1xuXG5jb25zdCBsb2dnZWRQcm9wZXJ0aWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByb3RvQWNjZXNzQ29udHJvbChydW50aW1lT3B0aW9ucykge1xuICBsZXQgZGVmYXVsdE1ldGhvZFdoaXRlTGlzdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGRlZmF1bHRNZXRob2RXaGl0ZUxpc3RbJ2NvbnN0cnVjdG9yJ10gPSBmYWxzZTtcbiAgZGVmYXVsdE1ldGhvZFdoaXRlTGlzdFsnX19kZWZpbmVHZXR0ZXJfXyddID0gZmFsc2U7XG4gIGRlZmF1bHRNZXRob2RXaGl0ZUxpc3RbJ19fZGVmaW5lU2V0dGVyX18nXSA9IGZhbHNlO1xuICBkZWZhdWx0TWV0aG9kV2hpdGVMaXN0WydfX2xvb2t1cEdldHRlcl9fJ10gPSBmYWxzZTtcblxuICBsZXQgZGVmYXVsdFByb3BlcnR5V2hpdGVMaXN0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvXG4gIGRlZmF1bHRQcm9wZXJ0eVdoaXRlTGlzdFsnX19wcm90b19fJ10gPSBmYWxzZTtcblxuICByZXR1cm4ge1xuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIHdoaXRlbGlzdDogY3JlYXRlTmV3TG9va3VwT2JqZWN0KFxuICAgICAgICBkZWZhdWx0UHJvcGVydHlXaGl0ZUxpc3QsXG4gICAgICAgIHJ1bnRpbWVPcHRpb25zLmFsbG93ZWRQcm90b1Byb3BlcnRpZXNcbiAgICAgICksXG4gICAgICBkZWZhdWx0VmFsdWU6IHJ1bnRpbWVPcHRpb25zLmFsbG93UHJvdG9Qcm9wZXJ0aWVzQnlEZWZhdWx0XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICB3aGl0ZWxpc3Q6IGNyZWF0ZU5ld0xvb2t1cE9iamVjdChcbiAgICAgICAgZGVmYXVsdE1ldGhvZFdoaXRlTGlzdCxcbiAgICAgICAgcnVudGltZU9wdGlvbnMuYWxsb3dlZFByb3RvTWV0aG9kc1xuICAgICAgKSxcbiAgICAgIGRlZmF1bHRWYWx1ZTogcnVudGltZU9wdGlvbnMuYWxsb3dQcm90b01ldGhvZHNCeURlZmF1bHRcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXN1bHRJc0FsbG93ZWQocmVzdWx0LCBwcm90b0FjY2Vzc0NvbnRyb2wsIHByb3BlcnR5TmFtZSkge1xuICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBjaGVja1doaXRlTGlzdChwcm90b0FjY2Vzc0NvbnRyb2wubWV0aG9kcywgcHJvcGVydHlOYW1lKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY2hlY2tXaGl0ZUxpc3QocHJvdG9BY2Nlc3NDb250cm9sLnByb3BlcnRpZXMsIHByb3BlcnR5TmFtZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tXaGl0ZUxpc3QocHJvdG9BY2Nlc3NDb250cm9sRm9yVHlwZSwgcHJvcGVydHlOYW1lKSB7XG4gIGlmIChwcm90b0FjY2Vzc0NvbnRyb2xGb3JUeXBlLndoaXRlbGlzdFtwcm9wZXJ0eU5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcHJvdG9BY2Nlc3NDb250cm9sRm9yVHlwZS53aGl0ZWxpc3RbcHJvcGVydHlOYW1lXSA9PT0gdHJ1ZTtcbiAgfVxuICBpZiAocHJvdG9BY2Nlc3NDb250cm9sRm9yVHlwZS5kZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBwcm90b0FjY2Vzc0NvbnRyb2xGb3JUeXBlLmRlZmF1bHRWYWx1ZTtcbiAgfVxuICBsb2dVbmV4cGVjZWRQcm9wZXJ0eUFjY2Vzc09uY2UocHJvcGVydHlOYW1lKTtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBsb2dVbmV4cGVjZWRQcm9wZXJ0eUFjY2Vzc09uY2UocHJvcGVydHlOYW1lKSB7XG4gIGlmIChsb2dnZWRQcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV0gIT09IHRydWUpIHtcbiAgICBsb2dnZWRQcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV0gPSB0cnVlO1xuICAgIGxvZ2dlci5sb2coXG4gICAgICAnZXJyb3InLFxuICAgICAgYEhhbmRsZWJhcnM6IEFjY2VzcyBoYXMgYmVlbiBkZW5pZWQgdG8gcmVzb2x2ZSB0aGUgcHJvcGVydHkgXCIke3Byb3BlcnR5TmFtZX1cIiBiZWNhdXNlIGl0IGlzIG5vdCBhbiBcIm93biBwcm9wZXJ0eVwiIG9mIGl0cyBwYXJlbnQuXFxuYCArXG4gICAgICAgIGBZb3UgY2FuIGFkZCBhIHJ1bnRpbWUgb3B0aW9uIHRvIGRpc2FibGUgdGhlIGNoZWNrIG9yIHRoaXMgd2FybmluZzpcXG5gICtcbiAgICAgICAgYFNlZSBodHRwczovL2hhbmRsZWJhcnNqcy5jb20vYXBpLXJlZmVyZW5jZS9ydW50aW1lLW9wdGlvbnMuaHRtbCNvcHRpb25zLXRvLWNvbnRyb2wtcHJvdG90eXBlLWFjY2VzcyBmb3IgZGV0YWlsc2BcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNldExvZ2dlZFByb3BlcnRpZXMoKSB7XG4gIE9iamVjdC5rZXlzKGxvZ2dlZFByb3BlcnRpZXMpLmZvckVhY2gocHJvcGVydHlOYW1lID0+IHtcbiAgICBkZWxldGUgbG9nZ2VkUHJvcGVydGllc1twcm9wZXJ0eU5hbWVdO1xuICB9KTtcbn1cbiJdfQ==


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/internal/wrapHelper.js":
/*!****************************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/internal/wrapHelper.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports.wrapHelper = wrapHelper;

function wrapHelper(helper, transformOptionsFn) {
  if (typeof helper !== 'function') {
    // This should not happen, but apparently it does in https://github.com/wycats/handlebars.js/issues/1639
    // We try to make the wrapper least-invasive by not wrapping it, if the helper is not a function.
    return helper;
  }
  var wrapper = function wrapper() /* dynamic arguments */{
    var options = arguments[arguments.length - 1];
    arguments[arguments.length - 1] = transformOptionsFn(options);
    return helper.apply(this, arguments);
  };
  return wrapper;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2ludGVybmFsL3dyYXBIZWxwZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxTQUFTLFVBQVUsQ0FBQyxNQUFNLEVBQUUsa0JBQWtCLEVBQUU7QUFDckQsTUFBSSxPQUFPLE1BQU0sS0FBSyxVQUFVLEVBQUU7OztBQUdoQyxXQUFPLE1BQU0sQ0FBQztHQUNmO0FBQ0QsTUFBSSxPQUFPLEdBQUcsU0FBVixPQUFPLDBCQUFxQztBQUM5QyxRQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNoRCxhQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM5RCxXQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0dBQ3RDLENBQUM7QUFDRixTQUFPLE9BQU8sQ0FBQztDQUNoQiIsImZpbGUiOiJ3cmFwSGVscGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHdyYXBIZWxwZXIoaGVscGVyLCB0cmFuc2Zvcm1PcHRpb25zRm4pIHtcbiAgaWYgKHR5cGVvZiBoZWxwZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBUaGlzIHNob3VsZCBub3QgaGFwcGVuLCBidXQgYXBwYXJlbnRseSBpdCBkb2VzIGluIGh0dHBzOi8vZ2l0aHViLmNvbS93eWNhdHMvaGFuZGxlYmFycy5qcy9pc3N1ZXMvMTYzOVxuICAgIC8vIFdlIHRyeSB0byBtYWtlIHRoZSB3cmFwcGVyIGxlYXN0LWludmFzaXZlIGJ5IG5vdCB3cmFwcGluZyBpdCwgaWYgdGhlIGhlbHBlciBpcyBub3QgYSBmdW5jdGlvbi5cbiAgICByZXR1cm4gaGVscGVyO1xuICB9XG4gIGxldCB3cmFwcGVyID0gZnVuY3Rpb24oLyogZHluYW1pYyBhcmd1bWVudHMgKi8pIHtcbiAgICBjb25zdCBvcHRpb25zID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXTtcbiAgICBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdID0gdHJhbnNmb3JtT3B0aW9uc0ZuKG9wdGlvbnMpO1xuICAgIHJldHVybiBoZWxwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbiAgcmV0dXJuIHdyYXBwZXI7XG59XG4iXX0=


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/logger.js":
/*!***************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/logger.js ***!
  \***************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var logger = {
  methodMap: ['debug', 'info', 'warn', 'error'],
  level: 'info',

  // Maps a given level value to the `methodMap` indexes above.
  lookupLevel: function lookupLevel(level) {
    if (typeof level === 'string') {
      var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());
      if (levelMap >= 0) {
        level = levelMap;
      } else {
        level = parseInt(level, 10);
      }
    }

    return level;
  },

  // Can be overridden in the host environment
  log: function log(level) {
    level = logger.lookupLevel(level);

    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
      var method = logger.methodMap[level];
      // eslint-disable-next-line no-console
      if (!console[method]) {
        method = 'log';
      }

      for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        message[_key - 1] = arguments[_key];
      }

      console[method].apply(console, message); // eslint-disable-line no-console
    }
  }
};

exports["default"] = logger;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL2xvZ2dlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O3FCQUF3QixTQUFTOztBQUVqQyxJQUFJLE1BQU0sR0FBRztBQUNYLFdBQVMsRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQztBQUM3QyxPQUFLLEVBQUUsTUFBTTs7O0FBR2IsYUFBVyxFQUFFLHFCQUFTLEtBQUssRUFBRTtBQUMzQixRQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtBQUM3QixVQUFJLFFBQVEsR0FBRyxlQUFRLE1BQU0sQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDOUQsVUFBSSxRQUFRLElBQUksQ0FBQyxFQUFFO0FBQ2pCLGFBQUssR0FBRyxRQUFRLENBQUM7T0FDbEIsTUFBTTtBQUNMLGFBQUssR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO09BQzdCO0tBQ0Y7O0FBRUQsV0FBTyxLQUFLLENBQUM7R0FDZDs7O0FBR0QsS0FBRyxFQUFFLGFBQVMsS0FBSyxFQUFjO0FBQy9CLFNBQUssR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDOztBQUVsQyxRQUNFLE9BQU8sT0FBTyxLQUFLLFdBQVcsSUFDOUIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxFQUN6QztBQUNBLFVBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7O0FBRXJDLFVBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7QUFDcEIsY0FBTSxHQUFHLEtBQUssQ0FBQztPQUNoQjs7d0NBWG1CLE9BQU87QUFBUCxlQUFPOzs7QUFZM0IsYUFBTyxDQUFDLE1BQU0sT0FBQyxDQUFmLE9BQU8sRUFBWSxPQUFPLENBQUMsQ0FBQztLQUM3QjtHQUNGO0NBQ0YsQ0FBQzs7cUJBRWEsTUFBTSIsImZpbGUiOiJsb2dnZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbmRleE9mIH0gZnJvbSAnLi91dGlscyc7XG5cbmxldCBsb2dnZXIgPSB7XG4gIG1ldGhvZE1hcDogWydkZWJ1ZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InXSxcbiAgbGV2ZWw6ICdpbmZvJyxcblxuICAvLyBNYXBzIGEgZ2l2ZW4gbGV2ZWwgdmFsdWUgdG8gdGhlIGBtZXRob2RNYXBgIGluZGV4ZXMgYWJvdmUuXG4gIGxvb2t1cExldmVsOiBmdW5jdGlvbihsZXZlbCkge1xuICAgIGlmICh0eXBlb2YgbGV2ZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBsZXQgbGV2ZWxNYXAgPSBpbmRleE9mKGxvZ2dlci5tZXRob2RNYXAsIGxldmVsLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgaWYgKGxldmVsTWFwID49IDApIHtcbiAgICAgICAgbGV2ZWwgPSBsZXZlbE1hcDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldmVsID0gcGFyc2VJbnQobGV2ZWwsIDEwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbGV2ZWw7XG4gIH0sXG5cbiAgLy8gQ2FuIGJlIG92ZXJyaWRkZW4gaW4gdGhlIGhvc3QgZW52aXJvbm1lbnRcbiAgbG9nOiBmdW5jdGlvbihsZXZlbCwgLi4ubWVzc2FnZSkge1xuICAgIGxldmVsID0gbG9nZ2VyLmxvb2t1cExldmVsKGxldmVsKTtcblxuICAgIGlmIChcbiAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgbG9nZ2VyLmxvb2t1cExldmVsKGxvZ2dlci5sZXZlbCkgPD0gbGV2ZWxcbiAgICApIHtcbiAgICAgIGxldCBtZXRob2QgPSBsb2dnZXIubWV0aG9kTWFwW2xldmVsXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBpZiAoIWNvbnNvbGVbbWV0aG9kXSkge1xuICAgICAgICBtZXRob2QgPSAnbG9nJztcbiAgICAgIH1cbiAgICAgIGNvbnNvbGVbbWV0aG9kXSguLi5tZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBsb2dnZXI7XG4iXX0=


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/no-conflict.js":
/*!********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/no-conflict.js ***!
  \********************************************************************/
/***/ ((module, exports) => {

"use strict";
/* global globalThis */


exports.__esModule = true;

exports["default"] = function (Handlebars) {
  /* istanbul ignore next */
  // https://mathiasbynens.be/notes/globalthis
  (function () {
    if (typeof globalThis === 'object') return;
    Object.prototype.__defineGetter__('__magic__', function () {
      return this;
    });
    __magic__.globalThis = __magic__; // eslint-disable-line no-undef
    delete Object.prototype.__magic__;
  })();

  var $Handlebars = globalThis.Handlebars;

  /* istanbul ignore next */
  Handlebars.noConflict = function () {
    if (globalThis.Handlebars === Handlebars) {
      globalThis.Handlebars = $Handlebars;
    }
    return Handlebars;
  };
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL25vLWNvbmZsaWN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O3FCQUNlLFVBQVMsVUFBVSxFQUFFOzs7QUFHbEMsR0FBQyxZQUFXO0FBQ1YsUUFBSSxPQUFPLFVBQVUsS0FBSyxRQUFRLEVBQUUsT0FBTztBQUMzQyxVQUFNLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxZQUFXO0FBQ3hELGFBQU8sSUFBSSxDQUFDO0tBQ2IsQ0FBQyxDQUFDO0FBQ0gsYUFBUyxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7QUFDakMsV0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztHQUNuQyxDQUFBLEVBQUcsQ0FBQzs7QUFFTCxNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsVUFBVSxDQUFDOzs7QUFHMUMsWUFBVSxDQUFDLFVBQVUsR0FBRyxZQUFXO0FBQ2pDLFFBQUksVUFBVSxDQUFDLFVBQVUsS0FBSyxVQUFVLEVBQUU7QUFDeEMsZ0JBQVUsQ0FBQyxVQUFVLEdBQUcsV0FBVyxDQUFDO0tBQ3JDO0FBQ0QsV0FBTyxVQUFVLENBQUM7R0FDbkIsQ0FBQztDQUNIIiwiZmlsZSI6Im5vLWNvbmZsaWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFsIGdsb2JhbFRoaXMgKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKEhhbmRsZWJhcnMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgLy8gaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2dsb2JhbHRoaXNcbiAgKGZ1bmN0aW9uKCkge1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybjtcbiAgICBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lR2V0dGVyX18oJ19fbWFnaWNfXycsIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSk7XG4gICAgX19tYWdpY19fLmdsb2JhbFRoaXMgPSBfX21hZ2ljX187IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiAgICBkZWxldGUgT2JqZWN0LnByb3RvdHlwZS5fX21hZ2ljX187XG4gIH0pKCk7XG5cbiAgY29uc3QgJEhhbmRsZWJhcnMgPSBnbG9iYWxUaGlzLkhhbmRsZWJhcnM7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgSGFuZGxlYmFycy5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKGdsb2JhbFRoaXMuSGFuZGxlYmFycyA9PT0gSGFuZGxlYmFycykge1xuICAgICAgZ2xvYmFsVGhpcy5IYW5kbGViYXJzID0gJEhhbmRsZWJhcnM7XG4gICAgfVxuICAgIHJldHVybiBIYW5kbGViYXJzO1xuICB9O1xufVxuIl19


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/runtime.js":
/*!****************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/runtime.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


exports.__esModule = true;
exports.checkRevision = checkRevision;
exports.template = template;
exports.wrapProgram = wrapProgram;
exports.resolvePartial = resolvePartial;
exports.invokePartial = invokePartial;
exports.noop = noop;
// istanbul ignore next

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

// istanbul ignore next

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/handlebars/dist/cjs/handlebars/utils.js");

var Utils = _interopRequireWildcard(_utils);

var _exception = __webpack_require__(/*! ./exception */ "./node_modules/handlebars/dist/cjs/handlebars/exception.js");

var _exception2 = _interopRequireDefault(_exception);

var _base = __webpack_require__(/*! ./base */ "./node_modules/handlebars/dist/cjs/handlebars/base.js");

var _helpers = __webpack_require__(/*! ./helpers */ "./node_modules/handlebars/dist/cjs/handlebars/helpers.js");

var _internalWrapHelper = __webpack_require__(/*! ./internal/wrapHelper */ "./node_modules/handlebars/dist/cjs/handlebars/internal/wrapHelper.js");

var _internalProtoAccess = __webpack_require__(/*! ./internal/proto-access */ "./node_modules/handlebars/dist/cjs/handlebars/internal/proto-access.js");

function checkRevision(compilerInfo) {
  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
      currentRevision = _base.COMPILER_REVISION;

  if (compilerRevision >= _base.LAST_COMPATIBLE_COMPILER_REVISION && compilerRevision <= _base.COMPILER_REVISION) {
    return;
  }

  if (compilerRevision < _base.LAST_COMPATIBLE_COMPILER_REVISION) {
    var runtimeVersions = _base.REVISION_CHANGES[currentRevision],
        compilerVersions = _base.REVISION_CHANGES[compilerRevision];
    throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
  } else {
    // Use the embedded version info since the runtime doesn't know about this revision yet
    throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
  }
}

function template(templateSpec, env) {
  /* istanbul ignore next */
  if (!env) {
    throw new _exception2['default']('No environment passed to template');
  }
  if (!templateSpec || !templateSpec.main) {
    throw new _exception2['default']('Unknown template object: ' + typeof templateSpec);
  }

  templateSpec.main.decorator = templateSpec.main_d;

  // Note: Using env.VM references rather than local var references throughout this section to allow
  // for external users to override these as pseudo-supported APIs.
  env.VM.checkRevision(templateSpec.compiler);

  // backwards compatibility for precompiled templates with compiler-version 7 (<4.3.0)
  var templateWasPrecompiledWithCompilerV7 = templateSpec.compiler && templateSpec.compiler[0] === 7;

  function invokePartialWrapper(partial, context, options) {
    if (options.hash) {
      context = Utils.extend({}, context, options.hash);
      if (options.ids) {
        options.ids[0] = true;
      }
    }
    partial = env.VM.resolvePartial.call(this, partial, context, options);

    var extendedOptions = Utils.extend({}, options, {
      hooks: this.hooks,
      protoAccessControl: this.protoAccessControl
    });

    var result = env.VM.invokePartial.call(this, partial, context, extendedOptions);

    if (result == null && env.compile) {
      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
      result = options.partials[options.name](context, extendedOptions);
    }
    if (result != null) {
      if (options.indent) {
        var lines = result.split('\n');
        for (var i = 0, l = lines.length; i < l; i++) {
          if (!lines[i] && i + 1 === l) {
            break;
          }

          lines[i] = options.indent + lines[i];
        }
        result = lines.join('\n');
      }
      return result;
    } else {
      throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
    }
  }

  // Just add water
  var container = {
    strict: function strict(obj, name, loc) {
      if (!obj || !(name in obj)) {
        throw new _exception2['default']('"' + name + '" not defined in ' + obj, {
          loc: loc
        });
      }
      return container.lookupProperty(obj, name);
    },
    lookupProperty: function lookupProperty(parent, propertyName) {
      var result = parent[propertyName];
      if (result == null) {
        return result;
      }
      if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
        return result;
      }

      if (_internalProtoAccess.resultIsAllowed(result, container.protoAccessControl, propertyName)) {
        return result;
      }
      return undefined;
    },
    lookup: function lookup(depths, name) {
      var len = depths.length;
      for (var i = 0; i < len; i++) {
        var result = depths[i] && container.lookupProperty(depths[i], name);
        if (result != null) {
          return depths[i][name];
        }
      }
    },
    lambda: function lambda(current, context) {
      return typeof current === 'function' ? current.call(context) : current;
    },

    escapeExpression: Utils.escapeExpression,
    invokePartial: invokePartialWrapper,

    fn: function fn(i) {
      var ret = templateSpec[i];
      ret.decorator = templateSpec[i + '_d'];
      return ret;
    },

    programs: [],
    program: function program(i, data, declaredBlockParams, blockParams, depths) {
      var programWrapper = this.programs[i],
          fn = this.fn(i);
      if (data || depths || blockParams || declaredBlockParams) {
        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
      } else if (!programWrapper) {
        programWrapper = this.programs[i] = wrapProgram(this, i, fn);
      }
      return programWrapper;
    },

    data: function data(value, depth) {
      while (value && depth--) {
        value = value._parent;
      }
      return value;
    },
    mergeIfNeeded: function mergeIfNeeded(param, common) {
      var obj = param || common;

      if (param && common && param !== common) {
        obj = Utils.extend({}, common, param);
      }

      return obj;
    },
    // An empty object to use as replacement for null-contexts
    nullContext: Object.seal({}),

    noop: env.VM.noop,
    compilerInfo: templateSpec.compiler
  };

  function ret(context) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var data = options.data;

    ret._setup(options);
    if (!options.partial && templateSpec.useData) {
      data = initData(context, data);
    }
    var depths = undefined,
        blockParams = templateSpec.useBlockParams ? [] : undefined;
    if (templateSpec.useDepths) {
      if (options.depths) {
        depths = context != options.depths[0] ? [context].concat(options.depths) : options.depths;
      } else {
        depths = [context];
      }
    }

    function main(context /*, options*/) {
      return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
    }

    main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
    return main(context, options);
  }

  ret.isTop = true;

  ret._setup = function (options) {
    if (!options.partial) {
      var mergedHelpers = Utils.extend({}, env.helpers, options.helpers);
      wrapHelpersToPassLookupProperty(mergedHelpers, container);
      container.helpers = mergedHelpers;

      if (templateSpec.usePartial) {
        // Use mergeIfNeeded here to prevent compiling global partials multiple times
        container.partials = container.mergeIfNeeded(options.partials, env.partials);
      }
      if (templateSpec.usePartial || templateSpec.useDecorators) {
        container.decorators = Utils.extend({}, env.decorators, options.decorators);
      }

      container.hooks = {};
      container.protoAccessControl = _internalProtoAccess.createProtoAccessControl(options);

      var keepHelperInHelpers = options.allowCallsToHelperMissing || templateWasPrecompiledWithCompilerV7;
      _helpers.moveHelperToHooks(container, 'helperMissing', keepHelperInHelpers);
      _helpers.moveHelperToHooks(container, 'blockHelperMissing', keepHelperInHelpers);
    } else {
      container.protoAccessControl = options.protoAccessControl; // internal option
      container.helpers = options.helpers;
      container.partials = options.partials;
      container.decorators = options.decorators;
      container.hooks = options.hooks;
    }
  };

  ret._child = function (i, data, blockParams, depths) {
    if (templateSpec.useBlockParams && !blockParams) {
      throw new _exception2['default']('must pass block params');
    }
    if (templateSpec.useDepths && !depths) {
      throw new _exception2['default']('must pass parent depths');
    }

    return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
  };
  return ret;
}

function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
  function prog(context) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var currentDepths = depths;
    if (depths && context != depths[0] && !(context === container.nullContext && depths[0] === null)) {
      currentDepths = [context].concat(depths);
    }

    return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
  }

  prog = executeDecorators(fn, prog, container, depths, data, blockParams);

  prog.program = i;
  prog.depth = depths ? depths.length : 0;
  prog.blockParams = declaredBlockParams || 0;
  return prog;
}

/**
 * This is currently part of the official API, therefore implementation details should not be changed.
 */

function resolvePartial(partial, context, options) {
  if (!partial) {
    if (options.name === '@partial-block') {
      partial = options.data['partial-block'];
    } else {
      partial = options.partials[options.name];
    }
  } else if (!partial.call && !options.name) {
    // This is a dynamic partial that returned a string
    options.name = partial;
    partial = options.partials[partial];
  }
  return partial;
}

function invokePartial(partial, context, options) {
  // Use the current closure context to save the partial-block if this partial
  var currentPartialBlock = options.data && options.data['partial-block'];
  options.partial = true;
  if (options.ids) {
    options.data.contextPath = options.ids[0] || options.data.contextPath;
  }

  var partialBlock = undefined;
  if (options.fn && options.fn !== noop) {
    (function () {
      options.data = _base.createFrame(options.data);
      // Wrapper function to get access to currentPartialBlock from the closure
      var fn = options.fn;
      partialBlock = options.data['partial-block'] = function partialBlockWrapper(context) {
        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        // Restore the partial-block from the closure for the execution of the block
        // i.e. the part inside the block of the partial call.
        options.data = _base.createFrame(options.data);
        options.data['partial-block'] = currentPartialBlock;
        return fn(context, options);
      };
      if (fn.partials) {
        options.partials = Utils.extend({}, options.partials, fn.partials);
      }
    })();
  }

  if (partial === undefined && partialBlock) {
    partial = partialBlock;
  }

  if (partial === undefined) {
    throw new _exception2['default']('The partial ' + options.name + ' could not be found');
  } else if (partial instanceof Function) {
    return partial(context, options);
  }
}

function noop() {
  return '';
}

function initData(context, data) {
  if (!data || !('root' in data)) {
    data = data ? _base.createFrame(data) : {};
    data.root = context;
  }
  return data;
}

function executeDecorators(fn, prog, container, depths, data, blockParams) {
  if (fn.decorator) {
    var props = {};
    prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
    Utils.extend(prog, props);
  }
  return prog;
}

function wrapHelpersToPassLookupProperty(mergedHelpers, container) {
  Object.keys(mergedHelpers).forEach(function (helperName) {
    var helper = mergedHelpers[helperName];
    mergedHelpers[helperName] = passLookupPropertyOption(helper, container);
  });
}

function passLookupPropertyOption(helper, container) {
  var lookupProperty = container.lookupProperty;
  return _internalWrapHelper.wrapHelper(helper, function (options) {
    return Utils.extend({ lookupProperty: lookupProperty }, options);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/safe-string.js":
/*!********************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/safe-string.js ***!
  \********************************************************************/
/***/ ((module, exports) => {

"use strict";
// Build out our basic SafeString type


exports.__esModule = true;
function SafeString(string) {
  this.string = string;
}

SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
  return '' + this.string;
};

exports["default"] = SafeString;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL3NhZmUtc3RyaW5nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxTQUFTLFVBQVUsQ0FBQyxNQUFNLEVBQUU7QUFDMUIsTUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7Q0FDdEI7O0FBRUQsVUFBVSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsWUFBVztBQUN2RSxTQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0NBQ3pCLENBQUM7O3FCQUVhLFVBQVUiLCJmaWxlIjoic2FmZS1zdHJpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBCdWlsZCBvdXQgb3VyIGJhc2ljIFNhZmVTdHJpbmcgdHlwZVxuZnVuY3Rpb24gU2FmZVN0cmluZyhzdHJpbmcpIHtcbiAgdGhpcy5zdHJpbmcgPSBzdHJpbmc7XG59XG5cblNhZmVTdHJpbmcucHJvdG90eXBlLnRvU3RyaW5nID0gU2FmZVN0cmluZy5wcm90b3R5cGUudG9IVE1MID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnJyArIHRoaXMuc3RyaW5nO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2FmZVN0cmluZztcbiJdfQ==


/***/ }),

/***/ "./node_modules/handlebars/dist/cjs/handlebars/utils.js":
/*!**************************************************************!*\
  !*** ./node_modules/handlebars/dist/cjs/handlebars/utils.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.__esModule = true;
exports.extend = extend;
exports.indexOf = indexOf;
exports.escapeExpression = escapeExpression;
exports.isEmpty = isEmpty;
exports.createFrame = createFrame;
exports.blockParams = blockParams;
exports.appendContextPath = appendContextPath;
var escape = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#x27;',
  '`': '&#x60;',
  '=': '&#x3D;'
};

var badChars = /[&<>"'`=]/g,
    possible = /[&<>"'`=]/;

function escapeChar(chr) {
  return escape[chr];
}

function extend(obj /* , ...source */) {
  for (var i = 1; i < arguments.length; i++) {
    for (var key in arguments[i]) {
      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
        obj[key] = arguments[i][key];
      }
    }
  }

  return obj;
}

var toString = Object.prototype.toString;

exports.toString = toString;
// Sourced from lodash
// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
/* eslint-disable func-style */
var isFunction = function isFunction(value) {
  return typeof value === 'function';
};
// fallback for older versions of Chrome and Safari
/* istanbul ignore next */
if (isFunction(/x/)) {
  exports.isFunction = isFunction = function (value) {
    return typeof value === 'function' && toString.call(value) === '[object Function]';
  };
}
exports.isFunction = isFunction;

/* eslint-enable func-style */

/* istanbul ignore next */
var isArray = Array.isArray || function (value) {
  return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;
};

exports.isArray = isArray;
// Older IE versions do not directly support indexOf so we must implement our own, sadly.

function indexOf(array, value) {
  for (var i = 0, len = array.length; i < len; i++) {
    if (array[i] === value) {
      return i;
    }
  }
  return -1;
}

function escapeExpression(string) {
  if (typeof string !== 'string') {
    // don't escape SafeStrings, since they're already safe
    if (string && string.toHTML) {
      return string.toHTML();
    } else if (string == null) {
      return '';
    } else if (!string) {
      return string + '';
    }

    // Force a string conversion as this will be done by the append regardless and
    // the regex test will do this transparently behind the scenes, causing issues if
    // an object's to string has escaped characters in it.
    string = '' + string;
  }

  if (!possible.test(string)) {
    return string;
  }
  return string.replace(badChars, escapeChar);
}

function isEmpty(value) {
  if (!value && value !== 0) {
    return true;
  } else if (isArray(value) && value.length === 0) {
    return true;
  } else {
    return false;
  }
}

function createFrame(object) {
  var frame = extend({}, object);
  frame._parent = object;
  return frame;
}

function blockParams(params, ids) {
  params.path = ids;
  return params;
}

function appendContextPath(contextPath, id) {
  return (contextPath ? contextPath + '.' : '') + id;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9oYW5kbGViYXJzL3V0aWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxJQUFNLE1BQU0sR0FBRztBQUNiLEtBQUcsRUFBRSxPQUFPO0FBQ1osS0FBRyxFQUFFLE1BQU07QUFDWCxLQUFHLEVBQUUsTUFBTTtBQUNYLEtBQUcsRUFBRSxRQUFRO0FBQ2IsS0FBRyxFQUFFLFFBQVE7QUFDYixLQUFHLEVBQUUsUUFBUTtBQUNiLEtBQUcsRUFBRSxRQUFRO0NBQ2QsQ0FBQzs7QUFFRixJQUFNLFFBQVEsR0FBRyxZQUFZO0lBQzNCLFFBQVEsR0FBRyxXQUFXLENBQUM7O0FBRXpCLFNBQVMsVUFBVSxDQUFDLEdBQUcsRUFBRTtBQUN2QixTQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUNwQjs7QUFFTSxTQUFTLE1BQU0sQ0FBQyxHQUFHLG9CQUFvQjtBQUM1QyxPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN6QyxTQUFLLElBQUksR0FBRyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUM1QixVQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUU7QUFDM0QsV0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztPQUM5QjtLQUNGO0dBQ0Y7O0FBRUQsU0FBTyxHQUFHLENBQUM7Q0FDWjs7QUFFTSxJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQzs7Ozs7O0FBS2hELElBQUksVUFBVSxHQUFHLG9CQUFTLEtBQUssRUFBRTtBQUMvQixTQUFPLE9BQU8sS0FBSyxLQUFLLFVBQVUsQ0FBQztDQUNwQyxDQUFDOzs7QUFHRixJQUFJLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUNuQixVQU9PLFVBQVUsR0FQakIsVUFBVSxHQUFHLFVBQVMsS0FBSyxFQUFFO0FBQzNCLFdBQ0UsT0FBTyxLQUFLLEtBQUssVUFBVSxJQUMzQixRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLG1CQUFtQixDQUM1QztHQUNILENBQUM7Q0FDSDtRQUNRLFVBQVUsR0FBVixVQUFVOzs7OztBQUlaLElBQU0sT0FBTyxHQUNsQixLQUFLLENBQUMsT0FBTyxJQUNiLFVBQVMsS0FBSyxFQUFFO0FBQ2QsU0FBTyxLQUFLLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxHQUNyQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLGdCQUFnQixHQUN6QyxLQUFLLENBQUM7Q0FDWCxDQUFDOzs7OztBQUdHLFNBQVMsT0FBTyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUU7QUFDcEMsT0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNoRCxRQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLEVBQUU7QUFDdEIsYUFBTyxDQUFDLENBQUM7S0FDVjtHQUNGO0FBQ0QsU0FBTyxDQUFDLENBQUMsQ0FBQztDQUNYOztBQUVNLFNBQVMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFO0FBQ3ZDLE1BQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFOztBQUU5QixRQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO0FBQzNCLGFBQU8sTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0tBQ3hCLE1BQU0sSUFBSSxNQUFNLElBQUksSUFBSSxFQUFFO0FBQ3pCLGFBQU8sRUFBRSxDQUFDO0tBQ1gsTUFBTSxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ2xCLGFBQU8sTUFBTSxHQUFHLEVBQUUsQ0FBQztLQUNwQjs7Ozs7QUFLRCxVQUFNLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQztHQUN0Qjs7QUFFRCxNQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUMxQixXQUFPLE1BQU0sQ0FBQztHQUNmO0FBQ0QsU0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztDQUM3Qzs7QUFFTSxTQUFTLE9BQU8sQ0FBQyxLQUFLLEVBQUU7QUFDN0IsTUFBSSxDQUFDLEtBQUssSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQ3pCLFdBQU8sSUFBSSxDQUFDO0dBQ2IsTUFBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtBQUMvQyxXQUFPLElBQUksQ0FBQztHQUNiLE1BQU07QUFDTCxXQUFPLEtBQUssQ0FBQztHQUNkO0NBQ0Y7O0FBRU0sU0FBUyxXQUFXLENBQUMsTUFBTSxFQUFFO0FBQ2xDLE1BQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDL0IsT0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7QUFDdkIsU0FBTyxLQUFLLENBQUM7Q0FDZDs7QUFFTSxTQUFTLFdBQVcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO0FBQ3ZDLFFBQU0sQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO0FBQ2xCLFNBQU8sTUFBTSxDQUFDO0NBQ2Y7O0FBRU0sU0FBUyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsRUFBRSxFQUFFO0FBQ2pELFNBQU8sQ0FBQyxXQUFXLEdBQUcsV0FBVyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUEsR0FBSSxFQUFFLENBQUM7Q0FDcEQiLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBlc2NhcGUgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJzwnOiAnJmx0OycsXG4gICc+JzogJyZndDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgXCInXCI6ICcmI3gyNzsnLFxuICAnYCc6ICcmI3g2MDsnLFxuICAnPSc6ICcmI3gzRDsnXG59O1xuXG5jb25zdCBiYWRDaGFycyA9IC9bJjw+XCInYD1dL2csXG4gIHBvc3NpYmxlID0gL1smPD5cIidgPV0vO1xuXG5mdW5jdGlvbiBlc2NhcGVDaGFyKGNocikge1xuICByZXR1cm4gZXNjYXBlW2Nocl07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmQob2JqIC8qICwgLi4uc291cmNlICovKSB7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yIChsZXQga2V5IGluIGFyZ3VtZW50c1tpXSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhcmd1bWVudHNbaV0sIGtleSkpIHtcbiAgICAgICAgb2JqW2tleV0gPSBhcmd1bWVudHNbaV1ba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5leHBvcnQgbGV0IHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLy8gU291cmNlZCBmcm9tIGxvZGFzaFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Jlc3RpZWpzL2xvZGFzaC9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dFxuLyogZXNsaW50LWRpc2FibGUgZnVuYy1zdHlsZSAqL1xubGV0IGlzRnVuY3Rpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufTtcbi8vIGZhbGxiYWNrIGZvciBvbGRlciB2ZXJzaW9ucyBvZiBDaHJvbWUgYW5kIFNhZmFyaVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmIChpc0Z1bmN0aW9uKC94LykpIHtcbiAgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSdcbiAgICApO1xuICB9O1xufVxuZXhwb3J0IHsgaXNGdW5jdGlvbiB9O1xuLyogZXNsaW50LWVuYWJsZSBmdW5jLXN0eWxlICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgaXNBcnJheSA9XG4gIEFycmF5LmlzQXJyYXkgfHxcbiAgZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0J1xuICAgICAgPyB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJyYXldJ1xuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuLy8gT2xkZXIgSUUgdmVyc2lvbnMgZG8gbm90IGRpcmVjdGx5IHN1cHBvcnQgaW5kZXhPZiBzbyB3ZSBtdXN0IGltcGxlbWVudCBvdXIgb3duLCBzYWRseS5cbmV4cG9ydCBmdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICBmb3IgKGxldCBpID0gMCwgbGVuID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoYXJyYXlbaV0gPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlRXhwcmVzc2lvbihzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgZXNjYXBlIFNhZmVTdHJpbmdzLCBzaW5jZSB0aGV5J3JlIGFscmVhZHkgc2FmZVxuICAgIGlmIChzdHJpbmcgJiYgc3RyaW5nLnRvSFRNTCkge1xuICAgICAgcmV0dXJuIHN0cmluZy50b0hUTUwoKTtcbiAgICB9IGVsc2UgaWYgKHN0cmluZyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfSBlbHNlIGlmICghc3RyaW5nKSB7XG4gICAgICByZXR1cm4gc3RyaW5nICsgJyc7XG4gICAgfVxuXG4gICAgLy8gRm9yY2UgYSBzdHJpbmcgY29udmVyc2lvbiBhcyB0aGlzIHdpbGwgYmUgZG9uZSBieSB0aGUgYXBwZW5kIHJlZ2FyZGxlc3MgYW5kXG4gICAgLy8gdGhlIHJlZ2V4IHRlc3Qgd2lsbCBkbyB0aGlzIHRyYW5zcGFyZW50bHkgYmVoaW5kIHRoZSBzY2VuZXMsIGNhdXNpbmcgaXNzdWVzIGlmXG4gICAgLy8gYW4gb2JqZWN0J3MgdG8gc3RyaW5nIGhhcyBlc2NhcGVkIGNoYXJhY3RlcnMgaW4gaXQuXG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmc7XG4gIH1cblxuICBpZiAoIXBvc3NpYmxlLnRlc3Qoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH1cbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKGJhZENoYXJzLCBlc2NhcGVDaGFyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSAmJiB2YWx1ZSAhPT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRnJhbWUob2JqZWN0KSB7XG4gIGxldCBmcmFtZSA9IGV4dGVuZCh7fSwgb2JqZWN0KTtcbiAgZnJhbWUuX3BhcmVudCA9IG9iamVjdDtcbiAgcmV0dXJuIGZyYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmxvY2tQYXJhbXMocGFyYW1zLCBpZHMpIHtcbiAgcGFyYW1zLnBhdGggPSBpZHM7XG4gIHJldHVybiBwYXJhbXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmRDb250ZXh0UGF0aChjb250ZXh0UGF0aCwgaWQpIHtcbiAgcmV0dXJuIChjb250ZXh0UGF0aCA/IGNvbnRleHRQYXRoICsgJy4nIDogJycpICsgaWQ7XG59XG4iXX0=


/***/ }),

/***/ "./node_modules/mime/Mime.js":
/*!***********************************!*\
  !*** ./node_modules/mime/Mime.js ***!
  \***********************************/
/***/ ((module) => {

"use strict";


/**
 * @param typeMap [Object] Map of MIME type -> Array[extensions]
 * @param ...
 */
function Mime() {
  this._types = Object.create(null);
  this._extensions = Object.create(null);

  for (let i = 0; i < arguments.length; i++) {
    this.define(arguments[i]);
  }

  this.define = this.define.bind(this);
  this.getType = this.getType.bind(this);
  this.getExtension = this.getExtension.bind(this);
}

/**
 * Define mimetype -> extension mappings.  Each key is a mime-type that maps
 * to an array of extensions associated with the type.  The first extension is
 * used as the default extension for the type.
 *
 * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});
 *
 * If a type declares an extension that has already been defined, an error will
 * be thrown.  To suppress this error and force the extension to be associated
 * with the new type, pass `force`=true.  Alternatively, you may prefix the
 * extension with "*" to map the type to extension, without mapping the
 * extension to the type.
 *
 * e.g. mime.define({'audio/wav', ['wav']}, {'audio/x-wav', ['*wav']});
 *
 *
 * @param map (Object) type definitions
 * @param force (Boolean) if true, force overriding of existing definitions
 */
Mime.prototype.define = function(typeMap, force) {
  for (let type in typeMap) {
    let extensions = typeMap[type].map(function(t) {
      return t.toLowerCase();
    });
    type = type.toLowerCase();

    for (let i = 0; i < extensions.length; i++) {
      const ext = extensions[i];

      // '*' prefix = not the preferred type for this extension.  So fixup the
      // extension, and skip it.
      if (ext[0] === '*') {
        continue;
      }

      if (!force && (ext in this._types)) {
        throw new Error(
          'Attempt to change mapping for "' + ext +
          '" extension from "' + this._types[ext] + '" to "' + type +
          '". Pass `force=true` to allow this, otherwise remove "' + ext +
          '" from the list of extensions for "' + type + '".'
        );
      }

      this._types[ext] = type;
    }

    // Use first extension as default
    if (force || !this._extensions[type]) {
      const ext = extensions[0];
      this._extensions[type] = (ext[0] !== '*') ? ext : ext.substr(1);
    }
  }
};

/**
 * Lookup a mime type based on extension
 */
Mime.prototype.getType = function(path) {
  path = String(path);
  let last = path.replace(/^.*[/\\]/, '').toLowerCase();
  let ext = last.replace(/^.*\./, '').toLowerCase();

  let hasPath = last.length < path.length;
  let hasDot = ext.length < last.length - 1;

  return (hasDot || !hasPath) && this._types[ext] || null;
};

/**
 * Return file extension associated with a mime type
 */
Mime.prototype.getExtension = function(type) {
  type = /^\s*([^;\s]*)/.test(type) && RegExp.$1;
  return type && this._extensions[type.toLowerCase()] || null;
};

module.exports = Mime;


/***/ }),

/***/ "./node_modules/mime/index.js":
/*!************************************!*\
  !*** ./node_modules/mime/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


let Mime = __webpack_require__(/*! ./Mime */ "./node_modules/mime/Mime.js");
module.exports = new Mime(__webpack_require__(/*! ./types/standard */ "./node_modules/mime/types/standard.js"), __webpack_require__(/*! ./types/other */ "./node_modules/mime/types/other.js"));


/***/ }),

/***/ "./node_modules/mime/types/other.js":
/*!******************************************!*\
  !*** ./node_modules/mime/types/other.js ***!
  \******************************************/
/***/ ((module) => {

module.exports = {"application/prs.cww":["cww"],"application/vnd.1000minds.decision-model+xml":["1km"],"application/vnd.3gpp.pic-bw-large":["plb"],"application/vnd.3gpp.pic-bw-small":["psb"],"application/vnd.3gpp.pic-bw-var":["pvb"],"application/vnd.3gpp2.tcap":["tcap"],"application/vnd.3m.post-it-notes":["pwn"],"application/vnd.accpac.simply.aso":["aso"],"application/vnd.accpac.simply.imp":["imp"],"application/vnd.acucobol":["acu"],"application/vnd.acucorp":["atc","acutc"],"application/vnd.adobe.air-application-installer-package+zip":["air"],"application/vnd.adobe.formscentral.fcdt":["fcdt"],"application/vnd.adobe.fxp":["fxp","fxpl"],"application/vnd.adobe.xdp+xml":["xdp"],"application/vnd.adobe.xfdf":["xfdf"],"application/vnd.ahead.space":["ahead"],"application/vnd.airzip.filesecure.azf":["azf"],"application/vnd.airzip.filesecure.azs":["azs"],"application/vnd.amazon.ebook":["azw"],"application/vnd.americandynamics.acc":["acc"],"application/vnd.amiga.ami":["ami"],"application/vnd.android.package-archive":["apk"],"application/vnd.anser-web-certificate-issue-initiation":["cii"],"application/vnd.anser-web-funds-transfer-initiation":["fti"],"application/vnd.antix.game-component":["atx"],"application/vnd.apple.installer+xml":["mpkg"],"application/vnd.apple.keynote":["key"],"application/vnd.apple.mpegurl":["m3u8"],"application/vnd.apple.numbers":["numbers"],"application/vnd.apple.pages":["pages"],"application/vnd.apple.pkpass":["pkpass"],"application/vnd.aristanetworks.swi":["swi"],"application/vnd.astraea-software.iota":["iota"],"application/vnd.audiograph":["aep"],"application/vnd.balsamiq.bmml+xml":["bmml"],"application/vnd.blueice.multipass":["mpm"],"application/vnd.bmi":["bmi"],"application/vnd.businessobjects":["rep"],"application/vnd.chemdraw+xml":["cdxml"],"application/vnd.chipnuts.karaoke-mmd":["mmd"],"application/vnd.cinderella":["cdy"],"application/vnd.citationstyles.style+xml":["csl"],"application/vnd.claymore":["cla"],"application/vnd.cloanto.rp9":["rp9"],"application/vnd.clonk.c4group":["c4g","c4d","c4f","c4p","c4u"],"application/vnd.cluetrust.cartomobile-config":["c11amc"],"application/vnd.cluetrust.cartomobile-config-pkg":["c11amz"],"application/vnd.commonspace":["csp"],"application/vnd.contact.cmsg":["cdbcmsg"],"application/vnd.cosmocaller":["cmc"],"application/vnd.crick.clicker":["clkx"],"application/vnd.crick.clicker.keyboard":["clkk"],"application/vnd.crick.clicker.palette":["clkp"],"application/vnd.crick.clicker.template":["clkt"],"application/vnd.crick.clicker.wordbank":["clkw"],"application/vnd.criticaltools.wbs+xml":["wbs"],"application/vnd.ctc-posml":["pml"],"application/vnd.cups-ppd":["ppd"],"application/vnd.curl.car":["car"],"application/vnd.curl.pcurl":["pcurl"],"application/vnd.dart":["dart"],"application/vnd.data-vision.rdz":["rdz"],"application/vnd.dbf":["dbf"],"application/vnd.dece.data":["uvf","uvvf","uvd","uvvd"],"application/vnd.dece.ttml+xml":["uvt","uvvt"],"application/vnd.dece.unspecified":["uvx","uvvx"],"application/vnd.dece.zip":["uvz","uvvz"],"application/vnd.denovo.fcselayout-link":["fe_launch"],"application/vnd.dna":["dna"],"application/vnd.dolby.mlp":["mlp"],"application/vnd.dpgraph":["dpg"],"application/vnd.dreamfactory":["dfac"],"application/vnd.ds-keypoint":["kpxx"],"application/vnd.dvb.ait":["ait"],"application/vnd.dvb.service":["svc"],"application/vnd.dynageo":["geo"],"application/vnd.ecowin.chart":["mag"],"application/vnd.enliven":["nml"],"application/vnd.epson.esf":["esf"],"application/vnd.epson.msf":["msf"],"application/vnd.epson.quickanime":["qam"],"application/vnd.epson.salt":["slt"],"application/vnd.epson.ssf":["ssf"],"application/vnd.eszigno3+xml":["es3","et3"],"application/vnd.ezpix-album":["ez2"],"application/vnd.ezpix-package":["ez3"],"application/vnd.fdf":["fdf"],"application/vnd.fdsn.mseed":["mseed"],"application/vnd.fdsn.seed":["seed","dataless"],"application/vnd.flographit":["gph"],"application/vnd.fluxtime.clip":["ftc"],"application/vnd.framemaker":["fm","frame","maker","book"],"application/vnd.frogans.fnc":["fnc"],"application/vnd.frogans.ltf":["ltf"],"application/vnd.fsc.weblaunch":["fsc"],"application/vnd.fujitsu.oasys":["oas"],"application/vnd.fujitsu.oasys2":["oa2"],"application/vnd.fujitsu.oasys3":["oa3"],"application/vnd.fujitsu.oasysgp":["fg5"],"application/vnd.fujitsu.oasysprs":["bh2"],"application/vnd.fujixerox.ddd":["ddd"],"application/vnd.fujixerox.docuworks":["xdw"],"application/vnd.fujixerox.docuworks.binder":["xbd"],"application/vnd.fuzzysheet":["fzs"],"application/vnd.genomatix.tuxedo":["txd"],"application/vnd.geogebra.file":["ggb"],"application/vnd.geogebra.tool":["ggt"],"application/vnd.geometry-explorer":["gex","gre"],"application/vnd.geonext":["gxt"],"application/vnd.geoplan":["g2w"],"application/vnd.geospace":["g3w"],"application/vnd.gmx":["gmx"],"application/vnd.google-apps.document":["gdoc"],"application/vnd.google-apps.presentation":["gslides"],"application/vnd.google-apps.spreadsheet":["gsheet"],"application/vnd.google-earth.kml+xml":["kml"],"application/vnd.google-earth.kmz":["kmz"],"application/vnd.grafeq":["gqf","gqs"],"application/vnd.groove-account":["gac"],"application/vnd.groove-help":["ghf"],"application/vnd.groove-identity-message":["gim"],"application/vnd.groove-injector":["grv"],"application/vnd.groove-tool-message":["gtm"],"application/vnd.groove-tool-template":["tpl"],"application/vnd.groove-vcard":["vcg"],"application/vnd.hal+xml":["hal"],"application/vnd.handheld-entertainment+xml":["zmm"],"application/vnd.hbci":["hbci"],"application/vnd.hhe.lesson-player":["les"],"application/vnd.hp-hpgl":["hpgl"],"application/vnd.hp-hpid":["hpid"],"application/vnd.hp-hps":["hps"],"application/vnd.hp-jlyt":["jlt"],"application/vnd.hp-pcl":["pcl"],"application/vnd.hp-pclxl":["pclxl"],"application/vnd.hydrostatix.sof-data":["sfd-hdstx"],"application/vnd.ibm.minipay":["mpy"],"application/vnd.ibm.modcap":["afp","listafp","list3820"],"application/vnd.ibm.rights-management":["irm"],"application/vnd.ibm.secure-container":["sc"],"application/vnd.iccprofile":["icc","icm"],"application/vnd.igloader":["igl"],"application/vnd.immervision-ivp":["ivp"],"application/vnd.immervision-ivu":["ivu"],"application/vnd.insors.igm":["igm"],"application/vnd.intercon.formnet":["xpw","xpx"],"application/vnd.intergeo":["i2g"],"application/vnd.intu.qbo":["qbo"],"application/vnd.intu.qfx":["qfx"],"application/vnd.ipunplugged.rcprofile":["rcprofile"],"application/vnd.irepository.package+xml":["irp"],"application/vnd.is-xpr":["xpr"],"application/vnd.isac.fcs":["fcs"],"application/vnd.jam":["jam"],"application/vnd.jcp.javame.midlet-rms":["rms"],"application/vnd.jisp":["jisp"],"application/vnd.joost.joda-archive":["joda"],"application/vnd.kahootz":["ktz","ktr"],"application/vnd.kde.karbon":["karbon"],"application/vnd.kde.kchart":["chrt"],"application/vnd.kde.kformula":["kfo"],"application/vnd.kde.kivio":["flw"],"application/vnd.kde.kontour":["kon"],"application/vnd.kde.kpresenter":["kpr","kpt"],"application/vnd.kde.kspread":["ksp"],"application/vnd.kde.kword":["kwd","kwt"],"application/vnd.kenameaapp":["htke"],"application/vnd.kidspiration":["kia"],"application/vnd.kinar":["kne","knp"],"application/vnd.koan":["skp","skd","skt","skm"],"application/vnd.kodak-descriptor":["sse"],"application/vnd.las.las+xml":["lasxml"],"application/vnd.llamagraphics.life-balance.desktop":["lbd"],"application/vnd.llamagraphics.life-balance.exchange+xml":["lbe"],"application/vnd.lotus-1-2-3":["123"],"application/vnd.lotus-approach":["apr"],"application/vnd.lotus-freelance":["pre"],"application/vnd.lotus-notes":["nsf"],"application/vnd.lotus-organizer":["org"],"application/vnd.lotus-screencam":["scm"],"application/vnd.lotus-wordpro":["lwp"],"application/vnd.macports.portpkg":["portpkg"],"application/vnd.mapbox-vector-tile":["mvt"],"application/vnd.mcd":["mcd"],"application/vnd.medcalcdata":["mc1"],"application/vnd.mediastation.cdkey":["cdkey"],"application/vnd.mfer":["mwf"],"application/vnd.mfmp":["mfm"],"application/vnd.micrografx.flo":["flo"],"application/vnd.micrografx.igx":["igx"],"application/vnd.mif":["mif"],"application/vnd.mobius.daf":["daf"],"application/vnd.mobius.dis":["dis"],"application/vnd.mobius.mbk":["mbk"],"application/vnd.mobius.mqy":["mqy"],"application/vnd.mobius.msl":["msl"],"application/vnd.mobius.plc":["plc"],"application/vnd.mobius.txf":["txf"],"application/vnd.mophun.application":["mpn"],"application/vnd.mophun.certificate":["mpc"],"application/vnd.mozilla.xul+xml":["xul"],"application/vnd.ms-artgalry":["cil"],"application/vnd.ms-cab-compressed":["cab"],"application/vnd.ms-excel":["xls","xlm","xla","xlc","xlt","xlw"],"application/vnd.ms-excel.addin.macroenabled.12":["xlam"],"application/vnd.ms-excel.sheet.binary.macroenabled.12":["xlsb"],"application/vnd.ms-excel.sheet.macroenabled.12":["xlsm"],"application/vnd.ms-excel.template.macroenabled.12":["xltm"],"application/vnd.ms-fontobject":["eot"],"application/vnd.ms-htmlhelp":["chm"],"application/vnd.ms-ims":["ims"],"application/vnd.ms-lrm":["lrm"],"application/vnd.ms-officetheme":["thmx"],"application/vnd.ms-outlook":["msg"],"application/vnd.ms-pki.seccat":["cat"],"application/vnd.ms-pki.stl":["*stl"],"application/vnd.ms-powerpoint":["ppt","pps","pot"],"application/vnd.ms-powerpoint.addin.macroenabled.12":["ppam"],"application/vnd.ms-powerpoint.presentation.macroenabled.12":["pptm"],"application/vnd.ms-powerpoint.slide.macroenabled.12":["sldm"],"application/vnd.ms-powerpoint.slideshow.macroenabled.12":["ppsm"],"application/vnd.ms-powerpoint.template.macroenabled.12":["potm"],"application/vnd.ms-project":["mpp","mpt"],"application/vnd.ms-word.document.macroenabled.12":["docm"],"application/vnd.ms-word.template.macroenabled.12":["dotm"],"application/vnd.ms-works":["wps","wks","wcm","wdb"],"application/vnd.ms-wpl":["wpl"],"application/vnd.ms-xpsdocument":["xps"],"application/vnd.mseq":["mseq"],"application/vnd.musician":["mus"],"application/vnd.muvee.style":["msty"],"application/vnd.mynfc":["taglet"],"application/vnd.neurolanguage.nlu":["nlu"],"application/vnd.nitf":["ntf","nitf"],"application/vnd.noblenet-directory":["nnd"],"application/vnd.noblenet-sealer":["nns"],"application/vnd.noblenet-web":["nnw"],"application/vnd.nokia.n-gage.ac+xml":["*ac"],"application/vnd.nokia.n-gage.data":["ngdat"],"application/vnd.nokia.n-gage.symbian.install":["n-gage"],"application/vnd.nokia.radio-preset":["rpst"],"application/vnd.nokia.radio-presets":["rpss"],"application/vnd.novadigm.edm":["edm"],"application/vnd.novadigm.edx":["edx"],"application/vnd.novadigm.ext":["ext"],"application/vnd.oasis.opendocument.chart":["odc"],"application/vnd.oasis.opendocument.chart-template":["otc"],"application/vnd.oasis.opendocument.database":["odb"],"application/vnd.oasis.opendocument.formula":["odf"],"application/vnd.oasis.opendocument.formula-template":["odft"],"application/vnd.oasis.opendocument.graphics":["odg"],"application/vnd.oasis.opendocument.graphics-template":["otg"],"application/vnd.oasis.opendocument.image":["odi"],"application/vnd.oasis.opendocument.image-template":["oti"],"application/vnd.oasis.opendocument.presentation":["odp"],"application/vnd.oasis.opendocument.presentation-template":["otp"],"application/vnd.oasis.opendocument.spreadsheet":["ods"],"application/vnd.oasis.opendocument.spreadsheet-template":["ots"],"application/vnd.oasis.opendocument.text":["odt"],"application/vnd.oasis.opendocument.text-master":["odm"],"application/vnd.oasis.opendocument.text-template":["ott"],"application/vnd.oasis.opendocument.text-web":["oth"],"application/vnd.olpc-sugar":["xo"],"application/vnd.oma.dd2+xml":["dd2"],"application/vnd.openblox.game+xml":["obgx"],"application/vnd.openofficeorg.extension":["oxt"],"application/vnd.openstreetmap.data+xml":["osm"],"application/vnd.openxmlformats-officedocument.presentationml.presentation":["pptx"],"application/vnd.openxmlformats-officedocument.presentationml.slide":["sldx"],"application/vnd.openxmlformats-officedocument.presentationml.slideshow":["ppsx"],"application/vnd.openxmlformats-officedocument.presentationml.template":["potx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":["xlsx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.template":["xltx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.document":["docx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.template":["dotx"],"application/vnd.osgeo.mapguide.package":["mgp"],"application/vnd.osgi.dp":["dp"],"application/vnd.osgi.subsystem":["esa"],"application/vnd.palm":["pdb","pqa","oprc"],"application/vnd.pawaafile":["paw"],"application/vnd.pg.format":["str"],"application/vnd.pg.osasli":["ei6"],"application/vnd.picsel":["efif"],"application/vnd.pmi.widget":["wg"],"application/vnd.pocketlearn":["plf"],"application/vnd.powerbuilder6":["pbd"],"application/vnd.previewsystems.box":["box"],"application/vnd.proteus.magazine":["mgz"],"application/vnd.publishare-delta-tree":["qps"],"application/vnd.pvi.ptid1":["ptid"],"application/vnd.quark.quarkxpress":["qxd","qxt","qwd","qwt","qxl","qxb"],"application/vnd.rar":["rar"],"application/vnd.realvnc.bed":["bed"],"application/vnd.recordare.musicxml":["mxl"],"application/vnd.recordare.musicxml+xml":["musicxml"],"application/vnd.rig.cryptonote":["cryptonote"],"application/vnd.rim.cod":["cod"],"application/vnd.rn-realmedia":["rm"],"application/vnd.rn-realmedia-vbr":["rmvb"],"application/vnd.route66.link66+xml":["link66"],"application/vnd.sailingtracker.track":["st"],"application/vnd.seemail":["see"],"application/vnd.sema":["sema"],"application/vnd.semd":["semd"],"application/vnd.semf":["semf"],"application/vnd.shana.informed.formdata":["ifm"],"application/vnd.shana.informed.formtemplate":["itp"],"application/vnd.shana.informed.interchange":["iif"],"application/vnd.shana.informed.package":["ipk"],"application/vnd.simtech-mindmapper":["twd","twds"],"application/vnd.smaf":["mmf"],"application/vnd.smart.teacher":["teacher"],"application/vnd.software602.filler.form+xml":["fo"],"application/vnd.solent.sdkm+xml":["sdkm","sdkd"],"application/vnd.spotfire.dxp":["dxp"],"application/vnd.spotfire.sfs":["sfs"],"application/vnd.stardivision.calc":["sdc"],"application/vnd.stardivision.draw":["sda"],"application/vnd.stardivision.impress":["sdd"],"application/vnd.stardivision.math":["smf"],"application/vnd.stardivision.writer":["sdw","vor"],"application/vnd.stardivision.writer-global":["sgl"],"application/vnd.stepmania.package":["smzip"],"application/vnd.stepmania.stepchart":["sm"],"application/vnd.sun.wadl+xml":["wadl"],"application/vnd.sun.xml.calc":["sxc"],"application/vnd.sun.xml.calc.template":["stc"],"application/vnd.sun.xml.draw":["sxd"],"application/vnd.sun.xml.draw.template":["std"],"application/vnd.sun.xml.impress":["sxi"],"application/vnd.sun.xml.impress.template":["sti"],"application/vnd.sun.xml.math":["sxm"],"application/vnd.sun.xml.writer":["sxw"],"application/vnd.sun.xml.writer.global":["sxg"],"application/vnd.sun.xml.writer.template":["stw"],"application/vnd.sus-calendar":["sus","susp"],"application/vnd.svd":["svd"],"application/vnd.symbian.install":["sis","sisx"],"application/vnd.syncml+xml":["xsm"],"application/vnd.syncml.dm+wbxml":["bdm"],"application/vnd.syncml.dm+xml":["xdm"],"application/vnd.syncml.dmddf+xml":["ddf"],"application/vnd.tao.intent-module-archive":["tao"],"application/vnd.tcpdump.pcap":["pcap","cap","dmp"],"application/vnd.tmobile-livetv":["tmo"],"application/vnd.trid.tpt":["tpt"],"application/vnd.triscape.mxs":["mxs"],"application/vnd.trueapp":["tra"],"application/vnd.ufdl":["ufd","ufdl"],"application/vnd.uiq.theme":["utz"],"application/vnd.umajin":["umj"],"application/vnd.unity":["unityweb"],"application/vnd.uoml+xml":["uoml"],"application/vnd.vcx":["vcx"],"application/vnd.visio":["vsd","vst","vss","vsw"],"application/vnd.visionary":["vis"],"application/vnd.vsf":["vsf"],"application/vnd.wap.wbxml":["wbxml"],"application/vnd.wap.wmlc":["wmlc"],"application/vnd.wap.wmlscriptc":["wmlsc"],"application/vnd.webturbo":["wtb"],"application/vnd.wolfram.player":["nbp"],"application/vnd.wordperfect":["wpd"],"application/vnd.wqd":["wqd"],"application/vnd.wt.stf":["stf"],"application/vnd.xara":["xar"],"application/vnd.xfdl":["xfdl"],"application/vnd.yamaha.hv-dic":["hvd"],"application/vnd.yamaha.hv-script":["hvs"],"application/vnd.yamaha.hv-voice":["hvp"],"application/vnd.yamaha.openscoreformat":["osf"],"application/vnd.yamaha.openscoreformat.osfpvg+xml":["osfpvg"],"application/vnd.yamaha.smaf-audio":["saf"],"application/vnd.yamaha.smaf-phrase":["spf"],"application/vnd.yellowriver-custom-menu":["cmp"],"application/vnd.zul":["zir","zirz"],"application/vnd.zzazz.deck+xml":["zaz"],"application/x-7z-compressed":["7z"],"application/x-abiword":["abw"],"application/x-ace-compressed":["ace"],"application/x-apple-diskimage":["*dmg"],"application/x-arj":["arj"],"application/x-authorware-bin":["aab","x32","u32","vox"],"application/x-authorware-map":["aam"],"application/x-authorware-seg":["aas"],"application/x-bcpio":["bcpio"],"application/x-bdoc":["*bdoc"],"application/x-bittorrent":["torrent"],"application/x-blorb":["blb","blorb"],"application/x-bzip":["bz"],"application/x-bzip2":["bz2","boz"],"application/x-cbr":["cbr","cba","cbt","cbz","cb7"],"application/x-cdlink":["vcd"],"application/x-cfs-compressed":["cfs"],"application/x-chat":["chat"],"application/x-chess-pgn":["pgn"],"application/x-chrome-extension":["crx"],"application/x-cocoa":["cco"],"application/x-conference":["nsc"],"application/x-cpio":["cpio"],"application/x-csh":["csh"],"application/x-debian-package":["*deb","udeb"],"application/x-dgc-compressed":["dgc"],"application/x-director":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"],"application/x-doom":["wad"],"application/x-dtbncx+xml":["ncx"],"application/x-dtbook+xml":["dtb"],"application/x-dtbresource+xml":["res"],"application/x-dvi":["dvi"],"application/x-envoy":["evy"],"application/x-eva":["eva"],"application/x-font-bdf":["bdf"],"application/x-font-ghostscript":["gsf"],"application/x-font-linux-psf":["psf"],"application/x-font-pcf":["pcf"],"application/x-font-snf":["snf"],"application/x-font-type1":["pfa","pfb","pfm","afm"],"application/x-freearc":["arc"],"application/x-futuresplash":["spl"],"application/x-gca-compressed":["gca"],"application/x-glulx":["ulx"],"application/x-gnumeric":["gnumeric"],"application/x-gramps-xml":["gramps"],"application/x-gtar":["gtar"],"application/x-hdf":["hdf"],"application/x-httpd-php":["php"],"application/x-install-instructions":["install"],"application/x-iso9660-image":["*iso"],"application/x-iwork-keynote-sffkey":["*key"],"application/x-iwork-numbers-sffnumbers":["*numbers"],"application/x-iwork-pages-sffpages":["*pages"],"application/x-java-archive-diff":["jardiff"],"application/x-java-jnlp-file":["jnlp"],"application/x-keepass2":["kdbx"],"application/x-latex":["latex"],"application/x-lua-bytecode":["luac"],"application/x-lzh-compressed":["lzh","lha"],"application/x-makeself":["run"],"application/x-mie":["mie"],"application/x-mobipocket-ebook":["prc","mobi"],"application/x-ms-application":["application"],"application/x-ms-shortcut":["lnk"],"application/x-ms-wmd":["wmd"],"application/x-ms-wmz":["wmz"],"application/x-ms-xbap":["xbap"],"application/x-msaccess":["mdb"],"application/x-msbinder":["obd"],"application/x-mscardfile":["crd"],"application/x-msclip":["clp"],"application/x-msdos-program":["*exe"],"application/x-msdownload":["*exe","*dll","com","bat","*msi"],"application/x-msmediaview":["mvb","m13","m14"],"application/x-msmetafile":["*wmf","*wmz","*emf","emz"],"application/x-msmoney":["mny"],"application/x-mspublisher":["pub"],"application/x-msschedule":["scd"],"application/x-msterminal":["trm"],"application/x-mswrite":["wri"],"application/x-netcdf":["nc","cdf"],"application/x-ns-proxy-autoconfig":["pac"],"application/x-nzb":["nzb"],"application/x-perl":["pl","pm"],"application/x-pilot":["*prc","*pdb"],"application/x-pkcs12":["p12","pfx"],"application/x-pkcs7-certificates":["p7b","spc"],"application/x-pkcs7-certreqresp":["p7r"],"application/x-rar-compressed":["*rar"],"application/x-redhat-package-manager":["rpm"],"application/x-research-info-systems":["ris"],"application/x-sea":["sea"],"application/x-sh":["sh"],"application/x-shar":["shar"],"application/x-shockwave-flash":["swf"],"application/x-silverlight-app":["xap"],"application/x-sql":["sql"],"application/x-stuffit":["sit"],"application/x-stuffitx":["sitx"],"application/x-subrip":["srt"],"application/x-sv4cpio":["sv4cpio"],"application/x-sv4crc":["sv4crc"],"application/x-t3vm-image":["t3"],"application/x-tads":["gam"],"application/x-tar":["tar"],"application/x-tcl":["tcl","tk"],"application/x-tex":["tex"],"application/x-tex-tfm":["tfm"],"application/x-texinfo":["texinfo","texi"],"application/x-tgif":["*obj"],"application/x-ustar":["ustar"],"application/x-virtualbox-hdd":["hdd"],"application/x-virtualbox-ova":["ova"],"application/x-virtualbox-ovf":["ovf"],"application/x-virtualbox-vbox":["vbox"],"application/x-virtualbox-vbox-extpack":["vbox-extpack"],"application/x-virtualbox-vdi":["vdi"],"application/x-virtualbox-vhd":["vhd"],"application/x-virtualbox-vmdk":["vmdk"],"application/x-wais-source":["src"],"application/x-web-app-manifest+json":["webapp"],"application/x-x509-ca-cert":["der","crt","pem"],"application/x-xfig":["fig"],"application/x-xliff+xml":["*xlf"],"application/x-xpinstall":["xpi"],"application/x-xz":["xz"],"application/x-zmachine":["z1","z2","z3","z4","z5","z6","z7","z8"],"audio/vnd.dece.audio":["uva","uvva"],"audio/vnd.digital-winds":["eol"],"audio/vnd.dra":["dra"],"audio/vnd.dts":["dts"],"audio/vnd.dts.hd":["dtshd"],"audio/vnd.lucent.voice":["lvp"],"audio/vnd.ms-playready.media.pya":["pya"],"audio/vnd.nuera.ecelp4800":["ecelp4800"],"audio/vnd.nuera.ecelp7470":["ecelp7470"],"audio/vnd.nuera.ecelp9600":["ecelp9600"],"audio/vnd.rip":["rip"],"audio/x-aac":["aac"],"audio/x-aiff":["aif","aiff","aifc"],"audio/x-caf":["caf"],"audio/x-flac":["flac"],"audio/x-m4a":["*m4a"],"audio/x-matroska":["mka"],"audio/x-mpegurl":["m3u"],"audio/x-ms-wax":["wax"],"audio/x-ms-wma":["wma"],"audio/x-pn-realaudio":["ram","ra"],"audio/x-pn-realaudio-plugin":["rmp"],"audio/x-realaudio":["*ra"],"audio/x-wav":["*wav"],"chemical/x-cdx":["cdx"],"chemical/x-cif":["cif"],"chemical/x-cmdf":["cmdf"],"chemical/x-cml":["cml"],"chemical/x-csml":["csml"],"chemical/x-xyz":["xyz"],"image/prs.btif":["btif"],"image/prs.pti":["pti"],"image/vnd.adobe.photoshop":["psd"],"image/vnd.airzip.accelerator.azv":["azv"],"image/vnd.dece.graphic":["uvi","uvvi","uvg","uvvg"],"image/vnd.djvu":["djvu","djv"],"image/vnd.dvb.subtitle":["*sub"],"image/vnd.dwg":["dwg"],"image/vnd.dxf":["dxf"],"image/vnd.fastbidsheet":["fbs"],"image/vnd.fpx":["fpx"],"image/vnd.fst":["fst"],"image/vnd.fujixerox.edmics-mmr":["mmr"],"image/vnd.fujixerox.edmics-rlc":["rlc"],"image/vnd.microsoft.icon":["ico"],"image/vnd.ms-dds":["dds"],"image/vnd.ms-modi":["mdi"],"image/vnd.ms-photo":["wdp"],"image/vnd.net-fpx":["npx"],"image/vnd.pco.b16":["b16"],"image/vnd.tencent.tap":["tap"],"image/vnd.valve.source.texture":["vtf"],"image/vnd.wap.wbmp":["wbmp"],"image/vnd.xiff":["xif"],"image/vnd.zbrush.pcx":["pcx"],"image/x-3ds":["3ds"],"image/x-cmu-raster":["ras"],"image/x-cmx":["cmx"],"image/x-freehand":["fh","fhc","fh4","fh5","fh7"],"image/x-icon":["*ico"],"image/x-jng":["jng"],"image/x-mrsid-image":["sid"],"image/x-ms-bmp":["*bmp"],"image/x-pcx":["*pcx"],"image/x-pict":["pic","pct"],"image/x-portable-anymap":["pnm"],"image/x-portable-bitmap":["pbm"],"image/x-portable-graymap":["pgm"],"image/x-portable-pixmap":["ppm"],"image/x-rgb":["rgb"],"image/x-tga":["tga"],"image/x-xbitmap":["xbm"],"image/x-xpixmap":["xpm"],"image/x-xwindowdump":["xwd"],"message/vnd.wfa.wsc":["wsc"],"model/vnd.collada+xml":["dae"],"model/vnd.dwf":["dwf"],"model/vnd.gdl":["gdl"],"model/vnd.gtw":["gtw"],"model/vnd.mts":["mts"],"model/vnd.opengex":["ogex"],"model/vnd.parasolid.transmit.binary":["x_b"],"model/vnd.parasolid.transmit.text":["x_t"],"model/vnd.sap.vds":["vds"],"model/vnd.usdz+zip":["usdz"],"model/vnd.valve.source.compiled-map":["bsp"],"model/vnd.vtu":["vtu"],"text/prs.lines.tag":["dsc"],"text/vnd.curl":["curl"],"text/vnd.curl.dcurl":["dcurl"],"text/vnd.curl.mcurl":["mcurl"],"text/vnd.curl.scurl":["scurl"],"text/vnd.dvb.subtitle":["sub"],"text/vnd.fly":["fly"],"text/vnd.fmi.flexstor":["flx"],"text/vnd.graphviz":["gv"],"text/vnd.in3d.3dml":["3dml"],"text/vnd.in3d.spot":["spot"],"text/vnd.sun.j2me.app-descriptor":["jad"],"text/vnd.wap.wml":["wml"],"text/vnd.wap.wmlscript":["wmls"],"text/x-asm":["s","asm"],"text/x-c":["c","cc","cxx","cpp","h","hh","dic"],"text/x-component":["htc"],"text/x-fortran":["f","for","f77","f90"],"text/x-handlebars-template":["hbs"],"text/x-java-source":["java"],"text/x-lua":["lua"],"text/x-markdown":["mkd"],"text/x-nfo":["nfo"],"text/x-opml":["opml"],"text/x-org":["*org"],"text/x-pascal":["p","pas"],"text/x-processing":["pde"],"text/x-sass":["sass"],"text/x-scss":["scss"],"text/x-setext":["etx"],"text/x-sfv":["sfv"],"text/x-suse-ymp":["ymp"],"text/x-uuencode":["uu"],"text/x-vcalendar":["vcs"],"text/x-vcard":["vcf"],"video/vnd.dece.hd":["uvh","uvvh"],"video/vnd.dece.mobile":["uvm","uvvm"],"video/vnd.dece.pd":["uvp","uvvp"],"video/vnd.dece.sd":["uvs","uvvs"],"video/vnd.dece.video":["uvv","uvvv"],"video/vnd.dvb.file":["dvb"],"video/vnd.fvt":["fvt"],"video/vnd.mpegurl":["mxu","m4u"],"video/vnd.ms-playready.media.pyv":["pyv"],"video/vnd.uvvu.mp4":["uvu","uvvu"],"video/vnd.vivo":["viv"],"video/x-f4v":["f4v"],"video/x-fli":["fli"],"video/x-flv":["flv"],"video/x-m4v":["m4v"],"video/x-matroska":["mkv","mk3d","mks"],"video/x-mng":["mng"],"video/x-ms-asf":["asf","asx"],"video/x-ms-vob":["vob"],"video/x-ms-wm":["wm"],"video/x-ms-wmv":["wmv"],"video/x-ms-wmx":["wmx"],"video/x-ms-wvx":["wvx"],"video/x-msvideo":["avi"],"video/x-sgi-movie":["movie"],"video/x-smv":["smv"],"x-conference/x-cooltalk":["ice"]};

/***/ }),

/***/ "./node_modules/mime/types/standard.js":
/*!*********************************************!*\
  !*** ./node_modules/mime/types/standard.js ***!
  \*********************************************/
/***/ ((module) => {

module.exports = {"application/andrew-inset":["ez"],"application/applixware":["aw"],"application/atom+xml":["atom"],"application/atomcat+xml":["atomcat"],"application/atomdeleted+xml":["atomdeleted"],"application/atomsvc+xml":["atomsvc"],"application/atsc-dwd+xml":["dwd"],"application/atsc-held+xml":["held"],"application/atsc-rsat+xml":["rsat"],"application/bdoc":["bdoc"],"application/calendar+xml":["xcs"],"application/ccxml+xml":["ccxml"],"application/cdfx+xml":["cdfx"],"application/cdmi-capability":["cdmia"],"application/cdmi-container":["cdmic"],"application/cdmi-domain":["cdmid"],"application/cdmi-object":["cdmio"],"application/cdmi-queue":["cdmiq"],"application/cu-seeme":["cu"],"application/dash+xml":["mpd"],"application/davmount+xml":["davmount"],"application/docbook+xml":["dbk"],"application/dssc+der":["dssc"],"application/dssc+xml":["xdssc"],"application/ecmascript":["es","ecma"],"application/emma+xml":["emma"],"application/emotionml+xml":["emotionml"],"application/epub+zip":["epub"],"application/exi":["exi"],"application/express":["exp"],"application/fdt+xml":["fdt"],"application/font-tdpfr":["pfr"],"application/geo+json":["geojson"],"application/gml+xml":["gml"],"application/gpx+xml":["gpx"],"application/gxf":["gxf"],"application/gzip":["gz"],"application/hjson":["hjson"],"application/hyperstudio":["stk"],"application/inkml+xml":["ink","inkml"],"application/ipfix":["ipfix"],"application/its+xml":["its"],"application/java-archive":["jar","war","ear"],"application/java-serialized-object":["ser"],"application/java-vm":["class"],"application/javascript":["js","mjs"],"application/json":["json","map"],"application/json5":["json5"],"application/jsonml+json":["jsonml"],"application/ld+json":["jsonld"],"application/lgr+xml":["lgr"],"application/lost+xml":["lostxml"],"application/mac-binhex40":["hqx"],"application/mac-compactpro":["cpt"],"application/mads+xml":["mads"],"application/manifest+json":["webmanifest"],"application/marc":["mrc"],"application/marcxml+xml":["mrcx"],"application/mathematica":["ma","nb","mb"],"application/mathml+xml":["mathml"],"application/mbox":["mbox"],"application/mediaservercontrol+xml":["mscml"],"application/metalink+xml":["metalink"],"application/metalink4+xml":["meta4"],"application/mets+xml":["mets"],"application/mmt-aei+xml":["maei"],"application/mmt-usd+xml":["musd"],"application/mods+xml":["mods"],"application/mp21":["m21","mp21"],"application/mp4":["mp4s","m4p"],"application/msword":["doc","dot"],"application/mxf":["mxf"],"application/n-quads":["nq"],"application/n-triples":["nt"],"application/node":["cjs"],"application/octet-stream":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"],"application/oda":["oda"],"application/oebps-package+xml":["opf"],"application/ogg":["ogx"],"application/omdoc+xml":["omdoc"],"application/onenote":["onetoc","onetoc2","onetmp","onepkg"],"application/oxps":["oxps"],"application/p2p-overlay+xml":["relo"],"application/patch-ops-error+xml":["xer"],"application/pdf":["pdf"],"application/pgp-encrypted":["pgp"],"application/pgp-signature":["asc","sig"],"application/pics-rules":["prf"],"application/pkcs10":["p10"],"application/pkcs7-mime":["p7m","p7c"],"application/pkcs7-signature":["p7s"],"application/pkcs8":["p8"],"application/pkix-attr-cert":["ac"],"application/pkix-cert":["cer"],"application/pkix-crl":["crl"],"application/pkix-pkipath":["pkipath"],"application/pkixcmp":["pki"],"application/pls+xml":["pls"],"application/postscript":["ai","eps","ps"],"application/provenance+xml":["provx"],"application/pskc+xml":["pskcxml"],"application/raml+yaml":["raml"],"application/rdf+xml":["rdf","owl"],"application/reginfo+xml":["rif"],"application/relax-ng-compact-syntax":["rnc"],"application/resource-lists+xml":["rl"],"application/resource-lists-diff+xml":["rld"],"application/rls-services+xml":["rs"],"application/route-apd+xml":["rapd"],"application/route-s-tsid+xml":["sls"],"application/route-usd+xml":["rusd"],"application/rpki-ghostbusters":["gbr"],"application/rpki-manifest":["mft"],"application/rpki-roa":["roa"],"application/rsd+xml":["rsd"],"application/rss+xml":["rss"],"application/rtf":["rtf"],"application/sbml+xml":["sbml"],"application/scvp-cv-request":["scq"],"application/scvp-cv-response":["scs"],"application/scvp-vp-request":["spq"],"application/scvp-vp-response":["spp"],"application/sdp":["sdp"],"application/senml+xml":["senmlx"],"application/sensml+xml":["sensmlx"],"application/set-payment-initiation":["setpay"],"application/set-registration-initiation":["setreg"],"application/shf+xml":["shf"],"application/sieve":["siv","sieve"],"application/smil+xml":["smi","smil"],"application/sparql-query":["rq"],"application/sparql-results+xml":["srx"],"application/srgs":["gram"],"application/srgs+xml":["grxml"],"application/sru+xml":["sru"],"application/ssdl+xml":["ssdl"],"application/ssml+xml":["ssml"],"application/swid+xml":["swidtag"],"application/tei+xml":["tei","teicorpus"],"application/thraud+xml":["tfi"],"application/timestamped-data":["tsd"],"application/toml":["toml"],"application/trig":["trig"],"application/ttml+xml":["ttml"],"application/ubjson":["ubj"],"application/urc-ressheet+xml":["rsheet"],"application/urc-targetdesc+xml":["td"],"application/voicexml+xml":["vxml"],"application/wasm":["wasm"],"application/widget":["wgt"],"application/winhlp":["hlp"],"application/wsdl+xml":["wsdl"],"application/wspolicy+xml":["wspolicy"],"application/xaml+xml":["xaml"],"application/xcap-att+xml":["xav"],"application/xcap-caps+xml":["xca"],"application/xcap-diff+xml":["xdf"],"application/xcap-el+xml":["xel"],"application/xcap-ns+xml":["xns"],"application/xenc+xml":["xenc"],"application/xhtml+xml":["xhtml","xht"],"application/xliff+xml":["xlf"],"application/xml":["xml","xsl","xsd","rng"],"application/xml-dtd":["dtd"],"application/xop+xml":["xop"],"application/xproc+xml":["xpl"],"application/xslt+xml":["*xsl","xslt"],"application/xspf+xml":["xspf"],"application/xv+xml":["mxml","xhvml","xvml","xvm"],"application/yang":["yang"],"application/yin+xml":["yin"],"application/zip":["zip"],"audio/3gpp":["*3gpp"],"audio/adpcm":["adp"],"audio/amr":["amr"],"audio/basic":["au","snd"],"audio/midi":["mid","midi","kar","rmi"],"audio/mobile-xmf":["mxmf"],"audio/mp3":["*mp3"],"audio/mp4":["m4a","mp4a"],"audio/mpeg":["mpga","mp2","mp2a","mp3","m2a","m3a"],"audio/ogg":["oga","ogg","spx","opus"],"audio/s3m":["s3m"],"audio/silk":["sil"],"audio/wav":["wav"],"audio/wave":["*wav"],"audio/webm":["weba"],"audio/xm":["xm"],"font/collection":["ttc"],"font/otf":["otf"],"font/ttf":["ttf"],"font/woff":["woff"],"font/woff2":["woff2"],"image/aces":["exr"],"image/apng":["apng"],"image/avif":["avif"],"image/bmp":["bmp"],"image/cgm":["cgm"],"image/dicom-rle":["drle"],"image/emf":["emf"],"image/fits":["fits"],"image/g3fax":["g3"],"image/gif":["gif"],"image/heic":["heic"],"image/heic-sequence":["heics"],"image/heif":["heif"],"image/heif-sequence":["heifs"],"image/hej2k":["hej2"],"image/hsj2":["hsj2"],"image/ief":["ief"],"image/jls":["jls"],"image/jp2":["jp2","jpg2"],"image/jpeg":["jpeg","jpg","jpe"],"image/jph":["jph"],"image/jphc":["jhc"],"image/jpm":["jpm"],"image/jpx":["jpx","jpf"],"image/jxr":["jxr"],"image/jxra":["jxra"],"image/jxrs":["jxrs"],"image/jxs":["jxs"],"image/jxsc":["jxsc"],"image/jxsi":["jxsi"],"image/jxss":["jxss"],"image/ktx":["ktx"],"image/ktx2":["ktx2"],"image/png":["png"],"image/sgi":["sgi"],"image/svg+xml":["svg","svgz"],"image/t38":["t38"],"image/tiff":["tif","tiff"],"image/tiff-fx":["tfx"],"image/webp":["webp"],"image/wmf":["wmf"],"message/disposition-notification":["disposition-notification"],"message/global":["u8msg"],"message/global-delivery-status":["u8dsn"],"message/global-disposition-notification":["u8mdn"],"message/global-headers":["u8hdr"],"message/rfc822":["eml","mime"],"model/3mf":["3mf"],"model/gltf+json":["gltf"],"model/gltf-binary":["glb"],"model/iges":["igs","iges"],"model/mesh":["msh","mesh","silo"],"model/mtl":["mtl"],"model/obj":["obj"],"model/step+xml":["stpx"],"model/step+zip":["stpz"],"model/step-xml+zip":["stpxz"],"model/stl":["stl"],"model/vrml":["wrl","vrml"],"model/x3d+binary":["*x3db","x3dbz"],"model/x3d+fastinfoset":["x3db"],"model/x3d+vrml":["*x3dv","x3dvz"],"model/x3d+xml":["x3d","x3dz"],"model/x3d-vrml":["x3dv"],"text/cache-manifest":["appcache","manifest"],"text/calendar":["ics","ifb"],"text/coffeescript":["coffee","litcoffee"],"text/css":["css"],"text/csv":["csv"],"text/html":["html","htm","shtml"],"text/jade":["jade"],"text/jsx":["jsx"],"text/less":["less"],"text/markdown":["markdown","md"],"text/mathml":["mml"],"text/mdx":["mdx"],"text/n3":["n3"],"text/plain":["txt","text","conf","def","list","log","in","ini"],"text/richtext":["rtx"],"text/rtf":["*rtf"],"text/sgml":["sgml","sgm"],"text/shex":["shex"],"text/slim":["slim","slm"],"text/spdx":["spdx"],"text/stylus":["stylus","styl"],"text/tab-separated-values":["tsv"],"text/troff":["t","tr","roff","man","me","ms"],"text/turtle":["ttl"],"text/uri-list":["uri","uris","urls"],"text/vcard":["vcard"],"text/vtt":["vtt"],"text/xml":["*xml"],"text/yaml":["yaml","yml"],"video/3gpp":["3gp","3gpp"],"video/3gpp2":["3g2"],"video/h261":["h261"],"video/h263":["h263"],"video/h264":["h264"],"video/iso.segment":["m4s"],"video/jpeg":["jpgv"],"video/jpm":["*jpm","jpgm"],"video/mj2":["mj2","mjp2"],"video/mp2t":["ts"],"video/mp4":["mp4","mp4v","mpg4"],"video/mpeg":["mpeg","mpg","mpe","m1v","m2v"],"video/ogg":["ogv"],"video/quicktime":["qt","mov"],"video/webm":["webm"]};

/***/ }),

/***/ "./client/layout/administration/administration.scss":
/*!**********************************************************!*\
  !*** ./client/layout/administration/administration.scss ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./client/layout/widgets/auth/auth.scss":
/*!**********************************************!*\
  !*** ./client/layout/widgets/auth/auth.scss ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./client/layout/widgets/components/carousel/carousel.scss":
/*!*****************************************************************!*\
  !*** ./client/layout/widgets/components/carousel/carousel.scss ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./client/layout/widgets/components/carousel/carousel_fullscreen.scss":
/*!****************************************************************************!*\
  !*** ./client/layout/widgets/components/carousel/carousel_fullscreen.scss ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./client/layout/widgets/create_repos/create-repos.scss":
/*!**************************************************************!*\
  !*** ./client/layout/widgets/create_repos/create-repos.scss ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./client/layout/widgets/delete_repos/delete-repos.scss":
/*!**************************************************************!*\
  !*** ./client/layout/widgets/delete_repos/delete-repos.scss ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./client/layout/widgets/edit_repos/edit-repos.scss":
/*!**********************************************************!*\
  !*** ./client/layout/widgets/edit_repos/edit-repos.scss ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./client/layout/widgets/repos_settings/repos_settings.scss":
/*!******************************************************************!*\
  !*** ./client/layout/widgets/repos_settings/repos_settings.scss ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./client/layout/widgets/toolbar/toolbar.scss":
/*!****************************************************!*\
  !*** ./client/layout/widgets/toolbar/toolbar.scss ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./client/layout/widgets/upload/upload.scss":
/*!**************************************************!*\
  !*** ./client/layout/widgets/upload/upload.scss ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./client/layout/widgets/user_settings/user_settings.scss":
/*!****************************************************************!*\
  !*** ./client/layout/widgets/user_settings/user_settings.scss ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./client/layout/widgets/viewport/item.scss":
/*!**************************************************!*\
  !*** ./client/layout/widgets/viewport/item.scss ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./client/stylesheets/layout.scss":
/*!****************************************!*\
  !*** ./client/stylesheets/layout.scss ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./node_modules/showdown/dist/showdown.js":
/*!************************************************!*\
  !*** ./node_modules/showdown/dist/showdown.js ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;;/*! showdown v 2.1.0 - 21-04-2022 */
(function(){
/**
 * Created by Tivie on 13-07-2015.
 */

function getDefaultOpts (simple) {
  'use strict';

  var defaultOptions = {
    omitExtraWLInCodeBlocks: {
      defaultValue: false,
      describe: 'Omit the default extra whiteline added to code blocks',
      type: 'boolean'
    },
    noHeaderId: {
      defaultValue: false,
      describe: 'Turn on/off generated header id',
      type: 'boolean'
    },
    prefixHeaderId: {
      defaultValue: false,
      describe: 'Add a prefix to the generated header ids. Passing a string will prefix that string to the header id. Setting to true will add a generic \'section-\' prefix',
      type: 'string'
    },
    rawPrefixHeaderId: {
      defaultValue: false,
      describe: 'Setting this option to true will prevent showdown from modifying the prefix. This might result in malformed IDs (if, for instance, the " char is used in the prefix)',
      type: 'boolean'
    },
    ghCompatibleHeaderId: {
      defaultValue: false,
      describe: 'Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)',
      type: 'boolean'
    },
    rawHeaderId: {
      defaultValue: false,
      describe: 'Remove only spaces, \' and " from generated header ids (including prefixes), replacing them with dashes (-). WARNING: This might result in malformed ids',
      type: 'boolean'
    },
    headerLevelStart: {
      defaultValue: false,
      describe: 'The header blocks level start',
      type: 'integer'
    },
    parseImgDimensions: {
      defaultValue: false,
      describe: 'Turn on/off image dimension parsing',
      type: 'boolean'
    },
    simplifiedAutoLink: {
      defaultValue: false,
      describe: 'Turn on/off GFM autolink style',
      type: 'boolean'
    },
    excludeTrailingPunctuationFromURLs: {
      defaultValue: false,
      describe: 'Excludes trailing punctuation from links generated with autoLinking',
      type: 'boolean'
    },
    literalMidWordUnderscores: {
      defaultValue: false,
      describe: 'Parse midword underscores as literal underscores',
      type: 'boolean'
    },
    literalMidWordAsterisks: {
      defaultValue: false,
      describe: 'Parse midword asterisks as literal asterisks',
      type: 'boolean'
    },
    strikethrough: {
      defaultValue: false,
      describe: 'Turn on/off strikethrough support',
      type: 'boolean'
    },
    tables: {
      defaultValue: false,
      describe: 'Turn on/off tables support',
      type: 'boolean'
    },
    tablesHeaderId: {
      defaultValue: false,
      describe: 'Add an id to table headers',
      type: 'boolean'
    },
    ghCodeBlocks: {
      defaultValue: true,
      describe: 'Turn on/off GFM fenced code blocks support',
      type: 'boolean'
    },
    tasklists: {
      defaultValue: false,
      describe: 'Turn on/off GFM tasklist support',
      type: 'boolean'
    },
    smoothLivePreview: {
      defaultValue: false,
      describe: 'Prevents weird effects in live previews due to incomplete input',
      type: 'boolean'
    },
    smartIndentationFix: {
      defaultValue: false,
      describe: 'Tries to smartly fix indentation in es6 strings',
      type: 'boolean'
    },
    disableForced4SpacesIndentedSublists: {
      defaultValue: false,
      describe: 'Disables the requirement of indenting nested sublists by 4 spaces',
      type: 'boolean'
    },
    simpleLineBreaks: {
      defaultValue: false,
      describe: 'Parses simple line breaks as <br> (GFM Style)',
      type: 'boolean'
    },
    requireSpaceBeforeHeadingText: {
      defaultValue: false,
      describe: 'Makes adding a space between `#` and the header text mandatory (GFM Style)',
      type: 'boolean'
    },
    ghMentions: {
      defaultValue: false,
      describe: 'Enables github @mentions',
      type: 'boolean'
    },
    ghMentionsLink: {
      defaultValue: 'https://github.com/{u}',
      describe: 'Changes the link generated by @mentions. Only applies if ghMentions option is enabled.',
      type: 'string'
    },
    encodeEmails: {
      defaultValue: true,
      describe: 'Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities',
      type: 'boolean'
    },
    openLinksInNewWindow: {
      defaultValue: false,
      describe: 'Open all links in new windows',
      type: 'boolean'
    },
    backslashEscapesHTMLTags: {
      defaultValue: false,
      describe: 'Support for HTML Tag escaping. ex: \<div>foo\</div>',
      type: 'boolean'
    },
    emoji: {
      defaultValue: false,
      describe: 'Enable emoji support. Ex: `this is a :smile: emoji`',
      type: 'boolean'
    },
    underline: {
      defaultValue: false,
      describe: 'Enable support for underline. Syntax is double or triple underscores: `__underline word__`. With this option enabled, underscores no longer parses into `<em>` and `<strong>`',
      type: 'boolean'
    },
    ellipsis: {
      defaultValue: true,
      describe: 'Replaces three dots with the ellipsis unicode character',
      type: 'boolean'
    },
    completeHTMLDocument: {
      defaultValue: false,
      describe: 'Outputs a complete html document, including `<html>`, `<head>` and `<body>` tags',
      type: 'boolean'
    },
    metadata: {
      defaultValue: false,
      describe: 'Enable support for document metadata (defined at the top of the document between `«««` and `»»»` or between `---` and `---`).',
      type: 'boolean'
    },
    splitAdjacentBlockquotes: {
      defaultValue: false,
      describe: 'Split adjacent blockquote blocks',
      type: 'boolean'
    }
  };
  if (simple === false) {
    return JSON.parse(JSON.stringify(defaultOptions));
  }
  var ret = {};
  for (var opt in defaultOptions) {
    if (defaultOptions.hasOwnProperty(opt)) {
      ret[opt] = defaultOptions[opt].defaultValue;
    }
  }
  return ret;
}

function allOptionsOn () {
  'use strict';
  var options = getDefaultOpts(true),
      ret = {};
  for (var opt in options) {
    if (options.hasOwnProperty(opt)) {
      ret[opt] = true;
    }
  }
  return ret;
}

/**
 * Created by Tivie on 06-01-2015.
 */

// Private properties
var showdown = {},
    parsers = {},
    extensions = {},
    globalOptions = getDefaultOpts(true),
    setFlavor = 'vanilla',
    flavor = {
      github: {
        omitExtraWLInCodeBlocks:              true,
        simplifiedAutoLink:                   true,
        excludeTrailingPunctuationFromURLs:   true,
        literalMidWordUnderscores:            true,
        strikethrough:                        true,
        tables:                               true,
        tablesHeaderId:                       true,
        ghCodeBlocks:                         true,
        tasklists:                            true,
        disableForced4SpacesIndentedSublists: true,
        simpleLineBreaks:                     true,
        requireSpaceBeforeHeadingText:        true,
        ghCompatibleHeaderId:                 true,
        ghMentions:                           true,
        backslashEscapesHTMLTags:             true,
        emoji:                                true,
        splitAdjacentBlockquotes:             true
      },
      original: {
        noHeaderId:                           true,
        ghCodeBlocks:                         false
      },
      ghost: {
        omitExtraWLInCodeBlocks:              true,
        parseImgDimensions:                   true,
        simplifiedAutoLink:                   true,
        excludeTrailingPunctuationFromURLs:   true,
        literalMidWordUnderscores:            true,
        strikethrough:                        true,
        tables:                               true,
        tablesHeaderId:                       true,
        ghCodeBlocks:                         true,
        tasklists:                            true,
        smoothLivePreview:                    true,
        simpleLineBreaks:                     true,
        requireSpaceBeforeHeadingText:        true,
        ghMentions:                           false,
        encodeEmails:                         true
      },
      vanilla: getDefaultOpts(true),
      allOn: allOptionsOn()
    };

/**
 * helper namespace
 * @type {{}}
 */
showdown.helper = {};

/**
 * TODO LEGACY SUPPORT CODE
 * @type {{}}
 */
showdown.extensions = {};

/**
 * Set a global option
 * @static
 * @param {string} key
 * @param {*} value
 * @returns {showdown}
 */
showdown.setOption = function (key, value) {
  'use strict';
  globalOptions[key] = value;
  return this;
};

/**
 * Get a global option
 * @static
 * @param {string} key
 * @returns {*}
 */
showdown.getOption = function (key) {
  'use strict';
  return globalOptions[key];
};

/**
 * Get the global options
 * @static
 * @returns {{}}
 */
showdown.getOptions = function () {
  'use strict';
  return globalOptions;
};

/**
 * Reset global options to the default values
 * @static
 */
showdown.resetOptions = function () {
  'use strict';
  globalOptions = getDefaultOpts(true);
};

/**
 * Set the flavor showdown should use as default
 * @param {string} name
 */
showdown.setFlavor = function (name) {
  'use strict';
  if (!flavor.hasOwnProperty(name)) {
    throw Error(name + ' flavor was not found');
  }
  showdown.resetOptions();
  var preset = flavor[name];
  setFlavor = name;
  for (var option in preset) {
    if (preset.hasOwnProperty(option)) {
      globalOptions[option] = preset[option];
    }
  }
};

/**
 * Get the currently set flavor
 * @returns {string}
 */
showdown.getFlavor = function () {
  'use strict';
  return setFlavor;
};

/**
 * Get the options of a specified flavor. Returns undefined if the flavor was not found
 * @param {string} name Name of the flavor
 * @returns {{}|undefined}
 */
showdown.getFlavorOptions = function (name) {
  'use strict';
  if (flavor.hasOwnProperty(name)) {
    return flavor[name];
  }
};

/**
 * Get the default options
 * @static
 * @param {boolean} [simple=true]
 * @returns {{}}
 */
showdown.getDefaultOptions = function (simple) {
  'use strict';
  return getDefaultOpts(simple);
};

/**
 * Get or set a subParser
 *
 * subParser(name)       - Get a registered subParser
 * subParser(name, func) - Register a subParser
 * @static
 * @param {string} name
 * @param {function} [func]
 * @returns {*}
 */
showdown.subParser = function (name, func) {
  'use strict';
  if (showdown.helper.isString(name)) {
    if (typeof func !== 'undefined') {
      parsers[name] = func;
    } else {
      if (parsers.hasOwnProperty(name)) {
        return parsers[name];
      } else {
        throw Error('SubParser named ' + name + ' not registered!');
      }
    }
  }
};

/**
 * Gets or registers an extension
 * @static
 * @param {string} name
 * @param {object|object[]|function=} ext
 * @returns {*}
 */
showdown.extension = function (name, ext) {
  'use strict';

  if (!showdown.helper.isString(name)) {
    throw Error('Extension \'name\' must be a string');
  }

  name = showdown.helper.stdExtName(name);

  // Getter
  if (showdown.helper.isUndefined(ext)) {
    if (!extensions.hasOwnProperty(name)) {
      throw Error('Extension named ' + name + ' is not registered!');
    }
    return extensions[name];

    // Setter
  } else {
    // Expand extension if it's wrapped in a function
    if (typeof ext === 'function') {
      ext = ext();
    }

    // Ensure extension is an array
    if (!showdown.helper.isArray(ext)) {
      ext = [ext];
    }

    var validExtension = validate(ext, name);

    if (validExtension.valid) {
      extensions[name] = ext;
    } else {
      throw Error(validExtension.error);
    }
  }
};

/**
 * Gets all extensions registered
 * @returns {{}}
 */
showdown.getAllExtensions = function () {
  'use strict';
  return extensions;
};

/**
 * Remove an extension
 * @param {string} name
 */
showdown.removeExtension = function (name) {
  'use strict';
  delete extensions[name];
};

/**
 * Removes all extensions
 */
showdown.resetExtensions = function () {
  'use strict';
  extensions = {};
};

/**
 * Validate extension
 * @param {array} extension
 * @param {string} name
 * @returns {{valid: boolean, error: string}}
 */
function validate (extension, name) {
  'use strict';

  var errMsg = (name) ? 'Error in ' + name + ' extension->' : 'Error in unnamed extension',
      ret = {
        valid: true,
        error: ''
      };

  if (!showdown.helper.isArray(extension)) {
    extension = [extension];
  }

  for (var i = 0; i < extension.length; ++i) {
    var baseMsg = errMsg + ' sub-extension ' + i + ': ',
        ext = extension[i];
    if (typeof ext !== 'object') {
      ret.valid = false;
      ret.error = baseMsg + 'must be an object, but ' + typeof ext + ' given';
      return ret;
    }

    if (!showdown.helper.isString(ext.type)) {
      ret.valid = false;
      ret.error = baseMsg + 'property "type" must be a string, but ' + typeof ext.type + ' given';
      return ret;
    }

    var type = ext.type = ext.type.toLowerCase();

    // normalize extension type
    if (type === 'language') {
      type = ext.type = 'lang';
    }

    if (type === 'html') {
      type = ext.type = 'output';
    }

    if (type !== 'lang' && type !== 'output' && type !== 'listener') {
      ret.valid = false;
      ret.error = baseMsg + 'type ' + type + ' is not recognized. Valid values: "lang/language", "output/html" or "listener"';
      return ret;
    }

    if (type === 'listener') {
      if (showdown.helper.isUndefined(ext.listeners)) {
        ret.valid = false;
        ret.error = baseMsg + '. Extensions of type "listener" must have a property called "listeners"';
        return ret;
      }
    } else {
      if (showdown.helper.isUndefined(ext.filter) && showdown.helper.isUndefined(ext.regex)) {
        ret.valid = false;
        ret.error = baseMsg + type + ' extensions must define either a "regex" property or a "filter" method';
        return ret;
      }
    }

    if (ext.listeners) {
      if (typeof ext.listeners !== 'object') {
        ret.valid = false;
        ret.error = baseMsg + '"listeners" property must be an object but ' + typeof ext.listeners + ' given';
        return ret;
      }
      for (var ln in ext.listeners) {
        if (ext.listeners.hasOwnProperty(ln)) {
          if (typeof ext.listeners[ln] !== 'function') {
            ret.valid = false;
            ret.error = baseMsg + '"listeners" property must be an hash of [event name]: [callback]. listeners.' + ln +
              ' must be a function but ' + typeof ext.listeners[ln] + ' given';
            return ret;
          }
        }
      }
    }

    if (ext.filter) {
      if (typeof ext.filter !== 'function') {
        ret.valid = false;
        ret.error = baseMsg + '"filter" must be a function, but ' + typeof ext.filter + ' given';
        return ret;
      }
    } else if (ext.regex) {
      if (showdown.helper.isString(ext.regex)) {
        ext.regex = new RegExp(ext.regex, 'g');
      }
      if (!(ext.regex instanceof RegExp)) {
        ret.valid = false;
        ret.error = baseMsg + '"regex" property must either be a string or a RegExp object, but ' + typeof ext.regex + ' given';
        return ret;
      }
      if (showdown.helper.isUndefined(ext.replace)) {
        ret.valid = false;
        ret.error = baseMsg + '"regex" extensions must implement a replace string or function';
        return ret;
      }
    }
  }
  return ret;
}

/**
 * Validate extension
 * @param {object} ext
 * @returns {boolean}
 */
showdown.validateExtension = function (ext) {
  'use strict';

  var validateExtension = validate(ext, null);
  if (!validateExtension.valid) {
    console.warn(validateExtension.error);
    return false;
  }
  return true;
};

/**
 * showdownjs helper functions
 */

if (!showdown.hasOwnProperty('helper')) {
  showdown.helper = {};
}

/**
 * Check if var is string
 * @static
 * @param {string} a
 * @returns {boolean}
 */
showdown.helper.isString = function (a) {
  'use strict';
  return (typeof a === 'string' || a instanceof String);
};

/**
 * Check if var is a function
 * @static
 * @param {*} a
 * @returns {boolean}
 */
showdown.helper.isFunction = function (a) {
  'use strict';
  var getType = {};
  return a && getType.toString.call(a) === '[object Function]';
};

/**
 * isArray helper function
 * @static
 * @param {*} a
 * @returns {boolean}
 */
showdown.helper.isArray = function (a) {
  'use strict';
  return Array.isArray(a);
};

/**
 * Check if value is undefined
 * @static
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
 */
showdown.helper.isUndefined = function (value) {
  'use strict';
  return typeof value === 'undefined';
};

/**
 * ForEach helper function
 * Iterates over Arrays and Objects (own properties only)
 * @static
 * @param {*} obj
 * @param {function} callback Accepts 3 params: 1. value, 2. key, 3. the original array/object
 */
showdown.helper.forEach = function (obj, callback) {
  'use strict';
  // check if obj is defined
  if (showdown.helper.isUndefined(obj)) {
    throw new Error('obj param is required');
  }

  if (showdown.helper.isUndefined(callback)) {
    throw new Error('callback param is required');
  }

  if (!showdown.helper.isFunction(callback)) {
    throw new Error('callback param must be a function/closure');
  }

  if (typeof obj.forEach === 'function') {
    obj.forEach(callback);
  } else if (showdown.helper.isArray(obj)) {
    for (var i = 0; i < obj.length; i++) {
      callback(obj[i], i, obj);
    }
  } else if (typeof (obj) === 'object') {
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop)) {
        callback(obj[prop], prop, obj);
      }
    }
  } else {
    throw new Error('obj does not seem to be an array or an iterable object');
  }
};

/**
 * Standardidize extension name
 * @static
 * @param {string} s extension name
 * @returns {string}
 */
showdown.helper.stdExtName = function (s) {
  'use strict';
  return s.replace(/[_?*+\/\\.^-]/g, '').replace(/\s/g, '').toLowerCase();
};

function escapeCharactersCallback (wholeMatch, m1) {
  'use strict';
  var charCodeToEscape = m1.charCodeAt(0);
  return '¨E' + charCodeToEscape + 'E';
}

/**
 * Callback used to escape characters when passing through String.replace
 * @static
 * @param {string} wholeMatch
 * @param {string} m1
 * @returns {string}
 */
showdown.helper.escapeCharactersCallback = escapeCharactersCallback;

/**
 * Escape characters in a string
 * @static
 * @param {string} text
 * @param {string} charsToEscape
 * @param {boolean} afterBackslash
 * @returns {XML|string|void|*}
 */
showdown.helper.escapeCharacters = function (text, charsToEscape, afterBackslash) {
  'use strict';
  // First we have to escape the escape characters so that
  // we can build a character class out of them
  var regexString = '([' + charsToEscape.replace(/([\[\]\\])/g, '\\$1') + '])';

  if (afterBackslash) {
    regexString = '\\\\' + regexString;
  }

  var regex = new RegExp(regexString, 'g');
  text = text.replace(regex, escapeCharactersCallback);

  return text;
};

/**
 * Unescape HTML entities
 * @param txt
 * @returns {string}
 */
showdown.helper.unescapeHTMLEntities = function (txt) {
  'use strict';

  return txt
    .replace(/&quot;/g, '"')
    .replace(/&lt;/g, '<')
    .replace(/&gt;/g, '>')
    .replace(/&amp;/g, '&');
};

var rgxFindMatchPos = function (str, left, right, flags) {
  'use strict';
  var f = flags || '',
      g = f.indexOf('g') > -1,
      x = new RegExp(left + '|' + right, 'g' + f.replace(/g/g, '')),
      l = new RegExp(left, f.replace(/g/g, '')),
      pos = [],
      t, s, m, start, end;

  do {
    t = 0;
    while ((m = x.exec(str))) {
      if (l.test(m[0])) {
        if (!(t++)) {
          s = x.lastIndex;
          start = s - m[0].length;
        }
      } else if (t) {
        if (!--t) {
          end = m.index + m[0].length;
          var obj = {
            left: {start: start, end: s},
            match: {start: s, end: m.index},
            right: {start: m.index, end: end},
            wholeMatch: {start: start, end: end}
          };
          pos.push(obj);
          if (!g) {
            return pos;
          }
        }
      }
    }
  } while (t && (x.lastIndex = s));

  return pos;
};

/**
 * matchRecursiveRegExp
 *
 * (c) 2007 Steven Levithan <stevenlevithan.com>
 * MIT License
 *
 * Accepts a string to search, a left and right format delimiter
 * as regex patterns, and optional regex flags. Returns an array
 * of matches, allowing nested instances of left/right delimiters.
 * Use the "g" flag to return all matches, otherwise only the
 * first is returned. Be careful to ensure that the left and
 * right format delimiters produce mutually exclusive matches.
 * Backreferences are not supported within the right delimiter
 * due to how it is internally combined with the left delimiter.
 * When matching strings whose format delimiters are unbalanced
 * to the left or right, the output is intentionally as a
 * conventional regex library with recursion support would
 * produce, e.g. "<<x>" and "<x>>" both produce ["x"] when using
 * "<" and ">" as the delimiters (both strings contain a single,
 * balanced instance of "<x>").
 *
 * examples:
 * matchRecursiveRegExp("test", "\\(", "\\)")
 * returns: []
 * matchRecursiveRegExp("<t<<e>><s>>t<>", "<", ">", "g")
 * returns: ["t<<e>><s>", ""]
 * matchRecursiveRegExp("<div id=\"x\">test</div>", "<div\\b[^>]*>", "</div>", "gi")
 * returns: ["test"]
 */
showdown.helper.matchRecursiveRegExp = function (str, left, right, flags) {
  'use strict';

  var matchPos = rgxFindMatchPos (str, left, right, flags),
      results = [];

  for (var i = 0; i < matchPos.length; ++i) {
    results.push([
      str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),
      str.slice(matchPos[i].match.start, matchPos[i].match.end),
      str.slice(matchPos[i].left.start, matchPos[i].left.end),
      str.slice(matchPos[i].right.start, matchPos[i].right.end)
    ]);
  }
  return results;
};

/**
 *
 * @param {string} str
 * @param {string|function} replacement
 * @param {string} left
 * @param {string} right
 * @param {string} flags
 * @returns {string}
 */
showdown.helper.replaceRecursiveRegExp = function (str, replacement, left, right, flags) {
  'use strict';

  if (!showdown.helper.isFunction(replacement)) {
    var repStr = replacement;
    replacement = function () {
      return repStr;
    };
  }

  var matchPos = rgxFindMatchPos(str, left, right, flags),
      finalStr = str,
      lng = matchPos.length;

  if (lng > 0) {
    var bits = [];
    if (matchPos[0].wholeMatch.start !== 0) {
      bits.push(str.slice(0, matchPos[0].wholeMatch.start));
    }
    for (var i = 0; i < lng; ++i) {
      bits.push(
        replacement(
          str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),
          str.slice(matchPos[i].match.start, matchPos[i].match.end),
          str.slice(matchPos[i].left.start, matchPos[i].left.end),
          str.slice(matchPos[i].right.start, matchPos[i].right.end)
        )
      );
      if (i < lng - 1) {
        bits.push(str.slice(matchPos[i].wholeMatch.end, matchPos[i + 1].wholeMatch.start));
      }
    }
    if (matchPos[lng - 1].wholeMatch.end < str.length) {
      bits.push(str.slice(matchPos[lng - 1].wholeMatch.end));
    }
    finalStr = bits.join('');
  }
  return finalStr;
};

/**
 * Returns the index within the passed String object of the first occurrence of the specified regex,
 * starting the search at fromIndex. Returns -1 if the value is not found.
 *
 * @param {string} str string to search
 * @param {RegExp} regex Regular expression to search
 * @param {int} [fromIndex = 0] Index to start the search
 * @returns {Number}
 * @throws InvalidArgumentError
 */
showdown.helper.regexIndexOf = function (str, regex, fromIndex) {
  'use strict';
  if (!showdown.helper.isString(str)) {
    throw 'InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string';
  }
  if (regex instanceof RegExp === false) {
    throw 'InvalidArgumentError: second parameter of showdown.helper.regexIndexOf function must be an instance of RegExp';
  }
  var indexOf = str.substring(fromIndex || 0).search(regex);
  return (indexOf >= 0) ? (indexOf + (fromIndex || 0)) : indexOf;
};

/**
 * Splits the passed string object at the defined index, and returns an array composed of the two substrings
 * @param {string} str string to split
 * @param {int} index index to split string at
 * @returns {[string,string]}
 * @throws InvalidArgumentError
 */
showdown.helper.splitAtIndex = function (str, index) {
  'use strict';
  if (!showdown.helper.isString(str)) {
    throw 'InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string';
  }
  return [str.substring(0, index), str.substring(index)];
};

/**
 * Obfuscate an e-mail address through the use of Character Entities,
 * transforming ASCII characters into their equivalent decimal or hex entities.
 *
 * Since it has a random component, subsequent calls to this function produce different results
 *
 * @param {string} mail
 * @returns {string}
 */
showdown.helper.encodeEmailAddress = function (mail) {
  'use strict';
  var encode = [
    function (ch) {
      return '&#' + ch.charCodeAt(0) + ';';
    },
    function (ch) {
      return '&#x' + ch.charCodeAt(0).toString(16) + ';';
    },
    function (ch) {
      return ch;
    }
  ];

  mail = mail.replace(/./g, function (ch) {
    if (ch === '@') {
      // this *must* be encoded. I insist.
      ch = encode[Math.floor(Math.random() * 2)](ch);
    } else {
      var r = Math.random();
      // roughly 10% raw, 45% hex, 45% dec
      ch = (
        r > 0.9 ? encode[2](ch) : r > 0.45 ? encode[1](ch) : encode[0](ch)
      );
    }
    return ch;
  });

  return mail;
};

/**
 *
 * @param str
 * @param targetLength
 * @param padString
 * @returns {string}
 */
showdown.helper.padEnd = function padEnd (str, targetLength, padString) {
  'use strict';
  /*jshint bitwise: false*/
  // eslint-disable-next-line space-infix-ops
  targetLength = targetLength>>0; //floor if number or convert non-number to 0;
  /*jshint bitwise: true*/
  padString = String(padString || ' ');
  if (str.length > targetLength) {
    return String(str);
  } else {
    targetLength = targetLength - str.length;
    if (targetLength > padString.length) {
      padString += padString.repeat(targetLength / padString.length); //append to original to ensure we are longer than needed
    }
    return String(str) + padString.slice(0,targetLength);
  }
};

/**
 * POLYFILLS
 */
// use this instead of builtin is undefined for IE8 compatibility
if (typeof (console) === 'undefined') {
  console = {
    warn: function (msg) {
      'use strict';
      alert(msg);
    },
    log: function (msg) {
      'use strict';
      alert(msg);
    },
    error: function (msg) {
      'use strict';
      throw msg;
    }
  };
}

/**
 * Common regexes.
 * We declare some common regexes to improve performance
 */
showdown.helper.regexes = {
  asteriskDashAndColon: /([*_:~])/g
};

/**
 * EMOJIS LIST
 */
showdown.helper.emojis = {
  '+1':'\ud83d\udc4d',
  '-1':'\ud83d\udc4e',
  '100':'\ud83d\udcaf',
  '1234':'\ud83d\udd22',
  '1st_place_medal':'\ud83e\udd47',
  '2nd_place_medal':'\ud83e\udd48',
  '3rd_place_medal':'\ud83e\udd49',
  '8ball':'\ud83c\udfb1',
  'a':'\ud83c\udd70\ufe0f',
  'ab':'\ud83c\udd8e',
  'abc':'\ud83d\udd24',
  'abcd':'\ud83d\udd21',
  'accept':'\ud83c\ude51',
  'aerial_tramway':'\ud83d\udea1',
  'airplane':'\u2708\ufe0f',
  'alarm_clock':'\u23f0',
  'alembic':'\u2697\ufe0f',
  'alien':'\ud83d\udc7d',
  'ambulance':'\ud83d\ude91',
  'amphora':'\ud83c\udffa',
  'anchor':'\u2693\ufe0f',
  'angel':'\ud83d\udc7c',
  'anger':'\ud83d\udca2',
  'angry':'\ud83d\ude20',
  'anguished':'\ud83d\ude27',
  'ant':'\ud83d\udc1c',
  'apple':'\ud83c\udf4e',
  'aquarius':'\u2652\ufe0f',
  'aries':'\u2648\ufe0f',
  'arrow_backward':'\u25c0\ufe0f',
  'arrow_double_down':'\u23ec',
  'arrow_double_up':'\u23eb',
  'arrow_down':'\u2b07\ufe0f',
  'arrow_down_small':'\ud83d\udd3d',
  'arrow_forward':'\u25b6\ufe0f',
  'arrow_heading_down':'\u2935\ufe0f',
  'arrow_heading_up':'\u2934\ufe0f',
  'arrow_left':'\u2b05\ufe0f',
  'arrow_lower_left':'\u2199\ufe0f',
  'arrow_lower_right':'\u2198\ufe0f',
  'arrow_right':'\u27a1\ufe0f',
  'arrow_right_hook':'\u21aa\ufe0f',
  'arrow_up':'\u2b06\ufe0f',
  'arrow_up_down':'\u2195\ufe0f',
  'arrow_up_small':'\ud83d\udd3c',
  'arrow_upper_left':'\u2196\ufe0f',
  'arrow_upper_right':'\u2197\ufe0f',
  'arrows_clockwise':'\ud83d\udd03',
  'arrows_counterclockwise':'\ud83d\udd04',
  'art':'\ud83c\udfa8',
  'articulated_lorry':'\ud83d\ude9b',
  'artificial_satellite':'\ud83d\udef0',
  'astonished':'\ud83d\ude32',
  'athletic_shoe':'\ud83d\udc5f',
  'atm':'\ud83c\udfe7',
  'atom_symbol':'\u269b\ufe0f',
  'avocado':'\ud83e\udd51',
  'b':'\ud83c\udd71\ufe0f',
  'baby':'\ud83d\udc76',
  'baby_bottle':'\ud83c\udf7c',
  'baby_chick':'\ud83d\udc24',
  'baby_symbol':'\ud83d\udebc',
  'back':'\ud83d\udd19',
  'bacon':'\ud83e\udd53',
  'badminton':'\ud83c\udff8',
  'baggage_claim':'\ud83d\udec4',
  'baguette_bread':'\ud83e\udd56',
  'balance_scale':'\u2696\ufe0f',
  'balloon':'\ud83c\udf88',
  'ballot_box':'\ud83d\uddf3',
  'ballot_box_with_check':'\u2611\ufe0f',
  'bamboo':'\ud83c\udf8d',
  'banana':'\ud83c\udf4c',
  'bangbang':'\u203c\ufe0f',
  'bank':'\ud83c\udfe6',
  'bar_chart':'\ud83d\udcca',
  'barber':'\ud83d\udc88',
  'baseball':'\u26be\ufe0f',
  'basketball':'\ud83c\udfc0',
  'basketball_man':'\u26f9\ufe0f',
  'basketball_woman':'\u26f9\ufe0f&zwj;\u2640\ufe0f',
  'bat':'\ud83e\udd87',
  'bath':'\ud83d\udec0',
  'bathtub':'\ud83d\udec1',
  'battery':'\ud83d\udd0b',
  'beach_umbrella':'\ud83c\udfd6',
  'bear':'\ud83d\udc3b',
  'bed':'\ud83d\udecf',
  'bee':'\ud83d\udc1d',
  'beer':'\ud83c\udf7a',
  'beers':'\ud83c\udf7b',
  'beetle':'\ud83d\udc1e',
  'beginner':'\ud83d\udd30',
  'bell':'\ud83d\udd14',
  'bellhop_bell':'\ud83d\udece',
  'bento':'\ud83c\udf71',
  'biking_man':'\ud83d\udeb4',
  'bike':'\ud83d\udeb2',
  'biking_woman':'\ud83d\udeb4&zwj;\u2640\ufe0f',
  'bikini':'\ud83d\udc59',
  'biohazard':'\u2623\ufe0f',
  'bird':'\ud83d\udc26',
  'birthday':'\ud83c\udf82',
  'black_circle':'\u26ab\ufe0f',
  'black_flag':'\ud83c\udff4',
  'black_heart':'\ud83d\udda4',
  'black_joker':'\ud83c\udccf',
  'black_large_square':'\u2b1b\ufe0f',
  'black_medium_small_square':'\u25fe\ufe0f',
  'black_medium_square':'\u25fc\ufe0f',
  'black_nib':'\u2712\ufe0f',
  'black_small_square':'\u25aa\ufe0f',
  'black_square_button':'\ud83d\udd32',
  'blonde_man':'\ud83d\udc71',
  'blonde_woman':'\ud83d\udc71&zwj;\u2640\ufe0f',
  'blossom':'\ud83c\udf3c',
  'blowfish':'\ud83d\udc21',
  'blue_book':'\ud83d\udcd8',
  'blue_car':'\ud83d\ude99',
  'blue_heart':'\ud83d\udc99',
  'blush':'\ud83d\ude0a',
  'boar':'\ud83d\udc17',
  'boat':'\u26f5\ufe0f',
  'bomb':'\ud83d\udca3',
  'book':'\ud83d\udcd6',
  'bookmark':'\ud83d\udd16',
  'bookmark_tabs':'\ud83d\udcd1',
  'books':'\ud83d\udcda',
  'boom':'\ud83d\udca5',
  'boot':'\ud83d\udc62',
  'bouquet':'\ud83d\udc90',
  'bowing_man':'\ud83d\ude47',
  'bow_and_arrow':'\ud83c\udff9',
  'bowing_woman':'\ud83d\ude47&zwj;\u2640\ufe0f',
  'bowling':'\ud83c\udfb3',
  'boxing_glove':'\ud83e\udd4a',
  'boy':'\ud83d\udc66',
  'bread':'\ud83c\udf5e',
  'bride_with_veil':'\ud83d\udc70',
  'bridge_at_night':'\ud83c\udf09',
  'briefcase':'\ud83d\udcbc',
  'broken_heart':'\ud83d\udc94',
  'bug':'\ud83d\udc1b',
  'building_construction':'\ud83c\udfd7',
  'bulb':'\ud83d\udca1',
  'bullettrain_front':'\ud83d\ude85',
  'bullettrain_side':'\ud83d\ude84',
  'burrito':'\ud83c\udf2f',
  'bus':'\ud83d\ude8c',
  'business_suit_levitating':'\ud83d\udd74',
  'busstop':'\ud83d\ude8f',
  'bust_in_silhouette':'\ud83d\udc64',
  'busts_in_silhouette':'\ud83d\udc65',
  'butterfly':'\ud83e\udd8b',
  'cactus':'\ud83c\udf35',
  'cake':'\ud83c\udf70',
  'calendar':'\ud83d\udcc6',
  'call_me_hand':'\ud83e\udd19',
  'calling':'\ud83d\udcf2',
  'camel':'\ud83d\udc2b',
  'camera':'\ud83d\udcf7',
  'camera_flash':'\ud83d\udcf8',
  'camping':'\ud83c\udfd5',
  'cancer':'\u264b\ufe0f',
  'candle':'\ud83d\udd6f',
  'candy':'\ud83c\udf6c',
  'canoe':'\ud83d\udef6',
  'capital_abcd':'\ud83d\udd20',
  'capricorn':'\u2651\ufe0f',
  'car':'\ud83d\ude97',
  'card_file_box':'\ud83d\uddc3',
  'card_index':'\ud83d\udcc7',
  'card_index_dividers':'\ud83d\uddc2',
  'carousel_horse':'\ud83c\udfa0',
  'carrot':'\ud83e\udd55',
  'cat':'\ud83d\udc31',
  'cat2':'\ud83d\udc08',
  'cd':'\ud83d\udcbf',
  'chains':'\u26d3',
  'champagne':'\ud83c\udf7e',
  'chart':'\ud83d\udcb9',
  'chart_with_downwards_trend':'\ud83d\udcc9',
  'chart_with_upwards_trend':'\ud83d\udcc8',
  'checkered_flag':'\ud83c\udfc1',
  'cheese':'\ud83e\uddc0',
  'cherries':'\ud83c\udf52',
  'cherry_blossom':'\ud83c\udf38',
  'chestnut':'\ud83c\udf30',
  'chicken':'\ud83d\udc14',
  'children_crossing':'\ud83d\udeb8',
  'chipmunk':'\ud83d\udc3f',
  'chocolate_bar':'\ud83c\udf6b',
  'christmas_tree':'\ud83c\udf84',
  'church':'\u26ea\ufe0f',
  'cinema':'\ud83c\udfa6',
  'circus_tent':'\ud83c\udfaa',
  'city_sunrise':'\ud83c\udf07',
  'city_sunset':'\ud83c\udf06',
  'cityscape':'\ud83c\udfd9',
  'cl':'\ud83c\udd91',
  'clamp':'\ud83d\udddc',
  'clap':'\ud83d\udc4f',
  'clapper':'\ud83c\udfac',
  'classical_building':'\ud83c\udfdb',
  'clinking_glasses':'\ud83e\udd42',
  'clipboard':'\ud83d\udccb',
  'clock1':'\ud83d\udd50',
  'clock10':'\ud83d\udd59',
  'clock1030':'\ud83d\udd65',
  'clock11':'\ud83d\udd5a',
  'clock1130':'\ud83d\udd66',
  'clock12':'\ud83d\udd5b',
  'clock1230':'\ud83d\udd67',
  'clock130':'\ud83d\udd5c',
  'clock2':'\ud83d\udd51',
  'clock230':'\ud83d\udd5d',
  'clock3':'\ud83d\udd52',
  'clock330':'\ud83d\udd5e',
  'clock4':'\ud83d\udd53',
  'clock430':'\ud83d\udd5f',
  'clock5':'\ud83d\udd54',
  'clock530':'\ud83d\udd60',
  'clock6':'\ud83d\udd55',
  'clock630':'\ud83d\udd61',
  'clock7':'\ud83d\udd56',
  'clock730':'\ud83d\udd62',
  'clock8':'\ud83d\udd57',
  'clock830':'\ud83d\udd63',
  'clock9':'\ud83d\udd58',
  'clock930':'\ud83d\udd64',
  'closed_book':'\ud83d\udcd5',
  'closed_lock_with_key':'\ud83d\udd10',
  'closed_umbrella':'\ud83c\udf02',
  'cloud':'\u2601\ufe0f',
  'cloud_with_lightning':'\ud83c\udf29',
  'cloud_with_lightning_and_rain':'\u26c8',
  'cloud_with_rain':'\ud83c\udf27',
  'cloud_with_snow':'\ud83c\udf28',
  'clown_face':'\ud83e\udd21',
  'clubs':'\u2663\ufe0f',
  'cocktail':'\ud83c\udf78',
  'coffee':'\u2615\ufe0f',
  'coffin':'\u26b0\ufe0f',
  'cold_sweat':'\ud83d\ude30',
  'comet':'\u2604\ufe0f',
  'computer':'\ud83d\udcbb',
  'computer_mouse':'\ud83d\uddb1',
  'confetti_ball':'\ud83c\udf8a',
  'confounded':'\ud83d\ude16',
  'confused':'\ud83d\ude15',
  'congratulations':'\u3297\ufe0f',
  'construction':'\ud83d\udea7',
  'construction_worker_man':'\ud83d\udc77',
  'construction_worker_woman':'\ud83d\udc77&zwj;\u2640\ufe0f',
  'control_knobs':'\ud83c\udf9b',
  'convenience_store':'\ud83c\udfea',
  'cookie':'\ud83c\udf6a',
  'cool':'\ud83c\udd92',
  'policeman':'\ud83d\udc6e',
  'copyright':'\u00a9\ufe0f',
  'corn':'\ud83c\udf3d',
  'couch_and_lamp':'\ud83d\udecb',
  'couple':'\ud83d\udc6b',
  'couple_with_heart_woman_man':'\ud83d\udc91',
  'couple_with_heart_man_man':'\ud83d\udc68&zwj;\u2764\ufe0f&zwj;\ud83d\udc68',
  'couple_with_heart_woman_woman':'\ud83d\udc69&zwj;\u2764\ufe0f&zwj;\ud83d\udc69',
  'couplekiss_man_man':'\ud83d\udc68&zwj;\u2764\ufe0f&zwj;\ud83d\udc8b&zwj;\ud83d\udc68',
  'couplekiss_man_woman':'\ud83d\udc8f',
  'couplekiss_woman_woman':'\ud83d\udc69&zwj;\u2764\ufe0f&zwj;\ud83d\udc8b&zwj;\ud83d\udc69',
  'cow':'\ud83d\udc2e',
  'cow2':'\ud83d\udc04',
  'cowboy_hat_face':'\ud83e\udd20',
  'crab':'\ud83e\udd80',
  'crayon':'\ud83d\udd8d',
  'credit_card':'\ud83d\udcb3',
  'crescent_moon':'\ud83c\udf19',
  'cricket':'\ud83c\udfcf',
  'crocodile':'\ud83d\udc0a',
  'croissant':'\ud83e\udd50',
  'crossed_fingers':'\ud83e\udd1e',
  'crossed_flags':'\ud83c\udf8c',
  'crossed_swords':'\u2694\ufe0f',
  'crown':'\ud83d\udc51',
  'cry':'\ud83d\ude22',
  'crying_cat_face':'\ud83d\ude3f',
  'crystal_ball':'\ud83d\udd2e',
  'cucumber':'\ud83e\udd52',
  'cupid':'\ud83d\udc98',
  'curly_loop':'\u27b0',
  'currency_exchange':'\ud83d\udcb1',
  'curry':'\ud83c\udf5b',
  'custard':'\ud83c\udf6e',
  'customs':'\ud83d\udec3',
  'cyclone':'\ud83c\udf00',
  'dagger':'\ud83d\udde1',
  'dancer':'\ud83d\udc83',
  'dancing_women':'\ud83d\udc6f',
  'dancing_men':'\ud83d\udc6f&zwj;\u2642\ufe0f',
  'dango':'\ud83c\udf61',
  'dark_sunglasses':'\ud83d\udd76',
  'dart':'\ud83c\udfaf',
  'dash':'\ud83d\udca8',
  'date':'\ud83d\udcc5',
  'deciduous_tree':'\ud83c\udf33',
  'deer':'\ud83e\udd8c',
  'department_store':'\ud83c\udfec',
  'derelict_house':'\ud83c\udfda',
  'desert':'\ud83c\udfdc',
  'desert_island':'\ud83c\udfdd',
  'desktop_computer':'\ud83d\udda5',
  'male_detective':'\ud83d\udd75\ufe0f',
  'diamond_shape_with_a_dot_inside':'\ud83d\udca0',
  'diamonds':'\u2666\ufe0f',
  'disappointed':'\ud83d\ude1e',
  'disappointed_relieved':'\ud83d\ude25',
  'dizzy':'\ud83d\udcab',
  'dizzy_face':'\ud83d\ude35',
  'do_not_litter':'\ud83d\udeaf',
  'dog':'\ud83d\udc36',
  'dog2':'\ud83d\udc15',
  'dollar':'\ud83d\udcb5',
  'dolls':'\ud83c\udf8e',
  'dolphin':'\ud83d\udc2c',
  'door':'\ud83d\udeaa',
  'doughnut':'\ud83c\udf69',
  'dove':'\ud83d\udd4a',
  'dragon':'\ud83d\udc09',
  'dragon_face':'\ud83d\udc32',
  'dress':'\ud83d\udc57',
  'dromedary_camel':'\ud83d\udc2a',
  'drooling_face':'\ud83e\udd24',
  'droplet':'\ud83d\udca7',
  'drum':'\ud83e\udd41',
  'duck':'\ud83e\udd86',
  'dvd':'\ud83d\udcc0',
  'e-mail':'\ud83d\udce7',
  'eagle':'\ud83e\udd85',
  'ear':'\ud83d\udc42',
  'ear_of_rice':'\ud83c\udf3e',
  'earth_africa':'\ud83c\udf0d',
  'earth_americas':'\ud83c\udf0e',
  'earth_asia':'\ud83c\udf0f',
  'egg':'\ud83e\udd5a',
  'eggplant':'\ud83c\udf46',
  'eight_pointed_black_star':'\u2734\ufe0f',
  'eight_spoked_asterisk':'\u2733\ufe0f',
  'electric_plug':'\ud83d\udd0c',
  'elephant':'\ud83d\udc18',
  'email':'\u2709\ufe0f',
  'end':'\ud83d\udd1a',
  'envelope_with_arrow':'\ud83d\udce9',
  'euro':'\ud83d\udcb6',
  'european_castle':'\ud83c\udff0',
  'european_post_office':'\ud83c\udfe4',
  'evergreen_tree':'\ud83c\udf32',
  'exclamation':'\u2757\ufe0f',
  'expressionless':'\ud83d\ude11',
  'eye':'\ud83d\udc41',
  'eye_speech_bubble':'\ud83d\udc41&zwj;\ud83d\udde8',
  'eyeglasses':'\ud83d\udc53',
  'eyes':'\ud83d\udc40',
  'face_with_head_bandage':'\ud83e\udd15',
  'face_with_thermometer':'\ud83e\udd12',
  'fist_oncoming':'\ud83d\udc4a',
  'factory':'\ud83c\udfed',
  'fallen_leaf':'\ud83c\udf42',
  'family_man_woman_boy':'\ud83d\udc6a',
  'family_man_boy':'\ud83d\udc68&zwj;\ud83d\udc66',
  'family_man_boy_boy':'\ud83d\udc68&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
  'family_man_girl':'\ud83d\udc68&zwj;\ud83d\udc67',
  'family_man_girl_boy':'\ud83d\udc68&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
  'family_man_girl_girl':'\ud83d\udc68&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
  'family_man_man_boy':'\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc66',
  'family_man_man_boy_boy':'\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
  'family_man_man_girl':'\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc67',
  'family_man_man_girl_boy':'\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
  'family_man_man_girl_girl':'\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
  'family_man_woman_boy_boy':'\ud83d\udc68&zwj;\ud83d\udc69&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
  'family_man_woman_girl':'\ud83d\udc68&zwj;\ud83d\udc69&zwj;\ud83d\udc67',
  'family_man_woman_girl_boy':'\ud83d\udc68&zwj;\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
  'family_man_woman_girl_girl':'\ud83d\udc68&zwj;\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
  'family_woman_boy':'\ud83d\udc69&zwj;\ud83d\udc66',
  'family_woman_boy_boy':'\ud83d\udc69&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
  'family_woman_girl':'\ud83d\udc69&zwj;\ud83d\udc67',
  'family_woman_girl_boy':'\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
  'family_woman_girl_girl':'\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
  'family_woman_woman_boy':'\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc66',
  'family_woman_woman_boy_boy':'\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
  'family_woman_woman_girl':'\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc67',
  'family_woman_woman_girl_boy':'\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
  'family_woman_woman_girl_girl':'\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
  'fast_forward':'\u23e9',
  'fax':'\ud83d\udce0',
  'fearful':'\ud83d\ude28',
  'feet':'\ud83d\udc3e',
  'female_detective':'\ud83d\udd75\ufe0f&zwj;\u2640\ufe0f',
  'ferris_wheel':'\ud83c\udfa1',
  'ferry':'\u26f4',
  'field_hockey':'\ud83c\udfd1',
  'file_cabinet':'\ud83d\uddc4',
  'file_folder':'\ud83d\udcc1',
  'film_projector':'\ud83d\udcfd',
  'film_strip':'\ud83c\udf9e',
  'fire':'\ud83d\udd25',
  'fire_engine':'\ud83d\ude92',
  'fireworks':'\ud83c\udf86',
  'first_quarter_moon':'\ud83c\udf13',
  'first_quarter_moon_with_face':'\ud83c\udf1b',
  'fish':'\ud83d\udc1f',
  'fish_cake':'\ud83c\udf65',
  'fishing_pole_and_fish':'\ud83c\udfa3',
  'fist_raised':'\u270a',
  'fist_left':'\ud83e\udd1b',
  'fist_right':'\ud83e\udd1c',
  'flags':'\ud83c\udf8f',
  'flashlight':'\ud83d\udd26',
  'fleur_de_lis':'\u269c\ufe0f',
  'flight_arrival':'\ud83d\udeec',
  'flight_departure':'\ud83d\udeeb',
  'floppy_disk':'\ud83d\udcbe',
  'flower_playing_cards':'\ud83c\udfb4',
  'flushed':'\ud83d\ude33',
  'fog':'\ud83c\udf2b',
  'foggy':'\ud83c\udf01',
  'football':'\ud83c\udfc8',
  'footprints':'\ud83d\udc63',
  'fork_and_knife':'\ud83c\udf74',
  'fountain':'\u26f2\ufe0f',
  'fountain_pen':'\ud83d\udd8b',
  'four_leaf_clover':'\ud83c\udf40',
  'fox_face':'\ud83e\udd8a',
  'framed_picture':'\ud83d\uddbc',
  'free':'\ud83c\udd93',
  'fried_egg':'\ud83c\udf73',
  'fried_shrimp':'\ud83c\udf64',
  'fries':'\ud83c\udf5f',
  'frog':'\ud83d\udc38',
  'frowning':'\ud83d\ude26',
  'frowning_face':'\u2639\ufe0f',
  'frowning_man':'\ud83d\ude4d&zwj;\u2642\ufe0f',
  'frowning_woman':'\ud83d\ude4d',
  'middle_finger':'\ud83d\udd95',
  'fuelpump':'\u26fd\ufe0f',
  'full_moon':'\ud83c\udf15',
  'full_moon_with_face':'\ud83c\udf1d',
  'funeral_urn':'\u26b1\ufe0f',
  'game_die':'\ud83c\udfb2',
  'gear':'\u2699\ufe0f',
  'gem':'\ud83d\udc8e',
  'gemini':'\u264a\ufe0f',
  'ghost':'\ud83d\udc7b',
  'gift':'\ud83c\udf81',
  'gift_heart':'\ud83d\udc9d',
  'girl':'\ud83d\udc67',
  'globe_with_meridians':'\ud83c\udf10',
  'goal_net':'\ud83e\udd45',
  'goat':'\ud83d\udc10',
  'golf':'\u26f3\ufe0f',
  'golfing_man':'\ud83c\udfcc\ufe0f',
  'golfing_woman':'\ud83c\udfcc\ufe0f&zwj;\u2640\ufe0f',
  'gorilla':'\ud83e\udd8d',
  'grapes':'\ud83c\udf47',
  'green_apple':'\ud83c\udf4f',
  'green_book':'\ud83d\udcd7',
  'green_heart':'\ud83d\udc9a',
  'green_salad':'\ud83e\udd57',
  'grey_exclamation':'\u2755',
  'grey_question':'\u2754',
  'grimacing':'\ud83d\ude2c',
  'grin':'\ud83d\ude01',
  'grinning':'\ud83d\ude00',
  'guardsman':'\ud83d\udc82',
  'guardswoman':'\ud83d\udc82&zwj;\u2640\ufe0f',
  'guitar':'\ud83c\udfb8',
  'gun':'\ud83d\udd2b',
  'haircut_woman':'\ud83d\udc87',
  'haircut_man':'\ud83d\udc87&zwj;\u2642\ufe0f',
  'hamburger':'\ud83c\udf54',
  'hammer':'\ud83d\udd28',
  'hammer_and_pick':'\u2692',
  'hammer_and_wrench':'\ud83d\udee0',
  'hamster':'\ud83d\udc39',
  'hand':'\u270b',
  'handbag':'\ud83d\udc5c',
  'handshake':'\ud83e\udd1d',
  'hankey':'\ud83d\udca9',
  'hatched_chick':'\ud83d\udc25',
  'hatching_chick':'\ud83d\udc23',
  'headphones':'\ud83c\udfa7',
  'hear_no_evil':'\ud83d\ude49',
  'heart':'\u2764\ufe0f',
  'heart_decoration':'\ud83d\udc9f',
  'heart_eyes':'\ud83d\ude0d',
  'heart_eyes_cat':'\ud83d\ude3b',
  'heartbeat':'\ud83d\udc93',
  'heartpulse':'\ud83d\udc97',
  'hearts':'\u2665\ufe0f',
  'heavy_check_mark':'\u2714\ufe0f',
  'heavy_division_sign':'\u2797',
  'heavy_dollar_sign':'\ud83d\udcb2',
  'heavy_heart_exclamation':'\u2763\ufe0f',
  'heavy_minus_sign':'\u2796',
  'heavy_multiplication_x':'\u2716\ufe0f',
  'heavy_plus_sign':'\u2795',
  'helicopter':'\ud83d\ude81',
  'herb':'\ud83c\udf3f',
  'hibiscus':'\ud83c\udf3a',
  'high_brightness':'\ud83d\udd06',
  'high_heel':'\ud83d\udc60',
  'hocho':'\ud83d\udd2a',
  'hole':'\ud83d\udd73',
  'honey_pot':'\ud83c\udf6f',
  'horse':'\ud83d\udc34',
  'horse_racing':'\ud83c\udfc7',
  'hospital':'\ud83c\udfe5',
  'hot_pepper':'\ud83c\udf36',
  'hotdog':'\ud83c\udf2d',
  'hotel':'\ud83c\udfe8',
  'hotsprings':'\u2668\ufe0f',
  'hourglass':'\u231b\ufe0f',
  'hourglass_flowing_sand':'\u23f3',
  'house':'\ud83c\udfe0',
  'house_with_garden':'\ud83c\udfe1',
  'houses':'\ud83c\udfd8',
  'hugs':'\ud83e\udd17',
  'hushed':'\ud83d\ude2f',
  'ice_cream':'\ud83c\udf68',
  'ice_hockey':'\ud83c\udfd2',
  'ice_skate':'\u26f8',
  'icecream':'\ud83c\udf66',
  'id':'\ud83c\udd94',
  'ideograph_advantage':'\ud83c\ude50',
  'imp':'\ud83d\udc7f',
  'inbox_tray':'\ud83d\udce5',
  'incoming_envelope':'\ud83d\udce8',
  'tipping_hand_woman':'\ud83d\udc81',
  'information_source':'\u2139\ufe0f',
  'innocent':'\ud83d\ude07',
  'interrobang':'\u2049\ufe0f',
  'iphone':'\ud83d\udcf1',
  'izakaya_lantern':'\ud83c\udfee',
  'jack_o_lantern':'\ud83c\udf83',
  'japan':'\ud83d\uddfe',
  'japanese_castle':'\ud83c\udfef',
  'japanese_goblin':'\ud83d\udc7a',
  'japanese_ogre':'\ud83d\udc79',
  'jeans':'\ud83d\udc56',
  'joy':'\ud83d\ude02',
  'joy_cat':'\ud83d\ude39',
  'joystick':'\ud83d\udd79',
  'kaaba':'\ud83d\udd4b',
  'key':'\ud83d\udd11',
  'keyboard':'\u2328\ufe0f',
  'keycap_ten':'\ud83d\udd1f',
  'kick_scooter':'\ud83d\udef4',
  'kimono':'\ud83d\udc58',
  'kiss':'\ud83d\udc8b',
  'kissing':'\ud83d\ude17',
  'kissing_cat':'\ud83d\ude3d',
  'kissing_closed_eyes':'\ud83d\ude1a',
  'kissing_heart':'\ud83d\ude18',
  'kissing_smiling_eyes':'\ud83d\ude19',
  'kiwi_fruit':'\ud83e\udd5d',
  'koala':'\ud83d\udc28',
  'koko':'\ud83c\ude01',
  'label':'\ud83c\udff7',
  'large_blue_circle':'\ud83d\udd35',
  'large_blue_diamond':'\ud83d\udd37',
  'large_orange_diamond':'\ud83d\udd36',
  'last_quarter_moon':'\ud83c\udf17',
  'last_quarter_moon_with_face':'\ud83c\udf1c',
  'latin_cross':'\u271d\ufe0f',
  'laughing':'\ud83d\ude06',
  'leaves':'\ud83c\udf43',
  'ledger':'\ud83d\udcd2',
  'left_luggage':'\ud83d\udec5',
  'left_right_arrow':'\u2194\ufe0f',
  'leftwards_arrow_with_hook':'\u21a9\ufe0f',
  'lemon':'\ud83c\udf4b',
  'leo':'\u264c\ufe0f',
  'leopard':'\ud83d\udc06',
  'level_slider':'\ud83c\udf9a',
  'libra':'\u264e\ufe0f',
  'light_rail':'\ud83d\ude88',
  'link':'\ud83d\udd17',
  'lion':'\ud83e\udd81',
  'lips':'\ud83d\udc44',
  'lipstick':'\ud83d\udc84',
  'lizard':'\ud83e\udd8e',
  'lock':'\ud83d\udd12',
  'lock_with_ink_pen':'\ud83d\udd0f',
  'lollipop':'\ud83c\udf6d',
  'loop':'\u27bf',
  'loud_sound':'\ud83d\udd0a',
  'loudspeaker':'\ud83d\udce2',
  'love_hotel':'\ud83c\udfe9',
  'love_letter':'\ud83d\udc8c',
  'low_brightness':'\ud83d\udd05',
  'lying_face':'\ud83e\udd25',
  'm':'\u24c2\ufe0f',
  'mag':'\ud83d\udd0d',
  'mag_right':'\ud83d\udd0e',
  'mahjong':'\ud83c\udc04\ufe0f',
  'mailbox':'\ud83d\udceb',
  'mailbox_closed':'\ud83d\udcea',
  'mailbox_with_mail':'\ud83d\udcec',
  'mailbox_with_no_mail':'\ud83d\udced',
  'man':'\ud83d\udc68',
  'man_artist':'\ud83d\udc68&zwj;\ud83c\udfa8',
  'man_astronaut':'\ud83d\udc68&zwj;\ud83d\ude80',
  'man_cartwheeling':'\ud83e\udd38&zwj;\u2642\ufe0f',
  'man_cook':'\ud83d\udc68&zwj;\ud83c\udf73',
  'man_dancing':'\ud83d\udd7a',
  'man_facepalming':'\ud83e\udd26&zwj;\u2642\ufe0f',
  'man_factory_worker':'\ud83d\udc68&zwj;\ud83c\udfed',
  'man_farmer':'\ud83d\udc68&zwj;\ud83c\udf3e',
  'man_firefighter':'\ud83d\udc68&zwj;\ud83d\ude92',
  'man_health_worker':'\ud83d\udc68&zwj;\u2695\ufe0f',
  'man_in_tuxedo':'\ud83e\udd35',
  'man_judge':'\ud83d\udc68&zwj;\u2696\ufe0f',
  'man_juggling':'\ud83e\udd39&zwj;\u2642\ufe0f',
  'man_mechanic':'\ud83d\udc68&zwj;\ud83d\udd27',
  'man_office_worker':'\ud83d\udc68&zwj;\ud83d\udcbc',
  'man_pilot':'\ud83d\udc68&zwj;\u2708\ufe0f',
  'man_playing_handball':'\ud83e\udd3e&zwj;\u2642\ufe0f',
  'man_playing_water_polo':'\ud83e\udd3d&zwj;\u2642\ufe0f',
  'man_scientist':'\ud83d\udc68&zwj;\ud83d\udd2c',
  'man_shrugging':'\ud83e\udd37&zwj;\u2642\ufe0f',
  'man_singer':'\ud83d\udc68&zwj;\ud83c\udfa4',
  'man_student':'\ud83d\udc68&zwj;\ud83c\udf93',
  'man_teacher':'\ud83d\udc68&zwj;\ud83c\udfeb',
  'man_technologist':'\ud83d\udc68&zwj;\ud83d\udcbb',
  'man_with_gua_pi_mao':'\ud83d\udc72',
  'man_with_turban':'\ud83d\udc73',
  'tangerine':'\ud83c\udf4a',
  'mans_shoe':'\ud83d\udc5e',
  'mantelpiece_clock':'\ud83d\udd70',
  'maple_leaf':'\ud83c\udf41',
  'martial_arts_uniform':'\ud83e\udd4b',
  'mask':'\ud83d\ude37',
  'massage_woman':'\ud83d\udc86',
  'massage_man':'\ud83d\udc86&zwj;\u2642\ufe0f',
  'meat_on_bone':'\ud83c\udf56',
  'medal_military':'\ud83c\udf96',
  'medal_sports':'\ud83c\udfc5',
  'mega':'\ud83d\udce3',
  'melon':'\ud83c\udf48',
  'memo':'\ud83d\udcdd',
  'men_wrestling':'\ud83e\udd3c&zwj;\u2642\ufe0f',
  'menorah':'\ud83d\udd4e',
  'mens':'\ud83d\udeb9',
  'metal':'\ud83e\udd18',
  'metro':'\ud83d\ude87',
  'microphone':'\ud83c\udfa4',
  'microscope':'\ud83d\udd2c',
  'milk_glass':'\ud83e\udd5b',
  'milky_way':'\ud83c\udf0c',
  'minibus':'\ud83d\ude90',
  'minidisc':'\ud83d\udcbd',
  'mobile_phone_off':'\ud83d\udcf4',
  'money_mouth_face':'\ud83e\udd11',
  'money_with_wings':'\ud83d\udcb8',
  'moneybag':'\ud83d\udcb0',
  'monkey':'\ud83d\udc12',
  'monkey_face':'\ud83d\udc35',
  'monorail':'\ud83d\ude9d',
  'moon':'\ud83c\udf14',
  'mortar_board':'\ud83c\udf93',
  'mosque':'\ud83d\udd4c',
  'motor_boat':'\ud83d\udee5',
  'motor_scooter':'\ud83d\udef5',
  'motorcycle':'\ud83c\udfcd',
  'motorway':'\ud83d\udee3',
  'mount_fuji':'\ud83d\uddfb',
  'mountain':'\u26f0',
  'mountain_biking_man':'\ud83d\udeb5',
  'mountain_biking_woman':'\ud83d\udeb5&zwj;\u2640\ufe0f',
  'mountain_cableway':'\ud83d\udea0',
  'mountain_railway':'\ud83d\ude9e',
  'mountain_snow':'\ud83c\udfd4',
  'mouse':'\ud83d\udc2d',
  'mouse2':'\ud83d\udc01',
  'movie_camera':'\ud83c\udfa5',
  'moyai':'\ud83d\uddff',
  'mrs_claus':'\ud83e\udd36',
  'muscle':'\ud83d\udcaa',
  'mushroom':'\ud83c\udf44',
  'musical_keyboard':'\ud83c\udfb9',
  'musical_note':'\ud83c\udfb5',
  'musical_score':'\ud83c\udfbc',
  'mute':'\ud83d\udd07',
  'nail_care':'\ud83d\udc85',
  'name_badge':'\ud83d\udcdb',
  'national_park':'\ud83c\udfde',
  'nauseated_face':'\ud83e\udd22',
  'necktie':'\ud83d\udc54',
  'negative_squared_cross_mark':'\u274e',
  'nerd_face':'\ud83e\udd13',
  'neutral_face':'\ud83d\ude10',
  'new':'\ud83c\udd95',
  'new_moon':'\ud83c\udf11',
  'new_moon_with_face':'\ud83c\udf1a',
  'newspaper':'\ud83d\udcf0',
  'newspaper_roll':'\ud83d\uddde',
  'next_track_button':'\u23ed',
  'ng':'\ud83c\udd96',
  'no_good_man':'\ud83d\ude45&zwj;\u2642\ufe0f',
  'no_good_woman':'\ud83d\ude45',
  'night_with_stars':'\ud83c\udf03',
  'no_bell':'\ud83d\udd15',
  'no_bicycles':'\ud83d\udeb3',
  'no_entry':'\u26d4\ufe0f',
  'no_entry_sign':'\ud83d\udeab',
  'no_mobile_phones':'\ud83d\udcf5',
  'no_mouth':'\ud83d\ude36',
  'no_pedestrians':'\ud83d\udeb7',
  'no_smoking':'\ud83d\udead',
  'non-potable_water':'\ud83d\udeb1',
  'nose':'\ud83d\udc43',
  'notebook':'\ud83d\udcd3',
  'notebook_with_decorative_cover':'\ud83d\udcd4',
  'notes':'\ud83c\udfb6',
  'nut_and_bolt':'\ud83d\udd29',
  'o':'\u2b55\ufe0f',
  'o2':'\ud83c\udd7e\ufe0f',
  'ocean':'\ud83c\udf0a',
  'octopus':'\ud83d\udc19',
  'oden':'\ud83c\udf62',
  'office':'\ud83c\udfe2',
  'oil_drum':'\ud83d\udee2',
  'ok':'\ud83c\udd97',
  'ok_hand':'\ud83d\udc4c',
  'ok_man':'\ud83d\ude46&zwj;\u2642\ufe0f',
  'ok_woman':'\ud83d\ude46',
  'old_key':'\ud83d\udddd',
  'older_man':'\ud83d\udc74',
  'older_woman':'\ud83d\udc75',
  'om':'\ud83d\udd49',
  'on':'\ud83d\udd1b',
  'oncoming_automobile':'\ud83d\ude98',
  'oncoming_bus':'\ud83d\ude8d',
  'oncoming_police_car':'\ud83d\ude94',
  'oncoming_taxi':'\ud83d\ude96',
  'open_file_folder':'\ud83d\udcc2',
  'open_hands':'\ud83d\udc50',
  'open_mouth':'\ud83d\ude2e',
  'open_umbrella':'\u2602\ufe0f',
  'ophiuchus':'\u26ce',
  'orange_book':'\ud83d\udcd9',
  'orthodox_cross':'\u2626\ufe0f',
  'outbox_tray':'\ud83d\udce4',
  'owl':'\ud83e\udd89',
  'ox':'\ud83d\udc02',
  'package':'\ud83d\udce6',
  'page_facing_up':'\ud83d\udcc4',
  'page_with_curl':'\ud83d\udcc3',
  'pager':'\ud83d\udcdf',
  'paintbrush':'\ud83d\udd8c',
  'palm_tree':'\ud83c\udf34',
  'pancakes':'\ud83e\udd5e',
  'panda_face':'\ud83d\udc3c',
  'paperclip':'\ud83d\udcce',
  'paperclips':'\ud83d\udd87',
  'parasol_on_ground':'\u26f1',
  'parking':'\ud83c\udd7f\ufe0f',
  'part_alternation_mark':'\u303d\ufe0f',
  'partly_sunny':'\u26c5\ufe0f',
  'passenger_ship':'\ud83d\udef3',
  'passport_control':'\ud83d\udec2',
  'pause_button':'\u23f8',
  'peace_symbol':'\u262e\ufe0f',
  'peach':'\ud83c\udf51',
  'peanuts':'\ud83e\udd5c',
  'pear':'\ud83c\udf50',
  'pen':'\ud83d\udd8a',
  'pencil2':'\u270f\ufe0f',
  'penguin':'\ud83d\udc27',
  'pensive':'\ud83d\ude14',
  'performing_arts':'\ud83c\udfad',
  'persevere':'\ud83d\ude23',
  'person_fencing':'\ud83e\udd3a',
  'pouting_woman':'\ud83d\ude4e',
  'phone':'\u260e\ufe0f',
  'pick':'\u26cf',
  'pig':'\ud83d\udc37',
  'pig2':'\ud83d\udc16',
  'pig_nose':'\ud83d\udc3d',
  'pill':'\ud83d\udc8a',
  'pineapple':'\ud83c\udf4d',
  'ping_pong':'\ud83c\udfd3',
  'pisces':'\u2653\ufe0f',
  'pizza':'\ud83c\udf55',
  'place_of_worship':'\ud83d\uded0',
  'plate_with_cutlery':'\ud83c\udf7d',
  'play_or_pause_button':'\u23ef',
  'point_down':'\ud83d\udc47',
  'point_left':'\ud83d\udc48',
  'point_right':'\ud83d\udc49',
  'point_up':'\u261d\ufe0f',
  'point_up_2':'\ud83d\udc46',
  'police_car':'\ud83d\ude93',
  'policewoman':'\ud83d\udc6e&zwj;\u2640\ufe0f',
  'poodle':'\ud83d\udc29',
  'popcorn':'\ud83c\udf7f',
  'post_office':'\ud83c\udfe3',
  'postal_horn':'\ud83d\udcef',
  'postbox':'\ud83d\udcee',
  'potable_water':'\ud83d\udeb0',
  'potato':'\ud83e\udd54',
  'pouch':'\ud83d\udc5d',
  'poultry_leg':'\ud83c\udf57',
  'pound':'\ud83d\udcb7',
  'rage':'\ud83d\ude21',
  'pouting_cat':'\ud83d\ude3e',
  'pouting_man':'\ud83d\ude4e&zwj;\u2642\ufe0f',
  'pray':'\ud83d\ude4f',
  'prayer_beads':'\ud83d\udcff',
  'pregnant_woman':'\ud83e\udd30',
  'previous_track_button':'\u23ee',
  'prince':'\ud83e\udd34',
  'princess':'\ud83d\udc78',
  'printer':'\ud83d\udda8',
  'purple_heart':'\ud83d\udc9c',
  'purse':'\ud83d\udc5b',
  'pushpin':'\ud83d\udccc',
  'put_litter_in_its_place':'\ud83d\udeae',
  'question':'\u2753',
  'rabbit':'\ud83d\udc30',
  'rabbit2':'\ud83d\udc07',
  'racehorse':'\ud83d\udc0e',
  'racing_car':'\ud83c\udfce',
  'radio':'\ud83d\udcfb',
  'radio_button':'\ud83d\udd18',
  'radioactive':'\u2622\ufe0f',
  'railway_car':'\ud83d\ude83',
  'railway_track':'\ud83d\udee4',
  'rainbow':'\ud83c\udf08',
  'rainbow_flag':'\ud83c\udff3\ufe0f&zwj;\ud83c\udf08',
  'raised_back_of_hand':'\ud83e\udd1a',
  'raised_hand_with_fingers_splayed':'\ud83d\udd90',
  'raised_hands':'\ud83d\ude4c',
  'raising_hand_woman':'\ud83d\ude4b',
  'raising_hand_man':'\ud83d\ude4b&zwj;\u2642\ufe0f',
  'ram':'\ud83d\udc0f',
  'ramen':'\ud83c\udf5c',
  'rat':'\ud83d\udc00',
  'record_button':'\u23fa',
  'recycle':'\u267b\ufe0f',
  'red_circle':'\ud83d\udd34',
  'registered':'\u00ae\ufe0f',
  'relaxed':'\u263a\ufe0f',
  'relieved':'\ud83d\ude0c',
  'reminder_ribbon':'\ud83c\udf97',
  'repeat':'\ud83d\udd01',
  'repeat_one':'\ud83d\udd02',
  'rescue_worker_helmet':'\u26d1',
  'restroom':'\ud83d\udebb',
  'revolving_hearts':'\ud83d\udc9e',
  'rewind':'\u23ea',
  'rhinoceros':'\ud83e\udd8f',
  'ribbon':'\ud83c\udf80',
  'rice':'\ud83c\udf5a',
  'rice_ball':'\ud83c\udf59',
  'rice_cracker':'\ud83c\udf58',
  'rice_scene':'\ud83c\udf91',
  'right_anger_bubble':'\ud83d\uddef',
  'ring':'\ud83d\udc8d',
  'robot':'\ud83e\udd16',
  'rocket':'\ud83d\ude80',
  'rofl':'\ud83e\udd23',
  'roll_eyes':'\ud83d\ude44',
  'roller_coaster':'\ud83c\udfa2',
  'rooster':'\ud83d\udc13',
  'rose':'\ud83c\udf39',
  'rosette':'\ud83c\udff5',
  'rotating_light':'\ud83d\udea8',
  'round_pushpin':'\ud83d\udccd',
  'rowing_man':'\ud83d\udea3',
  'rowing_woman':'\ud83d\udea3&zwj;\u2640\ufe0f',
  'rugby_football':'\ud83c\udfc9',
  'running_man':'\ud83c\udfc3',
  'running_shirt_with_sash':'\ud83c\udfbd',
  'running_woman':'\ud83c\udfc3&zwj;\u2640\ufe0f',
  'sa':'\ud83c\ude02\ufe0f',
  'sagittarius':'\u2650\ufe0f',
  'sake':'\ud83c\udf76',
  'sandal':'\ud83d\udc61',
  'santa':'\ud83c\udf85',
  'satellite':'\ud83d\udce1',
  'saxophone':'\ud83c\udfb7',
  'school':'\ud83c\udfeb',
  'school_satchel':'\ud83c\udf92',
  'scissors':'\u2702\ufe0f',
  'scorpion':'\ud83e\udd82',
  'scorpius':'\u264f\ufe0f',
  'scream':'\ud83d\ude31',
  'scream_cat':'\ud83d\ude40',
  'scroll':'\ud83d\udcdc',
  'seat':'\ud83d\udcba',
  'secret':'\u3299\ufe0f',
  'see_no_evil':'\ud83d\ude48',
  'seedling':'\ud83c\udf31',
  'selfie':'\ud83e\udd33',
  'shallow_pan_of_food':'\ud83e\udd58',
  'shamrock':'\u2618\ufe0f',
  'shark':'\ud83e\udd88',
  'shaved_ice':'\ud83c\udf67',
  'sheep':'\ud83d\udc11',
  'shell':'\ud83d\udc1a',
  'shield':'\ud83d\udee1',
  'shinto_shrine':'\u26e9',
  'ship':'\ud83d\udea2',
  'shirt':'\ud83d\udc55',
  'shopping':'\ud83d\udecd',
  'shopping_cart':'\ud83d\uded2',
  'shower':'\ud83d\udebf',
  'shrimp':'\ud83e\udd90',
  'signal_strength':'\ud83d\udcf6',
  'six_pointed_star':'\ud83d\udd2f',
  'ski':'\ud83c\udfbf',
  'skier':'\u26f7',
  'skull':'\ud83d\udc80',
  'skull_and_crossbones':'\u2620\ufe0f',
  'sleeping':'\ud83d\ude34',
  'sleeping_bed':'\ud83d\udecc',
  'sleepy':'\ud83d\ude2a',
  'slightly_frowning_face':'\ud83d\ude41',
  'slightly_smiling_face':'\ud83d\ude42',
  'slot_machine':'\ud83c\udfb0',
  'small_airplane':'\ud83d\udee9',
  'small_blue_diamond':'\ud83d\udd39',
  'small_orange_diamond':'\ud83d\udd38',
  'small_red_triangle':'\ud83d\udd3a',
  'small_red_triangle_down':'\ud83d\udd3b',
  'smile':'\ud83d\ude04',
  'smile_cat':'\ud83d\ude38',
  'smiley':'\ud83d\ude03',
  'smiley_cat':'\ud83d\ude3a',
  'smiling_imp':'\ud83d\ude08',
  'smirk':'\ud83d\ude0f',
  'smirk_cat':'\ud83d\ude3c',
  'smoking':'\ud83d\udeac',
  'snail':'\ud83d\udc0c',
  'snake':'\ud83d\udc0d',
  'sneezing_face':'\ud83e\udd27',
  'snowboarder':'\ud83c\udfc2',
  'snowflake':'\u2744\ufe0f',
  'snowman':'\u26c4\ufe0f',
  'snowman_with_snow':'\u2603\ufe0f',
  'sob':'\ud83d\ude2d',
  'soccer':'\u26bd\ufe0f',
  'soon':'\ud83d\udd1c',
  'sos':'\ud83c\udd98',
  'sound':'\ud83d\udd09',
  'space_invader':'\ud83d\udc7e',
  'spades':'\u2660\ufe0f',
  'spaghetti':'\ud83c\udf5d',
  'sparkle':'\u2747\ufe0f',
  'sparkler':'\ud83c\udf87',
  'sparkles':'\u2728',
  'sparkling_heart':'\ud83d\udc96',
  'speak_no_evil':'\ud83d\ude4a',
  'speaker':'\ud83d\udd08',
  'speaking_head':'\ud83d\udde3',
  'speech_balloon':'\ud83d\udcac',
  'speedboat':'\ud83d\udea4',
  'spider':'\ud83d\udd77',
  'spider_web':'\ud83d\udd78',
  'spiral_calendar':'\ud83d\uddd3',
  'spiral_notepad':'\ud83d\uddd2',
  'spoon':'\ud83e\udd44',
  'squid':'\ud83e\udd91',
  'stadium':'\ud83c\udfdf',
  'star':'\u2b50\ufe0f',
  'star2':'\ud83c\udf1f',
  'star_and_crescent':'\u262a\ufe0f',
  'star_of_david':'\u2721\ufe0f',
  'stars':'\ud83c\udf20',
  'station':'\ud83d\ude89',
  'statue_of_liberty':'\ud83d\uddfd',
  'steam_locomotive':'\ud83d\ude82',
  'stew':'\ud83c\udf72',
  'stop_button':'\u23f9',
  'stop_sign':'\ud83d\uded1',
  'stopwatch':'\u23f1',
  'straight_ruler':'\ud83d\udccf',
  'strawberry':'\ud83c\udf53',
  'stuck_out_tongue':'\ud83d\ude1b',
  'stuck_out_tongue_closed_eyes':'\ud83d\ude1d',
  'stuck_out_tongue_winking_eye':'\ud83d\ude1c',
  'studio_microphone':'\ud83c\udf99',
  'stuffed_flatbread':'\ud83e\udd59',
  'sun_behind_large_cloud':'\ud83c\udf25',
  'sun_behind_rain_cloud':'\ud83c\udf26',
  'sun_behind_small_cloud':'\ud83c\udf24',
  'sun_with_face':'\ud83c\udf1e',
  'sunflower':'\ud83c\udf3b',
  'sunglasses':'\ud83d\ude0e',
  'sunny':'\u2600\ufe0f',
  'sunrise':'\ud83c\udf05',
  'sunrise_over_mountains':'\ud83c\udf04',
  'surfing_man':'\ud83c\udfc4',
  'surfing_woman':'\ud83c\udfc4&zwj;\u2640\ufe0f',
  'sushi':'\ud83c\udf63',
  'suspension_railway':'\ud83d\ude9f',
  'sweat':'\ud83d\ude13',
  'sweat_drops':'\ud83d\udca6',
  'sweat_smile':'\ud83d\ude05',
  'sweet_potato':'\ud83c\udf60',
  'swimming_man':'\ud83c\udfca',
  'swimming_woman':'\ud83c\udfca&zwj;\u2640\ufe0f',
  'symbols':'\ud83d\udd23',
  'synagogue':'\ud83d\udd4d',
  'syringe':'\ud83d\udc89',
  'taco':'\ud83c\udf2e',
  'tada':'\ud83c\udf89',
  'tanabata_tree':'\ud83c\udf8b',
  'taurus':'\u2649\ufe0f',
  'taxi':'\ud83d\ude95',
  'tea':'\ud83c\udf75',
  'telephone_receiver':'\ud83d\udcde',
  'telescope':'\ud83d\udd2d',
  'tennis':'\ud83c\udfbe',
  'tent':'\u26fa\ufe0f',
  'thermometer':'\ud83c\udf21',
  'thinking':'\ud83e\udd14',
  'thought_balloon':'\ud83d\udcad',
  'ticket':'\ud83c\udfab',
  'tickets':'\ud83c\udf9f',
  'tiger':'\ud83d\udc2f',
  'tiger2':'\ud83d\udc05',
  'timer_clock':'\u23f2',
  'tipping_hand_man':'\ud83d\udc81&zwj;\u2642\ufe0f',
  'tired_face':'\ud83d\ude2b',
  'tm':'\u2122\ufe0f',
  'toilet':'\ud83d\udebd',
  'tokyo_tower':'\ud83d\uddfc',
  'tomato':'\ud83c\udf45',
  'tongue':'\ud83d\udc45',
  'top':'\ud83d\udd1d',
  'tophat':'\ud83c\udfa9',
  'tornado':'\ud83c\udf2a',
  'trackball':'\ud83d\uddb2',
  'tractor':'\ud83d\ude9c',
  'traffic_light':'\ud83d\udea5',
  'train':'\ud83d\ude8b',
  'train2':'\ud83d\ude86',
  'tram':'\ud83d\ude8a',
  'triangular_flag_on_post':'\ud83d\udea9',
  'triangular_ruler':'\ud83d\udcd0',
  'trident':'\ud83d\udd31',
  'triumph':'\ud83d\ude24',
  'trolleybus':'\ud83d\ude8e',
  'trophy':'\ud83c\udfc6',
  'tropical_drink':'\ud83c\udf79',
  'tropical_fish':'\ud83d\udc20',
  'truck':'\ud83d\ude9a',
  'trumpet':'\ud83c\udfba',
  'tulip':'\ud83c\udf37',
  'tumbler_glass':'\ud83e\udd43',
  'turkey':'\ud83e\udd83',
  'turtle':'\ud83d\udc22',
  'tv':'\ud83d\udcfa',
  'twisted_rightwards_arrows':'\ud83d\udd00',
  'two_hearts':'\ud83d\udc95',
  'two_men_holding_hands':'\ud83d\udc6c',
  'two_women_holding_hands':'\ud83d\udc6d',
  'u5272':'\ud83c\ude39',
  'u5408':'\ud83c\ude34',
  'u55b6':'\ud83c\ude3a',
  'u6307':'\ud83c\ude2f\ufe0f',
  'u6708':'\ud83c\ude37\ufe0f',
  'u6709':'\ud83c\ude36',
  'u6e80':'\ud83c\ude35',
  'u7121':'\ud83c\ude1a\ufe0f',
  'u7533':'\ud83c\ude38',
  'u7981':'\ud83c\ude32',
  'u7a7a':'\ud83c\ude33',
  'umbrella':'\u2614\ufe0f',
  'unamused':'\ud83d\ude12',
  'underage':'\ud83d\udd1e',
  'unicorn':'\ud83e\udd84',
  'unlock':'\ud83d\udd13',
  'up':'\ud83c\udd99',
  'upside_down_face':'\ud83d\ude43',
  'v':'\u270c\ufe0f',
  'vertical_traffic_light':'\ud83d\udea6',
  'vhs':'\ud83d\udcfc',
  'vibration_mode':'\ud83d\udcf3',
  'video_camera':'\ud83d\udcf9',
  'video_game':'\ud83c\udfae',
  'violin':'\ud83c\udfbb',
  'virgo':'\u264d\ufe0f',
  'volcano':'\ud83c\udf0b',
  'volleyball':'\ud83c\udfd0',
  'vs':'\ud83c\udd9a',
  'vulcan_salute':'\ud83d\udd96',
  'walking_man':'\ud83d\udeb6',
  'walking_woman':'\ud83d\udeb6&zwj;\u2640\ufe0f',
  'waning_crescent_moon':'\ud83c\udf18',
  'waning_gibbous_moon':'\ud83c\udf16',
  'warning':'\u26a0\ufe0f',
  'wastebasket':'\ud83d\uddd1',
  'watch':'\u231a\ufe0f',
  'water_buffalo':'\ud83d\udc03',
  'watermelon':'\ud83c\udf49',
  'wave':'\ud83d\udc4b',
  'wavy_dash':'\u3030\ufe0f',
  'waxing_crescent_moon':'\ud83c\udf12',
  'wc':'\ud83d\udebe',
  'weary':'\ud83d\ude29',
  'wedding':'\ud83d\udc92',
  'weight_lifting_man':'\ud83c\udfcb\ufe0f',
  'weight_lifting_woman':'\ud83c\udfcb\ufe0f&zwj;\u2640\ufe0f',
  'whale':'\ud83d\udc33',
  'whale2':'\ud83d\udc0b',
  'wheel_of_dharma':'\u2638\ufe0f',
  'wheelchair':'\u267f\ufe0f',
  'white_check_mark':'\u2705',
  'white_circle':'\u26aa\ufe0f',
  'white_flag':'\ud83c\udff3\ufe0f',
  'white_flower':'\ud83d\udcae',
  'white_large_square':'\u2b1c\ufe0f',
  'white_medium_small_square':'\u25fd\ufe0f',
  'white_medium_square':'\u25fb\ufe0f',
  'white_small_square':'\u25ab\ufe0f',
  'white_square_button':'\ud83d\udd33',
  'wilted_flower':'\ud83e\udd40',
  'wind_chime':'\ud83c\udf90',
  'wind_face':'\ud83c\udf2c',
  'wine_glass':'\ud83c\udf77',
  'wink':'\ud83d\ude09',
  'wolf':'\ud83d\udc3a',
  'woman':'\ud83d\udc69',
  'woman_artist':'\ud83d\udc69&zwj;\ud83c\udfa8',
  'woman_astronaut':'\ud83d\udc69&zwj;\ud83d\ude80',
  'woman_cartwheeling':'\ud83e\udd38&zwj;\u2640\ufe0f',
  'woman_cook':'\ud83d\udc69&zwj;\ud83c\udf73',
  'woman_facepalming':'\ud83e\udd26&zwj;\u2640\ufe0f',
  'woman_factory_worker':'\ud83d\udc69&zwj;\ud83c\udfed',
  'woman_farmer':'\ud83d\udc69&zwj;\ud83c\udf3e',
  'woman_firefighter':'\ud83d\udc69&zwj;\ud83d\ude92',
  'woman_health_worker':'\ud83d\udc69&zwj;\u2695\ufe0f',
  'woman_judge':'\ud83d\udc69&zwj;\u2696\ufe0f',
  'woman_juggling':'\ud83e\udd39&zwj;\u2640\ufe0f',
  'woman_mechanic':'\ud83d\udc69&zwj;\ud83d\udd27',
  'woman_office_worker':'\ud83d\udc69&zwj;\ud83d\udcbc',
  'woman_pilot':'\ud83d\udc69&zwj;\u2708\ufe0f',
  'woman_playing_handball':'\ud83e\udd3e&zwj;\u2640\ufe0f',
  'woman_playing_water_polo':'\ud83e\udd3d&zwj;\u2640\ufe0f',
  'woman_scientist':'\ud83d\udc69&zwj;\ud83d\udd2c',
  'woman_shrugging':'\ud83e\udd37&zwj;\u2640\ufe0f',
  'woman_singer':'\ud83d\udc69&zwj;\ud83c\udfa4',
  'woman_student':'\ud83d\udc69&zwj;\ud83c\udf93',
  'woman_teacher':'\ud83d\udc69&zwj;\ud83c\udfeb',
  'woman_technologist':'\ud83d\udc69&zwj;\ud83d\udcbb',
  'woman_with_turban':'\ud83d\udc73&zwj;\u2640\ufe0f',
  'womans_clothes':'\ud83d\udc5a',
  'womans_hat':'\ud83d\udc52',
  'women_wrestling':'\ud83e\udd3c&zwj;\u2640\ufe0f',
  'womens':'\ud83d\udeba',
  'world_map':'\ud83d\uddfa',
  'worried':'\ud83d\ude1f',
  'wrench':'\ud83d\udd27',
  'writing_hand':'\u270d\ufe0f',
  'x':'\u274c',
  'yellow_heart':'\ud83d\udc9b',
  'yen':'\ud83d\udcb4',
  'yin_yang':'\u262f\ufe0f',
  'yum':'\ud83d\ude0b',
  'zap':'\u26a1\ufe0f',
  'zipper_mouth_face':'\ud83e\udd10',
  'zzz':'\ud83d\udca4',

  /* special emojis :P */
  'octocat':  '<img alt=":octocat:" height="20" width="20" align="absmiddle" src="https://assets-cdn.github.com/images/icons/emoji/octocat.png">',
  'showdown': '<span style="font-family: \'Anonymous Pro\', monospace; text-decoration: underline; text-decoration-style: dashed; text-decoration-color: #3e8b8a;text-underline-position: under;">S</span>'
};

/**
 * Created by Estevao on 31-05-2015.
 */

/**
 * Showdown Converter class
 * @class
 * @param {object} [converterOptions]
 * @returns {Converter}
 */
showdown.Converter = function (converterOptions) {
  'use strict';

  var
      /**
       * Options used by this converter
       * @private
       * @type {{}}
       */
      options = {},

      /**
       * Language extensions used by this converter
       * @private
       * @type {Array}
       */
      langExtensions = [],

      /**
       * Output modifiers extensions used by this converter
       * @private
       * @type {Array}
       */
      outputModifiers = [],

      /**
       * Event listeners
       * @private
       * @type {{}}
       */
      listeners = {},

      /**
       * The flavor set in this converter
       */
      setConvFlavor = setFlavor,

      /**
       * Metadata of the document
       * @type {{parsed: {}, raw: string, format: string}}
       */
      metadata = {
        parsed: {},
        raw: '',
        format: ''
      };

  _constructor();

  /**
   * Converter constructor
   * @private
   */
  function _constructor () {
    converterOptions = converterOptions || {};

    for (var gOpt in globalOptions) {
      if (globalOptions.hasOwnProperty(gOpt)) {
        options[gOpt] = globalOptions[gOpt];
      }
    }

    // Merge options
    if (typeof converterOptions === 'object') {
      for (var opt in converterOptions) {
        if (converterOptions.hasOwnProperty(opt)) {
          options[opt] = converterOptions[opt];
        }
      }
    } else {
      throw Error('Converter expects the passed parameter to be an object, but ' + typeof converterOptions +
      ' was passed instead.');
    }

    if (options.extensions) {
      showdown.helper.forEach(options.extensions, _parseExtension);
    }
  }

  /**
   * Parse extension
   * @param {*} ext
   * @param {string} [name='']
   * @private
   */
  function _parseExtension (ext, name) {

    name = name || null;
    // If it's a string, the extension was previously loaded
    if (showdown.helper.isString(ext)) {
      ext = showdown.helper.stdExtName(ext);
      name = ext;

      // LEGACY_SUPPORT CODE
      if (showdown.extensions[ext]) {
        console.warn('DEPRECATION WARNING: ' + ext + ' is an old extension that uses a deprecated loading method.' +
          'Please inform the developer that the extension should be updated!');
        legacyExtensionLoading(showdown.extensions[ext], ext);
        return;
        // END LEGACY SUPPORT CODE

      } else if (!showdown.helper.isUndefined(extensions[ext])) {
        ext = extensions[ext];

      } else {
        throw Error('Extension "' + ext + '" could not be loaded. It was either not found or is not a valid extension.');
      }
    }

    if (typeof ext === 'function') {
      ext = ext();
    }

    if (!showdown.helper.isArray(ext)) {
      ext = [ext];
    }

    var validExt = validate(ext, name);
    if (!validExt.valid) {
      throw Error(validExt.error);
    }

    for (var i = 0; i < ext.length; ++i) {
      switch (ext[i].type) {

        case 'lang':
          langExtensions.push(ext[i]);
          break;

        case 'output':
          outputModifiers.push(ext[i]);
          break;
      }
      if (ext[i].hasOwnProperty('listeners')) {
        for (var ln in ext[i].listeners) {
          if (ext[i].listeners.hasOwnProperty(ln)) {
            listen(ln, ext[i].listeners[ln]);
          }
        }
      }
    }

  }

  /**
   * LEGACY_SUPPORT
   * @param {*} ext
   * @param {string} name
   */
  function legacyExtensionLoading (ext, name) {
    if (typeof ext === 'function') {
      ext = ext(new showdown.Converter());
    }
    if (!showdown.helper.isArray(ext)) {
      ext = [ext];
    }
    var valid = validate(ext, name);

    if (!valid.valid) {
      throw Error(valid.error);
    }

    for (var i = 0; i < ext.length; ++i) {
      switch (ext[i].type) {
        case 'lang':
          langExtensions.push(ext[i]);
          break;
        case 'output':
          outputModifiers.push(ext[i]);
          break;
        default:// should never reach here
          throw Error('Extension loader error: Type unrecognized!!!');
      }
    }
  }

  /**
   * Listen to an event
   * @param {string} name
   * @param {function} callback
   */
  function listen (name, callback) {
    if (!showdown.helper.isString(name)) {
      throw Error('Invalid argument in converter.listen() method: name must be a string, but ' + typeof name + ' given');
    }

    if (typeof callback !== 'function') {
      throw Error('Invalid argument in converter.listen() method: callback must be a function, but ' + typeof callback + ' given');
    }

    if (!listeners.hasOwnProperty(name)) {
      listeners[name] = [];
    }
    listeners[name].push(callback);
  }

  function rTrimInputText (text) {
    var rsp = text.match(/^\s*/)[0].length,
        rgx = new RegExp('^\\s{0,' + rsp + '}', 'gm');
    return text.replace(rgx, '');
  }

  /**
   * Dispatch an event
   * @private
   * @param {string} evtName Event name
   * @param {string} text Text
   * @param {{}} options Converter Options
   * @param {{}} globals
   * @returns {string}
   */
  this._dispatch = function dispatch (evtName, text, options, globals) {
    if (listeners.hasOwnProperty(evtName)) {
      for (var ei = 0; ei < listeners[evtName].length; ++ei) {
        var nText = listeners[evtName][ei](evtName, text, this, options, globals);
        if (nText && typeof nText !== 'undefined') {
          text = nText;
        }
      }
    }
    return text;
  };

  /**
   * Listen to an event
   * @param {string} name
   * @param {function} callback
   * @returns {showdown.Converter}
   */
  this.listen = function (name, callback) {
    listen(name, callback);
    return this;
  };

  /**
   * Converts a markdown string into HTML
   * @param {string} text
   * @returns {*}
   */
  this.makeHtml = function (text) {
    //check if text is not falsy
    if (!text) {
      return text;
    }

    var globals = {
      gHtmlBlocks:     [],
      gHtmlMdBlocks:   [],
      gHtmlSpans:      [],
      gUrls:           {},
      gTitles:         {},
      gDimensions:     {},
      gListLevel:      0,
      hashLinkCounts:  {},
      langExtensions:  langExtensions,
      outputModifiers: outputModifiers,
      converter:       this,
      ghCodeBlocks:    [],
      metadata: {
        parsed: {},
        raw: '',
        format: ''
      }
    };

    // This lets us use ¨ trema as an escape char to avoid md5 hashes
    // The choice of character is arbitrary; anything that isn't
    // magic in Markdown will work.
    text = text.replace(/¨/g, '¨T');

    // Replace $ with ¨D
    // RegExp interprets $ as a special character
    // when it's in a replacement string
    text = text.replace(/\$/g, '¨D');

    // Standardize line endings
    text = text.replace(/\r\n/g, '\n'); // DOS to Unix
    text = text.replace(/\r/g, '\n'); // Mac to Unix

    // Stardardize line spaces
    text = text.replace(/\u00A0/g, '&nbsp;');

    if (options.smartIndentationFix) {
      text = rTrimInputText(text);
    }

    // Make sure text begins and ends with a couple of newlines:
    text = '\n\n' + text + '\n\n';

    // detab
    text = showdown.subParser('detab')(text, options, globals);

    /**
     * Strip any lines consisting only of spaces and tabs.
     * This makes subsequent regexs easier to write, because we can
     * match consecutive blank lines with /\n+/ instead of something
     * contorted like /[ \t]*\n+/
     */
    text = text.replace(/^[ \t]+$/mg, '');

    //run languageExtensions
    showdown.helper.forEach(langExtensions, function (ext) {
      text = showdown.subParser('runExtension')(ext, text, options, globals);
    });

    // run the sub parsers
    text = showdown.subParser('metadata')(text, options, globals);
    text = showdown.subParser('hashPreCodeTags')(text, options, globals);
    text = showdown.subParser('githubCodeBlocks')(text, options, globals);
    text = showdown.subParser('hashHTMLBlocks')(text, options, globals);
    text = showdown.subParser('hashCodeTags')(text, options, globals);
    text = showdown.subParser('stripLinkDefinitions')(text, options, globals);
    text = showdown.subParser('blockGamut')(text, options, globals);
    text = showdown.subParser('unhashHTMLSpans')(text, options, globals);
    text = showdown.subParser('unescapeSpecialChars')(text, options, globals);

    // attacklab: Restore dollar signs
    text = text.replace(/¨D/g, '$$');

    // attacklab: Restore tremas
    text = text.replace(/¨T/g, '¨');

    // render a complete html document instead of a partial if the option is enabled
    text = showdown.subParser('completeHTMLDocument')(text, options, globals);

    // Run output modifiers
    showdown.helper.forEach(outputModifiers, function (ext) {
      text = showdown.subParser('runExtension')(ext, text, options, globals);
    });

    // update metadata
    metadata = globals.metadata;
    return text;
  };

  /**
   * Converts an HTML string into a markdown string
   * @param src
   * @param [HTMLParser] A WHATWG DOM and HTML parser, such as JSDOM. If none is supplied, window.document will be used.
   * @returns {string}
   */
  this.makeMarkdown = this.makeMd = function (src, HTMLParser) {

    // replace \r\n with \n
    src = src.replace(/\r\n/g, '\n');
    src = src.replace(/\r/g, '\n'); // old macs

    // due to an edge case, we need to find this: > <
    // to prevent removing of non silent white spaces
    // ex: <em>this is</em> <strong>sparta</strong>
    src = src.replace(/>[ \t]+</, '>¨NBSP;<');

    if (!HTMLParser) {
      if (window && window.document) {
        HTMLParser = window.document;
      } else {
        throw new Error('HTMLParser is undefined. If in a webworker or nodejs environment, you need to provide a WHATWG DOM and HTML such as JSDOM');
      }
    }

    var doc = HTMLParser.createElement('div');
    doc.innerHTML = src;

    var globals = {
      preList: substitutePreCodeTags(doc)
    };

    // remove all newlines and collapse spaces
    clean(doc);

    // some stuff, like accidental reference links must now be escaped
    // TODO
    // doc.innerHTML = doc.innerHTML.replace(/\[[\S\t ]]/);

    var nodes = doc.childNodes,
        mdDoc = '';

    for (var i = 0; i < nodes.length; i++) {
      mdDoc += showdown.subParser('makeMarkdown.node')(nodes[i], globals);
    }

    function clean (node) {
      for (var n = 0; n < node.childNodes.length; ++n) {
        var child = node.childNodes[n];
        if (child.nodeType === 3) {
          if (!/\S/.test(child.nodeValue) && !/^[ ]+$/.test(child.nodeValue)) {
            node.removeChild(child);
            --n;
          } else {
            child.nodeValue = child.nodeValue.split('\n').join(' ');
            child.nodeValue = child.nodeValue.replace(/(\s)+/g, '$1');
          }
        } else if (child.nodeType === 1) {
          clean(child);
        }
      }
    }

    // find all pre tags and replace contents with placeholder
    // we need this so that we can remove all indentation from html
    // to ease up parsing
    function substitutePreCodeTags (doc) {

      var pres = doc.querySelectorAll('pre'),
          presPH = [];

      for (var i = 0; i < pres.length; ++i) {

        if (pres[i].childElementCount === 1 && pres[i].firstChild.tagName.toLowerCase() === 'code') {
          var content = pres[i].firstChild.innerHTML.trim(),
              language = pres[i].firstChild.getAttribute('data-language') || '';

          // if data-language attribute is not defined, then we look for class language-*
          if (language === '') {
            var classes = pres[i].firstChild.className.split(' ');
            for (var c = 0; c < classes.length; ++c) {
              var matches = classes[c].match(/^language-(.+)$/);
              if (matches !== null) {
                language = matches[1];
                break;
              }
            }
          }

          // unescape html entities in content
          content = showdown.helper.unescapeHTMLEntities(content);

          presPH.push(content);
          pres[i].outerHTML = '<precode language="' + language + '" precodenum="' + i.toString() + '"></precode>';
        } else {
          presPH.push(pres[i].innerHTML);
          pres[i].innerHTML = '';
          pres[i].setAttribute('prenum', i.toString());
        }
      }
      return presPH;
    }

    return mdDoc;
  };

  /**
   * Set an option of this Converter instance
   * @param {string} key
   * @param {*} value
   */
  this.setOption = function (key, value) {
    options[key] = value;
  };

  /**
   * Get the option of this Converter instance
   * @param {string} key
   * @returns {*}
   */
  this.getOption = function (key) {
    return options[key];
  };

  /**
   * Get the options of this Converter instance
   * @returns {{}}
   */
  this.getOptions = function () {
    return options;
  };

  /**
   * Add extension to THIS converter
   * @param {{}} extension
   * @param {string} [name=null]
   */
  this.addExtension = function (extension, name) {
    name = name || null;
    _parseExtension(extension, name);
  };

  /**
   * Use a global registered extension with THIS converter
   * @param {string} extensionName Name of the previously registered extension
   */
  this.useExtension = function (extensionName) {
    _parseExtension(extensionName);
  };

  /**
   * Set the flavor THIS converter should use
   * @param {string} name
   */
  this.setFlavor = function (name) {
    if (!flavor.hasOwnProperty(name)) {
      throw Error(name + ' flavor was not found');
    }
    var preset = flavor[name];
    setConvFlavor = name;
    for (var option in preset) {
      if (preset.hasOwnProperty(option)) {
        options[option] = preset[option];
      }
    }
  };

  /**
   * Get the currently set flavor of this converter
   * @returns {string}
   */
  this.getFlavor = function () {
    return setConvFlavor;
  };

  /**
   * Remove an extension from THIS converter.
   * Note: This is a costly operation. It's better to initialize a new converter
   * and specify the extensions you wish to use
   * @param {Array} extension
   */
  this.removeExtension = function (extension) {
    if (!showdown.helper.isArray(extension)) {
      extension = [extension];
    }
    for (var a = 0; a < extension.length; ++a) {
      var ext = extension[a];
      for (var i = 0; i < langExtensions.length; ++i) {
        if (langExtensions[i] === ext) {
          langExtensions.splice(i, 1);
        }
      }
      for (var ii = 0; ii < outputModifiers.length; ++ii) {
        if (outputModifiers[ii] === ext) {
          outputModifiers.splice(ii, 1);
        }
      }
    }
  };

  /**
   * Get all extension of THIS converter
   * @returns {{language: Array, output: Array}}
   */
  this.getAllExtensions = function () {
    return {
      language: langExtensions,
      output: outputModifiers
    };
  };

  /**
   * Get the metadata of the previously parsed document
   * @param raw
   * @returns {string|{}}
   */
  this.getMetadata = function (raw) {
    if (raw) {
      return metadata.raw;
    } else {
      return metadata.parsed;
    }
  };

  /**
   * Get the metadata format of the previously parsed document
   * @returns {string}
   */
  this.getMetadataFormat = function () {
    return metadata.format;
  };

  /**
   * Private: set a single key, value metadata pair
   * @param {string} key
   * @param {string} value
   */
  this._setMetadataPair = function (key, value) {
    metadata.parsed[key] = value;
  };

  /**
   * Private: set metadata format
   * @param {string} format
   */
  this._setMetadataFormat = function (format) {
    metadata.format = format;
  };

  /**
   * Private: set metadata raw text
   * @param {string} raw
   */
  this._setMetadataRaw = function (raw) {
    metadata.raw = raw;
  };
};

/**
 * Turn Markdown link shortcuts into XHTML <a> tags.
 */
showdown.subParser('anchors', function (text, options, globals) {
  'use strict';

  text = globals.converter._dispatch('anchors.before', text, options, globals);

  var writeAnchorTag = function (wholeMatch, linkText, linkId, url, m5, m6, title) {
    if (showdown.helper.isUndefined(title)) {
      title = '';
    }
    linkId = linkId.toLowerCase();

    // Special case for explicit empty url
    if (wholeMatch.search(/\(<?\s*>? ?(['"].*['"])?\)$/m) > -1) {
      url = '';
    } else if (!url) {
      if (!linkId) {
        // lower-case and turn embedded newlines into spaces
        linkId = linkText.toLowerCase().replace(/ ?\n/g, ' ');
      }
      url = '#' + linkId;

      if (!showdown.helper.isUndefined(globals.gUrls[linkId])) {
        url = globals.gUrls[linkId];
        if (!showdown.helper.isUndefined(globals.gTitles[linkId])) {
          title = globals.gTitles[linkId];
        }
      } else {
        return wholeMatch;
      }
    }

    //url = showdown.helper.escapeCharacters(url, '*_', false); // replaced line to improve performance
    url = url.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);

    var result = '<a href="' + url + '"';

    if (title !== '' && title !== null) {
      title = title.replace(/"/g, '&quot;');
      //title = showdown.helper.escapeCharacters(title, '*_', false); // replaced line to improve performance
      title = title.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);
      result += ' title="' + title + '"';
    }

    // optionLinksInNewWindow only applies
    // to external links. Hash links (#) open in same page
    if (options.openLinksInNewWindow && !/^#/.test(url)) {
      // escaped _
      result += ' rel="noopener noreferrer" target="¨E95Eblank"';
    }

    result += '>' + linkText + '</a>';

    return result;
  };

  // First, handle reference-style links: [link text] [id]
  text = text.replace(/\[((?:\[[^\]]*]|[^\[\]])*)] ?(?:\n *)?\[(.*?)]()()()()/g, writeAnchorTag);

  // Next, inline-style links: [link text](url "optional title")
  // cases with crazy urls like ./image/cat1).png
  text = text.replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<([^>]*)>(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,
    writeAnchorTag);

  // normal cases
  text = text.replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,
    writeAnchorTag);

  // handle reference-style shortcuts: [link text]
  // These must come last in case you've also got [link test][1]
  // or [link test](/foo)
  text = text.replace(/\[([^\[\]]+)]()()()()()/g, writeAnchorTag);

  // Lastly handle GithubMentions if option is enabled
  if (options.ghMentions) {
    text = text.replace(/(^|\s)(\\)?(@([a-z\d]+(?:[a-z\d.-]+?[a-z\d]+)*))/gmi, function (wm, st, escape, mentions, username) {
      if (escape === '\\') {
        return st + mentions;
      }

      //check if options.ghMentionsLink is a string
      if (!showdown.helper.isString(options.ghMentionsLink)) {
        throw new Error('ghMentionsLink option must be a string');
      }
      var lnk = options.ghMentionsLink.replace(/\{u}/g, username),
          target = '';
      if (options.openLinksInNewWindow) {
        target = ' rel="noopener noreferrer" target="¨E95Eblank"';
      }
      return st + '<a href="' + lnk + '"' + target + '>' + mentions + '</a>';
    });
  }

  text = globals.converter._dispatch('anchors.after', text, options, globals);
  return text;
});

// url allowed chars [a-z\d_.~:/?#[]@!$&'()*+,;=-]

var simpleURLRegex  = /([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+?\.[^'">\s]+?)()(\1)?(?=\s|$)(?!["<>])/gi,
    simpleURLRegex2 = /([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+\.[^'">\s]+?)([.!?,()\[\]])?(\1)?(?=\s|$)(?!["<>])/gi,
    delimUrlRegex   = /()<(((https?|ftp|dict):\/\/|www\.)[^'">\s]+)()>()/gi,
    simpleMailRegex = /(^|\s)(?:mailto:)?([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)(?=$|\s)/gmi,
    delimMailRegex  = /<()(?:mailto:)?([-.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)>/gi,

    replaceLink = function (options) {
      'use strict';
      return function (wm, leadingMagicChars, link, m2, m3, trailingPunctuation, trailingMagicChars) {
        link = link.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);
        var lnkTxt = link,
            append = '',
            target = '',
            lmc    = leadingMagicChars || '',
            tmc    = trailingMagicChars || '';
        if (/^www\./i.test(link)) {
          link = link.replace(/^www\./i, 'http://www.');
        }
        if (options.excludeTrailingPunctuationFromURLs && trailingPunctuation) {
          append = trailingPunctuation;
        }
        if (options.openLinksInNewWindow) {
          target = ' rel="noopener noreferrer" target="¨E95Eblank"';
        }
        return lmc + '<a href="' + link + '"' + target + '>' + lnkTxt + '</a>' + append + tmc;
      };
    },

    replaceMail = function (options, globals) {
      'use strict';
      return function (wholeMatch, b, mail) {
        var href = 'mailto:';
        b = b || '';
        mail = showdown.subParser('unescapeSpecialChars')(mail, options, globals);
        if (options.encodeEmails) {
          href = showdown.helper.encodeEmailAddress(href + mail);
          mail = showdown.helper.encodeEmailAddress(mail);
        } else {
          href = href + mail;
        }
        return b + '<a href="' + href + '">' + mail + '</a>';
      };
    };

showdown.subParser('autoLinks', function (text, options, globals) {
  'use strict';

  text = globals.converter._dispatch('autoLinks.before', text, options, globals);

  text = text.replace(delimUrlRegex, replaceLink(options));
  text = text.replace(delimMailRegex, replaceMail(options, globals));

  text = globals.converter._dispatch('autoLinks.after', text, options, globals);

  return text;
});

showdown.subParser('simplifiedAutoLinks', function (text, options, globals) {
  'use strict';

  if (!options.simplifiedAutoLink) {
    return text;
  }

  text = globals.converter._dispatch('simplifiedAutoLinks.before', text, options, globals);

  if (options.excludeTrailingPunctuationFromURLs) {
    text = text.replace(simpleURLRegex2, replaceLink(options));
  } else {
    text = text.replace(simpleURLRegex, replaceLink(options));
  }
  text = text.replace(simpleMailRegex, replaceMail(options, globals));

  text = globals.converter._dispatch('simplifiedAutoLinks.after', text, options, globals);

  return text;
});

/**
 * These are all the transformations that form block-level
 * tags like paragraphs, headers, and list items.
 */
showdown.subParser('blockGamut', function (text, options, globals) {
  'use strict';

  text = globals.converter._dispatch('blockGamut.before', text, options, globals);

  // we parse blockquotes first so that we can have headings and hrs
  // inside blockquotes
  text = showdown.subParser('blockQuotes')(text, options, globals);
  text = showdown.subParser('headers')(text, options, globals);

  // Do Horizontal Rules:
  text = showdown.subParser('horizontalRule')(text, options, globals);

  text = showdown.subParser('lists')(text, options, globals);
  text = showdown.subParser('codeBlocks')(text, options, globals);
  text = showdown.subParser('tables')(text, options, globals);

  // We already ran _HashHTMLBlocks() before, in Markdown(), but that
  // was to escape raw HTML in the original Markdown source. This time,
  // we're escaping the markup we've just created, so that we don't wrap
  // <p> tags around block-level tags.
  text = showdown.subParser('hashHTMLBlocks')(text, options, globals);
  text = showdown.subParser('paragraphs')(text, options, globals);

  text = globals.converter._dispatch('blockGamut.after', text, options, globals);

  return text;
});

showdown.subParser('blockQuotes', function (text, options, globals) {
  'use strict';

  text = globals.converter._dispatch('blockQuotes.before', text, options, globals);

  // add a couple extra lines after the text and endtext mark
  text = text + '\n\n';

  var rgx = /(^ {0,3}>[ \t]?.+\n(.+\n)*\n*)+/gm;

  if (options.splitAdjacentBlockquotes) {
    rgx = /^ {0,3}>[\s\S]*?(?:\n\n)/gm;
  }

  text = text.replace(rgx, function (bq) {
    // attacklab: hack around Konqueror 3.5.4 bug:
    // "----------bug".replace(/^-/g,"") == "bug"
    bq = bq.replace(/^[ \t]*>[ \t]?/gm, ''); // trim one level of quoting

    // attacklab: clean up hack
    bq = bq.replace(/¨0/g, '');

    bq = bq.replace(/^[ \t]+$/gm, ''); // trim whitespace-only lines
    bq = showdown.subParser('githubCodeBlocks')(bq, options, globals);
    bq = showdown.subParser('blockGamut')(bq, options, globals); // recurse

    bq = bq.replace(/(^|\n)/g, '$1  ');
    // These leading spaces screw with <pre> content, so we need to fix that:
    bq = bq.replace(/(\s*<pre>[^\r]+?<\/pre>)/gm, function (wholeMatch, m1) {
      var pre = m1;
      // attacklab: hack around Konqueror 3.5.4 bug:
      pre = pre.replace(/^  /mg, '¨0');
      pre = pre.replace(/¨0/g, '');
      return pre;
    });

    return showdown.subParser('hashBlock')('<blockquote>\n' + bq + '\n</blockquote>', options, globals);
  });

  text = globals.converter._dispatch('blockQuotes.after', text, options, globals);
  return text;
});

/**
 * Process Markdown `<pre><code>` blocks.
 */
showdown.subParser('codeBlocks', function (text, options, globals) {
  'use strict';

  text = globals.converter._dispatch('codeBlocks.before', text, options, globals);

  // sentinel workarounds for lack of \A and \Z, safari\khtml bug
  text += '¨0';

  var pattern = /(?:\n\n|^)((?:(?:[ ]{4}|\t).*\n+)+)(\n*[ ]{0,3}[^ \t\n]|(?=¨0))/g;
  text = text.replace(pattern, function (wholeMatch, m1, m2) {
    var codeblock = m1,
        nextChar = m2,
        end = '\n';

    codeblock = showdown.subParser('outdent')(codeblock, options, globals);
    codeblock = showdown.subParser('encodeCode')(codeblock, options, globals);
    codeblock = showdown.subParser('detab')(codeblock, options, globals);
    codeblock = codeblock.replace(/^\n+/g, ''); // trim leading newlines
    codeblock = codeblock.replace(/\n+$/g, ''); // trim trailing newlines

    if (options.omitExtraWLInCodeBlocks) {
      end = '';
    }

    codeblock = '<pre><code>' + codeblock + end + '</code></pre>';

    return showdown.subParser('hashBlock')(codeblock, options, globals) + nextChar;
  });

  // strip sentinel
  text = text.replace(/¨0/, '');

  text = globals.converter._dispatch('codeBlocks.after', text, options, globals);
  return text;
});

/**
 *
 *   *  Backtick quotes are used for <code></code> spans.
 *
 *   *  You can use multiple backticks as the delimiters if you want to
 *     include literal backticks in the code span. So, this input:
 *
 *         Just type ``foo `bar` baz`` at the prompt.
 *
 *       Will translate to:
 *
 *         <p>Just type <code>foo `bar` baz</code> at the prompt.</p>
 *
 *    There's no arbitrary limit to the number of backticks you
 *    can use as delimters. If you need three consecutive backticks
 *    in your code, use four for delimiters, etc.
 *
 *  *  You can use spaces to get literal backticks at the edges:
 *
 *         ... type `` `bar` `` ...
 *
 *       Turns to:
 *
 *         ... type <code>`bar`</code> ...
 */
showdown.subParser('codeSpans', function (text, options, globals) {
  'use strict';

  text = globals.converter._dispatch('codeSpans.before', text, options, globals);

  if (typeof (text) === 'undefined') {
    text = '';
  }
  text = text.replace(/(^|[^\\])(`+)([^\r]*?[^`])\2(?!`)/gm,
    function (wholeMatch, m1, m2, m3) {
      var c = m3;
      c = c.replace(/^([ \t]*)/g, '');	// leading whitespace
      c = c.replace(/[ \t]*$/g, '');	// trailing whitespace
      c = showdown.subParser('encodeCode')(c, options, globals);
      c = m1 + '<code>' + c + '</code>';
      c = showdown.subParser('hashHTMLSpans')(c, options, globals);
      return c;
    }
  );

  text = globals.converter._dispatch('codeSpans.after', text, options, globals);
  return text;
});

/**
 * Create a full HTML document from the processed markdown
 */
showdown.subParser('completeHTMLDocument', function (text, options, globals) {
  'use strict';

  if (!options.completeHTMLDocument) {
    return text;
  }

  text = globals.converter._dispatch('completeHTMLDocument.before', text, options, globals);

  var doctype = 'html',
      doctypeParsed = '<!DOCTYPE HTML>\n',
      title = '',
      charset = '<meta charset="utf-8">\n',
      lang = '',
      metadata = '';

  if (typeof globals.metadata.parsed.doctype !== 'undefined') {
    doctypeParsed = '<!DOCTYPE ' +  globals.metadata.parsed.doctype + '>\n';
    doctype = globals.metadata.parsed.doctype.toString().toLowerCase();
    if (doctype === 'html' || doctype === 'html5') {
      charset = '<meta charset="utf-8">';
    }
  }

  for (var meta in globals.metadata.parsed) {
    if (globals.metadata.parsed.hasOwnProperty(meta)) {
      switch (meta.toLowerCase()) {
        case 'doctype':
          break;

        case 'title':
          title = '<title>' +  globals.metadata.parsed.title + '</title>\n';
          break;

        case 'charset':
          if (doctype === 'html' || doctype === 'html5') {
            charset = '<meta charset="' + globals.metadata.parsed.charset + '">\n';
          } else {
            charset = '<meta name="charset" content="' + globals.metadata.parsed.charset + '">\n';
          }
          break;

        case 'language':
        case 'lang':
          lang = ' lang="' + globals.metadata.parsed[meta] + '"';
          metadata += '<meta name="' + meta + '" content="' + globals.metadata.parsed[meta] + '">\n';
          break;

        default:
          metadata += '<meta name="' + meta + '" content="' + globals.metadata.parsed[meta] + '">\n';
      }
    }
  }

  text = doctypeParsed + '<html' + lang + '>\n<head>\n' + title + charset + metadata + '</head>\n<body>\n' + text.trim() + '\n</body>\n</html>';

  text = globals.converter._dispatch('completeHTMLDocument.after', text, options, globals);
  return text;
});

/**
 * Convert all tabs to spaces
 */
showdown.subParser('detab', function (text, options, globals) {
  'use strict';
  text = globals.converter._dispatch('detab.before', text, options, globals);

  // expand first n-1 tabs
  text = text.replace(/\t(?=\t)/g, '    '); // g_tab_width

  // replace the nth with two sentinels
  text = text.replace(/\t/g, '¨A¨B');

  // use the sentinel to anchor our regex so it doesn't explode
  text = text.replace(/¨B(.+?)¨A/g, function (wholeMatch, m1) {
    var leadingText = m1,
        numSpaces = 4 - leadingText.length % 4;  // g_tab_width

    // there *must* be a better way to do this:
    for (var i = 0; i < numSpaces; i++) {
      leadingText += ' ';
    }

    return leadingText;
  });

  // clean up sentinels
  text = text.replace(/¨A/g, '    ');  // g_tab_width
  text = text.replace(/¨B/g, '');

  text = globals.converter._dispatch('detab.after', text, options, globals);
  return text;
});

showdown.subParser('ellipsis', function (text, options, globals) {
  'use strict';

  if (!options.ellipsis) {
    return text;
  }

  text = globals.converter._dispatch('ellipsis.before', text, options, globals);

  text = text.replace(/\.\.\./g, '…');

  text = globals.converter._dispatch('ellipsis.after', text, options, globals);

  return text;
});

/**
 * Turn emoji codes into emojis
 *
 * List of supported emojis: https://github.com/showdownjs/showdown/wiki/Emojis
 */
showdown.subParser('emoji', function (text, options, globals) {
  'use strict';

  if (!options.emoji) {
    return text;
  }

  text = globals.converter._dispatch('emoji.before', text, options, globals);

  var emojiRgx = /:([\S]+?):/g;

  text = text.replace(emojiRgx, function (wm, emojiCode) {
    if (showdown.helper.emojis.hasOwnProperty(emojiCode)) {
      return showdown.helper.emojis[emojiCode];
    }
    return wm;
  });

  text = globals.converter._dispatch('emoji.after', text, options, globals);

  return text;
});

/**
 * Smart processing for ampersands and angle brackets that need to be encoded.
 */
showdown.subParser('encodeAmpsAndAngles', function (text, options, globals) {
  'use strict';
  text = globals.converter._dispatch('encodeAmpsAndAngles.before', text, options, globals);

  // Ampersand-encoding based entirely on Nat Irons's Amputator MT plugin:
  // http://bumppo.net/projects/amputator/
  text = text.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\w+);)/g, '&amp;');

  // Encode naked <'s
  text = text.replace(/<(?![a-z\/?$!])/gi, '&lt;');

  // Encode <
  text = text.replace(/</g, '&lt;');

  // Encode >
  text = text.replace(/>/g, '&gt;');

  text = globals.converter._dispatch('encodeAmpsAndAngles.after', text, options, globals);
  return text;
});

/**
 * Returns the string, with after processing the following backslash escape sequences.
 *
 * attacklab: The polite way to do this is with the new escapeCharacters() function:
 *
 *    text = escapeCharacters(text,"\\",true);
 *    text = escapeCharacters(text,"`*_{}[]()>#+-.!",true);
 *
 * ...but we're sidestepping its use of the (slow) RegExp constructor
 * as an optimization for Firefox.  This function gets called a LOT.
 */
showdown.subParser('encodeBackslashEscapes', function (text, options, globals) {
  'use strict';
  text = globals.converter._dispatch('encodeBackslashEscapes.before', text, options, globals);

  text = text.replace(/\\(\\)/g, showdown.helper.escapeCharactersCallback);
  text = text.replace(/\\([`*_{}\[\]()>#+.!~=|:-])/g, showdown.helper.escapeCharactersCallback);

  text = globals.converter._dispatch('encodeBackslashEscapes.after', text, options, globals);
  return text;
});

/**
 * Encode/escape certain characters inside Markdown code runs.
 * The point is that in code, these characters are literals,
 * and lose their special Markdown meanings.
 */
showdown.subParser('encodeCode', function (text, options, globals) {
  'use strict';

  text = globals.converter._dispatch('encodeCode.before', text, options, globals);

  // Encode all ampersands; HTML entities are not
  // entities within a Markdown code span.
  text = text
    .replace(/&/g, '&amp;')
  // Do the angle bracket song and dance:
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
  // Now, escape characters that are magic in Markdown:
    .replace(/([*_{}\[\]\\=~-])/g, showdown.helper.escapeCharactersCallback);

  text = globals.converter._dispatch('encodeCode.after', text, options, globals);
  return text;
});

/**
 * Within tags -- meaning between < and > -- encode [\ ` * _ ~ =] so they
 * don't conflict with their use in Markdown for code, italics and strong.
 */
showdown.subParser('escapeSpecialCharsWithinTagAttributes', function (text, options, globals) {
  'use strict';
  text = globals.converter._dispatch('escapeSpecialCharsWithinTagAttributes.before', text, options, globals);

  // Build a regex to find HTML tags.
  var tags     = /<\/?[a-z\d_:-]+(?:[\s]+[\s\S]+?)?>/gi,
      comments = /<!(--(?:(?:[^>-]|-[^>])(?:[^-]|-[^-])*)--)>/gi;

  text = text.replace(tags, function (wholeMatch) {
    return wholeMatch
      .replace(/(.)<\/?code>(?=.)/g, '$1`')
      .replace(/([\\`*_~=|])/g, showdown.helper.escapeCharactersCallback);
  });

  text = text.replace(comments, function (wholeMatch) {
    return wholeMatch
      .replace(/([\\`*_~=|])/g, showdown.helper.escapeCharactersCallback);
  });

  text = globals.converter._dispatch('escapeSpecialCharsWithinTagAttributes.after', text, options, globals);
  return text;
});

/**
 * Handle github codeblocks prior to running HashHTML so that
 * HTML contained within the codeblock gets escaped properly
 * Example:
 * ```ruby
 *     def hello_world(x)
 *       puts "Hello, #{x}"
 *     end
 * ```
 */
showdown.subParser('githubCodeBlocks', function (text, options, globals) {
  'use strict';

  // early exit if option is not enabled
  if (!options.ghCodeBlocks) {
    return text;
  }

  text = globals.converter._dispatch('githubCodeBlocks.before', text, options, globals);

  text += '¨0';

  text = text.replace(/(?:^|\n)(?: {0,3})(```+|~~~+)(?: *)([^\s`~]*)\n([\s\S]*?)\n(?: {0,3})\1/g, function (wholeMatch, delim, language, codeblock) {
    var end = (options.omitExtraWLInCodeBlocks) ? '' : '\n';

    // First parse the github code block
    codeblock = showdown.subParser('encodeCode')(codeblock, options, globals);
    codeblock = showdown.subParser('detab')(codeblock, options, globals);
    codeblock = codeblock.replace(/^\n+/g, ''); // trim leading newlines
    codeblock = codeblock.replace(/\n+$/g, ''); // trim trailing whitespace

    codeblock = '<pre><code' + (language ? ' class="' + language + ' language-' + language + '"' : '') + '>' + codeblock + end + '</code></pre>';

    codeblock = showdown.subParser('hashBlock')(codeblock, options, globals);

    // Since GHCodeblocks can be false positives, we need to
    // store the primitive text and the parsed text in a global var,
    // and then return a token
    return '\n\n¨G' + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + 'G\n\n';
  });

  // attacklab: strip sentinel
  text = text.replace(/¨0/, '');

  return globals.converter._dispatch('githubCodeBlocks.after', text, options, globals);
});

showdown.subParser('hashBlock', function (text, options, globals) {
  'use strict';
  text = globals.converter._dispatch('hashBlock.before', text, options, globals);
  text = text.replace(/(^\n+|\n+$)/g, '');
  text = '\n\n¨K' + (globals.gHtmlBlocks.push(text) - 1) + 'K\n\n';
  text = globals.converter._dispatch('hashBlock.after', text, options, globals);
  return text;
});

/**
 * Hash and escape <code> elements that should not be parsed as markdown
 */
showdown.subParser('hashCodeTags', function (text, options, globals) {
  'use strict';
  text = globals.converter._dispatch('hashCodeTags.before', text, options, globals);

  var repFunc = function (wholeMatch, match, left, right) {
    var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right;
    return '¨C' + (globals.gHtmlSpans.push(codeblock) - 1) + 'C';
  };

  // Hash naked <code>
  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '<code\\b[^>]*>', '</code>', 'gim');

  text = globals.converter._dispatch('hashCodeTags.after', text, options, globals);
  return text;
});

showdown.subParser('hashElement', function (text, options, globals) {
  'use strict';

  return function (wholeMatch, m1) {
    var blockText = m1;

    // Undo double lines
    blockText = blockText.replace(/\n\n/g, '\n');
    blockText = blockText.replace(/^\n/, '');

    // strip trailing blank lines
    blockText = blockText.replace(/\n+$/g, '');

    // Replace the element text with a marker ("¨KxK" where x is its key)
    blockText = '\n\n¨K' + (globals.gHtmlBlocks.push(blockText) - 1) + 'K\n\n';

    return blockText;
  };
});

showdown.subParser('hashHTMLBlocks', function (text, options, globals) {
  'use strict';
  text = globals.converter._dispatch('hashHTMLBlocks.before', text, options, globals);

  var blockTags = [
        'pre',
        'div',
        'h1',
        'h2',
        'h3',
        'h4',
        'h5',
        'h6',
        'blockquote',
        'table',
        'dl',
        'ol',
        'ul',
        'script',
        'noscript',
        'form',
        'fieldset',
        'iframe',
        'math',
        'style',
        'section',
        'header',
        'footer',
        'nav',
        'article',
        'aside',
        'address',
        'audio',
        'canvas',
        'figure',
        'hgroup',
        'output',
        'video',
        'p'
      ],
      repFunc = function (wholeMatch, match, left, right) {
        var txt = wholeMatch;
        // check if this html element is marked as markdown
        // if so, it's contents should be parsed as markdown
        if (left.search(/\bmarkdown\b/) !== -1) {
          txt = left + globals.converter.makeHtml(match) + right;
        }
        return '\n\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\n\n';
      };

  if (options.backslashEscapesHTMLTags) {
    // encode backslash escaped HTML tags
    text = text.replace(/\\<(\/?[^>]+?)>/g, function (wm, inside) {
      return '&lt;' + inside + '&gt;';
    });
  }

  // hash HTML Blocks
  for (var i = 0; i < blockTags.length; ++i) {

    var opTagPos,
        rgx1     = new RegExp('^ {0,3}(<' + blockTags[i] + '\\b[^>]*>)', 'im'),
        patLeft  = '<' + blockTags[i] + '\\b[^>]*>',
        patRight = '</' + blockTags[i] + '>';
    // 1. Look for the first position of the first opening HTML tag in the text
    while ((opTagPos = showdown.helper.regexIndexOf(text, rgx1)) !== -1) {

      // if the HTML tag is \ escaped, we need to escape it and break


      //2. Split the text in that position
      var subTexts = showdown.helper.splitAtIndex(text, opTagPos),
          //3. Match recursively
          newSubText1 = showdown.helper.replaceRecursiveRegExp(subTexts[1], repFunc, patLeft, patRight, 'im');

      // prevent an infinite loop
      if (newSubText1 === subTexts[1]) {
        break;
      }
      text = subTexts[0].concat(newSubText1);
    }
  }
  // HR SPECIAL CASE
  text = text.replace(/(\n {0,3}(<(hr)\b([^<>])*?\/?>)[ \t]*(?=\n{2,}))/g,
    showdown.subParser('hashElement')(text, options, globals));

  // Special case for standalone HTML comments
  text = showdown.helper.replaceRecursiveRegExp(text, function (txt) {
    return '\n\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\n\n';
  }, '^ {0,3}<!--', '-->', 'gm');

  // PHP and ASP-style processor instructions (<?...?> and <%...%>)
  text = text.replace(/(?:\n\n)( {0,3}(?:<([?%])[^\r]*?\2>)[ \t]*(?=\n{2,}))/g,
    showdown.subParser('hashElement')(text, options, globals));

  text = globals.converter._dispatch('hashHTMLBlocks.after', text, options, globals);
  return text;
});

/**
 * Hash span elements that should not be parsed as markdown
 */
showdown.subParser('hashHTMLSpans', function (text, options, globals) {
  'use strict';
  text = globals.converter._dispatch('hashHTMLSpans.before', text, options, globals);

  function hashHTMLSpan (html) {
    return '¨C' + (globals.gHtmlSpans.push(html) - 1) + 'C';
  }

  // Hash Self Closing tags
  text = text.replace(/<[^>]+?\/>/gi, function (wm) {
    return hashHTMLSpan(wm);
  });

  // Hash tags without properties
  text = text.replace(/<([^>]+?)>[\s\S]*?<\/\1>/g, function (wm) {
    return hashHTMLSpan(wm);
  });

  // Hash tags with properties
  text = text.replace(/<([^>]+?)\s[^>]+?>[\s\S]*?<\/\1>/g, function (wm) {
    return hashHTMLSpan(wm);
  });

  // Hash self closing tags without />
  text = text.replace(/<[^>]+?>/gi, function (wm) {
    return hashHTMLSpan(wm);
  });

  /*showdown.helper.matchRecursiveRegExp(text, '<code\\b[^>]*>', '</code>', 'gi');*/

  text = globals.converter._dispatch('hashHTMLSpans.after', text, options, globals);
  return text;
});

/**
 * Unhash HTML spans
 */
showdown.subParser('unhashHTMLSpans', function (text, options, globals) {
  'use strict';
  text = globals.converter._dispatch('unhashHTMLSpans.before', text, options, globals);

  for (var i = 0; i < globals.gHtmlSpans.length; ++i) {
    var repText = globals.gHtmlSpans[i],
        // limiter to prevent infinite loop (assume 10 as limit for recurse)
        limit = 0;

    while (/¨C(\d+)C/.test(repText)) {
      var num = RegExp.$1;
      repText = repText.replace('¨C' + num + 'C', globals.gHtmlSpans[num]);
      if (limit === 10) {
        console.error('maximum nesting of 10 spans reached!!!');
        break;
      }
      ++limit;
    }
    text = text.replace('¨C' + i + 'C', repText);
  }

  text = globals.converter._dispatch('unhashHTMLSpans.after', text, options, globals);
  return text;
});

/**
 * Hash and escape <pre><code> elements that should not be parsed as markdown
 */
showdown.subParser('hashPreCodeTags', function (text, options, globals) {
  'use strict';
  text = globals.converter._dispatch('hashPreCodeTags.before', text, options, globals);

  var repFunc = function (wholeMatch, match, left, right) {
    // encode html entities
    var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right;
    return '\n\n¨G' + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + 'G\n\n';
  };

  // Hash <pre><code>
  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '^ {0,3}<pre\\b[^>]*>\\s*<code\\b[^>]*>', '^ {0,3}</code>\\s*</pre>', 'gim');

  text = globals.converter._dispatch('hashPreCodeTags.after', text, options, globals);
  return text;
});

showdown.subParser('headers', function (text, options, globals) {
  'use strict';

  text = globals.converter._dispatch('headers.before', text, options, globals);

  var headerLevelStart = (isNaN(parseInt(options.headerLevelStart))) ? 1 : parseInt(options.headerLevelStart),

      // Set text-style headers:
      //	Header 1
      //	========
      //
      //	Header 2
      //	--------
      //
      setextRegexH1 = (options.smoothLivePreview) ? /^(.+)[ \t]*\n={2,}[ \t]*\n+/gm : /^(.+)[ \t]*\n=+[ \t]*\n+/gm,
      setextRegexH2 = (options.smoothLivePreview) ? /^(.+)[ \t]*\n-{2,}[ \t]*\n+/gm : /^(.+)[ \t]*\n-+[ \t]*\n+/gm;

  text = text.replace(setextRegexH1, function (wholeMatch, m1) {

    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),
        hID = (options.noHeaderId) ? '' : ' id="' + headerId(m1) + '"',
        hLevel = headerLevelStart,
        hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';
    return showdown.subParser('hashBlock')(hashBlock, options, globals);
  });

  text = text.replace(setextRegexH2, function (matchFound, m1) {
    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),
        hID = (options.noHeaderId) ? '' : ' id="' + headerId(m1) + '"',
        hLevel = headerLevelStart + 1,
        hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';
    return showdown.subParser('hashBlock')(hashBlock, options, globals);
  });

  // atx-style headers:
  //  # Header 1
  //  ## Header 2
  //  ## Header 2 with closing hashes ##
  //  ...
  //  ###### Header 6
  //
  var atxStyle = (options.requireSpaceBeforeHeadingText) ? /^(#{1,6})[ \t]+(.+?)[ \t]*#*\n+/gm : /^(#{1,6})[ \t]*(.+?)[ \t]*#*\n+/gm;

  text = text.replace(atxStyle, function (wholeMatch, m1, m2) {
    var hText = m2;
    if (options.customizedHeaderId) {
      hText = m2.replace(/\s?\{([^{]+?)}\s*$/, '');
    }

    var span = showdown.subParser('spanGamut')(hText, options, globals),
        hID = (options.noHeaderId) ? '' : ' id="' + headerId(m2) + '"',
        hLevel = headerLevelStart - 1 + m1.length,
        header = '<h' + hLevel + hID + '>' + span + '</h' + hLevel + '>';

    return showdown.subParser('hashBlock')(header, options, globals);
  });

  function headerId (m) {
    var title,
        prefix;

    // It is separate from other options to allow combining prefix and customized
    if (options.customizedHeaderId) {
      var match = m.match(/\{([^{]+?)}\s*$/);
      if (match && match[1]) {
        m = match[1];
      }
    }

    title = m;

    // Prefix id to prevent causing inadvertent pre-existing style matches.
    if (showdown.helper.isString(options.prefixHeaderId)) {
      prefix = options.prefixHeaderId;
    } else if (options.prefixHeaderId === true) {
      prefix = 'section-';
    } else {
      prefix = '';
    }

    if (!options.rawPrefixHeaderId) {
      title = prefix + title;
    }

    if (options.ghCompatibleHeaderId) {
      title = title
        .replace(/ /g, '-')
        // replace previously escaped chars (&, ¨ and $)
        .replace(/&amp;/g, '')
        .replace(/¨T/g, '')
        .replace(/¨D/g, '')
        // replace rest of the chars (&~$ are repeated as they might have been escaped)
        // borrowed from github's redcarpet (some they should produce similar results)
        .replace(/[&+$,\/:;=?@"#{}|^¨~\[\]`\\*)(%.!'<>]/g, '')
        .toLowerCase();
    } else if (options.rawHeaderId) {
      title = title
        .replace(/ /g, '-')
        // replace previously escaped chars (&, ¨ and $)
        .replace(/&amp;/g, '&')
        .replace(/¨T/g, '¨')
        .replace(/¨D/g, '$')
        // replace " and '
        .replace(/["']/g, '-')
        .toLowerCase();
    } else {
      title = title
        .replace(/[^\w]/g, '')
        .toLowerCase();
    }

    if (options.rawPrefixHeaderId) {
      title = prefix + title;
    }

    if (globals.hashLinkCounts[title]) {
      title = title + '-' + (globals.hashLinkCounts[title]++);
    } else {
      globals.hashLinkCounts[title] = 1;
    }
    return title;
  }

  text = globals.converter._dispatch('headers.after', text, options, globals);
  return text;
});

/**
 * Turn Markdown link shortcuts into XHTML <a> tags.
 */
showdown.subParser('horizontalRule', function (text, options, globals) {
  'use strict';
  text = globals.converter._dispatch('horizontalRule.before', text, options, globals);

  var key = showdown.subParser('hashBlock')('<hr />', options, globals);
  text = text.replace(/^ {0,2}( ?-){3,}[ \t]*$/gm, key);
  text = text.replace(/^ {0,2}( ?\*){3,}[ \t]*$/gm, key);
  text = text.replace(/^ {0,2}( ?_){3,}[ \t]*$/gm, key);

  text = globals.converter._dispatch('horizontalRule.after', text, options, globals);
  return text;
});

/**
 * Turn Markdown image shortcuts into <img> tags.
 */
showdown.subParser('images', function (text, options, globals) {
  'use strict';

  text = globals.converter._dispatch('images.before', text, options, globals);

  var inlineRegExp      = /!\[([^\]]*?)][ \t]*()\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,
      crazyRegExp       = /!\[([^\]]*?)][ \t]*()\([ \t]?<([^>]*)>(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(?:(["'])([^"]*?)\6))?[ \t]?\)/g,
      base64RegExp      = /!\[([^\]]*?)][ \t]*()\([ \t]?<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,
      referenceRegExp   = /!\[([^\]]*?)] ?(?:\n *)?\[([\s\S]*?)]()()()()()/g,
      refShortcutRegExp = /!\[([^\[\]]+)]()()()()()/g;

  function writeImageTagBase64 (wholeMatch, altText, linkId, url, width, height, m5, title) {
    url = url.replace(/\s/g, '');
    return writeImageTag (wholeMatch, altText, linkId, url, width, height, m5, title);
  }

  function writeImageTag (wholeMatch, altText, linkId, url, width, height, m5, title) {

    var gUrls   = globals.gUrls,
        gTitles = globals.gTitles,
        gDims   = globals.gDimensions;

    linkId = linkId.toLowerCase();

    if (!title) {
      title = '';
    }
    // Special case for explicit empty url
    if (wholeMatch.search(/\(<?\s*>? ?(['"].*['"])?\)$/m) > -1) {
      url = '';

    } else if (url === '' || url === null) {
      if (linkId === '' || linkId === null) {
        // lower-case and turn embedded newlines into spaces
        linkId = altText.toLowerCase().replace(/ ?\n/g, ' ');
      }
      url = '#' + linkId;

      if (!showdown.helper.isUndefined(gUrls[linkId])) {
        url = gUrls[linkId];
        if (!showdown.helper.isUndefined(gTitles[linkId])) {
          title = gTitles[linkId];
        }
        if (!showdown.helper.isUndefined(gDims[linkId])) {
          width = gDims[linkId].width;
          height = gDims[linkId].height;
        }
      } else {
        return wholeMatch;
      }
    }

    altText = altText
      .replace(/"/g, '&quot;')
    //altText = showdown.helper.escapeCharacters(altText, '*_', false);
      .replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);
    //url = showdown.helper.escapeCharacters(url, '*_', false);
    url = url.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);
    var result = '<img src="' + url + '" alt="' + altText + '"';

    if (title && showdown.helper.isString(title)) {
      title = title
        .replace(/"/g, '&quot;')
      //title = showdown.helper.escapeCharacters(title, '*_', false);
        .replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);
      result += ' title="' + title + '"';
    }

    if (width && height) {
      width  = (width === '*') ? 'auto' : width;
      height = (height === '*') ? 'auto' : height;

      result += ' width="' + width + '"';
      result += ' height="' + height + '"';
    }

    result += ' />';

    return result;
  }

  // First, handle reference-style labeled images: ![alt text][id]
  text = text.replace(referenceRegExp, writeImageTag);

  // Next, handle inline images:  ![alt text](url =<width>x<height> "optional title")

  // base64 encoded images
  text = text.replace(base64RegExp, writeImageTagBase64);

  // cases with crazy urls like ./image/cat1).png
  text = text.replace(crazyRegExp, writeImageTag);

  // normal cases
  text = text.replace(inlineRegExp, writeImageTag);

  // handle reference-style shortcuts: ![img text]
  text = text.replace(refShortcutRegExp, writeImageTag);

  text = globals.converter._dispatch('images.after', text, options, globals);
  return text;
});

showdown.subParser('italicsAndBold', function (text, options, globals) {
  'use strict';

  text = globals.converter._dispatch('italicsAndBold.before', text, options, globals);

  // it's faster to have 3 separate regexes for each case than have just one
  // because of backtracing, in some cases, it could lead to an exponential effect
  // called "catastrophic backtrace". Ominous!

  function parseInside (txt, left, right) {
    /*
    if (options.simplifiedAutoLink) {
      txt = showdown.subParser('simplifiedAutoLinks')(txt, options, globals);
    }
    */
    return left + txt + right;
  }

  // Parse underscores
  if (options.literalMidWordUnderscores) {
    text = text.replace(/\b___(\S[\s\S]*?)___\b/g, function (wm, txt) {
      return parseInside (txt, '<strong><em>', '</em></strong>');
    });
    text = text.replace(/\b__(\S[\s\S]*?)__\b/g, function (wm, txt) {
      return parseInside (txt, '<strong>', '</strong>');
    });
    text = text.replace(/\b_(\S[\s\S]*?)_\b/g, function (wm, txt) {
      return parseInside (txt, '<em>', '</em>');
    });
  } else {
    text = text.replace(/___(\S[\s\S]*?)___/g, function (wm, m) {
      return (/\S$/.test(m)) ? parseInside (m, '<strong><em>', '</em></strong>') : wm;
    });
    text = text.replace(/__(\S[\s\S]*?)__/g, function (wm, m) {
      return (/\S$/.test(m)) ? parseInside (m, '<strong>', '</strong>') : wm;
    });
    text = text.replace(/_([^\s_][\s\S]*?)_/g, function (wm, m) {
      // !/^_[^_]/.test(m) - test if it doesn't start with __ (since it seems redundant, we removed it)
      return (/\S$/.test(m)) ? parseInside (m, '<em>', '</em>') : wm;
    });
  }

  // Now parse asterisks
  if (options.literalMidWordAsterisks) {
    text = text.replace(/([^*]|^)\B\*\*\*(\S[\s\S]*?)\*\*\*\B(?!\*)/g, function (wm, lead, txt) {
      return parseInside (txt, lead + '<strong><em>', '</em></strong>');
    });
    text = text.replace(/([^*]|^)\B\*\*(\S[\s\S]*?)\*\*\B(?!\*)/g, function (wm, lead, txt) {
      return parseInside (txt, lead + '<strong>', '</strong>');
    });
    text = text.replace(/([^*]|^)\B\*(\S[\s\S]*?)\*\B(?!\*)/g, function (wm, lead, txt) {
      return parseInside (txt, lead + '<em>', '</em>');
    });
  } else {
    text = text.replace(/\*\*\*(\S[\s\S]*?)\*\*\*/g, function (wm, m) {
      return (/\S$/.test(m)) ? parseInside (m, '<strong><em>', '</em></strong>') : wm;
    });
    text = text.replace(/\*\*(\S[\s\S]*?)\*\*/g, function (wm, m) {
      return (/\S$/.test(m)) ? parseInside (m, '<strong>', '</strong>') : wm;
    });
    text = text.replace(/\*([^\s*][\s\S]*?)\*/g, function (wm, m) {
      // !/^\*[^*]/.test(m) - test if it doesn't start with ** (since it seems redundant, we removed it)
      return (/\S$/.test(m)) ? parseInside (m, '<em>', '</em>') : wm;
    });
  }


  text = globals.converter._dispatch('italicsAndBold.after', text, options, globals);
  return text;
});

/**
 * Form HTML ordered (numbered) and unordered (bulleted) lists.
 */
showdown.subParser('lists', function (text, options, globals) {
  'use strict';

  /**
   * Process the contents of a single ordered or unordered list, splitting it
   * into individual list items.
   * @param {string} listStr
   * @param {boolean} trimTrailing
   * @returns {string}
   */
  function processListItems (listStr, trimTrailing) {
    // The $g_list_level global keeps track of when we're inside a list.
    // Each time we enter a list, we increment it; when we leave a list,
    // we decrement. If it's zero, we're not in a list anymore.
    //
    // We do this because when we're not inside a list, we want to treat
    // something like this:
    //
    //    I recommend upgrading to version
    //    8. Oops, now this line is treated
    //    as a sub-list.
    //
    // As a single paragraph, despite the fact that the second line starts
    // with a digit-period-space sequence.
    //
    // Whereas when we're inside a list (or sub-list), that line will be
    // treated as the start of a sub-list. What a kludge, huh? This is
    // an aspect of Markdown's syntax that's hard to parse perfectly
    // without resorting to mind-reading. Perhaps the solution is to
    // change the syntax rules such that sub-lists must start with a
    // starting cardinal number; e.g. "1." or "a.".
    globals.gListLevel++;

    // trim trailing blank lines:
    listStr = listStr.replace(/\n{2,}$/, '\n');

    // attacklab: add sentinel to emulate \z
    listStr += '¨0';

    var rgx = /(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0| {0,3}([*+-]|\d+[.])[ \t]+))/gm,
        isParagraphed = (/\n[ \t]*\n(?!¨0)/.test(listStr));

    // Since version 1.5, nesting sublists requires 4 spaces (or 1 tab) indentation,
    // which is a syntax breaking change
    // activating this option reverts to old behavior
    if (options.disableForced4SpacesIndentedSublists) {
      rgx = /(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0|\2([*+-]|\d+[.])[ \t]+))/gm;
    }

    listStr = listStr.replace(rgx, function (wholeMatch, m1, m2, m3, m4, taskbtn, checked) {
      checked = (checked && checked.trim() !== '');

      var item = showdown.subParser('outdent')(m4, options, globals),
          bulletStyle = '';

      // Support for github tasklists
      if (taskbtn && options.tasklists) {
        bulletStyle = ' class="task-list-item" style="list-style-type: none;"';
        item = item.replace(/^[ \t]*\[(x|X| )?]/m, function () {
          var otp = '<input type="checkbox" disabled style="margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;"';
          if (checked) {
            otp += ' checked';
          }
          otp += '>';
          return otp;
        });
      }

      // ISSUE #312
      // This input: - - - a
      // causes trouble to the parser, since it interprets it as:
      // <ul><li><li><li>a</li></li></li></ul>
      // instead of:
      // <ul><li>- - a</li></ul>
      // So, to prevent it, we will put a marker (¨A)in the beginning of the line
      // Kind of hackish/monkey patching, but seems more effective than overcomplicating the list parser
      item = item.replace(/^([-*+]|\d\.)[ \t]+[\S\n ]*/g, function (wm2) {
        return '¨A' + wm2;
      });

      // m1 - Leading line or
      // Has a double return (multi paragraph) or
      // Has sublist
      if (m1 || (item.search(/\n{2,}/) > -1)) {
        item = showdown.subParser('githubCodeBlocks')(item, options, globals);
        item = showdown.subParser('blockGamut')(item, options, globals);
      } else {
        // Recursion for sub-lists:
        item = showdown.subParser('lists')(item, options, globals);
        item = item.replace(/\n$/, ''); // chomp(item)
        item = showdown.subParser('hashHTMLBlocks')(item, options, globals);

        // Colapse double linebreaks
        item = item.replace(/\n\n+/g, '\n\n');
        if (isParagraphed) {
          item = showdown.subParser('paragraphs')(item, options, globals);
        } else {
          item = showdown.subParser('spanGamut')(item, options, globals);
        }
      }

      // now we need to remove the marker (¨A)
      item = item.replace('¨A', '');
      // we can finally wrap the line in list item tags
      item =  '<li' + bulletStyle + '>' + item + '</li>\n';

      return item;
    });

    // attacklab: strip sentinel
    listStr = listStr.replace(/¨0/g, '');

    globals.gListLevel--;

    if (trimTrailing) {
      listStr = listStr.replace(/\s+$/, '');
    }

    return listStr;
  }

  function styleStartNumber (list, listType) {
    // check if ol and starts by a number different than 1
    if (listType === 'ol') {
      var res = list.match(/^ *(\d+)\./);
      if (res && res[1] !== '1') {
        return ' start="' + res[1] + '"';
      }
    }
    return '';
  }

  /**
   * Check and parse consecutive lists (better fix for issue #142)
   * @param {string} list
   * @param {string} listType
   * @param {boolean} trimTrailing
   * @returns {string}
   */
  function parseConsecutiveLists (list, listType, trimTrailing) {
    // check if we caught 2 or more consecutive lists by mistake
    // we use the counterRgx, meaning if listType is UL we look for OL and vice versa
    var olRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?\d+\.[ \t]/gm : /^ {0,3}\d+\.[ \t]/gm,
        ulRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?[*+-][ \t]/gm : /^ {0,3}[*+-][ \t]/gm,
        counterRxg = (listType === 'ul') ? olRgx : ulRgx,
        result = '';

    if (list.search(counterRxg) !== -1) {
      (function parseCL (txt) {
        var pos = txt.search(counterRxg),
            style = styleStartNumber(list, listType);
        if (pos !== -1) {
          // slice
          result += '\n\n<' + listType + style + '>\n' + processListItems(txt.slice(0, pos), !!trimTrailing) + '</' + listType + '>\n';

          // invert counterType and listType
          listType = (listType === 'ul') ? 'ol' : 'ul';
          counterRxg = (listType === 'ul') ? olRgx : ulRgx;

          //recurse
          parseCL(txt.slice(pos));
        } else {
          result += '\n\n<' + listType + style + '>\n' + processListItems(txt, !!trimTrailing) + '</' + listType + '>\n';
        }
      })(list);
    } else {
      var style = styleStartNumber(list, listType);
      result = '\n\n<' + listType + style + '>\n' + processListItems(list, !!trimTrailing) + '</' + listType + '>\n';
    }

    return result;
  }

  /** Start of list parsing **/
  text = globals.converter._dispatch('lists.before', text, options, globals);
  // add sentinel to hack around khtml/safari bug:
  // http://bugs.webkit.org/show_bug.cgi?id=11231
  text += '¨0';

  if (globals.gListLevel) {
    text = text.replace(/^(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,
      function (wholeMatch, list, m2) {
        var listType = (m2.search(/[*+-]/g) > -1) ? 'ul' : 'ol';
        return parseConsecutiveLists(list, listType, true);
      }
    );
  } else {
    text = text.replace(/(\n\n|^\n?)(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,
      function (wholeMatch, m1, list, m3) {
        var listType = (m3.search(/[*+-]/g) > -1) ? 'ul' : 'ol';
        return parseConsecutiveLists(list, listType, false);
      }
    );
  }

  // strip sentinel
  text = text.replace(/¨0/, '');
  text = globals.converter._dispatch('lists.after', text, options, globals);
  return text;
});

/**
 * Parse metadata at the top of the document
 */
showdown.subParser('metadata', function (text, options, globals) {
  'use strict';

  if (!options.metadata) {
    return text;
  }

  text = globals.converter._dispatch('metadata.before', text, options, globals);

  function parseMetadataContents (content) {
    // raw is raw so it's not changed in any way
    globals.metadata.raw = content;

    // escape chars forbidden in html attributes
    // double quotes
    content = content
      // ampersand first
      .replace(/&/g, '&amp;')
      // double quotes
      .replace(/"/g, '&quot;');

    content = content.replace(/\n {4}/g, ' ');
    content.replace(/^([\S ]+): +([\s\S]+?)$/gm, function (wm, key, value) {
      globals.metadata.parsed[key] = value;
      return '';
    });
  }

  text = text.replace(/^\s*«««+(\S*?)\n([\s\S]+?)\n»»»+\n/, function (wholematch, format, content) {
    parseMetadataContents(content);
    return '¨M';
  });

  text = text.replace(/^\s*---+(\S*?)\n([\s\S]+?)\n---+\n/, function (wholematch, format, content) {
    if (format) {
      globals.metadata.format = format;
    }
    parseMetadataContents(content);
    return '¨M';
  });

  text = text.replace(/¨M/g, '');

  text = globals.converter._dispatch('metadata.after', text, options, globals);
  return text;
});

/**
 * Remove one level of line-leading tabs or spaces
 */
showdown.subParser('outdent', function (text, options, globals) {
  'use strict';
  text = globals.converter._dispatch('outdent.before', text, options, globals);

  // attacklab: hack around Konqueror 3.5.4 bug:
  // "----------bug".replace(/^-/g,"") == "bug"
  text = text.replace(/^(\t|[ ]{1,4})/gm, '¨0'); // attacklab: g_tab_width

  // attacklab: clean up hack
  text = text.replace(/¨0/g, '');

  text = globals.converter._dispatch('outdent.after', text, options, globals);
  return text;
});

/**
 *
 */
showdown.subParser('paragraphs', function (text, options, globals) {
  'use strict';

  text = globals.converter._dispatch('paragraphs.before', text, options, globals);
  // Strip leading and trailing lines:
  text = text.replace(/^\n+/g, '');
  text = text.replace(/\n+$/g, '');

  var grafs = text.split(/\n{2,}/g),
      grafsOut = [],
      end = grafs.length; // Wrap <p> tags

  for (var i = 0; i < end; i++) {
    var str = grafs[i];
    // if this is an HTML marker, copy it
    if (str.search(/¨(K|G)(\d+)\1/g) >= 0) {
      grafsOut.push(str);

    // test for presence of characters to prevent empty lines being parsed
    // as paragraphs (resulting in undesired extra empty paragraphs)
    } else if (str.search(/\S/) >= 0) {
      str = showdown.subParser('spanGamut')(str, options, globals);
      str = str.replace(/^([ \t]*)/g, '<p>');
      str += '</p>';
      grafsOut.push(str);
    }
  }

  /** Unhashify HTML blocks */
  end = grafsOut.length;
  for (i = 0; i < end; i++) {
    var blockText = '',
        grafsOutIt = grafsOut[i],
        codeFlag = false;
    // if this is a marker for an html block...
    // use RegExp.test instead of string.search because of QML bug
    while (/¨(K|G)(\d+)\1/.test(grafsOutIt)) {
      var delim = RegExp.$1,
          num   = RegExp.$2;

      if (delim === 'K') {
        blockText = globals.gHtmlBlocks[num];
      } else {
        // we need to check if ghBlock is a false positive
        if (codeFlag) {
          // use encoded version of all text
          blockText = showdown.subParser('encodeCode')(globals.ghCodeBlocks[num].text, options, globals);
        } else {
          blockText = globals.ghCodeBlocks[num].codeblock;
        }
      }
      blockText = blockText.replace(/\$/g, '$$$$'); // Escape any dollar signs

      grafsOutIt = grafsOutIt.replace(/(\n\n)?¨(K|G)\d+\2(\n\n)?/, blockText);
      // Check if grafsOutIt is a pre->code
      if (/^<pre\b[^>]*>\s*<code\b[^>]*>/.test(grafsOutIt)) {
        codeFlag = true;
      }
    }
    grafsOut[i] = grafsOutIt;
  }
  text = grafsOut.join('\n');
  // Strip leading and trailing lines:
  text = text.replace(/^\n+/g, '');
  text = text.replace(/\n+$/g, '');
  return globals.converter._dispatch('paragraphs.after', text, options, globals);
});

/**
 * Run extension
 */
showdown.subParser('runExtension', function (ext, text, options, globals) {
  'use strict';

  if (ext.filter) {
    text = ext.filter(text, globals.converter, options);

  } else if (ext.regex) {
    // TODO remove this when old extension loading mechanism is deprecated
    var re = ext.regex;
    if (!(re instanceof RegExp)) {
      re = new RegExp(re, 'g');
    }
    text = text.replace(re, ext.replace);
  }

  return text;
});

/**
 * These are all the transformations that occur *within* block-level
 * tags like paragraphs, headers, and list items.
 */
showdown.subParser('spanGamut', function (text, options, globals) {
  'use strict';

  text = globals.converter._dispatch('spanGamut.before', text, options, globals);
  text = showdown.subParser('codeSpans')(text, options, globals);
  text = showdown.subParser('escapeSpecialCharsWithinTagAttributes')(text, options, globals);
  text = showdown.subParser('encodeBackslashEscapes')(text, options, globals);

  // Process anchor and image tags. Images must come first,
  // because ![foo][f] looks like an anchor.
  text = showdown.subParser('images')(text, options, globals);
  text = showdown.subParser('anchors')(text, options, globals);

  // Make links out of things like `<http://example.com/>`
  // Must come after anchors, because you can use < and >
  // delimiters in inline links like [this](<url>).
  text = showdown.subParser('autoLinks')(text, options, globals);
  text = showdown.subParser('simplifiedAutoLinks')(text, options, globals);
  text = showdown.subParser('emoji')(text, options, globals);
  text = showdown.subParser('underline')(text, options, globals);
  text = showdown.subParser('italicsAndBold')(text, options, globals);
  text = showdown.subParser('strikethrough')(text, options, globals);
  text = showdown.subParser('ellipsis')(text, options, globals);

  // we need to hash HTML tags inside spans
  text = showdown.subParser('hashHTMLSpans')(text, options, globals);

  // now we encode amps and angles
  text = showdown.subParser('encodeAmpsAndAngles')(text, options, globals);

  // Do hard breaks
  if (options.simpleLineBreaks) {
    // GFM style hard breaks
    // only add line breaks if the text does not contain a block (special case for lists)
    if (!/\n\n¨K/.test(text)) {
      text = text.replace(/\n+/g, '<br />\n');
    }
  } else {
    // Vanilla hard breaks
    text = text.replace(/  +\n/g, '<br />\n');
  }

  text = globals.converter._dispatch('spanGamut.after', text, options, globals);
  return text;
});

showdown.subParser('strikethrough', function (text, options, globals) {
  'use strict';

  function parseInside (txt) {
    if (options.simplifiedAutoLink) {
      txt = showdown.subParser('simplifiedAutoLinks')(txt, options, globals);
    }
    return '<del>' + txt + '</del>';
  }

  if (options.strikethrough) {
    text = globals.converter._dispatch('strikethrough.before', text, options, globals);
    text = text.replace(/(?:~){2}([\s\S]+?)(?:~){2}/g, function (wm, txt) { return parseInside(txt); });
    text = globals.converter._dispatch('strikethrough.after', text, options, globals);
  }

  return text;
});

/**
 * Strips link definitions from text, stores the URLs and titles in
 * hash references.
 * Link defs are in the form: ^[id]: url "optional title"
 */
showdown.subParser('stripLinkDefinitions', function (text, options, globals) {
  'use strict';

  var regex       = /^ {0,3}\[([^\]]+)]:[ \t]*\n?[ \t]*<?([^>\s]+)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n+|(?=¨0))/gm,
      base64Regex = /^ {0,3}\[([^\]]+)]:[ \t]*\n?[ \t]*<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n\n|(?=¨0)|(?=\n\[))/gm;

  // attacklab: sentinel workarounds for lack of \A and \Z, safari\khtml bug
  text += '¨0';

  var replaceFunc = function (wholeMatch, linkId, url, width, height, blankLines, title) {

    // if there aren't two instances of linkId it must not be a reference link so back out
    linkId = linkId.toLowerCase();
    if (text.toLowerCase().split(linkId).length - 1 < 2) {
      return wholeMatch;
    }
    if (url.match(/^data:.+?\/.+?;base64,/)) {
      // remove newlines
      globals.gUrls[linkId] = url.replace(/\s/g, '');
    } else {
      globals.gUrls[linkId] = showdown.subParser('encodeAmpsAndAngles')(url, options, globals);  // Link IDs are case-insensitive
    }

    if (blankLines) {
      // Oops, found blank lines, so it's not a title.
      // Put back the parenthetical statement we stole.
      return blankLines + title;

    } else {
      if (title) {
        globals.gTitles[linkId] = title.replace(/"|'/g, '&quot;');
      }
      if (options.parseImgDimensions && width && height) {
        globals.gDimensions[linkId] = {
          width:  width,
          height: height
        };
      }
    }
    // Completely remove the definition from the text
    return '';
  };

  // first we try to find base64 link references
  text = text.replace(base64Regex, replaceFunc);

  text = text.replace(regex, replaceFunc);

  // attacklab: strip sentinel
  text = text.replace(/¨0/, '');

  return text;
});

showdown.subParser('tables', function (text, options, globals) {
  'use strict';

  if (!options.tables) {
    return text;
  }

  var tableRgx       = /^ {0,3}\|?.+\|.+\n {0,3}\|?[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*:?[ \t]*(?:[-=]){2,}[\s\S]+?(?:\n\n|¨0)/gm,
      //singeColTblRgx = /^ {0,3}\|.+\|\n {0,3}\|[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*\n(?: {0,3}\|.+\|\n)+(?:\n\n|¨0)/gm;
      singeColTblRgx = /^ {0,3}\|.+\|[ \t]*\n {0,3}\|[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*\n( {0,3}\|.+\|[ \t]*\n)*(?:\n|¨0)/gm;

  function parseStyles (sLine) {
    if (/^:[ \t]*--*$/.test(sLine)) {
      return ' style="text-align:left;"';
    } else if (/^--*[ \t]*:[ \t]*$/.test(sLine)) {
      return ' style="text-align:right;"';
    } else if (/^:[ \t]*--*[ \t]*:$/.test(sLine)) {
      return ' style="text-align:center;"';
    } else {
      return '';
    }
  }

  function parseHeaders (header, style) {
    var id = '';
    header = header.trim();
    // support both tablesHeaderId and tableHeaderId due to error in documentation so we don't break backwards compatibility
    if (options.tablesHeaderId || options.tableHeaderId) {
      id = ' id="' + header.replace(/ /g, '_').toLowerCase() + '"';
    }
    header = showdown.subParser('spanGamut')(header, options, globals);

    return '<th' + id + style + '>' + header + '</th>\n';
  }

  function parseCells (cell, style) {
    var subText = showdown.subParser('spanGamut')(cell, options, globals);
    return '<td' + style + '>' + subText + '</td>\n';
  }

  function buildTable (headers, cells) {
    var tb = '<table>\n<thead>\n<tr>\n',
        tblLgn = headers.length;

    for (var i = 0; i < tblLgn; ++i) {
      tb += headers[i];
    }
    tb += '</tr>\n</thead>\n<tbody>\n';

    for (i = 0; i < cells.length; ++i) {
      tb += '<tr>\n';
      for (var ii = 0; ii < tblLgn; ++ii) {
        tb += cells[i][ii];
      }
      tb += '</tr>\n';
    }
    tb += '</tbody>\n</table>\n';
    return tb;
  }

  function parseTable (rawTable) {
    var i, tableLines = rawTable.split('\n');

    for (i = 0; i < tableLines.length; ++i) {
      // strip wrong first and last column if wrapped tables are used
      if (/^ {0,3}\|/.test(tableLines[i])) {
        tableLines[i] = tableLines[i].replace(/^ {0,3}\|/, '');
      }
      if (/\|[ \t]*$/.test(tableLines[i])) {
        tableLines[i] = tableLines[i].replace(/\|[ \t]*$/, '');
      }
      // parse code spans first, but we only support one line code spans
      tableLines[i] = showdown.subParser('codeSpans')(tableLines[i], options, globals);
    }

    var rawHeaders = tableLines[0].split('|').map(function (s) { return s.trim();}),
        rawStyles = tableLines[1].split('|').map(function (s) { return s.trim();}),
        rawCells = [],
        headers = [],
        styles = [],
        cells = [];

    tableLines.shift();
    tableLines.shift();

    for (i = 0; i < tableLines.length; ++i) {
      if (tableLines[i].trim() === '') {
        continue;
      }
      rawCells.push(
        tableLines[i]
          .split('|')
          .map(function (s) {
            return s.trim();
          })
      );
    }

    if (rawHeaders.length < rawStyles.length) {
      return rawTable;
    }

    for (i = 0; i < rawStyles.length; ++i) {
      styles.push(parseStyles(rawStyles[i]));
    }

    for (i = 0; i < rawHeaders.length; ++i) {
      if (showdown.helper.isUndefined(styles[i])) {
        styles[i] = '';
      }
      headers.push(parseHeaders(rawHeaders[i], styles[i]));
    }

    for (i = 0; i < rawCells.length; ++i) {
      var row = [];
      for (var ii = 0; ii < headers.length; ++ii) {
        if (showdown.helper.isUndefined(rawCells[i][ii])) {

        }
        row.push(parseCells(rawCells[i][ii], styles[ii]));
      }
      cells.push(row);
    }

    return buildTable(headers, cells);
  }

  text = globals.converter._dispatch('tables.before', text, options, globals);

  // find escaped pipe characters
  text = text.replace(/\\(\|)/g, showdown.helper.escapeCharactersCallback);

  // parse multi column tables
  text = text.replace(tableRgx, parseTable);

  // parse one column tables
  text = text.replace(singeColTblRgx, parseTable);

  text = globals.converter._dispatch('tables.after', text, options, globals);

  return text;
});

showdown.subParser('underline', function (text, options, globals) {
  'use strict';

  if (!options.underline) {
    return text;
  }

  text = globals.converter._dispatch('underline.before', text, options, globals);

  if (options.literalMidWordUnderscores) {
    text = text.replace(/\b___(\S[\s\S]*?)___\b/g, function (wm, txt) {
      return '<u>' + txt + '</u>';
    });
    text = text.replace(/\b__(\S[\s\S]*?)__\b/g, function (wm, txt) {
      return '<u>' + txt + '</u>';
    });
  } else {
    text = text.replace(/___(\S[\s\S]*?)___/g, function (wm, m) {
      return (/\S$/.test(m)) ? '<u>' + m + '</u>' : wm;
    });
    text = text.replace(/__(\S[\s\S]*?)__/g, function (wm, m) {
      return (/\S$/.test(m)) ? '<u>' + m + '</u>' : wm;
    });
  }

  // escape remaining underscores to prevent them being parsed by italic and bold
  text = text.replace(/(_)/g, showdown.helper.escapeCharactersCallback);

  text = globals.converter._dispatch('underline.after', text, options, globals);

  return text;
});

/**
 * Swap back in all the special characters we've hidden.
 */
showdown.subParser('unescapeSpecialChars', function (text, options, globals) {
  'use strict';
  text = globals.converter._dispatch('unescapeSpecialChars.before', text, options, globals);

  text = text.replace(/¨E(\d+)E/g, function (wholeMatch, m1) {
    var charCodeToReplace = parseInt(m1);
    return String.fromCharCode(charCodeToReplace);
  });

  text = globals.converter._dispatch('unescapeSpecialChars.after', text, options, globals);
  return text;
});

showdown.subParser('makeMarkdown.blockquote', function (node, globals) {
  'use strict';

  var txt = '';
  if (node.hasChildNodes()) {
    var children = node.childNodes,
        childrenLength = children.length;

    for (var i = 0; i < childrenLength; ++i) {
      var innerTxt = showdown.subParser('makeMarkdown.node')(children[i], globals);

      if (innerTxt === '') {
        continue;
      }
      txt += innerTxt;
    }
  }
  // cleanup
  txt = txt.trim();
  txt = '> ' + txt.split('\n').join('\n> ');
  return txt;
});

showdown.subParser('makeMarkdown.codeBlock', function (node, globals) {
  'use strict';

  var lang = node.getAttribute('language'),
      num  = node.getAttribute('precodenum');
  return '```' + lang + '\n' + globals.preList[num] + '\n```';
});

showdown.subParser('makeMarkdown.codeSpan', function (node) {
  'use strict';

  return '`' + node.innerHTML + '`';
});

showdown.subParser('makeMarkdown.emphasis', function (node, globals) {
  'use strict';

  var txt = '';
  if (node.hasChildNodes()) {
    txt += '*';
    var children = node.childNodes,
        childrenLength = children.length;
    for (var i = 0; i < childrenLength; ++i) {
      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
    }
    txt += '*';
  }
  return txt;
});

showdown.subParser('makeMarkdown.header', function (node, globals, headerLevel) {
  'use strict';

  var headerMark = new Array(headerLevel + 1).join('#'),
      txt = '';

  if (node.hasChildNodes()) {
    txt = headerMark + ' ';
    var children = node.childNodes,
        childrenLength = children.length;

    for (var i = 0; i < childrenLength; ++i) {
      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
    }
  }
  return txt;
});

showdown.subParser('makeMarkdown.hr', function () {
  'use strict';

  return '---';
});

showdown.subParser('makeMarkdown.image', function (node) {
  'use strict';

  var txt = '';
  if (node.hasAttribute('src')) {
    txt += '![' + node.getAttribute('alt') + '](';
    txt += '<' + node.getAttribute('src') + '>';
    if (node.hasAttribute('width') && node.hasAttribute('height')) {
      txt += ' =' + node.getAttribute('width') + 'x' + node.getAttribute('height');
    }

    if (node.hasAttribute('title')) {
      txt += ' "' + node.getAttribute('title') + '"';
    }
    txt += ')';
  }
  return txt;
});

showdown.subParser('makeMarkdown.links', function (node, globals) {
  'use strict';

  var txt = '';
  if (node.hasChildNodes() && node.hasAttribute('href')) {
    var children = node.childNodes,
        childrenLength = children.length;
    txt = '[';
    for (var i = 0; i < childrenLength; ++i) {
      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
    }
    txt += '](';
    txt += '<' + node.getAttribute('href') + '>';
    if (node.hasAttribute('title')) {
      txt += ' "' + node.getAttribute('title') + '"';
    }
    txt += ')';
  }
  return txt;
});

showdown.subParser('makeMarkdown.list', function (node, globals, type) {
  'use strict';

  var txt = '';
  if (!node.hasChildNodes()) {
    return '';
  }
  var listItems       = node.childNodes,
      listItemsLenght = listItems.length,
      listNum = node.getAttribute('start') || 1;

  for (var i = 0; i < listItemsLenght; ++i) {
    if (typeof listItems[i].tagName === 'undefined' || listItems[i].tagName.toLowerCase() !== 'li') {
      continue;
    }

    // define the bullet to use in list
    var bullet = '';
    if (type === 'ol') {
      bullet = listNum.toString() + '. ';
    } else {
      bullet = '- ';
    }

    // parse list item
    txt += bullet + showdown.subParser('makeMarkdown.listItem')(listItems[i], globals);
    ++listNum;
  }

  // add comment at the end to prevent consecutive lists to be parsed as one
  txt += '\n<!-- -->\n';
  return txt.trim();
});

showdown.subParser('makeMarkdown.listItem', function (node, globals) {
  'use strict';

  var listItemTxt = '';

  var children = node.childNodes,
      childrenLenght = children.length;

  for (var i = 0; i < childrenLenght; ++i) {
    listItemTxt += showdown.subParser('makeMarkdown.node')(children[i], globals);
  }
  // if it's only one liner, we need to add a newline at the end
  if (!/\n$/.test(listItemTxt)) {
    listItemTxt += '\n';
  } else {
    // it's multiparagraph, so we need to indent
    listItemTxt = listItemTxt
      .split('\n')
      .join('\n    ')
      .replace(/^ {4}$/gm, '')
      .replace(/\n\n+/g, '\n\n');
  }

  return listItemTxt;
});



showdown.subParser('makeMarkdown.node', function (node, globals, spansOnly) {
  'use strict';

  spansOnly = spansOnly || false;

  var txt = '';

  // edge case of text without wrapper paragraph
  if (node.nodeType === 3) {
    return showdown.subParser('makeMarkdown.txt')(node, globals);
  }

  // HTML comment
  if (node.nodeType === 8) {
    return '<!--' + node.data + '-->\n\n';
  }

  // process only node elements
  if (node.nodeType !== 1) {
    return '';
  }

  var tagName = node.tagName.toLowerCase();

  switch (tagName) {

    //
    // BLOCKS
    //
    case 'h1':
      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 1) + '\n\n'; }
      break;
    case 'h2':
      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 2) + '\n\n'; }
      break;
    case 'h3':
      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 3) + '\n\n'; }
      break;
    case 'h4':
      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 4) + '\n\n'; }
      break;
    case 'h5':
      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 5) + '\n\n'; }
      break;
    case 'h6':
      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 6) + '\n\n'; }
      break;

    case 'p':
      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.paragraph')(node, globals) + '\n\n'; }
      break;

    case 'blockquote':
      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.blockquote')(node, globals) + '\n\n'; }
      break;

    case 'hr':
      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.hr')(node, globals) + '\n\n'; }
      break;

    case 'ol':
      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.list')(node, globals, 'ol') + '\n\n'; }
      break;

    case 'ul':
      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.list')(node, globals, 'ul') + '\n\n'; }
      break;

    case 'precode':
      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.codeBlock')(node, globals) + '\n\n'; }
      break;

    case 'pre':
      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.pre')(node, globals) + '\n\n'; }
      break;

    case 'table':
      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.table')(node, globals) + '\n\n'; }
      break;

    //
    // SPANS
    //
    case 'code':
      txt = showdown.subParser('makeMarkdown.codeSpan')(node, globals);
      break;

    case 'em':
    case 'i':
      txt = showdown.subParser('makeMarkdown.emphasis')(node, globals);
      break;

    case 'strong':
    case 'b':
      txt = showdown.subParser('makeMarkdown.strong')(node, globals);
      break;

    case 'del':
      txt = showdown.subParser('makeMarkdown.strikethrough')(node, globals);
      break;

    case 'a':
      txt = showdown.subParser('makeMarkdown.links')(node, globals);
      break;

    case 'img':
      txt = showdown.subParser('makeMarkdown.image')(node, globals);
      break;

    default:
      txt = node.outerHTML + '\n\n';
  }

  // common normalization
  // TODO eventually

  return txt;
});

showdown.subParser('makeMarkdown.paragraph', function (node, globals) {
  'use strict';

  var txt = '';
  if (node.hasChildNodes()) {
    var children = node.childNodes,
        childrenLength = children.length;
    for (var i = 0; i < childrenLength; ++i) {
      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
    }
  }

  // some text normalization
  txt = txt.trim();

  return txt;
});

showdown.subParser('makeMarkdown.pre', function (node, globals) {
  'use strict';

  var num  = node.getAttribute('prenum');
  return '<pre>' + globals.preList[num] + '</pre>';
});

showdown.subParser('makeMarkdown.strikethrough', function (node, globals) {
  'use strict';

  var txt = '';
  if (node.hasChildNodes()) {
    txt += '~~';
    var children = node.childNodes,
        childrenLength = children.length;
    for (var i = 0; i < childrenLength; ++i) {
      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
    }
    txt += '~~';
  }
  return txt;
});

showdown.subParser('makeMarkdown.strong', function (node, globals) {
  'use strict';

  var txt = '';
  if (node.hasChildNodes()) {
    txt += '**';
    var children = node.childNodes,
        childrenLength = children.length;
    for (var i = 0; i < childrenLength; ++i) {
      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
    }
    txt += '**';
  }
  return txt;
});

showdown.subParser('makeMarkdown.table', function (node, globals) {
  'use strict';

  var txt = '',
      tableArray = [[], []],
      headings   = node.querySelectorAll('thead>tr>th'),
      rows       = node.querySelectorAll('tbody>tr'),
      i, ii;
  for (i = 0; i < headings.length; ++i) {
    var headContent = showdown.subParser('makeMarkdown.tableCell')(headings[i], globals),
        allign = '---';

    if (headings[i].hasAttribute('style')) {
      var style = headings[i].getAttribute('style').toLowerCase().replace(/\s/g, '');
      switch (style) {
        case 'text-align:left;':
          allign = ':---';
          break;
        case 'text-align:right;':
          allign = '---:';
          break;
        case 'text-align:center;':
          allign = ':---:';
          break;
      }
    }
    tableArray[0][i] = headContent.trim();
    tableArray[1][i] = allign;
  }

  for (i = 0; i < rows.length; ++i) {
    var r = tableArray.push([]) - 1,
        cols = rows[i].getElementsByTagName('td');

    for (ii = 0; ii < headings.length; ++ii) {
      var cellContent = ' ';
      if (typeof cols[ii] !== 'undefined') {
        cellContent = showdown.subParser('makeMarkdown.tableCell')(cols[ii], globals);
      }
      tableArray[r].push(cellContent);
    }
  }

  var cellSpacesCount = 3;
  for (i = 0; i < tableArray.length; ++i) {
    for (ii = 0; ii < tableArray[i].length; ++ii) {
      var strLen = tableArray[i][ii].length;
      if (strLen > cellSpacesCount) {
        cellSpacesCount = strLen;
      }
    }
  }

  for (i = 0; i < tableArray.length; ++i) {
    for (ii = 0; ii < tableArray[i].length; ++ii) {
      if (i === 1) {
        if (tableArray[i][ii].slice(-1) === ':') {
          tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii].slice(-1), cellSpacesCount - 1, '-') + ':';
        } else {
          tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii], cellSpacesCount, '-');
        }
      } else {
        tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii], cellSpacesCount);
      }
    }
    txt += '| ' + tableArray[i].join(' | ') + ' |\n';
  }

  return txt.trim();
});

showdown.subParser('makeMarkdown.tableCell', function (node, globals) {
  'use strict';

  var txt = '';
  if (!node.hasChildNodes()) {
    return '';
  }
  var children = node.childNodes,
      childrenLength = children.length;

  for (var i = 0; i < childrenLength; ++i) {
    txt += showdown.subParser('makeMarkdown.node')(children[i], globals, true);
  }
  return txt.trim();
});

showdown.subParser('makeMarkdown.txt', function (node) {
  'use strict';

  var txt = node.nodeValue;

  // multiple spaces are collapsed
  txt = txt.replace(/ +/g, ' ');

  // replace the custom ¨NBSP; with a space
  txt = txt.replace(/¨NBSP;/g, ' ');

  // ", <, > and & should replace escaped html entities
  txt = showdown.helper.unescapeHTMLEntities(txt);

  // escape markdown magic characters
  // emphasis, strong and strikethrough - can appear everywhere
  // we also escape pipe (|) because of tables
  // and escape ` because of code blocks and spans
  txt = txt.replace(/([*_~|`])/g, '\\$1');

  // escape > because of blockquotes
  txt = txt.replace(/^(\s*)>/g, '\\$1>');

  // hash character, only troublesome at the beginning of a line because of headers
  txt = txt.replace(/^#/gm, '\\#');

  // horizontal rules
  txt = txt.replace(/^(\s*)([-=]{3,})(\s*)$/, '$1\\$2$3');

  // dot, because of ordered lists, only troublesome at the beginning of a line when preceded by an integer
  txt = txt.replace(/^( {0,3}\d+)\./gm, '$1\\.');

  // +, * and -, at the beginning of a line becomes a list, so we need to escape them also (asterisk was already escaped)
  txt = txt.replace(/^( {0,3})([+-])/gm, '$1\\$2');

  // images and links, ] followed by ( is problematic, so we escape it
  txt = txt.replace(/]([\s]*)\(/g, '\\]$1\\(');

  // reference URIs must also be escaped
  txt = txt.replace(/^ {0,3}\[([\S \t]*?)]:/gm, '\\[$1]:');

  return txt;
});

var root = this;

// AMD Loader
if (true) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
    'use strict';
    return showdown;
  }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

// CommonJS/nodeJS Loader
} else {}
}).call(this);

//# sourceMappingURL=showdown.js.map


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get mini-css chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.miniCssF = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".css";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "evenpierre:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 		
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/css loading */
/******/ 	(() => {
/******/ 		if (typeof document === "undefined") return;
/******/ 		var createStylesheet = (chunkId, fullhref, oldTag, resolve, reject) => {
/******/ 			var linkTag = document.createElement("link");
/******/ 		
/******/ 			linkTag.rel = "stylesheet";
/******/ 			linkTag.type = "text/css";
/******/ 			if (__webpack_require__.nc) {
/******/ 				linkTag.nonce = __webpack_require__.nc;
/******/ 			}
/******/ 			var onLinkComplete = (event) => {
/******/ 				// avoid mem leaks.
/******/ 				linkTag.onerror = linkTag.onload = null;
/******/ 				if (event.type === 'load') {
/******/ 					resolve();
/******/ 				} else {
/******/ 					var errorType = event && event.type;
/******/ 					var realHref = event && event.target && event.target.href || fullhref;
/******/ 					var err = new Error("Loading CSS chunk " + chunkId + " failed.\n(" + errorType + ": " + realHref + ")");
/******/ 					err.name = "ChunkLoadError";
/******/ 					err.code = "CSS_CHUNK_LOAD_FAILED";
/******/ 					err.type = errorType;
/******/ 					err.request = realHref;
/******/ 					if (linkTag.parentNode) linkTag.parentNode.removeChild(linkTag)
/******/ 					reject(err);
/******/ 				}
/******/ 			}
/******/ 			linkTag.onerror = linkTag.onload = onLinkComplete;
/******/ 			linkTag.href = fullhref;
/******/ 		
/******/ 		
/******/ 			if (oldTag) {
/******/ 				oldTag.parentNode.insertBefore(linkTag, oldTag.nextSibling);
/******/ 			} else {
/******/ 				document.head.appendChild(linkTag);
/******/ 			}
/******/ 			return linkTag;
/******/ 		};
/******/ 		var findStylesheet = (href, fullhref) => {
/******/ 			var existingLinkTags = document.getElementsByTagName("link");
/******/ 			for(var i = 0; i < existingLinkTags.length; i++) {
/******/ 				var tag = existingLinkTags[i];
/******/ 				var dataHref = tag.getAttribute("data-href") || tag.getAttribute("href");
/******/ 				if(tag.rel === "stylesheet" && (dataHref === href || dataHref === fullhref)) return tag;
/******/ 			}
/******/ 			var existingStyleTags = document.getElementsByTagName("style");
/******/ 			for(var i = 0; i < existingStyleTags.length; i++) {
/******/ 				var tag = existingStyleTags[i];
/******/ 				var dataHref = tag.getAttribute("data-href");
/******/ 				if(dataHref === href || dataHref === fullhref) return tag;
/******/ 			}
/******/ 		};
/******/ 		var loadStylesheet = (chunkId) => {
/******/ 			return new Promise((resolve, reject) => {
/******/ 				var href = __webpack_require__.miniCssF(chunkId);
/******/ 				var fullhref = __webpack_require__.p + href;
/******/ 				if(findStylesheet(href, fullhref)) return resolve();
/******/ 				createStylesheet(chunkId, fullhref, null, resolve, reject);
/******/ 			});
/******/ 		}
/******/ 		// object to store loaded CSS chunks
/******/ 		var installedCssChunks = {
/******/ 			"index": 0
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.f.miniCss = (chunkId, promises) => {
/******/ 			var cssChunks = {"vendors-node_modules_prismjs_plugins_autolinker_prism-autolinker_css-node_modules_prismjs_plu-70c122":1};
/******/ 			if(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);
/******/ 			else if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {
/******/ 				promises.push(installedCssChunks[chunkId] = loadStylesheet(chunkId).then(() => {
/******/ 					installedCssChunks[chunkId] = 0;
/******/ 				}, (e) => {
/******/ 					delete installedCssChunks[chunkId];
/******/ 					throw e;
/******/ 				}));
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		// no hmr
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"index": 0
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.f.j = (chunkId, promises) => {
/******/ 				// JSONP chunk loading for javascript
/******/ 				var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 				if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 		
/******/ 					// a Promise means "currently loading".
/******/ 					if(installedChunkData) {
/******/ 						promises.push(installedChunkData[2]);
/******/ 					} else {
/******/ 						if(true) { // all chunks have JS
/******/ 							// setup Promise in chunk cache
/******/ 							var promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));
/******/ 							promises.push(installedChunkData[2] = promise);
/******/ 		
/******/ 							// start chunk loading
/******/ 							var url = __webpack_require__.p + __webpack_require__.u(chunkId);
/******/ 							// create error before stack unwound to get useful stacktrace later
/******/ 							var error = new Error();
/******/ 							var loadingEnded = (event) => {
/******/ 								if(__webpack_require__.o(installedChunks, chunkId)) {
/******/ 									installedChunkData = installedChunks[chunkId];
/******/ 									if(installedChunkData !== 0) installedChunks[chunkId] = undefined;
/******/ 									if(installedChunkData) {
/******/ 										var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 										var realSrc = event && event.target && event.target.src;
/******/ 										error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 										error.name = 'ChunkLoadError';
/******/ 										error.type = errorType;
/******/ 										error.request = realSrc;
/******/ 										installedChunkData[1](error);
/******/ 									}
/******/ 								}
/******/ 							};
/******/ 							__webpack_require__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 		};
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkevenpierre"] = self["webpackChunkevenpierre"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!********************************!*\
  !*** ./client/layout/index.js ***!
  \********************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _handlebars_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./handlebars_helpers */ "./client/layout/handlebars_helpers.js");
/* harmony import */ var _widgets_auth_auth_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./widgets/auth/auth.js */ "./client/layout/widgets/auth/auth.js");
/* harmony import */ var _widgets_create_repos_create_repos_form_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./widgets/create_repos/create-repos-form.js */ "./client/layout/widgets/create_repos/create-repos-form.js");
/* harmony import */ var _widgets_viewport_repos_builder_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./widgets/viewport/repos_builder.js */ "./client/layout/widgets/viewport/repos_builder.js");
/* harmony import */ var _widgets_delete_repos_delete_repos_form_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./widgets/delete_repos/delete_repos_form.js */ "./client/layout/widgets/delete_repos/delete_repos_form.js");
/* harmony import */ var _widgets_edit_repos_edit_repos_form_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./widgets/edit_repos/edit_repos_form.js */ "./client/layout/widgets/edit_repos/edit_repos_form.js");
/* harmony import */ var _drop_box_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./drop_box.js */ "./client/layout/drop_box.js");
/* harmony import */ var _widgets_user_settings_user_settings_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./widgets/user_settings/user_settings.js */ "./client/layout/widgets/user_settings/user_settings.js");
/* harmony import */ var _widgets_repos_settings_repos_settings_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./widgets/repos_settings/repos_settings.js */ "./client/layout/widgets/repos_settings/repos_settings.js");
/* harmony import */ var _widgets_viewport_file_list_customization_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./widgets/viewport/file_list_customization.js */ "./client/layout/widgets/viewport/file_list_customization.js");
/* harmony import */ var _widgets_upload_upload_form_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./widgets/upload/upload_form.js */ "./client/layout/widgets/upload/upload_form.js");
/* harmony import */ var _administration_administration_panel__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./administration/administration_panel */ "./client/layout/administration/administration_panel.js");
__webpack_require__(/*! ../stylesheets/layout.scss */ "./client/stylesheets/layout.scss");


//@FIX : don't importing this cause a weird issue when rendering pdf...
__webpack_require__(/*! ../embed_viewers/custom_elements/pdf_viewer/pdf-viewer.hbs */ "./client/embed_viewers/custom_elements/pdf_viewer/pdf-viewer.hbs");
__webpack_require__(/*! ../embed_viewers/custom_elements/document/code */ "./client/embed_viewers/custom_elements/document/code.js");
__webpack_require__(/*! ../embed_viewers/custom_elements/document/markdown */ "./client/embed_viewers/custom_elements/document/markdown.js");
__webpack_require__(/*! ../embed_viewers/custom_elements/pdf_viewer/pdf-viewer */ "./client/embed_viewers/custom_elements/pdf_viewer/pdf-viewer.js");

/* WIDGETS */










/* VIEWPORT */


})();

__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTixvQ0FBb0MsT0FBTyxRQUFRLFFBQVE7QUFDM0Q7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSx1Q0FBdUMsT0FBTztBQUM5QztBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxtQkFBbUIsSUFBSTtBQUN2QjtBQUNBO0FBQ0EsbUJBQW1CLElBQUk7QUFDdkIsbUJBQW1CLElBQUk7QUFDdkI7QUFDQSx1REFBdUQ7QUFDdkQsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFVBQVU7QUFDNUIsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUlBQWlJOztBQUVqSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQSw0Q0FBNEMsT0FBTztBQUNuRDtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVMsU0FBUztBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLGtCQUFrQjtBQUNsQjtBQUNBLDJDQUEyQyxjQUFjOzs7Ozs7Ozs7Ozs7QUNyb0N6RDtBQUNBO0FBQ2E7O0FBRWIsa0JBQWtCO0FBQ2xCO0FBQ0EsbUJBQW1CLDBCQUEwQjtBQUM3QyxjQUFjO0FBQ2Qsb0JBQW9CLGl4REFBaXhEO0FBQ3J5RCxzQkFBc0IsNmhCQUE2aEI7QUFDbmpCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsK0JBQStCOztBQUUvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLDhEQUE4RCxFQUFFO0FBQ3RHO0FBQ0E7QUFDQSxnQ0FBZ0MsdUNBQXVDO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Qsa0JBQWtCLG1KQUFtSixJQUFJLFFBQVEsSUFBSSxXQUFXLElBQUksb1BBQW9QLElBQUksV0FBVyxJQUFJLHdLQUF3SyxJQUFJLDJKQUEySixJQUFJLDJKQUEySixJQUFJLDJKQUEySixJQUFJLDJKQUEySixJQUFJLDJKQUEySixJQUFJLDJKQUEySixJQUFJLDJKQUEySixJQUFJLDJIQUEySCxJQUFJLDJIQUEySCxJQUFJLHlLQUF5SyxJQUFJLDRKQUE0SixJQUFJLGtDQUFrQyxJQUFJLHdKQUF3SixJQUFJLCtJQUErSSxJQUFJLHFMQUFxTCxJQUFJLDJIQUEySCxJQUFJLDJIQUEySCxJQUFJLDJIQUEySCxJQUFJLHdKQUF3SixJQUFJLDZIQUE2SCxJQUFJLHlLQUF5SyxJQUFJLHlLQUF5SyxJQUFJLHlLQUF5SyxJQUFJLHlLQUF5SyxJQUFJLHlLQUF5SyxJQUFJLHlLQUF5SyxJQUFJLHlLQUF5SyxJQUFJLHNMQUFzTCxJQUFJLHFCQUFxQixJQUFJLHNMQUFzTCxJQUFJLDZIQUE2SCxJQUFJLHVFQUF1RSxJQUFJLDBDQUEwQyxJQUFJLGtDQUFrQyxJQUFJLDZIQUE2SCxJQUFJLHFIQUFxSCxJQUFJLHFIQUFxSCxJQUFJLDJIQUEySCxJQUFJLHFCQUFxQixJQUFJLDBJQUEwSSxJQUFJLDBJQUEwSSxJQUFJLDZIQUE2SCxJQUFJLDZIQUE2SCxJQUFJLHFNQUFxTSxJQUFJLGFBQWEsSUFBSSxzTEFBc0wsSUFBSSxxTUFBcU0sSUFBSSxxQkFBcUIsSUFBSSxhQUFhLElBQUkseUtBQXlLLElBQUksYUFBYSxJQUFJLDJIQUEySCxJQUFJLCtJQUErSSxJQUFJLHFCQUFxQixJQUFJLGFBQWEsSUFBSSx3S0FBd0ssSUFBSSwwQkFBMEIsSUFBSSxxTUFBcU0sSUFBSSw2SEFBNkgsSUFBSSx3S0FBd0ssSUFBSSwySEFBMkgsSUFBSSxrTkFBa04sSUFBSSxrTkFBa04sSUFBSSx1TUFBdU0sSUFBSSx3TUFBd00sSUFBSSxjQUFjLElBQUkscUhBQXFILElBQUksYUFBYSxJQUFJLHlLQUF5SyxJQUFJLHlLQUF5SyxJQUFJLHdGQUF3RixJQUFJLDhFQUE4RSxJQUFJLG9NQUFvTSxJQUFJLHNMQUFzTCxJQUFJLGNBQWMsSUFBSSxxSEFBcUgsSUFBSSxhQUFhLElBQUksd0tBQXdLLElBQUkseUVBQXlFLElBQUksMklBQTJJLElBQUksYUFBYSxJQUFJLHdLQUF3SyxJQUFJLGNBQWMsSUFBSSxxSEFBcUgsSUFBSSxhQUFhLElBQUksd01BQXdNLElBQUksY0FBYyxJQUFJLDZDQUE2QyxJQUFJLGtJQUFrSSxJQUFJLDBCQUEwQixJQUFJLDZDQUE2QyxJQUFJLGtJQUFrSSxJQUFJLDBCQUEwQixJQUFJLGNBQWMsSUFBSSxxSEFBcUgsSUFBSSxhQUFhLElBQUksY0FBYyxJQUFJLHFIQUFxSCxJQUFJLGFBQWEsSUFBSSx3S0FBd0ssSUFBSSw4RUFBOEUsSUFBSSxjQUFjLElBQUkseUpBQXlKLElBQUksd0tBQXdLLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxxTkFBcU4sSUFBSSx3S0FBd0ssSUFBSSxjQUFjLElBQUkscUhBQXFILElBQUksYUFBYSxJQUFJLHdLQUF3SyxJQUFJLGNBQWMsSUFBSSxhQUFhLElBQUksdUJBQXVCLElBQUksY0FBYyxJQUFJLGFBQWEsSUFBSSwwQkFBMEIsSUFBSSxrSUFBa0ksSUFBSSw4RUFBOEUsSUFBSSw2Q0FBNkMsSUFBSSxrSUFBa0ksSUFBSSwwQkFBMEIsSUFBSSx5S0FBeUssSUFBSSw0SkFBNEosSUFBSSw0QkFBNEIsSUFBSSw0QkFBNEIsSUFBSSwrSUFBK0ksSUFBSSxjQUFjLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSw0QkFBNEIsSUFBSSw0SkFBNEo7QUFDOWpkLDBCQUEwQixvT0FBb087QUFDOVA7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBLGtEQUFrRCw2SEFBNkg7QUFDL0s7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0Msa0JBQWtCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIsOElBQThJLDRDQUE0QztBQUMxTDtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBLGtFQUFrRTtBQUNsRTtBQUNBO0FBQ0Esa0VBQWtFO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUU7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLEVBQUUsb0NBQW9DLEdBQUcsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLEVBQUUsRUFBRSxtQkFBbUIsRUFBRSxFQUFFLEVBQUUsaUJBQWlCLFdBQVcsVUFBVSxTQUFTLEVBQUUsRUFBRSxFQUFFLHdCQUF3QixFQUFFLEVBQUUsRUFBRSwyQkFBMkIsRUFBRSxpQ0FBaUMsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsaUJBQWlCLEVBQUUsbUJBQW1CLEVBQUUsaUJBQWlCLEVBQUUsZUFBZSxFQUFFLFdBQVcsRUFBRSxvQkFBb0IsRUFBRSxXQUFXLEVBQUUsaUJBQWlCLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsa0JBQWtCLEVBQUUsZUFBZSxFQUFFLFdBQVcsRUFBRSxpREFBaUQsK0NBQStDLE1BQU0sRUFBRSxlQUFlLEVBQUUsOEVBQThFLDJCQUEyQiwrQkFBK0IsMEJBQTBCLDJDQUEyQywwREFBMEQsV0FBVyxZQUFZO0FBQ3ovQiw2QkFBNkIsUUFBUSxvTEFBb0wsV0FBVyxrQ0FBa0MsV0FBVyxrQ0FBa0MsV0FBVyx3Q0FBd0MsZUFBZTtBQUNyWDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLLDBCQUEwQjtBQUMvQjtBQUNBLENBQUMsSUFBSSxrQkFBa0I7QUFDdkI7QUFDQSwyQ0FBMkMsY0FBYzs7Ozs7Ozs7Ozs7O0FDaHVCNUM7O0FBRWIsa0JBQWtCO0FBQ2xCOztBQUVBLHVDQUF1Qyx1Q0FBdUM7O0FBRTlFLGlCQUFpQixtQkFBTyxDQUFDLGdGQUFjOztBQUV2Qzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLE9BQU87QUFDN0M7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVILCtEQUErRDtBQUMvRCwrREFBK0Q7O0FBRS9EOztBQUVBLHdEQUF3RDs7QUFFeEQsd0RBQXdEO0FBQ3hELHdEQUF3RDtBQUN4RCx3REFBd0Q7QUFDeEQsK0RBQStEO0FBQy9ELHFEQUFxRDs7QUFFckQ7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQjtBQUNsQjtBQUNBLDJDQUEyQyxjQUFjOzs7Ozs7Ozs7Ozs7QUMzSTVDOztBQUViLGtCQUFrQjtBQUNsQjs7QUFFQSx1Q0FBdUMsdUNBQXVDOztBQUU5RSxlQUFlLG1CQUFPLENBQUMsb0ZBQVc7O0FBRWxDOztBQUVBO0FBQ0EseUVBQXlFOztBQUV6RTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsbUNBQW1DLE9BQU87QUFDMUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxVQUFVLEtBQUs7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCO0FBQ2xCO0FBQ0EsMkNBQTJDLGNBQWM7Ozs7Ozs7Ozs7OztBQzVONUM7O0FBRWIsa0JBQWtCO0FBQ2xCLGlDQUFpQztBQUNqQzs7QUFFQSx1Q0FBdUMsdUNBQXVDOztBQUU5RSx3QkFBd0IsbUJBQU8sQ0FBQywrRkFBcUI7O0FBRXJEOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxjQUFjOzs7Ozs7Ozs7Ozs7QUNmNUM7O0FBRWIsa0JBQWtCOztBQUVsQixhQUFhLG1CQUFPLENBQUMsd0VBQVU7O0FBRS9CLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0EsMkNBQTJDLGNBQWM7Ozs7Ozs7Ozs7OztBQzVCNUM7O0FBRWIsa0JBQWtCO0FBQ2xCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxvQkFBb0IseUJBQXlCO0FBQzdDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBOztBQUVBLGtCQUFrQjtBQUNsQjtBQUNBLDJDQUEyQyxjQUFjOzs7Ozs7Ozs7Ozs7QUMvRDVDOztBQUViLGtCQUFrQjtBQUNsQiw4QkFBOEI7QUFDOUIseUJBQXlCO0FBQ3pCOztBQUVBLHVDQUF1Qyx1Q0FBdUM7O0FBRTlFLGlDQUFpQyxtQkFBTyxDQUFDLHFIQUFnQzs7QUFFekU7O0FBRUEsbUJBQW1CLG1CQUFPLENBQUMscUZBQWdCOztBQUUzQzs7QUFFQSw0QkFBNEIsbUJBQU8sQ0FBQyx5R0FBMEI7O0FBRTlEOztBQUVBLGlCQUFpQixtQkFBTyxDQUFDLGlGQUFjOztBQUV2Qzs7QUFFQSxrQkFBa0IsbUJBQU8sQ0FBQyxtRkFBZTs7QUFFekM7O0FBRUEscUJBQXFCLG1CQUFPLENBQUMseUZBQWtCOztBQUUvQzs7QUFFQSxtQkFBbUIsbUJBQU8sQ0FBQyxxRkFBZ0I7O0FBRTNDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLGNBQWM7Ozs7Ozs7Ozs7OztBQ3ZENUM7O0FBRWIsa0JBQWtCOztBQUVsQixhQUFhLG1CQUFPLENBQUMsd0VBQVU7O0FBRS9CLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0EsMkNBQTJDLGNBQWM7Ozs7Ozs7Ozs7OztBQ3RDNUM7O0FBRWIsa0JBQWtCO0FBQ2xCOztBQUVBLHVDQUF1Qyx1Q0FBdUM7O0FBRTlFLGFBQWEsbUJBQU8sQ0FBQyx3RUFBVTs7QUFFL0IsaUJBQWlCLG1CQUFPLENBQUMsZ0ZBQWM7O0FBRXZDOztBQUVBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0EscUNBQXFDLE9BQU87QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLHVDQUF1QyxVQUFVO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxPQUFPO0FBQzVDO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0EsMkNBQTJDLGNBQWM7Ozs7Ozs7Ozs7OztBQ3ZHNUM7O0FBRWIsa0JBQWtCO0FBQ2xCOztBQUVBLHVDQUF1Qyx1Q0FBdUM7O0FBRTlFLGlCQUFpQixtQkFBTyxDQUFDLGdGQUFjOztBQUV2Qzs7QUFFQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLGdDQUFnQyxNQUFNO0FBQ3RDO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBLDJDQUEyQyxjQUFjOzs7Ozs7Ozs7Ozs7QUN4QjVDOztBQUViLGtCQUFrQjtBQUNsQjs7QUFFQSx1Q0FBdUMsdUNBQXVDOztBQUU5RSxhQUFhLG1CQUFPLENBQUMsd0VBQVU7O0FBRS9CLGlCQUFpQixtQkFBTyxDQUFDLGdGQUFjOztBQUV2Qzs7QUFFQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQTtBQUNBLDJDQUEyQyxjQUFjOzs7Ozs7Ozs7Ozs7QUM3QzVDOztBQUViLGtCQUFrQjs7QUFFbEIsa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiwwQkFBMEI7QUFDOUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0EsMkNBQTJDLGNBQWM7Ozs7Ozs7Ozs7OztBQ3pCNUM7O0FBRWIsa0JBQWtCOztBQUVsQixrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0EsMkNBQTJDLGNBQWM7Ozs7Ozs7Ozs7OztBQ2Y1Qzs7QUFFYixrQkFBa0I7QUFDbEI7O0FBRUEsdUNBQXVDLHVDQUF1Qzs7QUFFOUUsYUFBYSxtQkFBTyxDQUFDLHdFQUFVOztBQUUvQixpQkFBaUIsbUJBQU8sQ0FBQyxnRkFBYzs7QUFFdkM7O0FBRUEsa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsTUFBTTtBQUNOO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQSwyQ0FBMkMsY0FBYzs7Ozs7Ozs7Ozs7O0FDMUM1Qzs7QUFFYixrQkFBa0I7QUFDbEIsNkJBQTZCOztBQUU3QixhQUFhLG1CQUFPLENBQUMsd0VBQVU7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBLFdBQVcsV0FBVztBQUN0QixhQUFhO0FBQ2I7O0FBRUE7QUFDQSxxRUFBcUUsYUFBYTtBQUNsRjtBQUNBOztBQUVBO0FBQ0E7QUFDQSwyQ0FBMkMsY0FBYzs7Ozs7Ozs7Ozs7O0FDckI1Qzs7QUFFYixrQkFBa0I7QUFDbEIsZ0NBQWdDO0FBQ2hDLHVCQUF1QjtBQUN2Qiw2QkFBNkI7QUFDN0I7O0FBRUEsdUNBQXVDLHVDQUF1Qzs7QUFFOUUsNkJBQTZCLG1CQUFPLENBQUMsc0hBQTRCOztBQUVqRSxjQUFjLG1CQUFPLENBQUMsMEVBQVc7O0FBRWpDOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLDJDQUEyQyxjQUFjOzs7Ozs7Ozs7Ozs7QUN4RTVDOztBQUViLGtCQUFrQjtBQUNsQixrQkFBa0I7O0FBRWxCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLGNBQWM7Ozs7Ozs7Ozs7OztBQ2xCNUM7O0FBRWIsa0JBQWtCOztBQUVsQixhQUFhLG1CQUFPLENBQUMsdUVBQVM7O0FBRTlCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDRGQUE0RixhQUFhO0FBQ3pHO0FBQ0E7O0FBRUEsK0NBQStDO0FBQy9DO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0I7QUFDbEI7QUFDQSwyQ0FBMkMsY0FBYzs7Ozs7Ozs7Ozs7O0FDOUN6RDtBQUNhOztBQUViLGtCQUFrQjs7QUFFbEIsa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxzQ0FBc0M7QUFDdEM7QUFDQSxHQUFHOztBQUVIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyQ0FBMkMsY0FBYzs7Ozs7Ozs7Ozs7O0FDN0I1Qzs7QUFFYixrQkFBa0I7QUFDbEIscUJBQXFCO0FBQ3JCLGdCQUFnQjtBQUNoQixtQkFBbUI7QUFDbkIsc0JBQXNCO0FBQ3RCLHFCQUFxQjtBQUNyQixZQUFZO0FBQ1o7O0FBRUEsdUNBQXVDLHVDQUF1Qzs7QUFFOUU7O0FBRUEsd0NBQXdDLDZCQUE2QixjQUFjLE9BQU8saUJBQWlCLG1CQUFtQix1QkFBdUIsZ0ZBQWdGLHlCQUF5Qjs7QUFFOVAsYUFBYSxtQkFBTyxDQUFDLHVFQUFTOztBQUU5Qjs7QUFFQSxpQkFBaUIsbUJBQU8sQ0FBQywrRUFBYTs7QUFFdEM7O0FBRUEsWUFBWSxtQkFBTyxDQUFDLHFFQUFROztBQUU1QixlQUFlLG1CQUFPLENBQUMsMkVBQVc7O0FBRWxDLDBCQUEwQixtQkFBTyxDQUFDLG1HQUF1Qjs7QUFFekQsMkJBQTJCLG1CQUFPLENBQUMsdUdBQXlCOztBQUU1RDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxPQUFPO0FBQ2pEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxzQkFBc0IsU0FBUztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLDZCQUE2QjtBQUM3Qjs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBLCtCQUErQjs7QUFFL0I7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkVBQTJFOztBQUUzRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04saUVBQWlFO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMkVBQTJFOztBQUUzRTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0VBQStFOztBQUUvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGdDQUFnQztBQUMxRCxHQUFHO0FBQ0g7QUFDQSwyQ0FBMkMsY0FBYzs7Ozs7Ozs7Ozs7O0FDblh6RDtBQUNhOztBQUViLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGtCQUFrQjtBQUNsQjtBQUNBLDJDQUEyQyxjQUFjOzs7Ozs7Ozs7Ozs7QUNkNUM7O0FBRWIsa0JBQWtCO0FBQ2xCLGNBQWM7QUFDZCxlQUFlO0FBQ2Ysd0JBQXdCO0FBQ3hCLGVBQWU7QUFDZixtQkFBbUI7QUFDbkIsbUJBQW1CO0FBQ25CLHlCQUF5QjtBQUN6QjtBQUNBLGFBQWE7QUFDYixZQUFZO0FBQ1osWUFBWTtBQUNaLGNBQWM7QUFDZCxjQUFjO0FBQ2QsY0FBYztBQUNkLGNBQWM7QUFDZDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtCQUFrQixzQkFBc0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsa0JBQWtCO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjs7QUFFbEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZUFBZTtBQUNmOztBQUVBO0FBQ0Esc0NBQXNDLFNBQVM7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLGNBQWM7Ozs7Ozs7Ozs7OztBQzNINUM7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCLHNCQUFzQjtBQUN4QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsbUNBQW1DO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHFCQUFxQixHQUFHLHdCQUF3QjtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUEsb0JBQW9CLHVCQUF1QjtBQUMzQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTs7Ozs7Ozs7Ozs7O0FDaEdhOztBQUViLFdBQVcsbUJBQU8sQ0FBQywyQ0FBUTtBQUMzQiwwQkFBMEIsbUJBQU8sQ0FBQywrREFBa0IsR0FBRyxtQkFBTyxDQUFDLHlEQUFlOzs7Ozs7Ozs7OztBQ0g5RSxrQkFBa0I7Ozs7Ozs7Ozs7QUNBbEIsa0JBQWtCOzs7Ozs7Ozs7Ozs7QUNBbEI7Ozs7Ozs7Ozs7Ozs7QUNBQTs7Ozs7Ozs7Ozs7OztBQ0FBOzs7Ozs7Ozs7Ozs7O0FDQUE7Ozs7Ozs7Ozs7Ozs7QUNBQTs7Ozs7Ozs7Ozs7OztBQ0FBOzs7Ozs7Ozs7Ozs7O0FDQUE7Ozs7Ozs7Ozs7Ozs7QUNBQTs7Ozs7Ozs7Ozs7OztBQ0FBOzs7Ozs7Ozs7Ozs7O0FDQUE7Ozs7Ozs7Ozs7Ozs7QUNBQTs7Ozs7Ozs7Ozs7OztBQ0FBOzs7Ozs7Ozs7Ozs7O0FDQUE7Ozs7Ozs7Ozs7O0FDQUEsbUNBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFD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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRDQUE0Qzs7QUFFNUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQ7O0FBRWpEO0FBQ0Esb0JBQW9CLGVBQWU7QUFDbkM7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSx1Q0FBdUM7QUFDdkM7O0FBRUE7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIOztBQUVBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1REFBdUQsV0FBVzs7QUFFbEU7QUFDQSxnREFBZ0Q7O0FB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QUNBO1dBQ0E7V0FDQTs7V0FFQTtXQUNBO1dBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3JGQW5aLG1CQUFPLENBQUMsb0VBQTRCLENBQUM7QUFFUDs7QUFFOUI7QUFDQUEsbUJBQU8sQ0FBQyxvSUFBNEQsQ0FBQztBQUNyRUEsbUJBQU8sQ0FBQywrR0FBZ0QsQ0FBQztBQUN6REEsbUJBQU8sQ0FBQyx1SEFBb0QsQ0FBQztBQUM3REEsbUJBQU8sQ0FBQywrSEFBd0QsQ0FBQzs7QUFFakU7QUFDZ0M7QUFDcUI7QUFDUjtBQUNRO0FBQ0o7QUFDMUI7QUFDMkI7QUFDRTtBQUNFOztBQUV0RDtBQUN5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvZW1iZWRfdmlld2Vycy9jdXN0b21fZWxlbWVudHMvcGRmX3ZpZXdlci9wZGYtdmlld2VyLmhicyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vY2xpZW50L2xheW91dC9hZG1pbmlzdHJhdGlvbi9yZXBvcy5oYnMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL2NsaWVudC9sYXlvdXQvYWRtaW5pc3RyYXRpb24vc3RhdHMuaGJzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvbGF5b3V0L2FkbWluaXN0cmF0aW9uL3VzZXIuaGJzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvbGF5b3V0L3dpZGdldHMvYXV0aC9yZXNldF9wYXNzd29yZC5oYnMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL2NsaWVudC9sYXlvdXQvd2lkZ2V0cy9hdXRoL3NpZ25pbi5oYnMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL2NsaWVudC9sYXlvdXQvd2lkZ2V0cy9hdXRoL3NpZ251cC5oYnMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL2NsaWVudC9sYXlvdXQvd2lkZ2V0cy9jb21wb25lbnRzL2Nhcm91c2VsL2Nhcm91c2VsX2Z1bGxzY3JlZW4uaGJzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvbGF5b3V0L3dpZGdldHMvY29tcG9uZW50cy9jYXJvdXNlbC9saXN0L2Nhcm91c2VsX2xpc3QuaGJzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvbGF5b3V0L3dpZGdldHMvY29tcG9uZW50cy9jYXJvdXNlbC9saXN0L2Nhcm91c2VsX2xpc3RfaXRlbS5oYnMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL2NsaWVudC9sYXlvdXQvd2lkZ2V0cy9jb21wb25lbnRzL2Nhcm91c2VsL292ZXJsYXkvY2Fyb3VzZWxfb3ZlcmxheS5oYnMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL2NsaWVudC9sYXlvdXQvd2lkZ2V0cy9jb21wb25lbnRzL2Nhcm91c2VsL3ZpZXdwb3J0L2Nhcm91c2VsX3ZpZXdwb3J0LmhicyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vY2xpZW50L2xheW91dC93aWRnZXRzL2NvbXBvbmVudHMvY29udGV4dF9hY3Rpb24uaGJzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvbGF5b3V0L3dpZGdldHMvY3JlYXRlX3JlcG9zL2NyZWF0ZV9yZXBvcy5oYnMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL2NsaWVudC9sYXlvdXQvd2lkZ2V0cy9kZWxldGVfcmVwb3MvZGVsZXRlX3JlcG9zLmhicyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vY2xpZW50L2xheW91dC93aWRnZXRzL2VkaXRfcmVwb3MvZWRpdF9yZXBvcy5oYnMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL2NsaWVudC9sYXlvdXQvd2lkZ2V0cy9yZXBvc19zZXR0aW5ncy9hZGRfYXV0aG9yaXphdGlvbi5oYnMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL2NsaWVudC9sYXlvdXQvd2lkZ2V0cy9yZXBvc19zZXR0aW5ncy9hdXRob3JpemF0aW9uLmhicyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vY2xpZW50L2xheW91dC93aWRnZXRzL3JlcG9zX3NldHRpbmdzL2luZm9zLmhicyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vY2xpZW50L2xheW91dC93aWRnZXRzL3Rvb2xiYXIvdG9vbGJhcl9tZW51LmhicyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vY2xpZW50L2xheW91dC93aWRnZXRzL3VwbG9hZC9kaXJlY3RvcnkuaGJzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvbGF5b3V0L3dpZGdldHMvdXBsb2FkL2ZpbGUuaGJzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvbGF5b3V0L3dpZGdldHMvdXBsb2FkL3VwbG9hZF9mb3JtLmhicyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vY2xpZW50L2xheW91dC93aWRnZXRzL3VzZXJfc2V0dGluZ3MvdXNlcl9pbmZvcy5oYnMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL2NsaWVudC9sYXlvdXQvd2lkZ2V0cy92aWV3cG9ydC9kaXJlY3RvcnkuaGJzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvbGF5b3V0L3dpZGdldHMvdmlld3BvcnQvZmlsZS5oYnMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL2NsaWVudC9sYXlvdXQvd2lkZ2V0cy92aWV3cG9ydC9tZW51cy9lZGl0X2RpcmVjdG9yeS5oYnMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL2NsaWVudC9sYXlvdXQvd2lkZ2V0cy92aWV3cG9ydC9tZW51cy9lZGl0X2ZpbGUuaGJzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvbGF5b3V0L3dpZGdldHMvdmlld3BvcnQvbWVudXMvbWFrZV9kaXJlY3RvcnkuaGJzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvY29tbW9uL3Rvb2xzL2NsaWVudF9zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL2NsaWVudC9jb21tb24vdG9vbHMvZmlsZXN5c3RlbS5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vY2xpZW50L2NvbW1vbi90b29scy9maWxlc3lzdGVtX3VwbG9hZC5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vY2xpZW50L2NvbW1vbi90b29scy9maWxlc3lzdGVtX3YyLmpzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvY29tbW9uL3Rvb2xzL2dldF9pdGVtX3RodW1ibmFpbC5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vY2xpZW50L2NvbW1vbi90b29scy9taW1lX3V0aWxzLmpzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvY29tbW9uL3Rvb2xzL25hdmlnYXRvci5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vY2xpZW50L2NvbW1vbi90b29scy91c2VyLmpzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvY29tbW9uL3Rvb2xzL3V0aWxzLmpzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvZW1iZWRfdmlld2Vycy9jdXN0b21fZWxlbWVudHMvZG9jdW1lbnQvY29kZS5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vY2xpZW50L2VtYmVkX3ZpZXdlcnMvY3VzdG9tX2VsZW1lbnRzL2RvY3VtZW50L21hcmtkb3duLmpzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvZW1iZWRfdmlld2Vycy9jdXN0b21fZWxlbWVudHMvcGRmX3ZpZXdlci9wZGYtdmlld2VyLmpzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvbGF5b3V0L2FkbWluaXN0cmF0aW9uL2FkbWluaXN0cmF0aW9uX3BhbmVsLmpzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvbGF5b3V0L2Ryb3BfYm94LmpzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvbGF5b3V0L2hhbmRsZWJhcnNfaGVscGVycy5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vY2xpZW50L2xheW91dC93aWRnZXRzL2F1dGgvYXV0aC5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vY2xpZW50L2xheW91dC93aWRnZXRzL2NvbXBvbmVudHMvY2Fyb3VzZWwvY2Fyb3VzZWwuanMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL2NsaWVudC9sYXlvdXQvd2lkZ2V0cy9jb21wb25lbnRzL2Nhcm91c2VsL2xpc3QvY2Fyb3VzZWxfbGlzdC5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vY2xpZW50L2xheW91dC93aWRnZXRzL2NvbXBvbmVudHMvY2Fyb3VzZWwvb3ZlcmxheS9jYXJvdXNlbF9vdmVybGF5LmpzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvbGF5b3V0L3dpZGdldHMvY29tcG9uZW50cy9jYXJvdXNlbC92aWV3cG9ydC9jYXJvdXNlbF92aWV3cG9ydC5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vY2xpZW50L2xheW91dC93aWRnZXRzL2NvbXBvbmVudHMvY29udGV4dF9hY3Rpb24uanMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL2NsaWVudC9sYXlvdXQvd2lkZ2V0cy9jb21wb25lbnRzL21lc3NhZ2VfYm94LmpzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvbGF5b3V0L3dpZGdldHMvY29tcG9uZW50cy9tb2RhbC5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vY2xpZW50L2xheW91dC93aWRnZXRzL2NyZWF0ZV9yZXBvcy9jcmVhdGUtcmVwb3MtZm9ybS5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vY2xpZW50L2xheW91dC93aWRnZXRzL2RlbGV0ZV9yZXBvcy9kZWxldGVfcmVwb3NfZm9ybS5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vY2xpZW50L2xheW91dC93aWRnZXRzL2VkaXRfcmVwb3MvZWRpdF9yZXBvc19mb3JtLmpzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvbGF5b3V0L3dpZGdldHMvcmVwb3Nfc2V0dGluZ3MvcmVwb3Nfc2V0dGluZ3MuanMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL2NsaWVudC9sYXlvdXQvd2lkZ2V0cy90b29sYmFyL3Rvb2xiYXIuanMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL2NsaWVudC9sYXlvdXQvd2lkZ2V0cy91cGxvYWQvdXBsb2FkX2Zvcm0uanMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL2NsaWVudC9sYXlvdXQvd2lkZ2V0cy91c2VyX3NldHRpbmdzL3VzZXJfc2V0dGluZ3MuanMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL2NsaWVudC9sYXlvdXQvd2lkZ2V0cy92aWV3cG9ydC9kaXJlY3RvcnlfY29udGVudC5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vY2xpZW50L2xheW91dC93aWRnZXRzL3ZpZXdwb3J0L2ZpbGVfbGlzdF9jdXN0b21pemF0aW9uLmpzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvbGF5b3V0L3dpZGdldHMvdmlld3BvcnQvZmlsdGVyL2Jhc2VfZmlsdGVyLmpzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvbGF5b3V0L3dpZGdldHMvdmlld3BvcnQvZmlsdGVyL2ZpbHRlcl9kYXRlLmpzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvbGF5b3V0L3dpZGdldHMvdmlld3BvcnQvZmlsdGVyL2ZpbHRlcl9sZXguanMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL2NsaWVudC9sYXlvdXQvd2lkZ2V0cy92aWV3cG9ydC9maWx0ZXIvZmlsdGVyX3NpemUuanMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL2NsaWVudC9sYXlvdXQvd2lkZ2V0cy92aWV3cG9ydC9maWx0ZXIvZmlsdGVyX3R5cGUuanMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL2NsaWVudC9sYXlvdXQvd2lkZ2V0cy92aWV3cG9ydC9pdGVtX2NvbnRleHRfYWN0aW9uLmpzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvbGF5b3V0L3dpZGdldHMvdmlld3BvcnQvcmVwb3NfYnVpbGRlci5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vbm9kZV9tb2R1bGVzL2RheWpzL2RheWpzLm1pbi5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vbm9kZV9tb2R1bGVzL2RheWpzL3BsdWdpbi91dGMuanMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMuanMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMucnVudGltZS5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9iYXNlLmpzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2NvbXBpbGVyL2FzdC5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9jb21waWxlci9iYXNlLmpzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2NvbXBpbGVyL2NvZGUtZ2VuLmpzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2NvbXBpbGVyL2NvbXBpbGVyLmpzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2NvbXBpbGVyL2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvY29tcGlsZXIvamF2YXNjcmlwdC1jb21waWxlci5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9jb21waWxlci9wYXJzZXIuanMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvY29tcGlsZXIvdmlzaXRvci5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9jb21waWxlci93aGl0ZXNwYWNlLWNvbnRyb2wuanMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvZGVjb3JhdG9ycy5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9kZWNvcmF0b3JzL2lubGluZS5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9leGNlcHRpb24uanMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvaGVscGVycy5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9oZWxwZXJzL2Jsb2NrLWhlbHBlci1taXNzaW5nLmpzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2hlbHBlcnMvZWFjaC5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9oZWxwZXJzL2hlbHBlci1taXNzaW5nLmpzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2hlbHBlcnMvaWYuanMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvaGVscGVycy9sb2cuanMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvaGVscGVycy9sb29rdXAuanMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvaGVscGVycy93aXRoLmpzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2ludGVybmFsL2NyZWF0ZS1uZXctbG9va3VwLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9pbnRlcm5hbC9wcm90by1hY2Nlc3MuanMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvaW50ZXJuYWwvd3JhcEhlbHBlci5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9sb2dnZXIuanMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvbm8tY29uZmxpY3QuanMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvcnVudGltZS5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9zYWZlLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy91dGlscy5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vbm9kZV9tb2R1bGVzL21pbWUvTWltZS5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vbm9kZV9tb2R1bGVzL21pbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL25vZGVfbW9kdWxlcy9taW1lL3R5cGVzL290aGVyLmpzIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9ub2RlX21vZHVsZXMvbWltZS90eXBlcy9zdGFuZGFyZC5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vY2xpZW50L2xheW91dC9hZG1pbmlzdHJhdGlvbi9hZG1pbmlzdHJhdGlvbi5zY3NzP2I3MmEiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL2NsaWVudC9sYXlvdXQvd2lkZ2V0cy9hdXRoL2F1dGguc2Nzcz83YzAwIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvbGF5b3V0L3dpZGdldHMvY29tcG9uZW50cy9jYXJvdXNlbC9jYXJvdXNlbC5zY3NzP2U0MjMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL2NsaWVudC9sYXlvdXQvd2lkZ2V0cy9jb21wb25lbnRzL2Nhcm91c2VsL2Nhcm91c2VsX2Z1bGxzY3JlZW4uc2Nzcz9mY2E3Iiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvbGF5b3V0L3dpZGdldHMvY3JlYXRlX3JlcG9zL2NyZWF0ZS1yZXBvcy5zY3NzP2E3ODgiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL2NsaWVudC9sYXlvdXQvd2lkZ2V0cy9kZWxldGVfcmVwb3MvZGVsZXRlLXJlcG9zLnNjc3M/ZDVlNyIsIndlYnBhY2s6Ly9ldmVucGllcnJlLy4vY2xpZW50L2xheW91dC93aWRnZXRzL2VkaXRfcmVwb3MvZWRpdC1yZXBvcy5zY3NzPzUwNmMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL2NsaWVudC9sYXlvdXQvd2lkZ2V0cy9yZXBvc19zZXR0aW5ncy9yZXBvc19zZXR0aW5ncy5zY3NzPzg3YTAiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL2NsaWVudC9sYXlvdXQvd2lkZ2V0cy90b29sYmFyL3Rvb2xiYXIuc2Nzcz81ZGNkIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvbGF5b3V0L3dpZGdldHMvdXBsb2FkL3VwbG9hZC5zY3NzPzYyMjAiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL2NsaWVudC9sYXlvdXQvd2lkZ2V0cy91c2VyX3NldHRpbmdzL3VzZXJfc2V0dGluZ3Muc2Nzcz8yZDM4Iiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvbGF5b3V0L3dpZGdldHMvdmlld3BvcnQvaXRlbS5zY3NzP2Q1MWMiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS8uL2NsaWVudC9zdHlsZXNoZWV0cy9sYXlvdXQuc2Nzcz9lYzcxIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9ub2RlX21vZHVsZXMvc2hvd2Rvd24vZGlzdC9zaG93ZG93bi5qcyIsIndlYnBhY2s6Ly9ldmVucGllcnJlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2V2ZW5waWVycmUvd2VicGFjay9ydW50aW1lL2NodW5rIGxvYWRlZCIsIndlYnBhY2s6Ly9ldmVucGllcnJlL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2V2ZW5waWVycmUvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2V2ZW5waWVycmUvd2VicGFjay9ydW50aW1lL2Vuc3VyZSBjaHVuayIsIndlYnBhY2s6Ly9ldmVucGllcnJlL3dlYnBhY2svcnVudGltZS9nZXQgamF2YXNjcmlwdCBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly9ldmVucGllcnJlL3dlYnBhY2svcnVudGltZS9nZXQgbWluaS1jc3MgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2V2ZW5waWVycmUvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9ldmVucGllcnJlL3dlYnBhY2svcnVudGltZS9sb2FkIHNjcmlwdCIsIndlYnBhY2s6Ly9ldmVucGllcnJlL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vZXZlbnBpZXJyZS93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9ldmVucGllcnJlL3dlYnBhY2svcnVudGltZS9jc3MgbG9hZGluZyIsIndlYnBhY2s6Ly9ldmVucGllcnJlL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL2V2ZW5waWVycmUvLi9jbGllbnQvbGF5b3V0L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuICAgICAgICBjb25zdCBIYW5kbGViYXJzID0gcmVxdWlyZSgnaGFuZGxlYmFycycpO1xuICAgICAgICBjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG5cbiAgICAgICAgLy8gVXNlZCB0byByZWdpc3RlciBjb250ZXh0c1xuICAgICAgICBpZiAoIWRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIpXG4gICAgICAgICAgICBkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyID0ge1xuICAgICAgICAgICAgICAgIF9fbmV4dF9vYmpfaWQ6IDAsXG4gICAgICAgICAgICAgICAgX19yZWdpc3RlcmVkX2N0eDoge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIEhhbmRsZWJhcnMuZ2V0X21pbWVfaWNvbnMgPSAoKSA9PiBKU09OLnBhcnNlKCd7XCJhcHBsaWNhdGlvblwiOntcImNvbnRlbnRcIjp7XCJqYXZhc2NyaXB0XCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vamF2YXNjcmlwdC5wbmdcIixcImpzb25cIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9qc29uLnBuZ1wiLFwicGRmXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vcGRmLnBuZ1wiLFwicmFyXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vcmFyLnBuZ1wiLFwidGFyXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vdGFyLnBuZ1wiLFwiemlwXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vemlwLnBuZ1wifSxcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi5wbmdcIn0sXCJhdWRpb1wiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hdWRpby5wbmdcIn0sXCJjaGVtaWNhbFwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9jaGVtaWNhbC5wbmdcIn0sXCJmb250XCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2ZvbnQucG5nXCJ9LFwiZ2NvZGVcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvZ2NvZGUucG5nXCJ9LFwiaW1hZ2VcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvaW1hZ2UucG5nXCJ9LFwibWVzc2FnZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9tZXNzYWdlLnBuZ1wifSxcIm1vZGVsXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL21vZGVsLnBuZ1wifSxcInRleHRcIjp7XCJjb250ZW50XCI6e1wiY3NzXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9jc3MucG5nXCIsXCJtYXJrZG93blwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvbWFya2Rvd24ucG5nXCIsXCJwbGFpblwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvcGxhaW4ucG5nXCIsXCJ0ZW1wbGF0ZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvdGVtcGxhdGUucG5nXCJ9LFwiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQucG5nXCJ9LFwidmlkZW9cIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdmlkZW8ucG5nXCJ9LFwieC1jb25mZXJlbmNlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3gtY29uZmVyZW5jZS5wbmdcIn19Jyk7XG4gICAgICAgIFxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IChkYXRhLCBjdHgpID0+IHtcbiAgICAgICAgICAgIGlmIChjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjdHhbJ19faGFuZGxlYmFyX2N0eF9pZCddKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5fX2hhbmRsZWJhcl9jdHhfaWQgPSArK2RvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIuX19uZXh0X29ial9pZDtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlci5fX3JlZ2lzdGVyZWRfY3R4W2N0eC5fX2hhbmRsZWJhcl9jdHhfaWRdID0gY3R4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkYXRhLl9faGFuZGxlYmFyX2N0eF9pZCA9IGN0eC5fX2hhbmRsZWJhcl9jdHhfaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGdlbmVyYXRlZF9odG1sID0gSGFuZGxlYmFycy50ZW1wbGF0ZSh7XCJjb21waWxlclwiOls4LFwiPj0gNC4zLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksIGFsaWFzMj1jb250YWluZXIuaG9va3MuaGVscGVyTWlzc2luZywgYWxpYXMzPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uLCBsb29rdXBQcm9wZXJ0eSA9IGNvbnRhaW5lci5sb29rdXBQcm9wZXJ0eSB8fCBmdW5jdGlvbihwYXJlbnQsIHByb3BlcnR5TmFtZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHBhcmVudCwgcHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgIHJldHVybiBwYXJlbnRbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfTtcblxuICByZXR1cm4gXCI8ZGl2IHN0eWxlPVxcXCJoZWlnaHQ6IDEwMCU7IGRpc3BsYXk6IGZsZXg7IGZsZXgtZGlyZWN0aW9uOmNvbHVtblxcXCI+XFxyXFxuICAgIDxkaXYgc3R5bGU9XFxcImRpc3BsYXk6IGZsZXg7IGJhY2tncm91bmQtY29sb3I6ICM0YjRiNGI7IGhlaWdodDogNDBweFxcXCI+XFxyXFxuICAgICAgICA8YnV0dG9uIG9uY2xpY2s9XFxcIlwiXG4gICAgKyBhbGlhczMoKGxvb2t1cFByb3BlcnR5KGhlbHBlcnMsXCJjdHhcIil8fChkZXB0aDAgJiYgbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiY3R4XCIpKXx8YWxpYXMyKS5jYWxsKGFsaWFzMSxcInBhZ2VfcHJldigpXCIse1wibmFtZVwiOlwiY3R4XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjMsXCJjb2x1bW5cIjoyNX0sXCJlbmRcIjp7XCJsaW5lXCI6MyxcImNvbHVtblwiOjQ2fX19KSlcbiAgICArIFwiXFxcIiBzdHlsZT1cXFwibWluLXdpZHRoOiAxNDBweDtcXFwiPlByZXY8L2J1dHRvbj5cXHJcXG4gICAgICAgIDxidXR0b24gb25jbGljaz1cXFwiXCJcbiAgICArIGFsaWFzMygobG9va3VwUHJvcGVydHkoaGVscGVycyxcImN0eFwiKXx8KGRlcHRoMCAmJiBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJjdHhcIikpfHxhbGlhczIpLmNhbGwoYWxpYXMxLFwicGFnZV9uZXh0KClcIix7XCJuYW1lXCI6XCJjdHhcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6NCxcImNvbHVtblwiOjI1fSxcImVuZFwiOntcImxpbmVcIjo0LFwiY29sdW1uXCI6NDZ9fX0pKVxuICAgICsgXCJcXFwiIHN0eWxlPVxcXCJtaW4td2lkdGg6IDE0MHB4O1xcXCI+TmV4dDwvYnV0dG9uPlxcclxcbiAgICAgICAgPGRpdiBzdHlsZT1cXFwiZmxleC1ncm93OiAxXFxcIj48L2Rpdj5cXHJcXG4gICAgICAgIDxidXR0b24gb25jbGljaz1cXFwiXCJcbiAgICArIGFsaWFzMygobG9va3VwUHJvcGVydHkoaGVscGVycyxcImN0eFwiKXx8KGRlcHRoMCAmJiBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJjdHhcIikpfHxhbGlhczIpLmNhbGwoYWxpYXMxLFwiZGV6b29tKClcIix7XCJuYW1lXCI6XCJjdHhcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6NixcImNvbHVtblwiOjI1fSxcImVuZFwiOntcImxpbmVcIjo2LFwiY29sdW1uXCI6NDN9fX0pKVxuICAgICsgXCJcXFwiIHN0eWxlPVxcXCJtaW4td2lkdGg6IDE0MHB4O1xcXCI+Wm9vbS08L2J1dHRvbj5cXHJcXG4gICAgICAgIDxidXR0b24gb25jbGljaz1cXFwiXCJcbiAgICArIGFsaWFzMygobG9va3VwUHJvcGVydHkoaGVscGVycyxcImN0eFwiKXx8KGRlcHRoMCAmJiBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJjdHhcIikpfHxhbGlhczIpLmNhbGwoYWxpYXMxLFwiem9vbSgpXCIse1wibmFtZVwiOlwiY3R4XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjcsXCJjb2x1bW5cIjoyNX0sXCJlbmRcIjp7XCJsaW5lXCI6NyxcImNvbHVtblwiOjQxfX19KSlcbiAgICArIFwiXFxcIiBzdHlsZT1cXFwibWluLXdpZHRoOiAxNDBweDtcXFwiPlpvb20rPC9idXR0b24+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2IHN0eWxlPVxcXCJwb3NpdGlvbjogcmVsYXRpdmU7IGZsZXgtZ3JvdzogMVxcXCI+XFxyXFxuICAgICAgICA8ZGl2IHN0eWxlPVxcXCJwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogMDsgbGVmdDogMDsgcmlnaHQ6IDA7IGJvdHRvbTogMDsgb3ZlcmZsb3cteTogYXV0bzsgZGlzcGxheTpmbGV4OyBqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyXFxcIj5cXHJcXG4gICAgICAgICAgICA8Y2FudmFzIHN0eWxlPVxcXCJoZWlnaHQ6Zml0LWNvbnRlbnRcXFwiPjwvY2FudmFzPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgIDwvZGl2PlxcclxcbjwvZGl2PlwiO1xufSxcInVzZURhdGFcIjp0cnVlfSkoZGF0YSk7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhnZW5lcmF0ZWRfaHRtbCwgJ3RleHQvaHRtbCcpLmJvZHk7XG4gICAgICAgICAgICBpZiAoYm9keS5jaGlsZHJlbi5sZW5ndGggPT09IDEpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJvZHkuY2hpbGRyZW5bMF07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEZvcmNlIGNoaWxkcmVuIGdlbmVyYXRpb25cbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJvZHkuY2hpbGRyZW4ubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChib2R5LmNoaWxkcmVuW2ldKTtcbiAgICAgICAgICAgIHJldHVybiBjaGlsZHJlbjtcbiAgICAgICAgfVxuICAgICAgICAiLCJcbiAgICAgICAgY29uc3QgSGFuZGxlYmFycyA9IHJlcXVpcmUoJ2hhbmRsZWJhcnMnKTtcbiAgICAgICAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuXG4gICAgICAgIC8vIFVzZWQgdG8gcmVnaXN0ZXIgY29udGV4dHNcbiAgICAgICAgaWYgKCFkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyKVxuICAgICAgICAgICAgZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlciA9IHtcbiAgICAgICAgICAgICAgICBfX25leHRfb2JqX2lkOiAwLFxuICAgICAgICAgICAgICAgIF9fcmVnaXN0ZXJlZF9jdHg6IHt9XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBIYW5kbGViYXJzLmdldF9taW1lX2ljb25zID0gKCkgPT4gSlNPTi5wYXJzZSgne1wiYXBwbGljYXRpb25cIjp7XCJjb250ZW50XCI6e1wiamF2YXNjcmlwdFwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL2phdmFzY3JpcHQucG5nXCIsXCJqc29uXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vanNvbi5wbmdcIixcInBkZlwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL3BkZi5wbmdcIixcInJhclwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL3Jhci5wbmdcIixcInRhclwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL3Rhci5wbmdcIixcInppcFwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL3ppcC5wbmdcIn0sXCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24ucG5nXCJ9LFwiYXVkaW9cIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXVkaW8ucG5nXCJ9LFwiY2hlbWljYWxcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvY2hlbWljYWwucG5nXCJ9LFwiZm9udFwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9mb250LnBuZ1wifSxcImdjb2RlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2djb2RlLnBuZ1wifSxcImltYWdlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2ltYWdlLnBuZ1wifSxcIm1lc3NhZ2VcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvbWVzc2FnZS5wbmdcIn0sXCJtb2RlbFwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9tb2RlbC5wbmdcIn0sXCJ0ZXh0XCI6e1wiY29udGVudFwiOntcImNzc1wiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvY3NzLnBuZ1wiLFwibWFya2Rvd25cIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L21hcmtkb3duLnBuZ1wiLFwicGxhaW5cIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L3BsYWluLnBuZ1wiLFwidGVtcGxhdGVcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L3RlbXBsYXRlLnBuZ1wifSxcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0LnBuZ1wifSxcInZpZGVvXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3ZpZGVvLnBuZ1wifSxcIngtY29uZmVyZW5jZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy94LWNvbmZlcmVuY2UucG5nXCJ9fScpO1xuICAgICAgICBcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSAoZGF0YSwgY3R4KSA9PiB7XG4gICAgICAgICAgICBpZiAoY3R4KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY3R4WydfX2hhbmRsZWJhcl9jdHhfaWQnXSkge1xuICAgICAgICAgICAgICAgICAgICBjdHguX19oYW5kbGViYXJfY3R4X2lkID0gKytkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyLl9fbmV4dF9vYmpfaWQ7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIuX19yZWdpc3RlcmVkX2N0eFtjdHguX19oYW5kbGViYXJfY3R4X2lkXSA9IGN0eDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGF0YS5fX2hhbmRsZWJhcl9jdHhfaWQgPSBjdHguX19oYW5kbGViYXJfY3R4X2lkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBnZW5lcmF0ZWRfaHRtbCA9IEhhbmRsZWJhcnMudGVtcGxhdGUoe1wiY29tcGlsZXJcIjpbOCxcIj49IDQuMy4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGhlbHBlciwgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksIGFsaWFzMj1jb250YWluZXIuaG9va3MuaGVscGVyTWlzc2luZywgYWxpYXMzPVwiZnVuY3Rpb25cIiwgYWxpYXM0PWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uLCBsb29rdXBQcm9wZXJ0eSA9IGNvbnRhaW5lci5sb29rdXBQcm9wZXJ0eSB8fCBmdW5jdGlvbihwYXJlbnQsIHByb3BlcnR5TmFtZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHBhcmVudCwgcHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgIHJldHVybiBwYXJlbnRbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfTtcblxuICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJhZG1pbi11c2VyXFxcIj5cXHJcXG4gICAgPHA+XCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiaWRcIikgfHwgKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiaWRcIikgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImlkXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjIsXCJjb2x1bW5cIjo3fSxcImVuZFwiOntcImxpbmVcIjoyLFwiY29sdW1uXCI6MTN9fX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvcD5cXHJcXG4gICAgPHA+XCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwibmFtZVwiKSB8fCAoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJuYW1lXCIpIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjMsXCJjb2x1bW5cIjo3fSxcImVuZFwiOntcImxpbmVcIjozLFwiY29sdW1uXCI6MTV9fX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvcD5cXHJcXG4gICAgPHA+XCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiZGlzcGxheV9uYW1lXCIpIHx8IChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcImRpc3BsYXlfbmFtZVwiKSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwiZGlzcGxheV9uYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjQsXCJjb2x1bW5cIjo3fSxcImVuZFwiOntcImxpbmVcIjo0LFwiY29sdW1uXCI6MjN9fX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvcD5cXHJcXG4gICAgPHA+XCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwib3duZXJcIikgfHwgKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwib3duZXJcIikgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcIm93bmVyXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjUsXCJjb2x1bW5cIjo3fSxcImVuZFwiOntcImxpbmVcIjo1LFwiY29sdW1uXCI6MTZ9fX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvcD5cXHJcXG4gICAgPHA+XCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiZGVzY3JpcHRpb25cIikgfHwgKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiZGVzY3JpcHRpb25cIikgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImRlc2NyaXB0aW9uXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjYsXCJjb2x1bW5cIjo3fSxcImVuZFwiOntcImxpbmVcIjo2LFwiY29sdW1uXCI6MjJ9fX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvcD5cXHJcXG4gICAgPHA+XCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwic3RhdHVzXCIpIHx8IChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcInN0YXR1c1wiKSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwic3RhdHVzXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjcsXCJjb2x1bW5cIjo3fSxcImVuZFwiOntcImxpbmVcIjo3LFwiY29sdW1uXCI6MTd9fX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvcD5cXHJcXG4gICAgPHA+XCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwidmlzaXRvcl9maWxlX2xpZmV0aW1lXCIpIHx8IChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcInZpc2l0b3JfZmlsZV9saWZldGltZVwiKSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwidmlzaXRvcl9maWxlX2xpZmV0aW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjgsXCJjb2x1bW5cIjo3fSxcImVuZFwiOntcImxpbmVcIjo4LFwiY29sdW1uXCI6MzJ9fX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvcD5cXHJcXG4gICAgPHA+XCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwibWF4X2ZpbGVfc2l6ZVwiKSB8fCAoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJtYXhfZmlsZV9zaXplXCIpIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJtYXhfZmlsZV9zaXplXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjksXCJjb2x1bW5cIjo3fSxcImVuZFwiOntcImxpbmVcIjo5LFwiY29sdW1uXCI6MjR9fX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvcD5cXHJcXG4gICAgPHA+XCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiYWxsb3dfdmlzaXRvcl91cGxvYWRcIikgfHwgKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiYWxsb3dfdmlzaXRvcl91cGxvYWRcIikgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImFsbG93X3Zpc2l0b3JfdXBsb2FkXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjEwLFwiY29sdW1uXCI6N30sXCJlbmRcIjp7XCJsaW5lXCI6MTAsXCJjb2x1bW5cIjozMX19fSkgOiBoZWxwZXIpKSlcbiAgICArIFwiPC9wPlxcclxcbjwvZGl2PlwiO1xufSxcInVzZURhdGFcIjp0cnVlfSkoZGF0YSk7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhnZW5lcmF0ZWRfaHRtbCwgJ3RleHQvaHRtbCcpLmJvZHk7XG4gICAgICAgICAgICBpZiAoYm9keS5jaGlsZHJlbi5sZW5ndGggPT09IDEpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJvZHkuY2hpbGRyZW5bMF07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEZvcmNlIGNoaWxkcmVuIGdlbmVyYXRpb25cbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJvZHkuY2hpbGRyZW4ubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChib2R5LmNoaWxkcmVuW2ldKTtcbiAgICAgICAgICAgIHJldHVybiBjaGlsZHJlbjtcbiAgICAgICAgfVxuICAgICAgICAiLCJcbiAgICAgICAgY29uc3QgSGFuZGxlYmFycyA9IHJlcXVpcmUoJ2hhbmRsZWJhcnMnKTtcbiAgICAgICAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuXG4gICAgICAgIC8vIFVzZWQgdG8gcmVnaXN0ZXIgY29udGV4dHNcbiAgICAgICAgaWYgKCFkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyKVxuICAgICAgICAgICAgZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlciA9IHtcbiAgICAgICAgICAgICAgICBfX25leHRfb2JqX2lkOiAwLFxuICAgICAgICAgICAgICAgIF9fcmVnaXN0ZXJlZF9jdHg6IHt9XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBIYW5kbGViYXJzLmdldF9taW1lX2ljb25zID0gKCkgPT4gSlNPTi5wYXJzZSgne1wiYXBwbGljYXRpb25cIjp7XCJjb250ZW50XCI6e1wiamF2YXNjcmlwdFwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL2phdmFzY3JpcHQucG5nXCIsXCJqc29uXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vanNvbi5wbmdcIixcInBkZlwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL3BkZi5wbmdcIixcInJhclwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL3Jhci5wbmdcIixcInRhclwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL3Rhci5wbmdcIixcInppcFwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL3ppcC5wbmdcIn0sXCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24ucG5nXCJ9LFwiYXVkaW9cIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXVkaW8ucG5nXCJ9LFwiY2hlbWljYWxcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvY2hlbWljYWwucG5nXCJ9LFwiZm9udFwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9mb250LnBuZ1wifSxcImdjb2RlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2djb2RlLnBuZ1wifSxcImltYWdlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2ltYWdlLnBuZ1wifSxcIm1lc3NhZ2VcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvbWVzc2FnZS5wbmdcIn0sXCJtb2RlbFwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9tb2RlbC5wbmdcIn0sXCJ0ZXh0XCI6e1wiY29udGVudFwiOntcImNzc1wiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvY3NzLnBuZ1wiLFwibWFya2Rvd25cIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L21hcmtkb3duLnBuZ1wiLFwicGxhaW5cIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L3BsYWluLnBuZ1wiLFwidGVtcGxhdGVcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L3RlbXBsYXRlLnBuZ1wifSxcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0LnBuZ1wifSxcInZpZGVvXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3ZpZGVvLnBuZ1wifSxcIngtY29uZmVyZW5jZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy94LWNvbmZlcmVuY2UucG5nXCJ9fScpO1xuICAgICAgICBcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSAoZGF0YSwgY3R4KSA9PiB7XG4gICAgICAgICAgICBpZiAoY3R4KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY3R4WydfX2hhbmRsZWJhcl9jdHhfaWQnXSkge1xuICAgICAgICAgICAgICAgICAgICBjdHguX19oYW5kbGViYXJfY3R4X2lkID0gKytkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyLl9fbmV4dF9vYmpfaWQ7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIuX19yZWdpc3RlcmVkX2N0eFtjdHguX19oYW5kbGViYXJfY3R4X2lkXSA9IGN0eDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGF0YS5fX2hhbmRsZWJhcl9jdHhfaWQgPSBjdHguX19oYW5kbGViYXJfY3R4X2lkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBnZW5lcmF0ZWRfaHRtbCA9IEhhbmRsZWJhcnMudGVtcGxhdGUoe1wiY29tcGlsZXJcIjpbOCxcIj49IDQuMy4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGhlbHBlciwgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksIGFsaWFzMj1jb250YWluZXIuaG9va3MuaGVscGVyTWlzc2luZywgYWxpYXMzPVwiZnVuY3Rpb25cIiwgYWxpYXM0PWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uLCBsb29rdXBQcm9wZXJ0eSA9IGNvbnRhaW5lci5sb29rdXBQcm9wZXJ0eSB8fCBmdW5jdGlvbihwYXJlbnQsIHByb3BlcnR5TmFtZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHBhcmVudCwgcHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgIHJldHVybiBwYXJlbnRbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfTtcblxuICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJhZG1pbi1zdGF0c1xcXCI+XFxyXFxuICAgIDxwPkRpcmVjdG9yeSBjb3VudCA6IFwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcImRpcnNcIikgfHwgKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiZGlyc1wiKSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwiZGlyc1wiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjoyLFwiY29sdW1uXCI6MjV9LFwiZW5kXCI6e1wibGluZVwiOjIsXCJjb2x1bW5cIjozM319fSkgOiBoZWxwZXIpKSlcbiAgICArIFwiPC9wPlxcclxcbiAgICA8cD5GaWxlIGNvdW50IDogXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiZmlsZXNcIikgfHwgKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiZmlsZXNcIikgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImZpbGVzXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjMsXCJjb2x1bW5cIjoyMH0sXCJlbmRcIjp7XCJsaW5lXCI6MyxcImNvbHVtblwiOjI5fX19KSA6IGhlbHBlcikpKVxuICAgICsgXCI8L3A+XFxyXFxuICAgIDxwPlJlYWwgZmlsZSBjb3VudCA6IFwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcImVmZmVjdGl2ZV9maWxlc1wiKSB8fCAoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJlZmZlY3RpdmVfZmlsZXNcIikgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImVmZmVjdGl2ZV9maWxlc1wiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjo0LFwiY29sdW1uXCI6MjV9LFwiZW5kXCI6e1wibGluZVwiOjQsXCJjb2x1bW5cIjo0NH19fSkgOiBoZWxwZXIpKSlcbiAgICArIFwiPC9wPlxcclxcbiAgICA8cD5Ub3RhbCBzaXplIDogXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwic2l6ZVwiKSB8fCAoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJzaXplXCIpIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJzaXplXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjUsXCJjb2x1bW5cIjoyMH0sXCJlbmRcIjp7XCJsaW5lXCI6NSxcImNvbHVtblwiOjI4fX19KSA6IGhlbHBlcikpKVxuICAgICsgXCI8L3A+XFxyXFxuICAgIDxwPlJlYWwgc2l6ZSA6IFwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcImVmZmVjdGl2ZV9zaXplXCIpIHx8IChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcImVmZmVjdGl2ZV9zaXplXCIpIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJlZmZlY3RpdmVfc2l6ZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjo2LFwiY29sdW1uXCI6MTl9LFwiZW5kXCI6e1wibGluZVwiOjYsXCJjb2x1bW5cIjozN319fSkgOiBoZWxwZXIpKSlcbiAgICArIFwiPC9wPlxcclxcbiAgICA8cD5UaHVtYm5haWwgY291bnQgOiBcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGxvb2t1cFByb3BlcnR5KGhlbHBlcnMsXCJ0aHVtYm5haWxzXCIpIHx8IChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcInRodW1ibmFpbHNcIikgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcInRodW1ibmFpbHNcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6NyxcImNvbHVtblwiOjI1fSxcImVuZFwiOntcImxpbmVcIjo3LFwiY29sdW1uXCI6Mzl9fX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvcD5cXHJcXG48L2Rpdj5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pKGRhdGEpO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoZ2VuZXJhdGVkX2h0bWwsICd0ZXh0L2h0bWwnKS5ib2R5O1xuICAgICAgICAgICAgaWYgKGJvZHkuY2hpbGRyZW4ubGVuZ3RoID09PSAxKVxuICAgICAgICAgICAgICAgIHJldHVybiBib2R5LmNoaWxkcmVuWzBdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBGb3JjZSBjaGlsZHJlbiBnZW5lcmF0aW9uXG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2R5LmNoaWxkcmVuLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2goYm9keS5jaGlsZHJlbltpXSk7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgICAgIH1cbiAgICAgICAgIiwiXG4gICAgICAgIGNvbnN0IEhhbmRsZWJhcnMgPSByZXF1aXJlKCdoYW5kbGViYXJzJyk7XG4gICAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcblxuICAgICAgICAvLyBVc2VkIHRvIHJlZ2lzdGVyIGNvbnRleHRzXG4gICAgICAgIGlmICghZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlcilcbiAgICAgICAgICAgIGRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIgPSB7XG4gICAgICAgICAgICAgICAgX19uZXh0X29ial9pZDogMCxcbiAgICAgICAgICAgICAgICBfX3JlZ2lzdGVyZWRfY3R4OiB7fVxuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgSGFuZGxlYmFycy5nZXRfbWltZV9pY29ucyA9ICgpID0+IEpTT04ucGFyc2UoJ3tcImFwcGxpY2F0aW9uXCI6e1wiY29udGVudFwiOntcImphdmFzY3JpcHRcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9qYXZhc2NyaXB0LnBuZ1wiLFwianNvblwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL2pzb24ucG5nXCIsXCJwZGZcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9wZGYucG5nXCIsXCJyYXJcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9yYXIucG5nXCIsXCJ0YXJcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi90YXIucG5nXCIsXCJ6aXBcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi96aXAucG5nXCJ9LFwiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uLnBuZ1wifSxcImF1ZGlvXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2F1ZGlvLnBuZ1wifSxcImNoZW1pY2FsXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2NoZW1pY2FsLnBuZ1wifSxcImZvbnRcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvZm9udC5wbmdcIn0sXCJnY29kZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9nY29kZS5wbmdcIn0sXCJpbWFnZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9pbWFnZS5wbmdcIn0sXCJtZXNzYWdlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL21lc3NhZ2UucG5nXCJ9LFwibW9kZWxcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvbW9kZWwucG5nXCJ9LFwidGV4dFwiOntcImNvbnRlbnRcIjp7XCJjc3NcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L2Nzcy5wbmdcIixcIm1hcmtkb3duXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9tYXJrZG93bi5wbmdcIixcInBsYWluXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9wbGFpbi5wbmdcIixcInRlbXBsYXRlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC90ZW1wbGF0ZS5wbmdcIn0sXCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC5wbmdcIn0sXCJ2aWRlb1wiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy92aWRlby5wbmdcIn0sXCJ4LWNvbmZlcmVuY2VcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMveC1jb25mZXJlbmNlLnBuZ1wifX0nKTtcbiAgICAgICAgXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gKGRhdGEsIGN0eCkgPT4ge1xuICAgICAgICAgICAgaWYgKGN0eCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWN0eFsnX19oYW5kbGViYXJfY3R4X2lkJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4Ll9faGFuZGxlYmFyX2N0eF9pZCA9ICsrZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlci5fX25leHRfb2JqX2lkO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyLl9fcmVnaXN0ZXJlZF9jdHhbY3R4Ll9faGFuZGxlYmFyX2N0eF9pZF0gPSBjdHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRhdGEuX19oYW5kbGViYXJfY3R4X2lkID0gY3R4Ll9faGFuZGxlYmFyX2N0eF9pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgZ2VuZXJhdGVkX2h0bWwgPSBIYW5kbGViYXJzLnRlbXBsYXRlKHtcIjFcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHJldHVybiBcInNlbGVjdGVkXCI7XG59LFwiY29tcGlsZXJcIjpbOCxcIj49IDQuMy4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMSwgaGVscGVyLCBhbGlhczE9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwgYWxpYXMyPWNvbnRhaW5lci5ob29rcy5oZWxwZXJNaXNzaW5nLCBhbGlhczM9XCJmdW5jdGlvblwiLCBhbGlhczQ9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24sIGxvb2t1cFByb3BlcnR5ID0gY29udGFpbmVyLmxvb2t1cFByb3BlcnR5IHx8IGZ1bmN0aW9uKHBhcmVudCwgcHJvcGVydHlOYW1lKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocGFyZW50LCBwcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcmVudFtwcm9wZXJ0eU5hbWVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9O1xuXG4gIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcImFkbWluLXVzZXJcXFwiPlxcclxcbiAgICA8cD5cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGxvb2t1cFByb3BlcnR5KGhlbHBlcnMsXCJpZFwiKSB8fCAoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJpZFwiKSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwiaWRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6MixcImNvbHVtblwiOjd9LFwiZW5kXCI6e1wibGluZVwiOjIsXCJjb2x1bW5cIjoxM319fSkgOiBoZWxwZXIpKSlcbiAgICArIFwiPC9wPlxcclxcbiAgICA8cD5cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGxvb2t1cFByb3BlcnR5KGhlbHBlcnMsXCJuYW1lXCIpIHx8IChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcIm5hbWVcIikgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6MyxcImNvbHVtblwiOjd9LFwiZW5kXCI6e1wibGluZVwiOjMsXCJjb2x1bW5cIjoxNX19fSkgOiBoZWxwZXIpKSlcbiAgICArIFwiPC9wPlxcclxcbiAgICA8cD5cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGxvb2t1cFByb3BlcnR5KGhlbHBlcnMsXCJlbWFpbFwiKSB8fCAoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJlbWFpbFwiKSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwiZW1haWxcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6NCxcImNvbHVtblwiOjd9LFwiZW5kXCI6e1wibGluZVwiOjQsXCJjb2x1bW5cIjoxNn19fSkgOiBoZWxwZXIpKSlcbiAgICArIFwiPC9wPlxcclxcbiAgICA8cD5yb2xlPC9wPlxcclxcbiAgICA8c2VsZWN0IG5hbWU9XFxcIlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcInJvbGVcIikgfHwgKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwicm9sZVwiKSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwicm9sZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjo2LFwiY29sdW1uXCI6MTh9LFwiZW5kXCI6e1wibGluZVwiOjYsXCJjb2x1bW5cIjoyNn19fSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIiBvbmNoYW5nZT1cXFwiXCJcbiAgICArIGFsaWFzNCgobG9va3VwUHJvcGVydHkoaGVscGVycyxcImN0eFwiKXx8KGRlcHRoMCAmJiBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJjdHhcIikpfHxhbGlhczIpLmNhbGwoYWxpYXMxLFwic2V0X3JvbGUoZXZlbnQpXCIse1wibmFtZVwiOlwiY3R4XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjYsXCJjb2x1bW5cIjozOH0sXCJlbmRcIjp7XCJsaW5lXCI6NixcImNvbHVtblwiOjYzfX19KSlcbiAgICArIFwiXFxcIj5cXHJcXG4gICAgICAgIDxvcHRpb24gdmFsdWU9XFxcImd1ZXN0XFxcIiBcIlxuICAgICsgKChzdGFjazEgPSBsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiaWZcIikuY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiaXNfZ3Vlc3RcIikgOiBkZXB0aDApLHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDEsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjo3LFwiY29sdW1uXCI6MzB9LFwiZW5kXCI6e1wibGluZVwiOjcsXCJjb2x1bW5cIjo2MX19fSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCI+R3Vlc3Q8L29wdGlvbj5cXHJcXG4gICAgICAgIDxvcHRpb24gdmFsdWU9XFxcInZpcFxcXCIgXCJcbiAgICArICgoc3RhY2sxID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcImlmXCIpLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcImlzX3ZpcFwiKSA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjgsXCJjb2x1bW5cIjoyOH0sXCJlbmRcIjp7XCJsaW5lXCI6OCxcImNvbHVtblwiOjU3fX19KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIj5WaXA8L29wdGlvbj5cXHJcXG4gICAgICAgIDxvcHRpb24gdmFsdWU9XFxcImFkbWluXFxcIiBcIlxuICAgICsgKChzdGFjazEgPSBsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiaWZcIikuY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiaXNfYWRtaW5cIikgOiBkZXB0aDApLHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDEsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjo5LFwiY29sdW1uXCI6MzB9LFwiZW5kXCI6e1wibGluZVwiOjksXCJjb2x1bW5cIjo2MX19fSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCI+QWRtaW48L29wdGlvbj5cXHJcXG4gICAgPC9zZWxlY3Q+XFxyXFxuICAgIDxwPlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcImFsbG93X2NvbnRhY3RcIikgfHwgKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiYWxsb3dfY29udGFjdFwiKSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwiYWxsb3dfY29udGFjdFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjoxMSxcImNvbHVtblwiOjd9LFwiZW5kXCI6e1wibGluZVwiOjExLFwiY29sdW1uXCI6MjR9fX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvcD5cXHJcXG48L2Rpdj5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pKGRhdGEpO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoZ2VuZXJhdGVkX2h0bWwsICd0ZXh0L2h0bWwnKS5ib2R5O1xuICAgICAgICAgICAgaWYgKGJvZHkuY2hpbGRyZW4ubGVuZ3RoID09PSAxKVxuICAgICAgICAgICAgICAgIHJldHVybiBib2R5LmNoaWxkcmVuWzBdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBGb3JjZSBjaGlsZHJlbiBnZW5lcmF0aW9uXG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2R5LmNoaWxkcmVuLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2goYm9keS5jaGlsZHJlbltpXSk7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgICAgIH1cbiAgICAgICAgIiwiXG4gICAgICAgIGNvbnN0IEhhbmRsZWJhcnMgPSByZXF1aXJlKCdoYW5kbGViYXJzJyk7XG4gICAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcblxuICAgICAgICAvLyBVc2VkIHRvIHJlZ2lzdGVyIGNvbnRleHRzXG4gICAgICAgIGlmICghZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlcilcbiAgICAgICAgICAgIGRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIgPSB7XG4gICAgICAgICAgICAgICAgX19uZXh0X29ial9pZDogMCxcbiAgICAgICAgICAgICAgICBfX3JlZ2lzdGVyZWRfY3R4OiB7fVxuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgSGFuZGxlYmFycy5nZXRfbWltZV9pY29ucyA9ICgpID0+IEpTT04ucGFyc2UoJ3tcImFwcGxpY2F0aW9uXCI6e1wiY29udGVudFwiOntcImphdmFzY3JpcHRcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9qYXZhc2NyaXB0LnBuZ1wiLFwianNvblwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL2pzb24ucG5nXCIsXCJwZGZcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9wZGYucG5nXCIsXCJyYXJcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9yYXIucG5nXCIsXCJ0YXJcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi90YXIucG5nXCIsXCJ6aXBcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi96aXAucG5nXCJ9LFwiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uLnBuZ1wifSxcImF1ZGlvXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2F1ZGlvLnBuZ1wifSxcImNoZW1pY2FsXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2NoZW1pY2FsLnBuZ1wifSxcImZvbnRcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvZm9udC5wbmdcIn0sXCJnY29kZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9nY29kZS5wbmdcIn0sXCJpbWFnZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9pbWFnZS5wbmdcIn0sXCJtZXNzYWdlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL21lc3NhZ2UucG5nXCJ9LFwibW9kZWxcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvbW9kZWwucG5nXCJ9LFwidGV4dFwiOntcImNvbnRlbnRcIjp7XCJjc3NcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L2Nzcy5wbmdcIixcIm1hcmtkb3duXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9tYXJrZG93bi5wbmdcIixcInBsYWluXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9wbGFpbi5wbmdcIixcInRlbXBsYXRlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC90ZW1wbGF0ZS5wbmdcIn0sXCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC5wbmdcIn0sXCJ2aWRlb1wiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy92aWRlby5wbmdcIn0sXCJ4LWNvbmZlcmVuY2VcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMveC1jb25mZXJlbmNlLnBuZ1wifX0nKTtcbiAgICAgICAgXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gKGRhdGEsIGN0eCkgPT4ge1xuICAgICAgICAgICAgaWYgKGN0eCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWN0eFsnX19oYW5kbGViYXJfY3R4X2lkJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4Ll9faGFuZGxlYmFyX2N0eF9pZCA9ICsrZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlci5fX25leHRfb2JqX2lkO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyLl9fcmVnaXN0ZXJlZF9jdHhbY3R4Ll9faGFuZGxlYmFyX2N0eF9pZF0gPSBjdHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRhdGEuX19oYW5kbGViYXJfY3R4X2lkID0gY3R4Ll9faGFuZGxlYmFyX2N0eF9pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgZ2VuZXJhdGVkX2h0bWwgPSBIYW5kbGViYXJzLnRlbXBsYXRlKHtcImNvbXBpbGVyXCI6WzgsXCI+PSA0LjMuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBsb29rdXBQcm9wZXJ0eSA9IGNvbnRhaW5lci5sb29rdXBQcm9wZXJ0eSB8fCBmdW5jdGlvbihwYXJlbnQsIHByb3BlcnR5TmFtZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHBhcmVudCwgcHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgIHJldHVybiBwYXJlbnRbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfTtcblxuICByZXR1cm4gXCI8aDE+UsOpaW5pdGlhbGlzYXRpb24gZHUgbW90IGRlIHBhc3NlPC9oMT5cXHJcXG48Zm9ybSBvbnN1Ym1pdD1cXFwiXCJcbiAgICArIGNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uKChsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiY3R4XCIpfHwoZGVwdGgwICYmIGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcImN0eFwiKSl8fGNvbnRhaW5lci5ob29rcy5oZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksXCJyZXNldChldmVudClcIix7XCJuYW1lXCI6XCJjdHhcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6MixcImNvbHVtblwiOjE2fSxcImVuZFwiOntcImxpbmVcIjoyLFwiY29sdW1uXCI6Mzh9fX0pKVxuICAgICsgXCJcXFwiPlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJmaWVsZFxcXCI+XFxyXFxuICAgICAgICA8bGFiZWwgZm9yPSdwYXNzd29yZCc+XFxyXFxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcInBhc3N3b3JkXFxcIiBuYW1lPVxcXCJwYXNzd29yZFxcXCIgcGxhY2Vob2xkZXI9XFxcIk1vdCBkZSBwYXNzZVxcXCIgaWQ9XFxcInBhc3N3b3JkXFxcIiByZXF1aXJlZD5cXHJcXG4gICAgICAgIDwvbGFiZWw+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8aW5wdXQgdHlwZT1cXFwic3VibWl0XFxcIiB2YWx1ZT1cXFwiUsOpaW5pdGlhbGlzZXIgbGUgbW90IGRlIHBhc3NlXFxcIj5cXHJcXG48L2Zvcm0+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KShkYXRhKTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKGdlbmVyYXRlZF9odG1sLCAndGV4dC9odG1sJykuYm9keTtcbiAgICAgICAgICAgIGlmIChib2R5LmNoaWxkcmVuLmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICAgICAgICByZXR1cm4gYm9keS5jaGlsZHJlblswXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRm9yY2UgY2hpbGRyZW4gZ2VuZXJhdGlvblxuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm9keS5jaGlsZHJlbi5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICBjaGlsZHJlbi5wdXNoKGJvZHkuY2hpbGRyZW5baV0pO1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgICAgICB9XG4gICAgICAgICIsIlxuICAgICAgICBjb25zdCBIYW5kbGViYXJzID0gcmVxdWlyZSgnaGFuZGxlYmFycycpO1xuICAgICAgICBjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG5cbiAgICAgICAgLy8gVXNlZCB0byByZWdpc3RlciBjb250ZXh0c1xuICAgICAgICBpZiAoIWRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIpXG4gICAgICAgICAgICBkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyID0ge1xuICAgICAgICAgICAgICAgIF9fbmV4dF9vYmpfaWQ6IDAsXG4gICAgICAgICAgICAgICAgX19yZWdpc3RlcmVkX2N0eDoge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIEhhbmRsZWJhcnMuZ2V0X21pbWVfaWNvbnMgPSAoKSA9PiBKU09OLnBhcnNlKCd7XCJhcHBsaWNhdGlvblwiOntcImNvbnRlbnRcIjp7XCJqYXZhc2NyaXB0XCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vamF2YXNjcmlwdC5wbmdcIixcImpzb25cIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9qc29uLnBuZ1wiLFwicGRmXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vcGRmLnBuZ1wiLFwicmFyXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vcmFyLnBuZ1wiLFwidGFyXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vdGFyLnBuZ1wiLFwiemlwXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vemlwLnBuZ1wifSxcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi5wbmdcIn0sXCJhdWRpb1wiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hdWRpby5wbmdcIn0sXCJjaGVtaWNhbFwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9jaGVtaWNhbC5wbmdcIn0sXCJmb250XCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2ZvbnQucG5nXCJ9LFwiZ2NvZGVcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvZ2NvZGUucG5nXCJ9LFwiaW1hZ2VcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvaW1hZ2UucG5nXCJ9LFwibWVzc2FnZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9tZXNzYWdlLnBuZ1wifSxcIm1vZGVsXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL21vZGVsLnBuZ1wifSxcInRleHRcIjp7XCJjb250ZW50XCI6e1wiY3NzXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9jc3MucG5nXCIsXCJtYXJrZG93blwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvbWFya2Rvd24ucG5nXCIsXCJwbGFpblwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvcGxhaW4ucG5nXCIsXCJ0ZW1wbGF0ZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvdGVtcGxhdGUucG5nXCJ9LFwiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQucG5nXCJ9LFwidmlkZW9cIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdmlkZW8ucG5nXCJ9LFwieC1jb25mZXJlbmNlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3gtY29uZmVyZW5jZS5wbmdcIn19Jyk7XG4gICAgICAgIFxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IChkYXRhLCBjdHgpID0+IHtcbiAgICAgICAgICAgIGlmIChjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjdHhbJ19faGFuZGxlYmFyX2N0eF9pZCddKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5fX2hhbmRsZWJhcl9jdHhfaWQgPSArK2RvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIuX19uZXh0X29ial9pZDtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlci5fX3JlZ2lzdGVyZWRfY3R4W2N0eC5fX2hhbmRsZWJhcl9jdHhfaWRdID0gY3R4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkYXRhLl9faGFuZGxlYmFyX2N0eF9pZCA9IGN0eC5fX2hhbmRsZWJhcl9jdHhfaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGdlbmVyYXRlZF9odG1sID0gSGFuZGxlYmFycy50ZW1wbGF0ZSh7XCJjb21waWxlclwiOls4LFwiPj0gNC4zLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksIGFsaWFzMj1jb250YWluZXIuaG9va3MuaGVscGVyTWlzc2luZywgYWxpYXMzPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uLCBsb29rdXBQcm9wZXJ0eSA9IGNvbnRhaW5lci5sb29rdXBQcm9wZXJ0eSB8fCBmdW5jdGlvbihwYXJlbnQsIHByb3BlcnR5TmFtZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHBhcmVudCwgcHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgIHJldHVybiBwYXJlbnRbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfTtcblxuICByZXR1cm4gXCI8aDE+Q29ubmV4aW9uPC9oMT5cXHJcXG48Zm9ybSBvbnN1Ym1pdD1cXFwiXCJcbiAgICArIGFsaWFzMygobG9va3VwUHJvcGVydHkoaGVscGVycyxcImN0eFwiKXx8KGRlcHRoMCAmJiBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJjdHhcIikpfHxhbGlhczIpLmNhbGwoYWxpYXMxLFwic2lnbmluKGV2ZW50KVwiLHtcIm5hbWVcIjpcImN0eFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjoyLFwiY29sdW1uXCI6MTZ9LFwiZW5kXCI6e1wibGluZVwiOjIsXCJjb2x1bW5cIjozOX19fSkpXG4gICAgKyBcIlxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImZpZWxkXFxcIj5cXHJcXG4gICAgICAgIDxsYWJlbCBmb3I9J3VzZXJuYW1lJz5cXHJcXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgbmFtZT1cXFwidXNlcm5hbWVcXFwiIHBsYWNlaG9sZGVyPVxcXCJOb20gZCd1dGlsaXNhdGV1clxcXCIgaWQ9XFxcInVzZXJuYW1lXFxcIiByZXF1aXJlZD5cXHJcXG4gICAgICAgIDwvbGFiZWw+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJmaWVsZFxcXCI+XFxyXFxuICAgICAgICA8bGFiZWwgZm9yPSdwYXNzd29yZCc+XFxyXFxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcInBhc3N3b3JkXFxcIiBuYW1lPVxcXCJwYXNzd29yZFxcXCIgcGxhY2Vob2xkZXI9XFxcIk1vdCBkZSBwYXNzZVxcXCIgaWQ9XFxcInBhc3N3b3JkXFxcIiByZXF1aXJlZD5cXHJcXG4gICAgICAgIDwvbGFiZWw+XFxyXFxuICAgIDwvZGl2PlxcclxcblxcclxcbiAgICA8aW5wdXQgdHlwZT1cXFwic3VibWl0XFxcIiB2YWx1ZT1cXFwiU2UgY29ubmVjdGVyXFxcIj5cXHJcXG4gICAgPGEgaWQ9XFxcImZvcmdvdC1wYXNzd29yZFxcXCIgb25jbGljaz1cXFwiXCJcbiAgICArIGFsaWFzMygobG9va3VwUHJvcGVydHkoaGVscGVycyxcImN0eFwiKXx8KGRlcHRoMCAmJiBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJjdHhcIikpfHxhbGlhczIpLmNhbGwoYWxpYXMxLFwicmVzZXRfcGFzc3dvcmQoKVwiLHtcIm5hbWVcIjpcImN0eFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjoxNSxcImNvbHVtblwiOjM3fSxcImVuZFwiOntcImxpbmVcIjoxNSxcImNvbHVtblwiOjYzfX19KSlcbiAgICArIFwiXFxcIj5tb3QgZGUgcGFzc2Ugb3VibGnDqTwvYT5cXHJcXG4gICAgPGRpdiBjbGFzcz0nZm9vdGVyJz5cXHJcXG4gICAgICAgIDxwPlBhcyBlbmNvcmUgZGUgY29tcHRlID88L3A+IDxhIGhyZWY9XFxcImphdmFzY3JpcHQ6d2luZG93LmF1dGgub3Blbl9tb2RhbF9zaWdudXAoKTtcXFwiPkNyw6llciB1biBjb21wdGU8L2E+XFxyXFxuICAgIDwvZGl2PlxcclxcbjwvZm9ybT5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pKGRhdGEpO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoZ2VuZXJhdGVkX2h0bWwsICd0ZXh0L2h0bWwnKS5ib2R5O1xuICAgICAgICAgICAgaWYgKGJvZHkuY2hpbGRyZW4ubGVuZ3RoID09PSAxKVxuICAgICAgICAgICAgICAgIHJldHVybiBib2R5LmNoaWxkcmVuWzBdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBGb3JjZSBjaGlsZHJlbiBnZW5lcmF0aW9uXG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2R5LmNoaWxkcmVuLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2goYm9keS5jaGlsZHJlbltpXSk7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgICAgIH1cbiAgICAgICAgIiwiXG4gICAgICAgIGNvbnN0IEhhbmRsZWJhcnMgPSByZXF1aXJlKCdoYW5kbGViYXJzJyk7XG4gICAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcblxuICAgICAgICAvLyBVc2VkIHRvIHJlZ2lzdGVyIGNvbnRleHRzXG4gICAgICAgIGlmICghZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlcilcbiAgICAgICAgICAgIGRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIgPSB7XG4gICAgICAgICAgICAgICAgX19uZXh0X29ial9pZDogMCxcbiAgICAgICAgICAgICAgICBfX3JlZ2lzdGVyZWRfY3R4OiB7fVxuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgSGFuZGxlYmFycy5nZXRfbWltZV9pY29ucyA9ICgpID0+IEpTT04ucGFyc2UoJ3tcImFwcGxpY2F0aW9uXCI6e1wiY29udGVudFwiOntcImphdmFzY3JpcHRcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9qYXZhc2NyaXB0LnBuZ1wiLFwianNvblwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL2pzb24ucG5nXCIsXCJwZGZcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9wZGYucG5nXCIsXCJyYXJcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9yYXIucG5nXCIsXCJ0YXJcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi90YXIucG5nXCIsXCJ6aXBcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi96aXAucG5nXCJ9LFwiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uLnBuZ1wifSxcImF1ZGlvXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2F1ZGlvLnBuZ1wifSxcImNoZW1pY2FsXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2NoZW1pY2FsLnBuZ1wifSxcImZvbnRcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvZm9udC5wbmdcIn0sXCJnY29kZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9nY29kZS5wbmdcIn0sXCJpbWFnZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9pbWFnZS5wbmdcIn0sXCJtZXNzYWdlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL21lc3NhZ2UucG5nXCJ9LFwibW9kZWxcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvbW9kZWwucG5nXCJ9LFwidGV4dFwiOntcImNvbnRlbnRcIjp7XCJjc3NcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L2Nzcy5wbmdcIixcIm1hcmtkb3duXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9tYXJrZG93bi5wbmdcIixcInBsYWluXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9wbGFpbi5wbmdcIixcInRlbXBsYXRlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC90ZW1wbGF0ZS5wbmdcIn0sXCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC5wbmdcIn0sXCJ2aWRlb1wiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy92aWRlby5wbmdcIn0sXCJ4LWNvbmZlcmVuY2VcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMveC1jb25mZXJlbmNlLnBuZ1wifX0nKTtcbiAgICAgICAgXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gKGRhdGEsIGN0eCkgPT4ge1xuICAgICAgICAgICAgaWYgKGN0eCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWN0eFsnX19oYW5kbGViYXJfY3R4X2lkJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4Ll9faGFuZGxlYmFyX2N0eF9pZCA9ICsrZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlci5fX25leHRfb2JqX2lkO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyLl9fcmVnaXN0ZXJlZF9jdHhbY3R4Ll9faGFuZGxlYmFyX2N0eF9pZF0gPSBjdHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRhdGEuX19oYW5kbGViYXJfY3R4X2lkID0gY3R4Ll9faGFuZGxlYmFyX2N0eF9pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgZ2VuZXJhdGVkX2h0bWwgPSBIYW5kbGViYXJzLnRlbXBsYXRlKHtcImNvbXBpbGVyXCI6WzgsXCI+PSA0LjMuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBsb29rdXBQcm9wZXJ0eSA9IGNvbnRhaW5lci5sb29rdXBQcm9wZXJ0eSB8fCBmdW5jdGlvbihwYXJlbnQsIHByb3BlcnR5TmFtZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHBhcmVudCwgcHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgIHJldHVybiBwYXJlbnRbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfTtcblxuICByZXR1cm4gXCI8aDE+Q3LDqWVyIHVuIGNvbXB0ZTwvaDE+XFxyXFxuPGZvcm0gb25zdWJtaXQ9XFxcIlwiXG4gICAgKyBjb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbigobG9va3VwUHJvcGVydHkoaGVscGVycyxcImN0eFwiKXx8KGRlcHRoMCAmJiBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJjdHhcIikpfHxjb250YWluZXIuaG9va3MuaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLFwic2lnbnVwKGV2ZW50KVwiLHtcIm5hbWVcIjpcImN0eFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjoyLFwiY29sdW1uXCI6MTZ9LFwiZW5kXCI6e1wibGluZVwiOjIsXCJjb2x1bW5cIjozOX19fSkpXG4gICAgKyBcIlxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImZpZWxkXFxcIj5cXHJcXG4gICAgICAgIDxsYWJlbCBmb3I9J3VzZXJuYW1lJz5cXHJcXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgbmFtZT1cXFwidXNlcm5hbWVcXFwiIHBsYWNlaG9sZGVyPVxcXCJOb20gZCd1dGlsaXNhdGV1clxcXCIgaWQ9XFxcInVzZXJuYW1lXFxcIiByZXF1aXJlZD5cXHJcXG4gICAgICAgIDwvbGFiZWw+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJmaWVsZFxcXCI+XFxyXFxuICAgICAgICA8bGFiZWwgZm9yPSdlbWFpbCc+XFxyXFxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcImVtYWlsXFxcIiBuYW1lPVxcXCJlbWFpbFxcXCIgcGxhY2Vob2xkZXI9XFxcImUtbWFpbFxcXCIgaWQ9XFxcImVtYWlsXFxcIiByZXF1aXJlZD5cXHJcXG4gICAgICAgIDwvbGFiZWw+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJmaWVsZFxcXCI+XFxyXFxuICAgICAgICA8bGFiZWwgZm9yPSdwYXNzd29yZCc+XFxyXFxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcInBhc3N3b3JkXFxcIiBuYW1lPVxcXCJwYXNzd29yZFxcXCIgcGxhY2Vob2xkZXI9XFxcIk1vdCBkZSBwYXNzZVxcXCIgaWQ9XFxcInBhc3N3b3JkXFxcIiByZXF1aXJlZD5cXHJcXG4gICAgICAgIDwvbGFiZWw+XFxyXFxuICAgIDwvZGl2PlxcclxcblxcclxcbiAgICA8aW5wdXQgdHlwZT1cXFwic3VibWl0XFxcIiB2YWx1ZT1cXFwiQ3LDqWVyIHVuIGNvbXB0ZVxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9J2Zvb3Rlcic+XFxyXFxuICAgICAgICA8cD5Ew6lqw6AgbWVtYnJlID88L3A+IDxhIGhyZWY9XFxcImphdmFzY3JpcHQ6d2luZG93LmF1dGgub3Blbl9tb2RhbF9zaWduaW4oKTtcXFwiPlNlIGNvbm5lY3RlciDDoCB2b3RyZVxcclxcbiAgICAgICAgY29tcHRlPC9hPlxcclxcbiAgICA8L2Rpdj5cXHJcXG48L2Zvcm0+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KShkYXRhKTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKGdlbmVyYXRlZF9odG1sLCAndGV4dC9odG1sJykuYm9keTtcbiAgICAgICAgICAgIGlmIChib2R5LmNoaWxkcmVuLmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICAgICAgICByZXR1cm4gYm9keS5jaGlsZHJlblswXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRm9yY2UgY2hpbGRyZW4gZ2VuZXJhdGlvblxuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm9keS5jaGlsZHJlbi5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICBjaGlsZHJlbi5wdXNoKGJvZHkuY2hpbGRyZW5baV0pO1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgICAgICB9XG4gICAgICAgICIsIlxuICAgICAgICBjb25zdCBIYW5kbGViYXJzID0gcmVxdWlyZSgnaGFuZGxlYmFycycpO1xuICAgICAgICBjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG5cbiAgICAgICAgLy8gVXNlZCB0byByZWdpc3RlciBjb250ZXh0c1xuICAgICAgICBpZiAoIWRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIpXG4gICAgICAgICAgICBkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyID0ge1xuICAgICAgICAgICAgICAgIF9fbmV4dF9vYmpfaWQ6IDAsXG4gICAgICAgICAgICAgICAgX19yZWdpc3RlcmVkX2N0eDoge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIEhhbmRsZWJhcnMuZ2V0X21pbWVfaWNvbnMgPSAoKSA9PiBKU09OLnBhcnNlKCd7XCJhcHBsaWNhdGlvblwiOntcImNvbnRlbnRcIjp7XCJqYXZhc2NyaXB0XCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vamF2YXNjcmlwdC5wbmdcIixcImpzb25cIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9qc29uLnBuZ1wiLFwicGRmXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vcGRmLnBuZ1wiLFwicmFyXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vcmFyLnBuZ1wiLFwidGFyXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vdGFyLnBuZ1wiLFwiemlwXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vemlwLnBuZ1wifSxcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi5wbmdcIn0sXCJhdWRpb1wiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hdWRpby5wbmdcIn0sXCJjaGVtaWNhbFwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9jaGVtaWNhbC5wbmdcIn0sXCJmb250XCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2ZvbnQucG5nXCJ9LFwiZ2NvZGVcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvZ2NvZGUucG5nXCJ9LFwiaW1hZ2VcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvaW1hZ2UucG5nXCJ9LFwibWVzc2FnZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9tZXNzYWdlLnBuZ1wifSxcIm1vZGVsXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL21vZGVsLnBuZ1wifSxcInRleHRcIjp7XCJjb250ZW50XCI6e1wiY3NzXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9jc3MucG5nXCIsXCJtYXJrZG93blwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvbWFya2Rvd24ucG5nXCIsXCJwbGFpblwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvcGxhaW4ucG5nXCIsXCJ0ZW1wbGF0ZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvdGVtcGxhdGUucG5nXCJ9LFwiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQucG5nXCJ9LFwidmlkZW9cIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdmlkZW8ucG5nXCJ9LFwieC1jb25mZXJlbmNlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3gtY29uZmVyZW5jZS5wbmdcIn19Jyk7XG4gICAgICAgIFxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IChkYXRhLCBjdHgpID0+IHtcbiAgICAgICAgICAgIGlmIChjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjdHhbJ19faGFuZGxlYmFyX2N0eF9pZCddKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5fX2hhbmRsZWJhcl9jdHhfaWQgPSArK2RvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIuX19uZXh0X29ial9pZDtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlci5fX3JlZ2lzdGVyZWRfY3R4W2N0eC5fX2hhbmRsZWJhcl9jdHhfaWRdID0gY3R4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkYXRhLl9faGFuZGxlYmFyX2N0eF9pZCA9IGN0eC5fX2hhbmRsZWJhcl9jdHhfaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGdlbmVyYXRlZF9odG1sID0gSGFuZGxlYmFycy50ZW1wbGF0ZSh7XCJjb21waWxlclwiOls4LFwiPj0gNC4zLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICByZXR1cm4gXCI8ZGl2IGlkPVxcXCJjYXJvdXNlbC1mdWxsc2NyZWVuLWJhY2tncm91bmRcXFwiPlxcclxcbiAgICA8ZGl2IGlkPVxcXCJjYXJvdXNlbC1mdWxsc2NyZWVuXFxcIj48L2Rpdj5cXHJcXG4gICAgPGRpdiBpZD1cXFwiY2Fyb3VzZWwtZnVsbHNjcmVlbi1saXN0XFxcIj48L2Rpdj5cXHJcXG48L2Rpdj5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pKGRhdGEpO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoZ2VuZXJhdGVkX2h0bWwsICd0ZXh0L2h0bWwnKS5ib2R5O1xuICAgICAgICAgICAgaWYgKGJvZHkuY2hpbGRyZW4ubGVuZ3RoID09PSAxKVxuICAgICAgICAgICAgICAgIHJldHVybiBib2R5LmNoaWxkcmVuWzBdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBGb3JjZSBjaGlsZHJlbiBnZW5lcmF0aW9uXG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2R5LmNoaWxkcmVuLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2goYm9keS5jaGlsZHJlbltpXSk7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgICAgIH1cbiAgICAgICAgIiwiXG4gICAgICAgIGNvbnN0IEhhbmRsZWJhcnMgPSByZXF1aXJlKCdoYW5kbGViYXJzJyk7XG4gICAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcblxuICAgICAgICAvLyBVc2VkIHRvIHJlZ2lzdGVyIGNvbnRleHRzXG4gICAgICAgIGlmICghZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlcilcbiAgICAgICAgICAgIGRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIgPSB7XG4gICAgICAgICAgICAgICAgX19uZXh0X29ial9pZDogMCxcbiAgICAgICAgICAgICAgICBfX3JlZ2lzdGVyZWRfY3R4OiB7fVxuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgSGFuZGxlYmFycy5nZXRfbWltZV9pY29ucyA9ICgpID0+IEpTT04ucGFyc2UoJ3tcImFwcGxpY2F0aW9uXCI6e1wiY29udGVudFwiOntcImphdmFzY3JpcHRcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9qYXZhc2NyaXB0LnBuZ1wiLFwianNvblwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL2pzb24ucG5nXCIsXCJwZGZcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9wZGYucG5nXCIsXCJyYXJcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9yYXIucG5nXCIsXCJ0YXJcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi90YXIucG5nXCIsXCJ6aXBcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi96aXAucG5nXCJ9LFwiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uLnBuZ1wifSxcImF1ZGlvXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2F1ZGlvLnBuZ1wifSxcImNoZW1pY2FsXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2NoZW1pY2FsLnBuZ1wifSxcImZvbnRcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvZm9udC5wbmdcIn0sXCJnY29kZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9nY29kZS5wbmdcIn0sXCJpbWFnZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9pbWFnZS5wbmdcIn0sXCJtZXNzYWdlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL21lc3NhZ2UucG5nXCJ9LFwibW9kZWxcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvbW9kZWwucG5nXCJ9LFwidGV4dFwiOntcImNvbnRlbnRcIjp7XCJjc3NcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L2Nzcy5wbmdcIixcIm1hcmtkb3duXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9tYXJrZG93bi5wbmdcIixcInBsYWluXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9wbGFpbi5wbmdcIixcInRlbXBsYXRlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC90ZW1wbGF0ZS5wbmdcIn0sXCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC5wbmdcIn0sXCJ2aWRlb1wiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy92aWRlby5wbmdcIn0sXCJ4LWNvbmZlcmVuY2VcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMveC1jb25mZXJlbmNlLnBuZ1wifX0nKTtcbiAgICAgICAgXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gKGRhdGEsIGN0eCkgPT4ge1xuICAgICAgICAgICAgaWYgKGN0eCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWN0eFsnX19oYW5kbGViYXJfY3R4X2lkJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4Ll9faGFuZGxlYmFyX2N0eF9pZCA9ICsrZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlci5fX25leHRfb2JqX2lkO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyLl9fcmVnaXN0ZXJlZF9jdHhbY3R4Ll9faGFuZGxlYmFyX2N0eF9pZF0gPSBjdHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRhdGEuX19oYW5kbGViYXJfY3R4X2lkID0gY3R4Ll9faGFuZGxlYmFyX2N0eF9pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgZ2VuZXJhdGVkX2h0bWwgPSBIYW5kbGViYXJzLnRlbXBsYXRlKHtcImNvbXBpbGVyXCI6WzgsXCI+PSA0LjMuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBhbGlhczE9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwgYWxpYXMyPWNvbnRhaW5lci5ob29rcy5oZWxwZXJNaXNzaW5nLCBhbGlhczM9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24sIGxvb2t1cFByb3BlcnR5ID0gY29udGFpbmVyLmxvb2t1cFByb3BlcnR5IHx8IGZ1bmN0aW9uKHBhcmVudCwgcHJvcGVydHlOYW1lKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocGFyZW50LCBwcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcmVudFtwcm9wZXJ0eU5hbWVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9O1xuXG4gIHJldHVybiBcIlxcclxcbjxkaXYgY2xhc3M9XFxcImNhcm91c2VsLWxpc3Qtcm9vdFxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImNhcm91c2VsLWxpc3Qtc2Nyb2xsZXJcXFwiPlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY2Fyb3VzZWwtbGlzdFxcXCI+XFxyXFxuXFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImNhcm91c2VsLW1vdmUtbGVmdFxcXCI+PGJ1dHRvbiBvbmNsaWNrPVxcXCJcIlxuICAgICsgYWxpYXMzKChsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiY3R4XCIpfHwoZGVwdGgwICYmIGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcImN0eFwiKSl8fGFsaWFzMikuY2FsbChhbGlhczEsXCJtb3ZlX2xlZnQoKVwiLHtcIm5hbWVcIjpcImN0eFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjo4LFwiY29sdW1uXCI6NTN9LFwiZW5kXCI6e1wibGluZVwiOjgsXCJjb2x1bW5cIjo3NH19fSkpXG4gICAgKyBcIlxcXCI+PDwvYnV0dG9uPjwvZGl2PlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjYXJvdXNlbC1tb3ZlLXJpZ2h0XFxcIj48YnV0dG9uIG9uY2xpY2s9XFxcIlwiXG4gICAgKyBhbGlhczMoKGxvb2t1cFByb3BlcnR5KGhlbHBlcnMsXCJjdHhcIil8fChkZXB0aDAgJiYgbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiY3R4XCIpKXx8YWxpYXMyKS5jYWxsKGFsaWFzMSxcIm1vdmVfcmlnaHQoKVwiLHtcIm5hbWVcIjpcImN0eFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjo5LFwiY29sdW1uXCI6NTR9LFwiZW5kXCI6e1wibGluZVwiOjksXCJjb2x1bW5cIjo3Nn19fSkpXG4gICAgKyBcIlxcXCI+PjwvYnV0dG9uPjwvZGl2PlxcclxcbjwvZGl2PlwiO1xufSxcInVzZURhdGFcIjp0cnVlfSkoZGF0YSk7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhnZW5lcmF0ZWRfaHRtbCwgJ3RleHQvaHRtbCcpLmJvZHk7XG4gICAgICAgICAgICBpZiAoYm9keS5jaGlsZHJlbi5sZW5ndGggPT09IDEpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJvZHkuY2hpbGRyZW5bMF07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEZvcmNlIGNoaWxkcmVuIGdlbmVyYXRpb25cbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJvZHkuY2hpbGRyZW4ubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChib2R5LmNoaWxkcmVuW2ldKTtcbiAgICAgICAgICAgIHJldHVybiBjaGlsZHJlbjtcbiAgICAgICAgfVxuICAgICAgICAiLCJcbiAgICAgICAgY29uc3QgSGFuZGxlYmFycyA9IHJlcXVpcmUoJ2hhbmRsZWJhcnMnKTtcbiAgICAgICAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuXG4gICAgICAgIC8vIFVzZWQgdG8gcmVnaXN0ZXIgY29udGV4dHNcbiAgICAgICAgaWYgKCFkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyKVxuICAgICAgICAgICAgZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlciA9IHtcbiAgICAgICAgICAgICAgICBfX25leHRfb2JqX2lkOiAwLFxuICAgICAgICAgICAgICAgIF9fcmVnaXN0ZXJlZF9jdHg6IHt9XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBIYW5kbGViYXJzLmdldF9taW1lX2ljb25zID0gKCkgPT4gSlNPTi5wYXJzZSgne1wiYXBwbGljYXRpb25cIjp7XCJjb250ZW50XCI6e1wiamF2YXNjcmlwdFwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL2phdmFzY3JpcHQucG5nXCIsXCJqc29uXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vanNvbi5wbmdcIixcInBkZlwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL3BkZi5wbmdcIixcInJhclwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL3Jhci5wbmdcIixcInRhclwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL3Rhci5wbmdcIixcInppcFwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL3ppcC5wbmdcIn0sXCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24ucG5nXCJ9LFwiYXVkaW9cIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXVkaW8ucG5nXCJ9LFwiY2hlbWljYWxcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvY2hlbWljYWwucG5nXCJ9LFwiZm9udFwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9mb250LnBuZ1wifSxcImdjb2RlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2djb2RlLnBuZ1wifSxcImltYWdlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2ltYWdlLnBuZ1wifSxcIm1lc3NhZ2VcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvbWVzc2FnZS5wbmdcIn0sXCJtb2RlbFwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9tb2RlbC5wbmdcIn0sXCJ0ZXh0XCI6e1wiY29udGVudFwiOntcImNzc1wiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvY3NzLnBuZ1wiLFwibWFya2Rvd25cIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L21hcmtkb3duLnBuZ1wiLFwicGxhaW5cIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L3BsYWluLnBuZ1wiLFwidGVtcGxhdGVcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L3RlbXBsYXRlLnBuZ1wifSxcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0LnBuZ1wifSxcInZpZGVvXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3ZpZGVvLnBuZ1wifSxcIngtY29uZmVyZW5jZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy94LWNvbmZlcmVuY2UucG5nXCJ9fScpO1xuICAgICAgICBcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSAoZGF0YSwgY3R4KSA9PiB7XG4gICAgICAgICAgICBpZiAoY3R4KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY3R4WydfX2hhbmRsZWJhcl9jdHhfaWQnXSkge1xuICAgICAgICAgICAgICAgICAgICBjdHguX19oYW5kbGViYXJfY3R4X2lkID0gKytkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyLl9fbmV4dF9vYmpfaWQ7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIuX19yZWdpc3RlcmVkX2N0eFtjdHguX19oYW5kbGViYXJfY3R4X2lkXSA9IGN0eDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGF0YS5fX2hhbmRsZWJhcl9jdHhfaWQgPSBjdHguX19oYW5kbGViYXJfY3R4X2lkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBnZW5lcmF0ZWRfaHRtbCA9IEhhbmRsZWJhcnMudGVtcGxhdGUoe1wiY29tcGlsZXJcIjpbOCxcIj49IDQuMy4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGFsaWFzMT1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLCBhbGlhczI9Y29udGFpbmVyLmhvb2tzLmhlbHBlck1pc3NpbmcsIGFsaWFzMz1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbiwgbG9va3VwUHJvcGVydHkgPSBjb250YWluZXIubG9va3VwUHJvcGVydHkgfHwgZnVuY3Rpb24ocGFyZW50LCBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwYXJlbnQsIHByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICByZXR1cm4gcGFyZW50W3Byb3BlcnR5TmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH07XG5cbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwiY2Fyb3VzZWwtaXRlbVxcXCI+XFxyXFxuICAgIDxidXR0b24gY2xhc3M9XFxcImNhcm91c2VsLWl0ZW0tYnV0dG9uXFxcIiBvbmNsaWNrPVxcXCJcIlxuICAgICsgYWxpYXMzKChsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiY3R4XCIpfHwoZGVwdGgwICYmIGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcImN0eFwiKSl8fGFsaWFzMikuY2FsbChhbGlhczEsXCJvbl9jbGljaygpXCIse1wibmFtZVwiOlwiY3R4XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjIsXCJjb2x1bW5cIjo1MH0sXCJlbmRcIjp7XCJsaW5lXCI6MixcImNvbHVtblwiOjcwfX19KSlcbiAgICArIFwiXFxcIj5cXHJcXG4gICAgICAgIFwiXG4gICAgKyBhbGlhczMoKGxvb2t1cFByb3BlcnR5KGhlbHBlcnMsXCJpdGVtX3RodW1ibmFpbFwiKXx8KGRlcHRoMCAmJiBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJpdGVtX3RodW1ibmFpbFwiKSl8fGFsaWFzMikuY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiaXRlbVwiKSA6IGRlcHRoMCkse1wibmFtZVwiOlwiaXRlbV90aHVtYm5haWxcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6MyxcImNvbHVtblwiOjh9LFwiZW5kXCI6e1wibGluZVwiOjMsXCJjb2x1bW5cIjozMX19fSkpXG4gICAgKyBcIlxcclxcbiAgICA8L2J1dHRvbj5cXHJcXG48L2Rpdj5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pKGRhdGEpO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoZ2VuZXJhdGVkX2h0bWwsICd0ZXh0L2h0bWwnKS5ib2R5O1xuICAgICAgICAgICAgaWYgKGJvZHkuY2hpbGRyZW4ubGVuZ3RoID09PSAxKVxuICAgICAgICAgICAgICAgIHJldHVybiBib2R5LmNoaWxkcmVuWzBdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBGb3JjZSBjaGlsZHJlbiBnZW5lcmF0aW9uXG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2R5LmNoaWxkcmVuLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2goYm9keS5jaGlsZHJlbltpXSk7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgICAgIH1cbiAgICAgICAgIiwiXG4gICAgICAgIGNvbnN0IEhhbmRsZWJhcnMgPSByZXF1aXJlKCdoYW5kbGViYXJzJyk7XG4gICAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcblxuICAgICAgICAvLyBVc2VkIHRvIHJlZ2lzdGVyIGNvbnRleHRzXG4gICAgICAgIGlmICghZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlcilcbiAgICAgICAgICAgIGRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIgPSB7XG4gICAgICAgICAgICAgICAgX19uZXh0X29ial9pZDogMCxcbiAgICAgICAgICAgICAgICBfX3JlZ2lzdGVyZWRfY3R4OiB7fVxuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgSGFuZGxlYmFycy5nZXRfbWltZV9pY29ucyA9ICgpID0+IEpTT04ucGFyc2UoJ3tcImFwcGxpY2F0aW9uXCI6e1wiY29udGVudFwiOntcImphdmFzY3JpcHRcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9qYXZhc2NyaXB0LnBuZ1wiLFwianNvblwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL2pzb24ucG5nXCIsXCJwZGZcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9wZGYucG5nXCIsXCJyYXJcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9yYXIucG5nXCIsXCJ0YXJcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi90YXIucG5nXCIsXCJ6aXBcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi96aXAucG5nXCJ9LFwiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uLnBuZ1wifSxcImF1ZGlvXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2F1ZGlvLnBuZ1wifSxcImNoZW1pY2FsXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2NoZW1pY2FsLnBuZ1wifSxcImZvbnRcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvZm9udC5wbmdcIn0sXCJnY29kZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9nY29kZS5wbmdcIn0sXCJpbWFnZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9pbWFnZS5wbmdcIn0sXCJtZXNzYWdlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL21lc3NhZ2UucG5nXCJ9LFwibW9kZWxcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvbW9kZWwucG5nXCJ9LFwidGV4dFwiOntcImNvbnRlbnRcIjp7XCJjc3NcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L2Nzcy5wbmdcIixcIm1hcmtkb3duXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9tYXJrZG93bi5wbmdcIixcInBsYWluXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9wbGFpbi5wbmdcIixcInRlbXBsYXRlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC90ZW1wbGF0ZS5wbmdcIn0sXCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC5wbmdcIn0sXCJ2aWRlb1wiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy92aWRlby5wbmdcIn0sXCJ4LWNvbmZlcmVuY2VcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMveC1jb25mZXJlbmNlLnBuZ1wifX0nKTtcbiAgICAgICAgXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gKGRhdGEsIGN0eCkgPT4ge1xuICAgICAgICAgICAgaWYgKGN0eCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWN0eFsnX19oYW5kbGViYXJfY3R4X2lkJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4Ll9faGFuZGxlYmFyX2N0eF9pZCA9ICsrZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlci5fX25leHRfb2JqX2lkO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyLl9fcmVnaXN0ZXJlZF9jdHhbY3R4Ll9faGFuZGxlYmFyX2N0eF9pZF0gPSBjdHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRhdGEuX19oYW5kbGViYXJfY3R4X2lkID0gY3R4Ll9faGFuZGxlYmFyX2N0eF9pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgZ2VuZXJhdGVkX2h0bWwgPSBIYW5kbGViYXJzLnRlbXBsYXRlKHtcImNvbXBpbGVyXCI6WzgsXCI+PSA0LjMuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazEsIGhlbHBlciwgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksIGFsaWFzMj1jb250YWluZXIuaG9va3MuaGVscGVyTWlzc2luZywgYWxpYXMzPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uLCBhbGlhczQ9Y29udGFpbmVyLmxhbWJkYSwgbG9va3VwUHJvcGVydHkgPSBjb250YWluZXIubG9va3VwUHJvcGVydHkgfHwgZnVuY3Rpb24ocGFyZW50LCBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwYXJlbnQsIHByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICByZXR1cm4gcGFyZW50W3Byb3BlcnR5TmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH07XG5cbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwiY2Fyb3VzZWwtb3ZlcmxheVxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImRhdGEtY29udGFpbmVyXFxcIj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInN0YXRzXFxcIj5cXHJcXG4gICAgICAgICAgICBcIlxuICAgICsgYWxpYXMzKChsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwidHlwZWljb25cIil8fChkZXB0aDAgJiYgbG9va3VwUHJvcGVydHkoZGVwdGgwLFwidHlwZWljb25cIikpfHxhbGlhczIpLmNhbGwoYWxpYXMxLCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiaXRlbVwiKSA6IGRlcHRoMCkpICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShzdGFjazEsXCJtaW1ldHlwZVwiKSA6IHN0YWNrMSkse1wibmFtZVwiOlwidHlwZWljb25cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6NCxcImNvbHVtblwiOjEyfSxcImVuZFwiOntcImxpbmVcIjo0LFwiY29sdW1uXCI6Mzh9fX0pKVxuICAgICsgXCJcXHJcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzdWJzdGF0c1xcXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxwIGlkPVxcXCJpdGVtLW1pbWUtdHlwZVxcXCI+XCJcbiAgICArIGFsaWFzMyhhbGlhczQoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJpdGVtXCIpIDogZGVwdGgwKSkgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KHN0YWNrMSxcIm1pbWV0eXBlXCIpIDogc3RhY2sxKSwgZGVwdGgwKSlcbiAgICArIFwiPC9wPlxcclxcbiAgICAgICAgICAgICAgICA8cCBpZD1cXFwiaXRlbS1zaXplXFxcIj5Qb2lkcyA6IFwiXG4gICAgKyBhbGlhczMoKChoZWxwZXIgPSAoaGVscGVyID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcImZpbGVfc2l6ZVwiKSB8fCAoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJmaWxlX3NpemVcIikgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gXCJmdW5jdGlvblwiID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImZpbGVfc2l6ZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjo3LFwiY29sdW1uXCI6NDJ9LFwiZW5kXCI6e1wibGluZVwiOjcsXCJjb2x1bW5cIjo1NX19fSkgOiBoZWxwZXIpKSlcbiAgICArIFwiPC9wPlxcclxcbiAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ0aXRsZSBkZXNrdG9wLXRpdGxlXFxcIj5cXHJcXG4gICAgICAgICAgICA8aDEgaWQ9XFxcIml0ZW0tdGl0bGVcXFwiPlwiXG4gICAgKyBhbGlhczMoYWxpYXM0KCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiaXRlbVwiKSA6IGRlcHRoMCkpICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShzdGFjazEsXCJuYW1lXCIpIDogc3RhY2sxKSwgZGVwdGgwKSlcbiAgICArIFwiPC9oMT5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwicmlnaHQtYnV0dG9uc1xcXCI+XFxyXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiYWN0aW9uLWJ1dHRvbnNcXFwiPlxcclxcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJwbHVzLWJ1dHRvblxcXCIgb25jbGljaz1cXFwiXCJcbiAgICArIGFsaWFzMygobG9va3VwUHJvcGVydHkoaGVscGVycyxcImN0eFwiKXx8KGRlcHRoMCAmJiBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJjdHhcIikpfHxhbGlhczIpLmNhbGwoYWxpYXMxLFwic2hhcmUoZXZlbnQpXCIse1wibmFtZVwiOlwiY3R4XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjE1LFwiY29sdW1uXCI6NTN9LFwiZW5kXCI6e1wibGluZVwiOjE1LFwiY29sdW1uXCI6NzV9fX0pKVxuICAgICsgXCJcXFwiPjxpbWdcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBzcmM9XFxcIi9pbWFnZXMvaWNvbnMvaWNvbnM4LXVybC05Ni5wbmdcXFwiIGFsdD1cXFwiU2hhcmVcXFwiPjwvYnV0dG9uPlxcclxcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJwbHVzLWJ1dHRvblxcXCIgb25jbGljaz1cXFwiXCJcbiAgICArIGFsaWFzMygobG9va3VwUHJvcGVydHkoaGVscGVycyxcImN0eFwiKXx8KGRlcHRoMCAmJiBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJjdHhcIikpfHxhbGlhczIpLmNhbGwoYWxpYXMxLFwiZG93bmxvYWQoZXZlbnQpXCIse1wibmFtZVwiOlwiY3R4XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjE3LFwiY29sdW1uXCI6NTN9LFwiZW5kXCI6e1wibGluZVwiOjE3LFwiY29sdW1uXCI6Nzh9fX0pKVxuICAgICsgXCJcXFwiPjxpbWdcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBzcmM9XFxcIi9pbWFnZXMvaWNvbnMvaWNvbnM4LWRvd25sb2FkLTk2LnBuZ1xcXCIgYWx0PVxcXCJEb3dubG9hZFxcXCI+PC9idXR0b24+XFxyXFxuICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiY2FuY2VsLWJ1dHRvblxcXCIgb25jbGljaz1cXFwiXCJcbiAgICArIGFsaWFzMygobG9va3VwUHJvcGVydHkoaGVscGVycyxcImN0eFwiKXx8KGRlcHRoMCAmJiBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJjdHhcIikpfHxhbGlhczIpLmNhbGwoYWxpYXMxLFwiY2xvc2VfY2Fyb3VzZWwoZXZlbnQpXCIse1wibmFtZVwiOlwiY3R4XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjIwLFwiY29sdW1uXCI6NTF9LFwiZW5kXCI6e1wibGluZVwiOjIwLFwiY29sdW1uXCI6ODJ9fX0pKVxuICAgICsgXCJcXFwiPlg8L2J1dHRvbj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwidGl0bGUgbW9iaWxlLXRpdGxlXFxcIj5cXHJcXG4gICAgICAgIDxoMSBpZD1cXFwiaXRlbS10aXRsZVxcXCI+XCJcbiAgICArIGFsaWFzMyhhbGlhczQoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJpdGVtXCIpIDogZGVwdGgwKSkgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KHN0YWNrMSxcIm5hbWVcIikgOiBzdGFjazEpLCBkZXB0aDApKVxuICAgICsgXCI8L2gxPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiaHNlcGFyYXRvclxcXCI+PC9kaXY+XFxyXFxuPC9kaXY+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KShkYXRhKTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKGdlbmVyYXRlZF9odG1sLCAndGV4dC9odG1sJykuYm9keTtcbiAgICAgICAgICAgIGlmIChib2R5LmNoaWxkcmVuLmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICAgICAgICByZXR1cm4gYm9keS5jaGlsZHJlblswXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRm9yY2UgY2hpbGRyZW4gZ2VuZXJhdGlvblxuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm9keS5jaGlsZHJlbi5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICBjaGlsZHJlbi5wdXNoKGJvZHkuY2hpbGRyZW5baV0pO1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgICAgICB9XG4gICAgICAgICIsIlxuICAgICAgICBjb25zdCBIYW5kbGViYXJzID0gcmVxdWlyZSgnaGFuZGxlYmFycycpO1xuICAgICAgICBjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG5cbiAgICAgICAgLy8gVXNlZCB0byByZWdpc3RlciBjb250ZXh0c1xuICAgICAgICBpZiAoIWRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIpXG4gICAgICAgICAgICBkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyID0ge1xuICAgICAgICAgICAgICAgIF9fbmV4dF9vYmpfaWQ6IDAsXG4gICAgICAgICAgICAgICAgX19yZWdpc3RlcmVkX2N0eDoge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIEhhbmRsZWJhcnMuZ2V0X21pbWVfaWNvbnMgPSAoKSA9PiBKU09OLnBhcnNlKCd7XCJhcHBsaWNhdGlvblwiOntcImNvbnRlbnRcIjp7XCJqYXZhc2NyaXB0XCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vamF2YXNjcmlwdC5wbmdcIixcImpzb25cIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9qc29uLnBuZ1wiLFwicGRmXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vcGRmLnBuZ1wiLFwicmFyXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vcmFyLnBuZ1wiLFwidGFyXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vdGFyLnBuZ1wiLFwiemlwXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vemlwLnBuZ1wifSxcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi5wbmdcIn0sXCJhdWRpb1wiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hdWRpby5wbmdcIn0sXCJjaGVtaWNhbFwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9jaGVtaWNhbC5wbmdcIn0sXCJmb250XCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2ZvbnQucG5nXCJ9LFwiZ2NvZGVcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvZ2NvZGUucG5nXCJ9LFwiaW1hZ2VcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvaW1hZ2UucG5nXCJ9LFwibWVzc2FnZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9tZXNzYWdlLnBuZ1wifSxcIm1vZGVsXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL21vZGVsLnBuZ1wifSxcInRleHRcIjp7XCJjb250ZW50XCI6e1wiY3NzXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9jc3MucG5nXCIsXCJtYXJrZG93blwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvbWFya2Rvd24ucG5nXCIsXCJwbGFpblwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvcGxhaW4ucG5nXCIsXCJ0ZW1wbGF0ZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvdGVtcGxhdGUucG5nXCJ9LFwiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQucG5nXCJ9LFwidmlkZW9cIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdmlkZW8ucG5nXCJ9LFwieC1jb25mZXJlbmNlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3gtY29uZmVyZW5jZS5wbmdcIn19Jyk7XG4gICAgICAgIFxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IChkYXRhLCBjdHgpID0+IHtcbiAgICAgICAgICAgIGlmIChjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjdHhbJ19faGFuZGxlYmFyX2N0eF9pZCddKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5fX2hhbmRsZWJhcl9jdHhfaWQgPSArK2RvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIuX19uZXh0X29ial9pZDtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlci5fX3JlZ2lzdGVyZWRfY3R4W2N0eC5fX2hhbmRsZWJhcl9jdHhfaWRdID0gY3R4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkYXRhLl9faGFuZGxlYmFyX2N0eF9pZCA9IGN0eC5fX2hhbmRsZWJhcl9jdHhfaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGdlbmVyYXRlZF9odG1sID0gSGFuZGxlYmFycy50ZW1wbGF0ZSh7XCJjb21waWxlclwiOls4LFwiPj0gNC4zLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgbG9va3VwUHJvcGVydHkgPSBjb250YWluZXIubG9va3VwUHJvcGVydHkgfHwgZnVuY3Rpb24ocGFyZW50LCBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwYXJlbnQsIHByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICByZXR1cm4gcGFyZW50W3Byb3BlcnR5TmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH07XG5cbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwiY2Fyb3VzZWwtdmlld3BvcnRcXFwiPlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjYXJvdXNlbC1pdGVtLWltYWdlXFxcIj5cXHJcXG4gICAgICAgIFwiXG4gICAgKyBjb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbigobG9va3VwUHJvcGVydHkoaGVscGVycyxcIml0ZW1faW1hZ2VcIil8fChkZXB0aDAgJiYgbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiaXRlbV9pbWFnZVwiKSl8fGNvbnRhaW5lci5ob29rcy5oZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiaXRlbVwiKSA6IGRlcHRoMCkse1wibmFtZVwiOlwiaXRlbV9pbWFnZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjozLFwiY29sdW1uXCI6OH0sXCJlbmRcIjp7XCJsaW5lXCI6MyxcImNvbHVtblwiOjI3fX19KSlcbiAgICArIFwiXFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjYXJvdXNlbC1kZXNjcmlwdGlvblxcXCI+PC9kaXY+XFxyXFxuPC9kaXY+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KShkYXRhKTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKGdlbmVyYXRlZF9odG1sLCAndGV4dC9odG1sJykuYm9keTtcbiAgICAgICAgICAgIGlmIChib2R5LmNoaWxkcmVuLmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICAgICAgICByZXR1cm4gYm9keS5jaGlsZHJlblswXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRm9yY2UgY2hpbGRyZW4gZ2VuZXJhdGlvblxuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm9keS5jaGlsZHJlbi5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICBjaGlsZHJlbi5wdXNoKGJvZHkuY2hpbGRyZW5baV0pO1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgICAgICB9XG4gICAgICAgICIsIlxuICAgICAgICBjb25zdCBIYW5kbGViYXJzID0gcmVxdWlyZSgnaGFuZGxlYmFycycpO1xuICAgICAgICBjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG5cbiAgICAgICAgLy8gVXNlZCB0byByZWdpc3RlciBjb250ZXh0c1xuICAgICAgICBpZiAoIWRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIpXG4gICAgICAgICAgICBkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyID0ge1xuICAgICAgICAgICAgICAgIF9fbmV4dF9vYmpfaWQ6IDAsXG4gICAgICAgICAgICAgICAgX19yZWdpc3RlcmVkX2N0eDoge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIEhhbmRsZWJhcnMuZ2V0X21pbWVfaWNvbnMgPSAoKSA9PiBKU09OLnBhcnNlKCd7XCJhcHBsaWNhdGlvblwiOntcImNvbnRlbnRcIjp7XCJqYXZhc2NyaXB0XCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vamF2YXNjcmlwdC5wbmdcIixcImpzb25cIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9qc29uLnBuZ1wiLFwicGRmXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vcGRmLnBuZ1wiLFwicmFyXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vcmFyLnBuZ1wiLFwidGFyXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vdGFyLnBuZ1wiLFwiemlwXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vemlwLnBuZ1wifSxcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi5wbmdcIn0sXCJhdWRpb1wiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hdWRpby5wbmdcIn0sXCJjaGVtaWNhbFwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9jaGVtaWNhbC5wbmdcIn0sXCJmb250XCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2ZvbnQucG5nXCJ9LFwiZ2NvZGVcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvZ2NvZGUucG5nXCJ9LFwiaW1hZ2VcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvaW1hZ2UucG5nXCJ9LFwibWVzc2FnZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9tZXNzYWdlLnBuZ1wifSxcIm1vZGVsXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL21vZGVsLnBuZ1wifSxcInRleHRcIjp7XCJjb250ZW50XCI6e1wiY3NzXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9jc3MucG5nXCIsXCJtYXJrZG93blwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvbWFya2Rvd24ucG5nXCIsXCJwbGFpblwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvcGxhaW4ucG5nXCIsXCJ0ZW1wbGF0ZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvdGVtcGxhdGUucG5nXCJ9LFwiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQucG5nXCJ9LFwidmlkZW9cIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdmlkZW8ucG5nXCJ9LFwieC1jb25mZXJlbmNlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3gtY29uZmVyZW5jZS5wbmdcIn19Jyk7XG4gICAgICAgIFxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IChkYXRhLCBjdHgpID0+IHtcbiAgICAgICAgICAgIGlmIChjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjdHhbJ19faGFuZGxlYmFyX2N0eF9pZCddKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5fX2hhbmRsZWJhcl9jdHhfaWQgPSArK2RvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIuX19uZXh0X29ial9pZDtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlci5fX3JlZ2lzdGVyZWRfY3R4W2N0eC5fX2hhbmRsZWJhcl9jdHhfaWRdID0gY3R4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkYXRhLl9faGFuZGxlYmFyX2N0eF9pZCA9IGN0eC5fX2hhbmRsZWJhcl9jdHhfaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGdlbmVyYXRlZF9odG1sID0gSGFuZGxlYmFycy50ZW1wbGF0ZSh7XCIxXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxLCBhbGlhczE9Y29udGFpbmVyLmxhbWJkYSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uLCBsb29rdXBQcm9wZXJ0eSA9IGNvbnRhaW5lci5sb29rdXBQcm9wZXJ0eSB8fCBmdW5jdGlvbihwYXJlbnQsIHByb3BlcnR5TmFtZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHBhcmVudCwgcHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgIHJldHVybiBwYXJlbnRbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfTtcblxuICByZXR1cm4gXCIgICAgICAgICAgICA8YnV0dG9uIG9uY2xpY2s9XFxcIndpbmRvdy5jb250ZXh0X2FjdGlvbi5jbGlja19vYmplY3QoJ1wiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcInRpdGxlXCIpIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiJylcXFwiIFwiXG4gICAgKyAoKHN0YWNrMSA9IGxvb2t1cFByb3BlcnR5KGhlbHBlcnMsXCJpZlwiKS5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiY2hlY2tlZFwiKSA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMiwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjMsXCJjb2x1bW5cIjo4M30sXCJlbmRcIjp7XCJsaW5lXCI6MyxcImNvbHVtblwiOjEzM319fSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJpbWFnZVwiKSA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgYWx0PVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJ0aXRsZVwiKSA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxwPlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcInRpdGxlXCIpIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiPC9wPlxcclxcbiAgICAgICAgICAgIDwvYnV0dG9uPlxcclxcblwiO1xufSxcIjJcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHJldHVybiBcImNsYXNzPVxcXCJjb250ZXh0LWNoZWNrZWRcXFwiXCI7XG59LFwiY29tcGlsZXJcIjpbOCxcIj49IDQuMy4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMSwgbG9va3VwUHJvcGVydHkgPSBjb250YWluZXIubG9va3VwUHJvcGVydHkgfHwgZnVuY3Rpb24ocGFyZW50LCBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwYXJlbnQsIHByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICByZXR1cm4gcGFyZW50W3Byb3BlcnR5TmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH07XG5cbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwiY29udGV4dC1hY3Rpb24tYm94XFxcIj5cXHJcXG5cIlxuICAgICsgKChzdGFjazEgPSBsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiZWFjaFwiKS5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiYWN0aW9uc1wiKSA6IGRlcHRoMCkse1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgxLCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6MixcImNvbHVtblwiOjR9LFwiZW5kXCI6e1wibGluZVwiOjcsXCJjb2x1bW5cIjoxM319fSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCI8L2Rpdj5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pKGRhdGEpO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoZ2VuZXJhdGVkX2h0bWwsICd0ZXh0L2h0bWwnKS5ib2R5O1xuICAgICAgICAgICAgaWYgKGJvZHkuY2hpbGRyZW4ubGVuZ3RoID09PSAxKVxuICAgICAgICAgICAgICAgIHJldHVybiBib2R5LmNoaWxkcmVuWzBdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBGb3JjZSBjaGlsZHJlbiBnZW5lcmF0aW9uXG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2R5LmNoaWxkcmVuLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2goYm9keS5jaGlsZHJlbltpXSk7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgICAgIH1cbiAgICAgICAgIiwiXG4gICAgICAgIGNvbnN0IEhhbmRsZWJhcnMgPSByZXF1aXJlKCdoYW5kbGViYXJzJyk7XG4gICAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcblxuICAgICAgICAvLyBVc2VkIHRvIHJlZ2lzdGVyIGNvbnRleHRzXG4gICAgICAgIGlmICghZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlcilcbiAgICAgICAgICAgIGRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIgPSB7XG4gICAgICAgICAgICAgICAgX19uZXh0X29ial9pZDogMCxcbiAgICAgICAgICAgICAgICBfX3JlZ2lzdGVyZWRfY3R4OiB7fVxuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgSGFuZGxlYmFycy5nZXRfbWltZV9pY29ucyA9ICgpID0+IEpTT04ucGFyc2UoJ3tcImFwcGxpY2F0aW9uXCI6e1wiY29udGVudFwiOntcImphdmFzY3JpcHRcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9qYXZhc2NyaXB0LnBuZ1wiLFwianNvblwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL2pzb24ucG5nXCIsXCJwZGZcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9wZGYucG5nXCIsXCJyYXJcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9yYXIucG5nXCIsXCJ0YXJcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi90YXIucG5nXCIsXCJ6aXBcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi96aXAucG5nXCJ9LFwiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uLnBuZ1wifSxcImF1ZGlvXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2F1ZGlvLnBuZ1wifSxcImNoZW1pY2FsXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2NoZW1pY2FsLnBuZ1wifSxcImZvbnRcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvZm9udC5wbmdcIn0sXCJnY29kZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9nY29kZS5wbmdcIn0sXCJpbWFnZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9pbWFnZS5wbmdcIn0sXCJtZXNzYWdlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL21lc3NhZ2UucG5nXCJ9LFwibW9kZWxcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvbW9kZWwucG5nXCJ9LFwidGV4dFwiOntcImNvbnRlbnRcIjp7XCJjc3NcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L2Nzcy5wbmdcIixcIm1hcmtkb3duXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9tYXJrZG93bi5wbmdcIixcInBsYWluXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9wbGFpbi5wbmdcIixcInRlbXBsYXRlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC90ZW1wbGF0ZS5wbmdcIn0sXCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC5wbmdcIn0sXCJ2aWRlb1wiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy92aWRlby5wbmdcIn0sXCJ4LWNvbmZlcmVuY2VcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMveC1jb25mZXJlbmNlLnBuZ1wifX0nKTtcbiAgICAgICAgXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gKGRhdGEsIGN0eCkgPT4ge1xuICAgICAgICAgICAgaWYgKGN0eCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWN0eFsnX19oYW5kbGViYXJfY3R4X2lkJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4Ll9faGFuZGxlYmFyX2N0eF9pZCA9ICsrZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlci5fX25leHRfb2JqX2lkO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyLl9fcmVnaXN0ZXJlZF9jdHhbY3R4Ll9faGFuZGxlYmFyX2N0eF9pZF0gPSBjdHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRhdGEuX19oYW5kbGViYXJfY3R4X2lkID0gY3R4Ll9faGFuZGxlYmFyX2N0eF9pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgZ2VuZXJhdGVkX2h0bWwgPSBIYW5kbGViYXJzLnRlbXBsYXRlKHtcImNvbXBpbGVyXCI6WzgsXCI+PSA0LjMuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHJldHVybiBcIjxoMT5Ob3V2ZWF1IGTDqXDDtHQ8L2gxPlxcclxcbjxmb3JtIGFjdGlvbj1cXFwiL2FwaS9jcmVhdGUtcmVwb3NcXFwiIG1ldGhvZD1cXFwicG9zdFxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImZpZWxkXFxcIj5cXHJcXG4gICAgICAgIDxsYWJlbCBmb3I9J25hbWUnPlxcclxcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBuYW1lPVxcXCJuYW1lXFxcIiBwbGFjZWhvbGRlcj1cXFwiTm9tXFxcIiBpZD1cXFwibmFtZVxcXCIgcmVxdWlyZWQ+XFxyXFxuICAgICAgICA8L2xhYmVsPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiZmllbGRcXFwiPlxcclxcbiAgICAgICAgPGxhYmVsIGZvcj0ndHlwZSc+XFxyXFxuICAgICAgICAgICAgPHNlbGVjdCBuYW1lPVxcXCJ0eXBlXFxcIiBvbkNoYW5nZT1cXFwiXFxcIiBpZD1cXFwidHlwZVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxvcHRpb24+SW52aXNpYmxlPC9vcHRpb24+XFxyXFxuICAgICAgICAgICAgICAgIDxvcHRpb24+UHVibGlxdWU8L29wdGlvbj5cXHJcXG4gICAgICAgICAgICAgICAgPG9wdGlvbj5Qcml2w6k8L29wdGlvbj5cXHJcXG4gICAgICAgICAgICA8L3NlbGVjdD5cXHJcXG4gICAgICAgIDwvbGFiZWw+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8aW5wdXQgdHlwZT1cXFwic3VibWl0XFxcIiB2YWx1ZT1cXFwiTm91dmVhdSBkw6lwb3RcXFwiPlxcclxcbjwvZm9ybT5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pKGRhdGEpO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoZ2VuZXJhdGVkX2h0bWwsICd0ZXh0L2h0bWwnKS5ib2R5O1xuICAgICAgICAgICAgaWYgKGJvZHkuY2hpbGRyZW4ubGVuZ3RoID09PSAxKVxuICAgICAgICAgICAgICAgIHJldHVybiBib2R5LmNoaWxkcmVuWzBdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBGb3JjZSBjaGlsZHJlbiBnZW5lcmF0aW9uXG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2R5LmNoaWxkcmVuLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2goYm9keS5jaGlsZHJlbltpXSk7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgICAgIH1cbiAgICAgICAgIiwiXG4gICAgICAgIGNvbnN0IEhhbmRsZWJhcnMgPSByZXF1aXJlKCdoYW5kbGViYXJzJyk7XG4gICAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcblxuICAgICAgICAvLyBVc2VkIHRvIHJlZ2lzdGVyIGNvbnRleHRzXG4gICAgICAgIGlmICghZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlcilcbiAgICAgICAgICAgIGRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIgPSB7XG4gICAgICAgICAgICAgICAgX19uZXh0X29ial9pZDogMCxcbiAgICAgICAgICAgICAgICBfX3JlZ2lzdGVyZWRfY3R4OiB7fVxuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgSGFuZGxlYmFycy5nZXRfbWltZV9pY29ucyA9ICgpID0+IEpTT04ucGFyc2UoJ3tcImFwcGxpY2F0aW9uXCI6e1wiY29udGVudFwiOntcImphdmFzY3JpcHRcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9qYXZhc2NyaXB0LnBuZ1wiLFwianNvblwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL2pzb24ucG5nXCIsXCJwZGZcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9wZGYucG5nXCIsXCJyYXJcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9yYXIucG5nXCIsXCJ0YXJcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi90YXIucG5nXCIsXCJ6aXBcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi96aXAucG5nXCJ9LFwiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uLnBuZ1wifSxcImF1ZGlvXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2F1ZGlvLnBuZ1wifSxcImNoZW1pY2FsXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2NoZW1pY2FsLnBuZ1wifSxcImZvbnRcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvZm9udC5wbmdcIn0sXCJnY29kZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9nY29kZS5wbmdcIn0sXCJpbWFnZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9pbWFnZS5wbmdcIn0sXCJtZXNzYWdlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL21lc3NhZ2UucG5nXCJ9LFwibW9kZWxcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvbW9kZWwucG5nXCJ9LFwidGV4dFwiOntcImNvbnRlbnRcIjp7XCJjc3NcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L2Nzcy5wbmdcIixcIm1hcmtkb3duXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9tYXJrZG93bi5wbmdcIixcInBsYWluXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9wbGFpbi5wbmdcIixcInRlbXBsYXRlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC90ZW1wbGF0ZS5wbmdcIn0sXCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC5wbmdcIn0sXCJ2aWRlb1wiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy92aWRlby5wbmdcIn0sXCJ4LWNvbmZlcmVuY2VcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMveC1jb25mZXJlbmNlLnBuZ1wifX0nKTtcbiAgICAgICAgXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gKGRhdGEsIGN0eCkgPT4ge1xuICAgICAgICAgICAgaWYgKGN0eCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWN0eFsnX19oYW5kbGViYXJfY3R4X2lkJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4Ll9faGFuZGxlYmFyX2N0eF9pZCA9ICsrZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlci5fX25leHRfb2JqX2lkO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyLl9fcmVnaXN0ZXJlZF9jdHhbY3R4Ll9faGFuZGxlYmFyX2N0eF9pZF0gPSBjdHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRhdGEuX19oYW5kbGViYXJfY3R4X2lkID0gY3R4Ll9faGFuZGxlYmFyX2N0eF9pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgZ2VuZXJhdGVkX2h0bWwgPSBIYW5kbGViYXJzLnRlbXBsYXRlKHtcImNvbXBpbGVyXCI6WzgsXCI+PSA0LjMuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBsb29rdXBQcm9wZXJ0eSA9IGNvbnRhaW5lci5sb29rdXBQcm9wZXJ0eSB8fCBmdW5jdGlvbihwYXJlbnQsIHByb3BlcnR5TmFtZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHBhcmVudCwgcHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgIHJldHVybiBwYXJlbnRbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfTtcblxuICByZXR1cm4gXCI8aDE+U3VwcHJpbWVyIGNlIGTDqXDDtHQgZXQgdG91dGVzIHNlcyBkb25uw6llcyA/PC9oMT5cXHJcXG5cXHJcXG48ZGl2IGNsYXNzPVxcXCJwcm9ncmVzcy1jb250YWluZXJcXFwiPlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJwcm9ncmVzcy1iYXJcXFwiPjwvZGl2PlxcclxcbjwvZGl2PlxcclxcbjxkaXYgY2xhc3M9XFxcImRlbGV0ZS1yZXBvc1xcXCI+XFxyXFxuICAgIDxidXR0b24gb25jbGljaz1cXFwibW9kYWwuY2xvc2VfbW9kYWwoKVxcXCIgY2xhc3M9XFxcImNhbmNlbC1idXR0b25cXFwiPkFubnVsZXI8L2J1dHRvbj5cXHJcXG4gICAgPGlucHV0IHR5cGU9XFxcInN1Ym1pdFxcXCIgb25jbGljaz1cXFwiXCJcbiAgICArIGNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uKChsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiY3R4XCIpfHwoZGVwdGgwICYmIGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcImN0eFwiKSl8fGNvbnRhaW5lci5ob29rcy5oZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksXCJjbGlja2VkKClcIix7XCJuYW1lXCI6XCJjdHhcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6OCxcImNvbHVtblwiOjM0fSxcImVuZFwiOntcImxpbmVcIjo4LFwiY29sdW1uXCI6NTN9fX0pKVxuICAgICsgXCJcXFwiIHZhbHVlPVxcXCJWZXVpbGxleiBwYXRpZW50ZXJcXFwiIGlkPVxcXCJjb3VudGRvd24tYnV0dG9uXFxcIiBkaXNhYmxlZD5cXHJcXG48L2Rpdj5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pKGRhdGEpO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoZ2VuZXJhdGVkX2h0bWwsICd0ZXh0L2h0bWwnKS5ib2R5O1xuICAgICAgICAgICAgaWYgKGJvZHkuY2hpbGRyZW4ubGVuZ3RoID09PSAxKVxuICAgICAgICAgICAgICAgIHJldHVybiBib2R5LmNoaWxkcmVuWzBdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBGb3JjZSBjaGlsZHJlbiBnZW5lcmF0aW9uXG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2R5LmNoaWxkcmVuLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2goYm9keS5jaGlsZHJlbltpXSk7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgICAgIH1cbiAgICAgICAgIiwiXG4gICAgICAgIGNvbnN0IEhhbmRsZWJhcnMgPSByZXF1aXJlKCdoYW5kbGViYXJzJyk7XG4gICAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcblxuICAgICAgICAvLyBVc2VkIHRvIHJlZ2lzdGVyIGNvbnRleHRzXG4gICAgICAgIGlmICghZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlcilcbiAgICAgICAgICAgIGRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIgPSB7XG4gICAgICAgICAgICAgICAgX19uZXh0X29ial9pZDogMCxcbiAgICAgICAgICAgICAgICBfX3JlZ2lzdGVyZWRfY3R4OiB7fVxuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgSGFuZGxlYmFycy5nZXRfbWltZV9pY29ucyA9ICgpID0+IEpTT04ucGFyc2UoJ3tcImFwcGxpY2F0aW9uXCI6e1wiY29udGVudFwiOntcImphdmFzY3JpcHRcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9qYXZhc2NyaXB0LnBuZ1wiLFwianNvblwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL2pzb24ucG5nXCIsXCJwZGZcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9wZGYucG5nXCIsXCJyYXJcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9yYXIucG5nXCIsXCJ0YXJcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi90YXIucG5nXCIsXCJ6aXBcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi96aXAucG5nXCJ9LFwiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uLnBuZ1wifSxcImF1ZGlvXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2F1ZGlvLnBuZ1wifSxcImNoZW1pY2FsXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2NoZW1pY2FsLnBuZ1wifSxcImZvbnRcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvZm9udC5wbmdcIn0sXCJnY29kZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9nY29kZS5wbmdcIn0sXCJpbWFnZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9pbWFnZS5wbmdcIn0sXCJtZXNzYWdlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL21lc3NhZ2UucG5nXCJ9LFwibW9kZWxcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvbW9kZWwucG5nXCJ9LFwidGV4dFwiOntcImNvbnRlbnRcIjp7XCJjc3NcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L2Nzcy5wbmdcIixcIm1hcmtkb3duXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9tYXJrZG93bi5wbmdcIixcInBsYWluXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9wbGFpbi5wbmdcIixcInRlbXBsYXRlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC90ZW1wbGF0ZS5wbmdcIn0sXCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC5wbmdcIn0sXCJ2aWRlb1wiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy92aWRlby5wbmdcIn0sXCJ4LWNvbmZlcmVuY2VcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMveC1jb25mZXJlbmNlLnBuZ1wifX0nKTtcbiAgICAgICAgXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gKGRhdGEsIGN0eCkgPT4ge1xuICAgICAgICAgICAgaWYgKGN0eCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWN0eFsnX19oYW5kbGViYXJfY3R4X2lkJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4Ll9faGFuZGxlYmFyX2N0eF9pZCA9ICsrZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlci5fX25leHRfb2JqX2lkO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyLl9fcmVnaXN0ZXJlZF9jdHhbY3R4Ll9faGFuZGxlYmFyX2N0eF9pZF0gPSBjdHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRhdGEuX19oYW5kbGViYXJfY3R4X2lkID0gY3R4Ll9faGFuZGxlYmFyX2N0eF9pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgZ2VuZXJhdGVkX2h0bWwgPSBIYW5kbGViYXJzLnRlbXBsYXRlKHtcIjFcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHJldHVybiBcInNlbGVjdGVkXCI7XG59LFwiM1wiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgcmV0dXJuIFwiY2hlY2tlZFwiO1xufSxcImNvbXBpbGVyXCI6WzgsXCI+PSA0LjMuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazEsIGhlbHBlciwgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksIGFsaWFzMj1jb250YWluZXIuaG9va3MuaGVscGVyTWlzc2luZywgYWxpYXMzPVwiZnVuY3Rpb25cIiwgYWxpYXM0PWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uLCBsb29rdXBQcm9wZXJ0eSA9IGNvbnRhaW5lci5sb29rdXBQcm9wZXJ0eSB8fCBmdW5jdGlvbihwYXJlbnQsIHByb3BlcnR5TmFtZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHBhcmVudCwgcHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgIHJldHVybiBwYXJlbnRbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfTtcblxuICByZXR1cm4gXCI8aDE+TW9kaWZpZXIgbGUgZMOpcMO0dCBcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGxvb2t1cFByb3BlcnR5KGhlbHBlcnMsXCJkaXNwbGF5X25hbWVcIikgfHwgKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiZGlzcGxheV9uYW1lXCIpIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJkaXNwbGF5X25hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6MSxcImNvbHVtblwiOjIyfSxcImVuZFwiOntcImxpbmVcIjoxLFwiY29sdW1uXCI6Mzh9fX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvaDE+XFxyXFxuPGZvcm0+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImZpZWxkXFxcIj5cXHJcXG4gICAgICAgIDxwPk5vbTwvcD5cXHJcXG4gICAgICAgIDxsYWJlbCBmb3I9J2Rpc3BsYXlfbmFtZSc+XFxyXFxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIG5hbWU9XFxcImRpc3BsYXlfbmFtZVxcXCIgcGxhY2Vob2xkZXI9XFxcIk5vbVxcXCIgaWQ9XFxcImRpc3BsYXlfbmFtZVxcXCIgcmVxdWlyZWRcXHJcXG4gICAgICAgICAgICAgICAgICAgdmFsdWU9XFxcIlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcImRpc3BsYXlfbmFtZVwiKSB8fCAoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJkaXNwbGF5X25hbWVcIikgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImRpc3BsYXlfbmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjo3LFwiY29sdW1uXCI6MjZ9LFwiZW5kXCI6e1wibGluZVwiOjcsXCJjb2x1bW5cIjo0Mn19fSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIj5cXHJcXG4gICAgICAgIDwvbGFiZWw+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJmaWVsZFxcXCI+XFxyXFxuICAgICAgICA8cD5EZXNjcmlwdGlvbjwvcD5cXHJcXG4gICAgICAgIDxsYWJlbCBmb3I9J2Rlc2NyaXB0aW9uJz5cXHJcXG4gICAgICAgICAgICA8dGV4dGFyZWEgbmFtZT1cXFwiZGVzY3JpcHRpb25cXFwiIHBsYWNlaG9sZGVyPVxcXCJEZXNjcmlwdGlvblxcXCIgaWQ9XFxcImRlc2NyaXB0aW9uXFxcIiByb3dzPVxcXCI4XFxcIj5cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGxvb2t1cFByb3BlcnR5KGhlbHBlcnMsXCJkZXNjcmlwdGlvblwiKSB8fCAoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJkZXNjcmlwdGlvblwiKSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwiZGVzY3JpcHRpb25cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6MTMsXCJjb2x1bW5cIjo5M30sXCJlbmRcIjp7XCJsaW5lXCI6MTMsXCJjb2x1bW5cIjoxMDh9fX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvdGV4dGFyZWE+XFxyXFxuICAgICAgICA8L2xhYmVsPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiZmllbGRcXFwiPlxcclxcbiAgICAgICAgPHA+VGFpbGxlIG1heGltYWxlIGRlcyBmaWNoaWVyczwvcD5cXHJcXG4gICAgICAgIDxsYWJlbCBmb3I9J21heF9maWxlX3NpemUnPlxcclxcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJudW1iZXJcXFwiIG5hbWU9XFxcIm1heF9maWxlX3NpemVcXFwiIGlkPVxcXCJtYXhfZmlsZV9zaXplXFxcIiByZXF1aXJlZCB2YWx1ZT1cXFwiXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwibWF4X2ZpbGVfc2l6ZVwiKSB8fCAoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJtYXhfZmlsZV9zaXplXCIpIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJtYXhfZmlsZV9zaXplXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjE5LFwiY29sdW1uXCI6ODl9LFwiZW5kXCI6e1wibGluZVwiOjE5LFwiY29sdW1uXCI6MTA2fX19KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiPlxcclxcbiAgICAgICAgPC9sYWJlbD5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImZpZWxkXFxcIj5cXHJcXG4gICAgICAgIDxwPkR1csOpZSBkZSB2aWUgZGVzIGRvbm7DqWVzIGludml0w6lzPC9wPlxcclxcbiAgICAgICAgPGxhYmVsIGZvcj0nZ3Vlc3RfZmlsZV9saWZldGltZSc+XFxyXFxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcIm51bWJlclxcXCIgbmFtZT1cXFwiZ3Vlc3RfZmlsZV9saWZldGltZVxcXCIgaWQ9XFxcImd1ZXN0X2ZpbGVfbGlmZXRpbWVcXFwiIHJlcXVpcmVkXFxyXFxuICAgICAgICAgICAgICAgICAgIHZhbHVlPVxcXCJcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGxvb2t1cFByb3BlcnR5KGhlbHBlcnMsXCJ2aXNpdG9yX2ZpbGVfbGlmZXRpbWVcIikgfHwgKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwidmlzaXRvcl9maWxlX2xpZmV0aW1lXCIpIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJ2aXNpdG9yX2ZpbGVfbGlmZXRpbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6MjYsXCJjb2x1bW5cIjoyNn0sXCJlbmRcIjp7XCJsaW5lXCI6MjYsXCJjb2x1bW5cIjo1MX19fSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIj5cXHJcXG4gICAgICAgIDwvbGFiZWw+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJkYW5nZXItem9uZVxcXCI+XFxyXFxuICAgICAgICA8aDI+4pqg77iPRGFuZ2VyIHpvbmXimqDvuI88L2gyPlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiZmllbGRcXFwiPlxcclxcbiAgICAgICAgICAgIDxwPk5vbSBkYW5zIGwndXJsPC9wPlxcclxcbiAgICAgICAgICAgIDxsYWJlbCBmb3I9J25hbWUnPlxcclxcbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgbmFtZT1cXFwibmFtZVxcXCIgaWQ9XFxcIm5hbWVcXFwiIHJlcXVpcmVkIHZhbHVlPVxcXCJcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGxvb2t1cFByb3BlcnR5KGhlbHBlcnMsXCJuYW1lXCIpIHx8IChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcIm5hbWVcIikgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6MzQsXCJjb2x1bW5cIjo3M30sXCJlbmRcIjp7XCJsaW5lXCI6MzQsXCJjb2x1bW5cIjo4MX19fSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIj5cXHJcXG4gICAgICAgICAgICA8L2xhYmVsPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmaWVsZFxcXCI+XFxyXFxuICAgICAgICAgICAgPHA+VmlzaWJpbGl0w6k8L3A+XFxyXFxuICAgICAgICAgICAgPGxhYmVsIGZvcj0nc3RhdHVzJz5cXHJcXG4gICAgICAgICAgICAgICAgPHNlbGVjdCBuYW1lPVxcXCJzdGF0dXNcXFwiIG9uQ2hhbmdlPVxcXCJcXFwiIGlkPVxcXCJzdGF0dXNcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cXFwiaGlkZGVuXFxcIiBcIlxuICAgICsgKChzdGFjazEgPSBsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiaWZcIikuY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwicHJvcF9oaWRkZW5cIikgOiBkZXB0aDApLHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDEsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjo0MSxcImNvbHVtblwiOjQzfSxcImVuZFwiOntcImxpbmVcIjo0MSxcImNvbHVtblwiOjc3fX19KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIj5JbnZpc2libGU8L29wdGlvbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XFxcInB1YmxpY1xcXCIgXCJcbiAgICArICgoc3RhY2sxID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcImlmXCIpLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcInByb3BfcHVibGljXCIpIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgxLCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6NDIsXCJjb2x1bW5cIjo0M30sXCJlbmRcIjp7XCJsaW5lXCI6NDIsXCJjb2x1bW5cIjo3N319fSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCI+UHVibGlxdWU8L29wdGlvbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XFxcInByaXZhdGVcXFwiIFwiXG4gICAgKyAoKHN0YWNrMSA9IGxvb2t1cFByb3BlcnR5KGhlbHBlcnMsXCJpZlwiKS5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJwcm9wX3ByaXZhdGVcIikgOiBkZXB0aDApLHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDEsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjo0MyxcImNvbHVtblwiOjQ0fSxcImVuZFwiOntcImxpbmVcIjo0MyxcImNvbHVtblwiOjc5fX19KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIj5Qcml2w6k8L29wdGlvbj5cXHJcXG4gICAgICAgICAgICAgICAgPC9zZWxlY3Q+XFxyXFxuICAgICAgICAgICAgPC9sYWJlbD5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiZmllbGRcXFwiPlxcclxcbiAgICAgICAgICAgIDxwPk91dnJpciBsYSBtaXNlIGVuIGxpZ25lIGRlIGZpY2hpZXJzIMOgIHRvdXMgPC9wPlxcclxcbiAgICAgICAgICAgIDxsYWJlbCBmb3I9J2FsbG93X3Zpc2l0b3JfdXBsb2FkJz5cXHJcXG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcImNoZWNrYm94XFxcIiBuYW1lPVxcXCJhbGxvd192aXNpdG9yX3VwbG9hZFxcXCIgaWQ9XFxcImFsbG93X3Zpc2l0b3JfdXBsb2FkXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgXCJcbiAgICArICgoc3RhY2sxID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcImlmXCIpLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcImFsbG93X3Zpc2l0b3JfdXBsb2FkXCIpIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgzLCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6NTEsXCJjb2x1bW5cIjoyM30sXCJlbmRcIjp7XCJsaW5lXCI6NTEsXCJjb2x1bW5cIjo2NX19fSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCI+XFxyXFxuICAgICAgICAgICAgPC9sYWJlbD5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJjYW5jZWwtYnV0dG9uXFxcIiBvbmNsaWNrPVxcXCJcIlxuICAgICsgYWxpYXM0KChsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiY3R4XCIpfHwoZGVwdGgwICYmIGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcImN0eFwiKSl8fGFsaWFzMikuY2FsbChhbGlhczEsXCJvbl9kZWxldGVfcmVwb3MoKVwiLHtcIm5hbWVcIjpcImN0eFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjo1NCxcImNvbHVtblwiOjYxfSxcImVuZFwiOntcImxpbmVcIjo1NCxcImNvbHVtblwiOjg4fX19KSlcbiAgICArIFwiXFxcIj5TdXBwcmltZXIgbGUgZMOpcMO0dCBldCBzb25cXHJcXG4gICAgICAgICAgICBjb250ZW51XFxyXFxuICAgICAgICA8L2J1dHRvbj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxpbnB1dCB0eXBlPVxcXCJidXR0b25cXFwiIHZhbHVlPVxcXCJDb25maXJtZXJcXFwiIG9uY2xpY2s9XFxcIlwiXG4gICAgKyBhbGlhczQoKGxvb2t1cFByb3BlcnR5KGhlbHBlcnMsXCJjdHhcIil8fChkZXB0aDAgJiYgbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiY3R4XCIpKXx8YWxpYXMyKS5jYWxsKGFsaWFzMSxcInN1Ym1pdCgpXCIse1wibmFtZVwiOlwiY3R4XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjU4LFwiY29sdW1uXCI6NTJ9LFwiZW5kXCI6e1wibGluZVwiOjU4LFwiY29sdW1uXCI6NzB9fX0pKVxuICAgICsgXCJcXFwiPlxcclxcbjwvZm9ybT5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pKGRhdGEpO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoZ2VuZXJhdGVkX2h0bWwsICd0ZXh0L2h0bWwnKS5ib2R5O1xuICAgICAgICAgICAgaWYgKGJvZHkuY2hpbGRyZW4ubGVuZ3RoID09PSAxKVxuICAgICAgICAgICAgICAgIHJldHVybiBib2R5LmNoaWxkcmVuWzBdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBGb3JjZSBjaGlsZHJlbiBnZW5lcmF0aW9uXG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2R5LmNoaWxkcmVuLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2goYm9keS5jaGlsZHJlbltpXSk7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgICAgIH1cbiAgICAgICAgIiwiXG4gICAgICAgIGNvbnN0IEhhbmRsZWJhcnMgPSByZXF1aXJlKCdoYW5kbGViYXJzJyk7XG4gICAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcblxuICAgICAgICAvLyBVc2VkIHRvIHJlZ2lzdGVyIGNvbnRleHRzXG4gICAgICAgIGlmICghZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlcilcbiAgICAgICAgICAgIGRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIgPSB7XG4gICAgICAgICAgICAgICAgX19uZXh0X29ial9pZDogMCxcbiAgICAgICAgICAgICAgICBfX3JlZ2lzdGVyZWRfY3R4OiB7fVxuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgSGFuZGxlYmFycy5nZXRfbWltZV9pY29ucyA9ICgpID0+IEpTT04ucGFyc2UoJ3tcImFwcGxpY2F0aW9uXCI6e1wiY29udGVudFwiOntcImphdmFzY3JpcHRcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9qYXZhc2NyaXB0LnBuZ1wiLFwianNvblwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL2pzb24ucG5nXCIsXCJwZGZcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9wZGYucG5nXCIsXCJyYXJcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9yYXIucG5nXCIsXCJ0YXJcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi90YXIucG5nXCIsXCJ6aXBcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi96aXAucG5nXCJ9LFwiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uLnBuZ1wifSxcImF1ZGlvXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2F1ZGlvLnBuZ1wifSxcImNoZW1pY2FsXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2NoZW1pY2FsLnBuZ1wifSxcImZvbnRcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvZm9udC5wbmdcIn0sXCJnY29kZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9nY29kZS5wbmdcIn0sXCJpbWFnZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9pbWFnZS5wbmdcIn0sXCJtZXNzYWdlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL21lc3NhZ2UucG5nXCJ9LFwibW9kZWxcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvbW9kZWwucG5nXCJ9LFwidGV4dFwiOntcImNvbnRlbnRcIjp7XCJjc3NcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L2Nzcy5wbmdcIixcIm1hcmtkb3duXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9tYXJrZG93bi5wbmdcIixcInBsYWluXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9wbGFpbi5wbmdcIixcInRlbXBsYXRlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC90ZW1wbGF0ZS5wbmdcIn0sXCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC5wbmdcIn0sXCJ2aWRlb1wiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy92aWRlby5wbmdcIn0sXCJ4LWNvbmZlcmVuY2VcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMveC1jb25mZXJlbmNlLnBuZ1wifX0nKTtcbiAgICAgICAgXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gKGRhdGEsIGN0eCkgPT4ge1xuICAgICAgICAgICAgaWYgKGN0eCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWN0eFsnX19oYW5kbGViYXJfY3R4X2lkJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4Ll9faGFuZGxlYmFyX2N0eF9pZCA9ICsrZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlci5fX25leHRfb2JqX2lkO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyLl9fcmVnaXN0ZXJlZF9jdHhbY3R4Ll9faGFuZGxlYmFyX2N0eF9pZF0gPSBjdHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRhdGEuX19oYW5kbGViYXJfY3R4X2lkID0gY3R4Ll9faGFuZGxlYmFyX2N0eF9pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgZ2VuZXJhdGVkX2h0bWwgPSBIYW5kbGViYXJzLnRlbXBsYXRlKHtcImNvbXBpbGVyXCI6WzgsXCI+PSA0LjMuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBoZWxwZXIsIGFsaWFzMT1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLCBhbGlhczI9Y29udGFpbmVyLmhvb2tzLmhlbHBlck1pc3NpbmcsIGFsaWFzMz1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbiwgbG9va3VwUHJvcGVydHkgPSBjb250YWluZXIubG9va3VwUHJvcGVydHkgfHwgZnVuY3Rpb24ocGFyZW50LCBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwYXJlbnQsIHByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICByZXR1cm4gcGFyZW50W3Byb3BlcnR5TmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH07XG5cbiAgcmV0dXJuIFwiPGgxPkF1dG9yaXNlciB1biBub3V2ZWwgdXRpbGlzYXRldXI8L2gxPlxcclxcbjxmb3JtIG9uc3VibWl0PVxcXCJcIlxuICAgICsgYWxpYXMzKChsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiY3R4XCIpfHwoZGVwdGgwICYmIGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcImN0eFwiKSl8fGFsaWFzMikuY2FsbChhbGlhczEsXCJhZGQoZXZlbnQpXCIse1wibmFtZVwiOlwiY3R4XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjIsXCJjb2x1bW5cIjoxNn0sXCJlbmRcIjp7XCJsaW5lXCI6MixcImNvbHVtblwiOjM2fX19KSlcbiAgICArIFwiXFxcIj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiZmllbGRcXFwiPlxcclxcbiAgICAgICAgPGxhYmVsIGZvcj0ndXNlcm5hbWUnPlxcclxcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBuYW1lPVxcXCJ1c2VybmFtZVxcXCIgcGxhY2Vob2xkZXI9XFxcIk5vbSBkJ3V0aWxpc2F0ZXVyXFxcIiBpZD1cXFwidXNlcm5hbWVcXFwiIHJlcXVpcmVkPlxcclxcbiAgICAgICAgPC9sYWJlbD5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImZpZWxkXFxcIj5cXHJcXG4gICAgICAgIDxsYWJlbCBmb3I9J2FjY2Vzc190eXBlJz5cXHJcXG4gICAgICAgICAgICA8c2VsZWN0IGNsYXNzPVxcXCJmaWVsZFxcXCIgaWQ9J2FjY2Vzc190eXBlJyBuYW1lPVxcXCJcIlxuICAgICsgYWxpYXMzKCgoaGVscGVyID0gKGhlbHBlciA9IGxvb2t1cFByb3BlcnR5KGhlbHBlcnMsXCJhY2Nlc3NfdHlwZVwiKSB8fCAoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJhY2Nlc3NfdHlwZVwiKSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBcImZ1bmN0aW9uXCIgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwiYWNjZXNzX3R5cGVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6MTAsXCJjb2x1bW5cIjo1N30sXCJlbmRcIjp7XCJsaW5lXCI6MTAsXCJjb2x1bW5cIjo3Mn19fSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cXFwicmVhZC1vbmx5XFxcIiBzZWxlY3RlZD5MZWN0dXJlIHNldWxlPC9vcHRpb24+XFxyXFxuICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XFxcImNvbnRyaWJ1dG9yXFxcIj5Db250cmlidXRldXI8L29wdGlvbj5cXHJcXG4gICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cXFwibW9kZXJhdG9yXFxcIj5Nb2TDqXJhdGV1cjwvb3B0aW9uPlxcclxcbiAgICAgICAgICAgIDwvc2VsZWN0PlxcclxcbiAgICAgICAgPC9sYWJlbD5cXHJcXG4gICAgPC9kaXY+XFxyXFxuXFxyXFxuICAgIDxpbnB1dCB0eXBlPVxcXCJzdWJtaXRcXFwiIHZhbHVlPVxcXCJBdXRvcmlzZXJcXFwiPlxcclxcbjwvZm9ybT5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pKGRhdGEpO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoZ2VuZXJhdGVkX2h0bWwsICd0ZXh0L2h0bWwnKS5ib2R5O1xuICAgICAgICAgICAgaWYgKGJvZHkuY2hpbGRyZW4ubGVuZ3RoID09PSAxKVxuICAgICAgICAgICAgICAgIHJldHVybiBib2R5LmNoaWxkcmVuWzBdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBGb3JjZSBjaGlsZHJlbiBnZW5lcmF0aW9uXG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2R5LmNoaWxkcmVuLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2goYm9keS5jaGlsZHJlbltpXSk7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgICAgIH1cbiAgICAgICAgIiwiXG4gICAgICAgIGNvbnN0IEhhbmRsZWJhcnMgPSByZXF1aXJlKCdoYW5kbGViYXJzJyk7XG4gICAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcblxuICAgICAgICAvLyBVc2VkIHRvIHJlZ2lzdGVyIGNvbnRleHRzXG4gICAgICAgIGlmICghZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlcilcbiAgICAgICAgICAgIGRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIgPSB7XG4gICAgICAgICAgICAgICAgX19uZXh0X29ial9pZDogMCxcbiAgICAgICAgICAgICAgICBfX3JlZ2lzdGVyZWRfY3R4OiB7fVxuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgSGFuZGxlYmFycy5nZXRfbWltZV9pY29ucyA9ICgpID0+IEpTT04ucGFyc2UoJ3tcImFwcGxpY2F0aW9uXCI6e1wiY29udGVudFwiOntcImphdmFzY3JpcHRcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9qYXZhc2NyaXB0LnBuZ1wiLFwianNvblwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL2pzb24ucG5nXCIsXCJwZGZcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9wZGYucG5nXCIsXCJyYXJcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9yYXIucG5nXCIsXCJ0YXJcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi90YXIucG5nXCIsXCJ6aXBcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi96aXAucG5nXCJ9LFwiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uLnBuZ1wifSxcImF1ZGlvXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2F1ZGlvLnBuZ1wifSxcImNoZW1pY2FsXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2NoZW1pY2FsLnBuZ1wifSxcImZvbnRcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvZm9udC5wbmdcIn0sXCJnY29kZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9nY29kZS5wbmdcIn0sXCJpbWFnZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9pbWFnZS5wbmdcIn0sXCJtZXNzYWdlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL21lc3NhZ2UucG5nXCJ9LFwibW9kZWxcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvbW9kZWwucG5nXCJ9LFwidGV4dFwiOntcImNvbnRlbnRcIjp7XCJjc3NcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L2Nzcy5wbmdcIixcIm1hcmtkb3duXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9tYXJrZG93bi5wbmdcIixcInBsYWluXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9wbGFpbi5wbmdcIixcInRlbXBsYXRlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC90ZW1wbGF0ZS5wbmdcIn0sXCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC5wbmdcIn0sXCJ2aWRlb1wiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy92aWRlby5wbmdcIn0sXCJ4LWNvbmZlcmVuY2VcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMveC1jb25mZXJlbmNlLnBuZ1wifX0nKTtcbiAgICAgICAgXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gKGRhdGEsIGN0eCkgPT4ge1xuICAgICAgICAgICAgaWYgKGN0eCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWN0eFsnX19oYW5kbGViYXJfY3R4X2lkJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4Ll9faGFuZGxlYmFyX2N0eF9pZCA9ICsrZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlci5fX25leHRfb2JqX2lkO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyLl9fcmVnaXN0ZXJlZF9jdHhbY3R4Ll9faGFuZGxlYmFyX2N0eF9pZF0gPSBjdHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRhdGEuX19oYW5kbGViYXJfY3R4X2lkID0gY3R4Ll9faGFuZGxlYmFyX2N0eF9pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgZ2VuZXJhdGVkX2h0bWwgPSBIYW5kbGViYXJzLnRlbXBsYXRlKHtcIjFcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHJldHVybiBcInJvb3RfaXRlbVwiO1xufSxcIjNcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHJldHVybiBcInNlbGVjdGVkXCI7XG59LFwiY29tcGlsZXJcIjpbOCxcIj49IDQuMy4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMSwgaGVscGVyLCBhbGlhczE9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwgYWxpYXMyPWNvbnRhaW5lci5ob29rcy5oZWxwZXJNaXNzaW5nLCBhbGlhczM9XCJmdW5jdGlvblwiLCBhbGlhczQ9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24sIGxvb2t1cFByb3BlcnR5ID0gY29udGFpbmVyLmxvb2t1cFByb3BlcnR5IHx8IGZ1bmN0aW9uKHBhcmVudCwgcHJvcGVydHlOYW1lKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocGFyZW50LCBwcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcmVudFtwcm9wZXJ0eU5hbWVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9O1xuXG4gIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcInJlcG9zLXNldHRpbmctYXV0aG9yaXphdGlvblxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbHVtblxcXCI+XFxyXFxuICAgICAgICA8cCBjbGFzcz1cXFwiZmllbGRcXFwiPlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcInVzZXJuYW1lXCIpIHx8IChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcInVzZXJuYW1lXCIpIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJ1c2VybmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjozLFwiY29sdW1uXCI6MjV9LFwiZW5kXCI6e1wibGluZVwiOjMsXCJjb2x1bW5cIjozN319fSkgOiBoZWxwZXIpKSlcbiAgICArIFwiPC9wPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY29sdW1uXFxcIj5cXHJcXG4gICAgICAgIDxwIGNsYXNzPVxcXCJmaWVsZFxcXCI+XCJcbiAgICArICgoc3RhY2sxID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcImlmXCIpLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcInJvb3RfaXRlbVwiKSA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjYsXCJjb2x1bW5cIjoyNX0sXCJlbmRcIjp7XCJsaW5lXCI6NixcImNvbHVtblwiOjU4fX19KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIjwvcD5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbHVtblxcXCI+XFxyXFxuICAgICAgICA8c2VsZWN0IGNsYXNzPVxcXCJmaWVsZFxcXCIgbmFtZT1cXFwiXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiYWNjZXNzX3R5cGVcIikgfHwgKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiYWNjZXNzX3R5cGVcIikgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImFjY2Vzc190eXBlXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjksXCJjb2x1bW5cIjozNn0sXCJlbmRcIjp7XCJsaW5lXCI6OSxcImNvbHVtblwiOjUxfX19KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiIG9uY2hhbmdlPVxcXCJcIlxuICAgICsgYWxpYXM0KChsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiY3R4XCIpfHwoZGVwdGgwICYmIGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcImN0eFwiKSl8fGFsaWFzMikuY2FsbChhbGlhczEsXCJzZXRfYWNjZXNzX3R5cGUoZXZlbnQpXCIse1wibmFtZVwiOlwiY3R4XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjksXCJjb2x1bW5cIjo2M30sXCJlbmRcIjp7XCJsaW5lXCI6OSxcImNvbHVtblwiOjk1fX19KSlcbiAgICArIFwiXFxcIj5cXHJcXG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVxcXCJyZWFkLW9ubHlcXFwiIFwiXG4gICAgKyAoKHN0YWNrMSA9IGxvb2t1cFByb3BlcnR5KGhlbHBlcnMsXCJpZlwiKS5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJpc19yZWFkX29ubHlcIikgOiBkZXB0aDApLHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDMsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjoxMCxcImNvbHVtblwiOjM4fSxcImVuZFwiOntcImxpbmVcIjoxMCxcImNvbHVtblwiOjczfX19KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIj5MZWN0dXJlIHNldWxlPC9vcHRpb24+XFxyXFxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cXFwiY29udHJpYnV0b3JcXFwiIFwiXG4gICAgKyAoKHN0YWNrMSA9IGxvb2t1cFByb3BlcnR5KGhlbHBlcnMsXCJpZlwiKS5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJpc19jb250cmlidXRvclwiKSA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMywgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjExLFwiY29sdW1uXCI6NDB9LFwiZW5kXCI6e1wibGluZVwiOjExLFwiY29sdW1uXCI6Nzd9fX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiPkNvbnRyaWJ1dGV1cjwvb3B0aW9uPlxcclxcbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XFxcIm1vZGVyYXRvclxcXCIgXCJcbiAgICArICgoc3RhY2sxID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcImlmXCIpLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcImlzX21vZGVyYXRvclwiKSA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMywgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjEyLFwiY29sdW1uXCI6Mzh9LFwiZW5kXCI6e1wibGluZVwiOjEyLFwiY29sdW1uXCI6NzN9fX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiPk1vZMOpcmF0ZXVyPC9vcHRpb24+XFxyXFxuICAgICAgICA8L3NlbGVjdD5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbHVtblxcXCI+XFxyXFxuICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJjYW5jZWwtYnV0dG9uIGZpZWxkXFxcIiBvbmNsaWNrPVxcXCJcIlxuICAgICsgYWxpYXM0KChsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiY3R4XCIpfHwoZGVwdGgwICYmIGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcImN0eFwiKSl8fGFsaWFzMikuY2FsbChhbGlhczEsXCJyZW1vdmUoZXZlbnQpXCIse1wibmFtZVwiOlwiY3R4XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjE2LFwiY29sdW1uXCI6NTN9LFwiZW5kXCI6e1wibGluZVwiOjE2LFwiY29sdW1uXCI6NzZ9fX0pKVxuICAgICsgXCJcXFwiPlg8L2J1dHRvbj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuPC9kaXY+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KShkYXRhKTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKGdlbmVyYXRlZF9odG1sLCAndGV4dC9odG1sJykuYm9keTtcbiAgICAgICAgICAgIGlmIChib2R5LmNoaWxkcmVuLmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICAgICAgICByZXR1cm4gYm9keS5jaGlsZHJlblswXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRm9yY2UgY2hpbGRyZW4gZ2VuZXJhdGlvblxuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm9keS5jaGlsZHJlbi5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICBjaGlsZHJlbi5wdXNoKGJvZHkuY2hpbGRyZW5baV0pO1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgICAgICB9XG4gICAgICAgICIsIlxuICAgICAgICBjb25zdCBIYW5kbGViYXJzID0gcmVxdWlyZSgnaGFuZGxlYmFycycpO1xuICAgICAgICBjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG5cbiAgICAgICAgLy8gVXNlZCB0byByZWdpc3RlciBjb250ZXh0c1xuICAgICAgICBpZiAoIWRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIpXG4gICAgICAgICAgICBkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyID0ge1xuICAgICAgICAgICAgICAgIF9fbmV4dF9vYmpfaWQ6IDAsXG4gICAgICAgICAgICAgICAgX19yZWdpc3RlcmVkX2N0eDoge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIEhhbmRsZWJhcnMuZ2V0X21pbWVfaWNvbnMgPSAoKSA9PiBKU09OLnBhcnNlKCd7XCJhcHBsaWNhdGlvblwiOntcImNvbnRlbnRcIjp7XCJqYXZhc2NyaXB0XCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vamF2YXNjcmlwdC5wbmdcIixcImpzb25cIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9qc29uLnBuZ1wiLFwicGRmXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vcGRmLnBuZ1wiLFwicmFyXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vcmFyLnBuZ1wiLFwidGFyXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vdGFyLnBuZ1wiLFwiemlwXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vemlwLnBuZ1wifSxcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi5wbmdcIn0sXCJhdWRpb1wiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hdWRpby5wbmdcIn0sXCJjaGVtaWNhbFwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9jaGVtaWNhbC5wbmdcIn0sXCJmb250XCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2ZvbnQucG5nXCJ9LFwiZ2NvZGVcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvZ2NvZGUucG5nXCJ9LFwiaW1hZ2VcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvaW1hZ2UucG5nXCJ9LFwibWVzc2FnZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9tZXNzYWdlLnBuZ1wifSxcIm1vZGVsXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL21vZGVsLnBuZ1wifSxcInRleHRcIjp7XCJjb250ZW50XCI6e1wiY3NzXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9jc3MucG5nXCIsXCJtYXJrZG93blwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvbWFya2Rvd24ucG5nXCIsXCJwbGFpblwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvcGxhaW4ucG5nXCIsXCJ0ZW1wbGF0ZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvdGVtcGxhdGUucG5nXCJ9LFwiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQucG5nXCJ9LFwidmlkZW9cIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdmlkZW8ucG5nXCJ9LFwieC1jb25mZXJlbmNlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3gtY29uZmVyZW5jZS5wbmdcIn19Jyk7XG4gICAgICAgIFxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IChkYXRhLCBjdHgpID0+IHtcbiAgICAgICAgICAgIGlmIChjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjdHhbJ19faGFuZGxlYmFyX2N0eF9pZCddKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5fX2hhbmRsZWJhcl9jdHhfaWQgPSArK2RvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIuX19uZXh0X29ial9pZDtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlci5fX3JlZ2lzdGVyZWRfY3R4W2N0eC5fX2hhbmRsZWJhcl9jdHhfaWRdID0gY3R4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkYXRhLl9faGFuZGxlYmFyX2N0eF9pZCA9IGN0eC5fX2hhbmRsZWJhcl9jdHhfaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGdlbmVyYXRlZF9odG1sID0gSGFuZGxlYmFycy50ZW1wbGF0ZSh7XCIxXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgYWxpYXMxPWNvbnRhaW5lci5sYW1iZGEsIGFsaWFzMj1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbiwgbG9va3VwUHJvcGVydHkgPSBjb250YWluZXIubG9va3VwUHJvcGVydHkgfHwgZnVuY3Rpb24ocGFyZW50LCBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwYXJlbnQsIHByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICByZXR1cm4gcGFyZW50W3Byb3BlcnR5TmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH07XG5cbiAgcmV0dXJuIFwiICAgICAgICAgICAgPHA+LSBcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJjb3VudFwiKSA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIiBcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJtaW1ldHlwZVwiKSA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIjwvcD5cXHJcXG5cIjtcbn0sXCIzXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgYWxpYXMxPWNvbnRhaW5lci5sYW1iZGEsIGFsaWFzMj1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbiwgbG9va3VwUHJvcGVydHkgPSBjb250YWluZXIubG9va3VwUHJvcGVydHkgfHwgZnVuY3Rpb24ocGFyZW50LCBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwYXJlbnQsIHByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICByZXR1cm4gcGFyZW50W3Byb3BlcnR5TmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH07XG5cbiAgcmV0dXJuIFwiICAgICAgICAgICAgPHA+LSBcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJuYW1lXCIpIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiIChcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJpdGVtc1wiKSA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIiDDqWzDqW1lbnRzKTwvcD5cXHJcXG5cIjtcbn0sXCJjb21waWxlclwiOls4LFwiPj0gNC4zLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxLCBoZWxwZXIsIGFsaWFzMT1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLCBhbGlhczI9Y29udGFpbmVyLmhvb2tzLmhlbHBlck1pc3NpbmcsIGFsaWFzMz1cImZ1bmN0aW9uXCIsIGFsaWFzND1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbiwgbG9va3VwUHJvcGVydHkgPSBjb250YWluZXIubG9va3VwUHJvcGVydHkgfHwgZnVuY3Rpb24ocGFyZW50LCBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwYXJlbnQsIHByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICByZXR1cm4gcGFyZW50W3Byb3BlcnR5TmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH07XG5cbiAgcmV0dXJuIFwiPGRpdj5cXHJcXG4gICAgPHA+RMOpcG90IDo8L3A+PHAgY2xhc3M9XFxcInNtYWxsZXJcXFwiPlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcInRvdGFsX2NvdW50XCIpIHx8IChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcInRvdGFsX2NvdW50XCIpIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJ0b3RhbF9jb3VudFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjoyLFwiY29sdW1uXCI6Mzd9LFwiZW5kXCI6e1wibGluZVwiOjIsXCJjb2x1bW5cIjo1Mn19fSkgOiBoZWxwZXIpKSlcbiAgICArIFwiIMOpbMOpbWVudHMsIFwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcInRvdGFsX2RpcnNcIikgfHwgKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwidG90YWxfZGlyc1wiKSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwidG90YWxfZGlyc1wiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjoyLFwiY29sdW1uXCI6NjN9LFwiZW5kXCI6e1wibGluZVwiOjIsXCJjb2x1bW5cIjo3N319fSkgOiBoZWxwZXIpKSlcbiAgICArIFwiIGRvc3NpZXJzIChcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGxvb2t1cFByb3BlcnR5KGhlbHBlcnMsXCJ0b3RhbF9zaXplXCIpIHx8IChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcInRvdGFsX3NpemVcIikgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcInRvdGFsX3NpemVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6MixcImNvbHVtblwiOjg4fSxcImVuZFwiOntcImxpbmVcIjoyLFwiY29sdW1uXCI6MTAyfX19KSA6IGhlbHBlcikpKVxuICAgICsgXCIpPC9wPlxcclxcbiAgICA8cD5Eb250IGRhbnMgbGEgY29yYmVpbGxlIDo8L3A+PHAgY2xhc3M9XFxcInNtYWxsZXJcXFwiPlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcInRyYXNoX2NvdW50XCIpIHx8IChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcInRyYXNoX2NvdW50XCIpIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJ0cmFzaF9jb3VudFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjozLFwiY29sdW1uXCI6NTR9LFwiZW5kXCI6e1wibGluZVwiOjMsXCJjb2x1bW5cIjo2OX19fSkgOiBoZWxwZXIpKSlcbiAgICArIFwiIMOpbMOpbWVudHMsIFwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcInRyYXNoX2RpcnNcIikgfHwgKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwidHJhc2hfZGlyc1wiKSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwidHJhc2hfZGlyc1wiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjozLFwiY29sdW1uXCI6ODB9LFwiZW5kXCI6e1wibGluZVwiOjMsXCJjb2x1bW5cIjo5NH19fSkgOiBoZWxwZXIpKSlcbiAgICArIFwiIGRvc3NpZXJzIChcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGxvb2t1cFByb3BlcnR5KGhlbHBlcnMsXCJ0cmFzaF9zaXplXCIpIHx8IChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcInRyYXNoX3NpemVcIikgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcInRyYXNoX3NpemVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6MyxcImNvbHVtblwiOjEwNX0sXCJlbmRcIjp7XCJsaW5lXCI6MyxcImNvbHVtblwiOjExOX19fSkgOiBoZWxwZXIpKSlcbiAgICArIFwiKTwvcD5cXHJcXG4gICAgPHA+XCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwibnVtX2V4dGVuc2lvbnNcIikgfHwgKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwibnVtX2V4dGVuc2lvbnNcIikgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcIm51bV9leHRlbnNpb25zXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjQsXCJjb2x1bW5cIjo3fSxcImVuZFwiOntcImxpbmVcIjo0LFwiY29sdW1uXCI6MjV9fX0pIDogaGVscGVyKSkpXG4gICAgKyBcIiBleHRlbnNpb25zIDo8L3A+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcIml0ZW1fbGlzdFxcXCI+XFxyXFxuXCJcbiAgICArICgoc3RhY2sxID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcImVhY2hcIikuY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiZXh0ZW5zaW9uc1wiKSA6IGRlcHRoMCkse1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgxLCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6NixcImNvbHVtblwiOjh9LFwiZW5kXCI6e1wibGluZVwiOjgsXCJjb2x1bW5cIjoxN319fSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgICAgPC9kaXY+XFxyXFxuICAgIDxwPlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcIm51bV9jb250cmlidXRvcnNcIikgfHwgKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwibnVtX2NvbnRyaWJ1dG9yc1wiKSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwibnVtX2NvbnRyaWJ1dG9yc1wiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjoxMCxcImNvbHVtblwiOjd9LFwiZW5kXCI6e1wibGluZVwiOjEwLFwiY29sdW1uXCI6Mjd9fX0pIDogaGVscGVyKSkpXG4gICAgKyBcIiBjb250cmlidXRldXJzIDo8L3A+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcIml0ZW1fbGlzdFxcXCI+XFxyXFxuXCJcbiAgICArICgoc3RhY2sxID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcImVhY2hcIikuY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiY29udHJpYnV0b3JzXCIpIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDMsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjoxMixcImNvbHVtblwiOjh9LFwiZW5kXCI6e1wibGluZVwiOjE0LFwiY29sdW1uXCI6MTd9fX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgIDwvZGl2PlxcclxcbjwvZGl2PlwiO1xufSxcInVzZURhdGFcIjp0cnVlfSkoZGF0YSk7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhnZW5lcmF0ZWRfaHRtbCwgJ3RleHQvaHRtbCcpLmJvZHk7XG4gICAgICAgICAgICBpZiAoYm9keS5jaGlsZHJlbi5sZW5ndGggPT09IDEpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJvZHkuY2hpbGRyZW5bMF07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEZvcmNlIGNoaWxkcmVuIGdlbmVyYXRpb25cbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJvZHkuY2hpbGRyZW4ubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChib2R5LmNoaWxkcmVuW2ldKTtcbiAgICAgICAgICAgIHJldHVybiBjaGlsZHJlbjtcbiAgICAgICAgfVxuICAgICAgICAiLCJcbiAgICAgICAgY29uc3QgSGFuZGxlYmFycyA9IHJlcXVpcmUoJ2hhbmRsZWJhcnMnKTtcbiAgICAgICAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuXG4gICAgICAgIC8vIFVzZWQgdG8gcmVnaXN0ZXIgY29udGV4dHNcbiAgICAgICAgaWYgKCFkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyKVxuICAgICAgICAgICAgZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlciA9IHtcbiAgICAgICAgICAgICAgICBfX25leHRfb2JqX2lkOiAwLFxuICAgICAgICAgICAgICAgIF9fcmVnaXN0ZXJlZF9jdHg6IHt9XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBIYW5kbGViYXJzLmdldF9taW1lX2ljb25zID0gKCkgPT4gSlNPTi5wYXJzZSgne1wiYXBwbGljYXRpb25cIjp7XCJjb250ZW50XCI6e1wiamF2YXNjcmlwdFwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL2phdmFzY3JpcHQucG5nXCIsXCJqc29uXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vanNvbi5wbmdcIixcInBkZlwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL3BkZi5wbmdcIixcInJhclwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL3Jhci5wbmdcIixcInRhclwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL3Rhci5wbmdcIixcInppcFwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL3ppcC5wbmdcIn0sXCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24ucG5nXCJ9LFwiYXVkaW9cIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXVkaW8ucG5nXCJ9LFwiY2hlbWljYWxcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvY2hlbWljYWwucG5nXCJ9LFwiZm9udFwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9mb250LnBuZ1wifSxcImdjb2RlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2djb2RlLnBuZ1wifSxcImltYWdlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2ltYWdlLnBuZ1wifSxcIm1lc3NhZ2VcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvbWVzc2FnZS5wbmdcIn0sXCJtb2RlbFwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9tb2RlbC5wbmdcIn0sXCJ0ZXh0XCI6e1wiY29udGVudFwiOntcImNzc1wiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvY3NzLnBuZ1wiLFwibWFya2Rvd25cIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L21hcmtkb3duLnBuZ1wiLFwicGxhaW5cIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L3BsYWluLnBuZ1wiLFwidGVtcGxhdGVcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L3RlbXBsYXRlLnBuZ1wifSxcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0LnBuZ1wifSxcInZpZGVvXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3ZpZGVvLnBuZ1wifSxcIngtY29uZmVyZW5jZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy94LWNvbmZlcmVuY2UucG5nXCJ9fScpO1xuICAgICAgICBcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSAoZGF0YSwgY3R4KSA9PiB7XG4gICAgICAgICAgICBpZiAoY3R4KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY3R4WydfX2hhbmRsZWJhcl9jdHhfaWQnXSkge1xuICAgICAgICAgICAgICAgICAgICBjdHguX19oYW5kbGViYXJfY3R4X2lkID0gKytkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyLl9fbmV4dF9vYmpfaWQ7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIuX19yZWdpc3RlcmVkX2N0eFtjdHguX19oYW5kbGViYXJfY3R4X2lkXSA9IGN0eDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGF0YS5fX2hhbmRsZWJhcl9jdHhfaWQgPSBjdHguX19oYW5kbGViYXJfY3R4X2lkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBnZW5lcmF0ZWRfaHRtbCA9IEhhbmRsZWJhcnMudGVtcGxhdGUoe1wiY29tcGlsZXJcIjpbOCxcIj49IDQuMy4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGFsaWFzMT1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLCBhbGlhczI9Y29udGFpbmVyLmhvb2tzLmhlbHBlck1pc3NpbmcsIGFsaWFzMz1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbiwgbG9va3VwUHJvcGVydHkgPSBjb250YWluZXIubG9va3VwUHJvcGVydHkgfHwgZnVuY3Rpb24ocGFyZW50LCBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwYXJlbnQsIHByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICByZXR1cm4gcGFyZW50W3Byb3BlcnR5TmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH07XG5cbiAgcmV0dXJuIFwiPGRpdiBpZD1cXFwidG9vbGJhci1tZW51XFxcIj5cXHJcXG4gICAgPHAgaWQ9XFxcInRvb2xiYXItc3RhdHNcXFwiPnZpZGUgLyAwIGZpY2hpZXJzPC9wPlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJzZWFyY2gtZGl2XFxcIj5cXHJcXG4gICAgICAgIDxsYWJlbD5cXHJcXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgcGxhY2Vob2xkZXI9XFxcIkNoZXJjaGVyIHVuIMOpbMOpbWVudFxcXCIgaWQ9XFxcInRvb2xiYXItc2VhcmNoLXRleHRcXFwiIG9uY2hhbmdlXFxyXFxuICAgICAgICAgICAgICAgICAgIG9ucHJvcGVydHljaGFuZ2VcXHJcXG4gICAgICAgICAgICAgICAgICAgb25rZXl1cG9ucGFzdGUgb25pbnB1dD1cXFwiXCJcbiAgICArIGFsaWFzMygobG9va3VwUHJvcGVydHkoaGVscGVycyxcImN0eFwiKXx8KGRlcHRoMCAmJiBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJjdHhcIikpfHxhbGlhczIpLmNhbGwoYWxpYXMxLFwidXBkYXRlX3NlYXJjaChldmVudClcIix7XCJuYW1lXCI6XCJjdHhcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6NyxcImNvbHVtblwiOjQzfSxcImVuZFwiOntcImxpbmVcIjo3LFwiY29sdW1uXCI6NzN9fX0pKVxuICAgICsgXCJcXFwiPlxcclxcbiAgICAgICAgPC9sYWJlbD5cXHJcXG4gICAgICAgIDxidXR0b24gb25jbGljaz1cXFwiXCJcbiAgICArIGFsaWFzMygobG9va3VwUHJvcGVydHkoaGVscGVycyxcImN0eFwiKXx8KGRlcHRoMCAmJiBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJjdHhcIikpfHxhbGlhczIpLmNhbGwoYWxpYXMxLFwic2VhcmNoKClcIix7XCJuYW1lXCI6XCJjdHhcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6OSxcImNvbHVtblwiOjI1fSxcImVuZFwiOntcImxpbmVcIjo5LFwiY29sdW1uXCI6NDN9fX0pKVxuICAgICsgXCJcXFwiIGlkPVxcXCJ0b29sYmFyLXNlYXJjaFxcXCI+PGltZyBhbHQ9XFxcInNlYXJjaFxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPVxcXCIvaW1hZ2VzL2ljb25zL2ljb25zOC1zZWFyY2gtMTAwLnBuZ1xcXCI+XFxyXFxuICAgICAgICA8L2J1dHRvbj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxidXR0b24gb25jbGljaz1cXFwiXCJcbiAgICArIGFsaWFzMygobG9va3VwUHJvcGVydHkoaGVscGVycyxcImN0eFwiKXx8KGRlcHRoMCAmJiBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJjdHhcIikpfHxhbGlhczIpLmNhbGwoYWxpYXMxLFwiZG93bmxvYWQoKVwiLHtcIm5hbWVcIjpcImN0eFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjoxMyxcImNvbHVtblwiOjIxfSxcImVuZFwiOntcImxpbmVcIjoxMyxcImNvbHVtblwiOjQxfX19KSlcbiAgICArIFwiXFxcIj48aW1nIHNyYz1cXFwiL2ltYWdlcy9pY29ucy9pY29uczgtZG93bmxvYWQtOTYucG5nXFxcIiBhbHQ9XFxcImRvd25sb2FkXFxcIj48L2J1dHRvbj5cXHJcXG4gICAgPGJ1dHRvbiBvbmNsaWNrPVxcXCJcIlxuICAgICsgYWxpYXMzKChsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiY3R4XCIpfHwoZGVwdGgwICYmIGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcImN0eFwiKSl8fGFsaWFzMikuY2FsbChhbGlhczEsXCJtb3JlKClcIix7XCJuYW1lXCI6XCJjdHhcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6MTQsXCJjb2x1bW5cIjoyMX0sXCJlbmRcIjp7XCJsaW5lXCI6MTQsXCJjb2x1bW5cIjozN319fSkpXG4gICAgKyBcIlxcXCI+PGltZyBhbHQ9XFxcIm1vcmVcXFwiIHNyYz1cXFwiL2ltYWdlcy9pY29ucy9pY29uczgtZWxsaXBzaXMtOTAucG5nXFxcIj48L2J1dHRvbj5cXHJcXG48L2Rpdj5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pKGRhdGEpO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoZ2VuZXJhdGVkX2h0bWwsICd0ZXh0L2h0bWwnKS5ib2R5O1xuICAgICAgICAgICAgaWYgKGJvZHkuY2hpbGRyZW4ubGVuZ3RoID09PSAxKVxuICAgICAgICAgICAgICAgIHJldHVybiBib2R5LmNoaWxkcmVuWzBdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBGb3JjZSBjaGlsZHJlbiBnZW5lcmF0aW9uXG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2R5LmNoaWxkcmVuLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2goYm9keS5jaGlsZHJlbltpXSk7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgICAgIH1cbiAgICAgICAgIiwiXG4gICAgICAgIGNvbnN0IEhhbmRsZWJhcnMgPSByZXF1aXJlKCdoYW5kbGViYXJzJyk7XG4gICAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcblxuICAgICAgICAvLyBVc2VkIHRvIHJlZ2lzdGVyIGNvbnRleHRzXG4gICAgICAgIGlmICghZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlcilcbiAgICAgICAgICAgIGRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIgPSB7XG4gICAgICAgICAgICAgICAgX19uZXh0X29ial9pZDogMCxcbiAgICAgICAgICAgICAgICBfX3JlZ2lzdGVyZWRfY3R4OiB7fVxuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgSGFuZGxlYmFycy5nZXRfbWltZV9pY29ucyA9ICgpID0+IEpTT04ucGFyc2UoJ3tcImFwcGxpY2F0aW9uXCI6e1wiY29udGVudFwiOntcImphdmFzY3JpcHRcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9qYXZhc2NyaXB0LnBuZ1wiLFwianNvblwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL2pzb24ucG5nXCIsXCJwZGZcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9wZGYucG5nXCIsXCJyYXJcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9yYXIucG5nXCIsXCJ0YXJcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi90YXIucG5nXCIsXCJ6aXBcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi96aXAucG5nXCJ9LFwiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uLnBuZ1wifSxcImF1ZGlvXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2F1ZGlvLnBuZ1wifSxcImNoZW1pY2FsXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2NoZW1pY2FsLnBuZ1wifSxcImZvbnRcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvZm9udC5wbmdcIn0sXCJnY29kZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9nY29kZS5wbmdcIn0sXCJpbWFnZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9pbWFnZS5wbmdcIn0sXCJtZXNzYWdlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL21lc3NhZ2UucG5nXCJ9LFwibW9kZWxcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvbW9kZWwucG5nXCJ9LFwidGV4dFwiOntcImNvbnRlbnRcIjp7XCJjc3NcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L2Nzcy5wbmdcIixcIm1hcmtkb3duXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9tYXJrZG93bi5wbmdcIixcInBsYWluXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9wbGFpbi5wbmdcIixcInRlbXBsYXRlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC90ZW1wbGF0ZS5wbmdcIn0sXCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC5wbmdcIn0sXCJ2aWRlb1wiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy92aWRlby5wbmdcIn0sXCJ4LWNvbmZlcmVuY2VcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMveC1jb25mZXJlbmNlLnBuZ1wifX0nKTtcbiAgICAgICAgXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gKGRhdGEsIGN0eCkgPT4ge1xuICAgICAgICAgICAgaWYgKGN0eCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWN0eFsnX19oYW5kbGViYXJfY3R4X2lkJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4Ll9faGFuZGxlYmFyX2N0eF9pZCA9ICsrZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlci5fX25leHRfb2JqX2lkO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyLl9fcmVnaXN0ZXJlZF9jdHhbY3R4Ll9faGFuZGxlYmFyX2N0eF9pZF0gPSBjdHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRhdGEuX19oYW5kbGViYXJfY3R4X2lkID0gY3R4Ll9faGFuZGxlYmFyX2N0eF9pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgZ2VuZXJhdGVkX2h0bWwgPSBIYW5kbGViYXJzLnRlbXBsYXRlKHtcImNvbXBpbGVyXCI6WzgsXCI+PSA0LjMuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBhbGlhczE9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwgYWxpYXMyPWNvbnRhaW5lci5ob29rcy5oZWxwZXJNaXNzaW5nLCBhbGlhczM9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24sIGxvb2t1cFByb3BlcnR5ID0gY29udGFpbmVyLmxvb2t1cFByb3BlcnR5IHx8IGZ1bmN0aW9uKHBhcmVudCwgcHJvcGVydHlOYW1lKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocGFyZW50LCBwcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcmVudFtwcm9wZXJ0eU5hbWVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9O1xuXG4gIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcImZvbGRlclxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImZvbGRlci1idXR0b25cXFwiICBvbmNsaWNrPVxcXCJcIlxuICAgICsgYWxpYXMzKChsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiY3R4XCIpfHwoZGVwdGgwICYmIGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcImN0eFwiKSl8fGFsaWFzMikuY2FsbChhbGlhczEsXCJjbGlja2VkKClcIix7XCJuYW1lXCI6XCJjdHhcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6MixcImNvbHVtblwiOjQxfSxcImVuZFwiOntcImxpbmVcIjoyLFwiY29sdW1uXCI6NjB9fX0pKVxuICAgICsgXCJcXFwiIG9ubW91c2VlbnRlcj1cXFwiXCJcbiAgICArIGFsaWFzMygobG9va3VwUHJvcGVydHkoaGVscGVycyxcImN0eFwiKXx8KGRlcHRoMCAmJiBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJjdHhcIikpfHxhbGlhczIpLmNhbGwoYWxpYXMxLFwiZW50ZXIoKVwiLHtcIm5hbWVcIjpcImN0eFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjoyLFwiY29sdW1uXCI6NzZ9LFwiZW5kXCI6e1wibGluZVwiOjIsXCJjb2x1bW5cIjo5M319fSkpXG4gICAgKyBcIlxcXCIgb25tb3VzZWxlYXZlPVxcXCJcIlxuICAgICsgYWxpYXMzKChsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiY3R4XCIpfHwoZGVwdGgwICYmIGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcImN0eFwiKSl8fGFsaWFzMikuY2FsbChhbGlhczEsXCJsZWF2ZSgpXCIse1wibmFtZVwiOlwiY3R4XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjIsXCJjb2x1bW5cIjoxMDl9LFwiZW5kXCI6e1wibGluZVwiOjIsXCJjb2x1bW5cIjoxMjZ9fX0pKVxuICAgICsgXCJcXFwiPlxcclxcbiAgICAgICAgPGltZyBzcmM9XFxcIi9pbWFnZXMvaWNvbnMvaWNvbnM4LWZvbGRlci05Ni5wbmdcXFwiIGFsdD1cXFwiZm9sZGVyXFxcIj5cXHJcXG4gICAgICAgIDxoMj5sb2FkaW5nLi4uPC9oMj5cXHJcXG4gICAgICAgIDxidXR0b24gY2xhc3M9XFxcInRyYXNoIGNhbmNlbC1idXR0b25cXFwiIHN0eWxlPVxcXCJvcGFjaXR5OiAwXFxcIiBvbmNsaWNrPVxcXCJcIlxuICAgICsgYWxpYXMzKChsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiY3R4XCIpfHwoZGVwdGgwICYmIGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcImN0eFwiKSl8fGFsaWFzMikuY2FsbChhbGlhczEsXCJyZW1vdmVkKClcIix7XCJuYW1lXCI6XCJjdHhcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6NSxcImNvbHVtblwiOjcyfSxcImVuZFwiOntcImxpbmVcIjo1LFwiY29sdW1uXCI6OTF9fX0pKVxuICAgICsgXCJcXFwiPlxcclxcbiAgICAgICAgICAgIDxpbWcgc3JjPScvaW1hZ2VzL2ljb25zL2ljb25zOC10cmFzaC01Mi5wbmcnIGFsdD1cXFwic3VwcHJpbWVyXFxcIj5cXHJcXG4gICAgICAgIDwvYnV0dG9uPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiZm9sZGVyLWNvbnRlbnRcXFwiIHN0eWxlPVxcXCJkaXNwbGF5OiBub25lXFxcIj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuPC9kaXY+XFxyXFxuXCI7XG59LFwidXNlRGF0YVwiOnRydWV9KShkYXRhKTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKGdlbmVyYXRlZF9odG1sLCAndGV4dC9odG1sJykuYm9keTtcbiAgICAgICAgICAgIGlmIChib2R5LmNoaWxkcmVuLmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICAgICAgICByZXR1cm4gYm9keS5jaGlsZHJlblswXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRm9yY2UgY2hpbGRyZW4gZ2VuZXJhdGlvblxuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm9keS5jaGlsZHJlbi5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICBjaGlsZHJlbi5wdXNoKGJvZHkuY2hpbGRyZW5baV0pO1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgICAgICB9XG4gICAgICAgICIsIlxuICAgICAgICBjb25zdCBIYW5kbGViYXJzID0gcmVxdWlyZSgnaGFuZGxlYmFycycpO1xuICAgICAgICBjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG5cbiAgICAgICAgLy8gVXNlZCB0byByZWdpc3RlciBjb250ZXh0c1xuICAgICAgICBpZiAoIWRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIpXG4gICAgICAgICAgICBkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyID0ge1xuICAgICAgICAgICAgICAgIF9fbmV4dF9vYmpfaWQ6IDAsXG4gICAgICAgICAgICAgICAgX19yZWdpc3RlcmVkX2N0eDoge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIEhhbmRsZWJhcnMuZ2V0X21pbWVfaWNvbnMgPSAoKSA9PiBKU09OLnBhcnNlKCd7XCJhcHBsaWNhdGlvblwiOntcImNvbnRlbnRcIjp7XCJqYXZhc2NyaXB0XCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vamF2YXNjcmlwdC5wbmdcIixcImpzb25cIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9qc29uLnBuZ1wiLFwicGRmXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vcGRmLnBuZ1wiLFwicmFyXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vcmFyLnBuZ1wiLFwidGFyXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vdGFyLnBuZ1wiLFwiemlwXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vemlwLnBuZ1wifSxcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi5wbmdcIn0sXCJhdWRpb1wiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hdWRpby5wbmdcIn0sXCJjaGVtaWNhbFwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9jaGVtaWNhbC5wbmdcIn0sXCJmb250XCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2ZvbnQucG5nXCJ9LFwiZ2NvZGVcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvZ2NvZGUucG5nXCJ9LFwiaW1hZ2VcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvaW1hZ2UucG5nXCJ9LFwibWVzc2FnZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9tZXNzYWdlLnBuZ1wifSxcIm1vZGVsXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL21vZGVsLnBuZ1wifSxcInRleHRcIjp7XCJjb250ZW50XCI6e1wiY3NzXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9jc3MucG5nXCIsXCJtYXJrZG93blwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvbWFya2Rvd24ucG5nXCIsXCJwbGFpblwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvcGxhaW4ucG5nXCIsXCJ0ZW1wbGF0ZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvdGVtcGxhdGUucG5nXCJ9LFwiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQucG5nXCJ9LFwidmlkZW9cIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdmlkZW8ucG5nXCJ9LFwieC1jb25mZXJlbmNlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3gtY29uZmVyZW5jZS5wbmdcIn19Jyk7XG4gICAgICAgIFxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IChkYXRhLCBjdHgpID0+IHtcbiAgICAgICAgICAgIGlmIChjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjdHhbJ19faGFuZGxlYmFyX2N0eF9pZCddKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5fX2hhbmRsZWJhcl9jdHhfaWQgPSArK2RvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIuX19uZXh0X29ial9pZDtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlci5fX3JlZ2lzdGVyZWRfY3R4W2N0eC5fX2hhbmRsZWJhcl9jdHhfaWRdID0gY3R4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkYXRhLl9faGFuZGxlYmFyX2N0eF9pZCA9IGN0eC5fX2hhbmRsZWJhcl9jdHhfaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGdlbmVyYXRlZF9odG1sID0gSGFuZGxlYmFycy50ZW1wbGF0ZSh7XCJjb21waWxlclwiOls4LFwiPj0gNC4zLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgaGVscGVyLCBhbGlhczE9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwgYWxpYXMyPWNvbnRhaW5lci5ob29rcy5oZWxwZXJNaXNzaW5nLCBhbGlhczM9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24sIGFsaWFzND1cImZ1bmN0aW9uXCIsIGxvb2t1cFByb3BlcnR5ID0gY29udGFpbmVyLmxvb2t1cFByb3BlcnR5IHx8IGZ1bmN0aW9uKHBhcmVudCwgcHJvcGVydHlOYW1lKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocGFyZW50LCBwcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcmVudFtwcm9wZXJ0eU5hbWVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9O1xuXG4gIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcImZpbGVcXFwiIG9ubW91c2VlbnRlcj1cXFwiXCJcbiAgICArIGFsaWFzMygobG9va3VwUHJvcGVydHkoaGVscGVycyxcImN0eFwiKXx8KGRlcHRoMCAmJiBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJjdHhcIikpfHxhbGlhczIpLmNhbGwoYWxpYXMxLFwiZW50ZXIoKVwiLHtcIm5hbWVcIjpcImN0eFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjoxLFwiY29sdW1uXCI6MzJ9LFwiZW5kXCI6e1wibGluZVwiOjEsXCJjb2x1bW5cIjo0OX19fSkpXG4gICAgKyBcIlxcXCIgb25tb3VzZWxlYXZlPVxcXCJcIlxuICAgICsgYWxpYXMzKChsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiY3R4XCIpfHwoZGVwdGgwICYmIGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcImN0eFwiKSl8fGFsaWFzMikuY2FsbChhbGlhczEsXCJsZWF2ZSgpXCIse1wibmFtZVwiOlwiY3R4XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjEsXCJjb2x1bW5cIjo2NX0sXCJlbmRcIjp7XCJsaW5lXCI6MSxcImNvbHVtblwiOjgyfX19KSlcbiAgICArIFwiXFxcIj5cXHJcXG4gICAgXCJcbiAgICArIGFsaWFzMygobG9va3VwUHJvcGVydHkoaGVscGVycyxcIml0ZW1fdGh1bWJuYWlsXCIpfHwoZGVwdGgwICYmIGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcIml0ZW1fdGh1bWJuYWlsXCIpKXx8YWxpYXMyKS5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJpdGVtXCIpIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJpdGVtX3RodW1ibmFpbFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjoyLFwiY29sdW1uXCI6NH0sXCJlbmRcIjp7XCJsaW5lXCI6MixcImNvbHVtblwiOjI3fX19KSlcbiAgICArIFwiXFxyXFxuICAgIDxwPlwiXG4gICAgKyBhbGlhczMoKChoZWxwZXIgPSAoaGVscGVyID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcIm5hbWVcIikgfHwgKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwibmFtZVwiKSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczQgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjozLFwiY29sdW1uXCI6N30sXCJlbmRcIjp7XCJsaW5lXCI6MyxcImNvbHVtblwiOjE1fX19KSA6IGhlbHBlcikpKVxuICAgICsgXCIgKFwiXG4gICAgKyBhbGlhczMoKChoZWxwZXIgPSAoaGVscGVyID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcInNpemVcIikgfHwgKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwic2l6ZVwiKSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczQgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwic2l6ZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjozLFwiY29sdW1uXCI6MTd9LFwiZW5kXCI6e1wibGluZVwiOjMsXCJjb2x1bW5cIjoyNX19fSkgOiBoZWxwZXIpKSlcbiAgICArIFwiKTwvcD5cXHJcXG4gICAgPGJ1dHRvbiBjbGFzcz1cXFwidHJhc2ggY2FuY2VsLWJ1dHRvblxcXCIgc3R5bGU9XFxcIm9wYWNpdHk6IDBcXFwiIG9uY2xpY2s9XFxcIlwiXG4gICAgKyBhbGlhczMoKGxvb2t1cFByb3BlcnR5KGhlbHBlcnMsXCJjdHhcIil8fChkZXB0aDAgJiYgbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiY3R4XCIpKXx8YWxpYXMyKS5jYWxsKGFsaWFzMSxcInJlbW92ZWQoKVwiLHtcIm5hbWVcIjpcImN0eFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjo0LFwiY29sdW1uXCI6Njh9LFwiZW5kXCI6e1wibGluZVwiOjQsXCJjb2x1bW5cIjo4N319fSkpXG4gICAgKyBcIlxcXCI+XFxyXFxuICAgICAgICA8aW1nIHNyYz0nL2ltYWdlcy9pY29ucy9pY29uczgtdHJhc2gtNTIucG5nJyBhbHQ9XFxcInN1cHByaW1lclxcXCI+XFxyXFxuICAgIDwvYnV0dG9uPlxcclxcbjwvZGl2PlxcclxcblwiO1xufSxcInVzZURhdGFcIjp0cnVlfSkoZGF0YSk7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhnZW5lcmF0ZWRfaHRtbCwgJ3RleHQvaHRtbCcpLmJvZHk7XG4gICAgICAgICAgICBpZiAoYm9keS5jaGlsZHJlbi5sZW5ndGggPT09IDEpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJvZHkuY2hpbGRyZW5bMF07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEZvcmNlIGNoaWxkcmVuIGdlbmVyYXRpb25cbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJvZHkuY2hpbGRyZW4ubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChib2R5LmNoaWxkcmVuW2ldKTtcbiAgICAgICAgICAgIHJldHVybiBjaGlsZHJlbjtcbiAgICAgICAgfVxuICAgICAgICAiLCJcbiAgICAgICAgY29uc3QgSGFuZGxlYmFycyA9IHJlcXVpcmUoJ2hhbmRsZWJhcnMnKTtcbiAgICAgICAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuXG4gICAgICAgIC8vIFVzZWQgdG8gcmVnaXN0ZXIgY29udGV4dHNcbiAgICAgICAgaWYgKCFkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyKVxuICAgICAgICAgICAgZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlciA9IHtcbiAgICAgICAgICAgICAgICBfX25leHRfb2JqX2lkOiAwLFxuICAgICAgICAgICAgICAgIF9fcmVnaXN0ZXJlZF9jdHg6IHt9XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBIYW5kbGViYXJzLmdldF9taW1lX2ljb25zID0gKCkgPT4gSlNPTi5wYXJzZSgne1wiYXBwbGljYXRpb25cIjp7XCJjb250ZW50XCI6e1wiamF2YXNjcmlwdFwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL2phdmFzY3JpcHQucG5nXCIsXCJqc29uXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vanNvbi5wbmdcIixcInBkZlwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL3BkZi5wbmdcIixcInJhclwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL3Jhci5wbmdcIixcInRhclwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL3Rhci5wbmdcIixcInppcFwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL3ppcC5wbmdcIn0sXCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24ucG5nXCJ9LFwiYXVkaW9cIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXVkaW8ucG5nXCJ9LFwiY2hlbWljYWxcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvY2hlbWljYWwucG5nXCJ9LFwiZm9udFwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9mb250LnBuZ1wifSxcImdjb2RlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2djb2RlLnBuZ1wifSxcImltYWdlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2ltYWdlLnBuZ1wifSxcIm1lc3NhZ2VcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvbWVzc2FnZS5wbmdcIn0sXCJtb2RlbFwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9tb2RlbC5wbmdcIn0sXCJ0ZXh0XCI6e1wiY29udGVudFwiOntcImNzc1wiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvY3NzLnBuZ1wiLFwibWFya2Rvd25cIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L21hcmtkb3duLnBuZ1wiLFwicGxhaW5cIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L3BsYWluLnBuZ1wiLFwidGVtcGxhdGVcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L3RlbXBsYXRlLnBuZ1wifSxcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0LnBuZ1wifSxcInZpZGVvXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3ZpZGVvLnBuZ1wifSxcIngtY29uZmVyZW5jZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy94LWNvbmZlcmVuY2UucG5nXCJ9fScpO1xuICAgICAgICBcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSAoZGF0YSwgY3R4KSA9PiB7XG4gICAgICAgICAgICBpZiAoY3R4KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY3R4WydfX2hhbmRsZWJhcl9jdHhfaWQnXSkge1xuICAgICAgICAgICAgICAgICAgICBjdHguX19oYW5kbGViYXJfY3R4X2lkID0gKytkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyLl9fbmV4dF9vYmpfaWQ7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIuX19yZWdpc3RlcmVkX2N0eFtjdHguX19oYW5kbGViYXJfY3R4X2lkXSA9IGN0eDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGF0YS5fX2hhbmRsZWJhcl9jdHhfaWQgPSBjdHguX19oYW5kbGViYXJfY3R4X2lkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBnZW5lcmF0ZWRfaHRtbCA9IEhhbmRsZWJhcnMudGVtcGxhdGUoe1wiY29tcGlsZXJcIjpbOCxcIj49IDQuMy4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGFsaWFzMT1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLCBhbGlhczI9Y29udGFpbmVyLmhvb2tzLmhlbHBlck1pc3NpbmcsIGFsaWFzMz1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbiwgbG9va3VwUHJvcGVydHkgPSBjb250YWluZXIubG9va3VwUHJvcGVydHkgfHwgZnVuY3Rpb24ocGFyZW50LCBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwYXJlbnQsIHByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICByZXR1cm4gcGFyZW50W3Byb3BlcnR5TmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH07XG5cbiAgcmV0dXJuIFwiPGgxPkVudm95ZXIgZGVzIGZpY2hpZXJzPC9oMT5cXHJcXG48ZGl2IGNsYXNzPVxcXCJmaWxlLWxpc3QtYm94XFxcIj48L2Rpdj5cXHJcXG48ZGl2IGNsYXNzPVxcXCJib3R0b20tYnV0dG9uc1xcXCI+XFxyXFxuICAgIDxidXR0b24gY2xhc3M9XFxcInBsdXMtYnV0dG9uXFxcIiBvbmNsaWNrPVxcXCJ3aW5kb3cudXBsb2FkLm9wZW5fZmlsZV9kaWFsb2coKVxcXCI+KzwvYnV0dG9uPlxcclxcbiAgICA8YnV0dG9uIGNsYXNzPVxcXCJwbHVzLWJ1dHRvbiByaWdodC1wbHVzXFxcIiBvbmNsaWNrPVxcXCJ3aW5kb3cudXBsb2FkLmNsZWFudXBfYnV0dG9uKClcXFwiPjxpbWcgc3JjPVxcXCIvaW1hZ2VzL2ljb25zL2ljb25zOC1jbGVhbi01Mi5wbmdcXFwiPjwvYnV0dG9uPlxcclxcbiAgICA8YnV0dG9uIGNsYXNzPVxcXCJjYW5jZWwtYnV0dG9uXFxcIiBvbmNsaWNrPVxcXCJ3aW5kb3cubW9kYWwuY2xvc2VfbW9kYWwoKVxcXCI+QW5udWxlcjwvYnV0dG9uPlxcclxcbiAgICA8YnV0dG9uIGNsYXNzPVxcXCJjb25maXJtLWJ1dHRvblxcXCIgb25jbGljaz1cXFwiXCJcbiAgICArIGFsaWFzMygobG9va3VwUHJvcGVydHkoaGVscGVycyxcImN0eFwiKXx8KGRlcHRoMCAmJiBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJjdHhcIikpfHxhbGlhczIpLmNhbGwoYWxpYXMxLFwic2VuZCgpXCIse1wibmFtZVwiOlwiY3R4XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjcsXCJjb2x1bW5cIjo0NH0sXCJlbmRcIjp7XCJsaW5lXCI6NyxcImNvbHVtblwiOjYwfX19KSlcbiAgICArIFwiXFxcIj5FbnZveWVyPC9idXR0b24+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImdsb2JhbC1zdGF0dXNcXFwiIHN0eWxlPVxcXCJkaXNwbGF5OiBub25lXFxcIj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInByb2dyZXNzLWNvbnRhaW5lclxcXCI+XFxyXFxuICAgICAgICAgICAgPHA+SW5pdGlhbGlzYXRpb24uLi48L3A+XFxyXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic3ViLXByb2dyZXNzLWJhclxcXCI+PC9kaXY+XFxyXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwicHJvZ3Jlc3MtYmFyXFxcIj48L2Rpdj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPGJ1dHRvbiBvbmNsaWNrPVxcXCJcIlxuICAgICsgYWxpYXMzKChsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiY3R4XCIpfHwoZGVwdGgwICYmIGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcImN0eFwiKSl8fGFsaWFzMikuY2FsbChhbGlhczEsXCJwYXVzZSh0aGlzKVwiLHtcIm5hbWVcIjpcImN0eFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjoxNCxcImNvbHVtblwiOjI1fSxcImVuZFwiOntcImxpbmVcIjoxNCxcImNvbHVtblwiOjQ2fX19KSlcbiAgICArIFwiXFxcIj48aW1nIHNyYz1cXFwiL2ltYWdlcy9pY29ucy9pY29uczgtcGF1c2UtMzAucG5nXFxcIiBhbHQ9XFxcInBhdXNlXFxcIj48L2J1dHRvbj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuPC9kaXY+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KShkYXRhKTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKGdlbmVyYXRlZF9odG1sLCAndGV4dC9odG1sJykuYm9keTtcbiAgICAgICAgICAgIGlmIChib2R5LmNoaWxkcmVuLmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICAgICAgICByZXR1cm4gYm9keS5jaGlsZHJlblswXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRm9yY2UgY2hpbGRyZW4gZ2VuZXJhdGlvblxuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm9keS5jaGlsZHJlbi5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICBjaGlsZHJlbi5wdXNoKGJvZHkuY2hpbGRyZW5baV0pO1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgICAgICB9XG4gICAgICAgICIsIlxuICAgICAgICBjb25zdCBIYW5kbGViYXJzID0gcmVxdWlyZSgnaGFuZGxlYmFycycpO1xuICAgICAgICBjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG5cbiAgICAgICAgLy8gVXNlZCB0byByZWdpc3RlciBjb250ZXh0c1xuICAgICAgICBpZiAoIWRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIpXG4gICAgICAgICAgICBkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyID0ge1xuICAgICAgICAgICAgICAgIF9fbmV4dF9vYmpfaWQ6IDAsXG4gICAgICAgICAgICAgICAgX19yZWdpc3RlcmVkX2N0eDoge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIEhhbmRsZWJhcnMuZ2V0X21pbWVfaWNvbnMgPSAoKSA9PiBKU09OLnBhcnNlKCd7XCJhcHBsaWNhdGlvblwiOntcImNvbnRlbnRcIjp7XCJqYXZhc2NyaXB0XCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vamF2YXNjcmlwdC5wbmdcIixcImpzb25cIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9qc29uLnBuZ1wiLFwicGRmXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vcGRmLnBuZ1wiLFwicmFyXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vcmFyLnBuZ1wiLFwidGFyXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vdGFyLnBuZ1wiLFwiemlwXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vemlwLnBuZ1wifSxcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi5wbmdcIn0sXCJhdWRpb1wiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hdWRpby5wbmdcIn0sXCJjaGVtaWNhbFwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9jaGVtaWNhbC5wbmdcIn0sXCJmb250XCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2ZvbnQucG5nXCJ9LFwiZ2NvZGVcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvZ2NvZGUucG5nXCJ9LFwiaW1hZ2VcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvaW1hZ2UucG5nXCJ9LFwibWVzc2FnZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9tZXNzYWdlLnBuZ1wifSxcIm1vZGVsXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL21vZGVsLnBuZ1wifSxcInRleHRcIjp7XCJjb250ZW50XCI6e1wiY3NzXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9jc3MucG5nXCIsXCJtYXJrZG93blwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvbWFya2Rvd24ucG5nXCIsXCJwbGFpblwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvcGxhaW4ucG5nXCIsXCJ0ZW1wbGF0ZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvdGVtcGxhdGUucG5nXCJ9LFwiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQucG5nXCJ9LFwidmlkZW9cIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdmlkZW8ucG5nXCJ9LFwieC1jb25mZXJlbmNlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3gtY29uZmVyZW5jZS5wbmdcIn19Jyk7XG4gICAgICAgIFxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IChkYXRhLCBjdHgpID0+IHtcbiAgICAgICAgICAgIGlmIChjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjdHhbJ19faGFuZGxlYmFyX2N0eF9pZCddKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5fX2hhbmRsZWJhcl9jdHhfaWQgPSArK2RvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIuX19uZXh0X29ial9pZDtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlci5fX3JlZ2lzdGVyZWRfY3R4W2N0eC5fX2hhbmRsZWJhcl9jdHhfaWRdID0gY3R4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkYXRhLl9faGFuZGxlYmFyX2N0eF9pZCA9IGN0eC5fX2hhbmRsZWJhcl9jdHhfaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGdlbmVyYXRlZF9odG1sID0gSGFuZGxlYmFycy50ZW1wbGF0ZSh7XCIxXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICByZXR1cm4gXCJjaGVja2VkXCI7XG59LFwiM1wiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGFsaWFzMT1jb250YWluZXIubGFtYmRhLCBhbGlhczI9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24sIGxvb2t1cFByb3BlcnR5ID0gY29udGFpbmVyLmxvb2t1cFByb3BlcnR5IHx8IGZ1bmN0aW9uKHBhcmVudCwgcHJvcGVydHlOYW1lKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocGFyZW50LCBwcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcmVudFtwcm9wZXJ0eU5hbWVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9O1xuXG4gIHJldHVybiBcIiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJoc2VwYXJhdG9yXFxcIj48L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZGV2aWNlXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXCJkZXZpY2UtbmFtZVxcXCI+XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiZGV2aWNlXCIpIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiPC9wPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHA+XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiZXhwZGF0ZVwiKSA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIjwvcD5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImNhbmNlbC1idXR0b25cXFwiIHRva2VuPVwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcInRva2VuXCIpIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiIG9uY2xpY2s9XFxcIndpbmRvdy51c2VyX3NldHRpbmdzLmdldCgpLmRlbGV0ZV9hdXRoX3Rva2VuKHRoaXMpXFxcIj48aW1nIHNyYz0nL2ltYWdlcy9pY29ucy9pY29uczgtdHJhc2gtNTIucG5nJz48L2J1dHRvbj5cXHJcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuXCI7XG59LFwiY29tcGlsZXJcIjpbOCxcIj49IDQuMy4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMSwgYWxpYXMxPWNvbnRhaW5lci5sYW1iZGEsIGFsaWFzMj1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbiwgYWxpYXMzPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksIGxvb2t1cFByb3BlcnR5ID0gY29udGFpbmVyLmxvb2t1cFByb3BlcnR5IHx8IGZ1bmN0aW9uKHBhcmVudCwgcHJvcGVydHlOYW1lKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocGFyZW50LCBwcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcmVudFtwcm9wZXJ0eU5hbWVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9O1xuXG4gIHJldHVybiBcIjxkaXY+XFxyXFxuICAgIDxoMT5JbmZvcm1hdGlvbnMgVXRpbGlzYXRldXI8L2gxPlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJoc2VwYXJhdG9yXFxcIj48L2Rpdj5cXHJcXG4gICAgPGgyPkRvbm7DqWVzIHBlcnNvbm5lbGxlczwvaDI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcInRhYmxlXFxcIj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImZpZWxkc1xcXCI+XFxyXFxuICAgICAgICAgICAgPHA+Tm9tPC9wPlxcclxcbiAgICAgICAgICAgIDxwPkVtYWlsPC9wPlxcclxcbiAgICAgICAgICAgIDxwPlLDtGxlPC9wPlxcclxcbiAgICAgICAgICAgIDxwPk1vdCBkZSBwYXNzZTwvcD5cXHJcXG4gICAgICAgICAgICA8cD5FbWFpbCBwdWJsaXF1ZTwvcD5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwidmFsdWVzXFxcIj5cXHJcXG4gICAgICAgICAgICA8cD5cIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcInVzZXJcIikgOiBkZXB0aDApKSAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoc3RhY2sxLFwibmFtZVwiKSA6IHN0YWNrMSksIGRlcHRoMCkpXG4gICAgKyBcIjwvcD5cXHJcXG4gICAgICAgICAgICA8cD5cIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcInVzZXJcIikgOiBkZXB0aDApKSAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoc3RhY2sxLFwiZW1haWxcIikgOiBzdGFjazEpLCBkZXB0aDApKVxuICAgICsgXCI8L3A+XFxyXFxuICAgICAgICAgICAgPHA+XCJcbiAgICArIGFsaWFzMihhbGlhczEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJ1c2VyXCIpIDogZGVwdGgwKSkgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KHN0YWNrMSxcInJvbGVcIikgOiBzdGFjazEpLCBkZXB0aDApKVxuICAgICsgXCI8L3A+XFxyXFxuICAgICAgICAgICAgPGJ1dHRvbiBvbmNsaWNrPVxcXCJcIlxuICAgICsgYWxpYXMyKChsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiY3R4XCIpfHwoZGVwdGgwICYmIGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcImN0eFwiKSl8fGNvbnRhaW5lci5ob29rcy5oZWxwZXJNaXNzaW5nKS5jYWxsKGFsaWFzMyxcInJlc2V0X3Bhc3N3b3JkKClcIix7XCJuYW1lXCI6XCJjdHhcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6MTcsXCJjb2x1bW5cIjoyOX0sXCJlbmRcIjp7XCJsaW5lXCI6MTcsXCJjb2x1bW5cIjo1NX19fSkpXG4gICAgKyBcIlxcXCI+Q2hhbmdlciBsZSBtb3QgZGUgcGFzc2U8L2J1dHRvbj5cXHJcXG4gICAgICAgICAgICA8bGFiZWw+XFxyXFxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJjaGVja2JveFxcXCIgXCJcbiAgICArICgoc3RhY2sxID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcImlmXCIpLmNhbGwoYWxpYXMzLCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwidXNlclwiKSA6IGRlcHRoMCkpICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShzdGFjazEsXCJhbGxvd19jb250YWN0XCIpIDogc3RhY2sxKSx7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgxLCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6MTksXCJjb2x1bW5cIjozOX0sXCJlbmRcIjp7XCJsaW5lXCI6MTksXCJjb2x1bW5cIjo3OX19fSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCI+XFxyXFxuICAgICAgICAgICAgPC9sYWJlbD5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICA8L2Rpdj5cXHJcXG5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiaHNlcGFyYXRvclxcXCI+PC9kaXY+XFxyXFxuICAgIDxkaXY+XFxyXFxuICAgICAgICA8aDI+QXBwYXJlaWxzIGNvbm5lY3TDqXM8L2gyPlxcclxcbiAgICAgICAgPGRpdiBpZD1cXFwiY29ubmVjdGVkLWRldmljZXMtbGlzdFxcXCI+XFxyXFxuXCJcbiAgICArICgoc3RhY2sxID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcImVhY2hcIikuY2FsbChhbGlhczMsKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwidG9rZW5zXCIpIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDMsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjoyOCxcImNvbHVtblwiOjEyfSxcImVuZFwiOntcImxpbmVcIjozNSxcImNvbHVtblwiOjIxfX19KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJoc2VwYXJhdG9yXFxcIj48L2Rpdj5cXHJcXG48L2Rpdj5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pKGRhdGEpO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoZ2VuZXJhdGVkX2h0bWwsICd0ZXh0L2h0bWwnKS5ib2R5O1xuICAgICAgICAgICAgaWYgKGJvZHkuY2hpbGRyZW4ubGVuZ3RoID09PSAxKVxuICAgICAgICAgICAgICAgIHJldHVybiBib2R5LmNoaWxkcmVuWzBdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBGb3JjZSBjaGlsZHJlbiBnZW5lcmF0aW9uXG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2R5LmNoaWxkcmVuLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2goYm9keS5jaGlsZHJlbltpXSk7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgICAgIH1cbiAgICAgICAgIiwiXG4gICAgICAgIGNvbnN0IEhhbmRsZWJhcnMgPSByZXF1aXJlKCdoYW5kbGViYXJzJyk7XG4gICAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcblxuICAgICAgICAvLyBVc2VkIHRvIHJlZ2lzdGVyIGNvbnRleHRzXG4gICAgICAgIGlmICghZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlcilcbiAgICAgICAgICAgIGRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIgPSB7XG4gICAgICAgICAgICAgICAgX19uZXh0X29ial9pZDogMCxcbiAgICAgICAgICAgICAgICBfX3JlZ2lzdGVyZWRfY3R4OiB7fVxuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgSGFuZGxlYmFycy5nZXRfbWltZV9pY29ucyA9ICgpID0+IEpTT04ucGFyc2UoJ3tcImFwcGxpY2F0aW9uXCI6e1wiY29udGVudFwiOntcImphdmFzY3JpcHRcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9qYXZhc2NyaXB0LnBuZ1wiLFwianNvblwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL2pzb24ucG5nXCIsXCJwZGZcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9wZGYucG5nXCIsXCJyYXJcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9yYXIucG5nXCIsXCJ0YXJcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi90YXIucG5nXCIsXCJ6aXBcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi96aXAucG5nXCJ9LFwiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uLnBuZ1wifSxcImF1ZGlvXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2F1ZGlvLnBuZ1wifSxcImNoZW1pY2FsXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2NoZW1pY2FsLnBuZ1wifSxcImZvbnRcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvZm9udC5wbmdcIn0sXCJnY29kZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9nY29kZS5wbmdcIn0sXCJpbWFnZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9pbWFnZS5wbmdcIn0sXCJtZXNzYWdlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL21lc3NhZ2UucG5nXCJ9LFwibW9kZWxcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvbW9kZWwucG5nXCJ9LFwidGV4dFwiOntcImNvbnRlbnRcIjp7XCJjc3NcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L2Nzcy5wbmdcIixcIm1hcmtkb3duXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9tYXJrZG93bi5wbmdcIixcInBsYWluXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9wbGFpbi5wbmdcIixcInRlbXBsYXRlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC90ZW1wbGF0ZS5wbmdcIn0sXCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC5wbmdcIn0sXCJ2aWRlb1wiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy92aWRlby5wbmdcIn0sXCJ4LWNvbmZlcmVuY2VcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMveC1jb25mZXJlbmNlLnBuZ1wifX0nKTtcbiAgICAgICAgXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gKGRhdGEsIGN0eCkgPT4ge1xuICAgICAgICAgICAgaWYgKGN0eCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWN0eFsnX19oYW5kbGViYXJfY3R4X2lkJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4Ll9faGFuZGxlYmFyX2N0eF9pZCA9ICsrZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlci5fX25leHRfb2JqX2lkO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyLl9fcmVnaXN0ZXJlZF9jdHhbY3R4Ll9faGFuZGxlYmFyX2N0eF9pZF0gPSBjdHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRhdGEuX19oYW5kbGViYXJfY3R4X2lkID0gY3R4Ll9faGFuZGxlYmFyX2N0eF9pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgZ2VuZXJhdGVkX2h0bWwgPSBIYW5kbGViYXJzLnRlbXBsYXRlKHtcImNvbXBpbGVyXCI6WzgsXCI+PSA0LjMuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazEsIGFsaWFzMT1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLCBhbGlhczI9Y29udGFpbmVyLmhvb2tzLmhlbHBlck1pc3NpbmcsIGFsaWFzMz1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbiwgbG9va3VwUHJvcGVydHkgPSBjb250YWluZXIubG9va3VwUHJvcGVydHkgfHwgZnVuY3Rpb24ocGFyZW50LCBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwYXJlbnQsIHByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICByZXR1cm4gcGFyZW50W3Byb3BlcnR5TmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH07XG5cbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz0nb2JqZWN0LWJ1dHRvbiBnbG9iYWwtcHJldmVudC1zZWxlY3QnIG9uZGJsY2xpY2s9XFxcIlwiXG4gICAgKyBhbGlhczMoKGxvb2t1cFByb3BlcnR5KGhlbHBlcnMsXCJjdHhcIil8fChkZXB0aDAgJiYgbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiY3R4XCIpKXx8YWxpYXMyKS5jYWxsKGFsaWFzMSxcImRibGNsaWNrZWQoZXZlbnQpXCIse1wibmFtZVwiOlwiY3R4XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjEsXCJjb2x1bW5cIjo2MX0sXCJlbmRcIjp7XCJsaW5lXCI6MSxcImNvbHVtblwiOjg4fX19KSlcbiAgICArIFwiXFxcIiBvbmNsaWNrPVxcXCJcIlxuICAgICsgYWxpYXMzKChsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiY3R4XCIpfHwoZGVwdGgwICYmIGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcImN0eFwiKSl8fGFsaWFzMikuY2FsbChhbGlhczEsXCJjbGlja2VkKGV2ZW50KVwiLHtcIm5hbWVcIjpcImN0eFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjoxLFwiY29sdW1uXCI6OTl9LFwiZW5kXCI6e1wibGluZVwiOjEsXCJjb2x1bW5cIjoxMjN9fX0pKVxuICAgICsgXCJcXFwiXFxyXFxuICAgICBvbm1vdXNlZW50ZXI9XFxcIlwiXG4gICAgKyBhbGlhczMoKGxvb2t1cFByb3BlcnR5KGhlbHBlcnMsXCJjdHhcIil8fChkZXB0aDAgJiYgbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiY3R4XCIpKXx8YWxpYXMyKS5jYWxsKGFsaWFzMSxcImVudGVyKClcIix7XCJuYW1lXCI6XCJjdHhcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6MixcImNvbHVtblwiOjE5fSxcImVuZFwiOntcImxpbmVcIjoyLFwiY29sdW1uXCI6MzZ9fX0pKVxuICAgICsgXCJcXFwiIG9ubW91c2VsZWF2ZT1cXFwiXCJcbiAgICArIGFsaWFzMygobG9va3VwUHJvcGVydHkoaGVscGVycyxcImN0eFwiKXx8KGRlcHRoMCAmJiBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJjdHhcIikpfHxhbGlhczIpLmNhbGwoYWxpYXMxLFwibGVhdmUoKVwiLHtcIm5hbWVcIjpcImN0eFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjoyLFwiY29sdW1uXCI6NTJ9LFwiZW5kXCI6e1wibGluZVwiOjIsXCJjb2x1bW5cIjo2OX19fSkpXG4gICAgKyBcIlxcXCIgb25jb250ZXh0bWVudT1cXFwiXCJcbiAgICArIGFsaWFzMygobG9va3VwUHJvcGVydHkoaGVscGVycyxcImN0eFwiKXx8KGRlcHRoMCAmJiBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJjdHhcIikpfHxhbGlhczIpLmNhbGwoYWxpYXMxLFwiY29udGV4dF9tZW51KGV2ZW50KVwiLHtcIm5hbWVcIjpcImN0eFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjoyLFwiY29sdW1uXCI6ODZ9LFwiZW5kXCI6e1wibGluZVwiOjIsXCJjb2x1bW5cIjoxMTV9fX0pKVxuICAgICsgXCJcXFwiPlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJpdGVtLXByZXZpZXcgZm9sZGVyXFxcIj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcIml0ZW1fdGh1bWJuYWlsXFxcIj5cXHJcXG4gICAgICAgICAgICBcIlxuICAgICsgYWxpYXMzKChsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiaXRlbV90aHVtYm5haWxcIil8fChkZXB0aDAgJiYgbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiaXRlbV90aHVtYm5haWxcIikpfHxhbGlhczIpLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcIml0ZW1cIikgOiBkZXB0aDApLHtcIm5hbWVcIjpcIml0ZW1fdGh1bWJuYWlsXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjUsXCJjb2x1bW5cIjoxMn0sXCJlbmRcIjp7XCJsaW5lXCI6NSxcImNvbHVtblwiOjM1fX19KSlcbiAgICArIFwiXFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDxwPlwiXG4gICAgKyBhbGlhczMoY29udGFpbmVyLmxhbWJkYSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcIml0ZW1cIikgOiBkZXB0aDApKSAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoc3RhY2sxLFwibmFtZVwiKSA6IHN0YWNrMSksIGRlcHRoMCkpXG4gICAgKyBcIjwvcD5cXHJcXG4gICAgPC9kaXY+XFxyXFxuPC9kaXY+XFxyXFxuXCI7XG59LFwidXNlRGF0YVwiOnRydWV9KShkYXRhKTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKGdlbmVyYXRlZF9odG1sLCAndGV4dC9odG1sJykuYm9keTtcbiAgICAgICAgICAgIGlmIChib2R5LmNoaWxkcmVuLmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICAgICAgICByZXR1cm4gYm9keS5jaGlsZHJlblswXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRm9yY2UgY2hpbGRyZW4gZ2VuZXJhdGlvblxuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm9keS5jaGlsZHJlbi5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICBjaGlsZHJlbi5wdXNoKGJvZHkuY2hpbGRyZW5baV0pO1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgICAgICB9XG4gICAgICAgICIsIlxuICAgICAgICBjb25zdCBIYW5kbGViYXJzID0gcmVxdWlyZSgnaGFuZGxlYmFycycpO1xuICAgICAgICBjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG5cbiAgICAgICAgLy8gVXNlZCB0byByZWdpc3RlciBjb250ZXh0c1xuICAgICAgICBpZiAoIWRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIpXG4gICAgICAgICAgICBkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyID0ge1xuICAgICAgICAgICAgICAgIF9fbmV4dF9vYmpfaWQ6IDAsXG4gICAgICAgICAgICAgICAgX19yZWdpc3RlcmVkX2N0eDoge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIEhhbmRsZWJhcnMuZ2V0X21pbWVfaWNvbnMgPSAoKSA9PiBKU09OLnBhcnNlKCd7XCJhcHBsaWNhdGlvblwiOntcImNvbnRlbnRcIjp7XCJqYXZhc2NyaXB0XCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vamF2YXNjcmlwdC5wbmdcIixcImpzb25cIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9qc29uLnBuZ1wiLFwicGRmXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vcGRmLnBuZ1wiLFwicmFyXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vcmFyLnBuZ1wiLFwidGFyXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vdGFyLnBuZ1wiLFwiemlwXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vemlwLnBuZ1wifSxcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi5wbmdcIn0sXCJhdWRpb1wiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hdWRpby5wbmdcIn0sXCJjaGVtaWNhbFwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9jaGVtaWNhbC5wbmdcIn0sXCJmb250XCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2ZvbnQucG5nXCJ9LFwiZ2NvZGVcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvZ2NvZGUucG5nXCJ9LFwiaW1hZ2VcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvaW1hZ2UucG5nXCJ9LFwibWVzc2FnZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9tZXNzYWdlLnBuZ1wifSxcIm1vZGVsXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL21vZGVsLnBuZ1wifSxcInRleHRcIjp7XCJjb250ZW50XCI6e1wiY3NzXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9jc3MucG5nXCIsXCJtYXJrZG93blwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvbWFya2Rvd24ucG5nXCIsXCJwbGFpblwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvcGxhaW4ucG5nXCIsXCJ0ZW1wbGF0ZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvdGVtcGxhdGUucG5nXCJ9LFwiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQucG5nXCJ9LFwidmlkZW9cIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdmlkZW8ucG5nXCJ9LFwieC1jb25mZXJlbmNlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3gtY29uZmVyZW5jZS5wbmdcIn19Jyk7XG4gICAgICAgIFxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IChkYXRhLCBjdHgpID0+IHtcbiAgICAgICAgICAgIGlmIChjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjdHhbJ19faGFuZGxlYmFyX2N0eF9pZCddKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5fX2hhbmRsZWJhcl9jdHhfaWQgPSArK2RvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIuX19uZXh0X29ial9pZDtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlci5fX3JlZ2lzdGVyZWRfY3R4W2N0eC5fX2hhbmRsZWJhcl9jdHhfaWRdID0gY3R4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkYXRhLl9faGFuZGxlYmFyX2N0eF9pZCA9IGN0eC5fX2hhbmRsZWJhcl9jdHhfaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGdlbmVyYXRlZF9odG1sID0gSGFuZGxlYmFycy50ZW1wbGF0ZSh7XCIxXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgaGVscGVyLCBsb29rdXBQcm9wZXJ0eSA9IGNvbnRhaW5lci5sb29rdXBQcm9wZXJ0eSB8fCBmdW5jdGlvbihwYXJlbnQsIHByb3BlcnR5TmFtZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHBhcmVudCwgcHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgIHJldHVybiBwYXJlbnRbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfTtcblxuICByZXR1cm4gXCIgKFwiXG4gICAgKyBjb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiZGlzcGxheV9zaXplXCIpIHx8IChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcImRpc3BsYXlfc2l6ZVwiKSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBjb250YWluZXIuaG9va3MuaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IFwiZnVuY3Rpb25cIiA/IGhlbHBlci5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSkse1wibmFtZVwiOlwiZGlzcGxheV9zaXplXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjUsXCJjb2x1bW5cIjo2MH0sXCJlbmRcIjp7XCJsaW5lXCI6NSxcImNvbHVtblwiOjc2fX19KSA6IGhlbHBlcikpKVxuICAgICsgXCIpXCI7XG59LFwiM1wiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGhlbHBlciwgbG9va3VwUHJvcGVydHkgPSBjb250YWluZXIubG9va3VwUHJvcGVydHkgfHwgZnVuY3Rpb24ocGFyZW50LCBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwYXJlbnQsIHByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICByZXR1cm4gcGFyZW50W3Byb3BlcnR5TmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH07XG5cbiAgcmV0dXJuIFwiIChcIlxuICAgICsgY29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcImRpc3BsYXlfZGF0ZVwiKSB8fCAoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJkaXNwbGF5X2RhdGVcIikgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogY29udGFpbmVyLmhvb2tzLmhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBcImZ1bmN0aW9uXCIgPyBoZWxwZXIuY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLHtcIm5hbWVcIjpcImRpc3BsYXlfZGF0ZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjo1LFwiY29sdW1uXCI6MTA2fSxcImVuZFwiOntcImxpbmVcIjo1LFwiY29sdW1uXCI6MTIyfX19KSA6IGhlbHBlcikpKVxuICAgICsgXCIpXCI7XG59LFwiY29tcGlsZXJcIjpbOCxcIj49IDQuMy4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMSwgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksIGFsaWFzMj1jb250YWluZXIuaG9va3MuaGVscGVyTWlzc2luZywgYWxpYXMzPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uLCBsb29rdXBQcm9wZXJ0eSA9IGNvbnRhaW5lci5sb29rdXBQcm9wZXJ0eSB8fCBmdW5jdGlvbihwYXJlbnQsIHByb3BlcnR5TmFtZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHBhcmVudCwgcHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgIHJldHVybiBwYXJlbnRbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfTtcblxuICByZXR1cm4gXCI8ZGl2IGNsYXNzPSdvYmplY3QtYnV0dG9uIGdsb2JhbC1wcmV2ZW50LXNlbGVjdCcgb25kYmxjbGljaz1cXFwiXCJcbiAgICArIGFsaWFzMygobG9va3VwUHJvcGVydHkoaGVscGVycyxcImN0eFwiKXx8KGRlcHRoMCAmJiBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJjdHhcIikpfHxhbGlhczIpLmNhbGwoYWxpYXMxLFwiZGJsY2xpY2tlZChldmVudClcIix7XCJuYW1lXCI6XCJjdHhcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6MSxcImNvbHVtblwiOjYxfSxcImVuZFwiOntcImxpbmVcIjoxLFwiY29sdW1uXCI6ODh9fX0pKVxuICAgICsgXCJcXFwiIG9uY2xpY2s9XFxcIlwiXG4gICAgKyBhbGlhczMoKGxvb2t1cFByb3BlcnR5KGhlbHBlcnMsXCJjdHhcIil8fChkZXB0aDAgJiYgbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiY3R4XCIpKXx8YWxpYXMyKS5jYWxsKGFsaWFzMSxcImNsaWNrZWQoZXZlbnQpXCIse1wibmFtZVwiOlwiY3R4XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjEsXCJjb2x1bW5cIjo5OX0sXCJlbmRcIjp7XCJsaW5lXCI6MSxcImNvbHVtblwiOjEyM319fSkpXG4gICAgKyBcIlxcXCJcXHJcXG4gICAgIG9ubW91c2VlbnRlcj1cXFwiXCJcbiAgICArIGFsaWFzMygobG9va3VwUHJvcGVydHkoaGVscGVycyxcImN0eFwiKXx8KGRlcHRoMCAmJiBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJjdHhcIikpfHxhbGlhczIpLmNhbGwoYWxpYXMxLFwiZW50ZXIoKVwiLHtcIm5hbWVcIjpcImN0eFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjoyLFwiY29sdW1uXCI6MTl9LFwiZW5kXCI6e1wibGluZVwiOjIsXCJjb2x1bW5cIjozNn19fSkpXG4gICAgKyBcIlxcXCIgb25tb3VzZWxlYXZlPVxcXCJcIlxuICAgICsgYWxpYXMzKChsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiY3R4XCIpfHwoZGVwdGgwICYmIGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcImN0eFwiKSl8fGFsaWFzMikuY2FsbChhbGlhczEsXCJsZWF2ZSgpXCIse1wibmFtZVwiOlwiY3R4XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjIsXCJjb2x1bW5cIjo1Mn0sXCJlbmRcIjp7XCJsaW5lXCI6MixcImNvbHVtblwiOjY5fX19KSlcbiAgICArIFwiXFxcIiBvbmNvbnRleHRtZW51PVxcXCJcIlxuICAgICsgYWxpYXMzKChsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiY3R4XCIpfHwoZGVwdGgwICYmIGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcImN0eFwiKSl8fGFsaWFzMikuY2FsbChhbGlhczEsXCJjb250ZXh0X21lbnUoZXZlbnQpXCIse1wibmFtZVwiOlwiY3R4XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjIsXCJjb2x1bW5cIjo4Nn0sXCJlbmRcIjp7XCJsaW5lXCI6MixcImNvbHVtblwiOjExNX19fSkpXG4gICAgKyBcIlxcXCI+XFxyXFxuXFxyXFxuICAgIFwiXG4gICAgKyBhbGlhczMoKGxvb2t1cFByb3BlcnR5KGhlbHBlcnMsXCJpdGVtX3RodW1ibmFpbFwiKXx8KGRlcHRoMCAmJiBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJpdGVtX3RodW1ibmFpbFwiKSl8fGFsaWFzMikuY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiaXRlbVwiKSA6IGRlcHRoMCkse1wibmFtZVwiOlwiaXRlbV90aHVtYm5haWxcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6NCxcImNvbHVtblwiOjR9LFwiZW5kXCI6e1wibGluZVwiOjQsXCJjb2x1bW5cIjoyN319fSkpXG4gICAgKyBcIlxcclxcbiAgICA8cCBjbGFzcz1cXFwiaXRlbS1uYW1lXFxcIj5cIlxuICAgICsgYWxpYXMzKGNvbnRhaW5lci5sYW1iZGEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJpdGVtXCIpIDogZGVwdGgwKSkgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KHN0YWNrMSxcIm5hbWVcIikgOiBzdGFjazEpLCBkZXB0aDApKVxuICAgICsgKChzdGFjazEgPSBsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiaWZcIikuY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiZGlzcGxheV9zaXplXCIpIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgxLCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6NSxcImNvbHVtblwiOjM4fSxcImVuZFwiOntcImxpbmVcIjo1LFwiY29sdW1uXCI6ODR9fX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArICgoc3RhY2sxID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcImlmXCIpLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcImRpc3BsYXlfZGF0ZVwiKSA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMywgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjUsXCJjb2x1bW5cIjo4NH0sXCJlbmRcIjp7XCJsaW5lXCI6NSxcImNvbHVtblwiOjEzMH19fSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCI8L3A+XFxyXFxuPC9kaXY+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KShkYXRhKTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKGdlbmVyYXRlZF9odG1sLCAndGV4dC9odG1sJykuYm9keTtcbiAgICAgICAgICAgIGlmIChib2R5LmNoaWxkcmVuLmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICAgICAgICByZXR1cm4gYm9keS5jaGlsZHJlblswXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRm9yY2UgY2hpbGRyZW4gZ2VuZXJhdGlvblxuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm9keS5jaGlsZHJlbi5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICBjaGlsZHJlbi5wdXNoKGJvZHkuY2hpbGRyZW5baV0pO1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgICAgICB9XG4gICAgICAgICIsIlxuICAgICAgICBjb25zdCBIYW5kbGViYXJzID0gcmVxdWlyZSgnaGFuZGxlYmFycycpO1xuICAgICAgICBjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG5cbiAgICAgICAgLy8gVXNlZCB0byByZWdpc3RlciBjb250ZXh0c1xuICAgICAgICBpZiAoIWRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIpXG4gICAgICAgICAgICBkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyID0ge1xuICAgICAgICAgICAgICAgIF9fbmV4dF9vYmpfaWQ6IDAsXG4gICAgICAgICAgICAgICAgX19yZWdpc3RlcmVkX2N0eDoge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIEhhbmRsZWJhcnMuZ2V0X21pbWVfaWNvbnMgPSAoKSA9PiBKU09OLnBhcnNlKCd7XCJhcHBsaWNhdGlvblwiOntcImNvbnRlbnRcIjp7XCJqYXZhc2NyaXB0XCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vamF2YXNjcmlwdC5wbmdcIixcImpzb25cIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9qc29uLnBuZ1wiLFwicGRmXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vcGRmLnBuZ1wiLFwicmFyXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vcmFyLnBuZ1wiLFwidGFyXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vdGFyLnBuZ1wiLFwiemlwXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vemlwLnBuZ1wifSxcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi5wbmdcIn0sXCJhdWRpb1wiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hdWRpby5wbmdcIn0sXCJjaGVtaWNhbFwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9jaGVtaWNhbC5wbmdcIn0sXCJmb250XCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2ZvbnQucG5nXCJ9LFwiZ2NvZGVcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvZ2NvZGUucG5nXCJ9LFwiaW1hZ2VcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvaW1hZ2UucG5nXCJ9LFwibWVzc2FnZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9tZXNzYWdlLnBuZ1wifSxcIm1vZGVsXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL21vZGVsLnBuZ1wifSxcInRleHRcIjp7XCJjb250ZW50XCI6e1wiY3NzXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9jc3MucG5nXCIsXCJtYXJrZG93blwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvbWFya2Rvd24ucG5nXCIsXCJwbGFpblwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvcGxhaW4ucG5nXCIsXCJ0ZW1wbGF0ZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvdGVtcGxhdGUucG5nXCJ9LFwiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQucG5nXCJ9LFwidmlkZW9cIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdmlkZW8ucG5nXCJ9LFwieC1jb25mZXJlbmNlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3gtY29uZmVyZW5jZS5wbmdcIn19Jyk7XG4gICAgICAgIFxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IChkYXRhLCBjdHgpID0+IHtcbiAgICAgICAgICAgIGlmIChjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjdHhbJ19faGFuZGxlYmFyX2N0eF9pZCddKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5fX2hhbmRsZWJhcl9jdHhfaWQgPSArK2RvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIuX19uZXh0X29ial9pZDtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlci5fX3JlZ2lzdGVyZWRfY3R4W2N0eC5fX2hhbmRsZWJhcl9jdHhfaWRdID0gY3R4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkYXRhLl9faGFuZGxlYmFyX2N0eF9pZCA9IGN0eC5fX2hhbmRsZWJhcl9jdHhfaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGdlbmVyYXRlZF9odG1sID0gSGFuZGxlYmFycy50ZW1wbGF0ZSh7XCIxXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICByZXR1cm4gXCJjaGVja2VkXCI7XG59LFwiY29tcGlsZXJcIjpbOCxcIj49IDQuMy4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMSwgYWxpYXMxPWNvbnRhaW5lci5sYW1iZGEsIGFsaWFzMj1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbiwgYWxpYXMzPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksIGxvb2t1cFByb3BlcnR5ID0gY29udGFpbmVyLmxvb2t1cFByb3BlcnR5IHx8IGZ1bmN0aW9uKHBhcmVudCwgcHJvcGVydHlOYW1lKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocGFyZW50LCBwcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcmVudFtwcm9wZXJ0eU5hbWVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9O1xuXG4gIHJldHVybiBcIjxoMT5Nb2RpZmllciBsZSBkb3NzaWVyIFwiXG4gICAgKyBhbGlhczIoYWxpYXMxKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiaXRlbVwiKSA6IGRlcHRoMCkpICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShzdGFjazEsXCJuYW1lXCIpIDogc3RhY2sxKSwgZGVwdGgwKSlcbiAgICArIFwiPC9oMT5cXHJcXG48Zm9ybSBvbnN1Ym1pdD1cXFwiXCJcbiAgICArIGFsaWFzMigobG9va3VwUHJvcGVydHkoaGVscGVycyxcImN0eFwiKXx8KGRlcHRoMCAmJiBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJjdHhcIikpfHxjb250YWluZXIuaG9va3MuaGVscGVyTWlzc2luZykuY2FsbChhbGlhczMsXCJzdWJtaXQoZXZlbnQpXCIse1wibmFtZVwiOlwiY3R4XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjIsXCJjb2x1bW5cIjoxNn0sXCJlbmRcIjp7XCJsaW5lXCI6MixcImNvbHVtblwiOjM5fX19KSlcbiAgICArIFwiXFxcIj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiZmllbGRcXFwiPlxcclxcbiAgICAgICAgPGxhYmVsIGZvcj0nbmFtZSc+XFxyXFxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIG5hbWU9XFxcIm5hbWVcXFwiIHBsYWNlaG9sZGVyPVxcXCJOb21cXFwiIGlkPVxcXCJuYW1lXFxcIiByZXF1aXJlZCB2YWx1ZT1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJpdGVtXCIpIDogZGVwdGgwKSkgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KHN0YWNrMSxcIm5hbWVcIikgOiBzdGFjazEpLCBkZXB0aDApKVxuICAgICsgXCJcXFwiPlxcclxcbiAgICAgICAgPC9sYWJlbD5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImZpZWxkXFxcIj5cXHJcXG4gICAgICAgIDxsYWJlbCBmb3I9J2Rlc2NyaXB0aW9uJz5cXHJcXG4gICAgICAgICAgICA8dGV4dGFyZWEgbmFtZT1cXFwiZGVzY3JpcHRpb25cXFwiIHBsYWNlaG9sZGVyPVxcXCJEZXNjcmlwdGlvblxcXCIgaWQ9XFxcImRlc2NyaXB0aW9uXFxcIiByb3dzPVxcXCI4XFxcIj5cIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcIml0ZW1cIikgOiBkZXB0aDApKSAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoc3RhY2sxLFwiZGVzY3JpcHRpb25cIikgOiBzdGFjazEpLCBkZXB0aDApKVxuICAgICsgXCI8L3RleHRhcmVhPlxcclxcbiAgICAgICAgPC9sYWJlbD5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImZpZWxkXFxcIj5cXHJcXG4gICAgICAgIDxwPk91dnJpciBsYSBtaXNlIGVuIGxpZ25lIGRlIGZpY2hpZXJzIMOgIHRvdXMgPC9wPlxcclxcbiAgICAgICAgPGxhYmVsIGZvcj0nb3Blbl91cGxvYWQnPlxcclxcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJjaGVja2JveFxcXCIgbmFtZT1cXFwib3Blbl91cGxvYWRcXFwiIGlkPVxcXCJvcGVuX3VwbG9hZFxcXCIgXCJcbiAgICArICgoc3RhY2sxID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcImlmXCIpLmNhbGwoYWxpYXMzLCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiaXRlbVwiKSA6IGRlcHRoMCkpICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShzdGFjazEsXCJvcGVuX3VwbG9hZFwiKSA6IHN0YWNrMSkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjE2LFwiY29sdW1uXCI6NzF9LFwiZW5kXCI6e1wibGluZVwiOjE2LFwiY29sdW1uXCI6MTA5fX19KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIj5cXHJcXG4gICAgICAgIDwvbGFiZWw+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8aW5wdXQgdHlwZT1cXFwic3VibWl0XFxcIiB2YWx1ZT1cXFwiVmFsaWRlclxcXCI+XFxyXFxuPC9mb3JtPlwiO1xufSxcInVzZURhdGFcIjp0cnVlfSkoZGF0YSk7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhnZW5lcmF0ZWRfaHRtbCwgJ3RleHQvaHRtbCcpLmJvZHk7XG4gICAgICAgICAgICBpZiAoYm9keS5jaGlsZHJlbi5sZW5ndGggPT09IDEpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJvZHkuY2hpbGRyZW5bMF07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEZvcmNlIGNoaWxkcmVuIGdlbmVyYXRpb25cbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJvZHkuY2hpbGRyZW4ubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChib2R5LmNoaWxkcmVuW2ldKTtcbiAgICAgICAgICAgIHJldHVybiBjaGlsZHJlbjtcbiAgICAgICAgfVxuICAgICAgICAiLCJcbiAgICAgICAgY29uc3QgSGFuZGxlYmFycyA9IHJlcXVpcmUoJ2hhbmRsZWJhcnMnKTtcbiAgICAgICAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuXG4gICAgICAgIC8vIFVzZWQgdG8gcmVnaXN0ZXIgY29udGV4dHNcbiAgICAgICAgaWYgKCFkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyKVxuICAgICAgICAgICAgZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlciA9IHtcbiAgICAgICAgICAgICAgICBfX25leHRfb2JqX2lkOiAwLFxuICAgICAgICAgICAgICAgIF9fcmVnaXN0ZXJlZF9jdHg6IHt9XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBIYW5kbGViYXJzLmdldF9taW1lX2ljb25zID0gKCkgPT4gSlNPTi5wYXJzZSgne1wiYXBwbGljYXRpb25cIjp7XCJjb250ZW50XCI6e1wiamF2YXNjcmlwdFwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL2phdmFzY3JpcHQucG5nXCIsXCJqc29uXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vanNvbi5wbmdcIixcInBkZlwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL3BkZi5wbmdcIixcInJhclwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL3Jhci5wbmdcIixcInRhclwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL3Rhci5wbmdcIixcInppcFwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2FwcGxpY2F0aW9uL3ppcC5wbmdcIn0sXCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24ucG5nXCJ9LFwiYXVkaW9cIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXVkaW8ucG5nXCJ9LFwiY2hlbWljYWxcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvY2hlbWljYWwucG5nXCJ9LFwiZm9udFwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9mb250LnBuZ1wifSxcImdjb2RlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2djb2RlLnBuZ1wifSxcImltYWdlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2ltYWdlLnBuZ1wifSxcIm1lc3NhZ2VcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvbWVzc2FnZS5wbmdcIn0sXCJtb2RlbFwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9tb2RlbC5wbmdcIn0sXCJ0ZXh0XCI6e1wiY29udGVudFwiOntcImNzc1wiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvY3NzLnBuZ1wiLFwibWFya2Rvd25cIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L21hcmtkb3duLnBuZ1wiLFwicGxhaW5cIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L3BsYWluLnBuZ1wiLFwidGVtcGxhdGVcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0L3RlbXBsYXRlLnBuZ1wifSxcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy90ZXh0LnBuZ1wifSxcInZpZGVvXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3ZpZGVvLnBuZ1wifSxcIngtY29uZmVyZW5jZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy94LWNvbmZlcmVuY2UucG5nXCJ9fScpO1xuICAgICAgICBcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSAoZGF0YSwgY3R4KSA9PiB7XG4gICAgICAgICAgICBpZiAoY3R4KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY3R4WydfX2hhbmRsZWJhcl9jdHhfaWQnXSkge1xuICAgICAgICAgICAgICAgICAgICBjdHguX19oYW5kbGViYXJfY3R4X2lkID0gKytkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyLl9fbmV4dF9vYmpfaWQ7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIuX19yZWdpc3RlcmVkX2N0eFtjdHguX19oYW5kbGViYXJfY3R4X2lkXSA9IGN0eDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGF0YS5fX2hhbmRsZWJhcl9jdHhfaWQgPSBjdHguX19oYW5kbGViYXJfY3R4X2lkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBnZW5lcmF0ZWRfaHRtbCA9IEhhbmRsZWJhcnMudGVtcGxhdGUoe1wiY29tcGlsZXJcIjpbOCxcIj49IDQuMy4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMSwgYWxpYXMxPWNvbnRhaW5lci5sYW1iZGEsIGFsaWFzMj1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbiwgbG9va3VwUHJvcGVydHkgPSBjb250YWluZXIubG9va3VwUHJvcGVydHkgfHwgZnVuY3Rpb24ocGFyZW50LCBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwYXJlbnQsIHByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICByZXR1cm4gcGFyZW50W3Byb3BlcnR5TmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH07XG5cbiAgcmV0dXJuIFwiPGgxPk1vZGlmaWVyIGxlIGZpY2hpZXIgXCJcbiAgICArIGFsaWFzMihhbGlhczEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJpdGVtXCIpIDogZGVwdGgwKSkgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KHN0YWNrMSxcIm5hbWVcIikgOiBzdGFjazEpLCBkZXB0aDApKVxuICAgICsgXCI8L2gxPlxcclxcbjxmb3JtIG9uc3VibWl0PVxcXCJcIlxuICAgICsgYWxpYXMyKChsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwiY3R4XCIpfHwoZGVwdGgwICYmIGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcImN0eFwiKSl8fGNvbnRhaW5lci5ob29rcy5oZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksXCJzdWJtaXQoZXZlbnQpXCIse1wibmFtZVwiOlwiY3R4XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjIsXCJjb2x1bW5cIjoxNn0sXCJlbmRcIjp7XCJsaW5lXCI6MixcImNvbHVtblwiOjM5fX19KSlcbiAgICArIFwiXFxcIj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiZmllbGQgZWRpdC1maWxlLW5hbWVcXFwiPlxcclxcbiAgICAgICAgPGxhYmVsIGZvcj0nbmFtZSc+XFxyXFxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIG5hbWU9XFxcIm5hbWVcXFwiIHBsYWNlaG9sZGVyPVxcXCJOb21cXFwiIGlkPVxcXCJuYW1lXFxcIiB2YWx1ZT1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJpdGVtXCIpIDogZGVwdGgwKSkgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KHN0YWNrMSxcIm5hbWVcIikgOiBzdGFjazEpLCBkZXB0aDApKVxuICAgICsgXCJcXFwiPlxcclxcbiAgICAgICAgPC9sYWJlbD5cXHJcXG4gICAgICAgIDxsYWJlbCBmb3I9J2V4dGVuc2lvbicgc3R5bGU9XFxcImZsZXgtZ3JvdzogdW5zZXQ7IHBhZGRpbmctbGVmdDogMTBweFxcXCI+XFxyXFxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIG5hbWU9XFxcImV4dGVuc2lvblxcXCIgcGxhY2Vob2xkZXI9XFxcIkV4dGVuc2lvblxcXCIgaWQ9XFxcImV4dGVuc2lvblxcXCIgdmFsdWU9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwiaXRlbVwiKSA6IGRlcHRoMCkpICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShzdGFjazEsXCJleHRlbnNpb25cIikgOiBzdGFjazEpLCBkZXB0aDApKVxuICAgICsgXCJcXFwiPlxcclxcbiAgICAgICAgPC9sYWJlbD5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImZpZWxkXFxcIj5cXHJcXG4gICAgICAgIDxsYWJlbCBmb3I9J2Rlc2NyaXB0aW9uJz5cXHJcXG4gICAgICAgICAgICA8dGV4dGFyZWEgbmFtZT1cXFwiZGVzY3JpcHRpb25cXFwiIHBsYWNlaG9sZGVyPVxcXCJEZXNjcmlwdGlvblxcXCIgaWQ9XFxcImRlc2NyaXB0aW9uXFxcIiByb3dzPVxcXCI4XFxcIj5cIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcIml0ZW1cIikgOiBkZXB0aDApKSAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoc3RhY2sxLFwiZGVzY3JpcHRpb25cIikgOiBzdGFjazEpLCBkZXB0aDApKVxuICAgICsgXCI8L3RleHRhcmVhPlxcclxcbiAgICAgICAgPC9sYWJlbD5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxpbnB1dCB0eXBlPVxcXCJzdWJtaXRcXFwiIHZhbHVlPVxcXCJWYWxpZGVyXFxcIj5cXHJcXG48L2Zvcm0+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KShkYXRhKTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKGdlbmVyYXRlZF9odG1sLCAndGV4dC9odG1sJykuYm9keTtcbiAgICAgICAgICAgIGlmIChib2R5LmNoaWxkcmVuLmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICAgICAgICByZXR1cm4gYm9keS5jaGlsZHJlblswXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRm9yY2UgY2hpbGRyZW4gZ2VuZXJhdGlvblxuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm9keS5jaGlsZHJlbi5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICBjaGlsZHJlbi5wdXNoKGJvZHkuY2hpbGRyZW5baV0pO1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgICAgICB9XG4gICAgICAgICIsIlxuICAgICAgICBjb25zdCBIYW5kbGViYXJzID0gcmVxdWlyZSgnaGFuZGxlYmFycycpO1xuICAgICAgICBjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG5cbiAgICAgICAgLy8gVXNlZCB0byByZWdpc3RlciBjb250ZXh0c1xuICAgICAgICBpZiAoIWRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIpXG4gICAgICAgICAgICBkb2N1bWVudC5fX2hhbmRsZWJhcl9jdXN0b21fbG9hZGVyID0ge1xuICAgICAgICAgICAgICAgIF9fbmV4dF9vYmpfaWQ6IDAsXG4gICAgICAgICAgICAgICAgX19yZWdpc3RlcmVkX2N0eDoge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIEhhbmRsZWJhcnMuZ2V0X21pbWVfaWNvbnMgPSAoKSA9PiBKU09OLnBhcnNlKCd7XCJhcHBsaWNhdGlvblwiOntcImNvbnRlbnRcIjp7XCJqYXZhc2NyaXB0XCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vamF2YXNjcmlwdC5wbmdcIixcImpzb25cIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi9qc29uLnBuZ1wiLFwicGRmXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vcGRmLnBuZ1wiLFwicmFyXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vcmFyLnBuZ1wiLFwidGFyXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vdGFyLnBuZ1wiLFwiemlwXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvYXBwbGljYXRpb24vemlwLnBuZ1wifSxcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hcHBsaWNhdGlvbi5wbmdcIn0sXCJhdWRpb1wiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9hdWRpby5wbmdcIn0sXCJjaGVtaWNhbFwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9jaGVtaWNhbC5wbmdcIn0sXCJmb250XCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2ZvbnQucG5nXCJ9LFwiZ2NvZGVcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvZ2NvZGUucG5nXCJ9LFwiaW1hZ2VcIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvaW1hZ2UucG5nXCJ9LFwibWVzc2FnZVwiOntcImJhc2VcIjpcIi9pbWFnZXMvaWNvbnMvbWltZS1pY29ucy9tZXNzYWdlLnBuZ1wifSxcIm1vZGVsXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL21vZGVsLnBuZ1wifSxcInRleHRcIjp7XCJjb250ZW50XCI6e1wiY3NzXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdGV4dC9jc3MucG5nXCIsXCJtYXJrZG93blwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvbWFya2Rvd24ucG5nXCIsXCJwbGFpblwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvcGxhaW4ucG5nXCIsXCJ0ZW1wbGF0ZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQvdGVtcGxhdGUucG5nXCJ9LFwiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3RleHQucG5nXCJ9LFwidmlkZW9cIjp7XCJiYXNlXCI6XCIvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvdmlkZW8ucG5nXCJ9LFwieC1jb25mZXJlbmNlXCI6e1wiYmFzZVwiOlwiL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3gtY29uZmVyZW5jZS5wbmdcIn19Jyk7XG4gICAgICAgIFxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IChkYXRhLCBjdHgpID0+IHtcbiAgICAgICAgICAgIGlmIChjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjdHhbJ19faGFuZGxlYmFyX2N0eF9pZCddKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5fX2hhbmRsZWJhcl9jdHhfaWQgPSArK2RvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIuX19uZXh0X29ial9pZDtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuX19oYW5kbGViYXJfY3VzdG9tX2xvYWRlci5fX3JlZ2lzdGVyZWRfY3R4W2N0eC5fX2hhbmRsZWJhcl9jdHhfaWRdID0gY3R4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkYXRhLl9faGFuZGxlYmFyX2N0eF9pZCA9IGN0eC5fX2hhbmRsZWJhcl9jdHhfaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGdlbmVyYXRlZF9odG1sID0gSGFuZGxlYmFycy50ZW1wbGF0ZSh7XCJjb21waWxlclwiOls4LFwiPj0gNC4zLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgbG9va3VwUHJvcGVydHkgPSBjb250YWluZXIubG9va3VwUHJvcGVydHkgfHwgZnVuY3Rpb24ocGFyZW50LCBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwYXJlbnQsIHByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICByZXR1cm4gcGFyZW50W3Byb3BlcnR5TmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH07XG5cbiAgcmV0dXJuIFwiPGgxPk5vdXZlYXUgRG9zc2llcjwvaDE+XFxyXFxuPGZvcm0gb25zdWJtaXQ9XFxcIlwiXG4gICAgKyBjb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbigobG9va3VwUHJvcGVydHkoaGVscGVycyxcImN0eFwiKXx8KGRlcHRoMCAmJiBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJjdHhcIikpfHxjb250YWluZXIuaG9va3MuaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLFwibWtkaXIoZXZlbnQpXCIse1wibmFtZVwiOlwiY3R4XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjIsXCJjb2x1bW5cIjoxNn0sXCJlbmRcIjp7XCJsaW5lXCI6MixcImNvbHVtblwiOjM4fX19KSlcbiAgICArIFwiXFxcIj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiZmllbGRcXFwiPlxcclxcbiAgICAgICAgPGxhYmVsIGZvcj0nbmFtZSc+XFxyXFxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIG5hbWU9XFxcIm5hbWVcXFwiIHBsYWNlaG9sZGVyPVxcXCJOb21cXFwiIGlkPVxcXCJuYW1lXFxcIiByZXF1aXJlZD5cXHJcXG4gICAgICAgIDwvbGFiZWw+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8aW5wdXQgdHlwZT1cXFwic3VibWl0XFxcIiB2YWx1ZT1cXFwiQ3LDqWVyIGxlIGRvc3NpZXJcXFwiPlxcclxcbjwvZm9ybT5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pKGRhdGEpO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoZ2VuZXJhdGVkX2h0bWwsICd0ZXh0L2h0bWwnKS5ib2R5O1xuICAgICAgICAgICAgaWYgKGJvZHkuY2hpbGRyZW4ubGVuZ3RoID09PSAxKVxuICAgICAgICAgICAgICAgIHJldHVybiBib2R5LmNoaWxkcmVuWzBdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBGb3JjZSBjaGlsZHJlbiBnZW5lcmF0aW9uXG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2R5LmNoaWxkcmVuLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2goYm9keS5jaGlsZHJlbltpXSk7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgICAgIH1cbiAgICAgICAgIiwiY2xhc3MgQ2xpZW50U3RyaW5nIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBkYXRhIHtDbGllbnRTdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoZGF0YSA9IG51bGwpIHtcclxuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLl9lbmNvZGVkX3N0cmluZ19kYXRhKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuYXNzZXJ0KHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgZGF0YS5fZW5jb2RlZF9zdHJpbmdfZGF0YSA9PT0gJ3N0cmluZycsIFwiaW52YWxpZCBzb3VyY2Ugc3RyaW5nIGRhdGEgOiBcIiwgZGF0YSlcclxuICAgICAgICAgICAgdGhpcy5fZW5jb2RlZF9zdHJpbmdfZGF0YSA9IGRhdGEuX2VuY29kZWRfc3RyaW5nX2RhdGE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIERiRGF0YSB7c3RyaW5nfVxyXG4gICAgICogQGNvbnN0cnVjdG9yIHtDbGllbnRTdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBGcm9tQ2xpZW50KERiRGF0YSkge1xyXG4gICAgICAgIGxldCBvYmplY3QgPSBuZXcgQ2xpZW50U3RyaW5nKCk7XHJcbiAgICAgICAgaWYgKERiRGF0YSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmFzc2VydCh0eXBlb2YgRGJEYXRhID09PSAnc3RyaW5nJylcclxuICAgICAgICAgICAgb2JqZWN0Ll9lbmNvZGVkX3N0cmluZ19kYXRhID0gZW5jb2RlVVJJQ29tcG9uZW50KERiRGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvYmplY3Q7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQbGFpbiB0ZXh0IGRlY29kZWQgc3RyaW5nXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHBsYWluKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9lbmNvZGVkX3N0cmluZ19kYXRhID8gZGVjb2RlVVJJQ29tcG9uZW50KHRoaXMuX2VuY29kZWRfc3RyaW5nX2RhdGEpIDogJyc7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFbmNvZGVkIHN0cmluZyBkYXRhXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGVuY29kZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuY29kZWRfc3RyaW5nX2RhdGEgPyB0aGlzLl9lbmNvZGVkX3N0cmluZ19kYXRhIDogJyc7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVcmwgY29tcGF0aWJsZSBzdHJpbmcgZGF0YVxyXG4gICAgICogQHJldHVybiB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBmb3JfdXJsKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9lbmNvZGVkX3N0cmluZ19kYXRhID8gdGhpcy5fZW5jb2RlZF9zdHJpbmdfZGF0YSA6ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICB0b1N0cmluZygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wbGFpbigpO1xyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBVcmxQYXRoIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIH1cclxuXHJcbiAgICBhYnNvbHV0ZV91cmwoKSB7XHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQge0NsaWVudFN0cmluZyxVcmxQYXRofSIsImNvbnN0IG1pbWUgPSByZXF1aXJlKCdtaW1lJyk7XHJcblxyXG5cclxuZnVuY3Rpb24gcHJlcGFyZV9maWxlKGZpbGUsIGRpcmVjdG9yeSkge1xyXG4gICAgZmlsZS5jYWxsYmFja19yZW1vdmVkID0gZmlsZS5jYWxsYmFja19yZW1vdmVkID09PSB1bmRlZmluZWQgPyBudWxsIDogZmlsZS5jYWxsYmFja19yZW1vdmVkO1xyXG4gICAgZmlsZS5kaXJlY3RvcnkgPSBkaXJlY3Rvcnk7XHJcbiAgICBmaWxlLnJlbW92ZSA9ICgpID0+IGRpcmVjdG9yeS5yZW1vdmVfZmlsZShmaWxlKVxyXG4gICAgZmlsZS5hYnNvbHV0ZV9wYXRoID0gKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBkaXJlY3RvcnkuYWJzb2x1dGVfcGF0aCgpICsgZmlsZS5uYW1lO1xyXG4gICAgfVxyXG4gICAgZmlsZS5pc19maWxlID0gdHJ1ZTtcclxuICAgIGZpbGUuaXNfZGlyZWN0b3J5ID0gZmFsc2U7XHJcbiAgICBpZiAoIWZpbGUudGltZXN0YW1wICYmIGZpbGUubGFzdE1vZGlmaWVkKVxyXG4gICAgICAgIGZpbGUudGltZXN0YW1wID0gZmlsZS5sYXN0TW9kaWZpZWQ7XHJcbiAgICBpZiAoIWZpbGUubWltZXR5cGUgJiYgZmlsZS50eXBlICYmIGZpbGUudHlwZSAhPT0gJycpXHJcbiAgICAgICAgZmlsZS5taW1ldHlwZSA9IGZpbGUudHlwZTtcclxuICAgIGlmICghZmlsZS5taW1ldHlwZSlcclxuICAgICAgICBmaWxlLm1pbWV0eXBlID0gbWltZS5nZXRUeXBlKGZpbGUubmFtZSk7XHJcblxyXG4gICAgcmV0dXJuIGZpbGU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNsZWFyX2ZpbGUoZmlsZSkge1xyXG4gICAgZGVsZXRlIGZpbGVbJ2NhbGxiYWNrX3JlbW92ZWQnXTtcclxuICAgIGZpbGVbJ2RpcmVjdG9yeSddID0gdW5kZWZpbmVkO1xyXG4gICAgZGVsZXRlIGZpbGVbJ3JlbW92ZSddO1xyXG4gICAgcmV0dXJuIGZpbGU7XHJcbn1cclxuXHJcbmNsYXNzIERpcmVjdG9yeSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBuYW1lIHtzdHJpbmd9XHJcbiAgICAgKiBAcGFyYW0gcGFyZW50IHtEaXJlY3Rvcnl8bnVsbH1cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IobmFtZSwgcGFyZW50ID0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5zaXplID0gMDtcclxuICAgICAgICB0aGlzLmNvbnRlbnRfc2l6ZSA9IDA7XHJcbiAgICAgICAgdGhpcy5jb250ZW50X2ZpbGVzID0gMDtcclxuXHJcbiAgICAgICAgdGhpc1tcImlzX2RpcmVjdG9yeVwiXSA9IHRydWU7XHJcbiAgICAgICAgdGhpc1tcImlzX2ZpbGVcIl0gPSBmYWxzZTtcclxuXHJcbiAgICAgICAgdGhpcy5kaXJlY3RvcmllcyA9IHt9O1xyXG4gICAgICAgIHRoaXMuZmlsZXMgPSBbXTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGNhbGxiYWNrIGNhbGxiYWNrX2ZpbGVfYWRkZWRcclxuICAgICAgICAgKiBAcGFyYW0geyp9IG5ld19maWxlXHJcbiAgICAgICAgICovXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBjYWxsYmFjayBjYWxsYmFja19kaXJlY3RvcnlfYWRkZWRcclxuICAgICAgICAgKiBAcGFyYW0ge0RpcmVjdG9yeX0gbmV3X2RpclxyXG4gICAgICAgICAqL1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAY2FsbGJhY2sgY2FsbGJhY2tfc3RhdHNfdXBkYXRlZFxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb250ZW50X3NpemVcclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gY29udGVudF9maWxlc1xyXG4gICAgICAgICAqL1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAY2FsbGJhY2sgY2FsbGJhY2tfcmVtb3ZlZFxyXG4gICAgICAgICAqL1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAdHlwZSB7Y2FsbGJhY2tfZmlsZV9hZGRlZH1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmNhbGxiYWNrX2ZpbGVfYWRkZWQgPSBudWxsO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtjYWxsYmFja19kaXJlY3RvcnlfYWRkZWR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5jYWxsYmFja19kaXJlY3RvcnlfYWRkZWQgPSBudWxsO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtjYWxsYmFja19zdGF0c191cGRhdGVkfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tfc3RhdHNfdXBkYXRlZCA9IG51bGw7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUge2NhbGxiYWNrX3JlbW92ZWR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5jYWxsYmFja19yZW1vdmVkID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBhZGRfZmlsZShmaWxlKSB7XHJcbiAgICAgICAgcHJlcGFyZV9maWxlKGZpbGUsIHRoaXMpXHJcbiAgICAgICAgZm9yIChjb25zdCBkaXIgb2YgdGhpcy5wYXJlbnRfZGlycygpKSB7XHJcbiAgICAgICAgICAgIGRpci5jb250ZW50X3NpemUgKz0gTnVtYmVyKGZpbGUuc2l6ZSk7XHJcbiAgICAgICAgICAgIGRpci5jb250ZW50X2ZpbGVzICs9IDE7XHJcbiAgICAgICAgICAgIGlmIChkaXIuY2FsbGJhY2tfc3RhdHNfdXBkYXRlZClcclxuICAgICAgICAgICAgICAgIGRpci5jYWxsYmFja19zdGF0c191cGRhdGVkKGRpci5jb250ZW50X3NpemUsIGRpci5jb250ZW50X2ZpbGVzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZmlsZXMucHVzaChmaWxlKTtcclxuICAgICAgICBpZiAodGhpcy5jYWxsYmFja19maWxlX2FkZGVkKVxyXG4gICAgICAgICAgICB0aGlzLmNhbGxiYWNrX2ZpbGVfYWRkZWQoZmlsZSk7XHJcblxyXG4gICAgICAgIHJldHVybiBmaWxlO1xyXG4gICAgfVxyXG5cclxuICAgIF9yZW1vdmVfaWZfZW1wdHlfaW50ZXJuYWwoKSB7XHJcbiAgICAgICAgLy8gYXV0byByZW1vdmUgZm9sZGVyIGlmIGVtcHR5XHJcbiAgICAgICAgaWYgKHRoaXMuZmlsZXMubGVuZ3RoID09PSAwICYmIE9iamVjdC52YWx1ZXModGhpcy5kaXJlY3RvcmllcykubGVuZ3RoID09PSAwICYmIHRoaXMucGFyZW50KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNhbGxiYWNrX3JlbW92ZWQpXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGxiYWNrX3JlbW92ZWQoKTtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMucGFyZW50LmRpcmVjdG9yaWVzW3RoaXMubmFtZV07XHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50Ll9yZW1vdmVfaWZfZW1wdHlfaW50ZXJuYWwoKTtcclxuICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVfZmlsZShmaWxlKSB7XHJcbiAgICAgICAgbGV0IGZvdW5kID0gZmFsc2U7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmZpbGVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbGVzW2ldID09PSBmaWxlKSB7XHJcbiAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbGVzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gVXBkYXRlIHN0YXRzXHJcbiAgICAgICAgaWYgKGZvdW5kKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZGlyIG9mIHRoaXMucGFyZW50X2RpcnMoKSkge1xyXG4gICAgICAgICAgICAgICAgZGlyLmNvbnRlbnRfc2l6ZSAtPSBmaWxlLnNpemU7XHJcbiAgICAgICAgICAgICAgICBkaXIuY29udGVudF9maWxlcyAtPSAxO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRpci5jYWxsYmFja19zdGF0c191cGRhdGVkKVxyXG4gICAgICAgICAgICAgICAgICAgIGRpci5jYWxsYmFja19zdGF0c191cGRhdGVkKGRpci5jb250ZW50X3NpemUsIGRpci5jb250ZW50X2ZpbGVzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGZpbGVbJ2NhbGxiYWNrX3JlbW92ZWQnXSlcclxuICAgICAgICAgICAgICAgIGZpbGVbJ2NhbGxiYWNrX3JlbW92ZWQnXSgpO1xyXG5cclxuICAgICAgICAgICAgY2xlYXJfZmlsZShmaWxlKTtcclxuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlX2lmX2VtcHR5X2ludGVybmFsKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWxlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgYWJzb2x1dGVfcGF0aChleGNsdWRlX3Jvb3QgPSBmYWxzZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudCA/IGAke3RoaXMucGFyZW50LmFic29sdXRlX3BhdGgoZXhjbHVkZV9yb290KX0ke3RoaXMubmFtZX0vYCA6ICcvJztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4ge0RpcmVjdG9yeVtdfVxyXG4gICAgICovXHJcbiAgICBwYXJlbnRfZGlycygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQgPyBbdGhpc10uY29uY2F0KHRoaXMucGFyZW50LnBhcmVudF9kaXJzKCkpIDogW3RoaXNdO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZSgpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5maWxlcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZV9maWxlKHRoaXMuZmlsZXNbaV0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBkaXIgb2YgT2JqZWN0LnZhbHVlcyh0aGlzLmRpcmVjdG9yaWVzKSlcclxuICAgICAgICAgICAgZGlyLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5wYXJlbnQpXHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnBhcmVudC5kaXJlY3Rvcmllc1t0aGlzLm5hbWVdXHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNhbGxiYWNrX3JlbW92ZWQpXHJcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tfcmVtb3ZlZCgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5wYXJlbnQpXHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50Ll9yZW1vdmVfaWZfZW1wdHlfaW50ZXJuYWwoKTtcclxuICAgICAgICB0aGlzLnBhcmVudCA9IG51bGw7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIEZpbGVzeXN0ZW0ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gcm9vdF9uYW1lIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHJvb3RfbmFtZSkge1xyXG4gICAgICAgIHRoaXMucm9vdCA9IG5ldyBEaXJlY3Rvcnkocm9vdF9uYW1lLCBudWxsKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBmaWxlXHJcbiAgICAgKiBAcGFyYW0gcGF0aCB7c3RyaW5nfSBEaXJlY3RvcnkgcGF0aFxyXG4gICAgICogQHJldHVybiB7bnVsbHwqfVxyXG4gICAgICovXHJcbiAgICBhZGRfZmlsZShmaWxlLCBwYXRoKSB7XHJcbiAgICAgICAgaWYgKGZpbGUuc2l6ZSA9PT0gMClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGNvbnN0IGRpcmVjdG9yeSA9IHRoaXMuZGlyZWN0b3J5X2Zyb21fcGF0aChwYXRoLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gZGlyZWN0b3J5LmFkZF9maWxlKGZpbGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHBhdGgge3N0cmluZ31cclxuICAgICAqIEBwYXJhbSBjcmVhdGVfaWZfbm90X2ZvdW5kIHtib29sZWFufVxyXG4gICAgICogQHJldHVybiB7RGlyZWN0b3J5fG51bGx9XHJcbiAgICAgKi9cclxuICAgIGRpcmVjdG9yeV9mcm9tX3BhdGgocGF0aCwgY3JlYXRlX2lmX25vdF9mb3VuZCA9IGZhbHNlKSB7XHJcbiAgICAgICAgY29uc3QgbGlzdF9wYXRoID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHBhdGguc3BsaXQoJy8nKSlcclxuICAgICAgICAgICAgaWYgKGl0ZW0gIT09ICcnKVxyXG4gICAgICAgICAgICAgICAgbGlzdF9wYXRoLnB1c2goaXRlbSk7XHJcbiAgICAgICAgbGlzdF9wYXRoLnJldmVyc2UoKTtcclxuXHJcbiAgICAgICAgY29uc3QgaXRlID0gKGRpciwgcmVtYWluaW5nKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChyZW1haW5pbmcubGVuZ3RoID09PSAwKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpcjtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSByZW1haW5pbmcucG9wKCk7XHJcbiAgICAgICAgICAgIGlmIChkaXIuZGlyZWN0b3JpZXNbbmFtZV0pXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlKGRpci5kaXJlY3Rvcmllc1tuYW1lXSwgcmVtYWluaW5nKTtcclxuICAgICAgICAgICAgZWxzZSBpZiAoY3JlYXRlX2lmX25vdF9mb3VuZCkge1xyXG4gICAgICAgICAgICAgICAgZGlyLmRpcmVjdG9yaWVzW25hbWVdID0gbmV3IERpcmVjdG9yeShuYW1lLCBkaXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRpci5jYWxsYmFja19kaXJlY3RvcnlfYWRkZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgZGlyLmNhbGxiYWNrX2RpcmVjdG9yeV9hZGRlZChkaXIuZGlyZWN0b3JpZXNbbmFtZV0pXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlKGRpci5kaXJlY3Rvcmllc1tuYW1lXSwgcmVtYWluaW5nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBpdGUodGhpcy5yb290LCBsaXN0X3BhdGgpXHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlX2ZpbGUoZmlsZSkge1xyXG4gICAgICAgIGlmICghZmlsZS5kaXJlY3RvcnkpXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgICByZXR1cm4gZmlsZS5kaXJlY3RvcnkucmVtb3ZlX2ZpbGUoZmlsZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0X3JhbmRvbV9maWxlKCkge1xyXG4gICAgICAgIGNvbnN0IGludGVybmFsX2dldF9yYW5kb21fZmlsZSA9IChkaXIpID0+IHtcclxuICAgICAgICAgICAgaWYgKGRpci5maWxlcy5sZW5ndGggPiAwKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpci5maWxlc1swXTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGRpcnMgPSBPYmplY3QudmFsdWVzKGRpci5kaXJlY3Rvcmllcyk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZGlyIG9mIGRpcnMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBpbnRlcm5hbF9nZXRfcmFuZG9tX2ZpbGUoZGlyKTtcclxuICAgICAgICAgICAgICAgIGlmIChmaWxlKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGludGVybmFsX2dldF9yYW5kb21fZmlsZSh0aGlzLnJvb3QpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyKCkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLnJvb3QuZmlsZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpXHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlX2ZpbGUodGhpcy5yb290LmZpbGVzW2ldKTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBkaXJlY3Rvcnkgb2YgT2JqZWN0LnZhbHVlcyh0aGlzLnJvb3QuZGlyZWN0b3JpZXMpKVxyXG4gICAgICAgICAgICBkaXJlY3RvcnkucmVtb3ZlKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge0ZpbGVzeXN0ZW19XHJcbi8vZXhwb3J0IHtGaWxlc3lzdGVtfSIsImltcG9ydCB7cHJpbnRfbWVzc2FnZX0gZnJvbSBcIi4uLy4uL2xheW91dC93aWRnZXRzL2NvbXBvbmVudHMvbWVzc2FnZV9ib3guanNcIjtcclxuaW1wb3J0IHtSRVBPU19CVUlMREVSfSBmcm9tIFwiLi4vLi4vbGF5b3V0L3dpZGdldHMvdmlld3BvcnQvcmVwb3NfYnVpbGRlclwiXHJcbmltcG9ydCB7RmlsZXN5c3RlbU9iamVjdH0gZnJvbSBcIi4vZmlsZXN5c3RlbV92MlwiO1xyXG5pbXBvcnQge1BBR0VfQ09OVEVYVH0gZnJvbSBcIi4vdXRpbHNcIjtcclxuXHJcbmNsYXNzIFRyYW5zZmVyU3RhdHMge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy50aW1lc3RhbXAgPSBwZXJmb3JtYW5jZS5ub3coKTtcclxuICAgICAgICB0aGlzLmxhc3Rfc2VudCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy50b3RhbCA9IDA7XHJcblxyXG4gICAgICAgIHRoaXMuc3BlZWRfbWVhc3VyZXMgPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICBzcGVlZCgpIHtcclxuICAgICAgICBsZXQgYXZlcmFnZSA9IDA7XHJcbiAgICAgICAgZm9yIChjb25zdCBtZWFzdXJlIG9mIHRoaXMuc3BlZWRfbWVhc3VyZXMpXHJcbiAgICAgICAgICAgIGF2ZXJhZ2UgKz0gbWVhc3VyZTtcclxuICAgICAgICBhdmVyYWdlIC89IHRoaXMuc3BlZWRfbWVhc3VyZXMubGVuZ3RoO1xyXG4gICAgICAgIHJldHVybiBhdmVyYWdlO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbWFpbmluZygpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMudG90YWwgLSB0aGlzLmxhc3Rfc2VudCkgLyB0aGlzLnNwZWVkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKHNlbnQsIHRvdGFsKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmxhc3Rfc2VudCkge1xyXG4gICAgICAgICAgICB0aGlzLmxhc3Rfc2VudCA9IHNlbnQ7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBlcmZvcm1hbmNlLm5vdygpIC0gdGhpcy50aW1lc3RhbXAgPCAxMDApXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgY29uc3QgYWRkZWQgPSBzZW50IC0gdGhpcy5sYXN0X3NlbnQ7XHJcbiAgICAgICAgY29uc3QgZWxhcHNlZCA9IHBlcmZvcm1hbmNlLm5vdygpIC0gdGhpcy50aW1lc3RhbXA7XHJcbiAgICAgICAgdGhpcy50aW1lc3RhbXAgPSBwZXJmb3JtYW5jZS5ub3coKTtcclxuICAgICAgICBjb25zdCBsb2NhbF9zcGVlZCA9IGFkZGVkIC8gZWxhcHNlZCAqIDEwMDA7XHJcbiAgICAgICAgdGhpcy5zcGVlZF9tZWFzdXJlcy5wdXNoKGxvY2FsX3NwZWVkKTtcclxuICAgICAgICB0aGlzLnRvdGFsID0gdG90YWw7XHJcbiAgICAgICAgdGhpcy5sYXN0X3NlbnQgPSBzZW50O1xyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBDaHVua2VkRmlsZVN0cmVhbSB7XHJcblxyXG4gICAgc3RhdGljIE1BWF9CQVRDSF9TSVpFID0gdGhpcy5tYXhfYmF0Y2hfc2l6ZSA9IDUwICogMTAyNCAqIDEwMjQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gZmlsZSB7RmlsZX1cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoZmlsZSkge1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAdHlwZSB7RmlsZX1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmZpbGUgPSBmaWxlO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fY3Vyc29yID0gMDtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuX2xhc3RfY3Vyc29yID0gMDtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUge251bGx8bnVtYmVyfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuc3RyZWFtX2lkID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRfbmV4dF9jaHVuaygpIHtcclxuICAgICAgICB0aGlzLl9sYXN0X2N1cnNvciA9IHRoaXMuX2N1cnNvcjtcclxuICAgICAgICBpZiAoIXRoaXMuZmlsZSlcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgaWYgKHRoaXMuX2N1cnNvciA9PT0gdGhpcy5maWxlLnNpemUpXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIHRoaXMuX2N1cnNvciArPSBNYXRoLm1pbih0aGlzLmZpbGUuc2l6ZSAtIHRoaXMuX2N1cnNvciwgQ2h1bmtlZEZpbGVTdHJlYW0uTUFYX0JBVENIX1NJWkUpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZpbGUuc2xpY2UodGhpcy5fbGFzdF9jdXJzb3IsIHRoaXMuX2N1cnNvcik7XHJcbiAgICB9XHJcblxyXG4gICAgY2FuY2VsX2NodW5rKCkge1xyXG4gICAgICAgIHRoaXMuX2N1cnNvciA9IHRoaXMuX2xhc3RfY3Vyc29yO1xyXG4gICAgfVxyXG5cclxuICAgIGNodW5rX251bWJlcigpIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5jZWlsKHRoaXMuZmlsZS5zaXplIC8gQ2h1bmtlZEZpbGVTdHJlYW0uTUFYX0JBVENIX1NJWkUpO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbnRfY2h1bmsoKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IodGhpcy5fbGFzdF9jdXJzb3IgLyBDaHVua2VkRmlsZVN0cmVhbS5NQVhfQkFUQ0hfU0laRSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIFVwbG9hZFN0cmVhbSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAY2FsbGJhY2sgY2FsbGJhY2tfb25fcHJvZ3Jlc3NcclxuICAgICAqIEBwYXJhbSBmaWxlIHtGaWxlfVxyXG4gICAgICogQHBhcmFtIHNlbnRfY2h1bmtzIHtudW1iZXJ9XHJcbiAgICAgKiBAcGFyYW0gdG90YWxfY2h1bmtzIHtudW1iZXJ9XHJcbiAgICAgKiBAcGFyYW0gc2VudF9ieXRlcyB7bnVtYmVyfVxyXG4gICAgICogQHBhcmFtIHRvdGFsX2J5dGVzIHtudW1iZXJ9XHJcbiAgICAgKiBAcGFyYW0gcHJvY2Vzc19wZXJjZW50IHtudW1iZXJ9XHJcbiAgICAgKi9cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBjYWxsYmFjayBjYWxsYmFja19maWxlX3NlbnRcclxuICAgICAqIEBwYXJhbSBmaWxlIHtGaWxlfVxyXG4gICAgICovXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAY2FsbGJhY2sgY2FsbGJhY2tfZmlsZV9jYW5jZWxlZFxyXG4gICAgICogQHBhcmFtIGZpbGUge0ZpbGV9XHJcbiAgICAgKi9cclxuXHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gZmlsZV9zdHJlYW0ge0NodW5rZWRGaWxlU3RyZWFtfVxyXG4gICAgICogQHBhcmFtIHVybCB7c3RyaW5nfVxyXG4gICAgICogQHBhcmFtIG9uX3Byb2dyZXNzIHtjYWxsYmFja19vbl9wcm9ncmVzc31cclxuICAgICAqIEBwYXJhbSBvbl9maWxlX3NlbnQge2NhbGxiYWNrX2ZpbGVfc2VudH1cclxuICAgICAqIEBwYXJhbSBvbl9jYW5jZWwge2NhbGxiYWNrX2ZpbGVfY2FuY2VsZWR9XHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGZpbGVfc3RyZWFtLCB1cmwsIG9uX3Byb2dyZXNzLCBvbl9maWxlX3NlbnQsIG9uX2NhbmNlbCkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtjYWxsYmFja19maWxlX3NlbnR9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLl9vbl9maWxlX3NlbnQgPSBvbl9maWxlX3NlbnQ7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtjYWxsYmFja19maWxlX3NlbnR9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLl9vbl9jYW5jZWwgPSBvbl9jYW5jZWw7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtjYWxsYmFja19vbl9wcm9ncmVzc31cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuX29uX3Byb2dyZXNzID0gb25fcHJvZ3Jlc3M7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLl91cmwgPSB1cmw7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtDaHVua2VkRmlsZVN0cmVhbX1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuX2ZpbGVfc3RyZWFtID0gZmlsZV9zdHJlYW07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtYTUxIdHRwUmVxdWVzdH1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuX3JlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuXHJcbiAgICAgICAgY29uc3QgdGhpc19yZWYgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuX3JlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXNfcmVmLl9ydW5uaW5nKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICBpZiAodGhpc19yZWYuX3JlcXVlc3QucmVhZHlTdGF0ZSA9PT0gNCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXNfcmVmLl9yZXF1ZXN0LnN0YXR1cyA9PT0gMClcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJpbnRfbWVzc2FnZShcImVycm9yXCIsIGBTZXJ2ZXIgZXJyb3JgLCBcImNvbm5lY3Rpb24gY2xvc2VkXCIpXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpc19yZWYuX3JlcXVlc3QucmVzcG9uc2UubGVuZ3RoID09PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmludF9tZXNzYWdlKFwiZXJyb3JcIiwgYFVuaGFuZGxlZCByZXNwb25zZWAsIGAke3RoaXNfcmVmLl9yZXF1ZXN0LnN0YXR1c31gKVxyXG4gICAgICAgICAgICAgICAgdGhpc19yZWYuX2hhbmRsZV9yZXN1bHQodGhpc19yZWYuX3JlcXVlc3Quc3RhdHVzLCBKU09OLnBhcnNlKHRoaXNfcmVmLl9yZXF1ZXN0LnJlc3BvbnNlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLl9yZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKFwicHJvZ3Jlc3NcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXNfcmVmLl9jaHVua19wcm9ncmVzcyA9IGV2ZW50LmxvYWRlZDtcclxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlX3Byb2dyZXNzKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtudWxsfHN0cmluZ31cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuX3N0cmVhbV9pZCA9IG51bGw7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLl9wcm9jZXNzX3BlcmNlbnQgPSAwO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fY2h1bmtfcHJvZ3Jlc3MgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGdvKCkge1xyXG4gICAgICAgIHRoaXMuX3J1bm5pbmcgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuX3B1c2hfbmV4dF9jaHVuaygpO1xyXG4gICAgfVxyXG5cclxuICAgIGhvbGQoKSB7XHJcbiAgICAgICAgdGhpcy5fcnVubmluZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX3JlcXVlc3QuYWJvcnQoKTtcclxuICAgICAgICB0aGlzLl9maWxlX3N0cmVhbS5jYW5jZWxfY2h1bmsoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBjb2RlIHtudW1iZXJ9XHJcbiAgICAgKiBAcGFyYW0gZGF0YSB7b2JqZWN0OiB7c3RyZWFtX2lkOnN0cmluZywgcHJvY2Vzc19wZXJjZW50Om51bWJlciwgbWVzc2FnZTpzdHJpbmcsIGZpbGU6b2JqZWN0LCBjcmVhdGVkX2RpcmVjdG9yaWVzOm9iamVjdFtdfX1cclxuICAgICAqL1xyXG4gICAgX2hhbmRsZV9yZXN1bHQoY29kZSwgZGF0YSkge1xyXG4gICAgICAgIGlmIChjb2RlICE9PSAyMDAgfHwgIWRhdGEpIHtcclxuICAgICAgICAgICAgdGhpcy5ob2xkKCk7XHJcbiAgICAgICAgICAgIGlmIChkYXRhICYmIGRhdGEubWVzc2FnZSlcclxuICAgICAgICAgICAgICAgIHByaW50X21lc3NhZ2UoJ2Vycm9yJywgZGF0YS5tZXNzYWdlLnRpdGxlLCBkYXRhID8gZGF0YS5tZXNzYWdlLmNvbnRlbnQgOiAndW5rbm93biBlcnJvcicpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBwcmludF9tZXNzYWdlKCdlcnJvcicsIFwiVXBsb2FkIGZhaWxlZFwiLCAndW5rbm93biBlcnJvcicpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBVcGxvYWQgZmFpbGVkIDpgLCBkYXRhKTtcclxuICAgICAgICAgICAgdGhpcy5fb25fY2FuY2VsKHRoaXMuX2ZpbGVfc3RyZWFtLmZpbGUpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZGF0YS5tZXNzYWdlKVxyXG4gICAgICAgICAgICBwcmludF9tZXNzYWdlKCdpbmZvJywgZGF0YS5tZXNzYWdlLnRpdGxlID8gZGF0YS5tZXNzYWdlLnRpdGxlIDogZGF0YS5tZXNzYWdlLCBkYXRhLm1lc3NhZ2UuY29udGVudCA/IGRhdGEubWVzc2FnZS5jb250ZW50IDogXCJcIik7XHJcblxyXG4gICAgICAgIGlmICghZGF0YS5zdHJlYW1faWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob2xkKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3Byb2Nlc3NfcGVyY2VudCA9IE51bWJlcihkYXRhLnByb2Nlc3NfcGVyY2VudCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3VwZGF0ZV9wcm9ncmVzcygpO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fc3RyZWFtX2lkID0gZGF0YS5zdHJlYW1faWQ7XHJcblxyXG4gICAgICAgIGlmIChkYXRhLmNyZWF0ZWRfZGlyZWN0b3JpZXMpXHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZGlyZWN0b3J5IG9mIGRhdGEuY3JlYXRlZF9kaXJlY3RvcmllcylcclxuICAgICAgICAgICAgICAgIFJFUE9TX0JVSUxERVIuZmlsZXN5c3RlbS5hZGRfb2JqZWN0KEZpbGVzeXN0ZW1PYmplY3QuRnJvbVNlcnZlckRhdGEoZGlyZWN0b3J5KSk7XHJcblxyXG4gICAgICAgIGlmIChkYXRhLmZpbGUpIHtcclxuICAgICAgICAgICAgUkVQT1NfQlVJTERFUi5maWxlc3lzdGVtLmFkZF9vYmplY3QoRmlsZXN5c3RlbU9iamVjdC5Gcm9tU2VydmVyRGF0YShkYXRhLmZpbGUpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fcHVzaF9uZXh0X2NodW5rKCk7XHJcbiAgICB9XHJcblxyXG4gICAgX3B1c2hfbmV4dF9jaHVuaygpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX3J1bm5pbmcpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgY29uc3QgY2h1bmsgPSB0aGlzLl9maWxlX3N0cmVhbS5nZXRfbmV4dF9jaHVuaygpO1xyXG4gICAgICAgIGlmICghY2h1bmspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3Byb2Nlc3NfcGVyY2VudCA8IDEuMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9zdHJlYW1faWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhvbGQoKTtcclxuICAgICAgICAgICAgICAgICAgICBwcmludF9tZXNzYWdlKCdlcnJvcicsIGBJbnZhbGlkIHN0cmVhbSBpZCByZWNlaXZlZCBkdXJpbmcgcHJvY2VzcyBzdGVwYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgSW52YWxpZCBzdHJlYW0gaWQgcmVjZWl2ZWQgZHVyaW5nIHByb2Nlc3Mgc3RlcGApO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXF1ZXN0Lm9wZW4oXCJQT1NUXCIsIHRoaXMuX3VybCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKCdjb250ZW50LXRva2VuJywgdGhpcy5fc3RyZWFtX2lkLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlcXVlc3Quc2VuZCgpO1xyXG4gICAgICAgICAgICAgICAgfSwgNTAwKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfSBlbHNlXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fb25fZmlsZV9zZW50KHRoaXMuX2ZpbGVfc3RyZWFtLmZpbGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fcmVxdWVzdC5vcGVuKFwiUE9TVFwiLCB0aGlzLl91cmwpO1xyXG4gICAgICAgIGlmICghdGhpcy5fc3RyZWFtX2lkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcignY29udGVudC1uYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuX2ZpbGVfc3RyZWFtLmZpbGUubmFtZSkpO1xyXG4gICAgICAgICAgICB0aGlzLl9yZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoJ2NvbnRlbnQtc2l6ZScsIHRoaXMuX2ZpbGVfc3RyZWFtLmZpbGUuc2l6ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcignY29udGVudC10aW1lc3RhbXAnLCB0aGlzLl9maWxlX3N0cmVhbS5maWxlLnRpbWVzdGFtcCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcignY29udGVudC1taW1ldHlwZScsIHRoaXMuX2ZpbGVfc3RyZWFtLmZpbGUubWltZXR5cGUpO1xyXG4gICAgICAgICAgICBjb25zdCBhYnNvbHV0ZV9wYXRoID0gKFJFUE9TX0JVSUxERVIubmF2aWdhdG9yLmZpbGVzeXN0ZW0ubWFrZV9zdHJpbmdfcGF0aF90b19vYmplY3QoUkVQT1NfQlVJTERFUi5uYXZpZ2F0b3IuZ2V0X2N1cnJlbnRfZGlyZWN0b3J5KCkpICsgdGhpcy5fZmlsZV9zdHJlYW0uZmlsZS5kaXJlY3RvcnkuYWJzb2x1dGVfcGF0aCgpLnJlcGxhY2VBbGwoJy8vJywgJy8nKSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcignY29udGVudC1wYXRoJywgZW5jb2RlVVJJQ29tcG9uZW50KGFic29sdXRlX3BhdGgpKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2ZpbGVfc3RyZWFtLmZpbGUuZGVzY3JpcHRpb24pXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoJ2NvbnRlbnQtZGVzY3JpcHRpb24nLCB0aGlzLl9maWxlX3N0cmVhbS5maWxlLmRlc2NyaXB0aW9uID8gZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuX2ZpbGVfc3RyZWFtLmZpbGUuZGVzY3JpcHRpb24pIDogJycpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcignY29udGVudC10b2tlbicsIHRoaXMuX3N0cmVhbV9pZC50b1N0cmluZygpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fcmVxdWVzdC5zZW5kKGNodW5rKTtcclxuICAgIH1cclxuXHJcbiAgICBfdXBkYXRlX3Byb2dyZXNzKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9vbl9wcm9ncmVzcykge1xyXG4gICAgICAgICAgICB0aGlzLl9vbl9wcm9ncmVzcyh0aGlzLl9maWxlX3N0cmVhbS5maWxlLCB0aGlzLl9maWxlX3N0cmVhbS5zZW50X2NodW5rKCksIHRoaXMuX2ZpbGVfc3RyZWFtLmNodW5rX251bWJlcigpLCB0aGlzLl9maWxlX3N0cmVhbS5zZW50X2NodW5rKCkgKiBDaHVua2VkRmlsZVN0cmVhbS5NQVhfQkFUQ0hfU0laRSArIHRoaXMuX2NodW5rX3Byb2dyZXNzLCB0aGlzLl9maWxlX3N0cmVhbS5maWxlLnNpemUsIHRoaXMuX3Byb2Nlc3NfcGVyY2VudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBGaWxlc3lzdGVtVXBsb2FkIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGZpbGVzeXN0ZW0ge0ZpbGVzeXN0ZW19XHJcbiAgICAgKiBAcGFyYW0gdXJsIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGZpbGVzeXN0ZW0sIHVybCkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtGaWxlc3lzdGVtfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fZmlsZXN5c3RlbSA9IGZpbGVzeXN0ZW07XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuaXNfcnVubmluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMudXJsID0gYCR7UEFHRV9DT05URVhULnJlcG9zX3BhdGgoKX0vc2VuZC8ke1JFUE9TX0JVSUxERVIubmF2aWdhdG9yLmdldF9jdXJyZW50X2RpcmVjdG9yeSgpID8gUkVQT1NfQlVJTERFUi5uYXZpZ2F0b3IuZ2V0X2N1cnJlbnRfZGlyZWN0b3J5KCkgOiAnJ31gO1xyXG5cclxuICAgICAgICB0aGlzLnRvdGFsX2NvbnRlbnRfc2l6ZSA9IHRoaXMuX2ZpbGVzeXN0ZW0ucm9vdC5jb250ZW50X3NpemU7XHJcbiAgICAgICAgdGhpcy50b3RhbF9jb250ZW50X3NlbnQgPSAwO1xyXG5cclxuICAgICAgICB0aGlzLnRvdGFsX2ZpbGVfY291bnQgPSB0aGlzLl9maWxlc3lzdGVtLnJvb3QuY29udGVudF9maWxlcztcclxuICAgICAgICB0aGlzLnRvdGFsX2ZpbGVfc2VudCA9IDA7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBjYWxsYmFjayBjYWxsYmFja19maW5pc2hlZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtudWxsfGNhbGxiYWNrX2ZpbmlzaGVkfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tfZmluaXNoZWQgPSBudWxsO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAY2FsbGJhY2sgY2FsbGJhY2tfZmlsZV91cGxvYWRlZFxyXG4gICAgICAgICAqIEBwYXJhbSB7RmlsZX1cclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAdHlwZSB7bnVsbHxjYWxsYmFja19maWxlX3VwbG9hZGVkfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tfZmlsZV91cGxvYWRlZCA9IG51bGw7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtVcGxvYWRTdHJlYW19XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLl9jdXJyZW50X3N0cmVhbSA9IG51bGw7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBjYWxsYmFjayBjYWxsYmFja191cGRhdGVfcHJvZ3Jlc3NcclxuICAgICAgICAgKiBAcGFyYW0gZmlsZV9uYW1lIHtzdHJpbmd9XHJcbiAgICAgICAgICogQHBhcmFtIGZpbGVfc2l6ZSB7bnVtYmVyfVxyXG4gICAgICAgICAqIEBwYXJhbSB1cGxvYWRlZF9maWxlcyB7bnVtYmVyfVxyXG4gICAgICAgICAqIEBwYXJhbSB0b3RhbF9maWxlcyB7bnVtYmVyfVxyXG4gICAgICAgICAqIEBwYXJhbSB1cGxvYWRlZF9zaXplIHtudW1iZXJ9XHJcbiAgICAgICAgICogQHBhcmFtIGZpbGVfdXBsb2FkZWRfc2l6ZSB7bnVtYmVyfVxyXG4gICAgICAgICAqIEBwYXJhbSB0b3RhbF9zaXplIHtudW1iZXJ9XHJcbiAgICAgICAgICogQHBhcmFtIHByb2Nlc3NfcGVyY2VudCB7bnVtYmVyfG51bGx9XHJcbiAgICAgICAgICogQHBhcmFtIHNwZWVkIHtudW1iZXJ9XHJcbiAgICAgICAgICogQHBhcmFtIHJlbWFpbmluZ190aW1lIHtudW1iZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUge2NhbGxiYWNrX3VwZGF0ZV9wcm9ncmVzc31cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmNhbGxiYWNrX3VwZGF0ZV9wcm9ncmVzcyA9IG51bGw7XHJcblxyXG4gICAgICAgIHRoaXMub25fc3RvcCA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICAgICAgdGhpcy50cmFuc2Zlcl9zdGF0cyA9IG5ldyBUcmFuc2ZlclN0YXRzKCk7XHJcbiAgICAgICAgdGhpcy5pc19ydW5uaW5nID0gdHJ1ZTtcclxuICAgICAgICBpZiAodGhpcy5fY3VycmVudF9zdHJlYW0pIHtcclxuICAgICAgICAgICAgdGhpcy5fY3VycmVudF9zdHJlYW0uZ28oKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnRvdGFsX2NvbnRlbnRfc2l6ZSA9IHRoaXMuX2ZpbGVzeXN0ZW0ucm9vdC5jb250ZW50X3NpemU7XHJcbiAgICAgICAgICAgIHRoaXMudG90YWxfY29udGVudF9zZW50ID0gMDtcclxuICAgICAgICAgICAgdGhpcy50b3RhbF9maWxlX2NvdW50ID0gdGhpcy5fZmlsZXN5c3RlbS5yb290LmNvbnRlbnRfZmlsZXM7XHJcbiAgICAgICAgICAgIHRoaXMudG90YWxfZmlsZV9zZW50ID0gMDtcclxuICAgICAgICAgICAgdGhpcy50b3RhbF9maWxlX3NlbnQgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLl9uZXh0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIF9uZXh0KCkge1xyXG4gICAgICAgIGNvbnN0IHRoaXNfcmVmID0gdGhpcztcclxuICAgICAgICBjb25zdCBuZXdfZmlsZSA9IHRoaXMuX2ZpbGVzeXN0ZW0uZ2V0X3JhbmRvbV9maWxlKCk7XHJcbiAgICAgICAgaWYgKCFuZXdfZmlsZSlcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RvcCh0cnVlKTtcclxuICAgICAgICB0aGlzLl9jdXJyZW50X3N0cmVhbSA9IG5ldyBVcGxvYWRTdHJlYW0obmV3IENodW5rZWRGaWxlU3RyZWFtKG5ld19maWxlKSwgdGhpcy51cmwsXHJcbiAgICAgICAgICAgIChmaWxlLCBzZW50X2NodW5rcywgdG90YWxfY2h1bmtzLCBzZW50X2J5dGVzLCB0b3RhbF9ieXRlcywgcHJvY2Vzc19wZXJjZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpc19yZWYuY2FsbGJhY2tfdXBkYXRlX3Byb2dyZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc2Zlcl9zdGF0cy51cGRhdGUodGhpc19yZWYudG90YWxfY29udGVudF9zZW50ICsgc2VudF9ieXRlcywgdGhpc19yZWYudG90YWxfY29udGVudF9zaXplKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzX3JlZi5jYWxsYmFja191cGRhdGVfcHJvZ3Jlc3MoZmlsZS5uYW1lLCBmaWxlLnNpemUsIHRoaXNfcmVmLnRvdGFsX2ZpbGVfc2VudCwgdGhpc19yZWYudG90YWxfZmlsZV9jb3VudCwgdGhpc19yZWYudG90YWxfY29udGVudF9zZW50ICsgc2VudF9ieXRlcywgdGhpc19yZWYudG90YWxfY29udGVudF9zZW50ICsgZmlsZS5zaXplLCB0aGlzX3JlZi50b3RhbF9jb250ZW50X3NpemUsIHByb2Nlc3NfcGVyY2VudCwgdGhpcy50cmFuc2Zlcl9zdGF0cy5zcGVlZCgpLCB0aGlzLnRyYW5zZmVyX3N0YXRzLnJlbWFpbmluZygpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgKGZpbGUpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXNfcmVmLnRvdGFsX2ZpbGVfc2VudCArPSAxO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b3RhbF9jb250ZW50X3NlbnQgKz0gZmlsZS5zaXplO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZmlsZXN5c3RlbS5yZW1vdmVfZmlsZShmaWxlKTtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzX3JlZi5fY3VycmVudF9zdHJlYW07XHJcbiAgICAgICAgICAgICAgICB0aGlzX3JlZi5fbmV4dCgpO1xyXG4gICAgICAgICAgICB9LCAoZmlsZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpc19yZWYuc3RvcChmYWxzZSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgdGhpcy5fY3VycmVudF9zdHJlYW0uZ28oKTtcclxuICAgIH1cclxuXHJcbiAgICBwYXVzZSgpIHtcclxuICAgICAgICB0aGlzLmlzX3J1bm5pbmcgPSBmYWxzZTtcclxuICAgICAgICBpZiAodGhpcy5fY3VycmVudF9zdHJlYW0pXHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRfc3RyZWFtLmhvbGQoKTtcclxuICAgIH1cclxuXHJcbiAgICBzdG9wKGZpbmlzaGVkKSB7XHJcbiAgICAgICAgdGhpcy5wYXVzZSgpO1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLl9jdXJyZW50X3N0cmVhbTtcclxuICAgICAgICBpZiAodGhpcy5vbl9zdG9wKVxyXG4gICAgICAgICAgICB0aGlzLm9uX3N0b3AoZmluaXNoZWQpXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7RmlsZXN5c3RlbVVwbG9hZH0iLCJjb25zdCB7UEFHRV9DT05URVhULCBodW1hbkZpbGVTaXplfSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xyXG5jb25zdCB7TE9DQUxfVVNFUn0gPSByZXF1aXJlKFwiLi91c2VyXCIpO1xyXG5jb25zdCB7cGFyc2VfZmV0Y2hfcmVzdWx0fSA9IHJlcXVpcmUoXCIuLi8uLi9sYXlvdXQvd2lkZ2V0cy9jb21wb25lbnRzL21lc3NhZ2VfYm94XCIpO1xyXG5jb25zdCB7Q2xpZW50U3RyaW5nfSA9IHJlcXVpcmUoXCIuL2NsaWVudF9zdHJpbmdcIik7XHJcblxyXG5jbGFzcyBGaWxlc3lzdGVtT2JqZWN0IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBzZXJ2ZXJfZGF0YSB7T2JqZWN0fVxyXG4gICAgICogQHJldHVybiB7RmlsZXN5c3RlbU9iamVjdH1cclxuICAgICAqIEBjb25zdHJ1Y3RvclxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgRnJvbVNlcnZlckRhdGEoc2VydmVyX2RhdGEpIHtcclxuICAgICAgICBjb25zdCBPYmplY3QgPSBuZXcgRmlsZXN5c3RlbU9iamVjdCgpO1xyXG4gICAgICAgIE9iamVjdC5pZCA9IE51bWJlcihzZXJ2ZXJfZGF0YS5pZCk7XHJcbiAgICAgICAgT2JqZWN0LnJlcG9zID0gc2VydmVyX2RhdGEucmVwb3M7XHJcbiAgICAgICAgT2JqZWN0Lm93bmVyID0gc2VydmVyX2RhdGEub3duZXI7XHJcbiAgICAgICAgT2JqZWN0Lm5hbWUgPSBuZXcgQ2xpZW50U3RyaW5nKHNlcnZlcl9kYXRhLm5hbWUpO1xyXG4gICAgICAgIE9iamVjdC5pc19yZWd1bGFyX2ZpbGUgPSBzZXJ2ZXJfZGF0YS5pc19yZWd1bGFyX2ZpbGU7XHJcbiAgICAgICAgT2JqZWN0LmRlc2NyaXB0aW9uID0gc2VydmVyX2RhdGEuZGVzY3JpcHRpb24gPyBuZXcgQ2xpZW50U3RyaW5nKHNlcnZlcl9kYXRhLmRlc2NyaXB0aW9uKSA6IENsaWVudFN0cmluZy5Gcm9tQ2xpZW50KCcnKTtcclxuICAgICAgICBPYmplY3QucGFyZW50X2l0ZW0gPSBzZXJ2ZXJfZGF0YS5wYXJlbnRfaXRlbTtcclxuICAgICAgICBPYmplY3QuaXNfdHJhc2ggPSBzZXJ2ZXJfZGF0YS5pc190cmFzaDtcclxuICAgICAgICBPYmplY3QuYWJzb2x1dGVfcGF0aCA9IG5ldyBDbGllbnRTdHJpbmcoc2VydmVyX2RhdGEuYWJzb2x1dGVfcGF0aClcclxuICAgICAgICBpZiAoT2JqZWN0LmlzX3JlZ3VsYXJfZmlsZSkge1xyXG4gICAgICAgICAgICBPYmplY3Quc2l6ZSA9IE51bWJlcihzZXJ2ZXJfZGF0YS5zaXplKTtcclxuICAgICAgICAgICAgT2JqZWN0Lm1pbWV0eXBlID0gbmV3IENsaWVudFN0cmluZyhzZXJ2ZXJfZGF0YS5taW1ldHlwZSk7XHJcbiAgICAgICAgICAgIE9iamVjdC50aW1lc3RhbXAgPSBzZXJ2ZXJfZGF0YS50aW1lc3RhbXA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgT2JqZWN0Lm9wZW5fdXBsb2FkID0gc2VydmVyX2RhdGEub3Blbl91cGxvYWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gT2JqZWN0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIG9iamVjdF9pZCB7bnVtYmVyfVxyXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxGaWxlc3lzdGVtT2JqZWN0Pn1cclxuICAgICAqIEBjb25zdHJ1Y3RvclxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYXN5bmMgRmV0Y2hGcm9tU2VydmVyKG9iamVjdF9pZCkge1xyXG4gICAgICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgICAgICBmZXRjaChgJHtQQUdFX0NPTlRFWFQucmVwb3NfcGF0aCgpfS9jb250ZW50LyR7b2JqZWN0X2lkfWAsIHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAnY29udGVudC1hdXRodG9rZW4nOiBMT0NBTF9VU0VSLmdldF90b2tlbigpLFxyXG4gICAgICAgICAgICAgICAgICAgICdhY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oYXN5bmMgKHJlc3BvbnNlKSA9PiBhd2FpdCBwYXJzZV9mZXRjaF9yZXN1bHQocmVzcG9uc2UpKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKGpzb24pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRoaXMuRnJvbVNlcnZlckRhdGEoanNvbikpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUge251bWJlcnxudWxsfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuaWQgPSBudWxsO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfG51bGx9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5yZXBvcyA9IG51bGw7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ8bnVsbH1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLm93bmVyID0gbnVsbDtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUge0NsaWVudFN0cmluZ3xudWxsfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG51bGw7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufG51bGx9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5pc19yZWd1bGFyX2ZpbGUgPSBudWxsO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAdHlwZSB7Q2xpZW50U3RyaW5nfG51bGx9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IG51bGw7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ8bnVsbH1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnBhcmVudF9pdGVtID0gbnVsbDtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUge2Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5pc190cmFzaCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuc2l6ZSA9IDA7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtDbGllbnRTdHJpbmd8bnVsbH1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLm1pbWV0eXBlID0gbnVsbDtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUge251bWJlcnxudWxsfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMudGltZXN0YW1wID0gbnVsbDtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUge0ZpbGVzeXN0ZW19XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5maWxlc3lzdGVtID0gbnVsbDtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUge0NsaWVudFN0cmluZzxzdHJpbmc+fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuYWJzb2x1dGVfcGF0aCA9IG5ldyBDbGllbnRTdHJpbmcoKTtcclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgT2JqZWN0TGlzdGVuZXIge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGNhbGxiYWNrIGNhbGxiYWNrX29iamVjdF9hZGRlZFxyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gbmV3X2ZpbGVcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDYWxsZWQgd2hlbiB0aGUgdG90YWwgc2l6ZSBvciBvYmplY3QgY291bnQgb2YgdGhpcyBkaXJlY3RvcnkgaGF2ZSBiZWVuIHVwZGF0ZWRcclxuICAgICAgICAgKiBAdHlwZSB7Y2FsbGJhY2tfb2JqZWN0X2FkZGVkfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMub25fYWRkX29iamVjdCA9IG51bGw7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhbGxlZCB3aGVuIGFuIG9iamVjdCBoYXZlIGJlZW4gbW9kaWZpZWRcclxuICAgICAgICAgKiBAdHlwZSB7Y2FsbGJhY2tfb2JqZWN0X2FkZGVkfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMub25fdXBkYXRlX29iamVjdCA9IG51bGw7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhbGxlZCB3aGVuIGFuIG9iamVjdCBoYXZlIGJlZW4gcmVtb3ZlZFxyXG4gICAgICAgICAqIEB0eXBlIHtjYWxsYmFja19vYmplY3RfYWRkZWR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5vbl9yZW1vdmVfb2JqZWN0ID0gbnVsbDtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuX2lkID0gLTE7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtPYmplY3RJbnRlcm5hbE1ldGFkYXRhfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fcGFyZW50ID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBkZXN0cm95KCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9wYXJlbnQgJiYgdGhpcy5faWQpXHJcbiAgICAgICAgICAgIHRoaXMuX3BhcmVudC5saXN0ZW5lcnMuZGVsZXRlKHRoaXMuX2lkKTtcclxuICAgICAgICB0aGlzLl9wYXJlbnQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX2lkID0gLTE7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIE9iamVjdEludGVybmFsTWV0YWRhdGEge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUge1NldDxudW1iZXI+fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBuZXcgU2V0KCk7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtNYXA8bnVtYmVyLCBPYmplY3RMaXN0ZW5lcj59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMgPSBuZXcgTWFwKCk7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5jb250ZW50X3NpemUgPSAwO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuY29udGVudF9jb3VudCA9IDA7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIEZpbGVzeXN0ZW0ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gZmlsZXN5c3RlbV9uYW1lIHtDbGllbnRTdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGZpbGVzeXN0ZW1fbmFtZSkge1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAdHlwZSB7Q2xpZW50U3RyaW5nfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5ldyBDbGllbnRTdHJpbmcoZmlsZXN5c3RlbV9uYW1lKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUge01hcDxudW1iZXIsIEZpbGVzeXN0ZW1PYmplY3Q+fVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fY29udGVudCA9IG5ldyBNYXAoKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUge01hcDxudW1iZXIsIE9iamVjdEludGVybmFsTWV0YWRhdGE+fVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fb2JqZWN0X2ludGVybmFsX21ldGFkYXRhID0gbmV3IE1hcCgpO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAdHlwZSB7T2JqZWN0SW50ZXJuYWxNZXRhZGF0YX1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuX3Jvb3RfbWV0YV9kYXRhID0gbmV3IE9iamVjdEludGVybmFsTWV0YWRhdGEoKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUge1NldDxudW1iZXI+fVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fcm9vdHMgPSBuZXcgU2V0KCk7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fcm9vdF9kaXJ0eSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gb2JqZWN0IHtGaWxlc3lzdGVtT2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBhZGRfb2JqZWN0KG9iamVjdCkge1xyXG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KG9iamVjdC5pZCAhPSBudWxsKTtcclxuICAgICAgICBvYmplY3QuZmlsZXN5c3RlbSA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5fY29udGVudC5zZXQob2JqZWN0LmlkLCBvYmplY3QpO1xyXG4gICAgICAgIHRoaXMuX3Jvb3RzLmFkZChvYmplY3QuaWQpO1xyXG5cclxuICAgICAgICBsZXQgb2JqZWN0X21ldGFkYXRhID0gdGhpcy5fb2JqZWN0X2ludGVybmFsX21ldGFkYXRhLmdldChvYmplY3QuaWQpXHJcbiAgICAgICAgaWYgKCFvYmplY3RfbWV0YWRhdGEpIHtcclxuICAgICAgICAgICAgb2JqZWN0X21ldGFkYXRhID0gbmV3IE9iamVjdEludGVybmFsTWV0YWRhdGEoKTtcclxuICAgICAgICAgICAgdGhpcy5fb2JqZWN0X2ludGVybmFsX21ldGFkYXRhLnNldChvYmplY3QuaWQsIG9iamVjdF9tZXRhZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvYmplY3QuaXNfcmVndWxhcl9maWxlKSB7XHJcbiAgICAgICAgICAgIG9iamVjdF9tZXRhZGF0YS5jb250ZW50X2NvdW50ID0gMTtcclxuICAgICAgICAgICAgb2JqZWN0X21ldGFkYXRhLmNvbnRlbnRfc2l6ZSA9IG9iamVjdC5zaXplO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9iamVjdC5wYXJlbnRfaXRlbSkge1xyXG4gICAgICAgICAgICBsZXQgcGFyZW50X21ldGFkYXRhID0gdGhpcy5fb2JqZWN0X2ludGVybmFsX21ldGFkYXRhLmdldChvYmplY3QucGFyZW50X2l0ZW0pO1xyXG4gICAgICAgICAgICBpZiAoIXBhcmVudF9tZXRhZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50X21ldGFkYXRhID0gbmV3IE9iamVjdEludGVybmFsTWV0YWRhdGEoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29iamVjdF9pbnRlcm5hbF9tZXRhZGF0YS5zZXQob2JqZWN0LnBhcmVudF9pdGVtLCBwYXJlbnRfbWV0YWRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHBhcmVudF9tZXRhZGF0YS5jaGlsZHJlbi5hZGQob2JqZWN0LmlkKTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBbXywgbGlzdGVuZXJdIG9mIHBhcmVudF9tZXRhZGF0YS5saXN0ZW5lcnMpXHJcbiAgICAgICAgICAgICAgICBsaXN0ZW5lci5vbl9hZGRfb2JqZWN0KG9iamVjdC5pZCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fcm9vdF9tZXRhX2RhdGEuY2hpbGRyZW4uYWRkKG9iamVjdC5pZCk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgW18sIGxpc3RlbmVyXSBvZiB0aGlzLl9yb290X21ldGFfZGF0YS5saXN0ZW5lcnMpXHJcbiAgICAgICAgICAgICAgICBsaXN0ZW5lci5vbl9hZGRfb2JqZWN0KG9iamVjdC5pZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBVcGRhdGUgcGFyZW50IHNpemVzIHJlY3Vyc2l2ZWx5XHJcbiAgICAgICAgbGV0IHBhcmVudF9vYmplY3QgPSBvYmplY3Q7XHJcbiAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICBjb25zdCBwYXJlbnRfaWQgPSBwYXJlbnRfb2JqZWN0LnBhcmVudF9pdGVtO1xyXG4gICAgICAgICAgICBpZiAocGFyZW50X2lkKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRfb2JqZWN0X21ldGFkYXRhID0gdGhpcy5fb2JqZWN0X2ludGVybmFsX21ldGFkYXRhLmdldChwYXJlbnRfaWQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudF9vYmplY3RfbWV0YWRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnRfb2JqZWN0X21ldGFkYXRhLmNvbnRlbnRfY291bnQgKz0gb2JqZWN0X21ldGFkYXRhLmNvbnRlbnRfY291bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50X29iamVjdF9tZXRhZGF0YS5jb250ZW50X3NpemUgKz0gb2JqZWN0X21ldGFkYXRhLmNvbnRlbnRfc2l6ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHBhcmVudF9vYmplY3QgPSBvYmplY3QucGFyZW50X2l0ZW0gPyB0aGlzLl9jb250ZW50LmdldChwYXJlbnRfb2JqZWN0LnBhcmVudF9pdGVtKSA6IG51bGw7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwYXJlbnRfb2JqZWN0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3RfbWV0YV9kYXRhLmNvbnRlbnRfY291bnQgKz0gb2JqZWN0X21ldGFkYXRhLmNvbnRlbnRfY291bnQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yb290X21ldGFfZGF0YS5jb250ZW50X3NpemUgKz0gb2JqZWN0X21ldGFkYXRhLmNvbnRlbnRfc2l6ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gd2hpbGUgKHBhcmVudF9vYmplY3QpO1xyXG5cclxuICAgICAgICB0aGlzLl9yb290X2RpcnR5ID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBvYmplY3RfaWQge251bWJlcn1cclxuICAgICAqIEBwYXJhbSBvbmx5X2RlcmVmZXJlbmNlIHtib29sZWFufSBEb24ndCBkZWxldGUgY2hpbGRyZW4gaWYgc2V0IHRvIHRydWVcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlX29iamVjdChvYmplY3RfaWQsIG9ubHlfZGVyZWZlcmVuY2UgPSBmYWxzZSkge1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLl9jb250ZW50LmdldChvYmplY3RfaWQpO1xyXG4gICAgICAgIGlmIChkYXRhKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5fb2JqZWN0X2ludGVybmFsX21ldGFkYXRhLmdldChvYmplY3RfaWQpO1xyXG4gICAgICAgICAgICBpZiAobWV0YWRhdGEgJiYgIW9ubHlfZGVyZWZlcmVuY2UpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgbWV0YWRhdGEuY2hpbGRyZW4pXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVfb2JqZWN0KGNoaWxkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBwYXJlbnRfbWV0YWRhdGEgPSBkYXRhLnBhcmVudF9pdGVtID8gdGhpcy5fb2JqZWN0X2ludGVybmFsX21ldGFkYXRhLmdldChkYXRhLnBhcmVudF9pdGVtKSA6IHRoaXMuX3Jvb3RfbWV0YV9kYXRhO1xyXG4gICAgICAgICAgICBpZiAocGFyZW50X21ldGFkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJlbnRfbWV0YWRhdGEuY2hpbGRyZW4uZGVsZXRlKG9iamVjdF9pZClcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2lkLCBsaXN0ZW5lcl0gb2YgcGFyZW50X21ldGFkYXRhLmxpc3RlbmVycylcclxuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lci5vbl9yZW1vdmVfb2JqZWN0KG9iamVjdF9pZClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFvbmx5X2RlcmVmZXJlbmNlKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fb2JqZWN0X2ludGVybmFsX21ldGFkYXRhLmRlbGV0ZShvYmplY3RfaWQpO1xyXG4gICAgICAgICAgICB0aGlzLl9jb250ZW50LmRlbGV0ZShvYmplY3RfaWQpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fcm9vdHMuaGFzKG9iamVjdF9pZCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3RzLmRlbGV0ZShvYmplY3RfaWQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcm9vdF9kaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHtTZXQ8bnVtYmVyPn1cclxuICAgICAqL1xyXG4gICAgZ2V0X3Jvb3RzKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9yb290X2RpcnR5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Jvb3RzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgW18sIG9iamVjdF0gb2YgdGhpcy5fY29udGVudClcclxuICAgICAgICAgICAgICAgIGlmICghb2JqZWN0LnBhcmVudF9pdGVtIHx8ICF0aGlzLl9jb250ZW50LmhhcyhvYmplY3QucGFyZW50X2l0ZW0pKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3RzLmFkZChvYmplY3QuaWQpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9yb290c1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGZpbGVfaWQge251bWJlcn1cclxuICAgICAqIEByZXR1cm4ge0ZpbGVzeXN0ZW1PYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGdldF9vYmplY3RfZGF0YShmaWxlX2lkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQuZ2V0KGZpbGVfaWQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGNhbGxiYWNrIGNhbGxiYWNrX3NvcnRlclxyXG4gICAgICogQHBhcmFtIHtGaWxlc3lzdGVtT2JqZWN0fSBhXHJcbiAgICAgKiBAcGFyYW0ge0ZpbGVzeXN0ZW1PYmplY3R9IGJcclxuICAgICAqL1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHBhcmVudF9pZCB7bnVtYmVyfG51bGx9XHJcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJbXX1cclxuICAgICAqL1xyXG4gICAgZ2V0X29iamVjdHNfaW5fZGlyZWN0b3J5KHBhcmVudF9pZCkge1xyXG4gICAgICAgIGxldCBvYmplY3RzID0gbmV3IFNldCgpO1xyXG4gICAgICAgIGlmICghcGFyZW50X2lkKSB7XHJcbiAgICAgICAgICAgIG9iamVjdHMgPSB0aGlzLmdldF9yb290cygpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5fb2JqZWN0X2ludGVybmFsX21ldGFkYXRhLmdldChwYXJlbnRfaWQpO1xyXG4gICAgICAgICAgICBpZiAobWV0YWRhdGEpXHJcbiAgICAgICAgICAgICAgICBvYmplY3RzID0gbWV0YWRhdGEuY2hpbGRyZW47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKG9iamVjdHMpXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gcGFyZW50X2lkIHtudW1iZXJ8bnVsbH1cclxuICAgICAqIEByZXR1cm4ge251bWJlcltdfVxyXG4gICAgICovXHJcbiAgICBnZXRfb2JqZWN0c19pbl9kaXJlY3RvcnlfcmVjdXJzaXZlKHBhcmVudF9pZCkge1xyXG4gICAgICAgIGxldCBvYmplY3RzID0gbmV3IFNldCgpO1xyXG4gICAgICAgIGlmICghcGFyZW50X2lkKSB7XHJcbiAgICAgICAgICAgIG9iamVjdHMgPSB0aGlzLl9jb250ZW50LmtleXMoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuZ2V0X29iamVjdF9kYXRhKHBhcmVudF9pZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIW1ldGFkYXRhIHx8IG1ldGFkYXRhLmlzX3JlZ3VsYXJfZmlsZSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBbaWQsIGRhdGFdIG9mIHRoaXMuX2NvbnRlbnQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRhLmFic29sdXRlX3BhdGgucGxhaW4oKS5zdGFydHNXaXRoKG1ldGFkYXRhLmFic29sdXRlX3BhdGgucGxhaW4oKSkpXHJcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0cy5hZGQoaWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKG9iamVjdHMpXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gcGF0aCB7c3RyaW5nfVxyXG4gICAgICogQHJldHVybiB7bnVsbHxudW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIGdldF9vYmplY3RfZnJvbV9wYXRoKHBhdGgpIHtcclxuICAgICAgICBwYXRoID0gcGF0aC50cmltKCk7XHJcbiAgICAgICAgaWYgKHBhdGguc3RhcnRzV2l0aCgnLycpKVxyXG4gICAgICAgICAgICBwYXRoID0gcGF0aC5zdWJzdHJpbmcoMSk7XHJcblxyXG4gICAgICAgIGlmIChwYXRoLmVuZHNXaXRoKCcvJykpXHJcbiAgICAgICAgICAgIHBhdGggPSBwYXRoLnN1YnN0cmluZygwLCBwYXRoLmxlbmd0aCAtIDEpO1xyXG4gICAgICAgIGxldCBmaWxlID0gbnVsbDtcclxuICAgICAgICBjb25zdCBwYXRoX25hbWUgPSBwYXRoLnNwbGl0KFwiL1wiKTtcclxuICAgICAgICBpZiAocGF0aF9uYW1lLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgcGF0aF9uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbWV0YWRhdGEgPSBmaWxlID8gdGhpcy5fb2JqZWN0X2ludGVybmFsX21ldGFkYXRhLmdldChmaWxlKSA6IHRoaXMuX3Jvb3RfbWV0YV9kYXRhO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghbWV0YWRhdGEpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBtZXRhZGF0YS5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkX29iamVjdCA9IHRoaXMuX2NvbnRlbnQuZ2V0KGNoaWxkKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZF9vYmplY3QpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZF9vYmplY3QubmFtZS5wbGFpbigpID09PSBuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlID0gY2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmaWxlO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyKCkge1xyXG4gICAgICAgIHRoaXMuX3Jvb3RzLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5fY29udGVudC5jbGVhcigpO1xyXG4gICAgICAgIHRoaXMuX29iamVjdF9pbnRlcm5hbF9tZXRhZGF0YS5jbGVhcigpO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZV9saXN0ZW5lcihvYmplY3RfaWQpIHtcclxuICAgICAgICBjb25zdCBtZXRhZGF0YSA9IG9iamVjdF9pZCA/IHRoaXMuX29iamVjdF9pbnRlcm5hbF9tZXRhZGF0YS5nZXQob2JqZWN0X2lkKSA6IHRoaXMuX3Jvb3RfbWV0YV9kYXRhO1xyXG4gICAgICAgIGlmIChtZXRhZGF0YSkge1xyXG4gICAgICAgICAgICBsZXQgaWQgPSBudWxsO1xyXG4gICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICBpZCA9IE1hdGgucmFuZG9tKClcclxuICAgICAgICAgICAgfSB3aGlsZSAobWV0YWRhdGEubGlzdGVuZXJzLmhhcyhpZCkpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgbGlzdGVuZXIgPSBuZXcgT2JqZWN0TGlzdGVuZXIoKVxyXG4gICAgICAgICAgICBsaXN0ZW5lci5faWQgPSBpZDtcclxuICAgICAgICAgICAgbGlzdGVuZXIuX3BhcmVudCA9IG1ldGFkYXRhO1xyXG4gICAgICAgICAgICBtZXRhZGF0YS5saXN0ZW5lcnMuc2V0KGlkLCBsaXN0ZW5lcik7XHJcbiAgICAgICAgICAgIHJldHVybiBsaXN0ZW5lcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gb2JqZWN0IHtudW1iZXJ9XHJcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJbXX1cclxuICAgICAqL1xyXG4gICAgbWFrZV9wYXRoX3RvX29iamVjdChvYmplY3QpIHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcclxuICAgICAgICBsZXQgZGF0YSA9IHRoaXMuZ2V0X29iamVjdF9kYXRhKG9iamVjdCk7XHJcbiAgICAgICAgd2hpbGUgKGRhdGEpIHtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2gob2JqZWN0KTtcclxuICAgICAgICAgICAgb2JqZWN0ID0gZGF0YS5wYXJlbnRfaXRlbTtcclxuICAgICAgICAgICAgZGF0YSA9IHRoaXMuZ2V0X29iamVjdF9kYXRhKG9iamVjdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQucmV2ZXJzZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIG9iamVjdCB7bnVtYmVyfVxyXG4gICAgICogQHJldHVybiB7bnVtYmVyfVxyXG4gICAgICovXHJcbiAgICBtYWtlX3N0cmluZ19wYXRoX3RvX29iamVjdChvYmplY3QpIHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gXCIvXCI7XHJcbiAgICAgICAgbGV0IGRhdGEgPSB0aGlzLmdldF9vYmplY3RfZGF0YShvYmplY3QpO1xyXG4gICAgICAgIHdoaWxlIChkYXRhKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IFwiL1wiICsgZGF0YS5uYW1lICsgcmVzdWx0O1xyXG4gICAgICAgICAgICBvYmplY3QgPSBkYXRhLnBhcmVudF9pdGVtO1xyXG4gICAgICAgICAgICBkYXRhID0gdGhpcy5nZXRfb2JqZWN0X2RhdGEob2JqZWN0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBvYmplY3Qge251bWJlcn1cclxuICAgICAqIEByZXR1cm4ge3tzaXplOiBudWxsLCBjb3VudDogbnVsbH18e3NpemU6IG51bWJlciwgY291bnQ6IG51bWJlcn19XHJcbiAgICAgKi9cclxuICAgIGdldF9vYmplY3RfY29udGVudF9zdGF0cyhvYmplY3QpIHtcclxuICAgICAgICBjb25zdCBtZXRhZGF0YSA9IG9iamVjdCA/IHRoaXMuX29iamVjdF9pbnRlcm5hbF9tZXRhZGF0YS5nZXQob2JqZWN0KSA6IHRoaXMuX3Jvb3RfbWV0YV9kYXRhO1xyXG4gICAgICAgIGlmIChtZXRhZGF0YSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge2NvdW50OiBtZXRhZGF0YS5jb250ZW50X2NvdW50LCBzaXplOiBtZXRhZGF0YS5jb250ZW50X3NpemV9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7Y291bnQ6IG51bGwsIHNpemU6IG51bGx9O1xyXG4gICAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtGaWxlc3lzdGVtLCBGaWxlc3lzdGVtT2JqZWN0LCBPYmplY3RMaXN0ZW5lcn0iLCJpbXBvcnQge2dldF9taW1lX2ljb25fcGF0aH0gZnJvbSBcIi4vbWltZV91dGlsc1wiO1xyXG5pbXBvcnQge1BBR0VfQ09OVEVYVH0gZnJvbSBcIi4vdXRpbHNcIjtcclxuXHJcbmZ1bmN0aW9uIGZyb21fZGlzdGFudF9yZXBvcyhpdGVtKSB7XHJcbiAgICBjb25zdCBtaW1lID0gaXRlbS5taW1ldHlwZS5wbGFpbigpLnNwbGl0KCcvJyk7XHJcbiAgICBzd2l0Y2ggKG1pbWVbMF0pIHtcclxuICAgICAgICBjYXNlICd2aWRlbyc6XHJcbiAgICAgICAgICAgIHJldHVybiBgPGRpdiBjbGFzcz1cIml0ZW0tc21hbGxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9XCJpdGVtLWJhY2tncm91bmRcIiBzcmM9XCIke1BBR0VfQ09OVEVYVC5yZXBvc19wYXRoKCl9L3RodW1ibmFpbC8ke2l0ZW0uaWR9XCIgYWx0PVwiZmljaGllcjogJyR7aXRlbS5uYW1lfVwiIG9uRXJyb3I9XCJ0aGlzLm9uRXJyb3IgPSBudWxsOyB0aGlzLnNyYz0nL2ltYWdlcy9pY29ucy9taW1lLWljb25zL3ZpZGVvLnBuZydcIi8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPVwiaXRlbS1vdmVybGF5XCIgc3JjPVwiL2ltYWdlcy9pY29ucy9pY29uczgtcGxheS02NC5wbmdcIiBhbHQ9XCJwbGF5IGJ1dHRvblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5gXHJcbiAgICAgICAgY2FzZSAnaW1hZ2UnOlxyXG4gICAgICAgICAgICByZXR1cm4gYDxpbWcgY2xhc3M9XCJpdGVtLXNtYWxsXCIgc3JjPVwiJHtQQUdFX0NPTlRFWFQucmVwb3NfcGF0aCgpfS90aHVtYm5haWwvJHtpdGVtLmlkfVwiIGFsdD1cImZpY2hpZXI6ICR7aXRlbS5uYW1lfVwiIG9uRXJyb3I9XCJ0aGlzLm9uRXJyb3IgPSBudWxsOyB0aGlzLnNyYz0nL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2ltYWdlLnBuZydcIi8+YFxyXG4gICAgICAgIGNhc2UgJ2FwcGxpY2F0aW9uJzpcclxuICAgICAgICAgICAgc3dpdGNoIChtaW1lWzFdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd4LXBkZic6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdwZGYnOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgPGltZyBjbGFzcz1cIml0ZW0tc21hbGxcIiBzcmM9XCIke1BBR0VfQ09OVEVYVC5yZXBvc19wYXRoKCl9L3RodW1ibmFpbC8ke2l0ZW0uaWR9XCIgYWx0PVwiZmljaGllcjogJHtpdGVtLm5hbWV9XCIgb25FcnJvcj1cInRoaXMub25FcnJvciA9IG51bGw7IHRoaXMuc3JjPScvaW1hZ2VzL2ljb25zL21pbWUtaWNvbnMvaW1hZ2UucG5nJ1wiLz5gXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGA8aW1nIGNsYXNzPVwiaXRlbS1zbWFsbFwiIHNyYz1cIiR7Z2V0X21pbWVfaWNvbl9wYXRoKGl0ZW0ubWltZXR5cGUpfVwiIGFsdD1cImRvY3VtZW50OiAke2l0ZW0ubmFtZX1cIi8+YDtcclxufVxyXG5cclxuZnVuY3Rpb24gZnJvbV9sb2NhbF9wYXRoKGl0ZW0pIHtcclxuICAgIHN3aXRjaCAoaXRlbS5taW1ldHlwZS5wbGFpbigpLnNwbGl0KCcvJylbMF0pIHtcclxuICAgICAgICBjYXNlICdpbWFnZSc6XHJcbiAgICAgICAgICAgIHJldHVybiBgPGltZyBjbGFzcz1cIml0ZW0tc21hbGxcIiBzcmM9XCIke1VSTC5jcmVhdGVPYmplY3RVUkwoaXRlbSl9XCIgYWx0PVwiaW1hZ2U6ICR7aXRlbS5uYW1lfVwiIG9uRXJyb3I9XCJ0aGlzLm9uRXJyb3IgPSBudWxsOyB0aGlzLnNyYz0nL2ltYWdlcy9pY29ucy9taW1lLWljb25zL2ltYWdlLnBuZydcIi8+YFxyXG4gICAgICAgIGNhc2UgJ3ZpZGVvJzpcclxuICAgICAgICAgICAgcmV0dXJuIGA8dmlkZW8gY2xhc3M9XCJpdGVtLXNtYWxsXCIgcHJlbG9hZD1cImF1dG9cIiBkYXRhLXNldHVwPVwie31cIiBwcmVsb2FkPVwiYXV0b1wiIGhlaWdodD1cIjEwMCVcIiB3aWR0aD1cIjEwMCVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNvdXJjZSBzcmM9XCIke1VSTC5jcmVhdGVPYmplY3RVUkwoaXRlbSl9XCIgdHlwZT1cIiR7aXRlbS5taW1ldHlwZX1cIj5cclxuICAgICAgICAgICAgICAgICAgICA8L3ZpZGVvPmBcclxuICAgIH1cclxuICAgIHJldHVybiBgPGltZyBjbGFzcz1cIml0ZW0tc21hbGxcIiBzcmM9XCIke2dldF9taW1lX2ljb25fcGF0aChpdGVtLm1pbWV0eXBlKX1cIiBhbHQ9XCJkb2N1bWVudDogJHtpdGVtLm5hbWV9XCIvPmA7XHJcbn1cclxuXHJcblxyXG5leHBvcnQge2Zyb21fZGlzdGFudF9yZXBvcywgZnJvbV9sb2NhbF9wYXRofSIsImNvbnN0IEhhbmRsZWJhcnMgPSByZXF1aXJlKCdoYW5kbGViYXJzJyk7XHJcblxyXG4vKipcclxuICogQHBhcmFtIG1pbWV0eXBlIHtDbGllbnRTdHJpbmd9XHJcbiAqIEByZXR1cm4ge3N0cmluZ31cclxuICovXHJcbmZ1bmN0aW9uIGdldF9taW1lX2FsaWFzKG1pbWV0eXBlKSB7XHJcbiAgICBzd2l0Y2ggKG1pbWV0eXBlLnBsYWluKCkpIHtcclxuICAgICAgICBjYXNlICdhcHBsaWNhdGlvbi94LXppcCc6XHJcbiAgICAgICAgY2FzZSAnYXBwbGljYXRpb24veC16aXAtY29tcHJlc3NlZCc6XHJcbiAgICAgICAgICAgIHJldHVybiAnYXBwbGljYXRpb24vemlwJztcclxuICAgICAgICBjYXNlICdhcHBsaWNhdGlvbi94LWphdmFzY3JpcHQnOlxyXG4gICAgICAgICAgICByZXR1cm4gJ2FwcGxpY2F0aW9uL2phdmFzY3JpcHQnO1xyXG4gICAgICAgIGNhc2UgJ3RleHQvamFkZSc6XHJcbiAgICAgICAgY2FzZSAndGV4dC9wdWcnOlxyXG4gICAgICAgICAgICByZXR1cm4gJ3RleHQvdGVtcGxhdGUnO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG1pbWV0eXBlLnBsYWluKCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gbWltZXR5cGUge0NsaWVudFN0cmluZ31cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbmZ1bmN0aW9uIGlzX21pbWV0eXBlX3ZhbGlkKG1pbWV0eXBlKSB7XHJcbiAgICBpZiAoIW1pbWV0eXBlKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICBzd2l0Y2ggKG1pbWV0eXBlLnBsYWluKCkpIHtcclxuICAgICAgICBjYXNlICcnOlxyXG4gICAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XHJcbiAgICAgICAgY2FzZSAnbnVsbCc6XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSBtaW1ldHlwZSB7Q2xpZW50U3RyaW5nfVxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRfbWltZV9pY29uX3BhdGgobWltZXR5cGUpIHtcclxuICAgIGlmICghaXNfbWltZXR5cGVfdmFsaWQobWltZXR5cGUpKVxyXG4gICAgICAgIHJldHVybiAnL2ltYWdlcy9pY29ucy9uby1taW1lLWljb24ucG5nJztcclxuXHJcbiAgICBjb25zdCBbbWltZV9sZWZ0LCBtaW1lX3JpZ2h0XSA9IGdldF9taW1lX2FsaWFzKG1pbWV0eXBlKS5zcGxpdCgnLycpO1xyXG5cclxuICAgIGNvbnN0IG1pbWVfaWNvbnMgPSBIYW5kbGViYXJzLmdldF9taW1lX2ljb25zKCk7XHJcbiAgICBjb25zdCBtaW1lX2NhdGVnb3J5ID0gbWltZV9pY29uc1ttaW1lX2xlZnRdO1xyXG4gICAgaWYgKCFtaW1lX2NhdGVnb3J5KVxyXG4gICAgICAgIHJldHVybiAnL2ltYWdlcy9pY29ucy9uby1taW1lLWljb24ucG5nJztcclxuXHJcbiAgICBpZiAobWltZV9jYXRlZ29yeS5jb250ZW50KSB7XHJcbiAgICAgICAgY29uc3QgbWltZV90eXBlID0gbWltZV9jYXRlZ29yeS5jb250ZW50W21pbWVfcmlnaHRdO1xyXG4gICAgICAgIGlmICghbWltZV90eXBlKVxyXG4gICAgICAgICAgICByZXR1cm4gbWltZV9jYXRlZ29yeS5iYXNlO1xyXG4gICAgICAgIHJldHVybiBtaW1lX3R5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG1pbWVfY2F0ZWdvcnkuYmFzZTtcclxufVxyXG5cclxuY29uc3QgVU5ERUZJTkVEX01JTUVfU1RSSU5HID0gYDxpbWcgY2xhc3M9XCJpdGVtLXNtYWxsXCIgc3JjPVwiL2ltYWdlcy9pY29ucy9uby1taW1lLWljb24ucG5nXCIgYWx0PVwidW5kZWZpbmVkLXR5cGVcIi8+YDtcclxuXHJcbmV4cG9ydCB7Z2V0X21pbWVfaWNvbl9wYXRoLCBpc19taW1ldHlwZV92YWxpZCwgVU5ERUZJTkVEX01JTUVfU1RSSU5HfSIsImltcG9ydCB7UEFHRV9DT05URVhUfSBmcm9tIFwiLi91dGlsc1wiO1xyXG5pbXBvcnQge3BhcnNlX2ZldGNoX3Jlc3VsdH0gZnJvbSBcIi4uLy4uL2xheW91dC93aWRnZXRzL2NvbXBvbmVudHMvbWVzc2FnZV9ib3hcIjtcclxuaW1wb3J0IHtzcGF3bl9pdGVtX2NvbnRleHRfYWN0aW9ufSBmcm9tIFwiLi4vLi4vbGF5b3V0L3dpZGdldHMvdmlld3BvcnQvaXRlbV9jb250ZXh0X2FjdGlvblwiO1xyXG5cclxuY2xhc3MgTmF2aWdhdG9yIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHJlcG9zX2J1aWxkZXIge1JlcG9zQnVpbGRlcn1cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocmVwb3NfYnVpbGRlcikge1xyXG4gICAgICAgIHRoaXMubGFzdF9ob3Zlcl9pdGVtID0gbnVsbDtcclxuICAgICAgICB0aGlzLmhvdmVyX2l0ZW1fY2FsbGJhY2tzID0gW107XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtTZXQ8bnVtYmVyPn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnNlbGVjdGVkX2l0ZW1zID0gbmV3IFNldCgpO1xyXG4gICAgICAgIHRoaXMubGFzdF9zZWxlY3RlZF9pdGVtID0gbnVsbDtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkX2l0ZW1fY2FsbGJhY2tzID0gW107XHJcblxyXG4gICAgICAgIHRoaXMuY3VycmVudF9kaXJlY3RvcnkgPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBjYWxsYmFjayBjYWxsYmFja19kaXJlY3RvcnlfY2hhbmdlZFxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuZXdfaXRlbVxyXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNfc2VsZWN0ZWRcclxuICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUge2NhbGxiYWNrX2RpcmVjdG9yeV9jaGFuZ2VkW119XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5jaGFuZ2VkX2Rpcl9jYWxsYmFja3MgPSBbXTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUge0ZpbGVzeXN0ZW19XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5maWxlc3lzdGVtID0gcmVwb3NfYnVpbGRlci5maWxlc3lzdGVtO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAdHlwZSB7UmVwb3NCdWlsZGVyfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMucmVwb3NfYnVpbGRlciA9IHJlcG9zX2J1aWxkZXI7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0X2hvdmVyX2l0ZW0oaXRlbSkge1xyXG4gICAgICAgIGlmIChpdGVtICE9PSB0aGlzLmxhc3RfaG92ZXJfaXRlbSkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNhbGxiYWNrIG9mIHRoaXMuaG92ZXJfaXRlbV9jYWxsYmFja3MpIGNhbGxiYWNrKGl0ZW0sIHRoaXMubGFzdF9ob3Zlcl9pdGVtKVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmxhc3RfaG92ZXJfaXRlbSA9IGl0ZW07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0X2hvdmVyX2l0ZW0oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGFzdF9ob3Zlcl9pdGVtO1xyXG4gICAgfVxyXG5cclxuICAgIG9uX2hvdmVyX2l0ZW0oY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLmhvdmVyX2l0ZW1fY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spXHJcbiAgICB9XHJcblxyXG4gICAgZW50ZXJfdG91Y2hfc2VsZWN0aW9uX21vZGUoZW50ZXIgPSB0cnVlKSB7XHJcbiAgICAgICAgdGhpcy5pc190b3VjaF9zZWxlY3Rpb25fbW9kZSA9IGVudGVyO1xyXG4gICAgICAgIGlmIChlbnRlcikge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9iaWxlLXNlbGVjdGlvbi1oZWFkZXInKS5jbGFzc0xpc3QuYWRkKCdtb2JpbGUtc2VsZWN0aW9uLW1vZGUnKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vYmlsZS1zZWxlY3Rpb24tY2xvc2UtYnV0dG9uJykub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZW50ZXJfdG91Y2hfc2VsZWN0aW9uX21vZGUoZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGFjdGlvbl9kaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9iaWxlLXNlbGVjdGlvbi1hY3Rpb24tYnV0dG9ucycpO1xyXG4gICAgICAgICAgICBhY3Rpb25fZGl2LmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgICAgICBjb25zdCBjdXRfYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1dF9pbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xyXG4gICAgICAgICAgICBjdXRfaW1hZ2Uuc3JjID0gJy9pbWFnZXMvaWNvbnMvaWNvbnM4LWN1dC00OC5wbmcnXHJcbiAgICAgICAgICAgIGN1dF9idXR0b24uYXBwZW5kKGN1dF9pbWFnZSlcclxuICAgICAgICAgICAgY3V0X2J1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXRfc2VsZWN0aW9uKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjdXRfYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3BsdXMtYnV0dG9uJylcclxuICAgICAgICAgICAgYWN0aW9uX2Rpdi5hcHBlbmQoY3V0X2J1dHRvbik7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBtb3JlX2J1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG4gICAgICAgICAgICBjb25zdCByZW1vdmVfaW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcclxuICAgICAgICAgICAgcmVtb3ZlX2ltYWdlLnNyYyA9ICcvaW1hZ2VzL2ljb25zL2ljb25zOC1lbGxpcHNpcy05MC5wbmcnXHJcbiAgICAgICAgICAgIG1vcmVfYnV0dG9uLmFwcGVuZChyZW1vdmVfaW1hZ2UpXHJcbiAgICAgICAgICAgIG1vcmVfYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ21vcmUtYnV0dG9uJylcclxuICAgICAgICAgICAgbW9yZV9idXR0b24ub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHNwYXduX2l0ZW1fY29udGV4dF9hY3Rpb24odGhpcy5sYXN0X3NlbGVjdGVkX2l0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFjdGlvbl9kaXYuYXBwZW5kKG1vcmVfYnV0dG9uKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5pc190b3VjaF9zZWxlY3Rpb25fbW9kZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9iaWxlLXNlbGVjdGlvbi1oZWFkZXInKS5jbGFzc0xpc3QucmVtb3ZlKCdtb2JpbGUtc2VsZWN0aW9uLW1vZGUnKTtcclxuICAgICAgICAgICAgdGhpcy5jbGVhcl9zZWxlY3Rpb24oKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gaXRlbSB7bnVtYmVyfVxyXG4gICAgICogQHBhcmFtIHNoaWZ0X2tleSB7Ym9vbGVhbn1cclxuICAgICAqIEBwYXJhbSBjdHJsX2tleSB7Ym9vbGVhbn1cclxuICAgICAqIEBwYXJhbSBmb3JjZV9zZWxlY3Qge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIHNlbGVjdF9pdGVtKGl0ZW0sIHNoaWZ0X2tleSwgY3RybF9rZXksIGZvcmNlX3NlbGVjdCA9IGZhbHNlKSB7XHJcbiAgICAgICAgaWYgKHNoaWZ0X2tleSkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMubGFzdF9zZWxlY3RlZF9pdGVtKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0X3NlbGVjdGVkX2l0ZW0gPSBpdGVtO1xyXG4gICAgICAgICAgICBjb25zdCBkaXJfY29udGVudCA9IHRoaXMucmVwb3NfYnVpbGRlci5kaXJlY3RvcnlfY29udGVudDtcclxuICAgICAgICAgICAgbGV0IHN0YXJ0X2luZGV4ID0gMDtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBpIGluIGRpcl9jb250ZW50Lm9iamVjdHMpXHJcbiAgICAgICAgICAgICAgICBpZiAoZGlyX2NvbnRlbnQub2JqZWN0c1tpXS5pZCA9PT0gaXRlbSlcclxuICAgICAgICAgICAgICAgICAgICBzdGFydF9pbmRleCA9IE51bWJlcihpKTtcclxuICAgICAgICAgICAgbGV0IGVuZF9pbmRleCA9IDA7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaSBpbiBkaXJfY29udGVudC5vYmplY3RzKVxyXG4gICAgICAgICAgICAgICAgaWYgKGRpcl9jb250ZW50Lm9iamVjdHNbaV0uaWQgPT09IHRoaXMubGFzdF9zZWxlY3RlZF9pdGVtKVxyXG4gICAgICAgICAgICAgICAgICAgIGVuZF9pbmRleCA9IE51bWJlcihpKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFN3YXAgaWYgbmVlZGVkXHJcbiAgICAgICAgICAgIGlmIChzdGFydF9pbmRleCA+IGVuZF9pbmRleClcclxuICAgICAgICAgICAgICAgIFtzdGFydF9pbmRleCwgZW5kX2luZGV4XSA9IFtlbmRfaW5kZXgsIHN0YXJ0X2luZGV4XTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zX3RvX2tlZXBfc2VsZWN0ZWQgPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBzdGFydF9pbmRleDsgaSA8PSBlbmRfaW5kZXg7ICsraSlcclxuICAgICAgICAgICAgICAgIGl0ZW1zX3RvX2tlZXBfc2VsZWN0ZWQuYWRkKGRpcl9jb250ZW50Lm9iamVjdHNbaV0uaWQpXHJcblxyXG4gICAgICAgICAgICBpZiAoIWN0cmxfa2V5ICYmICFmb3JjZV9zZWxlY3QpXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNlbGVjdGVkIG9mIHRoaXMuc2VsZWN0ZWRfaXRlbXMpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpdGVtc190b19rZWVwX3NlbGVjdGVkLmhhcyhzZWxlY3RlZCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdF9pdGVtX2ludGVybmFsKHNlbGVjdGVkLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXNfdG9fa2VlcF9zZWxlY3RlZClcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdF9pdGVtX2ludGVybmFsKGl0ZW0sIHRydWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubGFzdF9zZWxlY3RlZF9pdGVtID0gaXRlbTtcclxuICAgICAgICAgICAgaWYgKGN0cmxfa2V5IHx8IHRoaXMuaXNfdG91Y2hfc2VsZWN0aW9uX21vZGUgfHwgKGZvcmNlX3NlbGVjdCAmJiB0aGlzLnNlbGVjdGVkX2l0ZW1zLmhhcyhpdGVtKSkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkX2l0ZW1zLmhhcyhpdGVtKSlcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWxlY3RfaXRlbV9pbnRlcm5hbChpdGVtLCBmb3JjZV9zZWxlY3QpO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdF9pdGVtX2ludGVybmFsKGl0ZW0sIHRydWUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtIG9mIHRoaXMuc2VsZWN0ZWRfaXRlbXMpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW0gIT09IGl0ZW0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdF9pdGVtX2ludGVybmFsKGVsZW0sIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkX2l0ZW1zLmhhcyhpdGVtKSlcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWxlY3RfaXRlbV9pbnRlcm5hbChpdGVtLCBmb3JjZV9zZWxlY3QpO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdF9pdGVtX2ludGVybmFsKGl0ZW0sIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIF9zZWxlY3RfaXRlbV9pbnRlcm5hbChpdGVtLCBzZWxlY3RlZCkge1xyXG4gICAgICAgIGlmIChzZWxlY3RlZCAmJiAhdGhpcy5zZWxlY3RlZF9pdGVtcy5oYXMoaXRlbSkpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9pdGVtcy5hZGQoaXRlbSk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2FsbGJhY2sgb2YgdGhpcy5zZWxlY3RlZF9pdGVtX2NhbGxiYWNrcykgY2FsbGJhY2soaXRlbSwgdHJ1ZSlcclxuICAgICAgICB9IGVsc2UgaWYgKCFzZWxlY3RlZCAmJiB0aGlzLnNlbGVjdGVkX2l0ZW1zLmhhcyhpdGVtKSkge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2l0ZW1zLmRlbGV0ZShpdGVtKTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBjYWxsYmFjayBvZiB0aGlzLnNlbGVjdGVkX2l0ZW1fY2FsbGJhY2tzKSBjYWxsYmFjayhpdGVtLCBmYWxzZSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzX3RvdWNoX3NlbGVjdGlvbl9tb2RlKSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2JpbGUtc2VsZWN0aW9uLWluZm8nKS5pbm5lclRleHQgPSBgJHt0aGlzLnNlbGVjdGVkX2l0ZW1zLnNpemV9YFxyXG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZF9pdGVtcy5zaXplID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVudGVyX3RvdWNoX3NlbGVjdGlvbl9tb2RlKGZhbHNlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHZpZXdfaXRlbShpdGVtKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNlbGVjdGVkX2l0ZW1zLmhhcyhpdGVtKSkge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkX2l0ZW1zLmFkZChpdGVtKTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBjYWxsYmFjayBvZiB0aGlzLnNlbGVjdGVkX2l0ZW1fY2FsbGJhY2tzKSBjYWxsYmFjayhpdGVtLCB0cnVlKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjbGVhcl9zZWxlY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNfdG91Y2hfc2VsZWN0aW9uX21vZGUpIHRoaXMuZW50ZXJfdG91Y2hfc2VsZWN0aW9uX21vZGUoZmFsc2UpO1xyXG4gICAgICAgIHRoaXMubGFzdF9zZWxlY3RlZF9pdGVtID0gbnVsbDtcclxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdGhpcy5zZWxlY3RlZF9pdGVtcykgZm9yIChjb25zdCBjYWxsYmFjayBvZiB0aGlzLnNlbGVjdGVkX2l0ZW1fY2FsbGJhY2tzKSBjYWxsYmFjayhpdGVtLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZF9pdGVtcy5jbGVhcigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIHtjYWxsYmFja19kaXJlY3RvcnlfY2hhbmdlZH1cclxuICAgICAqL1xyXG4gICAgYmluZF9vbl9zZWxlY3RfaXRlbShjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRfaXRlbV9jYWxsYmFja3MucHVzaChjYWxsYmFjaylcclxuICAgIH1cclxuXHJcbiAgICBzZXRfY3VycmVudF9kaXIoaXRlbSwgc2tpcF9wdXNoX3N0YXRlID0gZmFsc2UpIHtcclxuICAgICAgICB0aGlzLmxhc3RfaG92ZXJfaXRlbSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5sYXN0X3NlbGVjdGVkX2l0ZW0gPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY2xlYXJfc2VsZWN0aW9uKCk7XHJcbiAgICAgICAgaWYgKGl0ZW0gIT09IHRoaXMuY3VycmVudF9kaXJlY3RvcnkpIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50X2RpcmVjdG9yeSA9IGl0ZW07XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2FsbGJhY2sgb2YgdGhpcy5jaGFuZ2VkX2Rpcl9jYWxsYmFja3MpXHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhpdGVtKVxyXG4gICAgICAgICAgICBpZiAoIXNraXBfcHVzaF9zdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgaGlzdG9yeS5wdXNoU3RhdGUoaXRlbSwgXCJcIiwgYCR7UEFHRV9DT05URVhULnJlcG9zX3BhdGgoKX0vdHJlZSR7dGhpcy5nZXRfc3RyaW5nX3BhdGhfdG9fZGlyZWN0b3J5KGl0ZW0pfWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldF9zdHJpbmdfcGF0aF90b19kaXJlY3RvcnkoaXRlbSkge1xyXG4gICAgICAgIGxldCBmdWxsX3BhdGhfc3RyaW5nID0gXCIvXCI7XHJcbiAgICAgICAgZm9yIChjb25zdCBkaXIgb2YgdGhpcy5maWxlc3lzdGVtLm1ha2VfcGF0aF90b19vYmplY3QoaXRlbSkpIHtcclxuICAgICAgICAgICAgY29uc3QgZGlyX2RhdGEgPSB0aGlzLmZpbGVzeXN0ZW0uZ2V0X29iamVjdF9kYXRhKGRpcik7XHJcbiAgICAgICAgICAgIGZ1bGxfcGF0aF9zdHJpbmcgKz0gZGlyX2RhdGEubmFtZS5wbGFpbigpICsgXCIvXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmdWxsX3BhdGhfc3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIGdldF9jdXJyZW50X2RpcmVjdG9yeSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50X2RpcmVjdG9yeTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBjYWxsYmFjayB7Y2FsbGJhY2tfZGlyZWN0b3J5X2NoYW5nZWR9XHJcbiAgICAgKi9cclxuICAgIG9uX2NoYW5nZWRfZGlyKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2VkX2Rpcl9jYWxsYmFja3MucHVzaChjYWxsYmFjaylcclxuICAgIH1cclxuXHJcbiAgICBjdXRfc2VsZWN0aW9uKCkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJbXX1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmNsaXBib2FyZF9pdGVtcyA9IEFycmF5LmZyb20odGhpcy5zZWxlY3RlZF9pdGVtcyk7XHJcbiAgICAgICAgdGhpcy5jbGVhcl9zZWxlY3Rpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBwYXJlbnRfaWQge251bWJlciB8IG51bGx9XHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cclxuICAgICAqL1xyXG4gICAgYXN5bmMgbW92ZV9jbGlwYm9hcmRfdG9fcGFyZW50KHBhcmVudF9pZCkge1xyXG4gICAgICAgIGlmICghdGhpcy5jbGlwYm9hcmRfaXRlbXMgfHwgdGhpcy5jbGlwYm9hcmRfaXRlbXMubGVuZ3RoID09PSAwKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgcGFyc2VfZmV0Y2hfcmVzdWx0KGF3YWl0IGZldGNoKGAke1BBR0VfQ09OVEVYVC5yZXBvc19wYXRoKCl9L21vdmUtaXRlbS8ke3BhcmVudF9pZCA/IHBhcmVudF9pZCA6ICcnfWAsIHtcclxuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgICAgIGl0ZW1faWRzOiB0aGlzLmNsaXBib2FyZF9pdGVtc1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pKTtcclxuICAgICAgICBpZiAoIXJlcy5tZXNzYWdlKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLmNsaXBib2FyZF9pdGVtcykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2xkX2l0ZW0gPSB0aGlzLmZpbGVzeXN0ZW0uZ2V0X29iamVjdF9kYXRhKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maWxlc3lzdGVtLnJlbW92ZV9vYmplY3QoaXRlbSwgdHJ1ZSlcclxuICAgICAgICAgICAgICAgIG9sZF9pdGVtLnBhcmVudF9pdGVtID0gcGFyZW50X2lkO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maWxlc3lzdGVtLmFkZF9vYmplY3Qob2xkX2l0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlbGV0ZSB0aGlzLmNsaXBib2FyZF9pdGVtcztcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHtOYXZpZ2F0b3J9IiwiaW1wb3J0IHtwYXJzZV9mZXRjaF9yZXN1bHR9IGZyb20gXCIuLi8uLi9sYXlvdXQvd2lkZ2V0cy9jb21wb25lbnRzL21lc3NhZ2VfYm94XCI7XHJcbmltcG9ydCB7Q2xpZW50U3RyaW5nfSBmcm9tIFwiLi9jbGllbnRfc3RyaW5nXCI7XHJcblxyXG5jb25zdCBkYXlqcyA9IHJlcXVpcmUoJ2RheWpzJylcclxuY29uc3QgdXRjID0gcmVxdWlyZShcImRheWpzL3BsdWdpbi91dGNcIik7XHJcbmRheWpzLmV4dGVuZCh1dGMpO1xyXG5cclxuY2xhc3MgQ29va2llU3RyaW5nIHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcclxuICAgICAgICB0aGlzLl9jb29raWVzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGlmICghZGF0YSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICBjb25zdCBjYSA9IGRhdGEuc3BsaXQoJzsnKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGMgb2YgY2EpIHtcclxuICAgICAgICAgICAgY29uc3QgcyA9IGMuc3BsaXQoXCI9XCIpO1xyXG4gICAgICAgICAgICBpZiAocy5sZW5ndGggPT09IDEpXHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgaWYgKHNbMV0ubGVuZ3RoID09PSAwKVxyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0KHNbMF1bMF0gPT09IFwiIFwiID8gc1swXS5zdWJzdHJpbmcoMSkgOiBzWzBdLCBzWzFdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0KGtleSwgdmFsdWUsIGV4cCA9IG51bGwpIHtcclxuICAgICAgICBpZiAoKCF2YWx1ZSA9PT0gbnVsbCkgJiYgdGhpcy5fY29va2llc1trZXldKVxyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fY29va2llcy5kZWxldGUoa2V5KTtcclxuICAgICAgICB0aGlzLl9jb29raWVzLnNldChrZXksIHt2YWx1ZTogdmFsdWUsIGV4cDogZXhwfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVhZChrZXkpIHtcclxuICAgICAgICBjb25zdCBjb29raWUgPSB0aGlzLl9jb29raWVzLmdldChrZXkpO1xyXG4gICAgICAgIHJldHVybiBjb29raWUgPyBjb29raWUudmFsdWUgOiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHNhdmUoKSB7XHJcbiAgICAgICAgaWYgKGRvY3VtZW50LmNvb2tpZS5sZW5ndGggIT09IDApXHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgY29va2llIG9mIGRvY3VtZW50LmNvb2tpZS5zcGxpdChcIjtcIikpXHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBgJHtjb29raWV9OyBTYW1lU2l0ZT1TdHJpY3Q7IGV4cGlyZXM9JHtuZXcgRGF0ZSgwKS50b1VUQ1N0cmluZygpfTsgcGF0aD0vYDtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgdGhpcy5fY29va2llcy5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlLmV4cClcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGAke2tleX09JHt2YWx1ZS52YWx1ZX07IFNhbWVTaXRlPVN0cmljdDsgZXhwaXJlPSR7ZGF5anMudW5peCh2YWx1ZS5leHApLnRvRGF0ZSgpLnRvVVRDU3RyaW5nKCl9OyBNYXgtQWdlPSR7dmFsdWUuZXhwIC0gZGF5anMoKS51bml4KCl9OyBwYXRoPS9gXHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGAke2tleX09JHt2YWx1ZS52YWx1ZX07IFNhbWVTaXRlPVN0cmljdDsgTWF4LUFnZT0kezg2NDAwICogMzY1ICogMTB9OyBwYXRoPS9gXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBVc2VyIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIGNvbnN0IGNvb2tpZXMgPSBuZXcgQ29va2llU3RyaW5nKGRvY3VtZW50LmNvb2tpZSk7XHJcbiAgICAgICAgdGhpcy5fYXV0aHRva2VuID0gY29va2llcy5yZWFkKFwiYXV0aHRva2VuXCIpO1xyXG4gICAgICAgIHRoaXMuX2xhc3RfdXJpID0gZG9jdW1lbnQuZG9jdW1lbnRVUkk7XHJcbiAgICAgICAgaWYgKHRoaXMuX2F1dGh0b2tlbilcclxuICAgICAgICAgICAgdGhpcy5fYXV0aHRva2VuX2V4cCA9IGNvb2tpZXMucmVhZChcImF1dGh0b2tlbi1leHBcIik7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUge3N0cmluZyB8IG51bGx9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLl9sYXN0X3JlcG9zID0gY29va2llcy5yZWFkKFwibGFzdC1yZXBvc1wiKVxyXG4gICAgICAgIGlmICghdGhpcy5fbGFzdF9yZXBvcylcclxuICAgICAgICAgICAgdGhpcy5fbGFzdF9yZXBvcyA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5zYXZlX2Nvb2tpZXMoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRfdG9rZW4oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2F1dGh0b2tlbjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPFtdPn1cclxuICAgICAqL1xyXG4gICAgYXN5bmMgZ2V0X2xhc3RfcmVwb3MoKSB7XHJcbiAgICAgICAgY29uc3QgcmVwb3MgPSB0aGlzLl9sYXN0X3JlcG9zLnNwbGl0KCcuJykuZmlsdGVyKEJvb2xlYW4pO1xyXG4gICAgICAgIHJldHVybiBhd2FpdCBwYXJzZV9mZXRjaF9yZXN1bHQoYXdhaXQgZmV0Y2goJy9hcGkvcmVwb3MtZGF0YScsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcG9zKVxyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gcmVwb3NfaWQge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgcHVzaF9sYXN0X3JlcG9zKHJlcG9zX2lkKSB7XHJcbiAgICAgICAgbGV0IHJlcG9zX2xpc3QgPSB0aGlzLl9sYXN0X3JlcG9zLnNwbGl0KCcuJykuZmlsdGVyKEJvb2xlYW4pO1xyXG4gICAgICAgIGlmIChyZXBvc19saXN0Lmxlbmd0aCA+IDEwKSB7XHJcbiAgICAgICAgICAgIHJlcG9zX2xpc3QgPSByZXBvc19saXN0LnJldmVyc2UoKTtcclxuICAgICAgICAgICAgcmVwb3NfbGlzdC5wb3AoKTtcclxuICAgICAgICAgICAgcmVwb3NfbGlzdCA9IHJlcG9zX2xpc3QucmV2ZXJzZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBuZXdfcmVwb3NfbGlzdCA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgcmVwbyBvZiByZXBvc19saXN0KVxyXG4gICAgICAgICAgICBpZiAoU3RyaW5nKHJlcG9zX2lkKSAhPT0gU3RyaW5nKHJlcG8pKVxyXG4gICAgICAgICAgICAgICAgbmV3X3JlcG9zX2xpc3QucHVzaChyZXBvKVxyXG5cclxuICAgICAgICBuZXdfcmVwb3NfbGlzdC5wdXNoKHJlcG9zX2lkKVxyXG4gICAgICAgIHRoaXMuX2xhc3RfcmVwb3MgPSAnJztcclxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgbmV3X3JlcG9zX2xpc3QpXHJcbiAgICAgICAgICAgIHRoaXMuX2xhc3RfcmVwb3MgKz0gYCR7aXRlbX0uYDtcclxuICAgICAgICB0aGlzLnNhdmVfY29va2llcygpO1xyXG4gICAgfVxyXG5cclxuICAgIGF1dGhfaGVhZGVyKGhlYWRlcikge1xyXG4gICAgICAgIGlmICghaGVhZGVyKVxyXG4gICAgICAgICAgICBoZWFkZXIgPSB7fTtcclxuICAgICAgICBoZWFkZXJbJ2NvbnRlbnQtYXV0aHRva2VuJ10gPSB0aGlzLl9hdXRodG9rZW47XHJcbiAgICAgICAgcmV0dXJuIGhlYWRlcjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB1c2VybmFtZSB7Q2xpZW50U3RyaW5nfVxyXG4gICAgICogQHBhcmFtIHBhc3N3b3JkIHtzdHJpbmd9XHJcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fVxyXG4gICAgICovXHJcbiAgICBhc3luYyBsb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpIHtcclxuICAgICAgICBjb25zdCBhdXRodG9rZW4gPSBhd2FpdCBwYXJzZV9mZXRjaF9yZXN1bHQoYXdhaXQgZmV0Y2goJy9hcGkvY3JlYXRlLWF1dGh0b2tlbicsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogbmV3IENsaWVudFN0cmluZyh1c2VybmFtZSksXHJcbiAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IFN0cmluZyhwYXNzd29yZCksXHJcbiAgICAgICAgICAgICAgICAgICAgZGV2aWNlOiBDbGllbnRTdHJpbmcuRnJvbUNsaWVudChuYXZpZ2F0b3IudXNlckFnZW50KVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIGlmIChhdXRodG9rZW4udG9rZW4pIHtcclxuICAgICAgICAgICAgdGhpcy5fYXV0aHRva2VuID0gYXV0aHRva2VuLnRva2VuO1xyXG4gICAgICAgICAgICB0aGlzLl9hdXRodG9rZW5fZXhwID0gYXV0aHRva2VuLmV4cGlyYXRpb25fZGF0ZTtcclxuICAgICAgICAgICAgdGhpcy5zYXZlX2Nvb2tpZXMoKTtcclxuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHVzZXJuYW1lIHtDbGllbnRTdHJpbmd9XHJcbiAgICAgKiBAcGFyYW0gZW1haWwge0NsaWVudFN0cmluZ31cclxuICAgICAqIEBwYXJhbSBwYXNzd29yZCB7c3RyaW5nfVxyXG4gICAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cclxuICAgICAqL1xyXG4gICAgYXN5bmMgcmVnaXN0ZXIodXNlcm5hbWUsIGVtYWlsLCBwYXNzd29yZCkge1xyXG4gICAgICAgIGNvbnN0IGF1dGh0b2tlbiA9IGF3YWl0IHBhcnNlX2ZldGNoX3Jlc3VsdChhd2FpdCBmZXRjaCgnL2FwaS9jcmVhdGUtdXNlcicsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogbmV3IENsaWVudFN0cmluZyh1c2VybmFtZSksXHJcbiAgICAgICAgICAgICAgICAgICAgZW1haWw6IG5ldyBDbGllbnRTdHJpbmcoZW1haWwpLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBTdHJpbmcocGFzc3dvcmQpLFxyXG4gICAgICAgICAgICAgICAgICAgIGRldmljZTogQ2xpZW50U3RyaW5nLkZyb21DbGllbnQobmF2aWdhdG9yLnVzZXJBZ2VudClcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICBpZiAoYXV0aHRva2VuLnRva2VuKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2F1dGh0b2tlbiA9IGF1dGh0b2tlbi50b2tlbjtcclxuICAgICAgICAgICAgdGhpcy5fYXV0aHRva2VuX2V4cCA9IGF1dGh0b2tlbi5leHBpcmF0aW9uX2RhdGU7XHJcbiAgICAgICAgICAgIHRoaXMuc2F2ZV9jb29raWVzKCk7XHJcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IGAvJHt1c2VybmFtZX0vYFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBsb2dvdXQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2F1dGh0b2tlbilcclxuICAgICAgICAgICAgYXdhaXQgcGFyc2VfZmV0Y2hfcmVzdWx0KGF3YWl0IGZldGNoKGAvYXBpL2RlbGV0ZS1hdXRodG9rZW4vJHt0aGlzLl9hdXRodG9rZW59YCxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJ1xyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLl9hdXRodG9rZW47XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuX2F1dGh0b2tlbl9leHA7XHJcbiAgICAgICAgdGhpcy5zYXZlX2Nvb2tpZXMoKTtcclxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKClcclxuICAgIH1cclxuXHJcbiAgICBzYXZlX2Nvb2tpZXMoKSB7XHJcbiAgICAgICAgY29uc3QgY29va2llcyA9IG5ldyBDb29raWVTdHJpbmcoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2F1dGh0b2tlbilcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2F1dGh0b2tlbl9leHApXHJcbiAgICAgICAgICAgICAgICBjb29raWVzLnNldChcImF1dGh0b2tlblwiLCB0aGlzLl9hdXRodG9rZW4sIHRoaXMuX2F1dGh0b2tlbl9leHApXHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIGNvb2tpZXMuc2V0KFwiYXV0aHRva2VuXCIsIHRoaXMuX2F1dGh0b2tlbiwgZGF5anMoKS51bml4KCkgKyAzNjAwMClcclxuICAgICAgICBpZiAodGhpcy5fYXV0aHRva2VuX2V4cClcclxuICAgICAgICAgICAgY29va2llcy5zZXQoXCJhdXRodG9rZW4tZXhwXCIsIHRoaXMuX2F1dGh0b2tlbl9leHApXHJcbiAgICAgICAgY29va2llcy5zZXQoXCJsYXN0LXJlcG9zXCIsIHRoaXMuX2xhc3RfcmVwb3MpXHJcbiAgICAgICAgY29va2llcy5zYXZlKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IExPQ0FMX1VTRVIgPSBuZXcgVXNlcigpO1xyXG5cclxud2luZG93LkxPQ0FMX1VTRVIgPSBMT0NBTF9VU0VSO1xyXG5cclxuZXhwb3J0IHtMT0NBTF9VU0VSfSIsImltcG9ydCB7Q2xpZW50U3RyaW5nfSBmcm9tIFwiLi9jbGllbnRfc3RyaW5nXCI7XHJcbmNvbnN0IGRheWpzID0gcmVxdWlyZShcImRheWpzXCIpXHJcbmNvbnN0IHV0YyA9IHJlcXVpcmUoXCJkYXlqcy9wbHVnaW4vdXRjXCIpO1xyXG5kYXlqcy5leHRlbmQodXRjKTtcclxuXHJcbmZ1bmN0aW9uIGh1bWFuRmlsZVNpemUoYnl0ZXMpIHtcclxuICAgIGNvbnN0IHRocmVzaCA9IDEwMjQ7XHJcblxyXG4gICAgaWYgKE1hdGguYWJzKGJ5dGVzKSA8IHRocmVzaCkge1xyXG4gICAgICAgIHJldHVybiBieXRlcyArICcgbyc7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdW5pdHMgPSBbJ2tvJywgJ01vJywgJ0dvJywgJ1RvJywgJ1BvJywgJ0VvJywgJ1pvJywgJ1lvJ11cclxuICAgIGxldCB1ID0gLTE7XHJcbiAgICBjb25zdCByID0gMTA7XHJcblxyXG4gICAgZG8ge1xyXG4gICAgICAgIGJ5dGVzIC89IHRocmVzaDtcclxuICAgICAgICArK3U7XHJcbiAgICB9IHdoaWxlIChNYXRoLnJvdW5kKE1hdGguYWJzKGJ5dGVzKSAqIHIpIC8gciA+PSB0aHJlc2ggJiYgdSA8IHVuaXRzLmxlbmd0aCAtIDEpO1xyXG5cclxuXHJcbiAgICByZXR1cm4gYnl0ZXMudG9GaXhlZCgxKSArICcgJyArIHVuaXRzW3VdO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZWNvbmRzX3RvX3N0cihpbl9zZWNvbmRzKSB7XHJcbiAgICBjb25zdCBtaWxsaXNlY29uZHMgPSBpbl9zZWNvbmRzICogMTAwMDtcclxuXHJcbiAgICBmdW5jdGlvbiBudW1iZXJFbmRpbmcobnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIChudW1iZXIgPiAxKSA/ICdzJyA6ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB0ZW1wID0gTWF0aC5mbG9vcihtaWxsaXNlY29uZHMgLyAxMDAwKTtcclxuICAgIGNvbnN0IHllYXJzID0gTWF0aC5mbG9vcih0ZW1wIC8gMzE1MzYwMDApO1xyXG4gICAgaWYgKHllYXJzKSB7XHJcbiAgICAgICAgcmV0dXJuIHllYXJzICsgJyBhbm7DqWUnICsgbnVtYmVyRW5kaW5nKHllYXJzKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBkYXlzID0gTWF0aC5mbG9vcigodGVtcCAlPSAzMTUzNjAwMCkgLyA4NjQwMCk7XHJcbiAgICBpZiAoZGF5cykge1xyXG4gICAgICAgIHJldHVybiBkYXlzICsgJyBqb3VyJyArIG51bWJlckVuZGluZyhkYXlzKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGhvdXJzID0gTWF0aC5mbG9vcigodGVtcCAlPSA4NjQwMCkgLyAzNjAwKTtcclxuICAgIGlmIChob3Vycykge1xyXG4gICAgICAgIHJldHVybiBob3VycyArICcgaGV1cmUnICsgbnVtYmVyRW5kaW5nKGhvdXJzKTtcclxuICAgIH1cclxuICAgIGNvbnN0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKCh0ZW1wICU9IDM2MDApIC8gNjApO1xyXG4gICAgaWYgKG1pbnV0ZXMpIHtcclxuICAgICAgICByZXR1cm4gbWludXRlcyArICcgbWludXRlJyArIG51bWJlckVuZGluZyhtaW51dGVzKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHNlY29uZHMgPSB0ZW1wICUgNjA7XHJcbiAgICBpZiAoc2Vjb25kcykge1xyXG4gICAgICAgIHJldHVybiBzZWNvbmRzICsgJyBzZWNvbmRlJyArIG51bWJlckVuZGluZyhzZWNvbmRzKTtcclxuICAgIH1cclxuICAgIHJldHVybiAnMHMnO1xyXG59XHJcblxyXG5mdW5jdGlvbiBodW1hbl9yZWFkYWJsZV90aW1lc3RhbXAodGltZXN0YW1wKSB7XHJcbiAgICByZXR1cm4gZGF5anMudW5peCh0aW1lc3RhbXApLmxvY2FsZSgnZnInKS5mb3JtYXQoJ0REL01NL1lZWVkgLSBISDpNTTpzcycpO1xyXG59XHJcblxyXG5jbGFzcyBQYWdlQ29udGV4dCB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBkYXRhIHt7XHJcbiAgICAgKiAgICAgIGNvbm5lY3RlZF91c2VyOntpZDpudW1iZXIsIGVtYWlsOiBDbGllbnRTdHJpbmcsIG5hbWU6Q2xpZW50U3RyaW5nLCByb2xlOnN0cmluZ30sXHJcbiAgICAgKiAgICAgIGRpc3BsYXlfdXNlcjp7aWQ6bnVtYmVyLCBuYW1lOiBDbGllbnRTdHJpbmd9LFxyXG4gICAgICogICAgICBkaXNwbGF5X3JlcG9zOntpZDpudW1iZXIsIGRlc2NyaXB0aW9uOkNsaWVudFN0cmluZywgbmFtZTogQ2xpZW50U3RyaW5nLCBvd25lcjpudW1iZXIsIHN0YXR1czpzdHJpbmcsIGRpc3BsYXlfbmFtZTpDbGllbnRTdHJpbmcsIG1heF9maWxlX3NpemU6bnVtYmVyLCB2aXNpdG9yX2ZpbGVfbGlmZXRpbWU6bnVtYmVyLCBhbGxvd192aXNpdG9yX3VwbG9hZDpudW1iZXJ9XHJcbiAgICAgKiAgICAgIHJlcXVlc3RfcGF0aDpDbGllbnRTdHJpbmcsXHJcbiAgICAgKiAgfSB8fCBudWxsfSAqL1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcclxuICAgICAgICBpZiAoIWRhdGEpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB0aGlzLmNvbm5lY3RlZF91c2VyID0gZGF0YS5jb25uZWN0ZWRfdXNlcjtcclxuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWRfdXNlcikge1xyXG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RlZF91c2VyLm5hbWUgPSBuZXcgQ2xpZW50U3RyaW5nKHRoaXMuY29ubmVjdGVkX3VzZXIubmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGVkX3VzZXIuZW1haWwgPSBuZXcgQ2xpZW50U3RyaW5nKHRoaXMuY29ubmVjdGVkX3VzZXIuZW1haWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmRpc3BsYXlfdXNlciA9IGRhdGEuZGlzcGxheV91c2VyO1xyXG4gICAgICAgIGlmICh0aGlzLmRpc3BsYXlfdXNlcikge1xyXG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlfdXNlci5uYW1lID0gbmV3IENsaWVudFN0cmluZyh0aGlzLmRpc3BsYXlfdXNlci5uYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5kaXNwbGF5X3JlcG9zID0gZGF0YS5kaXNwbGF5X3JlcG9zO1xyXG4gICAgICAgIGlmIChkYXRhLmRpc3BsYXlfcmVwb3MpIHtcclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5X3JlcG9zLm5hbWUgPSBuZXcgQ2xpZW50U3RyaW5nKGRhdGEuZGlzcGxheV9yZXBvcy5uYW1lKVxyXG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlfcmVwb3MuZGVzY3JpcHRpb24gPSBuZXcgQ2xpZW50U3RyaW5nKGRhdGEuZGlzcGxheV9yZXBvcy5kZXNjcmlwdGlvbilcclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5X3JlcG9zLmRpc3BsYXlfbmFtZSA9IG5ldyBDbGllbnRTdHJpbmcoZGF0YS5kaXNwbGF5X3JlcG9zLmRpc3BsYXlfbmFtZSlcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yZXF1ZXN0X3BhdGggPSBDbGllbnRTdHJpbmcuRnJvbUNsaWVudChkZWNvZGVVUkkoZGF0YS5yZXF1ZXN0X3BhdGgpKTtcclxuICAgIH1cclxuXHJcbiAgICB1c2VyX3BhdGgoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGlzcGxheV91c2VyKVxyXG4gICAgICAgICAgICByZXR1cm4gYC8ke3RoaXMuZGlzcGxheV91c2VyLm5hbWUuZm9yX3VybCgpfWBcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICByZXBvc19wYXRoKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmRpc3BsYXlfdXNlciAmJiB0aGlzLmRpc3BsYXlfcmVwb3MpXHJcbiAgICAgICAgICAgIHJldHVybiBgLyR7dGhpcy5kaXNwbGF5X3VzZXIubmFtZS5mb3JfdXJsKCl9LyR7dGhpcy5kaXNwbGF5X3JlcG9zLm5hbWUuZm9yX3VybCgpfWBcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxufVxyXG5cclxuY29uc3QgUEFHRV9DT05URVhUID0gbmV3IFBhZ2VDb250ZXh0KCh0eXBlb2YgX19QQUdFX0NPTlRFWFQgPT09ICd1bmRlZmluZWQnKSA/IG51bGwgOiBfX1BBR0VfQ09OVEVYVCk7XHJcblxyXG5jbGFzcyBQZXJtaXNzaW9ucyB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSByZXBvc191cmwge3N0cmluZ31cclxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8Ym9vbGVhbj59XHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGNhbl91c2VyX2VkaXRfcmVwb3MocmVwb3NfdXJsKSB7XHJcbiAgICAgICAgcmV0dXJuIChhd2FpdCBmZXRjaChgJHtyZXBvc191cmx9L3Blcm1pc3Npb25zL2VkaXRgKSkuc3RhdHVzID09PSAyMDA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gcmVwb3NfdXJsIHtzdHJpbmd9XHJcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPGJvb2xlYW4+fVxyXG4gICAgICovXHJcbiAgICBhc3luYyBjYW5fdXNlcl91cGxvYWRfdG9fcmVwb3MocmVwb3NfdXJsKSB7XHJcbiAgICAgICAgcmV0dXJuIChhd2FpdCBmZXRjaChgJHtyZXBvc191cmx9L3Blcm1pc3Npb25zL3VwbG9hZGApKS5zdGF0dXMgPT09IDIwMDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSByZXBvc191cmwge3N0cmluZ31cclxuICAgICAqIEBwYXJhbSBpdGVtX2lkIHtzdHJpbmd9XHJcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPGJvb2xlYW4+fVxyXG4gICAgICovXHJcbiAgICBhc3luYyBjYW5fdXNlcl9lZGl0X2l0ZW0ocmVwb3NfdXJsLCBpdGVtX2lkKSB7XHJcbiAgICAgICAgcmV0dXJuIChhd2FpdCBmZXRjaChgJHtyZXBvc191cmx9L3Blcm1pc3Npb25zL2VkaXQvJHtpdGVtX2lkID8gaXRlbV9pZCA6IFwiXCJ9YCkpLnN0YXR1cyA9PT0gMjAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHJlcG9zX3VybCB7c3RyaW5nfVxyXG4gICAgICogQHBhcmFtIG9iamVjdCB7bnVtYmVyfVxyXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn1cclxuICAgICAqL1xyXG4gICAgYXN5bmMgY2FuX3VzZXJfdXBsb2FkX3RvX2RpcmVjdG9yeShyZXBvc191cmwsIG9iamVjdCkge1xyXG4gICAgICAgIHJldHVybiAoYXdhaXQgZmV0Y2goYCR7cmVwb3NfdXJsfS9wZXJtaXNzaW9ucy91cGxvYWQvJHtvYmplY3QgPyBvYmplY3QgOiBcIlwifWApKS5zdGF0dXMgPT09IDIwMDtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaXNfdG91Y2hfZGV2aWNlKCkge1xyXG4gICAgcmV0dXJuICh3aW5kb3cubWF0Y2hNZWRpYShcIihwb2ludGVyOiBjb2Fyc2UpXCIpLm1hdGNoZXMpO1xyXG59XHJcblxyXG5jb25zdCBwZXJtaXNzaW9ucyA9IG5ldyBQZXJtaXNzaW9ucygpO1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSBvYmplY3Qge29iamVjdH1cclxuICogQHJldHVybiB7b2JqZWN0fVxyXG4gKi9cclxuZnVuY3Rpb24gb2JqZWN0X3RvX2RlY29kZWRfc3RyaW5nKG9iamVjdCkge1xyXG4gICAgZm9yIChjb25zdCBbZmllbGQsIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhvYmplY3QpKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlLl9lbmNvZGVkX3N0cmluZ19kYXRhKSB7XHJcbiAgICAgICAgICAgIG9iamVjdFtmaWVsZF0gPSBuZXcgQ2xpZW50U3RyaW5nKHZhbHVlKS5wbGFpbigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBvYmplY3Q7XHJcbn1cclxuXHJcbndpbmRvdy51dGlscyA9IHtodW1hbkZpbGVTaXplLCBzZWNvbmRzX3RvX3N0ciwgUEFHRV9DT05URVhULCBwZXJtaXNzaW9uc31cclxuZXhwb3J0IHtodW1hbkZpbGVTaXplLCBzZWNvbmRzX3RvX3N0ciwgUEFHRV9DT05URVhULCBwZXJtaXNzaW9ucywgaXNfdG91Y2hfZGV2aWNlLCBodW1hbl9yZWFkYWJsZV90aW1lc3RhbXAsIG9iamVjdF90b19kZWNvZGVkX3N0cmluZ30iLCJjbGFzcyBEb2N1bWVudENvZGUgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuc3R5bGUud2lkdGggPSAnMTAwJSc7XHJcbiAgICAgICAgdGhpcy5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XHJcbiAgICAgICAgdGhpcy5zdHlsZS5tYXhIZWlnaHQgPSAnMTAwJSc7XHJcbiAgICAgICAgdGhpcy5zdHlsZS5vdmVyZmxvdyA9ICdhdXRvJztcclxuICAgICAgICB0aGlzWyd3aGl0ZS1zcGFjZSddID0gJ3ByZS13cmFwJ1xyXG5cclxuICAgICAgICBpZiAodGhpcy5oYXNBdHRyaWJ1dGUoJ3NyYycpICYmIHRoaXMuaGFzQXR0cmlidXRlKCdjbGFzcycpKVxyXG4gICAgICAgICAgICBmZXRjaCh0aGlzLmdldEF0dHJpYnV0ZSgnc3JjJykpXHJcbiAgICAgICAgICAgICAgICAudGhlbihkYXRhID0+IGRhdGEudGV4dCgpKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4odGV4dCA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjb2RlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29kZS5jbGFzc0xpc3QuYWRkKHRoaXMuZ2V0QXR0cmlidXRlKCdjbGFzcycpKTtcclxuICAgICAgICAgICAgICAgICAgICBjb2RlWydkYXRhLXByaXNtanMtY29weSddID0gXCJDb3B5IGNvZGVcIjtcclxuICAgICAgICAgICAgICAgICAgICBjb2RlLmlubmVySFRNTCA9IHRleHQuc3Vic3RyaW5nKDAsIE1hdGgubWluKHRleHQubGVuZ3RoLCAyMDAwMDApKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncHJlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJlLmNsYXNzTGlzdC5hZGQoJ2xpbmUtbnVtYmVycycpXHJcbiAgICAgICAgICAgICAgICAgICAgcHJlLmFwcGVuZChjb2RlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHBlbmQocHJlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaW1wb3J0KCcuL3ByaXNtX2xvYWRlci5qcycpLnRoZW4ocHJpc21fbG9hZGVyID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJpc21fbG9hZGVyLmJ1aWxkKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwiZG9jdW1lbnQtY29kZVwiLCBEb2N1bWVudENvZGUpOyIsImNsYXNzIERvY3VtZW50TWFya2Rvd24gZXh0ZW5kcyBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyNmNWY1ZjUnO1xyXG4gICAgICAgIHRoaXMuc3R5bGUuY29sb3IgPSAnIzI2MjYyNic7XHJcbiAgICAgICAgdGhpcy5zdHlsZS53aWR0aCA9ICcxMDAlJztcclxuICAgICAgICB0aGlzLnN0eWxlLmhlaWdodCA9ICcxMDAlJztcclxuICAgICAgICB0aGlzLnN0eWxlLm1heEhlaWdodCA9ICcxMDAlJztcclxuICAgICAgICB0aGlzLnN0eWxlLm92ZXJmbG93ID0gJ2F1dG8nO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5oYXNBdHRyaWJ1dGUoJ3NyYycpKVxyXG4gICAgICAgICAgICBmZXRjaCh0aGlzLmdldEF0dHJpYnV0ZSgnc3JjJykpXHJcbiAgICAgICAgICAgICAgICAudGhlbihkYXRhID0+IGRhdGEudGV4dCgpKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4odGV4dCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW1wb3J0KCcuL3Nob3dkb3duX2xvYWRlci5qcycpLnRoZW4oc2hvd2Rvd25fbG9hZGVyID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbm5lckhUTUwgPSBzaG93ZG93bl9sb2FkZXIuY29udmVydF90ZXh0KHRleHQpXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJkb2N1bWVudC1tYXJrZG93blwiLCBEb2N1bWVudE1hcmtkb3duKTsiLCJjbGFzcyBQZGZWaWV3ZXIgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyNmNWY1ZjUnO1xyXG4gICAgICAgIHRoaXMuc3R5bGUuY29sb3IgPSAnIzI2MjYyNic7XHJcbiAgICAgICAgdGhpcy5zdHlsZS53aWR0aCA9ICcxMDAlJztcclxuICAgICAgICB0aGlzLnN0eWxlLmhlaWdodCA9ICcxMDAlJztcclxuICAgICAgICB0aGlzLnN0eWxlLm1heEhlaWdodCA9ICcxMDAlJztcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmhhc0F0dHJpYnV0ZSgnc3JjJykpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgdGhpcy5wZGZEb2MgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucGFnZU51bSA9IDE7XHJcbiAgICAgICAgdGhpcy5wYWdlUmVuZGVyaW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5wYWdlTnVtUGVuZGluZyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zY2FsZSA9IDAuODtcclxuICAgICAgICBjb25zdCB0aGlzX3JlZiA9IHRoaXM7XHJcblxyXG4gICAgICAgIGNvbnN0IGRpc3BsYXkgPSByZXF1aXJlKCcuL3BkZi12aWV3ZXIuaGJzJykoe30sIHtcclxuICAgICAgICAgICAgJ3BhZ2VfbmV4dCc6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXNrX2Zvcl9wYWdlKHRoaXMucGFnZU51bSArIDEpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAncGFnZV9wcmV2JzogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hc2tfZm9yX3BhZ2UodGhpcy5wYWdlTnVtICsgMSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICd6b29tJzogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy56b29tKHRoaXMuc2NhbGUgKiAxLjIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAnZGV6b29tJzogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy56b29tKHRoaXMuc2NhbGUgLyAxLjIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuY2FudmFzID0gZGlzcGxheS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnY2FudmFzJylbMF1cclxuICAgICAgICB0aGlzLmF0dGFjaFNoYWRvdyh7bW9kZTogJ29wZW4nfSkuYXBwZW5kKGRpc3BsYXkpO1xyXG5cclxuICAgICAgICBpbXBvcnQoXCIuL3BkZmpzZGlzdF9sb2FkZXJcIikudGhlbihwZGZqcyA9PiB7XHJcbiAgICAgICAgICAgICAgICBwZGZqcy5nZXRfcGRmX2pzX2Rpc3QoKS5nZXREb2N1bWVudCh0aGlzLmdldEF0dHJpYnV0ZSgnc3JjJykpXHJcbiAgICAgICAgICAgICAgICAgICAgLnByb21pc2VcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocGRmRG9jdW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc19yZWYucGRmRG9jID0gcGRmRG9jdW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfcmVmLnJlbmRlcl9wYWdlKDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgem9vbShuZXdfbGV2ZWwpIHtcclxuICAgICAgICB0aGlzLnNjYWxlID0gbmV3X2xldmVsO1xyXG4gICAgICAgIGlmICghdGhpcy5wYWdlTnVtUGVuZGluZylcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJfcGFnZSh0aGlzLnBhZ2VOdW0pO1xyXG4gICAgfVxyXG4gICAgYXNrX2Zvcl9wYWdlKG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLnBhZ2VSZW5kZXJpbmcpXHJcbiAgICAgICAgICAgIHRoaXMucGFnZU51bVBlbmRpbmcgPSBudW1iZXI7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcl9wYWdlKG51bWJlcik7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyX3BhZ2UocGFnZV9udW1iZXIpIHtcclxuICAgICAgICB0aGlzLnBhZ2VOdW0gPSBwYWdlX251bWJlcjtcclxuICAgICAgICBjb25zdCB0aGlzX3JlZiA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGRmRG9jLmdldFBhZ2UodGhpcy5wYWdlTnVtKS50aGVuKGZ1bmN0aW9uIChwZGZQYWdlKSB7XHJcbiAgICAgICAgICAgIC8vIERpc3BsYXkgcGFnZSBvbiB0aGUgZXhpc3RpbmcgY2FudmFzIHdpdGggMTAwJSBzY2FsZS5cclxuICAgICAgICAgICAgY29uc3Qgdmlld3BvcnQgPSBwZGZQYWdlLmdldFZpZXdwb3J0KHtzY2FsZTogdGhpc19yZWYuc2NhbGV9KTtcclxuICAgICAgICAgICAgdGhpc19yZWYuY2FudmFzLndpZHRoID0gdmlld3BvcnQud2lkdGg7XHJcbiAgICAgICAgICAgIHRoaXNfcmVmLmNhbnZhcy5oZWlnaHQgPSB2aWV3cG9ydC5oZWlnaHQ7XHJcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXNfcmVmLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlbmRlclRhc2sgPSBwZGZQYWdlLnJlbmRlcih7XHJcbiAgICAgICAgICAgICAgICBjYW52YXNDb250ZXh0OiBjdHgsXHJcbiAgICAgICAgICAgICAgICB2aWV3cG9ydCxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXNfcmVmLnBhZ2VSZW5kZXJpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVuZGVyVGFzay5wcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpc19yZWYucGFnZVJlbmRlcmluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXNfcmVmLnBhZ2VOdW1QZW5kaW5nICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpc19yZWYucmVuZGVyX3BhZ2UodGhpc19yZWYucGFnZU51bVBlbmRpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXNfcmVmLnBhZ2VOdW1QZW5kaW5nID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcInBkZi1lbWJlZFwiLCBQZGZWaWV3ZXIpOyIsImltcG9ydCB7TE9DQUxfVVNFUn0gZnJvbSBcIi4uLy4uL2NvbW1vbi90b29scy91c2VyXCI7XHJcbmltcG9ydCB7cGFyc2VfZmV0Y2hfcmVzdWx0fSBmcm9tIFwiLi4vd2lkZ2V0cy9jb21wb25lbnRzL21lc3NhZ2VfYm94XCI7XHJcbmltcG9ydCB7Q2xpZW50U3RyaW5nfSBmcm9tIFwiLi4vLi4vY29tbW9uL3Rvb2xzL2NsaWVudF9zdHJpbmdcIjtcclxuaW1wb3J0IHtodW1hbkZpbGVTaXplLCBzZWNvbmRzX3RvX3N0cn0gZnJvbSBcIi4uLy4uL2NvbW1vbi90b29scy91dGlsc1wiO1xyXG5cclxucmVxdWlyZSgnLi9hZG1pbmlzdHJhdGlvbi5zY3NzJyk7XHJcblxyXG5jb25zdCB1c2VyX2hicyA9IHJlcXVpcmUoJy4vdXNlci5oYnMnKTtcclxuY29uc3QgcmVwb3NfaGJzID0gcmVxdWlyZSgnLi9yZXBvcy5oYnMnKTtcclxuY29uc3Qgc3RhdHNfaGJzID0gcmVxdWlyZSgnLi9zdGF0cy5oYnMnKTtcclxuXHJcbmNsYXNzIEFkbWluaXN0cmF0aW9uUGFuZWwge1xyXG4gICAgY29uc3RydWN0b3Ioc3RhdF9kaXYsIHVzZXJfbGlzdF9kaXYsIHJlcG9fbGlzdF9kaXYpIHtcclxuICAgICAgICB0aGlzLnN0YXRfZGl2ID0gc3RhdF9kaXY7XHJcbiAgICAgICAgdGhpcy51c2VyX2xpc3RfZGl2ID0gdXNlcl9saXN0X2RpdjtcclxuICAgICAgICB0aGlzLnJlcG9fbGlzdF9kaXYgPSByZXBvX2xpc3RfZGl2O1xyXG4gICAgICAgIHRoaXMucmVmcmVzaF9kYXRhKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcmVmcmVzaF9kYXRhKCkge1xyXG5cclxuICAgICAgICBmZXRjaChgL2FkbWluaXN0cmF0aW9uL3N0YXRzL2AsIHtcclxuICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgJ2NvbnRlbnQtYXV0aHRva2VuJzogTE9DQUxfVVNFUi5nZXRfdG9rZW4oKSxcclxuICAgICAgICAgICAgICAgICdhY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oYXN5bmMgKHJlc3BvbnNlKSA9PiBhd2FpdCBwYXJzZV9mZXRjaF9yZXN1bHQocmVzcG9uc2UpKVxyXG4gICAgICAgICAgICAudGhlbigoanNvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAganNvbi5lZmZlY3RpdmVfc2l6ZSA9IGh1bWFuRmlsZVNpemUoanNvbi5lZmZlY3RpdmVfc2l6ZSk7XHJcbiAgICAgICAgICAgICAgICBqc29uLnNpemUgPSBodW1hbkZpbGVTaXplKGpzb24uc2l6ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRfZGl2LmFwcGVuZChzdGF0c19oYnMoanNvbiwge30pKVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgbGV0IHVzZXJfbGlzdCA9IG5ldyBNYXAoKTtcclxuXHJcbiAgICAgICAgYXdhaXQgZmV0Y2goYC9hZG1pbmlzdHJhdGlvbi91c2VybGlzdC9gLCB7XHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICdjb250ZW50LWF1dGh0b2tlbic6IExPQ0FMX1VTRVIuZ2V0X3Rva2VuKCksXHJcbiAgICAgICAgICAgICAgICAnYWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKGFzeW5jIChyZXNwb25zZSkgPT4gYXdhaXQgcGFyc2VfZmV0Y2hfcmVzdWx0KHJlc3BvbnNlKSlcclxuICAgICAgICAgICAgLnRoZW4oKGpzb24pID0+IHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHVzZXIgb2YganNvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHVzZXJfbGlzdC5zZXQodXNlci5pZCwgdXNlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51c2VyX2xpc3RfZGl2LmFwcGVuZCh1c2VyX2hicyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiB1c2VyLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBuZXcgQ2xpZW50U3RyaW5nKHVzZXIubmFtZSkucGxhaW4oKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IG5ldyBDbGllbnRTdHJpbmcodXNlci5lbWFpbCkucGxhaW4oKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNfZ3Vlc3Q6IHVzZXIucm9sZSA9PT0gXCJndWVzdFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc192aXA6IHVzZXIucm9sZSA9PT0gXCJ2aXBcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNfYWRtaW46IHVzZXIucm9sZSA9PT0gXCJhZG1pblwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxvd19jb250YWN0OiB1c2VyLmFsbG93X2NvbnRhY3RcclxuICAgICAgICAgICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldF9yb2xlOiBhc3luYyBldmVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LnZhbHVlID09PSAnYWRtaW4nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHBhcnNlX2ZldGNoX3Jlc3VsdChhd2FpdCBmZXRjaCgnL2FkbWluaXN0cmF0aW9uL3NldHJvbGUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogdXNlci5pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU6IGV2ZW50LnRhcmdldC52YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlX3VzZXI6IGV2ZW50ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXRfcGFzc3dvcmQ6IGV2ZW50ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgZmV0Y2goYC9hZG1pbmlzdHJhdGlvbi9yZXBvc2xpc3QvYCwge1xyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAnY29udGVudC1hdXRodG9rZW4nOiBMT0NBTF9VU0VSLmdldF90b2tlbigpLFxyXG4gICAgICAgICAgICAgICAgJ2FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbihhc3luYyAocmVzcG9uc2UpID0+IGF3YWl0IHBhcnNlX2ZldGNoX3Jlc3VsdChyZXNwb25zZSkpXHJcbiAgICAgICAgICAgIC50aGVuKChqc29uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCByZXBvcyBvZiBqc29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBvX2xpc3RfZGl2LmFwcGVuZChyZXBvc19oYnMoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogcmVwb3MuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IG5ldyBDbGllbnRTdHJpbmcocmVwb3MubmFtZSkucGxhaW4oKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheV9uYW1lOiBuZXcgQ2xpZW50U3RyaW5nKHJlcG9zLmRpc3BsYXlfbmFtZSkucGxhaW4oKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3duZXI6IG5ldyBDbGllbnRTdHJpbmcodXNlcl9saXN0LmdldChyZXBvcy5vd25lcikubmFtZSkucGxhaW4oKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IG5ldyBDbGllbnRTdHJpbmcocmVwb3MuZGVzY3JpcHRpb24pLnBsYWluKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogcmVwb3Muc3RhdHVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2aXNpdG9yX2ZpbGVfbGlmZXRpbWU6IHNlY29uZHNfdG9fc3RyKHJlcG9zLnZpc2l0b3JfZmlsZV9saWZldGltZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heF9maWxlX3NpemU6IGh1bWFuRmlsZVNpemUocmVwb3MubWF4X2ZpbGVfc2l6ZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbG93X3Zpc2l0b3JfdXBsb2FkOiBodW1hbkZpbGVTaXplKHJlcG9zLmFsbG93X3Zpc2l0b3JfdXBsb2FkKSxcclxuICAgICAgICAgICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZV91c2VyOiBldmVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0X3Bhc3N3b3JkOiBldmVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICB9XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbn1cclxuXHJcbndpbmRvdy5hZG1pbmlzdHJhdGlvbiA9IHtBZG1pbmlzdHJhdGlvblBhbmVsfSIsImltcG9ydCB7UEFHRV9DT05URVhULCBwZXJtaXNzaW9uc30gZnJvbSBcIi4uL2NvbW1vbi90b29scy91dGlsc1wiO1xyXG5pbXBvcnQge1JFUE9TX0JVSUxERVJ9IGZyb20gXCIuL3dpZGdldHMvdmlld3BvcnQvcmVwb3NfYnVpbGRlclwiXHJcblxyXG5jb25zdCBkcm9wX2JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5kcm9wX2JveC5jbGFzc0xpc3QuYWRkKCdkcm9wLWJveCcpXHJcblxyXG5sZXQgV0lMTF9EUk9QID0gbnVsbDtcclxuXHJcbmZ1bmN0aW9uIHJlc2V0X3N0eWxlKCkge1xyXG4gICAgZHJvcF9ib3guY2xhc3NMaXN0LnJlbW92ZSgnaG92ZXInKTtcclxuICAgIGRyb3BfYm94LmNsYXNzTGlzdC5yZW1vdmUoJ2ZvcmJpZGRlbicpO1xyXG59XHJcblxyXG5kb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdlbnRlcicsIGFzeW5jIChldmVudCkgPT4ge1xyXG4gICAgaWYgKCFXSUxMX0RST1ApIHtcclxuICAgICAgICBXSUxMX0RST1AgPSBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIVBBR0VfQ09OVEVYVC5kaXNwbGF5X3JlcG9zKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoZmFsc2UpO1xyXG4gICAgICAgICAgICBjb25zdCBkaXJlY3RvcnkgPSBSRVBPU19CVUlMREVSLm5hdmlnYXRvci5nZXRfY3VycmVudF9kaXJlY3RvcnkoKTtcclxuICAgICAgICAgICAgaWYgKChkaXJlY3RvcnkgJiYgYXdhaXQgcGVybWlzc2lvbnMuY2FuX3VzZXJfdXBsb2FkX3RvX2RpcmVjdG9yeShQQUdFX0NPTlRFWFQucmVwb3NfcGF0aCgpLCBkaXJlY3RvcnkpKSB8fCBhd2FpdCBwZXJtaXNzaW9ucy5jYW5fdXNlcl91cGxvYWRfdG9fcmVwb3MoUEFHRV9DT05URVhULnJlcG9zX3BhdGgoKSkpIHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgIGlmICghV0lMTF9EUk9QIHx8ICFhd2FpdCBXSUxMX0RST1ApIHtcclxuICAgICAgICBkcm9wX2JveC5jbGFzc0xpc3QuYWRkKCdmb3JiaWRkZW4nKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgZHJvcF9ib3guY2xhc3NMaXN0LmFkZCgnaG92ZXInKTtcclxufSlcclxuXHJcbmRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdXQnLCAoZXZlbnQpID0+IHtcclxuICAgIFdJTExfRFJPUCA9IG51bGw7XHJcbiAgICByZXNldF9zdHlsZSgpO1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxufSlcclxuXHJcbmRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLCBhc3luYyAoZXZlbnQpID0+IHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbn0pXHJcblxyXG5kb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBhc3luYyAoZXZlbnQpID0+IHtcclxuICAgIHJlc2V0X3N0eWxlKCk7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgIGlmICghV0lMTF9EUk9QIHx8ICFhd2FpdCBXSUxMX0RST1ApIHtcclxuICAgICAgICBpZiAoUEFHRV9DT05URVhULmRpc3BsYXlfcmVwb3MpXHJcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IGBUT0RPIE9QRU4gVVBMT0FEIFBBR0UgSEVIRWBcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFldmVudC5kYXRhVHJhbnNmZXIpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGV2ZW50LmRhdGFUcmFuc2Zlci5pdGVtcykge1xyXG4gICAgICAgIFsuLi5ldmVudC5kYXRhVHJhbnNmZXIuaXRlbXNdLmZvckVhY2goKGl0ZW0sIGkpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcHJvY2Vzc19lbnRyeSA9IChlbnRyeSwgcGF0aCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5LmlzRGlyZWN0b3J5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aCA9IGAke3BhdGggPyBwYXRoIDogJyd9LyR7ZW50cnkubmFtZX1gO1xyXG4gICAgICAgICAgICAgICAgICAgIGVudHJ5LmNyZWF0ZVJlYWRlcigpLnJlYWRFbnRyaWVzKChlbnRyaWVzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbmV3X2VudHJ5IG9mIGVudHJpZXMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzX2VudHJ5KG5ld19lbnRyeSwgcGF0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW50cnkuZmlsZShmaWxlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGUuc2l6ZSA9PT0gMCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGxvYWQuYWRkX2ZpbGVfdG9fdXBsb2FkKGZpbGUsIHBhdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpdGVtLmtpbmQgPT09IFwiZmlsZVwiKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbnRyeSA9IFwiZ2V0QXNFbnRyeVwiIGluIERhdGFUcmFuc2Zlckl0ZW0ucHJvdG90eXBlID8gaXRlbS5nZXRBc0VudHJ5KCkgOiBpdGVtLndlYmtpdEdldEFzRW50cnkoKTtcclxuICAgICAgICAgICAgICAgIHByb2Nlc3NfZW50cnkoZW50cnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIFsuLi5ldmVudC5kYXRhVHJhbnNmZXIuZmlsZXNdLmZvckVhY2goKGZpbGUsIF8pID0+IHtcclxuICAgICAgICAgICAgdXBsb2FkLmFkZF9maWxlX3RvX3VwbG9hZChmaWxlLCAnLycpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59KVxyXG5cclxuXHJcbmRvY3VtZW50LmJvZHkuYXBwZW5kKGRyb3BfYm94KTtcclxuIiwiaW1wb3J0IEhhbmRsZWJhcnMgZnJvbSBcImhhbmRsZWJhcnNcIjtcclxuaW1wb3J0IHtnZXRfbWltZV9pY29uX3BhdGgsIGlzX21pbWV0eXBlX3ZhbGlkLCBVTkRFRklORURfTUlNRV9TVFJJTkd9IGZyb20gXCIuLi9jb21tb24vdG9vbHMvbWltZV91dGlsc1wiO1xyXG5pbXBvcnQge0NsaWVudFN0cmluZ30gZnJvbSBcIi4uL2NvbW1vbi90b29scy9jbGllbnRfc3RyaW5nXCI7XHJcblxyXG4vKiAjIyMjIyMjIyMjIyMjIyMjIyMgSEVMUEVSIHtJVEVNX1RIVU1CTkFJTH0gIyMjIyMjIyMjIyMjIyMjIyMjICovXHJcbmNvbnN0IGdldF9pdGVtX3RodW1ibmFpbCA9IHJlcXVpcmUoJy4uL2NvbW1vbi90b29scy9nZXRfaXRlbV90aHVtYm5haWwnKVxyXG5IYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKFwiaXRlbV90aHVtYm5haWxcIiwgKGl0ZW0pID0+IHtcclxuXHJcbiAgICAvL0BUT0RPIDogcmVtb3ZlIHRoaXMgdGVtcG9yYXJ5IGZpeCBhbmQgdXNlIHRoZSBuZXcgZmlsZXN5c3RlbVxyXG4gICAgaWYgKGl0ZW0uaXNfZmlsZSkge1xyXG4gICAgICAgIGl0ZW0uaXNfcmVndWxhcl9maWxlID0gdHJ1ZTtcclxuICAgICAgICBpdGVtLm1pbWV0eXBlID0gQ2xpZW50U3RyaW5nLkZyb21DbGllbnQoaXRlbS5taW1ldHlwZSlcclxuICAgIH1cclxuXHJcbiAgICAvLyBDQVNFIDogSVMgU1RBTkRBUkQgRklMRVxyXG4gICAgaWYgKGl0ZW0uaXNfcmVndWxhcl9maWxlKSB7XHJcbiAgICAgICAgaWYgKCFpc19taW1ldHlwZV92YWxpZChpdGVtLm1pbWV0eXBlKSlcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBIYW5kbGViYXJzLlNhZmVTdHJpbmcoVU5ERUZJTkVEX01JTUVfU1RSSU5HKTtcclxuICAgICAgICAvLyBEaXN0YW50IHJlcG9zXHJcbiAgICAgICAgaWYgKGl0ZW0uaWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBIYW5kbGViYXJzLlNhZmVTdHJpbmcoZ2V0X2l0ZW1fdGh1bWJuYWlsLmZyb21fZGlzdGFudF9yZXBvcyhpdGVtKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEZpbGVzeXN0ZW0gZmlsZVxyXG4gICAgICAgIGVsc2UgaWYgKGl0ZW0ubGFzdE1vZGlmaWVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgSGFuZGxlYmFycy5TYWZlU3RyaW5nKGdldF9pdGVtX3RodW1ibmFpbC5mcm9tX2xvY2FsX3BhdGgoaXRlbSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIENBU0UgOiBJUyBESVJFQ1RPUllcclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBuZXcgSGFuZGxlYmFycy5TYWZlU3RyaW5nKGA8aW1nIHNyYz1cIi9pbWFnZXMvaWNvbnMvaWNvbnM4LWZvbGRlci05Ni5wbmdcIiBhbHQ9XCJkb3NzaWVyOiAke2l0ZW0ubmFtZX1cIj5gKVxyXG4gICAgfVxyXG59KTtcclxuXHJcbi8qICMjIyMjIyMjIyMjIyMjIyMjIyBIRUxQRVIge0NUWH0gIyMjIyMjIyMjIyMjIyMjIyMjICovXHJcbkhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoXCJ0eXBlaWNvblwiLCBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgcmV0dXJuIG5ldyBIYW5kbGViYXJzLlNhZmVTdHJpbmcoYDxpbWcgY2xhc3M9J3R5cGVpY29uJyBhbHQ9J3R5cGVpY29uJyBzcmM9XCIke2dldF9taW1lX2ljb25fcGF0aChvcHRpb25zKX1cIj5gKTtcclxufSk7XHJcblxyXG4vKiAjIyMjIyMjIyMjIyMjIyMjIyMgSEVMUEVSIHtDVFh9ICMjIyMjIyMjIyMjIyMjIyMjIyAqL1xyXG5IYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKFwiY3R4XCIsIGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICBpZiAoIXRoaXNbJ19faGFuZGxlYmFyX2N0eF9pZCddKVxyXG4gICAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKCdUaGlzIHRlbXBsYXRlIHdhcyBub3QgaW5zdGFuY2VkIHdpdGggYSBjb250ZXh0Jyk7XHJcbiAgICByZXR1cm4gbmV3IEhhbmRsZWJhcnMuU2FmZVN0cmluZyhcImNvbnNvbGUuYXNzZXJ0KGRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIuX19yZWdpc3RlcmVkX2N0eFtcIiArIHRoaXNbJ19faGFuZGxlYmFyX2N0eF9pZCddICsgXCJdLCAnbm8gY29udGV4dCBwcm92aWRlZCBmb3IgOiBcIiArIG9wdGlvbnMgKyBcIiBvbiBvYmplY3QgOicsIHRoaXMsICdcXFxcbiBBdmFpbGFibGUgY29udGV4dHMgOicsIGRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIuX19yZWdpc3RlcmVkX2N0eCk7IGRvY3VtZW50Ll9faGFuZGxlYmFyX2N1c3RvbV9sb2FkZXIuX19yZWdpc3RlcmVkX2N0eFtcIiArIHRoaXNbJ19faGFuZGxlYmFyX2N0eF9pZCddICsgXCJdLlwiICsgb3B0aW9ucyk7XHJcbn0pO1xyXG5cclxuLyogIyMjIyMjIyMjIyMjIyMjIyMjIEhFTFBFUiB7TUFSS0RPV059ICMjIyMjIyMjIyMjIyMjIyMjIyAqL1xyXG5IYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKFwibWFya2Rvd25cIiwgZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgIGNvbnN0IGNvbnZlcnRlciA9IG5ldyAocmVxdWlyZSgnc2hvd2Rvd24nKSkuQ29udmVydGVyKCk7XHJcbiAgICByZXR1cm4gbmV3IEhhbmRsZWJhcnMuU2FmZVN0cmluZyhjb252ZXJ0ZXIubWFrZUh0bWwob3B0aW9ucy50b1N0cmluZygpKSk7XHJcbn0pO1xyXG4iLCJpbXBvcnQge2Nsb3NlX21vZGFsLCBvcGVuX21vZGFsfSBmcm9tIFwiLi4vY29tcG9uZW50cy9tb2RhbC5qc1wiO1xyXG5pbXBvcnQge3BhcnNlX2ZldGNoX3Jlc3VsdCwgcHJpbnRfbWVzc2FnZX0gZnJvbSBcIi4uL2NvbXBvbmVudHMvbWVzc2FnZV9ib3guanNcIjtcclxuXHJcbnJlcXVpcmUoJy4vYXV0aC5zY3NzJylcclxuXHJcbmltcG9ydCBzaWduaW4gZnJvbSAnLi9zaWduaW4uaGJzJztcclxuaW1wb3J0IHNpZ251cCBmcm9tICcuL3NpZ251cC5oYnMnO1xyXG5pbXBvcnQgcmVzZXRfcGFzc3dvcmQgZnJvbSAnLi9yZXNldF9wYXNzd29yZC5oYnMnO1xyXG5pbXBvcnQge0xPQ0FMX1VTRVJ9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vdG9vbHMvdXNlclwiO1xyXG5pbXBvcnQge0NsaWVudFN0cmluZ30gZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi90b29scy9jbGllbnRfc3RyaW5nXCI7XHJcblxyXG5mdW5jdGlvbiBvcGVuX21vZGFsX3NpZ25pbigpIHtcclxuICAgIG9wZW5fbW9kYWwoc2lnbmluKHt9LCB7XHJcbiAgICAgICAgc2lnbmluOiBhc3luYyAoZSkgPT4ge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIGF3YWl0IExPQ0FMX1VTRVIubG9naW4oQ2xpZW50U3RyaW5nLkZyb21DbGllbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VzZXJuYW1lJykudmFsdWUpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFzc3dvcmQnKS52YWx1ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZXNldF9wYXNzd29yZDogYXN5bmMgKGUpID0+IHtcclxuICAgICAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1c2VybmFtZScpLnZhbHVlLmxlbmd0aCA9PT0gMClcclxuICAgICAgICAgICAgICAgIHJldHVybiBwcmludF9tZXNzYWdlKCdlcnJvcicsIFwiU3DDqWNpZmlleiB1biB1dGlsaXNhdGV1clwiLCBcIlZldWlsbGV6IHNww6ljaWZpZXIgdW4gbm9tIGQndXRpbGlzYXRldXIgb3UgdW4gbWFpbC5cIilcclxuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgcGFyc2VfZmV0Y2hfcmVzdWx0KGF3YWl0IGZldGNoKGAvYXBpL3Jlc2V0LXBhc3N3b3JkL2AsIHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtlbWFpbDogQ2xpZW50U3RyaW5nLkZyb21DbGllbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VzZXJuYW1lJykudmFsdWUpfSlcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICBpZiAoIXJlcy5tZXNzYWdlKVxyXG4gICAgICAgICAgICAgICAgcHJpbnRfbWVzc2FnZSgnaW5mbycsICdNYWlsIGRlIHLDqWluaXRpYWxpc2F0aW9uIGVudm95w6knLCAnVsOpcmlmaWV6IHZvdHJlIGJvaXRlIG1haWwgcG91ciBwb3Vyc3VpdnJlIGxhIHByb2PDqWR1cmUgZGUgcsOpaW5pdGlhbGlzYXRpb24nKTtcclxuICAgICAgICB9XHJcbiAgICB9KSwgJzUwMHB4JywgJzQwMHB4JywgJ2F1dGgnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gb3Blbl9tb2RhbF9zaWdudXAoKSB7XHJcbiAgICBvcGVuX21vZGFsKHNpZ251cCh7fSwge1xyXG4gICAgICAgIHNpZ251cDogYXN5bmMgKGUpID0+IHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbWFpbCcpLnZhbGlkaXR5LnZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBwcmludF9tZXNzYWdlKCdlcnJvcicsICdFbWFpbCBpbnZhbGlkZScsICd2ZXVpbGxleiBzcMOpY2lmaWVyIHVuIGVtYWlsIHZhbGlkZScpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGF3YWl0IExPQ0FMX1VTRVIucmVnaXN0ZXIoQ2xpZW50U3RyaW5nLkZyb21DbGllbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VzZXJuYW1lJykudmFsdWUpLCBDbGllbnRTdHJpbmcuRnJvbUNsaWVudChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZW1haWwnKS52YWx1ZSksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYXNzd29yZCcpLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9KSwgJzUwMHB4JywgJzQ1MHB4JywgJ2F1dGgnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gb3Blbl9tb2RhbF9yZXNldF9wYXNzd29yZChyZXNldF90b2tlbikge1xyXG4gICAgb3Blbl9tb2RhbChyZXNldF9wYXNzd29yZCh7fSwge1xyXG4gICAgICAgIHJlc2V0OiBhc3luYyAoZSkgPT4ge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHBhcnNlX2ZldGNoX3Jlc3VsdChhd2FpdCBmZXRjaChgL2FwaS9yZXNldC1wYXNzd29yZC8ke3Jlc2V0X3Rva2VufS9gLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDogU3RyaW5nKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYXNzd29yZCcpLnZhbHVlKSxcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICBpZiAoIXJlcy5tZXNzYWdlKVxyXG4gICAgICAgICAgICAgICAgcHJpbnRfbWVzc2FnZSgnaW5mbycsIFwiTW90IGRlIHBhc3NlIHLDqWluaXRpYWxpc8OpXCIsIFwiQ29ubmVjdGV6IHZvdXMgYXZleiB2b3RyZSBub3V2ZWF1IG1vdCBkZSBwYXNzZVwiKTtcclxuICAgICAgICAgICAgbG9jYXRpb24uaHJlZiA9ICcvJ1xyXG4gICAgICAgIH1cclxuICAgIH0pLCAnNTAwcHgnLCAnMjUwcHgnLCAnYXV0aCcpO1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBsb2dvdXQoKSB7XHJcbiAgICBhd2FpdCBMT0NBTF9VU0VSLmxvZ291dCgpO1xyXG59XHJcblxyXG53aW5kb3cuYXV0aCA9IHtvcGVuX21vZGFsX3NpZ25pbiwgb3Blbl9tb2RhbF9zaWdudXAsIGxvZ291dCwgb3Blbl9tb2RhbF9yZXNldF9wYXNzd29yZH1cclxuZXhwb3J0IHtvcGVuX21vZGFsX3NpZ25pbiwgb3Blbl9tb2RhbF9zaWdudXAsIGxvZ291dH0iLCJpbXBvcnQge0Nhcm91c2VsVmlld3BvcnR9IGZyb20gXCIuL3ZpZXdwb3J0L2Nhcm91c2VsX3ZpZXdwb3J0XCI7XHJcbmltcG9ydCB7Q2Fyb3VzZWxPdmVybGF5fSBmcm9tIFwiLi9vdmVybGF5L2Nhcm91c2VsX292ZXJsYXlcIjtcclxuXHJcbnJlcXVpcmUoJy4vY2Fyb3VzZWwuc2NzcycpXHJcbnJlcXVpcmUoJy4vY2Fyb3VzZWxfZnVsbHNjcmVlbi5zY3NzJylcclxuXHJcbmNvbnN0IGNhcm91c2VsX2Z1bGxzY3JlZW5faGJzID0gcmVxdWlyZSgnLi9jYXJvdXNlbF9mdWxsc2NyZWVuLmhicycpO1xyXG5cclxubGV0IEZVTExTQ1JFRU5fQ09OVEFJTkVSID0gbnVsbDtcclxuXHJcbmNsYXNzIENhcm91c2VsIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGxpc3Qge0Nhcm91c2VsTGlzdH1cclxuICAgICAqIEBwYXJhbSBjb250YWluZXIge0hUTUxFbGVtZW50fVxyXG4gICAgICogQHBhcmFtIGJhc2VfaXRlbVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihsaXN0LCBjb250YWluZXIsIGJhc2VfaXRlbSkge1xyXG4gICAgICAgIHRoaXMubGlzdCA9IGxpc3Q7XHJcbiAgICAgICAgbGlzdC5vbl9zZWxlY3RfaXRlbSA9IChpdGVtKSA9PiB7XHJcblxyXG4gICAgICAgICAgICBpbXBvcnQoJy4uLy4uLy4uLy4uL2VtYmVkX3ZpZXdlcnMnKS50aGVuKGFzeW5jIF8gPT4ge1xyXG4gICAgICAgICAgICAgICAgbmV3IENhcm91c2VsVmlld3BvcnQoY29udGFpbmVyLCBpdGVtKTtcclxuICAgICAgICAgICAgICAgIG5ldyBDYXJvdXNlbE92ZXJsYXkodGhpcywgY29udGFpbmVyLCBpdGVtKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGlzdC5zZWxlY3RfaXRlbShiYXNlX2l0ZW0sIHRydWUpO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXRfZnVsbHNjcmVlbl9jb250YWluZXIoKSB7XHJcbiAgICAgICAgaWYgKCFGVUxMU0NSRUVOX0NPTlRBSU5FUikge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdfY29udGFpbmVyID0gY2Fyb3VzZWxfZnVsbHNjcmVlbl9oYnMoe30pO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZChuZXdfY29udGFpbmVyKTtcclxuICAgICAgICAgICAgRlVMTFNDUkVFTl9DT05UQUlORVIgPSB7XHJcbiAgICAgICAgICAgICAgICByb290OiBuZXdfY29udGFpbmVyLFxyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZF9jb250YWluZXI6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYXJvdXNlbC1mdWxsc2NyZWVuJyksXHJcbiAgICAgICAgICAgICAgICBsaXN0X2NvbnRhaW5lcjogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Nhcm91c2VsLWZ1bGxzY3JlZW4tbGlzdCcpLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBGVUxMU0NSRUVOX0NPTlRBSU5FUjtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5vbl9jbG9zZSlcclxuICAgICAgICAgICAgdGhpcy5vbl9jbG9zZSgpO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmlubmVySFRNTCA9IG51bGw7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7Q2Fyb3VzZWx9XHJcblxyXG4iLCJjb25zdCBjYXJvdXNlbF9saXN0X2hicyA9IHJlcXVpcmUoJy4vY2Fyb3VzZWxfbGlzdC5oYnMnKTtcclxuY29uc3QgY2Fyb3VzZWxfbGlzdF9pdGVtX2hicyA9IHJlcXVpcmUoJy4vY2Fyb3VzZWxfbGlzdF9pdGVtLmhicycpO1xyXG5cclxuY2xhc3MgQ2Fyb3VzZWxMaXN0IHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGRpcmVjdG9yeV9jb250ZW50IHtEaXJlY3RvcnlDb250ZW50fVxyXG4gICAgICogQHBhcmFtIG9uX3NlbGVjdF9pdGVtXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGRpcmVjdG9yeV9jb250ZW50LCBvbl9zZWxlY3RfaXRlbSkge1xyXG4gICAgICAgIHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQgPSBkaXJlY3RvcnlfY29udGVudDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyW119XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5vYmplY3RzID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBkaXJlY3RvcnlfY29udGVudC5vYmplY3RzKVxyXG4gICAgICAgICAgICB0aGlzLm9iamVjdHMucHVzaChlbnRyeS5pZCk7XHJcblxyXG4gICAgICAgIHRoaXMub25fc2VsZWN0X2l0ZW0gPSBvbl9zZWxlY3RfaXRlbTtcclxuXHJcbiAgICAgICAgdGhpcy5fbGFzdF9zZWxlY3RlZCA9IG51bGw7XHJcblxyXG4gICAgICAgIHRoaXMuZWxlbWVudF9tYXAgPSBuZXcgTWFwKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZWN0X2l0ZW0obWV0YV9kYXRhLCBzY3JvbGxfY2VudGVyID0gZmFsc2UpIHtcclxuICAgICAgICBpZiAodGhpcy5fbGFzdF9zZWxlY3RlZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9sYXN0X3NlbGVjdGVkLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2xhc3Rfc2VsZWN0ZWQgPSB0aGlzLmVsZW1lbnRfbWFwLmdldChtZXRhX2RhdGEuaWQpO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuX2xhc3Rfc2VsZWN0ZWQpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB0aGlzLl9sYXN0X3NlbGVjdGVkLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJyk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm9uX3NlbGVjdF9pdGVtKVxyXG4gICAgICAgICAgICB0aGlzLm9uX3NlbGVjdF9pdGVtKG1ldGFfZGF0YSk7XHJcbiAgICAgICAgdGhpcy5fbGFzdF9zZWxlY3RlZC5zY3JvbGxJbnRvVmlldyh7IGJlaGF2aW9yOiBcInNtb290aFwiLCBpbmxpbmU6IHNjcm9sbF9jZW50ZXIgPyAnY2VudGVyJyA6ICduZWFyZXN0J30pO1xyXG5cclxuICAgICAgICB0aGlzLnVwZGF0ZV9sZWZ0X3JpZ2h0X2J1dHRvbnMoKTtcclxuICAgIH1cclxuXHJcbiAgICBzZWxlY3RfbmV4dCgpIHtcclxuICAgICAgICBjb25zdCBtZXRhX2RhdGEgPSB0aGlzLmRpcmVjdG9yeV9jb250ZW50Lm5hdmlnYXRvci5maWxlc3lzdGVtLmdldF9vYmplY3RfZGF0YSh0aGlzLl9sYXN0X3NlbGVjdGVkLm5leHRTaWJsaW5nLml0ZW1faWQpO1xyXG4gICAgICAgIGlmIChtZXRhX2RhdGEuaXNfcmVndWxhcl9maWxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0X2l0ZW0obWV0YV9kYXRhLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZWN0X3ByZXZpb3VzKCkge1xyXG4gICAgICAgIGNvbnN0IG1ldGFfZGF0YSA9IHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQubmF2aWdhdG9yLmZpbGVzeXN0ZW0uZ2V0X29iamVjdF9kYXRhKHRoaXMuX2xhc3Rfc2VsZWN0ZWQucHJldmlvdXNTaWJsaW5nLml0ZW1faWQpO1xyXG4gICAgICAgIGlmIChtZXRhX2RhdGEuaXNfcmVndWxhcl9maWxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0X2l0ZW0obWV0YV9kYXRhLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgQHBhcmFtIGNvbnRhaW5lciB7SFRNTEVsZW1lbnR9XHJcbiAgICAgKi9cclxuICAgIGJ1aWxkX3Zpc3VhbChjb250YWluZXIpIHtcclxuICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgY29uc3QgY2Fyb3VzZWxfbGlzdCA9IGNhcm91c2VsX2xpc3RfaGJzKHt9LCB7XHJcbiAgICAgICAgICAgIG1vdmVfbGVmdDogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RfcHJldmlvdXMoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbW92ZV9yaWdodDogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RfbmV4dCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5tb3ZlX2xlZnRfYnV0dG9uID0gY2Fyb3VzZWxfbGlzdC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjYXJvdXNlbC1tb3ZlLWxlZnQnKVswXTtcclxuICAgICAgICB0aGlzLm1vdmVfcmlnaHRfYnV0dG9uID0gY2Fyb3VzZWxfbGlzdC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjYXJvdXNlbC1tb3ZlLXJpZ2h0JylbMF07XHJcblxyXG4gICAgICAgIGNvbnN0IGNhcm91c2VsX2xpc3RfZGl2ID0gY2Fyb3VzZWxfbGlzdC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjYXJvdXNlbC1saXN0JylbMF07XHJcblxyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY2Fyb3VzZWxfbGlzdF9kaXY7XHJcbiAgICAgICAgY2Fyb3VzZWxfbGlzdF9kaXYuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCBlID0+IHtcclxuICAgICAgICAgICAgY2Fyb3VzZWxfbGlzdC5zY3JvbGxMZWZ0ICs9IChlLmRlbHRhWSAqIDAuNSk7XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgY2Fyb3VzZWxfbGlzdF9kaXYuaW5uZXJIVE1MID0gJyc7XHJcblxyXG4gICAgICAgIGNvbnN0IGxlZnRfc3BhY2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgbGVmdF9zcGFjZXIuc3R5bGUud2lkdGggPSAnMTAwcHgnO1xyXG4gICAgICAgIGNhcm91c2VsX2xpc3RfZGl2LmFwcGVuZChsZWZ0X3NwYWNlcik7XHJcblxyXG4gICAgICAgIGZvciAoY29uc3Qgb2JqZWN0IG9mIHRoaXMub2JqZWN0cykge1xyXG4gICAgICAgICAgICBjb25zdCBtZXRhX2RhdGEgPSB0aGlzLmRpcmVjdG9yeV9jb250ZW50Lm5hdmlnYXRvci5maWxlc3lzdGVtLmdldF9vYmplY3RfZGF0YShvYmplY3QpO1xyXG4gICAgICAgICAgICBpZiAobWV0YV9kYXRhLmlzX3JlZ3VsYXJfZmlsZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2FsbGJhY2tzID0ge307XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gY2Fyb3VzZWxfbGlzdF9pdGVtX2hicyh7aXRlbTogbWV0YV9kYXRhfSwgY2FsbGJhY2tzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudF9tYXAuc2V0KG1ldGFfZGF0YS5pZCwgaXRlbSk7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFja3Mub25fY2xpY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RfaXRlbShtZXRhX2RhdGEpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpdGVtLml0ZW1faWQgPSBtZXRhX2RhdGEuaWQ7XHJcbiAgICAgICAgICAgICAgICBjYXJvdXNlbF9saXN0X2Rpdi5hcHBlbmQoaXRlbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHJpZ2h0X3NwYWNlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHJpZ2h0X3NwYWNlci5zdHlsZS53aWR0aCA9ICcxMDBweCc7XHJcbiAgICAgICAgY2Fyb3VzZWxfbGlzdF9kaXYuYXBwZW5kKHJpZ2h0X3NwYWNlcik7XHJcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZChjYXJvdXNlbF9saXN0KTtcclxuICAgICAgICB0aGlzLnVwZGF0ZV9sZWZ0X3JpZ2h0X2J1dHRvbnMoKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVfbGVmdF9yaWdodF9idXR0b25zKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm1vdmVfbGVmdF9idXR0b24pIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9sYXN0X3NlbGVjdGVkIHx8ICF0aGlzLl9sYXN0X3NlbGVjdGVkLnByZXZpb3VzU2libGluZy5jbGFzc0xpc3QuY29udGFpbnMoJ2Nhcm91c2VsLWl0ZW0nKSlcclxuICAgICAgICAgICAgICAgIHRoaXMubW92ZV9sZWZ0X2J1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmVfbGVmdF9idXR0b24uc3R5bGUuZGlzcGxheSA9ICd1bnNldCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLm1vdmVfcmlnaHRfYnV0dG9uKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fbGFzdF9zZWxlY3RlZCB8fCAhdGhpcy5fbGFzdF9zZWxlY3RlZC5uZXh0U2libGluZy5jbGFzc0xpc3QuY29udGFpbnMoJ2Nhcm91c2VsLWl0ZW0nKSlcclxuICAgICAgICAgICAgICAgIHRoaXMubW92ZV9yaWdodF9idXR0b24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlX3JpZ2h0X2J1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ3Vuc2V0JztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7Q2Fyb3VzZWxMaXN0fSIsImltcG9ydCB7aHVtYW5GaWxlU2l6ZSwgUEFHRV9DT05URVhUfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vY29tbW9uL3Rvb2xzL3V0aWxzXCI7XHJcbmltcG9ydCB7cHJpbnRfbWVzc2FnZX0gZnJvbSBcIi4uLy4uL21lc3NhZ2VfYm94XCI7XHJcblxyXG5jbGFzcyBDYXJvdXNlbE92ZXJsYXkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gY2Fyb3VzZWwge0Nhcm91c2VsfVxyXG4gICAgICogQHBhcmFtIGNvbnRhaW5lciB7SFRNTEVsZW1lbnR9XHJcbiAgICAgKiBAcGFyYW0gaXRlbVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihjYXJvdXNlbCwgY29udGFpbmVyLCBpdGVtKSB7XHJcbiAgICAgICAgdGhpcy5jYXJvdXNlbCA9IGNhcm91c2VsO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG5cclxuICAgICAgICB0aGlzLmNhcm91c2VsX292ZXJsYXkgPSByZXF1aXJlKCcuL2Nhcm91c2VsX292ZXJsYXkuaGJzJykoe1xyXG4gICAgICAgICAgICBpdGVtOiBpdGVtLFxyXG4gICAgICAgICAgICBmaWxlX3NpemU6IGh1bWFuRmlsZVNpemUoaXRlbS5zaXplKVxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgY2xvc2VfY2Fyb3VzZWw6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNhcm91c2VsLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRvd25sb2FkOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cub3BlbihgJHtQQUdFX0NPTlRFWFQucmVwb3NfcGF0aCgpfS9maWxlLyR7aXRlbS5pZH1gLCAnX2JsYW5rJykuZm9jdXMoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2hhcmU6IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCB1cmwgPSBgJHtsb2NhdGlvbi5vcmlnaW59JHtQQUdFX0NPTlRFWFQucmVwb3NfcGF0aCgpfS9maWxlLyR7aXRlbS5pZH1gO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQodXJsKTtcclxuICAgICAgICAgICAgICAgIHByaW50X21lc3NhZ2UoJ2luZm8nLCAnTGllbiBjb3Bpw6kgZGFucyBsZSBwcmVzc2UgLSBwYXBpZXInLCB1cmwpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBjb250YWluZXIuZmlyc3RDaGlsZC5iZWZvcmUodGhpcy5jYXJvdXNlbF9vdmVybGF5KVxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHtDYXJvdXNlbE92ZXJsYXl9IiwiY29uc3QgY2Fyb3VzZWxfaXRlbV9oYnMgPSByZXF1aXJlKCcuL2Nhcm91c2VsX3ZpZXdwb3J0LmhicycpXHJcblxyXG5mdW5jdGlvbiBjbGFtcChzLCBhLCBiKSB7XHJcbiAgICByZXR1cm4gcyA8IGEgPyBhIDogcyA+IGIgPyBiIDogcztcclxufVxyXG5cclxuY2xhc3MgQ2Fyb3VzZWxWaWV3cG9ydCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXIsIGl0ZW0pIHtcclxuICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUge0hUTUxFbGVtZW50fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0IHZpc3VhbCA9IGNhcm91c2VsX2l0ZW1faGJzKHtpdGVtOiBpdGVtfSk7XHJcbiAgICAgICAgaWYgKGl0ZW0uZGVzY3JpcHRpb24gJiYgaXRlbS5kZXNjcmlwdGlvbi5wbGFpbigpICE9PSAnJykge1xyXG4gICAgICAgICAgICBpbXBvcnQoJy4uLy4uLy4uLy4uLy4uL2VtYmVkX3ZpZXdlcnMvY3VzdG9tX2VsZW1lbnRzL2RvY3VtZW50L3Nob3dkb3duX2xvYWRlcicpLnRoZW4oc2hvd2Rvd24gPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGlyZWN0b3J5X2Rlc2NyaXB0aW9uID0gdmlzdWFsLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2Nhcm91c2VsLWRlc2NyaXB0aW9uJylbMF07XHJcbiAgICAgICAgICAgICAgICBpZiAoZGlyZWN0b3J5X2Rlc2NyaXB0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0b3J5X2Rlc2NyaXB0aW9uLmlubmVySFRNTCA9IHNob3dkb3duLmNvbnZlcnRfdGV4dChpdGVtLmRlc2NyaXB0aW9uLnBsYWluKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0b3J5X2Rlc2NyaXB0aW9uLnN0eWxlLnBhZGRpbmcgPSAnMjBweCc7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0b3J5X2Rlc2NyaXB0aW9uLnN0eWxlLmRpc3BsYXkgPSAndW5zZXQnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmQodmlzdWFsKTtcclxuXHJcbiAgICAgICAgdGhpcy5zY2FsZSA9IDE7XHJcbiAgICAgICAgdGhpcy50cmFuc2xhdGlvblggPSAwO1xyXG4gICAgICAgIHRoaXMudHJhbnNsYXRpb25ZID0gMDtcclxuXHJcbiAgICAgICAgdmlzdWFsLmFkZEV2ZW50TGlzdGVuZXIoXCJ3aGVlbFwiLCBlID0+IHtcclxuICAgICAgICAgICAgaWYgKGUuY3RybEtleSkge1xyXG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHpvb20gPSAtY2xhbXAoZS5kZWx0YVksIC0yOSwgMjkpIC8gMzAgKyAxO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY2FsZSA9IGNsYW1wKHRoaXMuc2NhbGUgKiB6b29tLCAxLCA1MCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXRYID0gZS5jbGllbnRYIC0gd2luZG93LndpZHRoIC8gMjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldFkgPSBlLmNsaWVudFkgLSB3aW5kb3cuaGVpZ2h0IC8gMjtcclxuICAgICAgICAgICAgICAgIHZpc3VhbC5zdHlsZS50cmFuc2Zvcm0gPSBgc2NhbGUoJHt0aGlzLnNjYWxlfSkgdHJhbnNsYXRlKCR7dGhpcy50cmFuc2xhdGlvblh9cHgsICR7dGhpcy50cmFuc2xhdGlvbll9cHgpYDtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQge0Nhcm91c2VsVmlld3BvcnR9IiwiY29uc3QgY29udGV4dF9hY3Rpb25faGJzID0gcmVxdWlyZSgnLi9jb250ZXh0X2FjdGlvbi5oYnMnKVxyXG5cclxuY29uc3QgbW91c2VfcG9zID0ge3g6IDAsIHk6IDB9XHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGV2ZW50ID0+IHtcclxuICAgIG1vdXNlX3Bvcy54ID0gZXZlbnQuY2xpZW50WFxyXG4gICAgbW91c2VfcG9zLnkgPSBldmVudC5jbGllbnRZXHJcbn0pXHJcblxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgIGlmIChsYXN0X2NvbnRleHRfYWN0aW9uKVxyXG4gICAgICAgIGxhc3RfY29udGV4dF9hY3Rpb24ucmVtb3ZlKCk7XHJcbiAgICBsYXN0X2NvbnRleHRfYWN0aW9uID0gbnVsbDtcclxufSlcclxuXHJcbmRvY3VtZW50Lm9uY29udGV4dG1lbnUgPSAoKSA9PiB7XHJcbiAgICBpZiAobGFzdF9jb250ZXh0X2FjdGlvbilcclxuICAgICAgICBsYXN0X2NvbnRleHRfYWN0aW9uLnJlbW92ZSgpO1xyXG4gICAgbGFzdF9jb250ZXh0X2FjdGlvbiA9IG51bGw7XHJcbn1cclxuXHJcbmxldCBsYXN0X2NvbnRleHRfYWN0aW9uID0gbnVsbDtcclxuXHJcbmxldCBvYmplY3RzID0ge31cclxuXHJcbmZ1bmN0aW9uIGNsaWNrX29iamVjdChpZCkge1xyXG4gICAgb2JqZWN0c1tpZF0oKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc3Bhd25fY29udGV4dF9hY3Rpb24oYWN0aW9ucykge1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKGxhc3RfY29udGV4dF9hY3Rpb24pXHJcbiAgICAgICAgICAgIGxhc3RfY29udGV4dF9hY3Rpb24ucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgIG9iamVjdHMgPSB7fVxyXG4gICAgICAgIGZvciAoY29uc3QgYWN0aW9uIG9mIGFjdGlvbnMpXHJcbiAgICAgICAgICAgIG9iamVjdHNbYWN0aW9uLnRpdGxlXSA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChsYXN0X2NvbnRleHRfYWN0aW9uKVxyXG4gICAgICAgICAgICAgICAgICAgIGxhc3RfY29udGV4dF9hY3Rpb24ucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICBsYXN0X2NvbnRleHRfYWN0aW9uID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGFjdGlvbi5hY3Rpb24oKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICBsYXN0X2NvbnRleHRfYWN0aW9uID0gY29udGV4dF9hY3Rpb25faGJzKHthY3Rpb25zOiBhY3Rpb25zfSk7XHJcbiAgICAgICAgbGFzdF9jb250ZXh0X2FjdGlvbi5zdHlsZS5sZWZ0ID0gTWF0aC5taW4od2luZG93LmlubmVyV2lkdGggLSAyMDAsIG1vdXNlX3Bvcy54KSArICdweCc7XHJcbiAgICAgICAgbGFzdF9jb250ZXh0X2FjdGlvbi5zdHlsZS50b3AgPSBNYXRoLm1pbih3aW5kb3cuaW5uZXJIZWlnaHQgLSA0MCAqIGFjdGlvbnMubGVuZ3RoLCBtb3VzZV9wb3MueSkgKyAncHgnO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKGxhc3RfY29udGV4dF9hY3Rpb24pXHJcbiAgICB9LCAxMCk7XHJcbn1cclxuXHJcbndpbmRvdy5jb250ZXh0X2FjdGlvbiA9IHtzcGF3bl9jb250ZXh0X2FjdGlvbiwgY2xpY2tfb2JqZWN0fVxyXG5leHBvcnQge3NwYXduX2NvbnRleHRfYWN0aW9ufSIsIlxyXG5jb25zdCBtZXNzYWdlX2JveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtZXNzYWdlLWJveCcpXHJcbmNvbnN0IG1lc3NhZ2VfYm94X21lc3NhZ2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWVzc2FnZS1ib3gtbWVzc2FnZScpXHJcbmxldCBtZXNzYWdlX3RpbWVvdXQgPSBudWxsO1xyXG5cclxuZnVuY3Rpb24gcHJpbnRfbWVzc2FnZShzZXZlcml0eSwgdGl0bGUsIG1lc3NhZ2UpIHtcclxuICAgIGNvbnNvbGUud2FybihgTWVzc2FnZSBbJHtzZXZlcml0eX1dIDogJHt0aXRsZX1cXG4ke21lc3NhZ2V9YClcclxuICAgIG1lc3NhZ2VfYm94LmNsYXNzTGlzdC5hZGQoJ21lc3NhZ2UtYm94LW9wZW4nKTtcclxuICAgIG1lc3NhZ2VfYm94LmNsYXNzTGlzdC5yZW1vdmUoJ21lc3NhZ2UtYm94LWNsb3NlJyk7XHJcbiAgICBtZXNzYWdlX2JveC5xdWVyeVNlbGVjdG9yKCdoMScpLmlubmVyVGV4dCA9IHRpdGxlO1xyXG4gICAgbWVzc2FnZV9ib3hfbWVzc2FnZS5pbm5lclRleHQgPSBtZXNzYWdlO1xyXG4gICAgaWYgKG1lc3NhZ2VfdGltZW91dClcclxuICAgICAgICBjbGVhclRpbWVvdXQobWVzc2FnZV90aW1lb3V0KVxyXG4gICAgbWVzc2FnZV90aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgbWVzc2FnZV9ib3guY2xhc3NMaXN0LnJlbW92ZSgnbWVzc2FnZS1ib3gtb3BlbicpO1xyXG4gICAgICAgIG1lc3NhZ2VfYm94LmNsYXNzTGlzdC5hZGQoJ21lc3NhZ2UtYm94LWNsb3NlJyk7XHJcbiAgICAgICAgbWVzc2FnZV90aW1lb3V0ID0gbnVsbDtcclxuICAgIH0sIDE1MDAwKVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBwYXJzZV9mZXRjaF9yZXN1bHQocmVzdWx0KSB7XHJcbiAgICBpZiAocmVzdWx0LnJlZGlyZWN0ZWQpIHtcclxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHJlc3VsdC51cmw7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGpzb25EYXRhID0gdW5kZWZpbmVkO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBqc29uRGF0YSA9IGF3YWl0IHJlc3VsdC50ZXh0KCk7XHJcbiAgICAgICAganNvbkRhdGEgPSBKU09OLnBhcnNlKGpzb25EYXRhKVxyXG4gICAgfVxyXG4gICAgY2F0Y2gge1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChqc29uRGF0YSkge1xyXG4gICAgICAgIGlmIChqc29uRGF0YSAmJiBqc29uRGF0YS5tZXNzYWdlKVxyXG4gICAgICAgICAgICBwcmludF9tZXNzYWdlKGpzb25EYXRhLm1lc3NhZ2Uuc2V2ZXJpdHksIGpzb25EYXRhLm1lc3NhZ2UudGl0bGUsIGpzb25EYXRhLm1lc3NhZ2UuY29udGVudClcclxuICAgICAgICByZXR1cm4ganNvbkRhdGE7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChyZXN1bHQuc3RhdHVzKSB7XHJcbiAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMgIT09IDIwMCAmJiByZXN1bHQuc3RhdHVzICE9PSAyMDEgJiZyZXN1bHQuc3RhdHVzICE9PSAyMDIpXHJcbiAgICAgICAgICAgIHByaW50X21lc3NhZ2UoXCJFcnJvclwiLCBcIlVua25vd24gZXJyb3JcIiwgYCR7cmVzdWx0LnN0YXR1c30gOiAke3Jlc3VsdC5zdGF0dXNUZXh0fWApXHJcbiAgICB9XHJcbiAgICByZXR1cm4ganNvbkRhdGE7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNsb3NlX21lc3NhZ2UoKSB7XHJcbiAgICBtZXNzYWdlX2JveC5jbGFzc0xpc3QucmVtb3ZlKCdtZXNzYWdlLWJveC1vcGVuJyk7XHJcbiAgICBtZXNzYWdlX2JveC5jbGFzc0xpc3QuYWRkKCdtZXNzYWdlLWJveC1jbG9zZScpO1xyXG4gICAgbWVzc2FnZV90aW1lb3V0ID0gbnVsbDtcclxufVxyXG5cclxud2luZG93Lm1lc3NhZ2VfYm94ID0ge3ByaW50X21lc3NhZ2UsIHBhcnNlX2ZldGNoX3Jlc3VsdCwgY2xvc2VfbWVzc2FnZX1cclxuZXhwb3J0IHtwcmludF9tZXNzYWdlLCBwYXJzZV9mZXRjaF9yZXN1bHQsIGNsb3NlX21lc3NhZ2V9IiwiY29uc3QgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9kYWwnKTtcclxuY29uc3QgbW9kYWxfY29udGVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RhbC1jb250ZW50Jyk7XHJcblxyXG5mdW5jdGlvbiBjbG9zZV9tb2RhbCgpIHtcclxuICAgIGlmIChtb2RhbF9jb250ZW50Lm9uX2Nsb3NlX21vZGFsKVxyXG4gICAgICAgIGlmICghbW9kYWxfY29udGVudC5vbl9jbG9zZV9tb2RhbCgpKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICBtb2RhbC5jbGFzc0xpc3QucmVtb3ZlKCdzaG93JylcclxufVxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSBjb250ZW50XHJcbiAqIEBwYXJhbSBjdXN0b21fd2lkdGgge3N0cmluZ3xudWxsfVxyXG4gKiBAcGFyYW0gY3VzdG9tX2hlaWdodCB7c3RyaW5nfG51bGx9XHJcbiAqIEBwYXJhbSBtb2RhbF9jbGFzcyB7c3RyaW5nfG51bGx9XHJcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fVxyXG4gKi9cclxuZnVuY3Rpb24gb3Blbl9tb2RhbChjb250ZW50LCBjdXN0b21fd2lkdGggPSBudWxsLCBjdXN0b21faGVpZ2h0ID0gbnVsbCwgbW9kYWxfY2xhc3M9IG51bGwpIHtcclxuICAgIG1vZGFsX2NvbnRlbnQuY2xhc3NMaXN0LnJlbW92ZSguLi5tb2RhbF9jb250ZW50LmNsYXNzTGlzdCk7XHJcbiAgICBtb2RhbC5jbGFzc0xpc3QuYWRkKCdzaG93JylcclxuXHJcbiAgICBpZiAoY3VzdG9tX3dpZHRoKVxyXG4gICAgICAgIG1vZGFsX2NvbnRlbnQuc3R5bGUud2lkdGggPSBjdXN0b21fd2lkdGg7XHJcbiAgICBlbHNlXHJcbiAgICAgICAgbW9kYWxfY29udGVudC5zdHlsZS53aWR0aCA9ICdmaXQtY29udGVudCc7XHJcbiAgICBpZiAoY3VzdG9tX2hlaWdodClcclxuICAgICAgICBtb2RhbF9jb250ZW50LnN0eWxlLmhlaWdodCA9IGN1c3RvbV9oZWlnaHQ7XHJcbiAgICBlbHNlXHJcbiAgICAgICAgbW9kYWxfY29udGVudC5zdHlsZS5oZWlnaHQgPSAnZml0LWNvbnRlbnQnO1xyXG4gICAgbW9kYWxfY29udGVudC5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgaWYgKG1vZGFsX2NsYXNzKVxyXG4gICAgICAgIG1vZGFsX2NvbnRlbnQuY2xhc3NMaXN0LmFkZChtb2RhbF9jbGFzcylcclxuXHJcbiAgICBpZiAoY29udGVudC5sZW5ndGgpXHJcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGNvbnRlbnQpXHJcbiAgICAgICAgICAgIG1vZGFsX2NvbnRlbnQuYXBwZW5kKGl0ZW0pO1xyXG4gICAgZWxzZVxyXG4gICAgICAgIG1vZGFsX2NvbnRlbnQuYXBwZW5kKGNvbnRlbnQpO1xyXG4gICAgbW9kYWxfY29udGVudC5vbl9jbG9zZV9tb2RhbCA9IG51bGw7XHJcblxyXG4gICAgY29uc3QgaW5wdXRzID0gbW9kYWxfY29udGVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW5wdXQnKTtcclxuICAgIGlmIChpbnB1dHMubGVuZ3RoICE9PSAwKVxyXG4gICAgICAgIGlucHV0c1swXS5mb2N1cygpO1xyXG4gICAgcmV0dXJuIG1vZGFsX2NvbnRlbnQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzX21vZGFsX29wZW4oKSB7XHJcbiAgICByZXR1cm4gbW9kYWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdzaG93JylcclxufVxyXG5cclxud2luZG93Lm1vZGFsID0ge29wZW5fbW9kYWwsIGNsb3NlX21vZGFsLCBpc19vcGVuZWQ6IGlzX21vZGFsX29wZW59XHJcbmV4cG9ydCB7b3Blbl9tb2RhbCwgY2xvc2VfbW9kYWwsIGlzX21vZGFsX29wZW59IiwiaW1wb3J0IHtvcGVuX21vZGFsfSBmcm9tIFwiLi4vY29tcG9uZW50cy9tb2RhbC5qc1wiO1xyXG5cclxucmVxdWlyZSgnLi9jcmVhdGUtcmVwb3Muc2NzcycpXHJcblxyXG5jb25zdCBjcmVhdGVfcmVwb3MgPSByZXF1aXJlKCcuL2NyZWF0ZV9yZXBvcy5oYnMnKVxyXG5cclxuZnVuY3Rpb24gb3Blbl9jcmVhdGVfcmVwb3NfbW9kYWwoKSB7XHJcbiAgICBvcGVuX21vZGFsKGNyZWF0ZV9yZXBvcygpLCAnNTAwcHgnLCAnMzUwcHgnLCAnY3JlYXRlLXJlcG9zJyk7XHJcbn1cclxuXHJcbndpbmRvdy5jcmVhdGVfcmVwb3MgPSB7b3Blbl9jcmVhdGVfcmVwb3NfbW9kYWx9XHJcbmV4cG9ydCB7b3Blbl9jcmVhdGVfcmVwb3NfbW9kYWx9XHJcbiIsImltcG9ydCB7b3Blbl9tb2RhbH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvbW9kYWwuanNcIjtcclxuXHJcbnJlcXVpcmUoJy4vZGVsZXRlLXJlcG9zLnNjc3MnKVxyXG5cclxuY29uc3QgZGVsZXRlX3JlcG9zX2Zvcm0gPSByZXF1aXJlKCcuL2RlbGV0ZV9yZXBvcy5oYnMnKVxyXG5cclxuZnVuY3Rpb24gZGVsZXRlX3JlcG9zKGUpIHtcclxuICAgIG9wZW5fbW9kYWwoZGVsZXRlX3JlcG9zX2Zvcm0oZSwge1xyXG4gICAgICAgIGNsaWNrZWQ6IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHJlbWFpbmluZ19zIDw9IDApIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IGZldGNoKGAvJHtlLnVzZXJuYW1lfS8ke2UubmFtZX0vZGVsZXRlYCwge21ldGhvZDonUE9TVCd9KVxyXG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uID0gYC9gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSksICc1MDBweCcsICcxODBweCcsICdkZWxldGUtcmVwb3MnKTtcclxuXHJcbiAgICBsZXQgcmVtYWluaW5nX3MgPSA1O1xyXG4gICAgY29uc3QgY291bnRkb3duX2JhciA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3Byb2dyZXNzLWJhcicpWzBdO1xyXG4gICAgY29uc3QgY291bnRkb3duX2J1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb3VudGRvd24tYnV0dG9uJyk7XHJcbiAgICBjb3VudGRvd25fYnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgIGNvbnN0IGNvdW50ZG93biA9ICgpID0+IHtcclxuICAgICAgICBpZiAocmVtYWluaW5nX3MgPiAwKSB7XHJcbiAgICAgICAgICAgIHJlbWFpbmluZ19zIC09IDEgLyAzMDtcclxuICAgICAgICAgICAgc2V0VGltZW91dChjb3VudGRvd24sIDEwMDAgLyAzMCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY291bnRkb3duX2J1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjb3VudGRvd25fYnV0dG9uLnZhbHVlID0gJ1N1cHByaW1lcidcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb3VudGRvd25fYnV0dG9uLnZhbHVlID0gYCR7TWF0aC5jZWlsKHJlbWFpbmluZ19zKX1zYFxyXG4gICAgICAgIGNvdW50ZG93bl9iYXIuc3R5bGUud2lkdGggPSBgJHsxMDAgLSByZW1haW5pbmdfcyAqIDIwfSVgXHJcbiAgICB9XHJcbiAgICBjb3VudGRvd24oKTtcclxufVxyXG5cclxud2luZG93LmRlbGV0ZV9yZXBvcyA9IHtkZWxldGVfcmVwb3N9XHJcbmV4cG9ydCB7ZGVsZXRlX3JlcG9zfSIsImltcG9ydCB7Y2xvc2VfbW9kYWwsIG9wZW5fbW9kYWx9IGZyb20gXCIuLi9jb21wb25lbnRzL21vZGFsLmpzXCI7XHJcbmltcG9ydCB7ZGVsZXRlX3JlcG9zfSBmcm9tIFwiLi4vZGVsZXRlX3JlcG9zL2RlbGV0ZV9yZXBvc19mb3JtXCI7XHJcbmltcG9ydCB7Q2xpZW50U3RyaW5nfSBmcm9tIFwiLi4vLi4vLi4vY29tbW9uL3Rvb2xzL2NsaWVudF9zdHJpbmdcIjtcclxuaW1wb3J0IHtwYXJzZV9mZXRjaF9yZXN1bHR9IGZyb20gXCIuLi9jb21wb25lbnRzL21lc3NhZ2VfYm94XCI7XHJcblxyXG5yZXF1aXJlKCcuL2VkaXQtcmVwb3Muc2NzcycpXHJcblxyXG5jb25zdCBlZGl0X3JlcG9zX2Zvcm0gPSByZXF1aXJlKCcuL2VkaXRfcmVwb3MuaGJzJylcclxuXHJcbmZ1bmN0aW9uIGVkaXRfcmVwb3MoZSkge1xyXG4gICAgZS5wcm9wX3B1YmxpYyA9IGUuc3RhdHVzID09PSAncHVibGljJztcclxuICAgIGUucHJvcF9oaWRkZW4gPSBlLnN0YXR1cyA9PT0gJ2hpZGRlbic7XHJcbiAgICBlLnByb3BfcHJpdmF0ZSA9IGUuc3RhdHVzID09PSAncHJpdmF0ZSc7XHJcbiAgICBvcGVuX21vZGFsKGVkaXRfcmVwb3NfZm9ybShlLCB7XHJcbiAgICAgICAgc3VibWl0OiBhc3luYyAoKSA9PiB7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheV9uYW1lOiBDbGllbnRTdHJpbmcuRnJvbUNsaWVudChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGlzcGxheV9uYW1lJykudmFsdWUpLFxyXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IENsaWVudFN0cmluZy5Gcm9tQ2xpZW50KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZXNjcmlwdGlvbicpLnZhbHVlKSxcclxuICAgICAgICAgICAgICAgIG1heF9maWxlX3NpemU6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXhfZmlsZV9zaXplJykudmFsdWUsXHJcbiAgICAgICAgICAgICAgICBndWVzdF9maWxlX2xpZmV0aW1lOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ3Vlc3RfZmlsZV9saWZldGltZScpLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgbmFtZTogQ2xpZW50U3RyaW5nLkZyb21DbGllbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25hbWUnKS52YWx1ZSksXHJcbiAgICAgICAgICAgICAgICBzdGF0dXM6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGF0dXMnKS52YWx1ZSxcclxuICAgICAgICAgICAgICAgIGFsbG93X3Zpc2l0b3JfdXBsb2FkOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWxsb3dfdmlzaXRvcl91cGxvYWQnKS5jaGVja2VkLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGF3YWl0IHBhcnNlX2ZldGNoX3Jlc3VsdChhd2FpdCBmZXRjaChgJHt3aW5kb3cub3JpZ2lufS8ke25ldyBDbGllbnRTdHJpbmcoZS51c2VybmFtZSkuZW5jb2RlZCgpfS8ke0NsaWVudFN0cmluZy5Gcm9tQ2xpZW50KGUubmFtZSkuZW5jb2RlZCgpfS91cGRhdGVgLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSlcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKVxyXG4gICAgICAgICAgICBjbG9zZV9tb2RhbCgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25fZGVsZXRlX3JlcG9zOiAoKSA9PiBkZWxldGVfcmVwb3MoZSlcclxuICAgIH0pLCBudWxsLCBudWxsLCAnZWRpdC1yZXBvcycpO1xyXG59XHJcblxyXG5leHBvcnQge2VkaXRfcmVwb3N9IiwiaW1wb3J0IHtodW1hbkZpbGVTaXplLCBQQUdFX0NPTlRFWFR9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vdG9vbHMvdXRpbHNcIjtcclxuaW1wb3J0IHtDbGllbnRTdHJpbmd9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vdG9vbHMvY2xpZW50X3N0cmluZ1wiO1xyXG5pbXBvcnQge2VkaXRfcmVwb3N9IGZyb20gXCIuLi9lZGl0X3JlcG9zL2VkaXRfcmVwb3NfZm9ybVwiO1xyXG5pbXBvcnQge3BhcnNlX2ZldGNoX3Jlc3VsdCwgcHJpbnRfbWVzc2FnZX0gZnJvbSBcIi4uL2NvbXBvbmVudHMvbWVzc2FnZV9ib3hcIjtcclxuaW1wb3J0IHtjbG9zZV9tb2RhbCwgb3Blbl9tb2RhbH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvbW9kYWxcIjtcclxuaW1wb3J0IHtMT0NBTF9VU0VSfSBmcm9tIFwiLi4vLi4vLi4vY29tbW9uL3Rvb2xzL3VzZXJcIjtcclxuaW1wb3J0IHtGaWxlc3lzdGVtT2JqZWN0fSBmcm9tIFwiLi4vLi4vLi4vY29tbW9uL3Rvb2xzL2ZpbGVzeXN0ZW1fdjJcIjtcclxuXHJcbmNvbnN0IGF1dGhvcml6YXRpb25faGJzID0gcmVxdWlyZSgnLi9hdXRob3JpemF0aW9uLmhicycpXHJcbmNvbnN0IGluZm9zX2hicyA9IHJlcXVpcmUoJy4vaW5mb3MuaGJzJyk7XHJcbmNvbnN0IGFkZF9hdXRob3JpemF0aW9uX2hicyA9IHJlcXVpcmUoJy4vYWRkX2F1dGhvcml6YXRpb24uaGJzJylcclxucmVxdWlyZSgnLi9yZXBvc19zZXR0aW5ncy5zY3NzJylcclxuXHJcbmNsYXNzIFJlcG9zU2V0dGluZ3Mge1xyXG4gICAgY29uc3RydWN0b3IocmVwb3MpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAdHlwZSB7SFRNTEVsZW1lbnR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5yb290ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlcG9zLXNldHRpbmdzLXJvb3QnKTtcclxuXHJcbiAgICAgICAgdGhpcy5yZXBvcyA9IHJlcG9zO1xyXG5cclxuICAgICAgICB0aGlzLmZpbGxfYXV0aG9yaXphdGlvbnMoKTtcclxuICAgICAgICB0aGlzLmZpbGxfaW5mb3JtYXRpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBmaWxsX2luZm9ybWF0aW9uKCkge1xyXG5cclxuICAgICAgICBjb25zdCB0cmFzaF9jb250ZW50ID0gYXdhaXQgcGFyc2VfZmV0Y2hfcmVzdWx0KGF3YWl0IGZldGNoKGAke1BBR0VfQ09OVEVYVC5yZXBvc19wYXRoKCl9L3RyYXNoL2AsIHtcclxuICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgJ2NvbnRlbnQtYXV0aHRva2VuJzogTE9DQUxfVVNFUi5nZXRfdG9rZW4oKSxcclxuICAgICAgICAgICAgICAgICdhY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIGNvbnN0IHJlcG9zX2NvbnRlbnQgPSBhd2FpdCBwYXJzZV9mZXRjaF9yZXN1bHQoYXdhaXQgZmV0Y2goYCR7UEFHRV9DT05URVhULnJlcG9zX3BhdGgoKX0vY29udGVudC9gLCB7XHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICdjb250ZW50LWF1dGh0b2tlbic6IExPQ0FMX1VTRVIuZ2V0X3Rva2VuKCksXHJcbiAgICAgICAgICAgICAgICAnYWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgbGV0IHRvdGFsX2NvdW50ID0gMDtcclxuICAgICAgICBsZXQgdG90YWxfc2l6ZSA9IDA7XHJcbiAgICAgICAgbGV0IHRvdGFsX2RpcmVjdG9yaWVzID0gMDtcclxuXHJcbiAgICAgICAgbGV0IHRyYXNoX2NvdW50ID0gMDtcclxuICAgICAgICBsZXQgdHJhc2hfc2l6ZSA9IDA7XHJcbiAgICAgICAgbGV0IHRyYXNoX2RpcmVjdG9yaWVzID0gMDtcclxuXHJcbiAgICAgICAgY29uc3QgZXh0ZW5zaW9ucyA9IG5ldyBNYXAoKTtcclxuICAgICAgICBjb25zdCBjb250cmlidXRvcnMgPSBuZXcgTWFwKCk7XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiByZXBvc19jb250ZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChpdGVtLmlzX3JlZ3VsYXJfZmlsZSkge1xyXG4gICAgICAgICAgICAgICAgdG90YWxfY291bnQgKz0gMTtcclxuICAgICAgICAgICAgICAgIHRvdGFsX3NpemUgKz0gaXRlbS5zaXplO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWltZSA9IG5ldyBDbGllbnRTdHJpbmcoaXRlbS5taW1ldHlwZSkucGxhaW4oKTtcclxuICAgICAgICAgICAgICAgIGV4dGVuc2lvbnMuc2V0KG1pbWUsIChleHRlbnNpb25zLmdldChtaW1lKSB8IDApICsgMSk7XHJcbiAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgdG90YWxfZGlyZWN0b3JpZXMgKz0gMTtcclxuICAgICAgICAgICAgY29udHJpYnV0b3JzLnNldChpdGVtLm93bmVyLCAoY29udHJpYnV0b3JzLmdldChpdGVtLm93bmVyKSB8IDApICsgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdHJhc2hfY29udGVudCkge1xyXG4gICAgICAgICAgICBpZiAoaXRlbS5pc19yZWd1bGFyX2ZpbGUpIHtcclxuICAgICAgICAgICAgICAgIHRvdGFsX2NvdW50ICs9IDE7XHJcbiAgICAgICAgICAgICAgICB0cmFzaF9jb3VudCArPSAxO1xyXG4gICAgICAgICAgICAgICAgdG90YWxfc2l6ZSArPSBpdGVtLnNpemU7XHJcbiAgICAgICAgICAgICAgICB0cmFzaF9zaXplICs9IGl0ZW0uc2l6ZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1pbWUgPSBuZXcgQ2xpZW50U3RyaW5nKGl0ZW0ubWltZXR5cGUpLnBsYWluKCk7XHJcbiAgICAgICAgICAgICAgICBleHRlbnNpb25zLnNldChtaW1lLCAoZXh0ZW5zaW9ucy5nZXQobWltZSkgfCAwKSArIDEpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdG90YWxfZGlyZWN0b3JpZXMgKz0gMTtcclxuICAgICAgICAgICAgICAgIHRyYXNoX2RpcmVjdG9yaWVzICs9IDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29udHJpYnV0b3JzLnNldChpdGVtLm93bmVyLCAoY29udHJpYnV0b3JzLmdldChpdGVtLm93bmVyKSB8IDApICsgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBleHRfYXJyYXkgPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBleHRlbnNpb25zKVxyXG4gICAgICAgICAgICBleHRfYXJyYXkucHVzaCh7bWltZXR5cGU6IGtleSwgY291bnQ6IHZhbHVlfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbnRyaWJfYXJyYXkgPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBjb250cmlidXRvcnMpXHJcbiAgICAgICAgICAgIGNvbnRyaWJfYXJyYXkucHVzaCh7bmFtZToga2V5LCBpdGVtczogdmFsdWV9KTtcclxuXHJcbiAgICAgICAgY29uc3QgaW5mb19kaXZfY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlcG9zLXNldHRpbmdzLWluZm9ybWF0aW9uJyk7XHJcbiAgICAgICAgY29uc3QgaW5mb19kaXYgPSBpbmZvc19oYnMoe1xyXG4gICAgICAgICAgICB0b3RhbF9jb3VudDogdG90YWxfY291bnQsXHJcbiAgICAgICAgICAgIHRvdGFsX2RpcnM6IHRvdGFsX2RpcmVjdG9yaWVzLFxyXG4gICAgICAgICAgICB0b3RhbF9zaXplOiBodW1hbkZpbGVTaXplKHRvdGFsX3NpemUpLFxyXG4gICAgICAgICAgICB0cmFzaF9jb3VudDogdHJhc2hfY291bnQsXHJcbiAgICAgICAgICAgIHRyYXNoX2RpcnM6IHRyYXNoX2RpcmVjdG9yaWVzLFxyXG4gICAgICAgICAgICB0cmFzaF9zaXplOiBodW1hbkZpbGVTaXplKHRyYXNoX3NpemUpLFxyXG4gICAgICAgICAgICBudW1fZXh0ZW5zaW9uczogZXh0ZW5zaW9ucy5zaXplLFxyXG4gICAgICAgICAgICBleHRlbnNpb25zOiBleHRfYXJyYXkuc29ydCgoYSwgYikgPT4gYi5jb3VudCAtIGEuY291bnQpLnNsaWNlKDAsIDEwMCksXHJcbiAgICAgICAgICAgIG51bV9jb250cmlidXRvcnM6IGNvbnRyaWJ1dG9ycy5zaXplLFxyXG4gICAgICAgICAgICBjb250cmlidXRvcnM6IGNvbnRyaWJfYXJyYXkuc29ydCgoYSwgYikgPT4gYi5pdGVtcyAtIGEuaXRlbXMpLnNsaWNlKDAsIDEwMCksXHJcbiAgICAgICAgfSwge30pO1xyXG4gICAgICAgIGluZm9fZGl2X2NvbnRhaW5lci5hcHBlbmQoaW5mb19kaXYpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBhc3luYyBmaWxsX2F1dGhvcml6YXRpb25zKCkge1xyXG4gICAgICAgIGNvbnN0IGF1dGhvcml6YXRpb25zID0gYXdhaXQgcGFyc2VfZmV0Y2hfcmVzdWx0KGF3YWl0IGZldGNoKGAke1BBR0VfQ09OVEVYVC5yZXBvc19wYXRoKCl9L2F1dGhvcml6YXRpb25zL2ApKTtcclxuICAgICAgICBpZiAoYXV0aG9yaXphdGlvbnMubWVzc2FnZSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICBjb25zdCBhdXRob3JpemF0aW9uc19kaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVwb3Mtc2V0dGluZ3MtYXV0aG9yaXphdGlvbnMnKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGF1dGhvcml6YXRpb24gb2YgYXV0aG9yaXphdGlvbnMpIHtcclxuICAgICAgICAgICAgY29uc3QgYXV0aG9yaXphdGlvbl9kaXYgPSBhdXRob3JpemF0aW9uX2hicyh7XHJcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogbmV3IENsaWVudFN0cmluZyhhdXRob3JpemF0aW9uLm93bmVyLm5hbWUpLnBsYWluKCksXHJcbiAgICAgICAgICAgICAgICByb290X2l0ZW06IGF1dGhvcml6YXRpb24ucm9vdF9pdGVtID8gbmV3IENsaWVudFN0cmluZyhhdXRob3JpemF0aW9uLnJvb3RfaXRlbS5uYW1lKS5wbGFpbigpIDogbnVsbCxcclxuICAgICAgICAgICAgICAgIGFjY2Vzc190eXBlOiBhdXRob3JpemF0aW9uLmFjY2Vzc190eXBlLFxyXG4gICAgICAgICAgICAgICAgaXNfcmVhZF9vbmx5OiBhdXRob3JpemF0aW9uLmFjY2Vzc190eXBlID09PSAncmVhZC1vbmx5JyxcclxuICAgICAgICAgICAgICAgIGlzX2NvbnRyaWJ1dG9yOiBhdXRob3JpemF0aW9uLmFjY2Vzc190eXBlID09PSAnY29udHJpYnV0b3InLFxyXG4gICAgICAgICAgICAgICAgaXNfbW9kZXJhdG9yOiBhdXRob3JpemF0aW9uLmFjY2Vzc190eXBlID09PSAnbW9kZXJhdG9yJ1xyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBzZXRfYWNjZXNzX3R5cGU6IGFzeW5jIChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgcGFyc2VfZmV0Y2hfcmVzdWx0KGF3YWl0IGZldGNoKGAke1BBR0VfQ09OVEVYVC5yZXBvc19wYXRoKCl9L3VwZGF0ZS1hdXRob3JpemF0aW9uL2AsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvd25lcjogYXV0aG9yaXphdGlvbi5vd25lci5pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBvczogYXV0aG9yaXphdGlvbi5yZXBvcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290X2l0ZW06IGF1dGhvcml6YXRpb24ucm9vdF9pdGVtID8gYXV0aG9yaXphdGlvbi5yb290X2l0ZW0uaWQgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc190eXBlOiBlLnRhcmdldC52YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHJlbW92ZTogYXN5bmMgKGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBwYXJzZV9mZXRjaF9yZXN1bHQoYXdhaXQgZmV0Y2goYCR7UEFHRV9DT05URVhULnJlcG9zX3BhdGgoKX0vdXBkYXRlLWF1dGhvcml6YXRpb24vYCxcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG93bmVyOiBhdXRob3JpemF0aW9uLm93bmVyLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcG9zOiBhdXRob3JpemF0aW9uLnJlcG9zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3RfaXRlbTogYXV0aG9yaXphdGlvbi5yb290X2l0ZW0gPyBhdXRob3JpemF0aW9uLnJvb3RfaXRlbS5pZCA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlOiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZS50YXJnZXQucGFyZW50RWxlbWVudC5yZW1vdmUoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgYXV0aG9yaXphdGlvbnNfZGl2LmFwcGVuZChhdXRob3JpemF0aW9uX2RpdilcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYWRkX2F1dGhvcml6YXRpb24oKSB7XHJcbiAgICAgICAgb3Blbl9tb2RhbChhZGRfYXV0aG9yaXphdGlvbl9oYnMoe30sIHtcclxuICAgICAgICAgICAgYWRkOiBhc3luYyAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndXNlcm5hbWUnKS52YWxpZGl0eS52YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHByaW50X21lc3NhZ2UoJ2Vycm9yJywgJ05vbSBkXFwndXRpbHNpYXRldXIgaW52YWxpZGUnLCAndmV1aWxsZXogc3DDqWNpZmllciB1biB1dGlsaXNhdGV1ciB2YWxpZGUnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBwYXJzZV9mZXRjaF9yZXN1bHQoYXdhaXQgZmV0Y2goYCR7UEFHRV9DT05URVhULnJlcG9zX3BhdGgoKX0vYWRkLWF1dGhvcml6YXRpb24vYCxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvd25lcjogQ2xpZW50U3RyaW5nLkZyb21DbGllbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VzZXJuYW1lJykudmFsdWUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdF9pdGVtOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzX3R5cGU6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhY2Nlc3NfdHlwZScpLnZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyZXMubWVzc2FnZSlcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KSwgJzUwMHB4JywgJzMwMHB4JywgJ2F1dGgnKTtcclxuICAgIH1cclxuXHJcbiAgICBlZGl0X3NldHRpbmdzKCkge1xyXG4gICAgICAgIGNvbnN0IHJlcG9zX2RhdGEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KFBBR0VfQ09OVEVYVC5kaXNwbGF5X3JlcG9zKSk7XHJcbiAgICAgICAgcmVwb3NfZGF0YS5uYW1lID0gbmV3IENsaWVudFN0cmluZyhyZXBvc19kYXRhLm5hbWUpLnBsYWluKCk7XHJcbiAgICAgICAgcmVwb3NfZGF0YS5kZXNjcmlwdGlvbiA9IG5ldyBDbGllbnRTdHJpbmcocmVwb3NfZGF0YS5kZXNjcmlwdGlvbikucGxhaW4oKTtcclxuICAgICAgICByZXBvc19kYXRhLnVzZXJuYW1lID0gUEFHRV9DT05URVhULmRpc3BsYXlfdXNlci5uYW1lO1xyXG4gICAgICAgIHJlcG9zX2RhdGEuZGlzcGxheV9uYW1lID0gbmV3IENsaWVudFN0cmluZyhyZXBvc19kYXRhLmRpc3BsYXlfbmFtZSkucGxhaW4oKTtcclxuICAgICAgICBlZGl0X3JlcG9zKHJlcG9zX2RhdGEpO1xyXG4gICAgfVxyXG59XHJcblxyXG5sZXQgUkVQT1NfU0VUVElOR1MgPSBudWxsO1xyXG5cclxud2luZG93LnJlcG9zX3NldHRpbmdzID0ge1xyXG4gICAgbG9hZDogKCkgPT4ge1xyXG4gICAgICAgIFJFUE9TX1NFVFRJTkdTID0gbmV3IFJlcG9zU2V0dGluZ3MoUEFHRV9DT05URVhULmRpc3BsYXlfcmVwb3MpO1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybnMge1JlcG9zU2V0dGluZ3N9XHJcbiAgICAgKi9cclxuICAgIGdldCgpIHtcclxuICAgICAgICByZXR1cm4gUkVQT1NfU0VUVElOR1M7XHJcbiAgICB9XHJcbn07IiwiY29uc3QgdG9vbGJhcl9tZW51X2hicyA9IHJlcXVpcmUoJy4vdG9vbGJhcl9tZW51LmhicycpXHJcbmNvbnN0IHtwcmludF9tZXNzYWdlLCBwYXJzZV9mZXRjaF9yZXN1bHR9ID0gcmVxdWlyZShcIi4uL2NvbXBvbmVudHMvbWVzc2FnZV9ib3hcIik7XHJcbmNvbnN0IHtQQUdFX0NPTlRFWFQsIGh1bWFuRmlsZVNpemUsIHBlcm1pc3Npb25zfSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9jb21tb24vdG9vbHMvdXRpbHNcIik7XHJcbmNvbnN0IHtzcGF3bl9jb250ZXh0X2FjdGlvbn0gPSByZXF1aXJlKFwiLi4vY29tcG9uZW50cy9jb250ZXh0X2FjdGlvblwiKTtcclxuY29uc3Qge0NsaWVudFN0cmluZ30gPSByZXF1aXJlKFwiLi4vLi4vLi4vY29tbW9uL3Rvb2xzL2NsaWVudF9zdHJpbmdcIik7XHJcbmNvbnN0IHtvcGVuX21vZGFsLCBjbG9zZV9tb2RhbH0gPSByZXF1aXJlKFwiLi4vY29tcG9uZW50cy9tb2RhbFwiKTtcclxuY29uc3Qge0ZpbGVzeXN0ZW1PYmplY3R9ID0gcmVxdWlyZShcIi4uLy4uLy4uL2NvbW1vbi90b29scy9maWxlc3lzdGVtX3YyXCIpO1xyXG5cclxuY29uc3QgZWRpdF9kaXJfaGJzID0gcmVxdWlyZSgnLi4vdmlld3BvcnQvbWVudXMvZWRpdF9kaXJlY3RvcnkuaGJzJylcclxuXHJcbnJlcXVpcmUoJy4vdG9vbGJhci5zY3NzJylcclxuY29uc3Qge0xleGljb2dyYXBoaWNGaWx0ZXJ9ID0gcmVxdWlyZShcIi4uL3ZpZXdwb3J0L2ZpbHRlci9maWx0ZXJfbGV4XCIpO1xyXG5jb25zdCB7VHlwZUZpbHRlcn0gPSByZXF1aXJlKFwiLi4vdmlld3BvcnQvZmlsdGVyL2ZpbHRlcl90eXBlXCIpO1xyXG5jb25zdCB7U2l6ZUZpbHRlcn0gPSByZXF1aXJlKFwiLi4vdmlld3BvcnQvZmlsdGVyL2ZpbHRlcl9zaXplXCIpO1xyXG5jb25zdCB7RGF0ZUZpbHRlcn0gPSByZXF1aXJlKFwiLi4vdmlld3BvcnQvZmlsdGVyL2ZpbHRlcl9kYXRlXCIpO1xyXG5cclxuY2xhc3MgVG9vbGJhciB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZGlyZWN0b3J5X2NvbnRlbnQpIHtcclxuICAgICAgICB0aGlzLmRpcmVjdG9yeV9jb250ZW50ID0gZGlyZWN0b3J5X2NvbnRlbnQ7XHJcblxyXG4gICAgICAgIHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQubmF2aWdhdG9yLm9uX2NoYW5nZWRfZGlyKGFzeW5jIChuZXdfZGlyKSA9PiB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlX3BhdGgobmV3X2RpcilcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICBjb25zdCB0b29sX2J1dHRvbnMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndmlld3BvcnRfdG9vbGJhcicpO1xyXG4gICAgICAgIGlmICghdG9vbF9idXR0b25zKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgY29uc3QgbWVudSA9IHRvb2xiYXJfbWVudV9oYnMoe30sIHtcclxuICAgICAgICAgICAgZG93bmxvYWQ6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKGAke1BBR0VfQ09OVEVYVC5yZXBvc19wYXRoKCl9L2ZpbGUke2RpcmVjdG9yeV9jb250ZW50Lm5hdmlnYXRvci5jdXJyZW50X2RpcmVjdG9yeSA/IFwiL1wiICsgZGlyZWN0b3J5X2NvbnRlbnQubmF2aWdhdG9yLmN1cnJlbnRfZGlyZWN0b3J5IDogJyd9YCwgJ19ibGFuaycpLmZvY3VzKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNlYXJjaDogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zd2l0Y2hfc2VhcmNoX21vZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1vcmU6IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFjdGlvbnMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRpcmVjdG9yeV9jb250ZW50Lm5hdmlnYXRvci5jbGlwYm9hcmRfaXRlbXMgJiYgdGhpcy5kaXJlY3RvcnlfY29udGVudC5uYXZpZ2F0b3IuY2xpcGJvYXJkX2l0ZW1zLmxlbmd0aCAhPT0gMClcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb25zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCJDb2xsZXIgaWNpXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5kaXJlY3RvcnlfY29udGVudC5uYXZpZ2F0b3IubW92ZV9jbGlwYm9hcmRfdG9fcGFyZW50KHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQubmF2aWdhdG9yLmdldF9jdXJyZW50X2RpcmVjdG9yeSgpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZTogJy9pbWFnZXMvaWNvbnMvaWNvbnM4LXBhc3RlLTk2LnBuZydcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGFjdGlvbnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwiVHJpZXIgcGFyIC4uLlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wZW5fc29ydF9ieV9tZW51KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBpbWFnZTogJy9pbWFnZXMvaWNvbnMvaWNvbnM4LXNvcnQtMTAwLnBuZydcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgYWN0aW9ucy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCJUb3VzIGxlcyBmaWNoaWVyc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ6IHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQuZ2V0X2ZpbHRlcigpLl9maWxlc19yZWN1cnNpdmUsXHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQub25seV9maWxlc19yZWN1cnNpdmUoKVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2U6ICcvaW1hZ2VzL2ljb25zL2ljb25zOC1maWxlLXNvcnQtOTYucG5nJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kaXJlY3RvcnlfY29udGVudC5uYXZpZ2F0b3IuY3VycmVudF9kaXJlY3RvcnkgJiYgYXdhaXQgcGVybWlzc2lvbnMuY2FuX3VzZXJfZWRpdF9pdGVtKFBBR0VfQ09OVEVYVC5yZXBvc19wYXRoKCksIHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQubmF2aWdhdG9yLmN1cnJlbnRfZGlyZWN0b3J5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIk1vZGlmaWVyIGxlIGRvc3NpZXJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5kaXJlY3RvcnlfY29udGVudC5uYXZpZ2F0b3IuZmlsZXN5c3RlbS5nZXRfb2JqZWN0X2RhdGEodGhpcy5kaXJlY3RvcnlfY29udGVudC5uYXZpZ2F0b3IuY3VycmVudF9kaXJlY3RvcnkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3Blbl9tb2RhbChlZGl0X2Rpcl9oYnMoe2l0ZW06IGl0ZW19LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VibWl0OiBhc3luYyAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBDbGllbnRTdHJpbmcuRnJvbUNsaWVudChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmFtZScpLnZhbHVlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogQ2xpZW50U3RyaW5nLkZyb21DbGllbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Rlc2NyaXB0aW9uJykudmFsdWUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5fdXBsb2FkOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3Blbl91cGxvYWQnKS5jaGVja2VkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZF9pdGVtID0gYXdhaXQgcGFyc2VfZmV0Y2hfcmVzdWx0KGF3YWl0IGZldGNoKGAke1BBR0VfQ09OVEVYVC5yZXBvc19wYXRoKCl9L3VwZGF0ZS8ke2l0ZW0uaWR9YCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQubmF2aWdhdG9yLmZpbGVzeXN0ZW0ucmVtb3ZlX29iamVjdChpdGVtLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQubmF2aWdhdG9yLmZpbGVzeXN0ZW0uYWRkX29iamVjdChGaWxlc3lzdGVtT2JqZWN0LkZyb21TZXJ2ZXJEYXRhKHVwZGF0ZWRfaXRlbSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VfbW9kYWwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2U6ICcvaW1hZ2VzL2ljb25zL2ljb25zOC1lZGl0LTk2LnBuZydcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGFjdGlvbnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwiQ29yYmVpbGxlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQub3duZXIuZ29fdG9fdHJhc2goKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXJlY3RvcnlfY29udGVudCA9IHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQub3duZXIuZGlyZWN0b3J5X2NvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlX3BhdGgoKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGltYWdlOiAnL2ltYWdlcy9pY29ucy9pY29uczgtdHJhc2gtOTYucG5nJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBzcGF3bl9jb250ZXh0X2FjdGlvbihhY3Rpb25zKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdXBkYXRlX3NlYXJjaDogKGUpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3dpdGNoX3NlYXJjaF9tb2RlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXJlY3RvcnlfY29udGVudC5maWx0ZXJfdGV4dChlLnRhcmdldC52YWx1ZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgdG9vbF9idXR0b25zLmFwcGVuZChtZW51KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyB1cGRhdGVfcGF0aChuZXdfZGlyKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRfcGF0aCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjdXJyZW50LXBhdGgnKTtcclxuXHJcbiAgICAgICAgY29uc3QgY29udGVudF90ZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rvb2xiYXItc3RhdHMnKTtcclxuICAgICAgICBjb25zdCBzdGF0cyA9IHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQubmF2aWdhdG9yLmZpbGVzeXN0ZW0uZ2V0X29iamVjdF9jb250ZW50X3N0YXRzKG5ld19kaXIpO1xyXG4gICAgICAgIGNvbnRlbnRfdGV4dC5pbm5lclRleHQgPSBgJHtodW1hbkZpbGVTaXplKHN0YXRzLnNpemUpfSAvICR7c3RhdHMuY291bnR9IGZpY2hpZXJzYFxyXG5cclxuICAgICAgICBjdXJyZW50X3BhdGguaW5uZXJIVE1MID0gJyc7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmRpcmVjdG9yeV9jb250ZW50Lm93bmVyLmlzX2xvb2tpbmdfdHJhc2gpIHtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRyYXNoX2ltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xyXG4gICAgICAgICAgICB0cmFzaF9pbWcuc3JjID0gJy9pbWFnZXMvaWNvbnMvaWNvbnM4LXRyYXNoLTUyLnBuZydcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGV4aXRfYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJylcclxuICAgICAgICAgICAgY29uc3QgZXhpdF90ZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG4gICAgICAgICAgICBleGl0X3RleHQuaW5uZXJUZXh0ID0gJ1F1aXR0ZXIgbGEgY29yYmVpbGxlJztcclxuICAgICAgICAgICAgZXhpdF9idXR0b24uYXBwZW5kKHRyYXNoX2ltZyk7XHJcbiAgICAgICAgICAgIGV4aXRfYnV0dG9uLmFwcGVuZChleGl0X3RleHQpO1xyXG4gICAgICAgICAgICBleGl0X2J1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXJlY3RvcnlfY29udGVudC5uYXZpZ2F0b3Iuc2V0X2N1cnJlbnRfZGlyKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXJlY3RvcnlfY29udGVudC5vd25lci5leGl0X3RyYXNoKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZV9wYXRoKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY3VycmVudF9wYXRoLmFwcGVuZChleGl0X2J1dHRvbik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJylcclxuICAgICAgICAgICAgY29uc3QgaG9tZV9pbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcclxuICAgICAgICAgICAgaG9tZV9pbWcuc3JjID0gJy9pbWFnZXMvaWNvbnMvaWNvbnM4LWhvbWUtOTYucG5nJ1xyXG4gICAgICAgICAgICBidXR0b24uYXBwZW5kKGhvbWVfaW1nKTtcclxuICAgICAgICAgICAgYnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpcmVjdG9yeV9jb250ZW50Lm5hdmlnYXRvci5zZXRfY3VycmVudF9kaXIobnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY3VycmVudF9wYXRoLmFwcGVuZChidXR0b24pO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcGF0aF90b19vYmogPSB0aGlzLmRpcmVjdG9yeV9jb250ZW50Lm5hdmlnYXRvci5maWxlc3lzdGVtLm1ha2VfcGF0aF90b19vYmplY3QobmV3X2Rpcik7XHJcblxyXG4gICAgICAgICAgICBpZiAocGF0aF90b19vYmoubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZXBhcmF0b3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJylcclxuICAgICAgICAgICAgICAgIHNlcGFyYXRvci5pbm5lclRleHQgPSAnPidcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRfcGF0aC5hcHBlbmQoc2VwYXJhdG9yKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChjb25zdCBkaXIgb2YgdGhpcy5kaXJlY3RvcnlfY29udGVudC5uYXZpZ2F0b3IuZmlsZXN5c3RlbS5tYWtlX3BhdGhfdG9fb2JqZWN0KG5ld19kaXIpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkaXJfZGF0YSA9IHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQubmF2aWdhdG9yLmZpbGVzeXN0ZW0uZ2V0X29iamVjdF9kYXRhKGRpcik7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGlyX2RhdGEucGFyZW50X2l0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgc2VwYXJhdG9yIGJldHdlZW4gZGlyZWN0b3JpZXNcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXBhcmF0b3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJylcclxuICAgICAgICAgICAgICAgICAgICBzZXBhcmF0b3IuaW5uZXJUZXh0ID0gJz4nXHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudF9wYXRoLmFwcGVuZChzZXBhcmF0b3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gQWRkIGJ1dHRvbiBmb3IgZWFjaCBkaXJlY3Rvcnkgb2YgdGhlIGN1cnJlbnQgcGF0aFxyXG4gICAgICAgICAgICAgICAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJylcclxuICAgICAgICAgICAgICAgIGJ1dHRvbi5pbm5lclRleHQgPSBkaXJfZGF0YS5uYW1lLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICBidXR0b24ub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpcmVjdG9yeV9jb250ZW50Lm5hdmlnYXRvci5zZXRfY3VycmVudF9kaXIoZGlyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGN1cnJlbnRfcGF0aC5hcHBlbmQoYnV0dG9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzd2l0Y2hfc2VhcmNoX21vZGUoZW5hYmxlZCkge1xyXG4gICAgICAgIGNvbnN0IHNlYXJjaF9idXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndG9vbGJhci1zZWFyY2gnKTtcclxuICAgICAgICBjb25zdCBjb250ZW50X3RleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndG9vbGJhci1zdGF0cycpO1xyXG4gICAgICAgIGNvbnN0IHNlYXJjaF90ZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rvb2xiYXItc2VhcmNoLXRleHQnKTtcclxuICAgICAgICBpZiAoZW5hYmxlZCkge1xyXG4gICAgICAgICAgICBjb250ZW50X3RleHQuc3R5bGUud2lkdGggPSAnMCc7XHJcbiAgICAgICAgICAgIHNlYXJjaF90ZXh0LnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XHJcbiAgICAgICAgICAgIHNlYXJjaF9idXR0b24uc3R5bGUucG9pbnRlckV2ZW50cyA9ICdub25lJztcclxuICAgICAgICAgICAgc2VhcmNoX3RleHQuZm9jdXMoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNlYXJjaF9oYW5kbGUpXHJcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5zZWFyY2hfaGFuZGxlKTtcclxuICAgICAgICAgICAgdGhpcy5zZWFyY2hfaGFuZGxlID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN3aXRjaF9zZWFyY2hfbW9kZShmYWxzZSk7XHJcbiAgICAgICAgICAgIH0sIDUwMDApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChzZWFyY2hfdGV4dC52YWx1ZS5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRfdGV4dC5pbm5lclRleHQgPSBzZWFyY2hfdGV4dC52YWx1ZTtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRfdGV4dC5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdHMgPSB0aGlzLmRpcmVjdG9yeV9jb250ZW50Lm5hdmlnYXRvci5maWxlc3lzdGVtLmdldF9vYmplY3RfY29udGVudF9zdGF0cyh0aGlzLmRpcmVjdG9yeV9jb250ZW50Lm5hdmlnYXRvci5jdXJyZW50X2RpcmVjdG9yeSk7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50X3RleHQuaW5uZXJUZXh0ID0gYCR7aHVtYW5GaWxlU2l6ZShzdGF0cy5zaXplKX0gLyAke3N0YXRzLmNvdW50fSBmaWNoaWVyc2BcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb250ZW50X3RleHQuc3R5bGUud2lkdGggPSAndW5zZXQnO1xyXG4gICAgICAgICAgICBzZWFyY2hfdGV4dC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICBzZWFyY2hfYnV0dG9uLnN0eWxlLnBvaW50ZXJFdmVudHMgPSAndW5zZXQnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvcGVuX3NvcnRfYnlfbWVudSgpIHtcclxuICAgICAgICBjb25zdCBhY3Rpb25zID0gW107XHJcbiAgICAgICAgYWN0aW9ucy5wdXNoKHtcclxuICAgICAgICAgICAgdGl0bGU6IFwiVHJpIGFscGhhYsOpdGlxdWUgQS1aXCIsXHJcbiAgICAgICAgICAgIGNoZWNrZWQ6IHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQuZ2V0X2ZpbHRlcigpIGluc3RhbmNlb2YgTGV4aWNvZ3JhcGhpY0ZpbHRlciAmJiAhdGhpcy5kaXJlY3RvcnlfY29udGVudC5nZXRfZmlsdGVyKCkucmV2ZXJzZSxcclxuICAgICAgICAgICAgYWN0aW9uOiBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmRpcmVjdG9yeV9jb250ZW50LnNldF9maWx0ZXIobmV3IExleGljb2dyYXBoaWNGaWx0ZXIodGhpcy5kaXJlY3RvcnlfY29udGVudC5uYXZpZ2F0b3IuZmlsZXN5c3RlbSkpXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGltYWdlOiAnL2ltYWdlcy9pY29ucy9pY29uczgtc29ydC05Ni5wbmcnXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYWN0aW9ucy5wdXNoKHtcclxuICAgICAgICAgICAgdGl0bGU6IFwiVHJpIGFscGhhYsOpdGlxdWUgWi1BXCIsXHJcbiAgICAgICAgICAgIGNoZWNrZWQ6IHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQuZ2V0X2ZpbHRlcigpIGluc3RhbmNlb2YgTGV4aWNvZ3JhcGhpY0ZpbHRlciAmJiB0aGlzLmRpcmVjdG9yeV9jb250ZW50LmdldF9maWx0ZXIoKS5yZXZlcnNlLFxyXG4gICAgICAgICAgICBhY3Rpb246IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQuc2V0X2ZpbHRlcihuZXcgTGV4aWNvZ3JhcGhpY0ZpbHRlcih0aGlzLmRpcmVjdG9yeV9jb250ZW50Lm5hdmlnYXRvci5maWxlc3lzdGVtKS5yZXZlcnNlX2ZpbHRlcigpKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpbWFnZTogJy9pbWFnZXMvaWNvbnMvaWNvbnM4LXNvcnQtOTYucG5nJ1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGFjdGlvbnMucHVzaCh7XHJcbiAgICAgICAgICAgIHRpdGxlOiBcIlR5cGVcIixcclxuICAgICAgICAgICAgY2hlY2tlZDogdGhpcy5kaXJlY3RvcnlfY29udGVudC5nZXRfZmlsdGVyKCkgaW5zdGFuY2VvZiBUeXBlRmlsdGVyLFxyXG4gICAgICAgICAgICBhY3Rpb246IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQuc2V0X2ZpbHRlcihuZXcgVHlwZUZpbHRlcih0aGlzLmRpcmVjdG9yeV9jb250ZW50Lm5hdmlnYXRvci5maWxlc3lzdGVtKSlcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaW1hZ2U6ICcvaW1hZ2VzL2ljb25zL2ljb25zOC1maWxlLXNvcnQtOTYucG5nJ1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGFjdGlvbnMucHVzaCh7XHJcbiAgICAgICAgICAgIHRpdGxlOiBcIlRhaWxsZVwiLFxyXG4gICAgICAgICAgICBjaGVja2VkOiB0aGlzLmRpcmVjdG9yeV9jb250ZW50LmdldF9maWx0ZXIoKSBpbnN0YW5jZW9mIFNpemVGaWx0ZXIsXHJcbiAgICAgICAgICAgIGFjdGlvbjogYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5kaXJlY3RvcnlfY29udGVudC5zZXRfZmlsdGVyKG5ldyBTaXplRmlsdGVyKHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQubmF2aWdhdG9yLmZpbGVzeXN0ZW0pKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpbWFnZTogJy9pbWFnZXMvaWNvbnMvaWNvbnM4LXdlaWdodC05Ni5wbmcnXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYWN0aW9ucy5wdXNoKHtcclxuICAgICAgICAgICAgdGl0bGU6IFwiRGF0ZSBjcm9pc3NhbnRcIixcclxuICAgICAgICAgICAgY2hlY2tlZDogdGhpcy5kaXJlY3RvcnlfY29udGVudC5nZXRfZmlsdGVyKCkgaW5zdGFuY2VvZiBEYXRlRmlsdGVyICYmICF0aGlzLmRpcmVjdG9yeV9jb250ZW50LmdldF9maWx0ZXIoKS5yZXZlcnNlLFxyXG4gICAgICAgICAgICBhY3Rpb246IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQuc2V0X2ZpbHRlcihuZXcgRGF0ZUZpbHRlcih0aGlzLmRpcmVjdG9yeV9jb250ZW50Lm5hdmlnYXRvci5maWxlc3lzdGVtKSlcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaW1hZ2U6ICcvaW1hZ2VzL2ljb25zL2ljb25zOC1kYXRlLTk2LnBuZydcclxuICAgICAgICB9KTtcclxuICAgICAgICBhY3Rpb25zLnB1c2goe1xyXG4gICAgICAgICAgICB0aXRsZTogXCJEYXRlIGTDqWNyb2lzc2FudFwiLFxyXG4gICAgICAgICAgICBjaGVja2VkOiB0aGlzLmRpcmVjdG9yeV9jb250ZW50LmdldF9maWx0ZXIoKSBpbnN0YW5jZW9mIERhdGVGaWx0ZXIgJiYgdGhpcy5kaXJlY3RvcnlfY29udGVudC5nZXRfZmlsdGVyKCkucmV2ZXJzZSxcclxuICAgICAgICAgICAgYWN0aW9uOiBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmRpcmVjdG9yeV9jb250ZW50LnNldF9maWx0ZXIobmV3IERhdGVGaWx0ZXIodGhpcy5kaXJlY3RvcnlfY29udGVudC5uYXZpZ2F0b3IuZmlsZXN5c3RlbSkucmV2ZXJzZV9maWx0ZXIoKSlcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaW1hZ2U6ICcvaW1hZ2VzL2ljb25zL2ljb25zOC1kYXRlLTk2LnBuZydcclxuICAgICAgICB9KTtcclxuICAgICAgICBzcGF3bl9jb250ZXh0X2FjdGlvbihhY3Rpb25zKVxyXG4gICAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtUb29sYmFyfTsiLCJpbXBvcnQge2Nsb3NlX21vZGFsLCBpc19tb2RhbF9vcGVuLCBvcGVuX21vZGFsfSBmcm9tICcuLi9jb21wb25lbnRzL21vZGFsLmpzJ1xyXG5pbXBvcnQge1BBR0VfQ09OVEVYVCwgaHVtYW5GaWxlU2l6ZSwgc2Vjb25kc190b19zdHJ9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vdG9vbHMvdXRpbHMuanNcIjtcclxuaW1wb3J0IHtwcmludF9tZXNzYWdlfSBmcm9tIFwiLi4vY29tcG9uZW50cy9tZXNzYWdlX2JveC5qc1wiO1xyXG5pbXBvcnQge0ZpbGVzeXN0ZW19IGZyb20gXCIuLi8uLi8uLi9jb21tb24vdG9vbHMvZmlsZXN5c3RlbS5qc1wiO1xyXG5pbXBvcnQge0ZpbGVzeXN0ZW1VcGxvYWR9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vdG9vbHMvZmlsZXN5c3RlbV91cGxvYWQuanNcIjtcclxuaW1wb3J0IHVwbG9hZF9oYnMgZnJvbSBcIi4vdXBsb2FkX2Zvcm0uaGJzXCI7XHJcbmltcG9ydCBmaWxlX2hicyBmcm9tIFwiLi9maWxlLmhic1wiO1xyXG5pbXBvcnQgZGlyZWN0b3J5X2hicyBmcm9tIFwiLi9kaXJlY3RvcnkuaGJzXCI7XHJcbmltcG9ydCB7c3Bhd25fY29udGV4dF9hY3Rpb259IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRleHRfYWN0aW9uXCI7XHJcbmltcG9ydCB7RmlsZXN5c3RlbU9iamVjdH0gZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi90b29scy9maWxlc3lzdGVtX3YyXCI7XHJcbmltcG9ydCB7UkVQT1NfQlVJTERFUn0gZnJvbSBcIi4uL3ZpZXdwb3J0L3JlcG9zX2J1aWxkZXJcIlxyXG5cclxucmVxdWlyZSgnLi91cGxvYWQuc2NzcycpXHJcblxyXG5jb25zdCB1cmwgPSBgJHtQQUdFX0NPTlRFWFQucmVwb3NfcGF0aCgpfS9zZW5kL2A7XHJcbmxldCBmaWxlc3lzdGVtID0gUEFHRV9DT05URVhULmRpc3BsYXlfcmVwb3MgPyBuZXcgRmlsZXN5c3RlbShQQUdFX0NPTlRFWFQuZGlzcGxheV9yZXBvcy5uYW1lKSA6IG51bGw7XHJcbmxldCBzdG9wX3Byb2Nlc3MgPSBmYWxzZTtcclxuXHJcbmxldCBhZGRfZmlsZV9idXR0b24gPSBudWxsO1xyXG5sZXQgY2FuY2VsX3VwbG9hZCA9IG51bGw7XHJcbmxldCB1cGxvYWRfYnV0dG9uID0gbnVsbDtcclxubGV0IGdsb2JhbF9zdGF0dXNfZGl2ID0gbnVsbDtcclxubGV0IGdsb2JhbF9zdGF0dXNfdGV4dCA9IG51bGw7XHJcblxyXG5mdW5jdGlvbiBhZGRfZmlsZV90b191cGxvYWQoZmlsZSwgcGF0aCkge1xyXG4gICAgaWYgKCFpc19tb2RhbF9vcGVuKCkpIG9wZW5fdXBsb2FkX21vZGFsX2Zvcl9maWxlcygpO1xyXG4gICAgZmlsZXN5c3RlbS5hZGRfZmlsZShmaWxlLCBwYXRoID8gcGF0aCA6ICcvJyk7XHJcbn1cclxuXHJcbmxldCBvcGVuX3VwbG9hZF9tb2RhbF90aW1lb3V0ID0gbnVsbDtcclxuXHJcbmZ1bmN0aW9uIG9wZW5fb3JfdXBkYXRlX21vZGFsKCkge1xyXG4gICAgaWYgKG9wZW5fdXBsb2FkX21vZGFsX3RpbWVvdXQpIGNsZWFyVGltZW91dChvcGVuX3VwbG9hZF9tb2RhbF90aW1lb3V0KTtcclxuICAgIG9wZW5fdXBsb2FkX21vZGFsX3RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBvcGVuX3VwbG9hZF9tb2RhbF9mb3JfZmlsZXMoKTtcclxuICAgICAgICBvcGVuX3VwbG9hZF9tb2RhbF90aW1lb3V0ID0gbnVsbDtcclxuICAgIH0sIDEwMCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gdmlld3BvcnRfZmlsZXN5c3RlbSB7RmlsZXN5c3RlbX1cclxuICogQHBhcmFtIHNlYXJjaF9kaXIge0RpcmVjdG9yeX1cclxuICogQHBhcmFtIHZpZXdwb3J0X2lkIHtudW1iZXJ9XHJcbiAqL1xyXG5mdW5jdGlvbiBjbGVhbnVwX3BhdGgodmlld3BvcnRfZmlsZXN5c3RlbSwgc2VhcmNoX2Rpciwgdmlld3BvcnRfaWQpIHtcclxuICAgIGNvbnN0IHNlcnZlcl9vYmplY3RzID0gdmlld3BvcnRfZmlsZXN5c3RlbS5nZXRfb2JqZWN0c19pbl9kaXJlY3Rvcnkodmlld3BvcnRfaWQsIG51bGwpXHJcblxyXG4gICAgY29uc3QgY2xpZW50X2ZpbGVzID0gbmV3IE1hcCgpXHJcbiAgICBmb3IgKGNvbnN0IG9iamVjdCBvZiBzZWFyY2hfZGlyLmZpbGVzKVxyXG4gICAgICAgIGNsaWVudF9maWxlcy5zZXQob2JqZWN0Lm5hbWUsIG9iamVjdCk7XHJcblxyXG4gICAgY29uc3QgY2xpZW50X2RpcnMgPSBuZXcgTWFwKClcclxuICAgIGZvciAoY29uc3Qgb2JqZWN0IG9mIE9iamVjdC52YWx1ZXMoc2VhcmNoX2Rpci5kaXJlY3RvcmllcykpXHJcbiAgICAgICAgY2xpZW50X2RpcnMuc2V0KG9iamVjdC5uYW1lLCBvYmplY3QpO1xyXG5cclxuICAgIGZvciAoY29uc3Qgb2JqZWN0IG9mIHNlcnZlcl9vYmplY3RzKSB7XHJcbiAgICAgICAgY29uc3Qgdmlld3BvcnRfb2JqX2RhdGEgPSB2aWV3cG9ydF9maWxlc3lzdGVtLmdldF9vYmplY3RfZGF0YShvYmplY3QpO1xyXG4gICAgICAgIGlmICghdmlld3BvcnRfb2JqX2RhdGEuaXNfcmVndWxhcl9maWxlKVxyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICBjb25zdCBjbGllbnRfb2JqZWN0ID0gY2xpZW50X2ZpbGVzLmdldCh2aWV3cG9ydF9vYmpfZGF0YS5uYW1lLnBsYWluKCkpO1xyXG4gICAgICAgIGlmIChjbGllbnRfb2JqZWN0KVxyXG4gICAgICAgICAgICBmaWxlc3lzdGVtLnJlbW92ZV9maWxlKGNsaWVudF9vYmplY3QpO1xyXG4gICAgfVxyXG4gICAgZm9yIChjb25zdCBvYmplY3Qgb2Ygc2VydmVyX29iamVjdHMpIHtcclxuICAgICAgICBjb25zdCB2aWV3cG9ydF9vYmpfZGF0YSA9IHZpZXdwb3J0X2ZpbGVzeXN0ZW0uZ2V0X29iamVjdF9kYXRhKG9iamVjdCk7XHJcbiAgICAgICAgaWYgKHZpZXdwb3J0X29ial9kYXRhLmlzX3JlZ3VsYXJfZmlsZSlcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgY29uc3QgbG9jYWxfZGlyID0gY2xpZW50X2RpcnMuZ2V0KHZpZXdwb3J0X29ial9kYXRhLm5hbWUucGxhaW4oKSk7XHJcbiAgICAgICAgaWYgKGxvY2FsX2RpcilcclxuICAgICAgICAgICAgY2xlYW51cF9wYXRoKHZpZXdwb3J0X2ZpbGVzeXN0ZW0sIGxvY2FsX2Rpciwgb2JqZWN0KTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2xlYW51cF9idXR0b24oKSB7XHJcbiAgICBjb25zdCB2aWV3cG9ydF9maWxlc3lzdGVtID0gUkVQT1NfQlVJTERFUi5maWxlc3lzdGVtXHJcbiAgICBpZiAoIXZpZXdwb3J0X2ZpbGVzeXN0ZW0pXHJcbiAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgIGNsZWFudXBfcGF0aCh2aWV3cG9ydF9maWxlc3lzdGVtLCBmaWxlc3lzdGVtLnJvb3QsIFJFUE9TX0JVSUxERVIubmF2aWdhdG9yLmdldF9jdXJyZW50X2RpcmVjdG9yeSgpKVxyXG59XHJcblxyXG5sZXQgZmlsZXN5c3RlbV91cGxvYWQgPSBudWxsO1xyXG5mdW5jdGlvbiBvcGVuX3VwbG9hZF9tb2RhbF9mb3JfZmlsZXMoKSB7XHJcblxyXG4gICAgZmlsZXN5c3RlbV91cGxvYWQgPSBQQUdFX0NPTlRFWFQuZGlzcGxheV9yZXBvcyA/IG5ldyBGaWxlc3lzdGVtVXBsb2FkKGZpbGVzeXN0ZW0sIHVybCkgOiBudWxsO1xyXG4gICAgaWYgKGZpbGVzeXN0ZW1fdXBsb2FkKSB7XHJcbiAgICAgICAgZmlsZXN5c3RlbV91cGxvYWQuY2FsbGJhY2tfZmluaXNoZWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNsb3NlX21vZGFsKCk7XHJcbiAgICAgICAgICAgIHByaW50X21lc3NhZ2UoJ2luZm8nLCAnVGFjaGUgdGVybWluw6llJywgJ01pc2UgZW4gbGlnbmUgZGVzIGZpY2hpZXJzIHRlcm1pbsOpZSBhdmVjIHN1Y2PDqHMuJylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZpbGVzeXN0ZW1fdXBsb2FkLmNhbGxiYWNrX2ZpbGVfdXBsb2FkZWQgPSBhc3luYyAoXywgY29udGV4dCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBmaWxlID0gYXdhaXQgRmlsZXN5c3RlbU9iamVjdC5GZXRjaEZyb21TZXJ2ZXIoY29udGV4dC5maWxlX2lkKTtcclxuICAgICAgICAgICAgUkVQT1NfQlVJTERFUi5maWxlc3lzdGVtLmFkZF9vYmplY3QoZmlsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZpbGVzeXN0ZW0uY2xlYXIoKTtcclxuICAgIGNvbnN0IGdlbl9kaXIgPSAoZGlyLCBwYXJlbnRfZGl2KSA9PiB7XHJcbiAgICAgICAgY29uc3QgY3R4ID0ge307XHJcbiAgICAgICAgY29uc3QgZGlyZWN0b3J5ID0gZGlyZWN0b3J5X2hicyh7aXRlbTogZGlyfSwgY3R4KTtcclxuICAgICAgICBjb25zdCBkaXJfY29udGVudCA9IGRpcmVjdG9yeS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdmb2xkZXItY29udGVudCcpWzBdO1xyXG4gICAgICAgIGN0eC5lbnRlciA9ICgpID0+IGRpcmVjdG9yeS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjYW5jZWwtYnV0dG9uJylbMF0uc3R5bGUub3BhY2l0eSA9ICcxJztcclxuICAgICAgICBjdHgubGVhdmUgPSAoKSA9PiBkaXJlY3RvcnkuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnY2FuY2VsLWJ1dHRvbicpWzBdLnN0eWxlLm9wYWNpdHkgPSAnMCc7XHJcbiAgICAgICAgY3R4LmNsaWNrZWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghZGlyX2NvbnRlbnQuZXhwYW5kZWQpIHtcclxuICAgICAgICAgICAgICAgIGRpcl9jb250ZW50LmV4cGFuZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmICghZGlyX2NvbnRlbnQuZ2VuZXJhdGVfY29udGVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpcl9jb250ZW50LmdlbmVyYXRlX2NvbnRlbnQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY2hpbGRfZGlyIG9mIE9iamVjdC52YWx1ZXMoZGlyLmRpcmVjdG9yaWVzKSkgZ2VuX2RpcihjaGlsZF9kaXIsIGRpcl9jb250ZW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBmaWxlIG9mIGRpci5maWxlcykgZ2VuX2ZpbGUoZmlsZSwgZGlyX2NvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZGlyX2NvbnRlbnQuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRpcl9jb250ZW50LmV4cGFuZGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBkaXJfY29udGVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGN0eC5yZW1vdmVkID0gKCkgPT4gZGlyLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICBjb25zdCB0aXRsZSA9IGRpcmVjdG9yeS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaDInKVswXTtcclxuICAgICAgICBkaXIuY2FsbGJhY2tfc3RhdHNfdXBkYXRlZCA9IChjb250ZW50X3NpemUsIGNvbnRlbnRfZmlsZXMpID0+IHRpdGxlLmlubmVyVGV4dCA9IGAke2Rpci5uYW1lfSAoJHtodW1hbkZpbGVTaXplKGNvbnRlbnRfc2l6ZSl9IC0gJHtjb250ZW50X2ZpbGVzfSBmaWNoaWVycylgO1xyXG4gICAgICAgIGRpci5jYWxsYmFja19zdGF0c191cGRhdGVkKGRpci5jb250ZW50X3NpemUsIGRpci5jb250ZW50X2ZpbGVzKTtcclxuICAgICAgICBkaXIuY2FsbGJhY2tfZGlyZWN0b3J5X2FkZGVkID0gbmV3X2RpciA9PiB7XHJcbiAgICAgICAgICAgIGlmIChkaXJfY29udGVudC5nZW5lcmF0ZV9jb250ZW50KSBnZW5fZGlyKG5ld19kaXIsIGRpcl9jb250ZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGlyLmNhbGxiYWNrX2ZpbGVfYWRkZWQgPSBuZXdfZmlsZSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChkaXJfY29udGVudC5nZW5lcmF0ZV9jb250ZW50KSBnZW5fZmlsZShuZXdfZmlsZSwgZGlyX2NvbnRlbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZGlyLmNhbGxiYWNrX3JlbW92ZWQgPSAoKSA9PiBkaXJlY3RvcnkucmVtb3ZlKCk7XHJcbiAgICAgICAgcGFyZW50X2Rpdi5hcHBlbmQoZGlyZWN0b3J5KTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBnZW5fZmlsZSA9IChmaWxlLCBwYXJlbnRfZGl2KSA9PiB7XHJcbiAgICAgICAgY29uc3QgY3R4ID0ge1xyXG4gICAgICAgICAgICByZW1vdmVkOiAoKSA9PiB7XHJcbiAgICAgICAgICAgIH0sIGVudGVyOiAoKSA9PiB7XHJcbiAgICAgICAgICAgIH0sIGxlYXZlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGZpbGVfZG9tID0gZmlsZV9oYnMoe2l0ZW06IGZpbGUsIG5hbWU6IGZpbGUubmFtZSwgc2l6ZTogaHVtYW5GaWxlU2l6ZShmaWxlLnNpemUpfSwgY3R4KTtcclxuICAgICAgICBjdHgucmVtb3ZlZCA9ICgpID0+IGZpbGVzeXN0ZW0ucmVtb3ZlX2ZpbGUoZmlsZSk7XHJcbiAgICAgICAgY3R4LmVudGVyID0gKCkgPT4gZmlsZV9kb20uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnY2FuY2VsLWJ1dHRvbicpWzBdLnN0eWxlLm9wYWNpdHkgPSAnMSc7XHJcbiAgICAgICAgY3R4LmxlYXZlID0gKCkgPT4gZmlsZV9kb20uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnY2FuY2VsLWJ1dHRvbicpWzBdLnN0eWxlLm9wYWNpdHkgPSAnMCc7XHJcbiAgICAgICAgZmlsZS5jYWxsYmFja19yZW1vdmVkID0gKCkgPT4gZmlsZV9kb20ucmVtb3ZlKCk7XHJcbiAgICAgICAgcGFyZW50X2Rpdi5hcHBlbmQoZmlsZV9kb20pO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG1vZGFsX3BhcmVudCA9IG9wZW5fbW9kYWwodXBsb2FkX2hicyh7fSwge1xyXG4gICAgICAgIHNlbmQ6IHN0YXJ0X3VwbG9hZCxcclxuICAgICAgICBwYXVzZTogKGJ1dHRvbikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoYnV0dG9uLnBhdXNlZCkge1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uLnBhdXNlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uLmZpcnN0Q2hpbGQuc3JjID0gJy9pbWFnZXMvaWNvbnMvaWNvbnM4LXBhdXNlLTMwLnBuZyc7XHJcbiAgICAgICAgICAgICAgICBmaWxlc3lzdGVtX3VwbG9hZC5zdGFydCgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uLnBhdXNlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBidXR0b24uZmlyc3RDaGlsZC5zcmMgPSAnL2ltYWdlcy9pY29ucy9pY29uczgtcGxheS02NC5wbmcnO1xyXG4gICAgICAgICAgICAgICAgZmlsZXN5c3RlbV91cGxvYWQucGF1c2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pLCAnODB2dycsICc5MHZoJywgJ3VwbG9hZCcpO1xyXG5cclxuICAgIGNvbnN0IHRpdGxlID0gbW9kYWxfcGFyZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoMScpWzBdO1xyXG4gICAgY29uc3QgY29udGFpbmVyID0gbW9kYWxfcGFyZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2ZpbGUtbGlzdC1ib3gnKVswXTtcclxuICAgIGNvbnN0IGdsb2JhbF9wcm9ncmVzc19iYXIgPSBtb2RhbF9wYXJlbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgncHJvZ3Jlc3MtYmFyJylbMF07XHJcbiAgICBjb25zdCBnbG9iYWxfc3ViX3Byb2dyZXNzX2JhciA9IG1vZGFsX3BhcmVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdzdWItcHJvZ3Jlc3MtYmFyJylbMF07XHJcbiAgICBhZGRfZmlsZV9idXR0b24gPSBtb2RhbF9wYXJlbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgncGx1cy1idXR0b24nKVswXTtcclxuICAgIHVwbG9hZF9idXR0b24gPSBtb2RhbF9wYXJlbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnY29uZmlybS1idXR0b24nKVswXTtcclxuICAgIGNhbmNlbF91cGxvYWQgPSBtb2RhbF9wYXJlbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnY2FuY2VsLWJ1dHRvbicpWzBdO1xyXG4gICAgZ2xvYmFsX3N0YXR1c19kaXYgPSBtb2RhbF9wYXJlbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnZ2xvYmFsLXN0YXR1cycpWzBdO1xyXG4gICAgZ2xvYmFsX3N0YXR1c190ZXh0ID0gZ2xvYmFsX3N0YXR1c19kaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3AnKVswXTtcclxuICAgIGZpbGVzeXN0ZW0ucm9vdC5jYWxsYmFja19zdGF0c191cGRhdGVkID0gKGNvbnRlbnRfc2l6ZSwgY29udGVudF9maWxlcykgPT4gdGl0bGUuaW5uZXJUZXh0ID0gY29udGVudF9maWxlcyA9PT0gMCA/ICdFbnZveWVyIGRlcyBmaWNoaWVycycgOiB0aXRsZS5pbm5lclRleHQgPSBgJHtjb250ZW50X2ZpbGVzfSBmaWNoaWVycyAoJHtodW1hbkZpbGVTaXplKGNvbnRlbnRfc2l6ZSl9KWA7XHJcbiAgICBmaWxlc3lzdGVtLnJvb3QuY2FsbGJhY2tfZmlsZV9hZGRlZCA9IChuZXdfZmlsZSkgPT4gZ2VuX2ZpbGUobmV3X2ZpbGUsIGNvbnRhaW5lcik7XHJcbiAgICBmaWxlc3lzdGVtLnJvb3QuY2FsbGJhY2tfZGlyZWN0b3J5X2FkZGVkID0gKG5ld19kaXIpID0+IGdlbl9kaXIobmV3X2RpciwgY29udGFpbmVyKTtcclxuICAgIGZpbGVzeXN0ZW1fdXBsb2FkLmNhbGxiYWNrX3VwZGF0ZV9wcm9ncmVzcyA9IChmaWxlX25hbWUsIGZpbGVfc2l6ZSwgZmlsZV9zZW50LCB0b3RhbF9maWxlcywgdXBsb2FkZWRfYnl0ZXMsIGZpbGVfdXBsb2FkZWRfYnl0ZXMsIHRvdGFsX3NpemUsIHByb2Nlc3NfcGVyY2VudCwgc3BlZWQsIHJlbWFpbmluZykgPT4ge1xyXG4gICAgICAgIGdsb2JhbF9wcm9ncmVzc19iYXIuc3R5bGUud2lkdGggPSBgJHt1cGxvYWRlZF9ieXRlcyAvIHRvdGFsX3NpemUgKiAxMDB9JWA7XHJcbiAgICAgICAgZ2xvYmFsX3N1Yl9wcm9ncmVzc19iYXIuc3R5bGUud2lkdGggPSBgJHtmaWxlX3VwbG9hZGVkX2J5dGVzIC8gdG90YWxfc2l6ZSAqIDEwMH0lYDtcclxuICAgICAgICBnbG9iYWxfc3RhdHVzX3RleHQuaW5uZXJUZXh0ID0gYCR7TWF0aC5yb3VuZCh1cGxvYWRlZF9ieXRlcyAvIHRvdGFsX3NpemUgKiAxMDApfSUgKCR7aHVtYW5GaWxlU2l6ZSh1cGxvYWRlZF9ieXRlcyl9IC8gJHtodW1hbkZpbGVTaXplKHRvdGFsX3NpemUpfSkgLSAke2h1bWFuRmlsZVNpemUoc3BlZWQpfS9zICh+JHtzZWNvbmRzX3RvX3N0cihyZW1haW5pbmcpfSlcXG4ke2ZpbGVfbmFtZX0gKCR7aHVtYW5GaWxlU2l6ZShmaWxlX3NpemUpfSlgO1xyXG4gICAgICAgIGlmICh1cGxvYWRlZF9ieXRlcyA9PT0gZmlsZV91cGxvYWRlZF9ieXRlcyAmJiBwcm9jZXNzX3BlcmNlbnQgPCAxLjApXHJcbiAgICAgICAgICAgIGdsb2JhbF9zdGF0dXNfdGV4dC5pbm5lclRleHQgKz0gYFxcbnBvc3QgcHJvY2Vzc2luZyA6ICR7TWF0aC5yb3VuZChwcm9jZXNzX3BlcmNlbnQgKiAxMDApfSVgXHJcbiAgICB9XHJcbiAgICBmaWxlc3lzdGVtX3VwbG9hZC5vbl9zdG9wID0gKGZpbmlzaGVkKSA9PiB7XHJcbiAgICAgICAgYWRkX2ZpbGVfYnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICAgICAgdXBsb2FkX2J1dHRvbi5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG4gICAgICAgIGdsb2JhbF9zdGF0dXNfZGl2LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgY2FuY2VsX3VwbG9hZC52YWx1ZSA9IFwiQW5udWxlclwiO1xyXG4gICAgICAgIGNhbmNlbF91cGxvYWQub25jbGljayA9IGNsb3NlX21vZGFsO1xyXG4gICAgICAgIHN0b3BfcHJvY2VzcyA9IHRydWU7XHJcbiAgICAgICAgaWYgKGZpbmlzaGVkKSB7XHJcbiAgICAgICAgICAgIGNsb3NlX21vZGFsKCk7XHJcbiAgICAgICAgICAgIHByaW50X21lc3NhZ2UoXCJJbmZvXCIsIFwiVXBsb2FkIGZpbmlzaGVkXCIsIFwiU3VjY2Vzc2Z1bGx5IHVwbG9hZGVkIGNvbnRlbnRcIilcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBtb2RhbF9wYXJlbnQub25fY2xvc2VfbW9kYWwgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKGZpbGVzeXN0ZW1fdXBsb2FkLmlzX3J1bm5pbmcpIHtcclxuICAgICAgICAgICAgZmlsZXN5c3RlbV91cGxvYWQucGF1c2UoKTtcclxuICAgICAgICAgICAgaWYgKGNvbmZpcm0oJ1VuIHRyYW5zZmVydCBlc3QgZW4gY291cnMsIMOqdGVzIHZvdXMgc3VyIGRlIGxcXCdpbnRlcnJvbXByZSA/JykpIHtcclxuICAgICAgICAgICAgICAgIGZpbGVzeXN0ZW1fdXBsb2FkLnN0b3AoKTtcclxuICAgICAgICAgICAgICAgIGZpbGVzeXN0ZW0uY2xlYXIoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZpbGVzeXN0ZW1fdXBsb2FkLnN0YXJ0KCk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHN0YXJ0X3VwbG9hZCgpIHtcclxuICAgIHN0b3BfcHJvY2VzcyA9IGZhbHNlO1xyXG4gICAgYWRkX2ZpbGVfYnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgIHVwbG9hZF9idXR0b24uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgZ2xvYmFsX3N0YXR1c19kaXYuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcclxuICAgIGNhbmNlbF91cGxvYWQub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICBmaWxlc3lzdGVtX3VwbG9hZC5zdG9wKClcclxuICAgIH07XHJcbiAgICBjYW5jZWxfdXBsb2FkLnZhbHVlID0gXCJBcnLDqnRlclwiO1xyXG4gICAgY29uc3QgYnV0dG9uID0gZ2xvYmFsX3N0YXR1c19kaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2J1dHRvbicpWzBdO1xyXG4gICAgYnV0dG9uLnBhdXNlZCA9IGZhbHNlO1xyXG4gICAgYnV0dG9uLmZpcnN0Q2hpbGQuc3JjID0gJy9pbWFnZXMvaWNvbnMvaWNvbnM4LXBhdXNlLTMwLnBuZyc7XHJcblxyXG4gICAgZmlsZXN5c3RlbV91cGxvYWQuc3RhcnQoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gb3Blbl9maWxlX2Jyb3dzZXIoZGlyZWN0b3J5KSB7XHJcbiAgICBjb25zdCBpbnB1dEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgICBpbnB1dEVsZW1lbnQudHlwZSA9IFwiZmlsZVwiO1xyXG4gICAgaWYgKGRpcmVjdG9yeSkge1xyXG4gICAgICAgIGlucHV0RWxlbWVudC53ZWJraXRkaXJlY3RvcnkgPSB0cnVlO1xyXG4gICAgICAgIGlucHV0RWxlbWVudC5kaXJlY3RvcnkgPSB0cnVlO1xyXG4gICAgICAgIGlucHV0RWxlbWVudC5tdWx0aXBsZSA9IHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlucHV0RWxlbWVudC5tdWx0aXBsZSA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCAoZSkgPT4ge1xyXG4gICAgICAgIGZvciAoY29uc3QgZmlsZSBvZiBlLnRhcmdldFsnZmlsZXMnXSkge1xyXG4gICAgICAgICAgICBjb25zdCBwYXRoID0gKGZpbGUud2Via2l0UmVsYXRpdmVQYXRoID8gZmlsZS53ZWJraXRSZWxhdGl2ZVBhdGggOiAnJykuc3BsaXQoJy8nKTtcclxuICAgICAgICAgICAgcGF0aC5wb3AoKTtcclxuICAgICAgICAgICAgYWRkX2ZpbGVfdG9fdXBsb2FkKGZpbGUsIHBhdGgubGVuZ3RoID4gMCA/IHBhdGguam9pbignLycpIDogJycpXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIGlucHV0RWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBNb3VzZUV2ZW50KFwiY2xpY2tcIikpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBvcGVuX2ZpbGVfZGlhbG9nKCkge1xyXG4gICAgc3Bhd25fY29udGV4dF9hY3Rpb24oW3tcclxuICAgICAgICB0aXRsZTogXCJBam91dGVyIGRlcyBmaWNoaWVyc1wiLFxyXG4gICAgICAgIGFjdGlvbjogYXN5bmMgKCkgPT4gb3Blbl9maWxlX2Jyb3dzZXIoZmFsc2UpLFxyXG4gICAgICAgIGltYWdlOiAnL2ltYWdlcy9pY29ucy9pY29uczgtZmlsZS05Ni5wbmcnXHJcbiAgICB9LCB7XHJcbiAgICAgICAgdGl0bGU6IFwiQWpvdXRlciB1biBkb3NzaWVyIGV0IHNvbiBjb250ZW51XCIsXHJcbiAgICAgICAgYWN0aW9uOiBhc3luYyAoKSA9PiBvcGVuX2ZpbGVfYnJvd3Nlcih0cnVlKSxcclxuICAgICAgICBpbWFnZTogJy9pbWFnZXMvaWNvbnMvaWNvbnM4LWZvbGRlci05Ni5wbmcnXHJcbiAgICB9XSlcclxufVxyXG5cclxud2luZG93LnVwbG9hZCA9IHthZGRfZmlsZV90b191cGxvYWQsIG9wZW5fZmlsZV9kaWFsb2csIGNsZWFudXBfYnV0dG9uLCBvcGVuX29yX3VwZGF0ZV9tb2RhbH1cclxuZXhwb3J0IHthZGRfZmlsZV90b191cGxvYWQsIG9wZW5fb3JfdXBkYXRlX21vZGFsLCBvcGVuX2ZpbGVfZGlhbG9nfSIsImltcG9ydCB7aHVtYW5fcmVhZGFibGVfdGltZXN0YW1wLCBvYmplY3RfdG9fZGVjb2RlZF9zdHJpbmcsIFBBR0VfQ09OVEVYVH0gZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi90b29scy91dGlsc1wiO1xyXG5pbXBvcnQge3BhcnNlX2ZldGNoX3Jlc3VsdCwgcHJpbnRfbWVzc2FnZX0gZnJvbSBcIi4uL2NvbXBvbmVudHMvbWVzc2FnZV9ib3hcIjtcclxuaW1wb3J0IHtDbGllbnRTdHJpbmd9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vdG9vbHMvY2xpZW50X3N0cmluZ1wiO1xyXG5cclxucmVxdWlyZSgnLi91c2VyX3NldHRpbmdzLnNjc3MnKVxyXG5cclxuY29uc3QgdXNlcl9pbmZvc19oYnMgPSByZXF1aXJlKCcuL3VzZXJfaW5mb3MuaGJzJylcclxuXHJcbmNsYXNzIFVzZXJTZXR0aW5ncyB7XHJcbiAgICBjb25zdHJ1Y3Rvcih1c2VyKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUge0hUTUxFbGVtZW50fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMucm9vdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1c2VyLXNldHRpbmdzLXJvb3QnKTtcclxuXHJcbiAgICAgICAgdGhpcy51c2VyID0gdXNlcjtcclxuICAgIH1cclxuXHJcbiAgICBjbGVhcl9wYWdlKCkge1xyXG4gICAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3NldHRpbmctYnV0dG9uJykpXHJcbiAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpXHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VzZXItc2V0dGluZ3MtY29udGFpbmVyJykuaW5uZXJIVE1MID0gJydcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnb190b191c2VyKGJ1dHRvbikge1xyXG4gICAgICAgIHRoaXMuY2xlYXJfcGFnZSgpO1xyXG4gICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xyXG5cclxuICAgICAgICBjb25zdCB0b2tlbnMgPSBhd2FpdCBwYXJzZV9mZXRjaF9yZXN1bHQoYXdhaXQgZmV0Y2goYCR7UEFHRV9DT05URVhULnVzZXJfcGF0aCgpfS91c2VyLXRva2VuLWxpc3QvYCkpO1xyXG4gICAgICAgIGZvciAoY29uc3QgdG9rZW4gb2YgdG9rZW5zKSB7XHJcbiAgICAgICAgICAgIHRva2VuLmRldmljZSA9IGRlY29kZVVSSUNvbXBvbmVudCh0b2tlbi5kZXZpY2UpO1xyXG4gICAgICAgICAgICB0b2tlbi5leHBkYXRlID0gaHVtYW5fcmVhZGFibGVfdGltZXN0YW1wKHRva2VuLmV4cGRhdGUpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1c2VyLXNldHRpbmdzLWNvbnRhaW5lcicpLmFwcGVuZCh1c2VyX2luZm9zX2hicyh7XHJcbiAgICAgICAgICAgIHVzZXI6IG9iamVjdF90b19kZWNvZGVkX3N0cmluZyh0aGlzLnVzZXIpLFxyXG4gICAgICAgICAgICB0b2tlbnM6IHRva2Vuc1xyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgcmVzZXRfcGFzc3dvcmQ6IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHBhcnNlX2ZldGNoX3Jlc3VsdChhd2FpdCBmZXRjaChgL2FwaS9yZXNldC1wYXNzd29yZC9gLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7ZW1haWw6IENsaWVudFN0cmluZy5Gcm9tQ2xpZW50KHRoaXMudXNlci5lbWFpbCl9KVxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyZXMubWVzc2FnZSlcclxuICAgICAgICAgICAgICAgICAgICBwcmludF9tZXNzYWdlKCdpbmZvJywgJ01haWwgZGUgcsOpaW5pdGlhbGlzYXRpb24gZW52b3nDqScsICdWw6lyaWZpZXogdm90cmUgYm9pdGUgbWFpbCBwb3VyIHBvdXJzdWl2cmUgbGEgcHJvY8OpZHVyZSBkZSByw6lpbml0aWFsaXNhdGlvbicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkpXHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZGVsZXRlX2F1dGhfdG9rZW4oYnV0dG9uKSB7XHJcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgcGFyc2VfZmV0Y2hfcmVzdWx0KGF3YWl0IGZldGNoKGAvYXBpL2RlbGV0ZS1hdXRodG9rZW4vJHtidXR0b24uZ2V0QXR0cmlidXRlKCd0b2tlbicpfWAsIHtcclxuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCdcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgaWYgKCFyZXMubWVzc2FnZSlcclxuICAgICAgICAgICAgYnV0dG9uLnBhcmVudEVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ29fdG9fcmVwb3MoYnV0dG9uKSB7XHJcbiAgICAgICAgdGhpcy5jbGVhcl9wYWdlKCk7XHJcbiAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmxldCBVU0VSX1NFVFRJTkdTID0gbnVsbDtcclxuXHJcbndpbmRvdy51c2VyX3NldHRpbmdzID0ge1xyXG4gICAgbG9hZDogKCkgPT4ge1xyXG4gICAgICAgIFVTRVJfU0VUVElOR1MgPSBuZXcgVXNlclNldHRpbmdzKFBBR0VfQ09OVEVYVC5jb25uZWN0ZWRfdXNlcik7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJucyB7VXNlclNldHRpbmdzfVxyXG4gICAgICovXHJcbiAgICBnZXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIFVTRVJfU0VUVElOR1M7XHJcbiAgICB9XHJcbn07IiwiaW1wb3J0IHtodW1hbl9yZWFkYWJsZV90aW1lc3RhbXAsIGh1bWFuRmlsZVNpemUsIGlzX3RvdWNoX2RldmljZX0gZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi90b29scy91dGlsc1wiO1xyXG5pbXBvcnQge1JFUE9TX0JVSUxERVJ9IGZyb20gXCIuL3JlcG9zX2J1aWxkZXJcIjtcclxuaW1wb3J0IHtMZXhpY29ncmFwaGljRmlsdGVyfSBmcm9tIFwiLi9maWx0ZXIvZmlsdGVyX2xleFwiO1xyXG5pbXBvcnQge1NpemVGaWx0ZXJ9IGZyb20gXCIuL2ZpbHRlci9maWx0ZXJfc2l6ZVwiO1xyXG5pbXBvcnQge0RhdGVGaWx0ZXJ9IGZyb20gXCIuL2ZpbHRlci9maWx0ZXJfZGF0ZVwiO1xyXG5cclxuY29uc3QgbWFrZV9kaXJlY3RvcnlfaGJzID0gcmVxdWlyZShcIi4vbWVudXMvbWFrZV9kaXJlY3RvcnkuaGJzXCIpO1xyXG5jb25zdCB7cHJpbnRfbWVzc2FnZSwgcGFyc2VfZmV0Y2hfcmVzdWx0fSA9IHJlcXVpcmUoXCIuLi9jb21wb25lbnRzL21lc3NhZ2VfYm94XCIpO1xyXG5jb25zdCB7UEFHRV9DT05URVhUfSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9jb21tb24vdG9vbHMvdXRpbHNcIik7XHJcbmNvbnN0IHtDbGllbnRTdHJpbmd9ID0gcmVxdWlyZShcIi4uLy4uLy4uL2NvbW1vbi90b29scy9jbGllbnRfc3RyaW5nXCIpO1xyXG5jb25zdCB7RmlsZXN5c3RlbU9iamVjdH0gPSByZXF1aXJlKFwiLi4vLi4vLi4vY29tbW9uL3Rvb2xzL2ZpbGVzeXN0ZW1fdjJcIik7XHJcbmNvbnN0IHtjbG9zZV9tb2RhbCwgb3Blbl9tb2RhbH0gPSByZXF1aXJlKFwiLi4vY29tcG9uZW50cy9tb2RhbFwiKTtcclxuY29uc3Qge3NwYXduX2NvbnRleHRfYWN0aW9ufSA9IHJlcXVpcmUoXCIuLi9jb21wb25lbnRzL2NvbnRleHRfYWN0aW9uXCIpO1xyXG5jb25zdCBkaXJlY3RvcnlfaGJzID0gcmVxdWlyZShcIi4vZGlyZWN0b3J5Lmhic1wiKTtcclxuY29uc3Qge3NwYXduX2l0ZW1fY29udGV4dF9hY3Rpb259ID0gcmVxdWlyZShcIi4vaXRlbV9jb250ZXh0X2FjdGlvblwiKTtcclxuY29uc3QgZmlsZV9oYnMgPSByZXF1aXJlKFwiLi9maWxlLmhic1wiKTtcclxuY29uc3Qge0Nhcm91c2VsfSA9IHJlcXVpcmUoXCIuLi9jb21wb25lbnRzL2Nhcm91c2VsL2Nhcm91c2VsXCIpO1xyXG5jb25zdCB7Q2Fyb3VzZWxMaXN0fSA9IHJlcXVpcmUoXCIuLi9jb21wb25lbnRzL2Nhcm91c2VsL2xpc3QvY2Fyb3VzZWxfbGlzdFwiKTtcclxuXHJcbi8qKlxyXG4gKiBAdHlwZSB7UmVwb3NGaWx0ZXJ9XHJcbiAqL1xyXG5sZXQgbGFzdF9maWx0ZXIgPSBudWxsO1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlIHtib29sZWFufVxyXG4gKi9cclxubGV0IHNob3dfYWxsX2ZpbGVzID0gZmFsc2U7XHJcblxyXG4vKipcclxuICogQHR5cGUge3N0cmluZ31cclxuICovXHJcbmxldCBzdHJpbmdfZmlsdGVyID0gJyc7XHJcblxyXG5jbGFzcyBEaXJlY3RvcnlDb250ZW50IHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIG93bmVye1JlcG9zQnVpbGRlcn1cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Iob3duZXIpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAdHlwZSB7TmF2aWdhdG9yfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMubmF2aWdhdG9yID0gb3duZXIubmF2aWdhdG9yO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAdHlwZSB7UmVwb3NCdWlsZGVyfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMub3duZXIgPSBvd25lcjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUge3tpZDpudW1iZXIsIGRhdGE6RmlsZXN5c3RlbU9iamVjdH1bXX1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLm9iamVjdHMgPSBbXTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUge0hUTUxFbGVtZW50fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMudmlld3BvcnRfY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpbGUtbGlzdCcpO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAdHlwZSB7TWFwPG51bWJlciwgSFRNTEVsZW1lbnQ+fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuZW50cnlfd2lkZ2V0cyA9IG5ldyBNYXAoKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUge0Nhcm91c2VsfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuaXRlbV9jYXJvdXNlbCA9IG51bGw7XHJcblxyXG4gICAgICAgIGlmICghbGFzdF9maWx0ZXIpXHJcbiAgICAgICAgICAgIGxhc3RfZmlsdGVyID0gbmV3IExleGljb2dyYXBoaWNGaWx0ZXIodGhpcy5vd25lci5maWxlc3lzdGVtKTtcclxuXHJcbiAgICAgICAgdGhpcy5fdXBkYXRlX2RpcmVjdG9yeV9saXN0ZW5lcigpO1xyXG5cclxuICAgICAgICB0aGlzLm5hdmlnYXRvci5iaW5kX29uX3NlbGVjdF9pdGVtKChpdGVtLCBzaG91bGRfc2VsZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHdpZGdldCA9IHRoaXMuZW50cnlfd2lkZ2V0cy5nZXQoaXRlbSlcclxuICAgICAgICAgICAgaWYgKHdpZGdldCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNob3VsZF9zZWxlY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aWRnZXQuY2xhc3NMaXN0LmFkZChcInNlbGVjdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZGdldC5zY3JvbGxJbnRvVmlldyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlaGF2aW9yOiBcInNtb290aFwiLCBibG9jazogXCJuZWFyZXN0XCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcIiwgaW5saW5lOiBcIm5lYXJlc3RcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB3aWRnZXQuY2xhc3NMaXN0LnJlbW92ZShcInNlbGVjdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgdGhpcy5yZWdlbl9jb250ZW50KCk7XHJcbiAgICAgICAgY29uc3QgZmlsZV9iYWNrZ3JvdW5kID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpbGUtbGlzdC1ib3gnKTtcclxuICAgICAgICBpZiAoZmlsZV9iYWNrZ3JvdW5kKVxyXG4gICAgICAgICAgICBmaWxlX2JhY2tncm91bmQub25jb250ZXh0bWVudSA9IGV2ZW50ID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQgIT09IGZpbGVfYmFja2dyb3VuZCAmJiBldmVudC50YXJnZXQgIT09IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmaWxlLWxpc3QnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgYWN0aW9ucyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgYWN0aW9ucy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCJOb3V2ZWF1IERvc3NpZXJcIixcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFrZV9kaXJlY3RvcnkgPSBtYWtlX2RpcmVjdG9yeV9oYnMoe30sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1rZGlyOiBhc3luYyAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZSA9IC9bPD46XCJcXC9cXFxcfD8qXFx4MDAtXFx4MUZdfF4oPzphdXh8Y29ufGNsb2NrXFwkfG51bHxwcm58Y29tWzEtOV18bHB0WzEtOV0pJC9pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZS50ZXN0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduYW1lJykudmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50X21lc3NhZ2UoRXJyb3IsIFwiSW52YWxpZCBkaXJlY3RvcnkgbmFtZVwiLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmFtZScpLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld19kaXIgPSBhd2FpdCBwYXJzZV9mZXRjaF9yZXN1bHQoYXdhaXQgZmV0Y2goYCR7UEFHRV9DT05URVhULnJlcG9zX3BhdGgoKX0vbWFrZS1kaXJlY3Rvcnkke3RoaXMubmF2aWdhdG9yLmdldF9jdXJyZW50X2RpcmVjdG9yeSgpID8gJy8nICsgdGhpcy5uYXZpZ2F0b3IuZ2V0X2N1cnJlbnRfZGlyZWN0b3J5KCkgOiAnJ31gLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogQ2xpZW50U3RyaW5nLkZyb21DbGllbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25hbWUnKS52YWx1ZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3Blbl91cGxvYWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdfZGlyICYmIG5ld19kaXIuaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUkVQT1NfQlVJTERFUi5maWxlc3lzdGVtLmFkZF9vYmplY3QoRmlsZXN5c3RlbU9iamVjdC5Gcm9tU2VydmVyRGF0YShuZXdfZGlyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlX21vZGFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5fbW9kYWwobWFrZV9kaXJlY3RvcnksICc1MDBweCcsICcyNTBweCcsICdtYWtlLWRpcmVjdG9yeScpXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBpbWFnZTogJy9pbWFnZXMvaWNvbnMvaWNvbnM4LWFkZC1mb2xkZXItNDgucG5nJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubmF2aWdhdG9yLmNsaXBib2FyZF9pdGVtcyAmJiB0aGlzLm5hdmlnYXRvci5jbGlwYm9hcmRfaXRlbXMubGVuZ3RoICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIkNvbGxlciBpY2lcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLm5hdmlnYXRvci5tb3ZlX2NsaXBib2FyZF90b19wYXJlbnQodGhpcy5uYXZpZ2F0b3IuZ2V0X2N1cnJlbnRfZGlyZWN0b3J5KCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlOiAnL2ltYWdlcy9pY29ucy9pY29uczgtcGFzdGUtOTYucG5nJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICBzcGF3bl9jb250ZXh0X2FjdGlvbihhY3Rpb25zKTtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBfdXBkYXRlX2RpcmVjdG9yeV9saXN0ZW5lcigpIHtcclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50X2RpcmVjdG9yeV9saXN0ZW5lcilcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50X2RpcmVjdG9yeV9saXN0ZW5lci5kZXN0cm95KCk7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuY3VycmVudF9kaXJlY3RvcnlfbGlzdGVuZXI7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtPYmplY3RMaXN0ZW5lcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmN1cnJlbnRfZGlyZWN0b3J5X2xpc3RlbmVyID0gdGhpcy5vd25lci5maWxlc3lzdGVtLmNyZWF0ZV9saXN0ZW5lcih0aGlzLm5hdmlnYXRvci5nZXRfY3VycmVudF9kaXJlY3RvcnkoKSk7XHJcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudF9kaXJlY3RvcnlfbGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50X2RpcmVjdG9yeV9saXN0ZW5lci5vbl9hZGRfb2JqZWN0ID0gKG9iamVjdF9pZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2JqZWN0ID0gdGhpcy5vd25lci5maWxlc3lzdGVtLmdldF9vYmplY3RfZGF0YShvYmplY3RfaWQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9iamVjdC5pc19yZWd1bGFyX2ZpbGUpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25fZmlsZV9hZGRlZChvYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29uX2RpcmVjdG9yeV9hZGRlZChvYmplY3QpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50X2RpcmVjdG9yeV9saXN0ZW5lci5vbl9yZW1vdmVfb2JqZWN0ID0gKG9iamVjdF9pZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb25faXRlbV9yZW1vdmVkKG9iamVjdF9pZClcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudF9kaXJlY3RvcnlfbGlzdGVuZXIub25fdXBkYXRlX29iamVjdCA9IChvYmplY3RfaWQpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29uX2l0ZW1fcmVtb3ZlZChvYmplY3RfaWQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV3X2RhdGEgPSB0aGlzLm93bmVyLmZpbGVzeXN0ZW0uZ2V0X29iamVjdF9kYXRhKG9iamVjdF9pZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobmV3X2RhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV3X2RhdGEuaXNfcmVndWxhcl9maWxlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbl9maWxlX2FkZGVkKG5ld19kYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29uX2RpcmVjdG9yeV9hZGRlZChuZXdfZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIG5ld19maWx0ZXIge1JlcG9zRmlsdGVyfVxyXG4gICAgICovXHJcbiAgICBzZXRfZmlsdGVyKG5ld19maWx0ZXIpIHtcclxuICAgICAgICBsYXN0X2ZpbHRlciA9IG5ld19maWx0ZXI7XHJcbiAgICAgICAgbGFzdF9maWx0ZXIuc2V0X25hbWVfZmlsdGVyKHN0cmluZ19maWx0ZXIpO1xyXG4gICAgICAgIGxhc3RfZmlsdGVyLm9ubHlfZmlsZXNfcmVjdXJzaXZlKHNob3dfYWxsX2ZpbGVzKTtcclxuICAgICAgICB0aGlzLnJlZ2VuX2NvbnRlbnQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB0ZXh0IHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGZpbHRlcl90ZXh0KHRleHQpIHtcclxuICAgICAgICBsYXN0X2ZpbHRlci5zZXRfbmFtZV9maWx0ZXIodGV4dClcclxuICAgICAgICBzdHJpbmdfZmlsdGVyID0gdGV4dDtcclxuICAgICAgICB0aGlzLnJlZ2VuX2NvbnRlbnQoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRfZmlsdGVyKCkge1xyXG4gICAgICAgIHJldHVybiBsYXN0X2ZpbHRlcjtcclxuICAgIH1cclxuXHJcbiAgICBvbmx5X2ZpbGVzX3JlY3Vyc2l2ZSgpIHtcclxuICAgICAgICBsYXN0X2ZpbHRlci5vbmx5X2ZpbGVzX3JlY3Vyc2l2ZSghbGFzdF9maWx0ZXIuX2ZpbGVzX3JlY3Vyc2l2ZSk7XHJcbiAgICAgICAgc2hvd19hbGxfZmlsZXMgPSBsYXN0X2ZpbHRlci5fZmlsZXNfcmVjdXJzaXZlO1xyXG4gICAgICAgIHRoaXMucmVnZW5fY29udGVudCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50X2RpcmVjdG9yeV9saXN0ZW5lci5kZXN0cm95KCk7XHJcbiAgICB9XHJcblxyXG4gICAgZGlyZWN0b3JpZXNfZGF0YSgpIHtcclxuICAgICAgICBjb25zdCBkYXRhID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCBvYmplY3Qgb2YgdGhpcy5vYmplY3RzKVxyXG4gICAgICAgICAgICBpZiAoIW9iamVjdC5kYXRhLmlzX3JlZ3VsYXJfZmlsZSlcclxuICAgICAgICAgICAgICAgIGRhdGEucHVzaChvYmplY3QuZGF0YSk7XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgZmlsZXNfZGF0YSgpIHtcclxuICAgICAgICBjb25zdCBkYXRhID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCBvYmplY3Qgb2YgdGhpcy5vYmplY3RzKVxyXG4gICAgICAgICAgICBpZiAob2JqZWN0LmRhdGEuaXNfcmVndWxhcl9maWxlKVxyXG4gICAgICAgICAgICAgICAgZGF0YS5wdXNoKG9iamVjdC5kYXRhKTtcclxuICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgIH1cclxuXHJcbiAgICByZWdlbl9jb250ZW50KCkge1xyXG4gICAgICAgIHRoaXMub2JqZWN0cyA9IFtdO1xyXG4gICAgICAgIGlmICghdGhpcy52aWV3cG9ydF9jb250YWluZXIpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB0aGlzLnZpZXdwb3J0X2NvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcclxuXHJcbiAgICAgICAgY29uc3QgZmlsdGVyZWRfZWxlbWVudHMgPSBsYXN0X2ZpbHRlci5nZXRfZGlyZWN0b3J5X2NvbnRlbnQodGhpcy5uYXZpZ2F0b3IuZ2V0X2N1cnJlbnRfZGlyZWN0b3J5KCkpO1xyXG4gICAgICAgIC8vQFRPRE8gOiBkaXNwbGF5IG1vcmUgdGhhbiAxMDAwIGl0ZW1zXHJcbiAgICAgICAgZm9yIChjb25zdCBvYmplY3Qgb2YgZmlsdGVyZWRfZWxlbWVudHMuc2xpY2UoMCwgMTAwMCkpXHJcbiAgICAgICAgICAgIHRoaXMub2JqZWN0cy5wdXNoKHtpZDogb2JqZWN0LmlkLCBkYXRhOiBvYmplY3R9KTtcclxuICAgICAgICBpZiAodGhpcy52aWV3cG9ydF9jb250YWluZXIpXHJcbiAgICAgICAgICAgIHRoaXMudmlld3BvcnRfY29udGFpbmVyLmlubmVySFRNTCA9IG51bGw7XHJcbiAgICAgICAgZm9yIChjb25zdCBvYmplY3Qgb2YgdGhpcy5kaXJlY3Rvcmllc19kYXRhKCkpXHJcbiAgICAgICAgICAgIHRoaXMuX29uX2RpcmVjdG9yeV9hZGRlZChvYmplY3QpO1xyXG4gICAgICAgIGZvciAoY29uc3Qgb2JqZWN0IG9mIHRoaXMuZmlsZXNfZGF0YSgpKVxyXG4gICAgICAgICAgICB0aGlzLl9vbl9maWxlX2FkZGVkKG9iamVjdCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3VwZGF0ZV9kaXJlY3RvcnlfbGlzdGVuZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBpdGVtIHtGaWxlc3lzdGVtT2JqZWN0fVxyXG4gICAgICogQHBhcmFtIGVsZW1lbnQge0hUTUxFbGVtZW50fVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX2FkZF9lbGVtZW50X2RlY29yYXRpb25zKGl0ZW0sIGVsZW1lbnQpIHtcclxuICAgICAgICBpZiAoaXRlbS5vd25lciAhPT0gUEFHRV9DT05URVhULmRpc3BsYXlfcmVwb3Mub3duZXIpIHtcclxuICAgICAgICAgICAgY29uc3QgdXNlcl9pY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XHJcbiAgICAgICAgICAgIHVzZXJfaWNvbi5jbGFzc0xpc3QuYWRkKCd1c2VyLWljb24nKTtcclxuICAgICAgICAgICAgdXNlcl9pY29uLnNyYyA9ICcvaW1hZ2VzL2ljb25zL2ljb25zOC11c2VyLTYwLnBuZyc7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuYXBwZW5kKHVzZXJfaWNvbilcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFpdGVtLmlzX3JlZ3VsYXJfZmlsZSkge1xyXG4gICAgICAgICAgICBpZiAoaXRlbS5vcGVuX3VwbG9hZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb3Blbl91cGxvYWRfaWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xyXG4gICAgICAgICAgICAgICAgb3Blbl91cGxvYWRfaWNvbi5jbGFzc0xpc3QuYWRkKCdvcGVuLXVwbG9hZC1pY29uJyk7XHJcbiAgICAgICAgICAgICAgICBvcGVuX3VwbG9hZF9pY29uLnNyYyA9ICcvaW1hZ2VzL2ljb25zL2ljb25zOC1jaGVjay02MC5wbmcnO1xyXG5cclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2ltZycpWzBdLnNyYyA9ICcvaW1hZ2VzL2ljb25zL2ljb25zOC1vcGVuZWQtZm9sZGVyLTk2LnBuZyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gZGlyZWN0b3J5IHtGaWxlc3lzdGVtT2JqZWN0fVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX29uX2RpcmVjdG9yeV9hZGRlZChkaXJlY3RvcnkpIHtcclxuICAgICAgICBjb25zdCBkaXJfZGl2ID0gZGlyZWN0b3J5X2hicyh7aXRlbTogZGlyZWN0b3J5fSwge1xyXG4gICAgICAgICAgICBkYmxjbGlja2VkOiBldmVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNfdG91Y2hfZGV2aWNlKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdvcGVuLWNvbnRleHQtYnV0dG9uJykgJiYgIVJFUE9TX0JVSUxERVIuaXNfbG9va2luZ190cmFzaClcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRvci5zZXRfY3VycmVudF9kaXIoZGlyZWN0b3J5LmlkKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY2xpY2tlZDogZXZlbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzX3RvdWNoX2RldmljZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm5hdmlnYXRvci5pc190b3VjaF9zZWxlY3Rpb25fbW9kZSAmJiAhUkVQT1NfQlVJTERFUi5pc19sb29raW5nX3RyYXNoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRvci5zZXRfY3VycmVudF9kaXIoZGlyZWN0b3J5LmlkKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF2aWdhdG9yLnNlbGVjdF9pdGVtKGRpcmVjdG9yeS5pZCwgZXZlbnQuc2hpZnRLZXksIGV2ZW50LmN0cmxLZXkpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0b3Iuc2VsZWN0X2l0ZW0oZGlyZWN0b3J5LmlkLCBldmVudC5zaGlmdEtleSwgZXZlbnQuY3RybEtleSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudGVyOiAoKSA9PiB0aGlzLm5hdmlnYXRvci5zZXRfaG92ZXJfaXRlbShkaXJlY3RvcnkuaWQpLFxyXG4gICAgICAgICAgICBsZWF2ZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubmF2aWdhdG9yLmdldF9ob3Zlcl9pdGVtKCkgPT09IGRpcmVjdG9yeS5pZClcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRvci5zZXRfaG92ZXJfaXRlbShudWxsKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY29udGV4dF9tZW51OiBldmVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNfdG91Y2hfZGV2aWNlKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5uYXZpZ2F0b3IuaXNfdG91Y2hfc2VsZWN0aW9uX21vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Bhd25faXRlbV9jb250ZXh0X2FjdGlvbihkaXJlY3RvcnkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRvci5zZWxlY3RfaXRlbShkaXJlY3RvcnkuaWQsIGV2ZW50LnNoaWZ0S2V5LCBldmVudC5jdHJsS2V5LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRvci5lbnRlcl90b3VjaF9zZWxlY3Rpb25fbW9kZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRvci5zZWxlY3RfaXRlbShkaXJlY3RvcnkuaWQsIGV2ZW50LnNoaWZ0S2V5LCBldmVudC5jdHJsS2V5KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmF2aWdhdG9yLnNlbGVjdF9pdGVtKGRpcmVjdG9yeS5pZCwgZXZlbnQuc2hpZnRLZXksIGV2ZW50LmN0cmxLZXksIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNwYXduX2l0ZW1fY29udGV4dF9hY3Rpb24oZGlyZWN0b3J5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5lbnRyeV93aWRnZXRzLnNldChkaXJlY3RvcnkuaWQsIGRpcl9kaXYpXHJcbiAgICAgICAgdGhpcy5fYWRkX2VsZW1lbnRfZGVjb3JhdGlvbnMoZGlyZWN0b3J5LCBkaXJfZGl2KTtcclxuICAgICAgICBkaXJfZGl2Lm9iamVjdCA9IGRpcmVjdG9yeTtcclxuICAgICAgICBpZiAodGhpcy52aWV3cG9ydF9jb250YWluZXIpXHJcbiAgICAgICAgICAgIHRoaXMudmlld3BvcnRfY29udGFpbmVyLmFwcGVuZChkaXJfZGl2KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBmaWxlIHtGaWxlc3lzdGVtT2JqZWN0fVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX29uX2ZpbGVfYWRkZWQoZmlsZSkge1xyXG4gICAgICAgIGxldCBkaXNwbGF5X3NpemUgPSBudWxsO1xyXG4gICAgICAgIGlmIChsYXN0X2ZpbHRlciBpbnN0YW5jZW9mIFNpemVGaWx0ZXIpXHJcbiAgICAgICAgICAgIGRpc3BsYXlfc2l6ZSA9IGh1bWFuRmlsZVNpemUoZmlsZS5zaXplKTtcclxuICAgICAgICBsZXQgZGlzcGxheV9kYXRlID0gbnVsbDtcclxuICAgICAgICBpZiAobGFzdF9maWx0ZXIgaW5zdGFuY2VvZiBEYXRlRmlsdGVyKVxyXG4gICAgICAgICAgICBkaXNwbGF5X2RhdGUgPSBodW1hbl9yZWFkYWJsZV90aW1lc3RhbXAoZmlsZS50aW1lc3RhbXAgLyAxMDAwKTtcclxuICAgICAgICBjb25zdCBmaWxlX2RpdiA9IGZpbGVfaGJzKHtpdGVtOiBmaWxlLCBkaXNwbGF5X3NpemU6IGRpc3BsYXlfc2l6ZSwgZGlzcGxheV9kYXRlOiBkaXNwbGF5X2RhdGV9LCB7XHJcbiAgICAgICAgICAgIGRibGNsaWNrZWQ6IGV2ZW50ID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChpc190b3VjaF9kZXZpY2UoKSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnb3Blbi1jb250ZXh0LWJ1dHRvbicpKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRvci5zZWxlY3RfaXRlbShmaWxlLmlkLCBldmVudC5zaGlmdEtleSwgZXZlbnQuY3RybEtleSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9wZW5faXRlbV9jYXJvdXNlbCgpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjbGlja2VkOiBldmVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNfdG91Y2hfZGV2aWNlKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMubmF2aWdhdG9yLmlzX3RvdWNoX3NlbGVjdGlvbl9tb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF2aWdhdG9yLnNlbGVjdF9pdGVtKGZpbGUuaWQsIGV2ZW50LnNoaWZ0S2V5LCBldmVudC5jdHJsS2V5LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcGVuX2l0ZW1fY2Fyb3VzZWwoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0b3Iuc2VsZWN0X2l0ZW0oZmlsZS5pZCwgZXZlbnQuc2hpZnRLZXksIGV2ZW50LmN0cmxLZXkpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRvci5zZWxlY3RfaXRlbShmaWxlLmlkLCBldmVudC5zaGlmdEtleSwgZXZlbnQuY3RybEtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudGVyOiAoKSA9PiB0aGlzLm5hdmlnYXRvci5zZXRfaG92ZXJfaXRlbShmaWxlLmlkKSxcclxuICAgICAgICAgICAgbGVhdmU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm5hdmlnYXRvci5nZXRfaG92ZXJfaXRlbSgpID09PSBmaWxlLmlkKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmF2aWdhdG9yLnNldF9ob3Zlcl9pdGVtKG51bGwpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb250ZXh0X21lbnU6IGV2ZW50ID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChpc190b3VjaF9kZXZpY2UoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm5hdmlnYXRvci5pc190b3VjaF9zZWxlY3Rpb25fbW9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcGF3bl9pdGVtX2NvbnRleHRfYWN0aW9uKGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRvci5zZWxlY3RfaXRlbShmaWxlLmlkLCBldmVudC5zaGlmdEtleSwgZXZlbnQuY3RybEtleSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0b3IuZW50ZXJfdG91Y2hfc2VsZWN0aW9uX21vZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0b3Iuc2VsZWN0X2l0ZW0oZmlsZS5pZCwgZXZlbnQuc2hpZnRLZXksIGV2ZW50LmN0cmxLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0b3Iuc2VsZWN0X2l0ZW0oZmlsZS5pZCwgZXZlbnQuc2hpZnRLZXksIGV2ZW50LmN0cmxLZXksIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNwYXduX2l0ZW1fY29udGV4dF9hY3Rpb24oZmlsZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZW50cnlfd2lkZ2V0cy5zZXQoZmlsZS5pZCwgZmlsZV9kaXYpXHJcbiAgICAgICAgdGhpcy5fYWRkX2VsZW1lbnRfZGVjb3JhdGlvbnMoZmlsZSwgZmlsZV9kaXYpO1xyXG4gICAgICAgIGZpbGVfZGl2Lm9iamVjdCA9IGZpbGU7XHJcbiAgICAgICAgdGhpcy52aWV3cG9ydF9jb250YWluZXIuYXBwZW5kKGZpbGVfZGl2KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBpdGVtIHtudW1iZXJ9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfb25faXRlbV9yZW1vdmVkKGl0ZW0pIHtcclxuICAgICAgICBsZXQgd2lkZ2V0ID0gdGhpcy5lbnRyeV93aWRnZXRzLmdldChpdGVtKTtcclxuICAgICAgICBpZiAod2lkZ2V0KVxyXG4gICAgICAgICAgICB3aWRnZXQucmVtb3ZlKCk7XHJcbiAgICAgICAgdGhpcy5lbnRyeV93aWRnZXRzLmRlbGV0ZShpdGVtKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub2JqZWN0cy5sZW5ndGg7ICsraSlcclxuICAgICAgICAgICAgaWYgKHRoaXMub2JqZWN0c1tpXS5pZCA9PT0gaXRlbSlcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9iamVjdHMuc3BsaWNlKGksIDEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIG9iamVjdCB7bnVtYmVyfG51bGx9XHJcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0X2l0ZW1faW5kZXgob2JqZWN0KSB7XHJcbiAgICAgICAgaWYgKCFvYmplY3QgJiYgdGhpcy5vYmplY3RzLmxlbmd0aCAhPT0gMClcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgaWYgKHRoaXMub2JqZWN0cy5sZW5ndGggPT09IDApXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5vYmplY3RzLmxlbmd0aDsgKytpKVxyXG4gICAgICAgICAgICBpZiAodGhpcy5vYmplY3RzW2ldLmlkID09PSBvYmplY3QpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBpbmRleCB7bnVtYmVyfG51bGx9XHJcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0X2l0ZW1fYXRfaW5kZXgoaW5kZXgpIHtcclxuICAgICAgICBpZiAoaW5kZXggPj0gdGhpcy5vYmplY3RzLmxlbmd0aCB8fCBpbmRleCA8IDApXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9iamVjdHNbaW5kZXhdLmlkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIG9iamVjdCB7bnVtYmVyfVxyXG4gICAgICogQHBhcmFtIG9ubHlfZmlsZXMge2Jvb2xlYW59XHJcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0X2l0ZW1fYWZ0ZXIob2JqZWN0LCBvbmx5X2ZpbGVzID0gZmFsc2UpIHtcclxuICAgICAgICBjb25zdCBmaWxlX2luZGV4ID0gdGhpcy5nZXRfaXRlbV9pbmRleChvYmplY3QpO1xyXG4gICAgICAgIGlmIChmaWxlX2luZGV4ID09PSBudWxsKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vYmplY3RzLmxlbmd0aCAhPT0gMCA/IHRoaXMub2JqZWN0c1swXS5pZCA6IG51bGw7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm9iamVjdHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3QgaWQgPSAoaSArIGZpbGVfaW5kZXggKyAxKSAlIHRoaXMub2JqZWN0cy5sZW5ndGg7XHJcbiAgICAgICAgICAgIGlmICghb25seV9maWxlcyB8fCB0aGlzLm9iamVjdHNbaWRdLmRhdGEuaXNfcmVndWxhcl9maWxlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub2JqZWN0c1tpZF0uaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIG9iamVjdCB7bnVtYmVyfVxyXG4gICAgICogQHBhcmFtIG9ubHlfZmlsZXMge2Jvb2xlYW59XHJcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ8bnVsbH1cclxuICAgICAqL1xyXG4gICAgZ2V0X2l0ZW1fYmVmb3JlKG9iamVjdCwgb25seV9maWxlcyA9IGZhbHNlKSB7XHJcbiAgICAgICAgY29uc3QgZmlsZV9pbmRleCA9IHRoaXMuZ2V0X2l0ZW1faW5kZXgob2JqZWN0KTtcclxuICAgICAgICBpZiAoZmlsZV9pbmRleCA9PT0gbnVsbClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMub2JqZWN0cy5sZW5ndGggIT09IDAgPyB0aGlzLm9iamVjdHNbdGhpcy5vYmplY3RzLmxlbmd0aCAtIDFdLmlkIDogbnVsbDtcclxuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5vYmplY3RzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlkID0gKGkgKyBmaWxlX2luZGV4KSAlIHRoaXMub2JqZWN0cy5sZW5ndGg7XHJcbiAgICAgICAgICAgIGlmICghb25seV9maWxlcyB8fCB0aGlzLm9iamVjdHNbaWRdLmRhdGEuaXNfcmVndWxhcl9maWxlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub2JqZWN0c1tpZF0uaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIG9wZW5faXRlbV9jYXJvdXNlbCgpIHtcclxuICAgICAgICBpZiAodGhpcy5pdGVtX2Nhcm91c2VsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXRlbV9jYXJvdXNlbC5jbG9zZSgpO1xyXG4gICAgICAgICAgICB0aGlzLml0ZW1fY2Fyb3VzZWwgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gQ2Fyb3VzZWwuZ2V0X2Z1bGxzY3JlZW5fY29udGFpbmVyKCk7XHJcbiAgICAgICAgY29udGFpbmVyLnJvb3Quc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcclxuICAgICAgICBjb25zdCBpdGVtX2xpc3QgPSBuZXcgQ2Fyb3VzZWxMaXN0KHRoaXMpO1xyXG4gICAgICAgIGl0ZW1fbGlzdC5idWlsZF92aXN1YWwoY29udGFpbmVyLmxpc3RfY29udGFpbmVyKVxyXG4gICAgICAgIHRoaXMuaXRlbV9jYXJvdXNlbCA9IG5ldyBDYXJvdXNlbChpdGVtX2xpc3QsIGNvbnRhaW5lci5iYWNrZ3JvdW5kX2NvbnRhaW5lciwgdGhpcy5uYXZpZ2F0b3IuZmlsZXN5c3RlbS5nZXRfb2JqZWN0X2RhdGEodGhpcy5uYXZpZ2F0b3IubGFzdF9zZWxlY3RlZF9pdGVtKSk7XHJcblxyXG4gICAgICAgIHRoaXMuaXRlbV9jYXJvdXNlbC5vbl9jbG9zZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgY29udGFpbmVyLnJvb3Quc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2VfY2Fyb3VzZWwoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXRlbV9jYXJvdXNlbClcclxuICAgICAgICAgICAgdGhpcy5pdGVtX2Nhcm91c2VsLmNsb3NlKCk7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuaXRlbV9jYXJvdXNlbDtcclxuICAgICAgICB0aGlzLml0ZW1fY2Fyb3VzZWwgPSBudWxsO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQge0RpcmVjdG9yeUNvbnRlbnR9IiwiaW1wb3J0IHtMT0NBTF9VU0VSfSBmcm9tIFwiLi4vLi4vLi4vY29tbW9uL3Rvb2xzL3VzZXJcIjtcclxuaW1wb3J0IHtDbGllbnRTdHJpbmd9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vdG9vbHMvY2xpZW50X3N0cmluZ1wiO1xyXG5pbXBvcnQge1BBR0VfQ09OVEVYVCwgcGVybWlzc2lvbnN9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vdG9vbHMvdXRpbHNcIjtcclxuaW1wb3J0IHtzcGF3bl9jb250ZXh0X2FjdGlvbn0gZnJvbSBcIi4uL2NvbXBvbmVudHMvY29udGV4dF9hY3Rpb25cIjtcclxuaW1wb3J0IHtlZGl0X3JlcG9zfSBmcm9tIFwiLi4vZWRpdF9yZXBvcy9lZGl0X3JlcG9zX2Zvcm1cIjtcclxuaW1wb3J0IHtwYXJzZV9mZXRjaF9yZXN1bHR9IGZyb20gXCIuLi9jb21wb25lbnRzL21lc3NhZ2VfYm94XCI7XHJcbmltcG9ydCB7UkVQT1NfQlVJTERFUn0gZnJvbSBcIi4vcmVwb3NfYnVpbGRlclwiO1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gdXBkYXRlX2xhc3RfcmVwb3MoKSB7XHJcbiAgICBjb25zdCByZXBvc19saXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xhc3QtcmVwb3MtbGlzdCcpXHJcbiAgICBpZiAoIXJlcG9zX2xpc3QpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgcmVwb3NfbGlzdC5pbm5lckhUTUwgPSAnJztcclxuICAgIGNvbnN0IGVsZW1lbnRzID0gYXdhaXQgTE9DQUxfVVNFUi5nZXRfbGFzdF9yZXBvcygpO1xyXG4gICAgZm9yIChjb25zdCByZXBvcyBvZiBlbGVtZW50cy5yZXZlcnNlKCkpIHtcclxuICAgICAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgICAgICBidXR0b24ub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBgJHt3aW5kb3cub3JpZ2lufS8ke25ldyBDbGllbnRTdHJpbmcocmVwb3MudXNlcm5hbWUpLmVuY29kZWQoKX0vJHtuZXcgQ2xpZW50U3RyaW5nKHJlcG9zLm5hbWUpLmVuY29kZWQoKX1gO1xyXG4gICAgICAgIH1cclxuICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgncmVwb3MtbGlzdC1pdGVtJylcclxuICAgICAgICBpZiAoUEFHRV9DT05URVhUICYmIFBBR0VfQ09OVEVYVC5kaXNwbGF5X3JlcG9zICYmIFBBR0VfQ09OVEVYVC5kaXNwbGF5X3JlcG9zLmlkID09PSByZXBvcy5pZClcclxuICAgICAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkLXJlcG9zJyk7XHJcblxyXG4gICAgICAgIGNvbnN0IGJ1dHRvbl9pbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcclxuICAgICAgICBpZiAocmVwb3Muc3RhdHVzID09PSAncHVibGljJylcclxuICAgICAgICAgICAgYnV0dG9uX2ltZy5zcmMgPSAnL2ltYWdlcy9pY29ucy9pY29uczgtcHVibGljLTk2LnBuZyc7XHJcbiAgICAgICAgaWYgKHJlcG9zLnN0YXR1cyA9PT0gJ2hpZGRlbicpXHJcbiAgICAgICAgICAgIGJ1dHRvbl9pbWcuc3JjID0gJy9pbWFnZXMvaWNvbnMvaWNvbnM4LWludmlzaWJsZS05Ni5wbmcnO1xyXG4gICAgICAgIGlmIChyZXBvcy5zdGF0dXMgPT09ICdwcml2YXRlJylcclxuICAgICAgICAgICAgYnV0dG9uX2ltZy5zcmMgPSAnL2ltYWdlcy9pY29ucy9pY29uczgtbG9ja2VkLTk2LnBuZyc7XHJcbiAgICAgICAgY29uc3QgYnV0dG9uX3RleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcbiAgICAgICAgYnV0dG9uX3RleHQuaW5uZXJUZXh0ID0gbmV3IENsaWVudFN0cmluZyhyZXBvcy5uYW1lKS5wbGFpbigpO1xyXG4gICAgICAgIGJ1dHRvbi5hcHBlbmQoYnV0dG9uX3RleHQpO1xyXG4gICAgICAgIGJ1dHRvbi5hcHBlbmQoYnV0dG9uX2ltZyk7XHJcbiAgICAgICAgYnV0dG9uLm9uY29udGV4dG1lbnUgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgb3Blbl9yZXBvc19jb250ZXh0X21lbnUocmVwb3MuaWQpO1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBidXR0b24ucmVwb3NfaWQgPSByZXBvcy5pZDtcclxuICAgICAgICByZXBvc19saXN0LmFwcGVuZChidXR0b24pXHJcbiAgICB9XHJcbn1cclxuXHJcbnVwZGF0ZV9sYXN0X3JlcG9zKCk7XHJcblxyXG5mb3IgKGNvbnN0IGJ1dHRvbiBvZiBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdyZXBvcy1saXN0LWl0ZW0nKSkge1xyXG4gICAgYnV0dG9uLm9uY29udGV4dG1lbnUgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBvcGVuX3JlcG9zX2NvbnRleHRfbWVudShidXR0b24uZ2V0QXR0cmlidXRlKCdyZXBvc19pZCcpKTtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBvcGVuX3JlcG9zX2NvbnRleHRfbWVudShyZXBvc19pZCkge1xyXG4gICAgY29uc3QgYWN0aW9ucyA9IFtdO1xyXG5cclxuICAgIGlmICghUkVQT1NfQlVJTERFUilcclxuICAgICAgICByZXR1cm47XHJcblxyXG4gICAgY29uc3QgcmVwb3NfZGF0YSA9IGF3YWl0IHBhcnNlX2ZldGNoX3Jlc3VsdChhd2FpdCBmZXRjaCgnL2FwaS9yZXBvcy1kYXRhJyxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShbcmVwb3NfaWRdKVxyXG4gICAgICAgIH0pKTtcclxuICAgIGlmIChyZXBvc19kYXRhLmxlbmd0aCA+IDAgJiYgYXdhaXQgcGVybWlzc2lvbnMuY2FuX3VzZXJfZWRpdF9yZXBvcyhgJHt3aW5kb3cub3JpZ2lufS8ke25ldyBDbGllbnRTdHJpbmcocmVwb3NfZGF0YVswXS51c2VybmFtZSkuZm9yX3VybCgpfS8ke25ldyBDbGllbnRTdHJpbmcocmVwb3NfZGF0YVswXS5uYW1lKS5mb3JfdXJsKCl9YCkpIHtcclxuICAgICAgICBhY3Rpb25zLnB1c2goe1xyXG4gICAgICAgICAgICB0aXRsZTogXCJJbmZvcm1hdGlvbnMgJiByw6lnbGFnZXNcIixcclxuICAgICAgICAgICAgYWN0aW9uOiBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVwb3NfZGF0YS5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGAke3dpbmRvdy5vcmlnaW59LyR7bmV3IENsaWVudFN0cmluZyhyZXBvc19kYXRhWzBdLnVzZXJuYW1lKS5lbmNvZGVkKCl9LyR7bmV3IENsaWVudFN0cmluZyhyZXBvc19kYXRhWzBdLm5hbWUpLmVuY29kZWQoKX0vc2V0dGluZ3MvYDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaW1hZ2U6ICcvaW1hZ2VzL2ljb25zL2ljb25zOC1lZGl0LTk2LnBuZydcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChOdW1iZXIocmVwb3NfaWQpID09PSBOdW1iZXIoUEFHRV9DT05URVhULmRpc3BsYXlfcmVwb3MuaWQpKSB7XHJcbiAgICAgICAgYWN0aW9ucy5wdXNoKHtcclxuICAgICAgICAgICAgdGl0bGU6IFwiQ29yYmVpbGxlXCIsXHJcbiAgICAgICAgICAgIGFjdGlvbjogYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgUkVQT1NfQlVJTERFUi5nb190b190cmFzaCh0cnVlKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IFJFUE9TX0JVSUxERVIucGF0aF9idWlsZGVyLnVwZGF0ZV9wYXRoKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGltYWdlOiAnL2ltYWdlcy9pY29ucy9pY29uczgtdHJhc2gtOTYucG5nJ1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgc3Bhd25fY29udGV4dF9hY3Rpb24oYWN0aW9ucyk7XHJcbn1cclxuXHJcbndpbmRvdy5maWxlX2xpc3QgPSB7b3Blbl9yZXBvc19jb250ZXh0X21lbnV9IiwiY2xhc3MgUmVwb3NGaWx0ZXIge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGZpbGVzeXN0ZW0ge0ZpbGVzeXN0ZW19XHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGZpbGVzeXN0ZW0pIHtcclxuICAgICAgICBjb25zb2xlLmFzc2VydChmaWxlc3lzdGVtLCBcImludmFsaWQgZmlsZXN5c3RlbVwiKVxyXG4gICAgICAgIHRoaXMuZmlsZXN5c3RlbSA9IGZpbGVzeXN0ZW07XHJcbiAgICAgICAgdGhpcy5uYW1lX2ZpbHRlciA9ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGZpbHRlciB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBzZXRfbmFtZV9maWx0ZXIoZmlsdGVyKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lX2ZpbHRlciA9IGZpbHRlcjtcclxuICAgIH1cclxuXHJcbiAgICBvbmx5X2ZpbGVzX3JlY3Vyc2l2ZShlbmFibGUgPSB0cnVlKSB7XHJcbiAgICAgICAgdGhpcy5fZmlsZXNfcmVjdXJzaXZlID0gZW5hYmxlO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHBhcmVudF9kaXJlY3Rvcnkge251bWJlcn1cclxuICAgICAqIEByZXR1cm5zIHtGaWxlc3lzdGVtT2JqZWN0W119XHJcbiAgICAgKi9cclxuICAgIGdldF9kaXJlY3RvcnlfY29udGVudChwYXJlbnRfZGlyZWN0b3J5KSB7XHJcbiAgICAgICAgY29uc3QgY29udGVudCA9IFtdO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fZmlsZXNfcmVjdXJzaXZlKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbSBvZiB0aGlzLmZpbGVzeXN0ZW0uZ2V0X29iamVjdHNfaW5fZGlyZWN0b3J5KHBhcmVudF9kaXJlY3RvcnkpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5maWxlc3lzdGVtLmdldF9vYmplY3RfZGF0YShlbGVtKTtcclxuICAgICAgICAgICAgICAgIGlmICghZGF0YS5pc19yZWd1bGFyX2ZpbGUpXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudC5wdXNoKGRhdGEpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtIG9mIHRoaXMuZmlsZXN5c3RlbS5nZXRfb2JqZWN0c19pbl9kaXJlY3RvcnlfcmVjdXJzaXZlKHBhcmVudF9kaXJlY3RvcnkpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5maWxlc3lzdGVtLmdldF9vYmplY3RfZGF0YShlbGVtKTtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRhLmlzX3JlZ3VsYXJfZmlsZSlcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50LnB1c2goZGF0YSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbSBvZiB0aGlzLmZpbGVzeXN0ZW0uZ2V0X29iamVjdHNfaW5fZGlyZWN0b3J5KHBhcmVudF9kaXJlY3RvcnkpKVxyXG4gICAgICAgICAgICAgICAgY29udGVudC5wdXNoKHRoaXMuZmlsZXN5c3RlbS5nZXRfb2JqZWN0X2RhdGEoZWxlbSkpXHJcblxyXG4gICAgICAgIC8vIE5hbWUgZmlsdGVyXHJcbiAgICAgICAgaWYgKHRoaXMubmFtZV9maWx0ZXIubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpbHRlcl90ZXh0ID0gdGhpcy5uYW1lX2ZpbHRlci50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICBjb25zdCBmaWx0ZXJlZF9jb250ZW50ID0gW107XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbSBvZiBjb250ZW50KVxyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW0ubmFtZS5wbGFpbigpLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoZmlsdGVyX3RleHQpKVxyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcmVkX2NvbnRlbnQucHVzaChlbGVtKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZpbHRlcmVkX2NvbnRlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjb250ZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGVudHJpZXMge0ZpbGVzeXN0ZW1PYmplY3RbXX1cclxuICAgICAqIEBwYXJhbSByZXZlcnNlIHtib29sZWFufVxyXG4gICAgICogQHJldHVybnMge3tkaXJlY3RvcmllczogRmlsZXN5c3RlbU9iamVjdFtdLCBmaWxlczogRmlsZXN5c3RlbU9iamVjdFtdfX1cclxuICAgICAqL1xyXG4gICAgbGV4X3NvcnRfZW50cmllcyhlbnRyaWVzLCByZXZlcnNlID0gZmFsc2UpIHtcclxuICAgICAgICBjb25zdCBkaXJlY3RvcmllcyA9IFtdO1xyXG4gICAgICAgIGNvbnN0IGZpbGVzID0gW107XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xyXG4gICAgICAgICAgICBpZiAoZW50cnkuaXNfcmVndWxhcl9maWxlKVxyXG4gICAgICAgICAgICAgICAgZmlsZXMucHVzaChlbnRyeSk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIGRpcmVjdG9yaWVzLnB1c2goZW50cnkpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZXZlcnNlKVxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgZGlyZWN0b3JpZXM6IGRpcmVjdG9yaWVzLnNvcnQoKGEsIGIpID0+IGIubmFtZS5wbGFpbigpLmxvY2FsZUNvbXBhcmUoYS5uYW1lLnBsYWluKCkpKSxcclxuICAgICAgICAgICAgICAgIGZpbGVzOiBmaWxlcy5zb3J0KChhLCBiKSA9PiBiLm5hbWUucGxhaW4oKS5sb2NhbGVDb21wYXJlKGEubmFtZS5wbGFpbigpKSlcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBkaXJlY3RvcmllczogZGlyZWN0b3JpZXMuc29ydCgoYSwgYikgPT4gYS5uYW1lLnBsYWluKCkubG9jYWxlQ29tcGFyZShiLm5hbWUucGxhaW4oKSkpLFxyXG4gICAgICAgICAgICAgICAgZmlsZXM6IGZpbGVzLnNvcnQoKGEsIGIpID0+IGEubmFtZS5wbGFpbigpLmxvY2FsZUNvbXBhcmUoYi5uYW1lLnBsYWluKCkpKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQge1JlcG9zRmlsdGVyfTsiLCJpbXBvcnQge1JlcG9zRmlsdGVyfSBmcm9tIFwiLi9iYXNlX2ZpbHRlclwiO1xyXG5cclxuY2xhc3MgRGF0ZUZpbHRlciBleHRlbmRzIFJlcG9zRmlsdGVyIHtcclxuICAgIHJldmVyc2VfZmlsdGVyKCkge1xyXG4gICAgICAgIHRoaXMucmV2ZXJzZSA9IHRydWU7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0X2RpcmVjdG9yeV9jb250ZW50KHBhcmVudF9kaXJlY3RvcnkpIHtcclxuICAgICAgICBjb25zdCBlbnRyaWVzID0gdGhpcy5sZXhfc29ydF9lbnRyaWVzKHN1cGVyLmdldF9kaXJlY3RvcnlfY29udGVudChwYXJlbnRfZGlyZWN0b3J5KSwgdGhpcy5yZXZlcnNlKTtcclxuICAgICAgICBpZiAodGhpcy5yZXZlcnNlKVxyXG4gICAgICAgICAgICByZXR1cm4gZW50cmllcy5kaXJlY3Rvcmllcy5jb25jYXQoZW50cmllcy5maWxlcy5zb3J0KChhLCBiKSA9PiBiLnRpbWVzdGFtcCA+IGEudGltZXN0YW1wIHx8IGIubmFtZS5wbGFpbigpLmxvY2FsZUNvbXBhcmUoYS5uYW1lLnBsYWluKCkpKSk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gZW50cmllcy5kaXJlY3Rvcmllcy5jb25jYXQoZW50cmllcy5maWxlcy5zb3J0KChhLCBiKSA9PiBhLnRpbWVzdGFtcCA+IGIudGltZXN0YW1wIHx8IGEubmFtZS5wbGFpbigpLmxvY2FsZUNvbXBhcmUoYi5uYW1lLnBsYWluKCkpKSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7RGF0ZUZpbHRlcn07IiwiaW1wb3J0IHtSZXBvc0ZpbHRlcn0gZnJvbSBcIi4vYmFzZV9maWx0ZXJcIjtcclxuXHJcbmNsYXNzIExleGljb2dyYXBoaWNGaWx0ZXIgZXh0ZW5kcyBSZXBvc0ZpbHRlciB7XHJcbiAgICByZXZlcnNlX2ZpbHRlcigpIHtcclxuICAgICAgICB0aGlzLnJldmVyc2UgPSB0cnVlO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldF9kaXJlY3RvcnlfY29udGVudChwYXJlbnRfZGlyZWN0b3J5KSB7XHJcbiAgICAgICAgY29uc3QgZW50cmllcyA9IHRoaXMubGV4X3NvcnRfZW50cmllcyhzdXBlci5nZXRfZGlyZWN0b3J5X2NvbnRlbnQocGFyZW50X2RpcmVjdG9yeSksIHRoaXMucmV2ZXJzZSk7XHJcbiAgICAgICAgcmV0dXJuIGVudHJpZXMuZGlyZWN0b3JpZXMuY29uY2F0KGVudHJpZXMuZmlsZXMpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQge0xleGljb2dyYXBoaWNGaWx0ZXJ9OyIsImltcG9ydCB7UmVwb3NGaWx0ZXJ9IGZyb20gXCIuL2Jhc2VfZmlsdGVyXCI7XHJcblxyXG5jbGFzcyBTaXplRmlsdGVyIGV4dGVuZHMgUmVwb3NGaWx0ZXIge1xyXG4gICAgZ2V0X2RpcmVjdG9yeV9jb250ZW50KHBhcmVudF9kaXJlY3RvcnkpIHtcclxuICAgICAgICBjb25zdCBlbnRyaWVzID0gdGhpcy5sZXhfc29ydF9lbnRyaWVzKHN1cGVyLmdldF9kaXJlY3RvcnlfY29udGVudChwYXJlbnRfZGlyZWN0b3J5KSwgdGhpcy5yZXZlcnNlKTtcclxuICAgICAgICByZXR1cm4gZW50cmllcy5kaXJlY3Rvcmllcy5jb25jYXQoZW50cmllcy5maWxlcy5zb3J0KChhLCBiKSA9PiBhLnNpemUgPCBiLnNpemUgfHwgYS5uYW1lLnBsYWluKCkubG9jYWxlQ29tcGFyZShiLm5hbWUucGxhaW4oKSkpKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHtTaXplRmlsdGVyfTsiLCJpbXBvcnQge1JlcG9zRmlsdGVyfSBmcm9tIFwiLi9iYXNlX2ZpbHRlclwiO1xyXG5cclxuY2xhc3MgVHlwZUZpbHRlciBleHRlbmRzIFJlcG9zRmlsdGVyIHtcclxuICAgIGdldF9kaXJlY3RvcnlfY29udGVudChwYXJlbnRfZGlyZWN0b3J5KSB7XHJcbiAgICAgICAgY29uc3QgZW50cmllcyA9IHRoaXMubGV4X3NvcnRfZW50cmllcyhzdXBlci5nZXRfZGlyZWN0b3J5X2NvbnRlbnQocGFyZW50X2RpcmVjdG9yeSksIHRoaXMucmV2ZXJzZSk7XHJcbiAgICAgICAgcmV0dXJuIGVudHJpZXMuZGlyZWN0b3JpZXMuY29uY2F0KGVudHJpZXMuZmlsZXMuc29ydCgoYSwgYikgPT4gYS5taW1ldHlwZS5wbGFpbigpLmxvY2FsZUNvbXBhcmUoYi5taW1ldHlwZS5wbGFpbigpKSB8fCBhLm5hbWUucGxhaW4oKS5sb2NhbGVDb21wYXJlKGIubmFtZS5wbGFpbigpKSkpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQge1R5cGVGaWx0ZXJ9OyIsImltcG9ydCB7c3Bhd25fY29udGV4dF9hY3Rpb259IGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRleHRfYWN0aW9uLmpzXCI7XHJcbmltcG9ydCB7Y2xvc2VfbW9kYWwsIG9wZW5fbW9kYWx9IGZyb20gXCIuLi9jb21wb25lbnRzL21vZGFsLmpzXCI7XHJcbmltcG9ydCB7cGFyc2VfZmV0Y2hfcmVzdWx0LCBwcmludF9tZXNzYWdlfSBmcm9tIFwiLi4vY29tcG9uZW50cy9tZXNzYWdlX2JveC5qc1wiO1xyXG5pbXBvcnQge1JFUE9TX0JVSUxERVJ9IGZyb20gXCIuL3JlcG9zX2J1aWxkZXJcIjtcclxuaW1wb3J0IHtQQUdFX0NPTlRFWFQsIHBlcm1pc3Npb25zfSBmcm9tIFwiLi4vLi4vLi4vY29tbW9uL3Rvb2xzL3V0aWxzXCI7XHJcbmltcG9ydCB7Q2xpZW50U3RyaW5nfSBmcm9tIFwiLi4vLi4vLi4vY29tbW9uL3Rvb2xzL2NsaWVudF9zdHJpbmdcIjtcclxuaW1wb3J0IHtGaWxlc3lzdGVtT2JqZWN0fSBmcm9tIFwiLi4vLi4vLi4vY29tbW9uL3Rvb2xzL2ZpbGVzeXN0ZW1fdjJcIjtcclxuXHJcbmNvbnN0IGVkaXRfZGlyX2hicyA9IHJlcXVpcmUoJy4vbWVudXMvZWRpdF9kaXJlY3RvcnkuaGJzJylcclxuY29uc3QgZWRpdF9maWxlX2hicyA9IHJlcXVpcmUoJy4vbWVudXMvZWRpdF9maWxlLmhicycpXHJcblxyXG5hc3luYyBmdW5jdGlvbiBzcGF3bl9pdGVtX2NvbnRleHRfYWN0aW9uKGl0ZW0pIHtcclxuICAgIGlmICghUEFHRV9DT05URVhULmRpc3BsYXlfcmVwb3MpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgY29uc3QgYWN0aW9ucyA9IFtdO1xyXG4gICAgYWN0aW9ucy5wdXNoKHtcclxuICAgICAgICB0aXRsZTogXCJQYXJ0YWdlclwiLFxyXG4gICAgICAgIGFjdGlvbjogYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgdXJsID0gYCR7bG9jYXRpb24ub3JpZ2lufSR7UEFHRV9DT05URVhULnJlcG9zX3BhdGgoKX0vZmlsZS8ke2l0ZW0uaWR9YDtcclxuICAgICAgICAgICAgYXdhaXQgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQodXJsKTtcclxuICAgICAgICAgICAgcHJpbnRfbWVzc2FnZSgnaW5mbycsICdMaWVuIGNvcGnDqSBkYW5zIGxlIHByZXNzZSAtIHBhcGllcicsIHVybClcclxuICAgICAgICB9LFxyXG4gICAgICAgIGltYWdlOiAnL2ltYWdlcy9pY29ucy9pY29uczgtdXJsLTk2LnBuZydcclxuICAgIH0pO1xyXG5cclxuICAgIGFjdGlvbnMucHVzaCh7XHJcbiAgICAgICAgdGl0bGU6IFwiVMOpbMOpY2hhcmdlclwiLFxyXG4gICAgICAgIGFjdGlvbjogKCkgPT4ge1xyXG4gICAgICAgICAgICB3aW5kb3cub3BlbihgJHtQQUdFX0NPTlRFWFQucmVwb3NfcGF0aCgpfS9maWxlLyR7aXRlbS5pZH1gLCAnX2JsYW5rJykuZm9jdXMoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGltYWdlOiAnL2ltYWdlcy9pY29ucy9pY29uczgtZG93bmxvYWQtOTYucG5nJ1xyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKGF3YWl0IHBlcm1pc3Npb25zLmNhbl91c2VyX2VkaXRfaXRlbShQQUdFX0NPTlRFWFQucmVwb3NfcGF0aCgpLCBpdGVtLmlkKSkge1xyXG4gICAgICAgIGlmIChSRVBPU19CVUlMREVSLm5hdmlnYXRvci5zZWxlY3RlZF9pdGVtcy5zaXplIDw9IDEpXHJcbiAgICAgICAgICAgIGFjdGlvbnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogXCJNb2RpZmllclwiLFxyXG4gICAgICAgICAgICAgICAgYWN0aW9uOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaXNfcmVndWxhcl9maWxlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBleHRfc3BsaXQgPSBpdGVtLm5hbWUucGxhaW4oKS5zcGxpdCgnLicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuYW1lID0gZXh0X3NwbGl0Lmxlbmd0aCA8PSAxID8gaXRlbS5uYW1lIDogZXh0X3NwbGl0WzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBleHRlbnNpb24gPSBleHRfc3BsaXQubGVuZ3RoIDw9IDEgPyAnJyA6IGV4dF9zcGxpdFtleHRfc3BsaXQubGVuZ3RoIC0gMV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuX21vZGFsKGVkaXRfZmlsZV9oYnMoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW06IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uOiBleHRlbnNpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBpdGVtLmRlc2NyaXB0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJtaXQ6IGFzeW5jIChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmluYWxfbmFtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduYW1lJykudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbmFsX2V4dGVuc2lvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleHRlbnNpb24nKS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IENsaWVudFN0cmluZy5Gcm9tQ2xpZW50KGZpbmFsX25hbWUgKyAoZmluYWxfZXh0ZW5zaW9uLmxlbmd0aCAhPT0gMCA/IGAuJHtmaW5hbF9leHRlbnNpb259YCA6ICcnKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogQ2xpZW50U3RyaW5nLkZyb21DbGllbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Rlc2NyaXB0aW9uJykudmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZF9pdGVtID0gYXdhaXQgcGFyc2VfZmV0Y2hfcmVzdWx0KGF3YWl0IGZldGNoKGAke1BBR0VfQ09OVEVYVC5yZXBvc19wYXRoKCl9L3VwZGF0ZS8ke2l0ZW0uaWR9YCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJFUE9TX0JVSUxERVIuZmlsZXN5c3RlbS5yZW1vdmVfb2JqZWN0KGl0ZW0uaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSRVBPU19CVUlMREVSLmZpbGVzeXN0ZW0uYWRkX29iamVjdChGaWxlc3lzdGVtT2JqZWN0LkZyb21TZXJ2ZXJEYXRhKHVwZGF0ZWRfaXRlbSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VfbW9kYWwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5fbW9kYWwoZWRpdF9kaXJfaGJzKHtpdGVtOiBpdGVtfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJtaXQ6IGFzeW5jIChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IENsaWVudFN0cmluZy5Gcm9tQ2xpZW50KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduYW1lJykudmFsdWUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IENsaWVudFN0cmluZy5Gcm9tQ2xpZW50KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZXNjcmlwdGlvbicpLnZhbHVlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5fdXBsb2FkOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3Blbl91cGxvYWQnKS5jaGVja2VkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRfaXRlbSA9IGF3YWl0IHBhcnNlX2ZldGNoX3Jlc3VsdChhd2FpdCBmZXRjaChgJHtQQUdFX0NPTlRFWFQucmVwb3NfcGF0aCgpfS91cGRhdGUvJHtpdGVtLmlkfWAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSRVBPU19CVUlMREVSLmZpbGVzeXN0ZW0ucmVtb3ZlX29iamVjdChpdGVtLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUkVQT1NfQlVJTERFUi5maWxlc3lzdGVtLmFkZF9vYmplY3QoRmlsZXN5c3RlbU9iamVjdC5Gcm9tU2VydmVyRGF0YSh1cGRhdGVkX2l0ZW0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VfbW9kYWwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgaW1hZ2U6ICcvaW1hZ2VzL2ljb25zL2ljb25zOC1lZGl0LTk2LnBuZydcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgYWN0aW9ucy5wdXNoKHtcclxuICAgICAgICAgICAgdGl0bGU6IFwiQ291cGVyXCIsXHJcbiAgICAgICAgICAgIGFjdGlvbjogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgUkVQT1NfQlVJTERFUi5jdXRfc2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGltYWdlOiAnL2ltYWdlcy9pY29ucy9pY29uczgtY3V0LTQ4LnBuZydcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoUkVQT1NfQlVJTERFUi5pc19sb29raW5nX3RyYXNoKSB7XHJcbiAgICAgICAgICAgIGFjdGlvbnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogXCJSZXN0YXVyZXJcIixcclxuICAgICAgICAgICAgICAgIGFjdGlvbjogYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGZldGNoKGAke1BBR0VfQ09OVEVYVC5yZXBvc19wYXRoKCl9L3Jlc3RvcmUtZnJvbS10cmFzaC9gLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShBcnJheS5mcm9tKFJFUE9TX0JVSUxERVIubmF2aWdhdG9yLnNlbGVjdGVkX2l0ZW1zKSlcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbSBvZiBhd2FpdCByZXN1bHQuanNvbigpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUkVQT1NfQlVJTERFUi5maWxlc3lzdGVtLnJlbW92ZV9vYmplY3QoZWxlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJFUE9TX0JVSUxERVIuZGlyZWN0b3J5X2NvbnRlbnQucmVnZW5fY29udGVudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmludF9tZXNzYWdlKCdpbmZvJywgYEZpbGUgcmVzdG9yZWRgLCBgU3VjY2Vzc2Z1bGx5IHJlc3RvcmVkICR7aXRlbS5uYW1lfWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9zZV9tb2RhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0LnN0YXR1cyA9PT0gNDAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IGAvYXV0aC9zaWduaW4vYDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmludF9tZXNzYWdlKCdlcnJvcicsIGBGYWlsZWQgdG8gcmVzdG9yZSAke2l0ZW0ubmFtZX1gLCByZXN1bHQuc3RhdHVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VfbW9kYWwoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgaW1hZ2U6ICcvaW1hZ2VzL2ljb25zL2ljb25zOC1yZXN0b3JlLTk2LnBuZydcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGFjdGlvbnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogXCJTdXBwcmltZXIgZMOpZmluaXRpdmVtZW50XCIsXHJcbiAgICAgICAgICAgICAgICBhY3Rpb246ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJylcclxuICAgICAgICAgICAgICAgICAgICBwLmlubmVyVGV4dCA9IGDDinRlcyB2b3VzIHN1ciBkZSBzdXBwcmltZXIgZMOpZmluaXRpdmVtZW50ICR7aXRlbS5uYW1lfSA/YDtcclxuICAgICAgICAgICAgICAgICAgICBkaXYuYXBwZW5kKHApXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm9fYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJylcclxuICAgICAgICAgICAgICAgICAgICBub19idXR0b24uY2xhc3NMaXN0LmFkZCgnY2FuY2VsLWJ1dHRvbicpXHJcbiAgICAgICAgICAgICAgICAgICAgbm9fYnV0dG9uLmlubmVyVGV4dCA9ICdOb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIG5vX2J1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9zZV9tb2RhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBkaXYuYXBwZW5kKG5vX2J1dHRvbilcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb25maXJtX2J1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpXHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlybV9idXR0b24uaW5uZXJUZXh0ID0gJ091aSc7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlybV9idXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZmV0Y2goYCR7UEFHRV9DT05URVhULnJlcG9zX3BhdGgoKX0vcmVtb3ZlL2AsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KEFycmF5LmZyb20oUkVQT1NfQlVJTERFUi5uYXZpZ2F0b3Iuc2VsZWN0ZWRfaXRlbXMpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtIG9mIGF3YWl0IHJlc3VsdC5qc29uKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUkVQT1NfQlVJTERFUi5maWxlc3lzdGVtLnJlbW92ZV9vYmplY3QoZWxlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSRVBPU19CVUlMREVSLmRpcmVjdG9yeV9jb250ZW50LnJlZ2VuX2NvbnRlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50X21lc3NhZ2UoJ2luZm8nLCBgRmlsZSByZW1vdmVkYCwgYFN1Y2Nlc3NmdWxseSByZW1vdmVkICR7aXRlbS5uYW1lfWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VfbW9kYWwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQuc3RhdHVzID09PSA0MDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IGAvYXV0aC9zaWduaW4vYDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50X21lc3NhZ2UoJ2Vycm9yJywgYEZhaWxlZCB0byByZW1vdmUgJHtpdGVtLm5hbWV9YCwgcmVzdWx0LnN0YXR1cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9zZV9tb2RhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGRpdi5hcHBlbmQoY29uZmlybV9idXR0b24pXHJcbiAgICAgICAgICAgICAgICAgICAgb3Blbl9tb2RhbChkaXYsICc1MDBweCcsICcxMDBweCcpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGltYWdlOiAnL2ltYWdlcy9pY29ucy9pY29uczgtdHJhc2gtNTIucG5nJ1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBhY3Rpb25zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgdGl0bGU6IFwiRMOpcGxhY2VyIGRhbnMgbGEgY29yYmVpbGxlXCIsXHJcbiAgICAgICAgICAgICAgICBhY3Rpb246ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJylcclxuICAgICAgICAgICAgICAgICAgICBwLmlubmVyVGV4dCA9IGDDinRlcyB2b3VzIHN1ciBkZSB2b3Vsb2lyIGTDqXBsYWNlciAke2l0ZW0ubmFtZX0gZGFucyBsYSBjb3JiZWlsbGUgP2A7XHJcbiAgICAgICAgICAgICAgICAgICAgZGl2LmFwcGVuZChwKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vX2J1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpXHJcbiAgICAgICAgICAgICAgICAgICAgbm9fYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2NhbmNlbC1idXR0b24nKVxyXG4gICAgICAgICAgICAgICAgICAgIG5vX2J1dHRvbi5pbm5lclRleHQgPSAnTm9uJztcclxuICAgICAgICAgICAgICAgICAgICBub19idXR0b24ub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VfbW9kYWwoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZGl2LmFwcGVuZChub19idXR0b24pXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29uZmlybV9idXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpcm1fYnV0dG9uLmlubmVyVGV4dCA9ICdPdWknO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpcm1fYnV0dG9uLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IFJFUE9TX0JVSUxERVIubW92ZV9zZWxlY3Rpb25fdG9fdHJhc2goKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZGl2LmFwcGVuZChjb25maXJtX2J1dHRvbilcclxuICAgICAgICAgICAgICAgICAgICBvcGVuX21vZGFsKGRpdiwgJzUwMHB4JywgJzEwMHB4Jyk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgaW1hZ2U6ICcvaW1hZ2VzL2ljb25zL2ljb25zOC10cmFzaC01Mi5wbmcnXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNwYXduX2NvbnRleHRfYWN0aW9uKGFjdGlvbnMpO1xyXG59XHJcblxyXG5leHBvcnQge3NwYXduX2l0ZW1fY29udGV4dF9hY3Rpb259IiwiaW1wb3J0IHtwYXJzZV9mZXRjaF9yZXN1bHQsIHByaW50X21lc3NhZ2V9IGZyb20gXCIuLi9jb21wb25lbnRzL21lc3NhZ2VfYm94LmpzXCI7XHJcbmltcG9ydCB7RmlsZXN5c3RlbSwgRmlsZXN5c3RlbU9iamVjdH0gZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi90b29scy9maWxlc3lzdGVtX3YyLmpzXCI7XHJcbmltcG9ydCB7TmF2aWdhdG9yfSBmcm9tIFwiLi4vLi4vLi4vY29tbW9uL3Rvb2xzL25hdmlnYXRvci5qc1wiO1xyXG5pbXBvcnQge1BBR0VfQ09OVEVYVCwgcGVybWlzc2lvbnN9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vdG9vbHMvdXRpbHNcIjtcclxuaW1wb3J0IHtMT0NBTF9VU0VSfSBmcm9tIFwiLi4vLi4vLi4vY29tbW9uL3Rvb2xzL3VzZXJcIjtcclxuaW1wb3J0IHtjbG9zZV9tb2RhbCwgaXNfbW9kYWxfb3Blbn0gZnJvbSBcIi4uL2NvbXBvbmVudHMvbW9kYWxcIjtcclxuaW1wb3J0IHtEaXJlY3RvcnlDb250ZW50fSBmcm9tIFwiLi9kaXJlY3RvcnlfY29udGVudFwiO1xyXG5pbXBvcnQge1Rvb2xiYXJ9IGZyb20gXCIuLi90b29sYmFyL3Rvb2xiYXJcIjtcclxuXHJcbnJlcXVpcmUoJy4vaXRlbS5zY3NzJylcclxuXHJcbmNsYXNzIFJlcG9zQnVpbGRlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihyZXBvKSB7XHJcblxyXG4gICAgICAgIHRoaXMucmVwbyA9IHJlcG87XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtGaWxlc3lzdGVtfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuZmlsZXN5c3RlbSA9IG5ldyBGaWxlc3lzdGVtKHRoaXMucmVwby5kaXNwbGF5X25hbWUpO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAdHlwZSB7TmF2aWdhdG9yfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMubmF2aWdhdG9yID0gbmV3IE5hdmlnYXRvcih0aGlzKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUge0RpcmVjdG9yeUNvbnRlbnR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5kaXJlY3RvcnlfY29udGVudCA9IG5ldyBEaXJlY3RvcnlDb250ZW50KHRoaXMpO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAdHlwZSB7VG9vbGJhcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnBhdGhfYnVpbGRlciA9IG5ldyBUb29sYmFyKHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQpO1xyXG5cclxuICAgICAgICB0aGlzLm5hdmlnYXRvci5vbl9jaGFuZ2VkX2Rpcihhc3luYyAobmV3X2RpcikgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmRpcmVjdG9yeV9jb250ZW50LmRlc3Ryb3koKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQgPSBuZXcgRGlyZWN0b3J5Q29udGVudCh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5wYXRoX2J1aWxkZXIuZGlyZWN0b3J5X2NvbnRlbnQgPSB0aGlzLmRpcmVjdG9yeV9jb250ZW50O1xyXG5cclxuICAgICAgICAgICAgLy8gU2hvdyBkaXJlY3Rvcnkgb3IgcmVwbyBkZXNjcmlwdGlvblxyXG4gICAgICAgICAgICBjb25zdCBkaXJfZGF0YSA9IHRoaXMuZmlsZXN5c3RlbS5nZXRfb2JqZWN0X2RhdGEobmV3X2RpcilcclxuICAgICAgICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSBuZXdfZGlyICYmIGRpcl9kYXRhICYmIGRpcl9kYXRhLnBhcmVudF9pdGVtICE9PSBudWxsID8gZGlyX2RhdGEuZGVzY3JpcHRpb24ucGxhaW4oKSA6IFBBR0VfQ09OVEVYVC5kaXNwbGF5X3JlcG9zLmRlc2NyaXB0aW9uLnBsYWluKCk7XHJcbiAgICAgICAgICAgIGlmIChkZXNjcmlwdGlvbiAmJiBkZXNjcmlwdGlvbiAhPT0gJycgJiYgZGVzY3JpcHRpb24gIT09ICdudWxsJykge1xyXG4gICAgICAgICAgICAgICAgaW1wb3J0KCcuLi8uLi8uLi9lbWJlZF92aWV3ZXJzL2N1c3RvbV9lbGVtZW50cy9kb2N1bWVudC9zaG93ZG93bl9sb2FkZXInKS50aGVuKHNob3dkb3duID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXJlY3RvcnlfZGVzY3JpcHRpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGlyZWN0b3J5LWRlc2NyaXB0aW9uJylcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGlyZWN0b3J5X2Rlc2NyaXB0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdG9yeV9kZXNjcmlwdGlvbi5pbm5lckhUTUwgPSBzaG93ZG93bi5jb252ZXJ0X3RleHQoZGVzY3JpcHRpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdG9yeV9kZXNjcmlwdGlvbi5zdHlsZS5wYWRkaW5nID0gJzIwcHgnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkaXJlY3RvcnlfZGVzY3JpcHRpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGlyZWN0b3J5LWRlc2NyaXB0aW9uJylcclxuICAgICAgICAgICAgICAgIGlmIChkaXJlY3RvcnlfZGVzY3JpcHRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBkaXJlY3RvcnlfZGVzY3JpcHRpb24uaW5uZXJUZXh0ID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0b3J5X2Rlc2NyaXB0aW9uLnN0eWxlLnBhZGRpbmcgPSAnMCc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgdXBsb2FkX2J1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1cGxvYWQtYnV0dG9uJyk7XHJcbiAgICAgICAgICAgIGlmICh1cGxvYWRfYnV0dG9uKVxyXG4gICAgICAgICAgICAgICAgdXBsb2FkX2J1dHRvbi5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICgoYXdhaXQgcGVybWlzc2lvbnMuY2FuX3VzZXJfdXBsb2FkX3RvX2RpcmVjdG9yeShQQUdFX0NPTlRFWFQucmVwb3NfcGF0aCgpLCBuZXdfZGlyKSkgfHwgYXdhaXQgcGVybWlzc2lvbnMuY2FuX3VzZXJfdXBsb2FkX3RvX3JlcG9zKFBBR0VfQ09OVEVYVC5yZXBvc19wYXRoKCkpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB1cGxvYWRfYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgICAgICAgICB1cGxvYWRfYnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB1cGxvYWQub3Blbl9vcl91cGRhdGVfbW9kYWwoKTtcclxuICAgICAgICAgICAgICAgIHVwbG9hZF9idXR0b24uaW5uZXJUZXh0ID0gJysnO1xyXG4gICAgICAgICAgICAgICAgdXBsb2FkX2J1dHRvbi5jbGFzc0xpc3QuYWRkKCdwbHVzLWJ1dHRvbicpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdXBsb2FkX2J1dHRvbl9jb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgICAgIHVwbG9hZF9idXR0b25fY29udGFpbmVyLmlkID0gJ3VwbG9hZC1idXR0b24nO1xyXG4gICAgICAgICAgICAgICAgdXBsb2FkX2J1dHRvbl9jb250YWluZXIuYXBwZW5kKHVwbG9hZF9idXR0b24pO1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpbGUtbGlzdC1ib3gnKS5hcHBlbmQodXBsb2FkX2J1dHRvbl9jb250YWluZXIpO1xyXG5cclxuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVwbG9hZF9idXR0b25fY29udGFpbmVyICYmIHVwbG9hZF9idXR0b25fY29udGFpbmVyLnBhcmVudEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBsb2FkX2J1dHRvbl9jb250YWluZXIuc3R5bGUud2lkdGggPSB1cGxvYWRfYnV0dG9uX2NvbnRhaW5lci5wYXJlbnRFbGVtZW50Lm9mZnNldFdpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBsb2FkX2J1dHRvbl9jb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gdXBsb2FkX2J1dHRvbl9jb250YWluZXIucGFyZW50RWxlbWVudC5vZmZzZXRIZWlnaHQgKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB1cGxvYWRfYnV0dG9uX2NvbnRhaW5lci5zdHlsZS53aWR0aCA9IHVwbG9hZF9idXR0b25fY29udGFpbmVyLnBhcmVudEVsZW1lbnQub2Zmc2V0V2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgdXBsb2FkX2J1dHRvbl9jb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gdXBsb2FkX2J1dHRvbl9jb250YWluZXIucGFyZW50RWxlbWVudC5vZmZzZXRIZWlnaHQgKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgdGhpcy5mZXRjaF9yZXBvc19jb250ZW50KGZhbHNlKS50aGVuKGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5uYXZpZ2F0b3Iuc2V0X2N1cnJlbnRfZGlyKHRoaXMuZmlsZXN5c3RlbS5nZXRfb2JqZWN0X2Zyb21fcGF0aChQQUdFX0NPTlRFWFQucmVxdWVzdF9wYXRoLnBsYWluKCkpKTtcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICBjb25zdCB0aGlzX3JlZiA9IHRoaXM7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChpc19tb2RhbF9vcGVuKCkpIHtcclxuICAgICAgICAgICAgICAgIGNsb3NlX21vZGFsKCk7XHJcbiAgICAgICAgICAgICAgICBoaXN0b3J5LnB1c2hTdGF0ZSh0aGlzX3JlZi5uYXZpZ2F0b3IuY3VycmVudF9kaXJlY3RvcnksIFwiXCIsIGAke1BBR0VfQ09OVEVYVC5yZXBvc19wYXRoKCl9L3RyZWUke3RoaXNfcmVmLm5hdmlnYXRvci5nZXRfc3RyaW5nX3BhdGhfdG9fZGlyZWN0b3J5KHRoaXNfcmVmLm5hdmlnYXRvci5jdXJyZW50X2RpcmVjdG9yeSl9YCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQuaXRlbV9jYXJvdXNlbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXJlY3RvcnlfY29udGVudC5jbG9zZV9jYXJvdXNlbCgpO1xyXG4gICAgICAgICAgICAgICAgaGlzdG9yeS5wdXNoU3RhdGUodGhpc19yZWYubmF2aWdhdG9yLmN1cnJlbnRfZGlyZWN0b3J5LCBcIlwiLCBgJHtQQUdFX0NPTlRFWFQucmVwb3NfcGF0aCgpfS90cmVlJHt0aGlzX3JlZi5uYXZpZ2F0b3IuZ2V0X3N0cmluZ19wYXRoX3RvX2RpcmVjdG9yeSh0aGlzX3JlZi5uYXZpZ2F0b3IuY3VycmVudF9kaXJlY3RvcnkpfWApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXNfcmVmLm5hdmlnYXRvci5zZXRfY3VycmVudF9kaXIoZXZlbnQuc3RhdGUsIHRydWUpO1xyXG4gICAgICAgIH0sIGZhbHNlKTtcclxuXHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LnR5cGUgPT09ICd0ZXh0JylcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgaWYgKChldmVudC5rZXkgPT09ICdCYWNrc3BhY2UnIHx8IGV2ZW50LmtleSA9PT0gJ0VzY2FwZScpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNfbW9kYWxfb3BlbigpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJ0VzY2FwZScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlX21vZGFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQuaXRlbV9jYXJvdXNlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQuY2xvc2VfY2Fyb3VzZWwoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJ0VzY2FwZScgJiYgdGhpcy5uYXZpZ2F0b3Iuc2VsZWN0ZWRfaXRlbXMuc2l6ZSAhPT0gMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0b3IuY2xlYXJfc2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRfZGF0YSA9IHRoaXMuZmlsZXN5c3RlbS5nZXRfb2JqZWN0X2RhdGEodGhpcy5uYXZpZ2F0b3IuZ2V0X2N1cnJlbnRfZGlyZWN0b3J5KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudF9kYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRvci5zZXRfY3VycmVudF9kaXIoY3VycmVudF9kYXRhLnBhcmVudF9pdGVtKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0b3Iuc2VsZWN0X2l0ZW0oY3VycmVudF9kYXRhLmlkLCBmYWxzZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChldmVudC5rZXkgPT09ICdBcnJvd1JpZ2h0Jykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQgJiYgdGhpcy5kaXJlY3RvcnlfY29udGVudC5pdGVtX2Nhcm91c2VsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXJlY3RvcnlfY29udGVudC5pdGVtX2Nhcm91c2VsLmxpc3Quc2VsZWN0X25leHQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzX21vZGFsX29wZW4oKSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdF9uZXh0X2VsZW1lbnQoZXZlbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChldmVudC5rZXkgPT09ICdBcnJvd0xlZnQnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kaXJlY3RvcnlfY29udGVudCAmJiB0aGlzLmRpcmVjdG9yeV9jb250ZW50Lml0ZW1fY2Fyb3VzZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpcmVjdG9yeV9jb250ZW50Lml0ZW1fY2Fyb3VzZWwubGlzdC5zZWxlY3RfcHJldmlvdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzX21vZGFsX29wZW4oKSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdF9wcmV2aW91c19lbGVtZW50KGV2ZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAnQXJyb3dVcCcpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc19tb2RhbF9vcGVuKCkgfHwgKHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQgJiYgdGhpcy5kaXJlY3RvcnlfY29udGVudC5pdGVtX2Nhcm91c2VsKSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtX3Blcl9yb3cgPSB0aGlzLmRpcmVjdG9yeV9jb250ZW50LnZpZXdwb3J0X2NvbnRhaW5lci5vZmZzZXRXaWR0aCAvIDEyMDtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgaXRlbV9wZXJfcm93OyArK2kpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RfcHJldmlvdXNfZWxlbWVudChldmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJ0Fycm93RG93bicpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc19tb2RhbF9vcGVuKCkgfHwgKHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQgJiYgdGhpcy5kaXJlY3RvcnlfY29udGVudC5pdGVtX2Nhcm91c2VsKSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtX3Blcl9yb3cgPSB0aGlzLmRpcmVjdG9yeV9jb250ZW50LnZpZXdwb3J0X2NvbnRhaW5lci5vZmZzZXRXaWR0aCAvIDEyMDtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgaXRlbV9wZXJfcm93OyArK2kpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RfbmV4dF9lbGVtZW50KGV2ZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAnRW50ZXInKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNfbW9kYWxfb3BlbigpKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRfZGF0YSA9IHRoaXMuZmlsZXN5c3RlbS5nZXRfb2JqZWN0X2RhdGEodGhpcy5uYXZpZ2F0b3IubGFzdF9zZWxlY3RlZF9pdGVtKTtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50X2RhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudF9kYXRhLmlzX3JlZ3VsYXJfZmlsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpcmVjdG9yeV9jb250ZW50Lm9wZW5faXRlbV9jYXJvdXNlbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRvci5zZXRfY3VycmVudF9kaXIoY3VycmVudF9kYXRhLmlkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIWlzX21vZGFsX29wZW4oKSAmJiAhdGhpcy5kaXJlY3RvcnlfY29udGVudC5pdGVtX2Nhcm91c2VsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKGV2ZW50LmtleSA9PT0gJ2EnIHx8IGV2ZW50LmtleSA9PT0gJ0EnKSAmJiBldmVudC5jdHJsS2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtIG9mIHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQub2JqZWN0cylcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0b3Iuc2VsZWN0X2l0ZW0oZWxlbS5pZCwgZmFsc2UsIHRydWUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoKGV2ZW50LmtleSA9PT0gJ3gnIHx8IGV2ZW50LmtleSA9PT0gJ1gnKSAmJiBldmVudC5jdHJsS2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXRfc2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoKGV2ZW50LmtleSA9PT0gJ3YnIHx8IGV2ZW50LmtleSA9PT0gJ1YnKSAmJiBldmVudC5jdHJsS2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0b3IubW92ZV9jbGlwYm9hcmRfdG9fcGFyZW50KHRoaXMubmF2aWdhdG9yLmdldF9jdXJyZW50X2RpcmVjdG9yeSgpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJ0RlbGV0ZScpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdmVfc2VsZWN0aW9uX3RvX3RyYXNoKClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIGZhbHNlKTtcclxuICAgICAgICBMT0NBTF9VU0VSLnB1c2hfbGFzdF9yZXBvcyh0aGlzLnJlcG8uaWQpO1xyXG4gICAgfVxyXG5cclxuICAgIGN1dF9zZWxlY3Rpb24oKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBlbGVtIG9mIFJFUE9TX0JVSUxERVIubmF2aWdhdG9yLnNlbGVjdGVkX2l0ZW1zKVxyXG4gICAgICAgICAgICBSRVBPU19CVUlMREVSLmRpcmVjdG9yeV9jb250ZW50Ll9vbl9pdGVtX3JlbW92ZWQoZWxlbSk7XHJcbiAgICAgICAgUkVQT1NfQlVJTERFUi5uYXZpZ2F0b3IuY3V0X3NlbGVjdGlvbigpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIG1vdmVfc2VsZWN0aW9uX3RvX3RyYXNoKCkge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGZldGNoKGAke1BBR0VfQ09OVEVYVC5yZXBvc19wYXRoKCl9L21vdmUtdG8tdHJhc2gvYCwge1xyXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoQXJyYXkuZnJvbShSRVBPU19CVUlMREVSLm5hdmlnYXRvci5zZWxlY3RlZF9pdGVtcykpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgICAgICAgICBjb25zdCByZW1vdmVkX2VsZW1zID0gYXdhaXQgcmVzdWx0Lmpzb24oKTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtIG9mIHJlbW92ZWRfZWxlbXMpXHJcbiAgICAgICAgICAgICAgICBSRVBPU19CVUlMREVSLmZpbGVzeXN0ZW0ucmVtb3ZlX29iamVjdChlbGVtKTtcclxuICAgICAgICAgICAgcHJpbnRfbWVzc2FnZSgnaW5mbycsIGBGaWxlIHJlbW92ZWRgLCBgU3VjY2Vzc2Z1bGx5IHJlbW92ZWQgJHtyZW1vdmVkX2VsZW1zLmxlbmd0aH0gZWxlbWVudHNgKTtcclxuICAgICAgICAgICAgY2xvc2VfbW9kYWwoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdC5zdGF0dXMgPT09IDQwMykge1xyXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBgL2F1dGgvc2lnbmluL2A7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcHJpbnRfbWVzc2FnZSgnZXJyb3InLCBgRmFpbGVkIHRvIHJlbW92ZSAke2l0ZW0ubmFtZX1gLCByZXN1bHQuc3RhdHVzKTtcclxuICAgICAgICAgICAgY2xvc2VfbW9kYWwoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZmV0Y2hfcmVwb3NfY29udGVudChpc190cmFzaCA9IGZhbHNlKSB7XHJcbiAgICAgICAgY29uc3QgdGltZV9hID0gcGVyZm9ybWFuY2Uubm93KClcclxuICAgICAgICB0aGlzLmZpbGVzeXN0ZW0uY2xlYXIoKTtcclxuICAgICAgICBhd2FpdCBmZXRjaChgJHtQQUdFX0NPTlRFWFQucmVwb3NfcGF0aCgpfS8ke2lzX3RyYXNoID8gXCJ0cmFzaFwiIDogXCJjb250ZW50XCJ9L2AsIHtcclxuICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgJ2NvbnRlbnQtYXV0aHRva2VuJzogTE9DQUxfVVNFUi5nZXRfdG9rZW4oKSxcclxuICAgICAgICAgICAgICAgICdhY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oYXN5bmMgKHJlc3BvbnNlKSA9PiBhd2FpdCBwYXJzZV9mZXRjaF9yZXN1bHQocmVzcG9uc2UpKVxyXG4gICAgICAgICAgICAudGhlbigoanNvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGltZV9iID0gcGVyZm9ybWFuY2Uubm93KClcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YganNvbilcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbGVzeXN0ZW0uYWRkX29iamVjdChGaWxlc3lzdGVtT2JqZWN0LkZyb21TZXJ2ZXJEYXRhKGl0ZW0pKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVfYyA9IHBlcmZvcm1hbmNlLm5vdygpXHJcblxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKGBSZXRyaWV2ZWQgcmVwbyBjb250ZW50LiBGZXRjaCA6ICR7dGltZV9iIC0gdGltZV9hfW1zLCBEaXNwbGF5IDogJHt0aW1lX2MgLSB0aW1lX2J9bXNgKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzZWxlY3RfcHJldmlvdXNfZWxlbWVudChldmVudCkge1xyXG4gICAgICAgIHRoaXMubmF2aWdhdG9yLnNlbGVjdF9pdGVtKHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQuZ2V0X2l0ZW1fYmVmb3JlKHRoaXMubmF2aWdhdG9yLmxhc3Rfc2VsZWN0ZWRfaXRlbSwgISF0aGlzLmRpcmVjdG9yeV9jb250ZW50Lml0ZW1fY2Fyb3VzZWwpLCBmYWxzZSwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZWN0X25leHRfZWxlbWVudChldmVudCkge1xyXG4gICAgICAgIHRoaXMubmF2aWdhdG9yLnNlbGVjdF9pdGVtKHRoaXMuZGlyZWN0b3J5X2NvbnRlbnQuZ2V0X2l0ZW1fYWZ0ZXIodGhpcy5uYXZpZ2F0b3IubGFzdF9zZWxlY3RlZF9pdGVtLCAhIXRoaXMuZGlyZWN0b3J5X2NvbnRlbnQuaXRlbV9jYXJvdXNlbCksIGZhbHNlLCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnb190b190cmFzaCgpIHtcclxuICAgICAgICB0aGlzLmlzX2xvb2tpbmdfdHJhc2ggPSB0cnVlO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuZmV0Y2hfcmVwb3NfY29udGVudCh0cnVlKTtcclxuICAgICAgICB0aGlzLmRpcmVjdG9yeV9jb250ZW50LnJlZ2VuX2NvbnRlbnQoKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBleGl0X3RyYXNoKCkge1xyXG4gICAgICAgIHRoaXMuaXNfbG9va2luZ190cmFzaCA9IGZhbHNlO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuZmV0Y2hfcmVwb3NfY29udGVudChmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5kaXJlY3RvcnlfY29udGVudC5yZWdlbl9jb250ZW50KCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IFJFUE9TX0JVSUxERVIgPSBQQUdFX0NPTlRFWFQuZGlzcGxheV9yZXBvcyAmJiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmlsZS1saXN0JykgPyBuZXcgUmVwb3NCdWlsZGVyKFBBR0VfQ09OVEVYVC5kaXNwbGF5X3JlcG9zKSA6IG51bGw7XHJcblxyXG5leHBvcnQge1JFUE9TX0JVSUxERVJ9IiwiIWZ1bmN0aW9uKHQsZSl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9ZSgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoZSk6KHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczp0fHxzZWxmKS5kYXlqcz1lKCl9KHRoaXMsKGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHQ9MWUzLGU9NmU0LG49MzZlNSxyPVwibWlsbGlzZWNvbmRcIixpPVwic2Vjb25kXCIscz1cIm1pbnV0ZVwiLHU9XCJob3VyXCIsYT1cImRheVwiLG89XCJ3ZWVrXCIsYz1cIm1vbnRoXCIsZj1cInF1YXJ0ZXJcIixoPVwieWVhclwiLGQ9XCJkYXRlXCIsbD1cIkludmFsaWQgRGF0ZVwiLCQ9L14oXFxkezR9KVstL10/KFxcZHsxLDJ9KT9bLS9dPyhcXGR7MCwyfSlbVHRcXHNdKihcXGR7MSwyfSk/Oj8oXFxkezEsMn0pPzo/KFxcZHsxLDJ9KT9bLjpdPyhcXGQrKT8kLyx5PS9cXFsoW15cXF1dKyldfFl7MSw0fXxNezEsNH18RHsxLDJ9fGR7MSw0fXxIezEsMn18aHsxLDJ9fGF8QXxtezEsMn18c3sxLDJ9fFp7MSwyfXxTU1MvZyxNPXtuYW1lOlwiZW5cIix3ZWVrZGF5czpcIlN1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5XCIuc3BsaXQoXCJfXCIpLG1vbnRoczpcIkphbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXJcIi5zcGxpdChcIl9cIiksb3JkaW5hbDpmdW5jdGlvbih0KXt2YXIgZT1bXCJ0aFwiLFwic3RcIixcIm5kXCIsXCJyZFwiXSxuPXQlMTAwO3JldHVyblwiW1wiK3QrKGVbKG4tMjApJTEwXXx8ZVtuXXx8ZVswXSkrXCJdXCJ9fSxtPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1TdHJpbmcodCk7cmV0dXJuIXJ8fHIubGVuZ3RoPj1lP3Q6XCJcIitBcnJheShlKzEtci5sZW5ndGgpLmpvaW4obikrdH0sdj17czptLHo6ZnVuY3Rpb24odCl7dmFyIGU9LXQudXRjT2Zmc2V0KCksbj1NYXRoLmFicyhlKSxyPU1hdGguZmxvb3Iobi82MCksaT1uJTYwO3JldHVybihlPD0wP1wiK1wiOlwiLVwiKSttKHIsMixcIjBcIikrXCI6XCIrbShpLDIsXCIwXCIpfSxtOmZ1bmN0aW9uIHQoZSxuKXtpZihlLmRhdGUoKTxuLmRhdGUoKSlyZXR1cm4tdChuLGUpO3ZhciByPTEyKihuLnllYXIoKS1lLnllYXIoKSkrKG4ubW9udGgoKS1lLm1vbnRoKCkpLGk9ZS5jbG9uZSgpLmFkZChyLGMpLHM9bi1pPDAsdT1lLmNsb25lKCkuYWRkKHIrKHM/LTE6MSksYyk7cmV0dXJuKygtKHIrKG4taSkvKHM/aS11OnUtaSkpfHwwKX0sYTpmdW5jdGlvbih0KXtyZXR1cm4gdDwwP01hdGguY2VpbCh0KXx8MDpNYXRoLmZsb29yKHQpfSxwOmZ1bmN0aW9uKHQpe3JldHVybntNOmMseTpoLHc6byxkOmEsRDpkLGg6dSxtOnMsczppLG1zOnIsUTpmfVt0XXx8U3RyaW5nKHR8fFwiXCIpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvcyQvLFwiXCIpfSx1OmZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDA9PT10fX0sZz1cImVuXCIsRD17fTtEW2ddPU07dmFyIHA9XCIkaXNEYXlqc09iamVjdFwiLFM9ZnVuY3Rpb24odCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBffHwhKCF0fHwhdFtwXSl9LHc9ZnVuY3Rpb24gdChlLG4scil7dmFyIGk7aWYoIWUpcmV0dXJuIGc7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpe3ZhciBzPWUudG9Mb3dlckNhc2UoKTtEW3NdJiYoaT1zKSxuJiYoRFtzXT1uLGk9cyk7dmFyIHU9ZS5zcGxpdChcIi1cIik7aWYoIWkmJnUubGVuZ3RoPjEpcmV0dXJuIHQodVswXSl9ZWxzZXt2YXIgYT1lLm5hbWU7RFthXT1lLGk9YX1yZXR1cm4hciYmaSYmKGc9aSksaXx8IXImJmd9LE89ZnVuY3Rpb24odCxlKXtpZihTKHQpKXJldHVybiB0LmNsb25lKCk7dmFyIG49XCJvYmplY3RcIj09dHlwZW9mIGU/ZTp7fTtyZXR1cm4gbi5kYXRlPXQsbi5hcmdzPWFyZ3VtZW50cyxuZXcgXyhuKX0sYj12O2IubD13LGIuaT1TLGIudz1mdW5jdGlvbih0LGUpe3JldHVybiBPKHQse2xvY2FsZTplLiRMLHV0YzplLiR1LHg6ZS4keCwkb2Zmc2V0OmUuJG9mZnNldH0pfTt2YXIgXz1mdW5jdGlvbigpe2Z1bmN0aW9uIE0odCl7dGhpcy4kTD13KHQubG9jYWxlLG51bGwsITApLHRoaXMucGFyc2UodCksdGhpcy4keD10aGlzLiR4fHx0Lnh8fHt9LHRoaXNbcF09ITB9dmFyIG09TS5wcm90b3R5cGU7cmV0dXJuIG0ucGFyc2U9ZnVuY3Rpb24odCl7dGhpcy4kZD1mdW5jdGlvbih0KXt2YXIgZT10LmRhdGUsbj10LnV0YztpZihudWxsPT09ZSlyZXR1cm4gbmV3IERhdGUoTmFOKTtpZihiLnUoZSkpcmV0dXJuIG5ldyBEYXRlO2lmKGUgaW5zdGFuY2VvZiBEYXRlKXJldHVybiBuZXcgRGF0ZShlKTtpZihcInN0cmluZ1wiPT10eXBlb2YgZSYmIS9aJC9pLnRlc3QoZSkpe3ZhciByPWUubWF0Y2goJCk7aWYocil7dmFyIGk9clsyXS0xfHwwLHM9KHJbN118fFwiMFwiKS5zdWJzdHJpbmcoMCwzKTtyZXR1cm4gbj9uZXcgRGF0ZShEYXRlLlVUQyhyWzFdLGksclszXXx8MSxyWzRdfHwwLHJbNV18fDAscls2XXx8MCxzKSk6bmV3IERhdGUoclsxXSxpLHJbM118fDEscls0XXx8MCxyWzVdfHwwLHJbNl18fDAscyl9fXJldHVybiBuZXcgRGF0ZShlKX0odCksdGhpcy5pbml0KCl9LG0uaW5pdD1mdW5jdGlvbigpe3ZhciB0PXRoaXMuJGQ7dGhpcy4keT10LmdldEZ1bGxZZWFyKCksdGhpcy4kTT10LmdldE1vbnRoKCksdGhpcy4kRD10LmdldERhdGUoKSx0aGlzLiRXPXQuZ2V0RGF5KCksdGhpcy4kSD10LmdldEhvdXJzKCksdGhpcy4kbT10LmdldE1pbnV0ZXMoKSx0aGlzLiRzPXQuZ2V0U2Vjb25kcygpLHRoaXMuJG1zPXQuZ2V0TWlsbGlzZWNvbmRzKCl9LG0uJHV0aWxzPWZ1bmN0aW9uKCl7cmV0dXJuIGJ9LG0uaXNWYWxpZD1mdW5jdGlvbigpe3JldHVybiEodGhpcy4kZC50b1N0cmluZygpPT09bCl9LG0uaXNTYW1lPWZ1bmN0aW9uKHQsZSl7dmFyIG49Tyh0KTtyZXR1cm4gdGhpcy5zdGFydE9mKGUpPD1uJiZuPD10aGlzLmVuZE9mKGUpfSxtLmlzQWZ0ZXI9ZnVuY3Rpb24odCxlKXtyZXR1cm4gTyh0KTx0aGlzLnN0YXJ0T2YoZSl9LG0uaXNCZWZvcmU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5lbmRPZihlKTxPKHQpfSxtLiRnPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gYi51KHQpP3RoaXNbZV06dGhpcy5zZXQobix0KX0sbS51bml4PWZ1bmN0aW9uKCl7cmV0dXJuIE1hdGguZmxvb3IodGhpcy52YWx1ZU9mKCkvMWUzKX0sbS52YWx1ZU9mPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGQuZ2V0VGltZSgpfSxtLnN0YXJ0T2Y9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLHI9ISFiLnUoZSl8fGUsZj1iLnAodCksbD1mdW5jdGlvbih0LGUpe3ZhciBpPWIudyhuLiR1P0RhdGUuVVRDKG4uJHksZSx0KTpuZXcgRGF0ZShuLiR5LGUsdCksbik7cmV0dXJuIHI/aTppLmVuZE9mKGEpfSwkPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGIudyhuLnRvRGF0ZSgpW3RdLmFwcGx5KG4udG9EYXRlKFwic1wiKSwocj9bMCwwLDAsMF06WzIzLDU5LDU5LDk5OV0pLnNsaWNlKGUpKSxuKX0seT10aGlzLiRXLE09dGhpcy4kTSxtPXRoaXMuJEQsdj1cInNldFwiKyh0aGlzLiR1P1wiVVRDXCI6XCJcIik7c3dpdGNoKGYpe2Nhc2UgaDpyZXR1cm4gcj9sKDEsMCk6bCgzMSwxMSk7Y2FzZSBjOnJldHVybiByP2woMSxNKTpsKDAsTSsxKTtjYXNlIG86dmFyIGc9dGhpcy4kbG9jYWxlKCkud2Vla1N0YXJ0fHwwLEQ9KHk8Zz95Kzc6eSktZztyZXR1cm4gbChyP20tRDptKyg2LUQpLE0pO2Nhc2UgYTpjYXNlIGQ6cmV0dXJuICQoditcIkhvdXJzXCIsMCk7Y2FzZSB1OnJldHVybiAkKHYrXCJNaW51dGVzXCIsMSk7Y2FzZSBzOnJldHVybiAkKHYrXCJTZWNvbmRzXCIsMik7Y2FzZSBpOnJldHVybiAkKHYrXCJNaWxsaXNlY29uZHNcIiwzKTtkZWZhdWx0OnJldHVybiB0aGlzLmNsb25lKCl9fSxtLmVuZE9mPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnN0YXJ0T2YodCwhMSl9LG0uJHNldD1mdW5jdGlvbih0LGUpe3ZhciBuLG89Yi5wKHQpLGY9XCJzZXRcIisodGhpcy4kdT9cIlVUQ1wiOlwiXCIpLGw9KG49e30sblthXT1mK1wiRGF0ZVwiLG5bZF09ZitcIkRhdGVcIixuW2NdPWYrXCJNb250aFwiLG5baF09ZitcIkZ1bGxZZWFyXCIsblt1XT1mK1wiSG91cnNcIixuW3NdPWYrXCJNaW51dGVzXCIsbltpXT1mK1wiU2Vjb25kc1wiLG5bcl09ZitcIk1pbGxpc2Vjb25kc1wiLG4pW29dLCQ9bz09PWE/dGhpcy4kRCsoZS10aGlzLiRXKTplO2lmKG89PT1jfHxvPT09aCl7dmFyIHk9dGhpcy5jbG9uZSgpLnNldChkLDEpO3kuJGRbbF0oJCkseS5pbml0KCksdGhpcy4kZD15LnNldChkLE1hdGgubWluKHRoaXMuJEQseS5kYXlzSW5Nb250aCgpKSkuJGR9ZWxzZSBsJiZ0aGlzLiRkW2xdKCQpO3JldHVybiB0aGlzLmluaXQoKSx0aGlzfSxtLnNldD1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmNsb25lKCkuJHNldCh0LGUpfSxtLmdldD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpc1tiLnAodCldKCl9LG0uYWRkPWZ1bmN0aW9uKHIsZil7dmFyIGQsbD10aGlzO3I9TnVtYmVyKHIpO3ZhciAkPWIucChmKSx5PWZ1bmN0aW9uKHQpe3ZhciBlPU8obCk7cmV0dXJuIGIudyhlLmRhdGUoZS5kYXRlKCkrTWF0aC5yb3VuZCh0KnIpKSxsKX07aWYoJD09PWMpcmV0dXJuIHRoaXMuc2V0KGMsdGhpcy4kTStyKTtpZigkPT09aClyZXR1cm4gdGhpcy5zZXQoaCx0aGlzLiR5K3IpO2lmKCQ9PT1hKXJldHVybiB5KDEpO2lmKCQ9PT1vKXJldHVybiB5KDcpO3ZhciBNPShkPXt9LGRbc109ZSxkW3VdPW4sZFtpXT10LGQpWyRdfHwxLG09dGhpcy4kZC5nZXRUaW1lKCkrcipNO3JldHVybiBiLncobSx0aGlzKX0sbS5zdWJ0cmFjdD1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmFkZCgtMSp0LGUpfSxtLmZvcm1hdD1mdW5jdGlvbih0KXt2YXIgZT10aGlzLG49dGhpcy4kbG9jYWxlKCk7aWYoIXRoaXMuaXNWYWxpZCgpKXJldHVybiBuLmludmFsaWREYXRlfHxsO3ZhciByPXR8fFwiWVlZWS1NTS1ERFRISDptbTpzc1pcIixpPWIueih0aGlzKSxzPXRoaXMuJEgsdT10aGlzLiRtLGE9dGhpcy4kTSxvPW4ud2Vla2RheXMsYz1uLm1vbnRocyxmPW4ubWVyaWRpZW0saD1mdW5jdGlvbih0LG4saSxzKXtyZXR1cm4gdCYmKHRbbl18fHQoZSxyKSl8fGlbbl0uc2xpY2UoMCxzKX0sZD1mdW5jdGlvbih0KXtyZXR1cm4gYi5zKHMlMTJ8fDEyLHQsXCIwXCIpfSwkPWZ8fGZ1bmN0aW9uKHQsZSxuKXt2YXIgcj10PDEyP1wiQU1cIjpcIlBNXCI7cmV0dXJuIG4/ci50b0xvd2VyQ2FzZSgpOnJ9O3JldHVybiByLnJlcGxhY2UoeSwoZnVuY3Rpb24odCxyKXtyZXR1cm4gcnx8ZnVuY3Rpb24odCl7c3dpdGNoKHQpe2Nhc2VcIllZXCI6cmV0dXJuIFN0cmluZyhlLiR5KS5zbGljZSgtMik7Y2FzZVwiWVlZWVwiOnJldHVybiBiLnMoZS4keSw0LFwiMFwiKTtjYXNlXCJNXCI6cmV0dXJuIGErMTtjYXNlXCJNTVwiOnJldHVybiBiLnMoYSsxLDIsXCIwXCIpO2Nhc2VcIk1NTVwiOnJldHVybiBoKG4ubW9udGhzU2hvcnQsYSxjLDMpO2Nhc2VcIk1NTU1cIjpyZXR1cm4gaChjLGEpO2Nhc2VcIkRcIjpyZXR1cm4gZS4kRDtjYXNlXCJERFwiOnJldHVybiBiLnMoZS4kRCwyLFwiMFwiKTtjYXNlXCJkXCI6cmV0dXJuIFN0cmluZyhlLiRXKTtjYXNlXCJkZFwiOnJldHVybiBoKG4ud2Vla2RheXNNaW4sZS4kVyxvLDIpO2Nhc2VcImRkZFwiOnJldHVybiBoKG4ud2Vla2RheXNTaG9ydCxlLiRXLG8sMyk7Y2FzZVwiZGRkZFwiOnJldHVybiBvW2UuJFddO2Nhc2VcIkhcIjpyZXR1cm4gU3RyaW5nKHMpO2Nhc2VcIkhIXCI6cmV0dXJuIGIucyhzLDIsXCIwXCIpO2Nhc2VcImhcIjpyZXR1cm4gZCgxKTtjYXNlXCJoaFwiOnJldHVybiBkKDIpO2Nhc2VcImFcIjpyZXR1cm4gJChzLHUsITApO2Nhc2VcIkFcIjpyZXR1cm4gJChzLHUsITEpO2Nhc2VcIm1cIjpyZXR1cm4gU3RyaW5nKHUpO2Nhc2VcIm1tXCI6cmV0dXJuIGIucyh1LDIsXCIwXCIpO2Nhc2VcInNcIjpyZXR1cm4gU3RyaW5nKGUuJHMpO2Nhc2VcInNzXCI6cmV0dXJuIGIucyhlLiRzLDIsXCIwXCIpO2Nhc2VcIlNTU1wiOnJldHVybiBiLnMoZS4kbXMsMyxcIjBcIik7Y2FzZVwiWlwiOnJldHVybiBpfXJldHVybiBudWxsfSh0KXx8aS5yZXBsYWNlKFwiOlwiLFwiXCIpfSkpfSxtLnV0Y09mZnNldD1mdW5jdGlvbigpe3JldHVybiAxNSotTWF0aC5yb3VuZCh0aGlzLiRkLmdldFRpbWV6b25lT2Zmc2V0KCkvMTUpfSxtLmRpZmY9ZnVuY3Rpb24ocixkLGwpe3ZhciAkLHk9dGhpcyxNPWIucChkKSxtPU8ociksdj0obS51dGNPZmZzZXQoKS10aGlzLnV0Y09mZnNldCgpKSplLGc9dGhpcy1tLEQ9ZnVuY3Rpb24oKXtyZXR1cm4gYi5tKHksbSl9O3N3aXRjaChNKXtjYXNlIGg6JD1EKCkvMTI7YnJlYWs7Y2FzZSBjOiQ9RCgpO2JyZWFrO2Nhc2UgZjokPUQoKS8zO2JyZWFrO2Nhc2UgbzokPShnLXYpLzYwNDhlNTticmVhaztjYXNlIGE6JD0oZy12KS84NjRlNTticmVhaztjYXNlIHU6JD1nL247YnJlYWs7Y2FzZSBzOiQ9Zy9lO2JyZWFrO2Nhc2UgaTokPWcvdDticmVhaztkZWZhdWx0OiQ9Z31yZXR1cm4gbD8kOmIuYSgkKX0sbS5kYXlzSW5Nb250aD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVuZE9mKGMpLiREfSxtLiRsb2NhbGU9ZnVuY3Rpb24oKXtyZXR1cm4gRFt0aGlzLiRMXX0sbS5sb2NhbGU9ZnVuY3Rpb24odCxlKXtpZighdClyZXR1cm4gdGhpcy4kTDt2YXIgbj10aGlzLmNsb25lKCkscj13KHQsZSwhMCk7cmV0dXJuIHImJihuLiRMPXIpLG59LG0uY2xvbmU9ZnVuY3Rpb24oKXtyZXR1cm4gYi53KHRoaXMuJGQsdGhpcyl9LG0udG9EYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBEYXRlKHRoaXMudmFsdWVPZigpKX0sbS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pc1ZhbGlkKCk/dGhpcy50b0lTT1N0cmluZygpOm51bGx9LG0udG9JU09TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kZC50b0lTT1N0cmluZygpfSxtLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGQudG9VVENTdHJpbmcoKX0sTX0oKSxrPV8ucHJvdG90eXBlO3JldHVybiBPLnByb3RvdHlwZT1rLFtbXCIkbXNcIixyXSxbXCIkc1wiLGldLFtcIiRtXCIsc10sW1wiJEhcIix1XSxbXCIkV1wiLGFdLFtcIiRNXCIsY10sW1wiJHlcIixoXSxbXCIkRFwiLGRdXS5mb3JFYWNoKChmdW5jdGlvbih0KXtrW3RbMV1dPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLiRnKGUsdFswXSx0WzFdKX19KSksTy5leHRlbmQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC4kaXx8KHQoZSxfLE8pLHQuJGk9ITApLE99LE8ubG9jYWxlPXcsTy5pc0RheWpzPVMsTy51bml4PWZ1bmN0aW9uKHQpe3JldHVybiBPKDFlMyp0KX0sTy5lbj1EW2ddLE8uTHM9RCxPLnA9e30sT30pKTsiLCIhZnVuY3Rpb24odCxpKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1pKCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShpKToodD1cInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOnR8fHNlbGYpLmRheWpzX3BsdWdpbl91dGM9aSgpfSh0aGlzLChmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciB0PVwibWludXRlXCIsaT0vWystXVxcZFxcZCg/Ojo/XFxkXFxkKT8vZyxlPS8oWystXXxcXGRcXGQpL2c7cmV0dXJuIGZ1bmN0aW9uKHMsZixuKXt2YXIgdT1mLnByb3RvdHlwZTtuLnV0Yz1mdW5jdGlvbih0KXt2YXIgaT17ZGF0ZTp0LHV0YzohMCxhcmdzOmFyZ3VtZW50c307cmV0dXJuIG5ldyBmKGkpfSx1LnV0Yz1mdW5jdGlvbihpKXt2YXIgZT1uKHRoaXMudG9EYXRlKCkse2xvY2FsZTp0aGlzLiRMLHV0YzohMH0pO3JldHVybiBpP2UuYWRkKHRoaXMudXRjT2Zmc2V0KCksdCk6ZX0sdS5sb2NhbD1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMudG9EYXRlKCkse2xvY2FsZTp0aGlzLiRMLHV0YzohMX0pfTt2YXIgbz11LnBhcnNlO3UucGFyc2U9ZnVuY3Rpb24odCl7dC51dGMmJih0aGlzLiR1PSEwKSx0aGlzLiR1dGlscygpLnUodC4kb2Zmc2V0KXx8KHRoaXMuJG9mZnNldD10LiRvZmZzZXQpLG8uY2FsbCh0aGlzLHQpfTt2YXIgcj11LmluaXQ7dS5pbml0PWZ1bmN0aW9uKCl7aWYodGhpcy4kdSl7dmFyIHQ9dGhpcy4kZDt0aGlzLiR5PXQuZ2V0VVRDRnVsbFllYXIoKSx0aGlzLiRNPXQuZ2V0VVRDTW9udGgoKSx0aGlzLiREPXQuZ2V0VVRDRGF0ZSgpLHRoaXMuJFc9dC5nZXRVVENEYXkoKSx0aGlzLiRIPXQuZ2V0VVRDSG91cnMoKSx0aGlzLiRtPXQuZ2V0VVRDTWludXRlcygpLHRoaXMuJHM9dC5nZXRVVENTZWNvbmRzKCksdGhpcy4kbXM9dC5nZXRVVENNaWxsaXNlY29uZHMoKX1lbHNlIHIuY2FsbCh0aGlzKX07dmFyIGE9dS51dGNPZmZzZXQ7dS51dGNPZmZzZXQ9ZnVuY3Rpb24ocyxmKXt2YXIgbj10aGlzLiR1dGlscygpLnU7aWYobihzKSlyZXR1cm4gdGhpcy4kdT8wOm4odGhpcy4kb2Zmc2V0KT9hLmNhbGwodGhpcyk6dGhpcy4kb2Zmc2V0O2lmKFwic3RyaW5nXCI9PXR5cGVvZiBzJiYocz1mdW5jdGlvbih0KXt2b2lkIDA9PT10JiYodD1cIlwiKTt2YXIgcz10Lm1hdGNoKGkpO2lmKCFzKXJldHVybiBudWxsO3ZhciBmPShcIlwiK3NbMF0pLm1hdGNoKGUpfHxbXCItXCIsMCwwXSxuPWZbMF0sdT02MCorZlsxXSsgK2ZbMl07cmV0dXJuIDA9PT11PzA6XCIrXCI9PT1uP3U6LXV9KHMpLG51bGw9PT1zKSlyZXR1cm4gdGhpczt2YXIgdT1NYXRoLmFicyhzKTw9MTY/NjAqczpzLG89dGhpcztpZihmKXJldHVybiBvLiRvZmZzZXQ9dSxvLiR1PTA9PT1zLG87aWYoMCE9PXMpe3ZhciByPXRoaXMuJHU/dGhpcy50b0RhdGUoKS5nZXRUaW1lem9uZU9mZnNldCgpOi0xKnRoaXMudXRjT2Zmc2V0KCk7KG89dGhpcy5sb2NhbCgpLmFkZCh1K3IsdCkpLiRvZmZzZXQ9dSxvLiR4LiRsb2NhbE9mZnNldD1yfWVsc2Ugbz10aGlzLnV0YygpO3JldHVybiBvfTt2YXIgaD11LmZvcm1hdDt1LmZvcm1hdD1mdW5jdGlvbih0KXt2YXIgaT10fHwodGhpcy4kdT9cIllZWVktTU0tRERUSEg6bW06c3NbWl1cIjpcIlwiKTtyZXR1cm4gaC5jYWxsKHRoaXMsaSl9LHUudmFsdWVPZj1mdW5jdGlvbigpe3ZhciB0PXRoaXMuJHV0aWxzKCkudSh0aGlzLiRvZmZzZXQpPzA6dGhpcy4kb2Zmc2V0Kyh0aGlzLiR4LiRsb2NhbE9mZnNldHx8dGhpcy4kZC5nZXRUaW1lem9uZU9mZnNldCgpKTtyZXR1cm4gdGhpcy4kZC52YWx1ZU9mKCktNmU0KnR9LHUuaXNVVEM9ZnVuY3Rpb24oKXtyZXR1cm4hIXRoaXMuJHV9LHUudG9JU09TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50b0RhdGUoKS50b0lTT1N0cmluZygpfSx1LnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudG9EYXRlKCkudG9VVENTdHJpbmcoKX07dmFyIGw9dS50b0RhdGU7dS50b0RhdGU9ZnVuY3Rpb24odCl7cmV0dXJuXCJzXCI9PT10JiZ0aGlzLiRvZmZzZXQ/bih0aGlzLmZvcm1hdChcIllZWVktTU0tREQgSEg6bW06c3M6U1NTXCIpKS50b0RhdGUoKTpsLmNhbGwodGhpcyl9O3ZhciBjPXUuZGlmZjt1LmRpZmY9ZnVuY3Rpb24odCxpLGUpe2lmKHQmJnRoaXMuJHU9PT10LiR1KXJldHVybiBjLmNhbGwodGhpcyx0LGksZSk7dmFyIHM9dGhpcy5sb2NhbCgpLGY9bih0KS5sb2NhbCgpO3JldHVybiBjLmNhbGwocyxmLGksZSl9fX0pKTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG4vLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfaGFuZGxlYmFyc1J1bnRpbWUgPSByZXF1aXJlKCcuL2hhbmRsZWJhcnMucnVudGltZScpO1xuXG52YXIgX2hhbmRsZWJhcnNSdW50aW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hhbmRsZWJhcnNSdW50aW1lKTtcblxuLy8gQ29tcGlsZXIgaW1wb3J0c1xuXG52YXIgX2hhbmRsZWJhcnNDb21waWxlckFzdCA9IHJlcXVpcmUoJy4vaGFuZGxlYmFycy9jb21waWxlci9hc3QnKTtcblxudmFyIF9oYW5kbGViYXJzQ29tcGlsZXJBc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFuZGxlYmFyc0NvbXBpbGVyQXN0KTtcblxudmFyIF9oYW5kbGViYXJzQ29tcGlsZXJCYXNlID0gcmVxdWlyZSgnLi9oYW5kbGViYXJzL2NvbXBpbGVyL2Jhc2UnKTtcblxudmFyIF9oYW5kbGViYXJzQ29tcGlsZXJDb21waWxlciA9IHJlcXVpcmUoJy4vaGFuZGxlYmFycy9jb21waWxlci9jb21waWxlcicpO1xuXG52YXIgX2hhbmRsZWJhcnNDb21waWxlckphdmFzY3JpcHRDb21waWxlciA9IHJlcXVpcmUoJy4vaGFuZGxlYmFycy9jb21waWxlci9qYXZhc2NyaXB0LWNvbXBpbGVyJyk7XG5cbnZhciBfaGFuZGxlYmFyc0NvbXBpbGVySmF2YXNjcmlwdENvbXBpbGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hhbmRsZWJhcnNDb21waWxlckphdmFzY3JpcHRDb21waWxlcik7XG5cbnZhciBfaGFuZGxlYmFyc0NvbXBpbGVyVmlzaXRvciA9IHJlcXVpcmUoJy4vaGFuZGxlYmFycy9jb21waWxlci92aXNpdG9yJyk7XG5cbnZhciBfaGFuZGxlYmFyc0NvbXBpbGVyVmlzaXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oYW5kbGViYXJzQ29tcGlsZXJWaXNpdG9yKTtcblxudmFyIF9oYW5kbGViYXJzTm9Db25mbGljdCA9IHJlcXVpcmUoJy4vaGFuZGxlYmFycy9uby1jb25mbGljdCcpO1xuXG52YXIgX2hhbmRsZWJhcnNOb0NvbmZsaWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hhbmRsZWJhcnNOb0NvbmZsaWN0KTtcblxudmFyIF9jcmVhdGUgPSBfaGFuZGxlYmFyc1J1bnRpbWUyWydkZWZhdWx0J10uY3JlYXRlO1xuZnVuY3Rpb24gY3JlYXRlKCkge1xuICB2YXIgaGIgPSBfY3JlYXRlKCk7XG5cbiAgaGIuY29tcGlsZSA9IGZ1bmN0aW9uIChpbnB1dCwgb3B0aW9ucykge1xuICAgIHJldHVybiBfaGFuZGxlYmFyc0NvbXBpbGVyQ29tcGlsZXIuY29tcGlsZShpbnB1dCwgb3B0aW9ucywgaGIpO1xuICB9O1xuICBoYi5wcmVjb21waWxlID0gZnVuY3Rpb24gKGlucHV0LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIF9oYW5kbGViYXJzQ29tcGlsZXJDb21waWxlci5wcmVjb21waWxlKGlucHV0LCBvcHRpb25zLCBoYik7XG4gIH07XG5cbiAgaGIuQVNUID0gX2hhbmRsZWJhcnNDb21waWxlckFzdDJbJ2RlZmF1bHQnXTtcbiAgaGIuQ29tcGlsZXIgPSBfaGFuZGxlYmFyc0NvbXBpbGVyQ29tcGlsZXIuQ29tcGlsZXI7XG4gIGhiLkphdmFTY3JpcHRDb21waWxlciA9IF9oYW5kbGViYXJzQ29tcGlsZXJKYXZhc2NyaXB0Q29tcGlsZXIyWydkZWZhdWx0J107XG4gIGhiLlBhcnNlciA9IF9oYW5kbGViYXJzQ29tcGlsZXJCYXNlLnBhcnNlcjtcbiAgaGIucGFyc2UgPSBfaGFuZGxlYmFyc0NvbXBpbGVyQmFzZS5wYXJzZTtcbiAgaGIucGFyc2VXaXRob3V0UHJvY2Vzc2luZyA9IF9oYW5kbGViYXJzQ29tcGlsZXJCYXNlLnBhcnNlV2l0aG91dFByb2Nlc3Npbmc7XG5cbiAgcmV0dXJuIGhiO1xufVxuXG52YXIgaW5zdCA9IGNyZWF0ZSgpO1xuaW5zdC5jcmVhdGUgPSBjcmVhdGU7XG5cbl9oYW5kbGViYXJzTm9Db25mbGljdDJbJ2RlZmF1bHQnXShpbnN0KTtcblxuaW5zdC5WaXNpdG9yID0gX2hhbmRsZWJhcnNDb21waWxlclZpc2l0b3IyWydkZWZhdWx0J107XG5cbmluc3RbJ2RlZmF1bHQnXSA9IGluc3Q7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGluc3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdhVU5CUVc5Q0xITkNRVUZ6UWpzN096czdPM0ZEUVVjeFFpd3lRa0ZCTWtJN096czdjME5CUzNCRExEUkNRVUUwUWpzN01FTkJRMWNzWjBOQlFXZERPenR2UkVGREwwTXNNa05CUVRKRE96czdPM2xEUVVOMFJDd3JRa0ZCSzBJN096czdiME5CUlRWQ0xEQkNRVUV3UWpzN096dEJRVVZxUkN4SlFVRkpMRTlCUVU4c1IwRkJSeXdyUWtGQlVTeE5RVUZOTEVOQlFVTTdRVUZETjBJc1UwRkJVeXhOUVVGTkxFZEJRVWM3UVVGRGFFSXNUVUZCU1N4RlFVRkZMRWRCUVVjc1QwRkJUeXhGUVVGRkxFTkJRVU03TzBGQlJXNUNMRWxCUVVVc1EwRkJReXhQUVVGUExFZEJRVWNzVlVGQlV5eExRVUZMTEVWQlFVVXNUMEZCVHl4RlFVRkZPMEZCUTNCRExGZEJRVThzYjBOQlFWRXNTMEZCU3l4RlFVRkZMRTlCUVU4c1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF6dEhRVU53UXl4RFFVRkRPMEZCUTBZc1NVRkJSU3hEUVVGRExGVkJRVlVzUjBGQlJ5eFZRVUZUTEV0QlFVc3NSVUZCUlN4UFFVRlBMRVZCUVVVN1FVRkRka01zVjBGQlR5eDFRMEZCVnl4TFFVRkxMRVZCUVVVc1QwRkJUeXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETzBkQlEzWkRMRU5CUVVNN08wRkJSVVlzU1VGQlJTeERRVUZETEVkQlFVY3NjVU5CUVUwc1EwRkJRenRCUVVOaUxFbEJRVVVzUTBGQlF5eFJRVUZSTEhWRFFVRlhMRU5CUVVNN1FVRkRka0lzU1VGQlJTeERRVUZETEd0Q1FVRnJRaXh2UkVGQmNVSXNRMEZCUXp0QlFVTXpReXhKUVVGRkxFTkJRVU1zVFVGQlRTeHBRMEZCVXl4RFFVRkRPMEZCUTI1Q0xFbEJRVVVzUTBGQlF5eExRVUZMTEdkRFFVRlJMRU5CUVVNN1FVRkRha0lzU1VGQlJTeERRVUZETEhOQ1FVRnpRaXhwUkVGQmVVSXNRMEZCUXpzN1FVRkZia1FzVTBGQlR5eEZRVUZGTEVOQlFVTTdRMEZEV0RzN1FVRkZSQ3hKUVVGSkxFbEJRVWtzUjBGQlJ5eE5RVUZOTEVWQlFVVXNRMEZCUXp0QlFVTndRaXhKUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEUxQlFVMHNRMEZCUXpzN1FVRkZja0lzYTBOQlFWY3NTVUZCU1N4RFFVRkRMRU5CUVVNN08wRkJSV3BDTEVsQlFVa3NRMEZCUXl4UFFVRlBMSGxEUVVGVkxFTkJRVU03TzBGQlJYWkNMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTTdPM0ZDUVVWU0xFbEJRVWtpTENKbWFXeGxJam9pYUdGdVpHeGxZbUZ5Y3k1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQnlkVzUwYVcxbElHWnliMjBnSnk0dmFHRnVaR3hsWW1GeWN5NXlkVzUwYVcxbEp6dGNibHh1THk4Z1EyOXRjR2xzWlhJZ2FXMXdiM0owYzF4dWFXMXdiM0owSUVGVFZDQm1jbTl0SUNjdUwyaGhibVJzWldKaGNuTXZZMjl0Y0dsc1pYSXZZWE4wSnp0Y2JtbHRjRzl5ZENCN1hHNGdJSEJoY25ObGNpQmhjeUJRWVhKelpYSXNYRzRnSUhCaGNuTmxMRnh1SUNCd1lYSnpaVmRwZEdodmRYUlFjbTlqWlhOemFXNW5YRzU5SUdaeWIyMGdKeTR2YUdGdVpHeGxZbUZ5Y3k5amIyMXdhV3hsY2k5aVlYTmxKenRjYm1sdGNHOXlkQ0I3SUVOdmJYQnBiR1Z5TENCamIyMXdhV3hsTENCd2NtVmpiMjF3YVd4bElIMGdabkp2YlNBbkxpOW9ZVzVrYkdWaVlYSnpMMk52YlhCcGJHVnlMMk52YlhCcGJHVnlKenRjYm1sdGNHOXlkQ0JLWVhaaFUyTnlhWEIwUTI5dGNHbHNaWElnWm5KdmJTQW5MaTlvWVc1a2JHVmlZWEp6TDJOdmJYQnBiR1Z5TDJwaGRtRnpZM0pwY0hRdFkyOXRjR2xzWlhJbk8xeHVhVzF3YjNKMElGWnBjMmwwYjNJZ1puSnZiU0FuTGk5b1lXNWtiR1ZpWVhKekwyTnZiWEJwYkdWeUwzWnBjMmwwYjNJbk8xeHVYRzVwYlhCdmNuUWdibTlEYjI1bWJHbGpkQ0JtY205dElDY3VMMmhoYm1Sc1pXSmhjbk12Ym04dFkyOXVabXhwWTNRbk8xeHVYRzVzWlhRZ1gyTnlaV0YwWlNBOUlISjFiblJwYldVdVkzSmxZWFJsTzF4dVpuVnVZM1JwYjI0Z1kzSmxZWFJsS0NrZ2UxeHVJQ0JzWlhRZ2FHSWdQU0JmWTNKbFlYUmxLQ2s3WEc1Y2JpQWdhR0l1WTI5dGNHbHNaU0E5SUdaMWJtTjBhVzl1S0dsdWNIVjBMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHTnZiWEJwYkdVb2FXNXdkWFFzSUc5d2RHbHZibk1zSUdoaUtUdGNiaUFnZlR0Y2JpQWdhR0l1Y0hKbFkyOXRjR2xzWlNBOUlHWjFibU4wYVc5dUtHbHVjSFYwTENCdmNIUnBiMjV6S1NCN1hHNGdJQ0FnY21WMGRYSnVJSEJ5WldOdmJYQnBiR1VvYVc1d2RYUXNJRzl3ZEdsdmJuTXNJR2hpS1R0Y2JpQWdmVHRjYmx4dUlDQm9ZaTVCVTFRZ1BTQkJVMVE3WEc0Z0lHaGlMa052YlhCcGJHVnlJRDBnUTI5dGNHbHNaWEk3WEc0Z0lHaGlMa3BoZG1GVFkzSnBjSFJEYjIxd2FXeGxjaUE5SUVwaGRtRlRZM0pwY0hSRGIyMXdhV3hsY2p0Y2JpQWdhR0l1VUdGeWMyVnlJRDBnVUdGeWMyVnlPMXh1SUNCb1lpNXdZWEp6WlNBOUlIQmhjbk5sTzF4dUlDQm9ZaTV3WVhKelpWZHBkR2h2ZFhSUWNtOWpaWE56YVc1bklEMGdjR0Z5YzJWWGFYUm9iM1YwVUhKdlkyVnpjMmx1Wnp0Y2JseHVJQ0J5WlhSMWNtNGdhR0k3WEc1OVhHNWNibXhsZENCcGJuTjBJRDBnWTNKbFlYUmxLQ2s3WEc1cGJuTjBMbU55WldGMFpTQTlJR055WldGMFpUdGNibHh1Ym05RGIyNW1iR2xqZENocGJuTjBLVHRjYmx4dWFXNXpkQzVXYVhOcGRHOXlJRDBnVm1semFYUnZjanRjYmx4dWFXNXpkRnNuWkdWbVlYVnNkQ2RkSUQwZ2FXNXpkRHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnYVc1emREdGNiaUpkZlE9PVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuLy8gaXN0YW5idWwgaWdub3JlIG5leHRcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG4vLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqWydkZWZhdWx0J10gPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG52YXIgX2hhbmRsZWJhcnNCYXNlID0gcmVxdWlyZSgnLi9oYW5kbGViYXJzL2Jhc2UnKTtcblxudmFyIGJhc2UgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfaGFuZGxlYmFyc0Jhc2UpO1xuXG4vLyBFYWNoIG9mIHRoZXNlIGF1Z21lbnQgdGhlIEhhbmRsZWJhcnMgb2JqZWN0LiBObyBuZWVkIHRvIHNldHVwIGhlcmUuXG4vLyAoVGhpcyBpcyBkb25lIHRvIGVhc2lseSBzaGFyZSBjb2RlIGJldHdlZW4gY29tbW9uanMgYW5kIGJyb3dzZSBlbnZzKVxuXG52YXIgX2hhbmRsZWJhcnNTYWZlU3RyaW5nID0gcmVxdWlyZSgnLi9oYW5kbGViYXJzL3NhZmUtc3RyaW5nJyk7XG5cbnZhciBfaGFuZGxlYmFyc1NhZmVTdHJpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFuZGxlYmFyc1NhZmVTdHJpbmcpO1xuXG52YXIgX2hhbmRsZWJhcnNFeGNlcHRpb24gPSByZXF1aXJlKCcuL2hhbmRsZWJhcnMvZXhjZXB0aW9uJyk7XG5cbnZhciBfaGFuZGxlYmFyc0V4Y2VwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oYW5kbGViYXJzRXhjZXB0aW9uKTtcblxudmFyIF9oYW5kbGViYXJzVXRpbHMgPSByZXF1aXJlKCcuL2hhbmRsZWJhcnMvdXRpbHMnKTtcblxudmFyIFV0aWxzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2hhbmRsZWJhcnNVdGlscyk7XG5cbnZhciBfaGFuZGxlYmFyc1J1bnRpbWUgPSByZXF1aXJlKCcuL2hhbmRsZWJhcnMvcnVudGltZScpO1xuXG52YXIgcnVudGltZSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9oYW5kbGViYXJzUnVudGltZSk7XG5cbnZhciBfaGFuZGxlYmFyc05vQ29uZmxpY3QgPSByZXF1aXJlKCcuL2hhbmRsZWJhcnMvbm8tY29uZmxpY3QnKTtcblxudmFyIF9oYW5kbGViYXJzTm9Db25mbGljdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oYW5kbGViYXJzTm9Db25mbGljdCk7XG5cbi8vIEZvciBjb21wYXRpYmlsaXR5IGFuZCB1c2FnZSBvdXRzaWRlIG9mIG1vZHVsZSBzeXN0ZW1zLCBtYWtlIHRoZSBIYW5kbGViYXJzIG9iamVjdCBhIG5hbWVzcGFjZVxuZnVuY3Rpb24gY3JlYXRlKCkge1xuICB2YXIgaGIgPSBuZXcgYmFzZS5IYW5kbGViYXJzRW52aXJvbm1lbnQoKTtcblxuICBVdGlscy5leHRlbmQoaGIsIGJhc2UpO1xuICBoYi5TYWZlU3RyaW5nID0gX2hhbmRsZWJhcnNTYWZlU3RyaW5nMlsnZGVmYXVsdCddO1xuICBoYi5FeGNlcHRpb24gPSBfaGFuZGxlYmFyc0V4Y2VwdGlvbjJbJ2RlZmF1bHQnXTtcbiAgaGIuVXRpbHMgPSBVdGlscztcbiAgaGIuZXNjYXBlRXhwcmVzc2lvbiA9IFV0aWxzLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgaGIuVk0gPSBydW50aW1lO1xuICBoYi50ZW1wbGF0ZSA9IGZ1bmN0aW9uIChzcGVjKSB7XG4gICAgcmV0dXJuIHJ1bnRpbWUudGVtcGxhdGUoc3BlYywgaGIpO1xuICB9O1xuXG4gIHJldHVybiBoYjtcbn1cblxudmFyIGluc3QgPSBjcmVhdGUoKTtcbmluc3QuY3JlYXRlID0gY3JlYXRlO1xuXG5faGFuZGxlYmFyc05vQ29uZmxpY3QyWydkZWZhdWx0J10oaW5zdCk7XG5cbmluc3RbJ2RlZmF1bHQnXSA9IGluc3Q7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGluc3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMbkoxYm5ScGJXVXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenM3T0VKQlFYTkNMRzFDUVVGdFFqczdTVUZCTjBJc1NVRkJTVHM3T3pzN2IwTkJTVThzTUVKQlFUQkNPenM3TzIxRFFVTXpRaXgzUWtGQmQwSTdPenM3SzBKQlEzWkNMRzlDUVVGdlFqczdTVUZCTDBJc1MwRkJTenM3YVVOQlExRXNjMEpCUVhOQ096dEpRVUZ1UXl4UFFVRlBPenR2UTBGRlNTd3dRa0ZCTUVJN096czdPMEZCUjJwRUxGTkJRVk1zVFVGQlRTeEhRVUZITzBGQlEyaENMRTFCUVVrc1JVRkJSU3hIUVVGSExFbEJRVWtzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhGUVVGRkxFTkJRVU03TzBGQlJURkRMRTlCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zUlVGQlJTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMEZCUTNaQ0xFbEJRVVVzUTBGQlF5eFZRVUZWTEc5RFFVRmhMRU5CUVVNN1FVRkRNMElzU1VGQlJTeERRVUZETEZOQlFWTXNiVU5CUVZrc1EwRkJRenRCUVVONlFpeEpRVUZGTEVOQlFVTXNTMEZCU3l4SFFVRkhMRXRCUVVzc1EwRkJRenRCUVVOcVFpeEpRVUZGTEVOQlFVTXNaMEpCUVdkQ0xFZEJRVWNzUzBGQlN5eERRVUZETEdkQ1FVRm5RaXhEUVVGRE96dEJRVVUzUXl4SlFVRkZMRU5CUVVNc1JVRkJSU3hIUVVGSExFOUJRVThzUTBGQlF6dEJRVU5vUWl4SlFVRkZMRU5CUVVNc1VVRkJVU3hIUVVGSExGVkJRVk1zU1VGQlNTeEZRVUZGTzBGQlF6TkNMRmRCUVU4c1QwRkJUeXhEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNN1IwRkRia01zUTBGQlF6czdRVUZGUml4VFFVRlBMRVZCUVVVc1EwRkJRenREUVVOWU96dEJRVVZFTEVsQlFVa3NTVUZCU1N4SFFVRkhMRTFCUVUwc1JVRkJSU3hEUVVGRE8wRkJRM0JDTEVsQlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1RVRkJUU3hEUVVGRE96dEJRVVZ5UWl4clEwRkJWeXhKUVVGSkxFTkJRVU1zUTBGQlF6czdRVUZGYWtJc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXpzN2NVSkJSVklzU1VGQlNTSXNJbVpwYkdVaU9pSm9ZVzVrYkdWaVlYSnpMbkoxYm5ScGJXVXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnS2lCaGN5QmlZWE5sSUdaeWIyMGdKeTR2YUdGdVpHeGxZbUZ5Y3k5aVlYTmxKenRjYmx4dUx5OGdSV0ZqYUNCdlppQjBhR1Z6WlNCaGRXZHRaVzUwSUhSb1pTQklZVzVrYkdWaVlYSnpJRzlpYW1WamRDNGdUbThnYm1WbFpDQjBieUJ6WlhSMWNDQm9aWEpsTGx4dUx5OGdLRlJvYVhNZ2FYTWdaRzl1WlNCMGJ5QmxZWE5wYkhrZ2MyaGhjbVVnWTI5a1pTQmlaWFIzWldWdUlHTnZiVzF2Ym1weklHRnVaQ0JpY205M2MyVWdaVzUyY3lsY2JtbHRjRzl5ZENCVFlXWmxVM1J5YVc1bklHWnliMjBnSnk0dmFHRnVaR3hsWW1GeWN5OXpZV1psTFhOMGNtbHVaeWM3WEc1cGJYQnZjblFnUlhoalpYQjBhVzl1SUdaeWIyMGdKeTR2YUdGdVpHeGxZbUZ5Y3k5bGVHTmxjSFJwYjI0bk8xeHVhVzF3YjNKMElDb2dZWE1nVlhScGJITWdabkp2YlNBbkxpOW9ZVzVrYkdWaVlYSnpMM1YwYVd4ekp6dGNibWx0Y0c5eWRDQXFJR0Z6SUhKMWJuUnBiV1VnWm5KdmJTQW5MaTlvWVc1a2JHVmlZWEp6TDNKMWJuUnBiV1VuTzF4dVhHNXBiWEJ2Y25RZ2JtOURiMjVtYkdsamRDQm1jbTl0SUNjdUwyaGhibVJzWldKaGNuTXZibTh0WTI5dVpteHBZM1FuTzF4dVhHNHZMeUJHYjNJZ1kyOXRjR0YwYVdKcGJHbDBlU0JoYm1RZ2RYTmhaMlVnYjNWMGMybGtaU0J2WmlCdGIyUjFiR1VnYzNsemRHVnRjeXdnYldGclpTQjBhR1VnU0dGdVpHeGxZbUZ5Y3lCdlltcGxZM1FnWVNCdVlXMWxjM0JoWTJWY2JtWjFibU4wYVc5dUlHTnlaV0YwWlNncElIdGNiaUFnYkdWMElHaGlJRDBnYm1WM0lHSmhjMlV1U0dGdVpHeGxZbUZ5YzBWdWRtbHliMjV0Wlc1MEtDazdYRzVjYmlBZ1ZYUnBiSE11WlhoMFpXNWtLR2hpTENCaVlYTmxLVHRjYmlBZ2FHSXVVMkZtWlZOMGNtbHVaeUE5SUZOaFptVlRkSEpwYm1jN1hHNGdJR2hpTGtWNFkyVndkR2x2YmlBOUlFVjRZMlZ3ZEdsdmJqdGNiaUFnYUdJdVZYUnBiSE1nUFNCVmRHbHNjenRjYmlBZ2FHSXVaWE5qWVhCbFJYaHdjbVZ6YzJsdmJpQTlJRlYwYVd4ekxtVnpZMkZ3WlVWNGNISmxjM05wYjI0N1hHNWNiaUFnYUdJdVZrMGdQU0J5ZFc1MGFXMWxPMXh1SUNCb1lpNTBaVzF3YkdGMFpTQTlJR1oxYm1OMGFXOXVLSE53WldNcElIdGNiaUFnSUNCeVpYUjFjbTRnY25WdWRHbHRaUzUwWlcxd2JHRjBaU2h6Y0dWakxDQm9ZaWs3WEc0Z0lIMDdYRzVjYmlBZ2NtVjBkWEp1SUdoaU8xeHVmVnh1WEc1c1pYUWdhVzV6ZENBOUlHTnlaV0YwWlNncE8xeHVhVzV6ZEM1amNtVmhkR1VnUFNCamNtVmhkR1U3WEc1Y2JtNXZRMjl1Wm14cFkzUW9hVzV6ZENrN1hHNWNibWx1YzNSYkoyUmxabUYxYkhRblhTQTlJR2x1YzNRN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHbHVjM1E3WEc0aVhYMD1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuSGFuZGxlYmFyc0Vudmlyb25tZW50ID0gSGFuZGxlYmFyc0Vudmlyb25tZW50O1xuLy8gaXN0YW5idWwgaWdub3JlIG5leHRcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgX2V4Y2VwdGlvbiA9IHJlcXVpcmUoJy4vZXhjZXB0aW9uJyk7XG5cbnZhciBfZXhjZXB0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4Y2VwdGlvbik7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoJy4vaGVscGVycycpO1xuXG52YXIgX2RlY29yYXRvcnMgPSByZXF1aXJlKCcuL2RlY29yYXRvcnMnKTtcblxudmFyIF9sb2dnZXIgPSByZXF1aXJlKCcuL2xvZ2dlcicpO1xuXG52YXIgX2xvZ2dlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb2dnZXIpO1xuXG52YXIgX2ludGVybmFsUHJvdG9BY2Nlc3MgPSByZXF1aXJlKCcuL2ludGVybmFsL3Byb3RvLWFjY2VzcycpO1xuXG52YXIgVkVSU0lPTiA9ICc0LjcuOCc7XG5leHBvcnRzLlZFUlNJT04gPSBWRVJTSU9OO1xudmFyIENPTVBJTEVSX1JFVklTSU9OID0gODtcbmV4cG9ydHMuQ09NUElMRVJfUkVWSVNJT04gPSBDT01QSUxFUl9SRVZJU0lPTjtcbnZhciBMQVNUX0NPTVBBVElCTEVfQ09NUElMRVJfUkVWSVNJT04gPSA3O1xuXG5leHBvcnRzLkxBU1RfQ09NUEFUSUJMRV9DT01QSUxFUl9SRVZJU0lPTiA9IExBU1RfQ09NUEFUSUJMRV9DT01QSUxFUl9SRVZJU0lPTjtcbnZhciBSRVZJU0lPTl9DSEFOR0VTID0ge1xuICAxOiAnPD0gMS4wLnJjLjInLCAvLyAxLjAucmMuMiBpcyBhY3R1YWxseSByZXYyIGJ1dCBkb2Vzbid0IHJlcG9ydCBpdFxuICAyOiAnPT0gMS4wLjAtcmMuMycsXG4gIDM6ICc9PSAxLjAuMC1yYy40JyxcbiAgNDogJz09IDEueC54JyxcbiAgNTogJz09IDIuMC4wLWFscGhhLngnLFxuICA2OiAnPj0gMi4wLjAtYmV0YS4xJyxcbiAgNzogJz49IDQuMC4wIDw0LjMuMCcsXG4gIDg6ICc+PSA0LjMuMCdcbn07XG5cbmV4cG9ydHMuUkVWSVNJT05fQ0hBTkdFUyA9IFJFVklTSU9OX0NIQU5HRVM7XG52YXIgb2JqZWN0VHlwZSA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG5mdW5jdGlvbiBIYW5kbGViYXJzRW52aXJvbm1lbnQoaGVscGVycywgcGFydGlhbHMsIGRlY29yYXRvcnMpIHtcbiAgdGhpcy5oZWxwZXJzID0gaGVscGVycyB8fCB7fTtcbiAgdGhpcy5wYXJ0aWFscyA9IHBhcnRpYWxzIHx8IHt9O1xuICB0aGlzLmRlY29yYXRvcnMgPSBkZWNvcmF0b3JzIHx8IHt9O1xuXG4gIF9oZWxwZXJzLnJlZ2lzdGVyRGVmYXVsdEhlbHBlcnModGhpcyk7XG4gIF9kZWNvcmF0b3JzLnJlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnModGhpcyk7XG59XG5cbkhhbmRsZWJhcnNFbnZpcm9ubWVudC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBIYW5kbGViYXJzRW52aXJvbm1lbnQsXG5cbiAgbG9nZ2VyOiBfbG9nZ2VyMlsnZGVmYXVsdCddLFxuICBsb2c6IF9sb2dnZXIyWydkZWZhdWx0J10ubG9nLFxuXG4gIHJlZ2lzdGVySGVscGVyOiBmdW5jdGlvbiByZWdpc3RlckhlbHBlcihuYW1lLCBmbikge1xuICAgIGlmIChfdXRpbHMudG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgaWYgKGZuKSB7XG4gICAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdBcmcgbm90IHN1cHBvcnRlZCB3aXRoIG11bHRpcGxlIGhlbHBlcnMnKTtcbiAgICAgIH1cbiAgICAgIF91dGlscy5leHRlbmQodGhpcy5oZWxwZXJzLCBuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5oZWxwZXJzW25hbWVdID0gZm47XG4gICAgfVxuICB9LFxuICB1bnJlZ2lzdGVySGVscGVyOiBmdW5jdGlvbiB1bnJlZ2lzdGVySGVscGVyKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5oZWxwZXJzW25hbWVdO1xuICB9LFxuXG4gIHJlZ2lzdGVyUGFydGlhbDogZnVuY3Rpb24gcmVnaXN0ZXJQYXJ0aWFsKG5hbWUsIHBhcnRpYWwpIHtcbiAgICBpZiAoX3V0aWxzLnRvU3RyaW5nLmNhbGwobmFtZSkgPT09IG9iamVjdFR5cGUpIHtcbiAgICAgIF91dGlscy5leHRlbmQodGhpcy5wYXJ0aWFscywgbmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgcGFydGlhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ0F0dGVtcHRpbmcgdG8gcmVnaXN0ZXIgYSBwYXJ0aWFsIGNhbGxlZCBcIicgKyBuYW1lICsgJ1wiIGFzIHVuZGVmaW5lZCcpO1xuICAgICAgfVxuICAgICAgdGhpcy5wYXJ0aWFsc1tuYW1lXSA9IHBhcnRpYWw7XG4gICAgfVxuICB9LFxuICB1bnJlZ2lzdGVyUGFydGlhbDogZnVuY3Rpb24gdW5yZWdpc3RlclBhcnRpYWwobmFtZSkge1xuICAgIGRlbGV0ZSB0aGlzLnBhcnRpYWxzW25hbWVdO1xuICB9LFxuXG4gIHJlZ2lzdGVyRGVjb3JhdG9yOiBmdW5jdGlvbiByZWdpc3RlckRlY29yYXRvcihuYW1lLCBmbikge1xuICAgIGlmIChfdXRpbHMudG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgaWYgKGZuKSB7XG4gICAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdBcmcgbm90IHN1cHBvcnRlZCB3aXRoIG11bHRpcGxlIGRlY29yYXRvcnMnKTtcbiAgICAgIH1cbiAgICAgIF91dGlscy5leHRlbmQodGhpcy5kZWNvcmF0b3JzLCBuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kZWNvcmF0b3JzW25hbWVdID0gZm47XG4gICAgfVxuICB9LFxuICB1bnJlZ2lzdGVyRGVjb3JhdG9yOiBmdW5jdGlvbiB1bnJlZ2lzdGVyRGVjb3JhdG9yKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5kZWNvcmF0b3JzW25hbWVdO1xuICB9LFxuICAvKipcbiAgICogUmVzZXQgdGhlIG1lbW9yeSBvZiBpbGxlZ2FsIHByb3BlcnR5IGFjY2Vzc2VzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gbG9nZ2VkLlxuICAgKiBAZGVwcmVjYXRlZCBzaG91bGQgb25seSBiZSB1c2VkIGluIGhhbmRsZWJhcnMgdGVzdC1jYXNlc1xuICAgKi9cbiAgcmVzZXRMb2dnZWRQcm9wZXJ0eUFjY2Vzc2VzOiBmdW5jdGlvbiByZXNldExvZ2dlZFByb3BlcnR5QWNjZXNzZXMoKSB7XG4gICAgX2ludGVybmFsUHJvdG9BY2Nlc3MucmVzZXRMb2dnZWRQcm9wZXJ0aWVzKCk7XG4gIH1cbn07XG5cbnZhciBsb2cgPSBfbG9nZ2VyMlsnZGVmYXVsdCddLmxvZztcblxuZXhwb3J0cy5sb2cgPSBsb2c7XG5leHBvcnRzLmNyZWF0ZUZyYW1lID0gX3V0aWxzLmNyZWF0ZUZyYW1lO1xuZXhwb3J0cy5sb2dnZXIgPSBfbG9nZ2VyMlsnZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMMkpoYzJVdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN2NVSkJRVGhETEZOQlFWTTdPM2xDUVVOcVF5eGhRVUZoT3pzN08zVkNRVU5KTEZkQlFWYzdPekJDUVVOU0xHTkJRV003TzNOQ1FVTnlReXhWUVVGVk96czdPMjFEUVVOVExIbENRVUY1UWpzN1FVRkZlRVFzU1VGQlRTeFBRVUZQTEVkQlFVY3NUMEZCVHl4RFFVRkRPenRCUVVONFFpeEpRVUZOTEdsQ1FVRnBRaXhIUVVGSExFTkJRVU1zUTBGQlF6czdRVUZETlVJc1NVRkJUU3hwUTBGQmFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN096dEJRVVUxUXl4SlFVRk5MR2RDUVVGblFpeEhRVUZITzBGQlF6bENMRWRCUVVNc1JVRkJSU3hoUVVGaE8wRkJRMmhDTEVkQlFVTXNSVUZCUlN4bFFVRmxPMEZCUTJ4Q0xFZEJRVU1zUlVGQlJTeGxRVUZsTzBGQlEyeENMRWRCUVVNc1JVRkJSU3hWUVVGVk8wRkJRMklzUjBGQlF5eEZRVUZGTEd0Q1FVRnJRanRCUVVOeVFpeEhRVUZETEVWQlFVVXNhVUpCUVdsQ08wRkJRM0JDTEVkQlFVTXNSVUZCUlN4cFFrRkJhVUk3UVVGRGNFSXNSMEZCUXl4RlFVRkZMRlZCUVZVN1EwRkRaQ3hEUVVGRE96czdRVUZGUml4SlFVRk5MRlZCUVZVc1IwRkJSeXhwUWtGQmFVSXNRMEZCUXpzN1FVRkZPVUlzVTBGQlV5eHhRa0ZCY1VJc1EwRkJReXhQUVVGUExFVkJRVVVzVVVGQlVTeEZRVUZGTEZWQlFWVXNSVUZCUlR0QlFVTnVSU3hOUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZITEU5QlFVOHNTVUZCU1N4RlFVRkZMRU5CUVVNN1FVRkROMElzVFVGQlNTeERRVUZETEZGQlFWRXNSMEZCUnl4UlFVRlJMRWxCUVVrc1JVRkJSU3hEUVVGRE8wRkJReTlDTEUxQlFVa3NRMEZCUXl4VlFVRlZMRWRCUVVjc1ZVRkJWU3hKUVVGSkxFVkJRVVVzUTBGQlF6czdRVUZGYmtNc2EwTkJRWFZDTEVsQlFVa3NRMEZCUXl4RFFVRkRPMEZCUXpkQ0xIZERRVUV3UWl4SlFVRkpMRU5CUVVNc1EwRkJRenREUVVOcVF6czdRVUZGUkN4eFFrRkJjVUlzUTBGQlF5eFRRVUZUTEVkQlFVYzdRVUZEYUVNc1lVRkJWeXhGUVVGRkxIRkNRVUZ4UWpzN1FVRkZiRU1zVVVGQlRTeHhRa0ZCVVR0QlFVTmtMRXRCUVVjc1JVRkJSU3h2UWtGQlR5eEhRVUZIT3p0QlFVVm1MR2RDUVVGakxFVkJRVVVzZDBKQlFWTXNTVUZCU1N4RlFVRkZMRVZCUVVVc1JVRkJSVHRCUVVOcVF5eFJRVUZKTEdkQ1FVRlRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eFZRVUZWTEVWQlFVVTdRVUZEZEVNc1ZVRkJTU3hGUVVGRkxFVkJRVVU3UVVGRFRpeGpRVUZOTERKQ1FVRmpMSGxEUVVGNVF5eERRVUZETEVOQlFVTTdUMEZEYUVVN1FVRkRSQ3h2UWtGQlR5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8wdEJRelZDTEUxQlFVMDdRVUZEVEN4VlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXp0TFFVTjZRanRIUVVOR08wRkJRMFFzYTBKQlFXZENMRVZCUVVVc01FSkJRVk1zU1VGQlNTeEZRVUZGTzBGQlF5OUNMRmRCUVU4c1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0SFFVTXpRanM3UVVGRlJDeHBRa0ZCWlN4RlFVRkZMSGxDUVVGVExFbEJRVWtzUlVGQlJTeFBRVUZQTEVWQlFVVTdRVUZEZGtNc1VVRkJTU3huUWtGQlV5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1ZVRkJWU3hGUVVGRk8wRkJRM1JETEc5Q1FVRlBMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdTMEZETjBJc1RVRkJUVHRCUVVOTUxGVkJRVWtzVDBGQlR5eFBRVUZQTEV0QlFVc3NWMEZCVnl4RlFVRkZPMEZCUTJ4RExHTkJRVTBzZVVWQlEzZERMRWxCUVVrc2IwSkJRMnBFTEVOQlFVTTdUMEZEU0R0QlFVTkVMRlZCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NUMEZCVHl4RFFVRkRPMHRCUXk5Q08wZEJRMFk3UVVGRFJDeHRRa0ZCYVVJc1JVRkJSU3d5UWtGQlV5eEpRVUZKTEVWQlFVVTdRVUZEYUVNc1YwRkJUeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMGRCUXpWQ096dEJRVVZFTEcxQ1FVRnBRaXhGUVVGRkxESkNRVUZUTEVsQlFVa3NSVUZCUlN4RlFVRkZMRVZCUVVVN1FVRkRjRU1zVVVGQlNTeG5Ra0ZCVXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzVlVGQlZTeEZRVUZGTzBGQlEzUkRMRlZCUVVrc1JVRkJSU3hGUVVGRk8wRkJRMDRzWTBGQlRTd3lRa0ZCWXl3MFEwRkJORU1zUTBGQlF5eERRVUZETzA5QlEyNUZPMEZCUTBRc2IwSkJRVThzU1VGQlNTeERRVUZETEZWQlFWVXNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenRMUVVNdlFpeE5RVUZOTzBGQlEwd3NWVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTTdTMEZETlVJN1IwRkRSanRCUVVORUxIRkNRVUZ0UWl4RlFVRkZMRFpDUVVGVExFbEJRVWtzUlVGQlJUdEJRVU5zUXl4WFFVRlBMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdSMEZET1VJN096czdPMEZCUzBRc05rSkJRVEpDTEVWQlFVRXNkVU5CUVVjN1FVRkROVUlzWjBSQlFYVkNMRU5CUVVNN1IwRkRla0k3UTBGRFJpeERRVUZET3p0QlFVVkxMRWxCUVVrc1IwRkJSeXhIUVVGSExHOUNRVUZQTEVkQlFVY3NRMEZCUXpzN08xRkJSVzVDTEZkQlFWYzdVVUZCUlN4TlFVRk5JaXdpWm1sc1pTSTZJbUpoYzJVdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdleUJqY21WaGRHVkdjbUZ0WlN3Z1pYaDBaVzVrTENCMGIxTjBjbWx1WnlCOUlHWnliMjBnSnk0dmRYUnBiSE1uTzF4dWFXMXdiM0owSUVWNFkyVndkR2x2YmlCbWNtOXRJQ2N1TDJWNFkyVndkR2x2YmljN1hHNXBiWEJ2Y25RZ2V5QnlaV2RwYzNSbGNrUmxabUYxYkhSSVpXeHdaWEp6SUgwZ1puSnZiU0FuTGk5b1pXeHdaWEp6Snp0Y2JtbHRjRzl5ZENCN0lISmxaMmx6ZEdWeVJHVm1ZWFZzZEVSbFkyOXlZWFJ2Y25NZ2ZTQm1jbTl0SUNjdUwyUmxZMjl5WVhSdmNuTW5PMXh1YVcxd2IzSjBJR3h2WjJkbGNpQm1jbTl0SUNjdUwyeHZaMmRsY2ljN1hHNXBiWEJ2Y25RZ2V5QnlaWE5sZEV4dloyZGxaRkJ5YjNCbGNuUnBaWE1nZlNCbWNtOXRJQ2N1TDJsdWRHVnlibUZzTDNCeWIzUnZMV0ZqWTJWemN5YzdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQldSVkpUU1U5T0lEMGdKelF1Tnk0NEp6dGNibVY0Y0c5eWRDQmpiMjV6ZENCRFQwMVFTVXhGVWw5U1JWWkpVMGxQVGlBOUlEZzdYRzVsZUhCdmNuUWdZMjl1YzNRZ1RFRlRWRjlEVDAxUVFWUkpRa3hGWDBOUFRWQkpURVZTWDFKRlZrbFRTVTlPSUQwZ056dGNibHh1Wlhod2IzSjBJR052Ym5OMElGSkZWa2xUU1U5T1gwTklRVTVIUlZNZ1BTQjdYRzRnSURFNklDYzhQU0F4TGpBdWNtTXVNaWNzSUM4dklERXVNQzV5WXk0eUlHbHpJR0ZqZEhWaGJHeDVJSEpsZGpJZ1luVjBJR1J2WlhOdUozUWdjbVZ3YjNKMElHbDBYRzRnSURJNklDYzlQU0F4TGpBdU1DMXlZeTR6Snl4Y2JpQWdNem9nSnowOUlERXVNQzR3TFhKakxqUW5MRnh1SUNBME9pQW5QVDBnTVM1NExuZ25MRnh1SUNBMU9pQW5QVDBnTWk0d0xqQXRZV3h3YUdFdWVDY3NYRzRnSURZNklDYytQU0F5TGpBdU1DMWlaWFJoTGpFbkxGeHVJQ0EzT2lBblBqMGdOQzR3TGpBZ1BEUXVNeTR3Snl4Y2JpQWdPRG9nSno0OUlEUXVNeTR3SjF4dWZUdGNibHh1WTI5dWMzUWdiMkpxWldOMFZIbHdaU0E5SUNkYmIySnFaV04wSUU5aWFtVmpkRjBuTzF4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1NHRnVaR3hsWW1GeWMwVnVkbWx5YjI1dFpXNTBLR2hsYkhCbGNuTXNJSEJoY25ScFlXeHpMQ0JrWldOdmNtRjBiM0p6S1NCN1hHNGdJSFJvYVhNdWFHVnNjR1Z5Y3lBOUlHaGxiSEJsY25NZ2ZId2dlMzA3WEc0Z0lIUm9hWE11Y0dGeWRHbGhiSE1nUFNCd1lYSjBhV0ZzY3lCOGZDQjdmVHRjYmlBZ2RHaHBjeTVrWldOdmNtRjBiM0p6SUQwZ1pHVmpiM0poZEc5eWN5QjhmQ0I3ZlR0Y2JseHVJQ0J5WldkcGMzUmxja1JsWm1GMWJIUklaV3h3WlhKektIUm9hWE1wTzF4dUlDQnlaV2RwYzNSbGNrUmxabUYxYkhSRVpXTnZjbUYwYjNKektIUm9hWE1wTzF4dWZWeHVYRzVJWVc1a2JHVmlZWEp6Ulc1MmFYSnZibTFsYm5RdWNISnZkRzkwZVhCbElEMGdlMXh1SUNCamIyNXpkSEoxWTNSdmNqb2dTR0Z1Wkd4bFltRnljMFZ1ZG1seWIyNXRaVzUwTEZ4dVhHNGdJR3h2WjJkbGNqb2diRzluWjJWeUxGeHVJQ0JzYjJjNklHeHZaMmRsY2k1c2IyY3NYRzVjYmlBZ2NtVm5hWE4wWlhKSVpXeHdaWEk2SUdaMWJtTjBhVzl1S0c1aGJXVXNJR1p1S1NCN1hHNGdJQ0FnYVdZZ0tIUnZVM1J5YVc1bkxtTmhiR3dvYm1GdFpTa2dQVDA5SUc5aWFtVmpkRlI1Y0dVcElIdGNiaUFnSUNBZ0lHbG1JQ2htYmlrZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWGhqWlhCMGFXOXVLQ2RCY21jZ2JtOTBJSE4xY0hCdmNuUmxaQ0IzYVhSb0lHMTFiSFJwY0d4bElHaGxiSEJsY25NbktUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHVjRkR1Z1WkNoMGFHbHpMbWhsYkhCbGNuTXNJRzVoYldVcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IwYUdsekxtaGxiSEJsY25OYmJtRnRaVjBnUFNCbWJqdGNiaUFnSUNCOVhHNGdJSDBzWEc0Z0lIVnVjbVZuYVhOMFpYSklaV3h3WlhJNklHWjFibU4wYVc5dUtHNWhiV1VwSUh0Y2JpQWdJQ0JrWld4bGRHVWdkR2hwY3k1b1pXeHdaWEp6VzI1aGJXVmRPMXh1SUNCOUxGeHVYRzRnSUhKbFoybHpkR1Z5VUdGeWRHbGhiRG9nWm5WdVkzUnBiMjRvYm1GdFpTd2djR0Z5ZEdsaGJDa2dlMXh1SUNBZ0lHbG1JQ2gwYjFOMGNtbHVaeTVqWVd4c0tHNWhiV1VwSUQwOVBTQnZZbXBsWTNSVWVYQmxLU0I3WEc0Z0lDQWdJQ0JsZUhSbGJtUW9kR2hwY3k1d1lYSjBhV0ZzY3l3Z2JtRnRaU2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdjR0Z5ZEdsaGJDQTlQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVY0WTJWd2RHbHZiaWhjYmlBZ0lDQWdJQ0FnSUNCZ1FYUjBaVzF3ZEdsdVp5QjBieUJ5WldkcGMzUmxjaUJoSUhCaGNuUnBZV3dnWTJGc2JHVmtJRndpSkh0dVlXMWxmVndpSUdGeklIVnVaR1ZtYVc1bFpHQmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSFJvYVhNdWNHRnlkR2xoYkhOYmJtRnRaVjBnUFNCd1lYSjBhV0ZzTzF4dUlDQWdJSDFjYmlBZ2ZTeGNiaUFnZFc1eVpXZHBjM1JsY2xCaGNuUnBZV3c2SUdaMWJtTjBhVzl1S0c1aGJXVXBJSHRjYmlBZ0lDQmtaV3hsZEdVZ2RHaHBjeTV3WVhKMGFXRnNjMXR1WVcxbFhUdGNiaUFnZlN4Y2JseHVJQ0J5WldkcGMzUmxja1JsWTI5eVlYUnZjam9nWm5WdVkzUnBiMjRvYm1GdFpTd2dabTRwSUh0Y2JpQWdJQ0JwWmlBb2RHOVRkSEpwYm1jdVkyRnNiQ2h1WVcxbEtTQTlQVDBnYjJKcVpXTjBWSGx3WlNrZ2UxeHVJQ0FnSUNBZ2FXWWdLR1p1S1NCN1hHNGdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZlR05sY0hScGIyNG9KMEZ5WnlCdWIzUWdjM1Z3Y0c5eWRHVmtJSGRwZEdnZ2JYVnNkR2x3YkdVZ1pHVmpiM0poZEc5eWN5Y3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdaWGgwWlc1a0tIUm9hWE11WkdWamIzSmhkRzl5Y3l3Z2JtRnRaU2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIUm9hWE11WkdWamIzSmhkRzl5YzF0dVlXMWxYU0E5SUdadU8xeHVJQ0FnSUgxY2JpQWdmU3hjYmlBZ2RXNXlaV2RwYzNSbGNrUmxZMjl5WVhSdmNqb2dablZ1WTNScGIyNG9ibUZ0WlNrZ2UxeHVJQ0FnSUdSbGJHVjBaU0IwYUdsekxtUmxZMjl5WVhSdmNuTmJibUZ0WlYwN1hHNGdJSDBzWEc0Z0lDOHFLbHh1SUNBZ0tpQlNaWE5sZENCMGFHVWdiV1Z0YjNKNUlHOW1JR2xzYkdWbllXd2djSEp2Y0dWeWRIa2dZV05qWlhOelpYTWdkR2hoZENCb1lYWmxJR0ZzY21WaFpIa2dZbVZsYmlCc2IyZG5aV1F1WEc0Z0lDQXFJRUJrWlhCeVpXTmhkR1ZrSUhOb2IzVnNaQ0J2Ym14NUlHSmxJSFZ6WldRZ2FXNGdhR0Z1Wkd4bFltRnljeUIwWlhOMExXTmhjMlZ6WEc0Z0lDQXFMMXh1SUNCeVpYTmxkRXh2WjJkbFpGQnliM0JsY25SNVFXTmpaWE56WlhNb0tTQjdYRzRnSUNBZ2NtVnpaWFJNYjJkblpXUlFjbTl3WlhKMGFXVnpLQ2s3WEc0Z0lIMWNibjA3WEc1Y2JtVjRjRzl5ZENCc1pYUWdiRzluSUQwZ2JHOW5aMlZ5TG14dlp6dGNibHh1Wlhod2IzSjBJSHNnWTNKbFlYUmxSbkpoYldVc0lHeHZaMmRsY2lCOU8xeHVJbDE5XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgQVNUID0ge1xuICAvLyBQdWJsaWMgQVBJIHVzZWQgdG8gZXZhbHVhdGUgZGVyaXZlZCBhdHRyaWJ1dGVzIHJlZ2FyZGluZyBBU1Qgbm9kZXNcbiAgaGVscGVyczoge1xuICAgIC8vIGEgbXVzdGFjaGUgaXMgZGVmaW5pdGVseSBhIGhlbHBlciBpZjpcbiAgICAvLyAqIGl0IGlzIGFuIGVsaWdpYmxlIGhlbHBlciwgYW5kXG4gICAgLy8gKiBpdCBoYXMgYXQgbGVhc3Qgb25lIHBhcmFtZXRlciBvciBoYXNoIHNlZ21lbnRcbiAgICBoZWxwZXJFeHByZXNzaW9uOiBmdW5jdGlvbiBoZWxwZXJFeHByZXNzaW9uKG5vZGUpIHtcbiAgICAgIHJldHVybiBub2RlLnR5cGUgPT09ICdTdWJFeHByZXNzaW9uJyB8fCAobm9kZS50eXBlID09PSAnTXVzdGFjaGVTdGF0ZW1lbnQnIHx8IG5vZGUudHlwZSA9PT0gJ0Jsb2NrU3RhdGVtZW50JykgJiYgISEobm9kZS5wYXJhbXMgJiYgbm9kZS5wYXJhbXMubGVuZ3RoIHx8IG5vZGUuaGFzaCk7XG4gICAgfSxcblxuICAgIHNjb3BlZElkOiBmdW5jdGlvbiBzY29wZWRJZChwYXRoKSB7XG4gICAgICByZXR1cm4gKC9eXFwufHRoaXNcXGIvLnRlc3QocGF0aC5vcmlnaW5hbClcbiAgICAgICk7XG4gICAgfSxcblxuICAgIC8vIGFuIElEIGlzIHNpbXBsZSBpZiBpdCBvbmx5IGhhcyBvbmUgcGFydCwgYW5kIHRoYXQgcGFydCBpcyBub3RcbiAgICAvLyBgLi5gIG9yIGB0aGlzYC5cbiAgICBzaW1wbGVJZDogZnVuY3Rpb24gc2ltcGxlSWQocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGgucGFydHMubGVuZ3RoID09PSAxICYmICFBU1QuaGVscGVycy5zY29wZWRJZChwYXRoKSAmJiAhcGF0aC5kZXB0aDtcbiAgICB9XG4gIH1cbn07XG5cbi8vIE11c3QgYmUgZXhwb3J0ZWQgYXMgYW4gb2JqZWN0IHJhdGhlciB0aGFuIHRoZSByb290IG9mIHRoZSBtb2R1bGUgYXMgdGhlIGppc29uIGxleGVyXG4vLyBtdXN0IG1vZGlmeSB0aGUgb2JqZWN0IHRvIG9wZXJhdGUgcHJvcGVybHkuXG5leHBvcnRzWydkZWZhdWx0J10gPSBBU1Q7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwyTnZiWEJwYkdWeUwyRnpkQzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN1FVRkJRU3hKUVVGSkxFZEJRVWNzUjBGQlJ6czdRVUZGVWl4VFFVRlBMRVZCUVVVN096czdRVUZKVUN4dlFrRkJaMElzUlVGQlJTd3dRa0ZCVXl4SlFVRkpMRVZCUVVVN1FVRkRMMElzWVVGRFJTeEpRVUZKTEVOQlFVTXNTVUZCU1N4TFFVRkxMR1ZCUVdVc1NVRkROVUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4TFFVRkxMRzFDUVVGdFFpeEpRVU5xUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hMUVVGTExHZENRVUZuUWl4RFFVRkJMRWxCUXpsQ0xFTkJRVU1zUlVGQlJTeEJRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRWxCUVVrc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVsQlFVc3NTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJRU3hCUVVGRExFRkJRVU1zUTBGRGRrUTdTMEZEU0RzN1FVRkZSQ3haUVVGUkxFVkJRVVVzYTBKQlFWTXNTVUZCU1N4RlFVRkZPMEZCUTNaQ0xHRkJRVThzWVVGQldTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRE8xRkJRVU03UzBGRGVrTTdPenM3UVVGSlJDeFpRVUZSTEVWQlFVVXNhMEpCUVZNc1NVRkJTU3hGUVVGRk8wRkJRM1pDTEdGQlEwVXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTkxFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRTlCUVU4c1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVOeVJUdExRVU5JTzBkQlEwWTdRMEZEUml4RFFVRkRPenM3TzNGQ1FVbGhMRWRCUVVjaUxDSm1hV3hsSWpvaVlYTjBMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWJHVjBJRUZUVkNBOUlIdGNiaUFnTHk4Z1VIVmliR2xqSUVGUVNTQjFjMlZrSUhSdklHVjJZV3gxWVhSbElHUmxjbWwyWldRZ1lYUjBjbWxpZFhSbGN5QnlaV2RoY21ScGJtY2dRVk5VSUc1dlpHVnpYRzRnSUdobGJIQmxjbk02SUh0Y2JpQWdJQ0F2THlCaElHMTFjM1JoWTJobElHbHpJR1JsWm1sdWFYUmxiSGtnWVNCb1pXeHdaWElnYVdZNlhHNGdJQ0FnTHk4Z0tpQnBkQ0JwY3lCaGJpQmxiR2xuYVdKc1pTQm9aV3h3WlhJc0lHRnVaRnh1SUNBZ0lDOHZJQ29nYVhRZ2FHRnpJR0YwSUd4bFlYTjBJRzl1WlNCd1lYSmhiV1YwWlhJZ2IzSWdhR0Z6YUNCelpXZHRaVzUwWEc0Z0lDQWdhR1ZzY0dWeVJYaHdjbVZ6YzJsdmJqb2dablZ1WTNScGIyNG9ibTlrWlNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUNBZ2JtOWtaUzUwZVhCbElEMDlQU0FuVTNWaVJYaHdjbVZ6YzJsdmJpY2dmSHhjYmlBZ0lDQWdJQ0FnS0NodWIyUmxMblI1Y0dVZ1BUMDlJQ2ROZFhOMFlXTm9aVk4wWVhSbGJXVnVkQ2NnZkh4Y2JpQWdJQ0FnSUNBZ0lDQnViMlJsTG5SNWNHVWdQVDA5SUNkQ2JHOWphMU4wWVhSbGJXVnVkQ2NwSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJU0VvS0c1dlpHVXVjR0Z5WVcxeklDWW1JRzV2WkdVdWNHRnlZVzF6TG14bGJtZDBhQ2tnZkh3Z2JtOWtaUzVvWVhOb0tTbGNiaUFnSUNBZ0lDazdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lITmpiM0JsWkVsa09pQm1kVzVqZEdsdmJpaHdZWFJvS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnTDE1Y1hDNThkR2hwYzF4Y1lpOHVkR1Z6ZENod1lYUm9MbTl5YVdkcGJtRnNLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeThnWVc0Z1NVUWdhWE1nYzJsdGNHeGxJR2xtSUdsMElHOXViSGtnYUdGeklHOXVaU0J3WVhKMExDQmhibVFnZEdoaGRDQndZWEowSUdseklHNXZkRnh1SUNBZ0lDOHZJR0F1TG1BZ2IzSWdZSFJvYVhOZ0xseHVJQ0FnSUhOcGJYQnNaVWxrT2lCbWRXNWpkR2x2Ymlod1lYUm9LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdJQ0J3WVhSb0xuQmhjblJ6TG14bGJtZDBhQ0E5UFQwZ01TQW1KaUFoUVZOVUxtaGxiSEJsY25NdWMyTnZjR1ZrU1dRb2NHRjBhQ2tnSmlZZ0lYQmhkR2d1WkdWd2RHaGNiaUFnSUNBZ0lDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OU8xeHVYRzR2THlCTmRYTjBJR0psSUdWNGNHOXlkR1ZrSUdGeklHRnVJRzlpYW1WamRDQnlZWFJvWlhJZ2RHaGhiaUIwYUdVZ2NtOXZkQ0J2WmlCMGFHVWdiVzlrZFd4bElHRnpJSFJvWlNCcWFYTnZiaUJzWlhobGNseHVMeThnYlhWemRDQnRiMlJwWm5rZ2RHaGxJRzlpYW1WamRDQjBieUJ2Y0dWeVlYUmxJSEJ5YjNCbGNteDVMbHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdRVk5VTzF4dUlsMTlcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMucGFyc2VXaXRob3V0UHJvY2Vzc2luZyA9IHBhcnNlV2l0aG91dFByb2Nlc3Npbmc7XG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG4vLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqWydkZWZhdWx0J10gPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG4vLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfcGFyc2VyID0gcmVxdWlyZSgnLi9wYXJzZXInKTtcblxudmFyIF9wYXJzZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGFyc2VyKTtcblxudmFyIF93aGl0ZXNwYWNlQ29udHJvbCA9IHJlcXVpcmUoJy4vd2hpdGVzcGFjZS1jb250cm9sJyk7XG5cbnZhciBfd2hpdGVzcGFjZUNvbnRyb2wyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2hpdGVzcGFjZUNvbnRyb2wpO1xuXG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKCcuL2hlbHBlcnMnKTtcblxudmFyIEhlbHBlcnMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfaGVscGVycyk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5leHBvcnRzLnBhcnNlciA9IF9wYXJzZXIyWydkZWZhdWx0J107XG5cbnZhciB5eSA9IHt9O1xuX3V0aWxzLmV4dGVuZCh5eSwgSGVscGVycyk7XG5cbmZ1bmN0aW9uIHBhcnNlV2l0aG91dFByb2Nlc3NpbmcoaW5wdXQsIG9wdGlvbnMpIHtcbiAgLy8gSnVzdCByZXR1cm4gaWYgYW4gYWxyZWFkeS1jb21waWxlZCBBU1Qgd2FzIHBhc3NlZCBpbi5cbiAgaWYgKGlucHV0LnR5cGUgPT09ICdQcm9ncmFtJykge1xuICAgIHJldHVybiBpbnB1dDtcbiAgfVxuXG4gIF9wYXJzZXIyWydkZWZhdWx0J10ueXkgPSB5eTtcblxuICAvLyBBbHRlcmluZyB0aGUgc2hhcmVkIG9iamVjdCBoZXJlLCBidXQgdGhpcyBpcyBvayBhcyBwYXJzZXIgaXMgYSBzeW5jIG9wZXJhdGlvblxuICB5eS5sb2NJbmZvID0gZnVuY3Rpb24gKGxvY0luZm8pIHtcbiAgICByZXR1cm4gbmV3IHl5LlNvdXJjZUxvY2F0aW9uKG9wdGlvbnMgJiYgb3B0aW9ucy5zcmNOYW1lLCBsb2NJbmZvKTtcbiAgfTtcblxuICB2YXIgYXN0ID0gX3BhcnNlcjJbJ2RlZmF1bHQnXS5wYXJzZShpbnB1dCk7XG5cbiAgcmV0dXJuIGFzdDtcbn1cblxuZnVuY3Rpb24gcGFyc2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgdmFyIGFzdCA9IHBhcnNlV2l0aG91dFByb2Nlc3NpbmcoaW5wdXQsIG9wdGlvbnMpO1xuICB2YXIgc3RyaXAgPSBuZXcgX3doaXRlc3BhY2VDb250cm9sMlsnZGVmYXVsdCddKG9wdGlvbnMpO1xuXG4gIHJldHVybiBzdHJpcC5hY2NlcHQoYXN0KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwyTnZiWEJwYkdWeUwySmhjMlV1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3pzN096dHpRa0ZCYlVJc1ZVRkJWVHM3T3p0cFEwRkRReXh6UWtGQmMwSTdPenM3ZFVKQlF6TkNMRmRCUVZjN08wbEJRWGhDTEU5QlFVODdPM0ZDUVVOSkxGVkJRVlU3TzFGQlJYaENMRTFCUVUwN08wRkJSV1lzU1VGQlNTeEZRVUZGTEVkQlFVY3NSVUZCUlN4RFFVRkRPMEZCUTFvc1kwRkJUeXhGUVVGRkxFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTTdPMEZCUldJc1UwRkJVeXh6UWtGQmMwSXNRMEZCUXl4TFFVRkxMRVZCUVVVc1QwRkJUeXhGUVVGRk96dEJRVVZ5UkN4TlFVRkpMRXRCUVVzc1EwRkJReXhKUVVGSkxFdEJRVXNzVTBGQlV5eEZRVUZGTzBGQlF6VkNMRmRCUVU4c1MwRkJTeXhEUVVGRE8wZEJRMlE3TzBGQlJVUXNjMEpCUVU4c1JVRkJSU3hIUVVGSExFVkJRVVVzUTBGQlF6czdPMEZCUjJZc1NVRkJSU3hEUVVGRExFOUJRVThzUjBGQlJ5eFZRVUZUTEU5QlFVOHNSVUZCUlR0QlFVTTNRaXhYUVVGUExFbEJRVWtzUlVGQlJTeERRVUZETEdOQlFXTXNRMEZCUXl4UFFVRlBMRWxCUVVrc1QwRkJUeXhEUVVGRExFOUJRVThzUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXp0SFFVTnVSU3hEUVVGRE96dEJRVVZHTEUxQlFVa3NSMEZCUnl4SFFVRkhMRzlDUVVGUExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXpzN1FVRkZPVUlzVTBGQlR5eEhRVUZITEVOQlFVTTdRMEZEV2pzN1FVRkZUU3hUUVVGVExFdEJRVXNzUTBGQlF5eExRVUZMTEVWQlFVVXNUMEZCVHl4RlFVRkZPMEZCUTNCRExFMUJRVWtzUjBGQlJ5eEhRVUZITEhOQ1FVRnpRaXhEUVVGRExFdEJRVXNzUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXp0QlFVTnFSQ3hOUVVGSkxFdEJRVXNzUjBGQlJ5eHRRMEZCYzBJc1QwRkJUeXhEUVVGRExFTkJRVU03TzBGQlJUTkRMRk5CUVU4c1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0RFFVTXhRaUlzSW1acGJHVWlPaUppWVhObExtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVcxd2IzSjBJSEJoY25ObGNpQm1jbTl0SUNjdUwzQmhjbk5sY2ljN1hHNXBiWEJ2Y25RZ1YyaHBkR1Z6Y0dGalpVTnZiblJ5YjJ3Z1puSnZiU0FuTGk5M2FHbDBaWE53WVdObExXTnZiblJ5YjJ3bk8xeHVhVzF3YjNKMElDb2dZWE1nU0dWc2NHVnljeUJtY205dElDY3VMMmhsYkhCbGNuTW5PMXh1YVcxd2IzSjBJSHNnWlhoMFpXNWtJSDBnWm5KdmJTQW5MaTR2ZFhScGJITW5PMXh1WEc1bGVIQnZjblFnZXlCd1lYSnpaWElnZlR0Y2JseHViR1YwSUhsNUlEMGdlMzA3WEc1bGVIUmxibVFvZVhrc0lFaGxiSEJsY25NcE8xeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdjR0Z5YzJWWGFYUm9iM1YwVUhKdlkyVnpjMmx1WnlocGJuQjFkQ3dnYjNCMGFXOXVjeWtnZTF4dUlDQXZMeUJLZFhOMElISmxkSFZ5YmlCcFppQmhiaUJoYkhKbFlXUjVMV052YlhCcGJHVmtJRUZUVkNCM1lYTWdjR0Z6YzJWa0lHbHVMbHh1SUNCcFppQW9hVzV3ZFhRdWRIbHdaU0E5UFQwZ0oxQnliMmR5WVcwbktTQjdYRzRnSUNBZ2NtVjBkWEp1SUdsdWNIVjBPMXh1SUNCOVhHNWNiaUFnY0dGeWMyVnlMbmw1SUQwZ2VYazdYRzVjYmlBZ0x5OGdRV3gwWlhKcGJtY2dkR2hsSUhOb1lYSmxaQ0J2WW1wbFkzUWdhR1Z5WlN3Z1luVjBJSFJvYVhNZ2FYTWdiMnNnWVhNZ2NHRnljMlZ5SUdseklHRWdjM2x1WXlCdmNHVnlZWFJwYjI1Y2JpQWdlWGt1Ykc5alNXNW1ieUE5SUdaMWJtTjBhVzl1S0d4dlkwbHVabThwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUhsNUxsTnZkWEpqWlV4dlkyRjBhVzl1S0c5d2RHbHZibk1nSmlZZ2IzQjBhVzl1Y3k1emNtTk9ZVzFsTENCc2IyTkpibVp2S1R0Y2JpQWdmVHRjYmx4dUlDQnNaWFFnWVhOMElEMGdjR0Z5YzJWeUxuQmhjbk5sS0dsdWNIVjBLVHRjYmx4dUlDQnlaWFIxY200Z1lYTjBPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2NHRnljMlVvYVc1d2RYUXNJRzl3ZEdsdmJuTXBJSHRjYmlBZ2JHVjBJR0Z6ZENBOUlIQmhjbk5sVjJsMGFHOTFkRkJ5YjJObGMzTnBibWNvYVc1d2RYUXNJRzl3ZEdsdmJuTXBPMXh1SUNCc1pYUWdjM1J5YVhBZ1BTQnVaWGNnVjJocGRHVnpjR0ZqWlVOdmJuUnliMndvYjNCMGFXOXVjeWs3WEc1Y2JpQWdjbVYwZFhKdUlITjBjbWx3TG1GalkyVndkQ2hoYzNRcE8xeHVmVnh1SWwxOVxuIiwiLyogZ2xvYmFsIGRlZmluZSwgcmVxdWlyZSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxudmFyIFNvdXJjZU5vZGUgPSB1bmRlZmluZWQ7XG5cbnRyeSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIGlmICh0eXBlb2YgZGVmaW5lICE9PSAnZnVuY3Rpb24nIHx8ICFkZWZpbmUuYW1kKSB7XG4gICAgLy8gV2UgZG9uJ3Qgc3VwcG9ydCB0aGlzIGluIEFNRCBlbnZpcm9ubWVudHMuIEZvciB0aGVzZSBlbnZpcm9ubWVudHMsIHdlIGFzc3VtZSB0aGF0XG4gICAgLy8gdGhleSBhcmUgcnVubmluZyBvbiB0aGUgYnJvd3NlciBhbmQgdGh1cyBoYXZlIG5vIG5lZWQgZm9yIHRoZSBzb3VyY2UtbWFwIGxpYnJhcnkuXG4gICAgdmFyIFNvdXJjZU1hcCA9IHJlcXVpcmUoJ3NvdXJjZS1tYXAnKTtcbiAgICBTb3VyY2VOb2RlID0gU291cmNlTWFwLlNvdXJjZU5vZGU7XG4gIH1cbn0gY2F0Y2ggKGVycikge31cbi8qIE5PUCAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWY6IHRlc3RlZCBidXQgbm90IGNvdmVyZWQgaW4gaXN0YW5idWwgZHVlIHRvIGRpc3QgYnVpbGQgICovXG5pZiAoIVNvdXJjZU5vZGUpIHtcbiAgU291cmNlTm9kZSA9IGZ1bmN0aW9uIChsaW5lLCBjb2x1bW4sIHNyY0ZpbGUsIGNodW5rcykge1xuICAgIHRoaXMuc3JjID0gJyc7XG4gICAgaWYgKGNodW5rcykge1xuICAgICAgdGhpcy5hZGQoY2h1bmtzKTtcbiAgICB9XG4gIH07XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIFNvdXJjZU5vZGUucHJvdG90eXBlID0ge1xuICAgIGFkZDogZnVuY3Rpb24gYWRkKGNodW5rcykge1xuICAgICAgaWYgKF91dGlscy5pc0FycmF5KGNodW5rcykpIHtcbiAgICAgICAgY2h1bmtzID0gY2h1bmtzLmpvaW4oJycpO1xuICAgICAgfVxuICAgICAgdGhpcy5zcmMgKz0gY2h1bmtzO1xuICAgIH0sXG4gICAgcHJlcGVuZDogZnVuY3Rpb24gcHJlcGVuZChjaHVua3MpIHtcbiAgICAgIGlmIChfdXRpbHMuaXNBcnJheShjaHVua3MpKSB7XG4gICAgICAgIGNodW5rcyA9IGNodW5rcy5qb2luKCcnKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3JjID0gY2h1bmtzICsgdGhpcy5zcmM7XG4gICAgfSxcbiAgICB0b1N0cmluZ1dpdGhTb3VyY2VNYXA6IGZ1bmN0aW9uIHRvU3RyaW5nV2l0aFNvdXJjZU1hcCgpIHtcbiAgICAgIHJldHVybiB7IGNvZGU6IHRoaXMudG9TdHJpbmcoKSB9O1xuICAgIH0sXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3JjO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY2FzdENodW5rKGNodW5rLCBjb2RlR2VuLCBsb2MpIHtcbiAgaWYgKF91dGlscy5pc0FycmF5KGNodW5rKSkge1xuICAgIHZhciByZXQgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjaHVuay5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgcmV0LnB1c2goY29kZUdlbi53cmFwKGNodW5rW2ldLCBsb2MpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgY2h1bmsgPT09ICdib29sZWFuJyB8fCB0eXBlb2YgY2h1bmsgPT09ICdudW1iZXInKSB7XG4gICAgLy8gSGFuZGxlIHByaW1pdGl2ZXMgdGhhdCB0aGUgU291cmNlTm9kZSB3aWxsIHRocm93IHVwIG9uXG4gICAgcmV0dXJuIGNodW5rICsgJyc7XG4gIH1cbiAgcmV0dXJuIGNodW5rO1xufVxuXG5mdW5jdGlvbiBDb2RlR2VuKHNyY0ZpbGUpIHtcbiAgdGhpcy5zcmNGaWxlID0gc3JjRmlsZTtcbiAgdGhpcy5zb3VyY2UgPSBbXTtcbn1cblxuQ29kZUdlbi5wcm90b3R5cGUgPSB7XG4gIGlzRW1wdHk6IGZ1bmN0aW9uIGlzRW1wdHkoKSB7XG4gICAgcmV0dXJuICF0aGlzLnNvdXJjZS5sZW5ndGg7XG4gIH0sXG4gIHByZXBlbmQ6IGZ1bmN0aW9uIHByZXBlbmQoc291cmNlLCBsb2MpIHtcbiAgICB0aGlzLnNvdXJjZS51bnNoaWZ0KHRoaXMud3JhcChzb3VyY2UsIGxvYykpO1xuICB9LFxuICBwdXNoOiBmdW5jdGlvbiBwdXNoKHNvdXJjZSwgbG9jKSB7XG4gICAgdGhpcy5zb3VyY2UucHVzaCh0aGlzLndyYXAoc291cmNlLCBsb2MpKTtcbiAgfSxcblxuICBtZXJnZTogZnVuY3Rpb24gbWVyZ2UoKSB7XG4gICAgdmFyIHNvdXJjZSA9IHRoaXMuZW1wdHkoKTtcbiAgICB0aGlzLmVhY2goZnVuY3Rpb24gKGxpbmUpIHtcbiAgICAgIHNvdXJjZS5hZGQoWycgICcsIGxpbmUsICdcXG4nXSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfSxcblxuICBlYWNoOiBmdW5jdGlvbiBlYWNoKGl0ZXIpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5zb3VyY2UubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGl0ZXIodGhpcy5zb3VyY2VbaV0pO1xuICAgIH1cbiAgfSxcblxuICBlbXB0eTogZnVuY3Rpb24gZW1wdHkoKSB7XG4gICAgdmFyIGxvYyA9IHRoaXMuY3VycmVudExvY2F0aW9uIHx8IHsgc3RhcnQ6IHt9IH07XG4gICAgcmV0dXJuIG5ldyBTb3VyY2VOb2RlKGxvYy5zdGFydC5saW5lLCBsb2Muc3RhcnQuY29sdW1uLCB0aGlzLnNyY0ZpbGUpO1xuICB9LFxuICB3cmFwOiBmdW5jdGlvbiB3cmFwKGNodW5rKSB7XG4gICAgdmFyIGxvYyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IHRoaXMuY3VycmVudExvY2F0aW9uIHx8IHsgc3RhcnQ6IHt9IH0gOiBhcmd1bWVudHNbMV07XG5cbiAgICBpZiAoY2h1bmsgaW5zdGFuY2VvZiBTb3VyY2VOb2RlKSB7XG4gICAgICByZXR1cm4gY2h1bms7XG4gICAgfVxuXG4gICAgY2h1bmsgPSBjYXN0Q2h1bmsoY2h1bmssIHRoaXMsIGxvYyk7XG5cbiAgICByZXR1cm4gbmV3IFNvdXJjZU5vZGUobG9jLnN0YXJ0LmxpbmUsIGxvYy5zdGFydC5jb2x1bW4sIHRoaXMuc3JjRmlsZSwgY2h1bmspO1xuICB9LFxuXG4gIGZ1bmN0aW9uQ2FsbDogZnVuY3Rpb24gZnVuY3Rpb25DYWxsKGZuLCB0eXBlLCBwYXJhbXMpIHtcbiAgICBwYXJhbXMgPSB0aGlzLmdlbmVyYXRlTGlzdChwYXJhbXMpO1xuICAgIHJldHVybiB0aGlzLndyYXAoW2ZuLCB0eXBlID8gJy4nICsgdHlwZSArICcoJyA6ICcoJywgcGFyYW1zLCAnKSddKTtcbiAgfSxcblxuICBxdW90ZWRTdHJpbmc6IGZ1bmN0aW9uIHF1b3RlZFN0cmluZyhzdHIpIHtcbiAgICByZXR1cm4gJ1wiJyArIChzdHIgKyAnJykucmVwbGFjZSgvXFxcXC9nLCAnXFxcXFxcXFwnKS5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csICdcXFxcbicpLnJlcGxhY2UoL1xcci9nLCAnXFxcXHInKS5yZXBsYWNlKC9cXHUyMDI4L2csICdcXFxcdTIwMjgnKSAvLyBQZXIgRWNtYS0yNjIgNy4zICsgNy44LjRcbiAgICAucmVwbGFjZSgvXFx1MjAyOS9nLCAnXFxcXHUyMDI5JykgKyAnXCInO1xuICB9LFxuXG4gIG9iamVjdExpdGVyYWw6IGZ1bmN0aW9uIG9iamVjdExpdGVyYWwob2JqKSB7XG4gICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcblxuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgcGFpcnMgPSBbXTtcblxuICAgIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgdmFsdWUgPSBjYXN0Q2h1bmsob2JqW2tleV0sIF90aGlzKTtcbiAgICAgIGlmICh2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcGFpcnMucHVzaChbX3RoaXMucXVvdGVkU3RyaW5nKGtleSksICc6JywgdmFsdWVdKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciByZXQgPSB0aGlzLmdlbmVyYXRlTGlzdChwYWlycyk7XG4gICAgcmV0LnByZXBlbmQoJ3snKTtcbiAgICByZXQuYWRkKCd9Jyk7XG4gICAgcmV0dXJuIHJldDtcbiAgfSxcblxuICBnZW5lcmF0ZUxpc3Q6IGZ1bmN0aW9uIGdlbmVyYXRlTGlzdChlbnRyaWVzKSB7XG4gICAgdmFyIHJldCA9IHRoaXMuZW1wdHkoKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBlbnRyaWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAoaSkge1xuICAgICAgICByZXQuYWRkKCcsJyk7XG4gICAgICB9XG5cbiAgICAgIHJldC5hZGQoY2FzdENodW5rKGVudHJpZXNbaV0sIHRoaXMpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xuICB9LFxuXG4gIGdlbmVyYXRlQXJyYXk6IGZ1bmN0aW9uIGdlbmVyYXRlQXJyYXkoZW50cmllcykge1xuICAgIHZhciByZXQgPSB0aGlzLmdlbmVyYXRlTGlzdChlbnRyaWVzKTtcbiAgICByZXQucHJlcGVuZCgnWycpO1xuICAgIHJldC5hZGQoJ10nKTtcblxuICAgIHJldHVybiByZXQ7XG4gIH1cbn07XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IENvZGVHZW47XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwyTnZiWEJwYkdWeUwyTnZaR1V0WjJWdUxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3TzNGQ1FVTjNRaXhWUVVGVk96dEJRVVZzUXl4SlFVRkpMRlZCUVZVc1dVRkJRU3hEUVVGRE96dEJRVVZtTEVsQlFVazdPMEZCUlVZc1RVRkJTU3hQUVVGUExFMUJRVTBzUzBGQlN5eFZRVUZWTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhGUVVGRk96czdRVUZITDBNc1VVRkJTU3hUUVVGVExFZEJRVWNzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRPMEZCUTNSRExHTkJRVlVzUjBGQlJ5eFRRVUZUTEVOQlFVTXNWVUZCVlN4RFFVRkRPMGRCUTI1RE8wTkJRMFlzUTBGQlF5eFBRVUZQTEVkQlFVY3NSVUZCUlN4RlFVVmlPenM3TzBGQlFVRXNRVUZIUkN4SlFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVGRk8wRkJRMllzV1VGQlZTeEhRVUZITEZWQlFWTXNTVUZCU1N4RlFVRkZMRTFCUVUwc1JVRkJSU3hQUVVGUExFVkJRVVVzVFVGQlRTeEZRVUZGTzBGQlEyNUVMRkZCUVVrc1EwRkJReXhIUVVGSExFZEJRVWNzUlVGQlJTeERRVUZETzBGQlEyUXNVVUZCU1N4TlFVRk5MRVZCUVVVN1FVRkRWaXhWUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMHRCUTJ4Q08wZEJRMFlzUTBGQlF6czdRVUZGUml4WlFVRlZMRU5CUVVNc1UwRkJVeXhIUVVGSE8wRkJRM0pDTEU5QlFVY3NSVUZCUlN4aFFVRlRMRTFCUVUwc1JVRkJSVHRCUVVOd1FpeFZRVUZKTEdWQlFWRXNUVUZCVFN4RFFVRkRMRVZCUVVVN1FVRkRia0lzWTBGQlRTeEhRVUZITEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03VDBGRE1VSTdRVUZEUkN4VlFVRkpMRU5CUVVNc1IwRkJSeXhKUVVGSkxFMUJRVTBzUTBGQlF6dExRVU53UWp0QlFVTkVMRmRCUVU4c1JVRkJSU3hwUWtGQlV5eE5RVUZOTEVWQlFVVTdRVUZEZUVJc1ZVRkJTU3hsUVVGUkxFMUJRVTBzUTBGQlF5eEZRVUZGTzBGQlEyNUNMR05CUVUwc1IwRkJSeXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPMDlCUXpGQ08wRkJRMFFzVlVGQlNTeERRVUZETEVkQlFVY3NSMEZCUnl4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF6dExRVU01UWp0QlFVTkVMSGxDUVVGeFFpeEZRVUZGTEdsRFFVRlhPMEZCUTJoRExHRkJRVThzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSU3hGUVVGRkxFTkJRVU03UzBGRGJFTTdRVUZEUkN4WlFVRlJMRVZCUVVVc2IwSkJRVmM3UVVGRGJrSXNZVUZCVHl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRE8wdEJRMnBDTzBkQlEwWXNRMEZCUXp0RFFVTklPenRCUVVWRUxGTkJRVk1zVTBGQlV5eERRVUZETEV0QlFVc3NSVUZCUlN4UFFVRlBMRVZCUVVVc1IwRkJSeXhGUVVGRk8wRkJRM1JETEUxQlFVa3NaVUZCVVN4TFFVRkxMRU5CUVVNc1JVRkJSVHRCUVVOc1FpeFJRVUZKTEVkQlFVY3NSMEZCUnl4RlFVRkZMRU5CUVVNN08wRkJSV0lzVTBGQlN5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1IwRkJSeXhIUVVGSExFdEJRVXNzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4SFFVRkhMRWRCUVVjc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUdEJRVU5vUkN4VFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTTdTMEZEZGtNN1FVRkRSQ3hYUVVGUExFZEJRVWNzUTBGQlF6dEhRVU5hTEUxQlFVMHNTVUZCU1N4UFFVRlBMRXRCUVVzc1MwRkJTeXhUUVVGVExFbEJRVWtzVDBGQlR5eExRVUZMTEV0QlFVc3NVVUZCVVN4RlFVRkZPenRCUVVWc1JTeFhRVUZQTEV0QlFVc3NSMEZCUnl4RlFVRkZMRU5CUVVNN1IwRkRia0k3UVVGRFJDeFRRVUZQTEV0QlFVc3NRMEZCUXp0RFFVTmtPenRCUVVWRUxGTkJRVk1zVDBGQlR5eERRVUZETEU5QlFVOHNSVUZCUlR0QlFVTjRRaXhOUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZITEU5QlFVOHNRMEZCUXp0QlFVTjJRaXhOUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEVWQlFVVXNRMEZCUXp0RFFVTnNRanM3UVVGRlJDeFBRVUZQTEVOQlFVTXNVMEZCVXl4SFFVRkhPMEZCUTJ4Q0xGTkJRVThzUlVGQlFTeHRRa0ZCUnp0QlFVTlNMRmRCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXp0SFFVTTFRanRCUVVORUxGTkJRVThzUlVGQlJTeHBRa0ZCVXl4TlFVRk5MRVZCUVVVc1IwRkJSeXhGUVVGRk8wRkJRemRDTEZGQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU03UjBGRE4wTTdRVUZEUkN4TlFVRkpMRVZCUVVVc1kwRkJVeXhOUVVGTkxFVkJRVVVzUjBGQlJ5eEZRVUZGTzBGQlF6RkNMRkZCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTTdSMEZETVVNN08wRkJSVVFzVDBGQlN5eEZRVUZGTEdsQ1FVRlhPMEZCUTJoQ0xGRkJRVWtzVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkJRenRCUVVNeFFpeFJRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZNc1NVRkJTU3hGUVVGRk8wRkJRM1pDTEZsQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNN1MwRkRhRU1zUTBGQlF5eERRVUZETzBGQlEwZ3NWMEZCVHl4TlFVRk5MRU5CUVVNN1IwRkRaanM3UVVGRlJDeE5RVUZKTEVWQlFVVXNZMEZCVXl4SlFVRkpMRVZCUVVVN1FVRkRia0lzVTBGQlN5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1IwRkJSeXhIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1IwRkJSeXhIUVVGSExFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVTdRVUZEZEVRc1ZVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRMUVVOMFFqdEhRVU5HT3p0QlFVVkVMRTlCUVVzc1JVRkJSU3hwUWtGQlZ6dEJRVU5vUWl4UlFVRkpMRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zWlVGQlpTeEpRVUZKTEVWQlFVVXNTMEZCU3l4RlFVRkZMRVZCUVVVc1JVRkJSU3hEUVVGRE8wRkJRMmhFTEZkQlFVOHNTVUZCU1N4VlFVRlZMRU5CUVVNc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVWQlFVVXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTkxFVkJRVVVzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMGRCUTNaRk8wRkJRMFFzVFVGQlNTeEZRVUZGTEdOQlFWTXNTMEZCU3l4RlFVRXJRenRSUVVFM1F5eEhRVUZITEhsRVFVRkhMRWxCUVVrc1EwRkJReXhsUVVGbExFbEJRVWtzUlVGQlJTeExRVUZMTEVWQlFVVXNSVUZCUlN4RlFVRkZPenRCUVVNdlJDeFJRVUZKTEV0QlFVc3NXVUZCV1N4VlFVRlZMRVZCUVVVN1FVRkRMMElzWVVGQlR5eExRVUZMTEVOQlFVTTdTMEZEWkRzN1FVRkZSQ3hUUVVGTExFZEJRVWNzVTBGQlV5eERRVUZETEV0QlFVc3NSVUZCUlN4SlFVRkpMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU03TzBGQlJYQkRMRmRCUVU4c1NVRkJTU3hWUVVGVkxFTkJRMjVDTEVkQlFVY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hGUVVOa0xFZEJRVWNzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4RlFVTm9RaXhKUVVGSkxFTkJRVU1zVDBGQlR5eEZRVU5hTEV0QlFVc3NRMEZEVGl4RFFVRkRPMGRCUTBnN08wRkJSVVFzWTBGQldTeEZRVUZGTEhOQ1FVRlRMRVZCUVVVc1JVRkJSU3hKUVVGSkxFVkJRVVVzVFVGQlRTeEZRVUZGTzBGQlEzWkRMRlZCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMEZCUTI1RExGZEJRVThzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRVZCUVVVc1JVRkJSU3hKUVVGSkxFZEJRVWNzUjBGQlJ5eEhRVUZITEVsQlFVa3NSMEZCUnl4SFFVRkhMRWRCUVVjc1IwRkJSeXhGUVVGRkxFMUJRVTBzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMGRCUTNCRk96dEJRVVZFTEdOQlFWa3NSVUZCUlN4elFrRkJVeXhIUVVGSExFVkJRVVU3UVVGRE1VSXNWMEZEUlN4SFFVRkhMRWRCUTBnc1EwRkJReXhIUVVGSExFZEJRVWNzUlVGQlJTeERRVUZCTEVOQlEwNHNUMEZCVHl4RFFVRkRMRXRCUVVzc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGRGRFSXNUMEZCVHl4RFFVRkRMRWxCUVVrc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGRGNFSXNUMEZCVHl4RFFVRkRMRXRCUVVzc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGRGNrSXNUMEZCVHl4RFFVRkRMRXRCUVVzc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGRGNrSXNUMEZCVHl4RFFVRkRMRk5CUVZNc1JVRkJSU3hUUVVGVExFTkJRVU03UzBGRE4wSXNUMEZCVHl4RFFVRkRMRk5CUVZNc1JVRkJSU3hUUVVGVExFTkJRVU1zUjBGRGFFTXNSMEZCUnl4RFFVTklPMGRCUTBnN08wRkJSVVFzWlVGQllTeEZRVUZGTEhWQ1FVRlRMRWRCUVVjc1JVRkJSVHM3T3pzN1FVRkRNMElzVVVGQlNTeExRVUZMTEVkQlFVY3NSVUZCUlN4RFFVRkRPenRCUVVWbUxGVkJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVUVzUjBGQlJ5eEZRVUZKTzBGQlF6bENMRlZCUVVrc1MwRkJTeXhIUVVGSExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRkZCUVU4c1EwRkJRenRCUVVOMFF5eFZRVUZKTEV0QlFVc3NTMEZCU3l4WFFVRlhMRVZCUVVVN1FVRkRla0lzWVVGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRTFCUVVzc1dVRkJXU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVkQlFVY3NSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRE8wOUJRMnhFTzB0QlEwWXNRMEZCUXl4RFFVRkRPenRCUVVWSUxGRkJRVWtzUjBGQlJ5eEhRVUZITEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03UVVGRGJrTXNUMEZCUnl4RFFVRkRMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU5xUWl4UFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEySXNWMEZCVHl4SFFVRkhMRU5CUVVNN1IwRkRXanM3UVVGRlJDeGpRVUZaTEVWQlFVVXNjMEpCUVZNc1QwRkJUeXhGUVVGRk8wRkJRemxDTEZGQlFVa3NSMEZCUnl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF6czdRVUZGZGtJc1UwRkJTeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNSMEZCUnl4SFFVRkhMRTlCUVU4c1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF5eEhRVUZITEVkQlFVY3NSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRCUVVOc1JDeFZRVUZKTEVOQlFVTXNSVUZCUlR0QlFVTk1MRmRCUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdUMEZEWkRzN1FVRkZSQ3hUUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEZOQlFWTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXp0TFFVTjBRenM3UVVGRlJDeFhRVUZQTEVkQlFVY3NRMEZCUXp0SFFVTmFPenRCUVVWRUxHVkJRV0VzUlVGQlJTeDFRa0ZCVXl4UFFVRlBMRVZCUVVVN1FVRkRMMElzVVVGQlNTeEhRVUZITEVkQlFVY3NTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6dEJRVU55UXl4UFFVRkhMRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEycENMRTlCUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdPMEZCUldJc1YwRkJUeXhIUVVGSExFTkJRVU03UjBGRFdqdERRVU5HTEVOQlFVTTdPM0ZDUVVWaExFOUJRVThpTENKbWFXeGxJam9pWTI5a1pTMW5aVzR1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaUJuYkc5aVlXd2daR1ZtYVc1bExDQnlaWEYxYVhKbElDb3ZYRzVwYlhCdmNuUWdleUJwYzBGeWNtRjVJSDBnWm5KdmJTQW5MaTR2ZFhScGJITW5PMXh1WEc1c1pYUWdVMjkxY21ObFRtOWtaVHRjYmx4dWRISjVJSHRjYmlBZ0x5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHNWxlSFFnS2k5Y2JpQWdhV1lnS0hSNWNHVnZaaUJrWldacGJtVWdJVDA5SUNkbWRXNWpkR2x2YmljZ2ZId2dJV1JsWm1sdVpTNWhiV1FwSUh0Y2JpQWdJQ0F2THlCWFpTQmtiMjRuZENCemRYQndiM0owSUhSb2FYTWdhVzRnUVUxRUlHVnVkbWx5YjI1dFpXNTBjeTRnUm05eUlIUm9aWE5sSUdWdWRtbHliMjV0Wlc1MGN5d2dkMlVnWVhOemRXMWxJSFJvWVhSY2JpQWdJQ0F2THlCMGFHVjVJR0Z5WlNCeWRXNXVhVzVuSUc5dUlIUm9aU0JpY205M2MyVnlJR0Z1WkNCMGFIVnpJR2hoZG1VZ2JtOGdibVZsWkNCbWIzSWdkR2hsSUhOdmRYSmpaUzF0WVhBZ2JHbGljbUZ5ZVM1Y2JpQWdJQ0JzWlhRZ1UyOTFjbU5sVFdGd0lEMGdjbVZ4ZFdseVpTZ25jMjkxY21ObExXMWhjQ2NwTzF4dUlDQWdJRk52ZFhKalpVNXZaR1VnUFNCVGIzVnlZMlZOWVhBdVUyOTFjbU5sVG05a1pUdGNiaUFnZlZ4dWZTQmpZWFJqYUNBb1pYSnlLU0I3WEc0Z0lDOHFJRTVQVUNBcUwxeHVmVnh1WEc0dktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ2FXWTZJSFJsYzNSbFpDQmlkWFFnYm05MElHTnZkbVZ5WldRZ2FXNGdhWE4wWVc1aWRXd2daSFZsSUhSdklHUnBjM1FnWW5WcGJHUWdJQ292WEc1cFppQW9JVk52ZFhKalpVNXZaR1VwSUh0Y2JpQWdVMjkxY21ObFRtOWtaU0E5SUdaMWJtTjBhVzl1S0d4cGJtVXNJR052YkhWdGJpd2djM0pqUm1sc1pTd2dZMmgxYm10ektTQjdYRzRnSUNBZ2RHaHBjeTV6Y21NZ1BTQW5KenRjYmlBZ0lDQnBaaUFvWTJoMWJtdHpLU0I3WEc0Z0lDQWdJQ0IwYUdsekxtRmtaQ2hqYUhWdWEzTXBPMXh1SUNBZ0lIMWNiaUFnZlR0Y2JpQWdMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJRzVsZUhRZ0tpOWNiaUFnVTI5MWNtTmxUbTlrWlM1d2NtOTBiM1I1Y0dVZ1BTQjdYRzRnSUNBZ1lXUmtPaUJtZFc1amRHbHZiaWhqYUhWdWEzTXBJSHRjYmlBZ0lDQWdJR2xtSUNocGMwRnljbUY1S0dOb2RXNXJjeWtwSUh0Y2JpQWdJQ0FnSUNBZ1kyaDFibXR6SUQwZ1kyaDFibXR6TG1wdmFXNG9KeWNwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnZEdocGN5NXpjbU1nS3owZ1kyaDFibXR6TzF4dUlDQWdJSDBzWEc0Z0lDQWdjSEpsY0dWdVpEb2dablZ1WTNScGIyNG9ZMmgxYm10ektTQjdYRzRnSUNBZ0lDQnBaaUFvYVhOQmNuSmhlU2hqYUhWdWEzTXBLU0I3WEc0Z0lDQWdJQ0FnSUdOb2RXNXJjeUE5SUdOb2RXNXJjeTVxYjJsdUtDY25LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSFJvYVhNdWMzSmpJRDBnWTJoMWJtdHpJQ3NnZEdocGN5NXpjbU03WEc0Z0lDQWdmU3hjYmlBZ0lDQjBiMU4wY21sdVoxZHBkR2hUYjNWeVkyVk5ZWEE2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhzZ1kyOWtaVG9nZEdocGN5NTBiMU4wY21sdVp5Z3BJSDA3WEc0Z0lDQWdmU3hjYmlBZ0lDQjBiMU4wY21sdVp6b2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1emNtTTdYRzRnSUNBZ2ZWeHVJQ0I5TzF4dWZWeHVYRzVtZFc1amRHbHZiaUJqWVhOMFEyaDFibXNvWTJoMWJtc3NJR052WkdWSFpXNHNJR3h2WXlrZ2UxeHVJQ0JwWmlBb2FYTkJjbkpoZVNoamFIVnVheWtwSUh0Y2JpQWdJQ0JzWlhRZ2NtVjBJRDBnVzEwN1hHNWNiaUFnSUNCbWIzSWdLR3hsZENCcElEMGdNQ3dnYkdWdUlEMGdZMmgxYm1zdWJHVnVaM1JvT3lCcElEd2diR1Z1T3lCcEt5c3BJSHRjYmlBZ0lDQWdJSEpsZEM1d2RYTm9LR052WkdWSFpXNHVkM0poY0NoamFIVnVhMXRwWFN3Z2JHOWpLU2s3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCeVpYUTdYRzRnSUgwZ1pXeHpaU0JwWmlBb2RIbHdaVzltSUdOb2RXNXJJRDA5UFNBblltOXZiR1ZoYmljZ2ZId2dkSGx3Wlc5bUlHTm9kVzVySUQwOVBTQW5iblZ0WW1WeUp5a2dlMXh1SUNBZ0lDOHZJRWhoYm1Sc1pTQndjbWx0YVhScGRtVnpJSFJvWVhRZ2RHaGxJRk52ZFhKalpVNXZaR1VnZDJsc2JDQjBhSEp2ZHlCMWNDQnZibHh1SUNBZ0lISmxkSFZ5YmlCamFIVnVheUFySUNjbk8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCamFIVnVhenRjYm4xY2JseHVablZ1WTNScGIyNGdRMjlrWlVkbGJpaHpjbU5HYVd4bEtTQjdYRzRnSUhSb2FYTXVjM0pqUm1sc1pTQTlJSE55WTBacGJHVTdYRzRnSUhSb2FYTXVjMjkxY21ObElEMGdXMTA3WEc1OVhHNWNia052WkdWSFpXNHVjSEp2ZEc5MGVYQmxJRDBnZTF4dUlDQnBjMFZ0Y0hSNUtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlBaGRHaHBjeTV6YjNWeVkyVXViR1Z1WjNSb08xeHVJQ0I5TEZ4dUlDQndjbVZ3Wlc1a09pQm1kVzVqZEdsdmJpaHpiM1Z5WTJVc0lHeHZZeWtnZTF4dUlDQWdJSFJvYVhNdWMyOTFjbU5sTG5WdWMyaHBablFvZEdocGN5NTNjbUZ3S0hOdmRYSmpaU3dnYkc5aktTazdYRzRnSUgwc1hHNGdJSEIxYzJnNklHWjFibU4wYVc5dUtITnZkWEpqWlN3Z2JHOWpLU0I3WEc0Z0lDQWdkR2hwY3k1emIzVnlZMlV1Y0hWemFDaDBhR2x6TG5keVlYQW9jMjkxY21ObExDQnNiMk1wS1R0Y2JpQWdmU3hjYmx4dUlDQnRaWEpuWlRvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ2JHVjBJSE52ZFhKalpTQTlJSFJvYVhNdVpXMXdkSGtvS1R0Y2JpQWdJQ0IwYUdsekxtVmhZMmdvWm5WdVkzUnBiMjRvYkdsdVpTa2dlMXh1SUNBZ0lDQWdjMjkxY21ObExtRmtaQ2hiSnlBZ0p5d2diR2x1WlN3Z0oxeGNiaWRkS1R0Y2JpQWdJQ0I5S1R0Y2JpQWdJQ0J5WlhSMWNtNGdjMjkxY21ObE8xeHVJQ0I5TEZ4dVhHNGdJR1ZoWTJnNklHWjFibU4wYVc5dUtHbDBaWElwSUh0Y2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Dd2diR1Z1SUQwZ2RHaHBjeTV6YjNWeVkyVXViR1Z1WjNSb095QnBJRHdnYkdWdU95QnBLeXNwSUh0Y2JpQWdJQ0FnSUdsMFpYSW9kR2hwY3k1emIzVnlZMlZiYVYwcE8xeHVJQ0FnSUgxY2JpQWdmU3hjYmx4dUlDQmxiWEIwZVRvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ2JHVjBJR3h2WXlBOUlIUm9hWE11WTNWeWNtVnVkRXh2WTJGMGFXOXVJSHg4SUhzZ2MzUmhjblE2SUh0OUlIMDdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlRiM1Z5WTJWT2IyUmxLR3h2WXk1emRHRnlkQzVzYVc1bExDQnNiMk11YzNSaGNuUXVZMjlzZFcxdUxDQjBhR2x6TG5OeVkwWnBiR1VwTzF4dUlDQjlMRnh1SUNCM2NtRndPaUJtZFc1amRHbHZiaWhqYUhWdWF5d2diRzlqSUQwZ2RHaHBjeTVqZFhKeVpXNTBURzlqWVhScGIyNGdmSHdnZXlCemRHRnlkRG9nZTMwZ2ZTa2dlMXh1SUNBZ0lHbG1JQ2hqYUhWdWF5QnBibk4wWVc1alpXOW1JRk52ZFhKalpVNXZaR1VwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJqYUhWdWF6dGNiaUFnSUNCOVhHNWNiaUFnSUNCamFIVnVheUE5SUdOaGMzUkRhSFZ1YXloamFIVnVheXdnZEdocGN5d2diRzlqS1R0Y2JseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1UyOTFjbU5sVG05a1pTaGNiaUFnSUNBZ0lHeHZZeTV6ZEdGeWRDNXNhVzVsTEZ4dUlDQWdJQ0FnYkc5akxuTjBZWEowTG1OdmJIVnRiaXhjYmlBZ0lDQWdJSFJvYVhNdWMzSmpSbWxzWlN4Y2JpQWdJQ0FnSUdOb2RXNXJYRzRnSUNBZ0tUdGNiaUFnZlN4Y2JseHVJQ0JtZFc1amRHbHZia05oYkd3NklHWjFibU4wYVc5dUtHWnVMQ0IwZVhCbExDQndZWEpoYlhNcElIdGNiaUFnSUNCd1lYSmhiWE1nUFNCMGFHbHpMbWRsYm1WeVlYUmxUR2x6ZENod1lYSmhiWE1wTzF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5keVlYQW9XMlp1TENCMGVYQmxJRDhnSnk0bklDc2dkSGx3WlNBcklDY29KeUE2SUNjb0p5d2djR0Z5WVcxekxDQW5LU2RkS1R0Y2JpQWdmU3hjYmx4dUlDQnhkVzkwWldSVGRISnBibWM2SUdaMWJtTjBhVzl1S0hOMGNpa2dlMXh1SUNBZ0lISmxkSFZ5YmlBb1hHNGdJQ0FnSUNBblhDSW5JQ3RjYmlBZ0lDQWdJQ2h6ZEhJZ0t5QW5KeWxjYmlBZ0lDQWdJQ0FnTG5KbGNHeGhZMlVvTDF4Y1hGd3ZaeXdnSjF4Y1hGeGNYRnhjSnlsY2JpQWdJQ0FnSUNBZ0xuSmxjR3hoWTJVb0wxd2lMMmNzSUNkY1hGeGNYQ0luS1Z4dUlDQWdJQ0FnSUNBdWNtVndiR0ZqWlNndlhGeHVMMmNzSUNkY1hGeGNiaWNwWEc0Z0lDQWdJQ0FnSUM1eVpYQnNZV05sS0M5Y1hISXZaeXdnSjF4Y1hGeHlKeWxjYmlBZ0lDQWdJQ0FnTG5KbGNHeGhZMlVvTDF4Y2RUSXdNamd2Wnl3Z0oxeGNYRngxTWpBeU9DY3BJQzh2SUZCbGNpQkZZMjFoTFRJMk1pQTNMak1nS3lBM0xqZ3VORnh1SUNBZ0lDQWdJQ0F1Y21Wd2JHRmpaU2d2WEZ4MU1qQXlPUzluTENBblhGeGNYSFV5TURJNUp5a2dLMXh1SUNBZ0lDQWdKMXdpSjF4dUlDQWdJQ2s3WEc0Z0lIMHNYRzVjYmlBZ2IySnFaV04wVEdsMFpYSmhiRG9nWm5WdVkzUnBiMjRvYjJKcUtTQjdYRzRnSUNBZ2JHVjBJSEJoYVhKeklEMGdXMTA3WEc1Y2JpQWdJQ0JQWW1wbFkzUXVhMlY1Y3lodlltb3BMbVp2Y2tWaFkyZ29hMlY1SUQwK0lIdGNiaUFnSUNBZ0lHeGxkQ0IyWVd4MVpTQTlJR05oYzNSRGFIVnVheWh2WW1wYmEyVjVYU3dnZEdocGN5azdYRzRnSUNBZ0lDQnBaaUFvZG1Gc2RXVWdJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQWdJSEJoYVhKekxuQjFjMmdvVzNSb2FYTXVjWFZ2ZEdWa1UzUnlhVzVuS0d0bGVTa3NJQ2M2Snl3Z2RtRnNkV1ZkS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUd4bGRDQnlaWFFnUFNCMGFHbHpMbWRsYm1WeVlYUmxUR2x6ZENod1lXbHljeWs3WEc0Z0lDQWdjbVYwTG5CeVpYQmxibVFvSjNzbktUdGNiaUFnSUNCeVpYUXVZV1JrS0NkOUp5azdYRzRnSUNBZ2NtVjBkWEp1SUhKbGREdGNiaUFnZlN4Y2JseHVJQ0JuWlc1bGNtRjBaVXhwYzNRNklHWjFibU4wYVc5dUtHVnVkSEpwWlhNcElIdGNiaUFnSUNCc1pYUWdjbVYwSUQwZ2RHaHBjeTVsYlhCMGVTZ3BPMXh1WEc0Z0lDQWdabTl5SUNoc1pYUWdhU0E5SURBc0lHeGxiaUE5SUdWdWRISnBaWE11YkdWdVozUm9PeUJwSUR3Z2JHVnVPeUJwS3lzcElIdGNiaUFnSUNBZ0lHbG1JQ2hwS1NCN1hHNGdJQ0FnSUNBZ0lISmxkQzVoWkdRb0p5d25LVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnY21WMExtRmtaQ2hqWVhOMFEyaDFibXNvWlc1MGNtbGxjMXRwWFN3Z2RHaHBjeWtwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQnlaWFE3WEc0Z0lIMHNYRzVjYmlBZ1oyVnVaWEpoZEdWQmNuSmhlVG9nWm5WdVkzUnBiMjRvWlc1MGNtbGxjeWtnZTF4dUlDQWdJR3hsZENCeVpYUWdQU0IwYUdsekxtZGxibVZ5WVhSbFRHbHpkQ2hsYm5SeWFXVnpLVHRjYmlBZ0lDQnlaWFF1Y0hKbGNHVnVaQ2duV3ljcE8xeHVJQ0FnSUhKbGRDNWhaR1FvSjEwbktUdGNibHh1SUNBZ0lISmxkSFZ5YmlCeVpYUTdYRzRnSUgxY2JuMDdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRU52WkdWSFpXNDdYRzRpWFgwPVxuIiwiLyogZXNsaW50LWRpc2FibGUgbmV3LWNhcCAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLkNvbXBpbGVyID0gQ29tcGlsZXI7XG5leHBvcnRzLnByZWNvbXBpbGUgPSBwcmVjb21waWxlO1xuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZTtcbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF9leGNlcHRpb24gPSByZXF1aXJlKCcuLi9leGNlcHRpb24nKTtcblxudmFyIF9leGNlcHRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhjZXB0aW9uKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbnZhciBfYXN0ID0gcmVxdWlyZSgnLi9hc3QnKTtcblxudmFyIF9hc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXN0KTtcblxudmFyIHNsaWNlID0gW10uc2xpY2U7XG5cbmZ1bmN0aW9uIENvbXBpbGVyKCkge31cblxuLy8gdGhlIGZvdW5kSGVscGVyIHJlZ2lzdGVyIHdpbGwgZGlzYW1iaWd1YXRlIGhlbHBlciBsb29rdXAgZnJvbSBmaW5kaW5nIGFcbi8vIGZ1bmN0aW9uIGluIGEgY29udGV4dC4gVGhpcyBpcyBuZWNlc3NhcnkgZm9yIG11c3RhY2hlIGNvbXBhdGliaWxpdHksIHdoaWNoXG4vLyByZXF1aXJlcyB0aGF0IGNvbnRleHQgZnVuY3Rpb25zIGluIGJsb2NrcyBhcmUgZXZhbHVhdGVkIGJ5IGJsb2NrSGVscGVyTWlzc2luZyxcbi8vIGFuZCB0aGVuIHByb2NlZWQgYXMgaWYgdGhlIHJlc3VsdGluZyB2YWx1ZSB3YXMgcHJvdmlkZWQgdG8gYmxvY2tIZWxwZXJNaXNzaW5nLlxuXG5Db21waWxlci5wcm90b3R5cGUgPSB7XG4gIGNvbXBpbGVyOiBDb21waWxlcixcblxuICBlcXVhbHM6IGZ1bmN0aW9uIGVxdWFscyhvdGhlcikge1xuICAgIHZhciBsZW4gPSB0aGlzLm9wY29kZXMubGVuZ3RoO1xuICAgIGlmIChvdGhlci5vcGNvZGVzLmxlbmd0aCAhPT0gbGVuKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIG9wY29kZSA9IHRoaXMub3Bjb2Rlc1tpXSxcbiAgICAgICAgICBvdGhlck9wY29kZSA9IG90aGVyLm9wY29kZXNbaV07XG4gICAgICBpZiAob3Bjb2RlLm9wY29kZSAhPT0gb3RoZXJPcGNvZGUub3Bjb2RlIHx8ICFhcmdFcXVhbHMob3Bjb2RlLmFyZ3MsIG90aGVyT3Bjb2RlLmFyZ3MpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBXZSBrbm93IHRoYXQgbGVuZ3RoIGlzIHRoZSBzYW1lIGJldHdlZW4gdGhlIHR3byBhcnJheXMgYmVjYXVzZSB0aGV5IGFyZSBkaXJlY3RseSB0aWVkXG4gICAgLy8gdG8gdGhlIG9wY29kZSBiZWhhdmlvciBhYm92ZS5cbiAgICBsZW4gPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAoIXRoaXMuY2hpbGRyZW5baV0uZXF1YWxzKG90aGVyLmNoaWxkcmVuW2ldKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG5cbiAgZ3VpZDogMCxcblxuICBjb21waWxlOiBmdW5jdGlvbiBjb21waWxlKHByb2dyYW0sIG9wdGlvbnMpIHtcbiAgICB0aGlzLnNvdXJjZU5vZGUgPSBbXTtcbiAgICB0aGlzLm9wY29kZXMgPSBbXTtcbiAgICB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLnN0cmluZ1BhcmFtcyA9IG9wdGlvbnMuc3RyaW5nUGFyYW1zO1xuICAgIHRoaXMudHJhY2tJZHMgPSBvcHRpb25zLnRyYWNrSWRzO1xuXG4gICAgb3B0aW9ucy5ibG9ja1BhcmFtcyA9IG9wdGlvbnMuYmxvY2tQYXJhbXMgfHwgW107XG5cbiAgICBvcHRpb25zLmtub3duSGVscGVycyA9IF91dGlscy5leHRlbmQoT2JqZWN0LmNyZWF0ZShudWxsKSwge1xuICAgICAgaGVscGVyTWlzc2luZzogdHJ1ZSxcbiAgICAgIGJsb2NrSGVscGVyTWlzc2luZzogdHJ1ZSxcbiAgICAgIGVhY2g6IHRydWUsXG4gICAgICAnaWYnOiB0cnVlLFxuICAgICAgdW5sZXNzOiB0cnVlLFxuICAgICAgJ3dpdGgnOiB0cnVlLFxuICAgICAgbG9nOiB0cnVlLFxuICAgICAgbG9va3VwOiB0cnVlXG4gICAgfSwgb3B0aW9ucy5rbm93bkhlbHBlcnMpO1xuXG4gICAgcmV0dXJuIHRoaXMuYWNjZXB0KHByb2dyYW0pO1xuICB9LFxuXG4gIGNvbXBpbGVQcm9ncmFtOiBmdW5jdGlvbiBjb21waWxlUHJvZ3JhbShwcm9ncmFtKSB7XG4gICAgdmFyIGNoaWxkQ29tcGlsZXIgPSBuZXcgdGhpcy5jb21waWxlcigpLFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5ldy1jYXBcbiAgICByZXN1bHQgPSBjaGlsZENvbXBpbGVyLmNvbXBpbGUocHJvZ3JhbSwgdGhpcy5vcHRpb25zKSxcbiAgICAgICAgZ3VpZCA9IHRoaXMuZ3VpZCsrO1xuXG4gICAgdGhpcy51c2VQYXJ0aWFsID0gdGhpcy51c2VQYXJ0aWFsIHx8IHJlc3VsdC51c2VQYXJ0aWFsO1xuXG4gICAgdGhpcy5jaGlsZHJlbltndWlkXSA9IHJlc3VsdDtcbiAgICB0aGlzLnVzZURlcHRocyA9IHRoaXMudXNlRGVwdGhzIHx8IHJlc3VsdC51c2VEZXB0aHM7XG5cbiAgICByZXR1cm4gZ3VpZDtcbiAgfSxcblxuICBhY2NlcHQ6IGZ1bmN0aW9uIGFjY2VwdChub2RlKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IFNhbml0eSBjb2RlICovXG4gICAgaWYgKCF0aGlzW25vZGUudHlwZV0pIHtcbiAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdVbmtub3duIHR5cGU6ICcgKyBub2RlLnR5cGUsIG5vZGUpO1xuICAgIH1cblxuICAgIHRoaXMuc291cmNlTm9kZS51bnNoaWZ0KG5vZGUpO1xuICAgIHZhciByZXQgPSB0aGlzW25vZGUudHlwZV0obm9kZSk7XG4gICAgdGhpcy5zb3VyY2VOb2RlLnNoaWZ0KCk7XG4gICAgcmV0dXJuIHJldDtcbiAgfSxcblxuICBQcm9ncmFtOiBmdW5jdGlvbiBQcm9ncmFtKHByb2dyYW0pIHtcbiAgICB0aGlzLm9wdGlvbnMuYmxvY2tQYXJhbXMudW5zaGlmdChwcm9ncmFtLmJsb2NrUGFyYW1zKTtcblxuICAgIHZhciBib2R5ID0gcHJvZ3JhbS5ib2R5LFxuICAgICAgICBib2R5TGVuZ3RoID0gYm9keS5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2R5TGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuYWNjZXB0KGJvZHlbaV0pO1xuICAgIH1cblxuICAgIHRoaXMub3B0aW9ucy5ibG9ja1BhcmFtcy5zaGlmdCgpO1xuXG4gICAgdGhpcy5pc1NpbXBsZSA9IGJvZHlMZW5ndGggPT09IDE7XG4gICAgdGhpcy5ibG9ja1BhcmFtcyA9IHByb2dyYW0uYmxvY2tQYXJhbXMgPyBwcm9ncmFtLmJsb2NrUGFyYW1zLmxlbmd0aCA6IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBCbG9ja1N0YXRlbWVudDogZnVuY3Rpb24gQmxvY2tTdGF0ZW1lbnQoYmxvY2spIHtcbiAgICB0cmFuc2Zvcm1MaXRlcmFsVG9QYXRoKGJsb2NrKTtcblxuICAgIHZhciBwcm9ncmFtID0gYmxvY2sucHJvZ3JhbSxcbiAgICAgICAgaW52ZXJzZSA9IGJsb2NrLmludmVyc2U7XG5cbiAgICBwcm9ncmFtID0gcHJvZ3JhbSAmJiB0aGlzLmNvbXBpbGVQcm9ncmFtKHByb2dyYW0pO1xuICAgIGludmVyc2UgPSBpbnZlcnNlICYmIHRoaXMuY29tcGlsZVByb2dyYW0oaW52ZXJzZSk7XG5cbiAgICB2YXIgdHlwZSA9IHRoaXMuY2xhc3NpZnlTZXhwcihibG9jayk7XG5cbiAgICBpZiAodHlwZSA9PT0gJ2hlbHBlcicpIHtcbiAgICAgIHRoaXMuaGVscGVyU2V4cHIoYmxvY2ssIHByb2dyYW0sIGludmVyc2UpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3NpbXBsZScpIHtcbiAgICAgIHRoaXMuc2ltcGxlU2V4cHIoYmxvY2spO1xuXG4gICAgICAvLyBub3cgdGhhdCB0aGUgc2ltcGxlIG11c3RhY2hlIGlzIHJlc29sdmVkLCB3ZSBuZWVkIHRvXG4gICAgICAvLyBldmFsdWF0ZSBpdCBieSBleGVjdXRpbmcgYGJsb2NrSGVscGVyTWlzc2luZ2BcbiAgICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIHByb2dyYW0pO1xuICAgICAgdGhpcy5vcGNvZGUoJ3B1c2hQcm9ncmFtJywgaW52ZXJzZSk7XG4gICAgICB0aGlzLm9wY29kZSgnZW1wdHlIYXNoJyk7XG4gICAgICB0aGlzLm9wY29kZSgnYmxvY2tWYWx1ZScsIGJsb2NrLnBhdGgub3JpZ2luYWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFtYmlndW91c1NleHByKGJsb2NrLCBwcm9ncmFtLCBpbnZlcnNlKTtcblxuICAgICAgLy8gbm93IHRoYXQgdGhlIHNpbXBsZSBtdXN0YWNoZSBpcyByZXNvbHZlZCwgd2UgbmVlZCB0b1xuICAgICAgLy8gZXZhbHVhdGUgaXQgYnkgZXhlY3V0aW5nIGBibG9ja0hlbHBlck1pc3NpbmdgXG4gICAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBwcm9ncmFtKTtcbiAgICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIGludmVyc2UpO1xuICAgICAgdGhpcy5vcGNvZGUoJ2VtcHR5SGFzaCcpO1xuICAgICAgdGhpcy5vcGNvZGUoJ2FtYmlndW91c0Jsb2NrVmFsdWUnKTtcbiAgICB9XG5cbiAgICB0aGlzLm9wY29kZSgnYXBwZW5kJyk7XG4gIH0sXG5cbiAgRGVjb3JhdG9yQmxvY2s6IGZ1bmN0aW9uIERlY29yYXRvckJsb2NrKGRlY29yYXRvcikge1xuICAgIHZhciBwcm9ncmFtID0gZGVjb3JhdG9yLnByb2dyYW0gJiYgdGhpcy5jb21waWxlUHJvZ3JhbShkZWNvcmF0b3IucHJvZ3JhbSk7XG4gICAgdmFyIHBhcmFtcyA9IHRoaXMuc2V0dXBGdWxsTXVzdGFjaGVQYXJhbXMoZGVjb3JhdG9yLCBwcm9ncmFtLCB1bmRlZmluZWQpLFxuICAgICAgICBwYXRoID0gZGVjb3JhdG9yLnBhdGg7XG5cbiAgICB0aGlzLnVzZURlY29yYXRvcnMgPSB0cnVlO1xuICAgIHRoaXMub3Bjb2RlKCdyZWdpc3RlckRlY29yYXRvcicsIHBhcmFtcy5sZW5ndGgsIHBhdGgub3JpZ2luYWwpO1xuICB9LFxuXG4gIFBhcnRpYWxTdGF0ZW1lbnQ6IGZ1bmN0aW9uIFBhcnRpYWxTdGF0ZW1lbnQocGFydGlhbCkge1xuICAgIHRoaXMudXNlUGFydGlhbCA9IHRydWU7XG5cbiAgICB2YXIgcHJvZ3JhbSA9IHBhcnRpYWwucHJvZ3JhbTtcbiAgICBpZiAocHJvZ3JhbSkge1xuICAgICAgcHJvZ3JhbSA9IHRoaXMuY29tcGlsZVByb2dyYW0ocGFydGlhbC5wcm9ncmFtKTtcbiAgICB9XG5cbiAgICB2YXIgcGFyYW1zID0gcGFydGlhbC5wYXJhbXM7XG4gICAgaWYgKHBhcmFtcy5sZW5ndGggPiAxKSB7XG4gICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnVW5zdXBwb3J0ZWQgbnVtYmVyIG9mIHBhcnRpYWwgYXJndW1lbnRzOiAnICsgcGFyYW1zLmxlbmd0aCwgcGFydGlhbCk7XG4gICAgfSBlbHNlIGlmICghcGFyYW1zLmxlbmd0aCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5leHBsaWNpdFBhcnRpYWxDb250ZXh0KSB7XG4gICAgICAgIHRoaXMub3Bjb2RlKCdwdXNoTGl0ZXJhbCcsICd1bmRlZmluZWQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmFtcy5wdXNoKHsgdHlwZTogJ1BhdGhFeHByZXNzaW9uJywgcGFydHM6IFtdLCBkZXB0aDogMCB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbE5hbWUgPSBwYXJ0aWFsLm5hbWUub3JpZ2luYWwsXG4gICAgICAgIGlzRHluYW1pYyA9IHBhcnRpYWwubmFtZS50eXBlID09PSAnU3ViRXhwcmVzc2lvbic7XG4gICAgaWYgKGlzRHluYW1pYykge1xuICAgICAgdGhpcy5hY2NlcHQocGFydGlhbC5uYW1lKTtcbiAgICB9XG5cbiAgICB0aGlzLnNldHVwRnVsbE11c3RhY2hlUGFyYW1zKHBhcnRpYWwsIHByb2dyYW0sIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cbiAgICB2YXIgaW5kZW50ID0gcGFydGlhbC5pbmRlbnQgfHwgJyc7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5wcmV2ZW50SW5kZW50ICYmIGluZGVudCkge1xuICAgICAgdGhpcy5vcGNvZGUoJ2FwcGVuZENvbnRlbnQnLCBpbmRlbnQpO1xuICAgICAgaW5kZW50ID0gJyc7XG4gICAgfVxuXG4gICAgdGhpcy5vcGNvZGUoJ2ludm9rZVBhcnRpYWwnLCBpc0R5bmFtaWMsIHBhcnRpYWxOYW1lLCBpbmRlbnQpO1xuICAgIHRoaXMub3Bjb2RlKCdhcHBlbmQnKTtcbiAgfSxcbiAgUGFydGlhbEJsb2NrU3RhdGVtZW50OiBmdW5jdGlvbiBQYXJ0aWFsQmxvY2tTdGF0ZW1lbnQocGFydGlhbEJsb2NrKSB7XG4gICAgdGhpcy5QYXJ0aWFsU3RhdGVtZW50KHBhcnRpYWxCbG9jayk7XG4gIH0sXG5cbiAgTXVzdGFjaGVTdGF0ZW1lbnQ6IGZ1bmN0aW9uIE11c3RhY2hlU3RhdGVtZW50KG11c3RhY2hlKSB7XG4gICAgdGhpcy5TdWJFeHByZXNzaW9uKG11c3RhY2hlKTtcblxuICAgIGlmIChtdXN0YWNoZS5lc2NhcGVkICYmICF0aGlzLm9wdGlvbnMubm9Fc2NhcGUpIHtcbiAgICAgIHRoaXMub3Bjb2RlKCdhcHBlbmRFc2NhcGVkJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub3Bjb2RlKCdhcHBlbmQnKTtcbiAgICB9XG4gIH0sXG4gIERlY29yYXRvcjogZnVuY3Rpb24gRGVjb3JhdG9yKGRlY29yYXRvcikge1xuICAgIHRoaXMuRGVjb3JhdG9yQmxvY2soZGVjb3JhdG9yKTtcbiAgfSxcblxuICBDb250ZW50U3RhdGVtZW50OiBmdW5jdGlvbiBDb250ZW50U3RhdGVtZW50KGNvbnRlbnQpIHtcbiAgICBpZiAoY29udGVudC52YWx1ZSkge1xuICAgICAgdGhpcy5vcGNvZGUoJ2FwcGVuZENvbnRlbnQnLCBjb250ZW50LnZhbHVlKTtcbiAgICB9XG4gIH0sXG5cbiAgQ29tbWVudFN0YXRlbWVudDogZnVuY3Rpb24gQ29tbWVudFN0YXRlbWVudCgpIHt9LFxuXG4gIFN1YkV4cHJlc3Npb246IGZ1bmN0aW9uIFN1YkV4cHJlc3Npb24oc2V4cHIpIHtcbiAgICB0cmFuc2Zvcm1MaXRlcmFsVG9QYXRoKHNleHByKTtcbiAgICB2YXIgdHlwZSA9IHRoaXMuY2xhc3NpZnlTZXhwcihzZXhwcik7XG5cbiAgICBpZiAodHlwZSA9PT0gJ3NpbXBsZScpIHtcbiAgICAgIHRoaXMuc2ltcGxlU2V4cHIoc2V4cHIpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2hlbHBlcicpIHtcbiAgICAgIHRoaXMuaGVscGVyU2V4cHIoc2V4cHIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFtYmlndW91c1NleHByKHNleHByKTtcbiAgICB9XG4gIH0sXG4gIGFtYmlndW91c1NleHByOiBmdW5jdGlvbiBhbWJpZ3VvdXNTZXhwcihzZXhwciwgcHJvZ3JhbSwgaW52ZXJzZSkge1xuICAgIHZhciBwYXRoID0gc2V4cHIucGF0aCxcbiAgICAgICAgbmFtZSA9IHBhdGgucGFydHNbMF0sXG4gICAgICAgIGlzQmxvY2sgPSBwcm9ncmFtICE9IG51bGwgfHwgaW52ZXJzZSAhPSBudWxsO1xuXG4gICAgdGhpcy5vcGNvZGUoJ2dldENvbnRleHQnLCBwYXRoLmRlcHRoKTtcblxuICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIHByb2dyYW0pO1xuICAgIHRoaXMub3Bjb2RlKCdwdXNoUHJvZ3JhbScsIGludmVyc2UpO1xuXG4gICAgcGF0aC5zdHJpY3QgPSB0cnVlO1xuICAgIHRoaXMuYWNjZXB0KHBhdGgpO1xuXG4gICAgdGhpcy5vcGNvZGUoJ2ludm9rZUFtYmlndW91cycsIG5hbWUsIGlzQmxvY2spO1xuICB9LFxuXG4gIHNpbXBsZVNleHByOiBmdW5jdGlvbiBzaW1wbGVTZXhwcihzZXhwcikge1xuICAgIHZhciBwYXRoID0gc2V4cHIucGF0aDtcbiAgICBwYXRoLnN0cmljdCA9IHRydWU7XG4gICAgdGhpcy5hY2NlcHQocGF0aCk7XG4gICAgdGhpcy5vcGNvZGUoJ3Jlc29sdmVQb3NzaWJsZUxhbWJkYScpO1xuICB9LFxuXG4gIGhlbHBlclNleHByOiBmdW5jdGlvbiBoZWxwZXJTZXhwcihzZXhwciwgcHJvZ3JhbSwgaW52ZXJzZSkge1xuICAgIHZhciBwYXJhbXMgPSB0aGlzLnNldHVwRnVsbE11c3RhY2hlUGFyYW1zKHNleHByLCBwcm9ncmFtLCBpbnZlcnNlKSxcbiAgICAgICAgcGF0aCA9IHNleHByLnBhdGgsXG4gICAgICAgIG5hbWUgPSBwYXRoLnBhcnRzWzBdO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5rbm93bkhlbHBlcnNbbmFtZV0pIHtcbiAgICAgIHRoaXMub3Bjb2RlKCdpbnZva2VLbm93bkhlbHBlcicsIHBhcmFtcy5sZW5ndGgsIG5hbWUpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmtub3duSGVscGVyc09ubHkpIHtcbiAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdZb3Ugc3BlY2lmaWVkIGtub3duSGVscGVyc09ubHksIGJ1dCB1c2VkIHRoZSB1bmtub3duIGhlbHBlciAnICsgbmFtZSwgc2V4cHIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXRoLnN0cmljdCA9IHRydWU7XG4gICAgICBwYXRoLmZhbHN5ID0gdHJ1ZTtcblxuICAgICAgdGhpcy5hY2NlcHQocGF0aCk7XG4gICAgICB0aGlzLm9wY29kZSgnaW52b2tlSGVscGVyJywgcGFyYW1zLmxlbmd0aCwgcGF0aC5vcmlnaW5hbCwgX2FzdDJbJ2RlZmF1bHQnXS5oZWxwZXJzLnNpbXBsZUlkKHBhdGgpKTtcbiAgICB9XG4gIH0sXG5cbiAgUGF0aEV4cHJlc3Npb246IGZ1bmN0aW9uIFBhdGhFeHByZXNzaW9uKHBhdGgpIHtcbiAgICB0aGlzLmFkZERlcHRoKHBhdGguZGVwdGgpO1xuICAgIHRoaXMub3Bjb2RlKCdnZXRDb250ZXh0JywgcGF0aC5kZXB0aCk7XG5cbiAgICB2YXIgbmFtZSA9IHBhdGgucGFydHNbMF0sXG4gICAgICAgIHNjb3BlZCA9IF9hc3QyWydkZWZhdWx0J10uaGVscGVycy5zY29wZWRJZChwYXRoKSxcbiAgICAgICAgYmxvY2tQYXJhbUlkID0gIXBhdGguZGVwdGggJiYgIXNjb3BlZCAmJiB0aGlzLmJsb2NrUGFyYW1JbmRleChuYW1lKTtcblxuICAgIGlmIChibG9ja1BhcmFtSWQpIHtcbiAgICAgIHRoaXMub3Bjb2RlKCdsb29rdXBCbG9ja1BhcmFtJywgYmxvY2tQYXJhbUlkLCBwYXRoLnBhcnRzKTtcbiAgICB9IGVsc2UgaWYgKCFuYW1lKSB7XG4gICAgICAvLyBDb250ZXh0IHJlZmVyZW5jZSwgaS5lLiBge3tmb28gLn19YCBvciBge3tmb28gLi59fWBcbiAgICAgIHRoaXMub3Bjb2RlKCdwdXNoQ29udGV4dCcpO1xuICAgIH0gZWxzZSBpZiAocGF0aC5kYXRhKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuZGF0YSA9IHRydWU7XG4gICAgICB0aGlzLm9wY29kZSgnbG9va3VwRGF0YScsIHBhdGguZGVwdGgsIHBhdGgucGFydHMsIHBhdGguc3RyaWN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vcGNvZGUoJ2xvb2t1cE9uQ29udGV4dCcsIHBhdGgucGFydHMsIHBhdGguZmFsc3ksIHBhdGguc3RyaWN0LCBzY29wZWQpO1xuICAgIH1cbiAgfSxcblxuICBTdHJpbmdMaXRlcmFsOiBmdW5jdGlvbiBTdHJpbmdMaXRlcmFsKHN0cmluZykge1xuICAgIHRoaXMub3Bjb2RlKCdwdXNoU3RyaW5nJywgc3RyaW5nLnZhbHVlKTtcbiAgfSxcblxuICBOdW1iZXJMaXRlcmFsOiBmdW5jdGlvbiBOdW1iZXJMaXRlcmFsKG51bWJlcikge1xuICAgIHRoaXMub3Bjb2RlKCdwdXNoTGl0ZXJhbCcsIG51bWJlci52YWx1ZSk7XG4gIH0sXG5cbiAgQm9vbGVhbkxpdGVyYWw6IGZ1bmN0aW9uIEJvb2xlYW5MaXRlcmFsKGJvb2wpIHtcbiAgICB0aGlzLm9wY29kZSgncHVzaExpdGVyYWwnLCBib29sLnZhbHVlKTtcbiAgfSxcblxuICBVbmRlZmluZWRMaXRlcmFsOiBmdW5jdGlvbiBVbmRlZmluZWRMaXRlcmFsKCkge1xuICAgIHRoaXMub3Bjb2RlKCdwdXNoTGl0ZXJhbCcsICd1bmRlZmluZWQnKTtcbiAgfSxcblxuICBOdWxsTGl0ZXJhbDogZnVuY3Rpb24gTnVsbExpdGVyYWwoKSB7XG4gICAgdGhpcy5vcGNvZGUoJ3B1c2hMaXRlcmFsJywgJ251bGwnKTtcbiAgfSxcblxuICBIYXNoOiBmdW5jdGlvbiBIYXNoKGhhc2gpIHtcbiAgICB2YXIgcGFpcnMgPSBoYXNoLnBhaXJzLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgbCA9IHBhaXJzLmxlbmd0aDtcblxuICAgIHRoaXMub3Bjb2RlKCdwdXNoSGFzaCcpO1xuXG4gICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRoaXMucHVzaFBhcmFtKHBhaXJzW2ldLnZhbHVlKTtcbiAgICB9XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdGhpcy5vcGNvZGUoJ2Fzc2lnblRvSGFzaCcsIHBhaXJzW2ldLmtleSk7XG4gICAgfVxuICAgIHRoaXMub3Bjb2RlKCdwb3BIYXNoJyk7XG4gIH0sXG5cbiAgLy8gSEVMUEVSU1xuICBvcGNvZGU6IGZ1bmN0aW9uIG9wY29kZShuYW1lKSB7XG4gICAgdGhpcy5vcGNvZGVzLnB1c2goe1xuICAgICAgb3Bjb2RlOiBuYW1lLFxuICAgICAgYXJnczogc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLFxuICAgICAgbG9jOiB0aGlzLnNvdXJjZU5vZGVbMF0ubG9jXG4gICAgfSk7XG4gIH0sXG5cbiAgYWRkRGVwdGg6IGZ1bmN0aW9uIGFkZERlcHRoKGRlcHRoKSB7XG4gICAgaWYgKCFkZXB0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMudXNlRGVwdGhzID0gdHJ1ZTtcbiAgfSxcblxuICBjbGFzc2lmeVNleHByOiBmdW5jdGlvbiBjbGFzc2lmeVNleHByKHNleHByKSB7XG4gICAgdmFyIGlzU2ltcGxlID0gX2FzdDJbJ2RlZmF1bHQnXS5oZWxwZXJzLnNpbXBsZUlkKHNleHByLnBhdGgpO1xuXG4gICAgdmFyIGlzQmxvY2tQYXJhbSA9IGlzU2ltcGxlICYmICEhdGhpcy5ibG9ja1BhcmFtSW5kZXgoc2V4cHIucGF0aC5wYXJ0c1swXSk7XG5cbiAgICAvLyBhIG11c3RhY2hlIGlzIGFuIGVsaWdpYmxlIGhlbHBlciBpZjpcbiAgICAvLyAqIGl0cyBpZCBpcyBzaW1wbGUgKGEgc2luZ2xlIHBhcnQsIG5vdCBgdGhpc2Agb3IgYC4uYClcbiAgICB2YXIgaXNIZWxwZXIgPSAhaXNCbG9ja1BhcmFtICYmIF9hc3QyWydkZWZhdWx0J10uaGVscGVycy5oZWxwZXJFeHByZXNzaW9uKHNleHByKTtcblxuICAgIC8vIGlmIGEgbXVzdGFjaGUgaXMgYW4gZWxpZ2libGUgaGVscGVyIGJ1dCBub3QgYSBkZWZpbml0ZVxuICAgIC8vIGhlbHBlciwgaXQgaXMgYW1iaWd1b3VzLCBhbmQgd2lsbCBiZSByZXNvbHZlZCBpbiBhIGxhdGVyXG4gICAgLy8gcGFzcyBvciBhdCBydW50aW1lLlxuICAgIHZhciBpc0VsaWdpYmxlID0gIWlzQmxvY2tQYXJhbSAmJiAoaXNIZWxwZXIgfHwgaXNTaW1wbGUpO1xuXG4gICAgLy8gaWYgYW1iaWd1b3VzLCB3ZSBjYW4gcG9zc2libHkgcmVzb2x2ZSB0aGUgYW1iaWd1aXR5IG5vd1xuICAgIC8vIEFuIGVsaWdpYmxlIGhlbHBlciBpcyBvbmUgdGhhdCBkb2VzIG5vdCBoYXZlIGEgY29tcGxleCBwYXRoLCBpLmUuIGB0aGlzLmZvb2AsIGAuLi9mb29gIGV0Yy5cbiAgICBpZiAoaXNFbGlnaWJsZSAmJiAhaXNIZWxwZXIpIHtcbiAgICAgIHZhciBfbmFtZSA9IHNleHByLnBhdGgucGFydHNbMF0sXG4gICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgIGlmIChvcHRpb25zLmtub3duSGVscGVyc1tfbmFtZV0pIHtcbiAgICAgICAgaXNIZWxwZXIgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmtub3duSGVscGVyc09ubHkpIHtcbiAgICAgICAgaXNFbGlnaWJsZSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc0hlbHBlcikge1xuICAgICAgcmV0dXJuICdoZWxwZXInO1xuICAgIH0gZWxzZSBpZiAoaXNFbGlnaWJsZSkge1xuICAgICAgcmV0dXJuICdhbWJpZ3VvdXMnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ3NpbXBsZSc7XG4gICAgfVxuICB9LFxuXG4gIHB1c2hQYXJhbXM6IGZ1bmN0aW9uIHB1c2hQYXJhbXMocGFyYW1zKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYXJhbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB0aGlzLnB1c2hQYXJhbShwYXJhbXNbaV0pO1xuICAgIH1cbiAgfSxcblxuICBwdXNoUGFyYW06IGZ1bmN0aW9uIHB1c2hQYXJhbSh2YWwpIHtcbiAgICB2YXIgdmFsdWUgPSB2YWwudmFsdWUgIT0gbnVsbCA/IHZhbC52YWx1ZSA6IHZhbC5vcmlnaW5hbCB8fCAnJztcblxuICAgIGlmICh0aGlzLnN0cmluZ1BhcmFtcykge1xuICAgICAgaWYgKHZhbHVlLnJlcGxhY2UpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9eKFxcLj9cXC5cXC8pKi9nLCAnJykucmVwbGFjZSgvXFwvL2csICcuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh2YWwuZGVwdGgpIHtcbiAgICAgICAgdGhpcy5hZGREZXB0aCh2YWwuZGVwdGgpO1xuICAgICAgfVxuICAgICAgdGhpcy5vcGNvZGUoJ2dldENvbnRleHQnLCB2YWwuZGVwdGggfHwgMCk7XG4gICAgICB0aGlzLm9wY29kZSgncHVzaFN0cmluZ1BhcmFtJywgdmFsdWUsIHZhbC50eXBlKTtcblxuICAgICAgaWYgKHZhbC50eXBlID09PSAnU3ViRXhwcmVzc2lvbicpIHtcbiAgICAgICAgLy8gU3ViRXhwcmVzc2lvbnMgZ2V0IGV2YWx1YXRlZCBhbmQgcGFzc2VkIGluXG4gICAgICAgIC8vIGluIHN0cmluZyBwYXJhbXMgbW9kZS5cbiAgICAgICAgdGhpcy5hY2NlcHQodmFsKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMudHJhY2tJZHMpIHtcbiAgICAgICAgdmFyIGJsb2NrUGFyYW1JbmRleCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHZhbC5wYXJ0cyAmJiAhX2FzdDJbJ2RlZmF1bHQnXS5oZWxwZXJzLnNjb3BlZElkKHZhbCkgJiYgIXZhbC5kZXB0aCkge1xuICAgICAgICAgIGJsb2NrUGFyYW1JbmRleCA9IHRoaXMuYmxvY2tQYXJhbUluZGV4KHZhbC5wYXJ0c1swXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJsb2NrUGFyYW1JbmRleCkge1xuICAgICAgICAgIHZhciBibG9ja1BhcmFtQ2hpbGQgPSB2YWwucGFydHMuc2xpY2UoMSkuam9pbignLicpO1xuICAgICAgICAgIHRoaXMub3Bjb2RlKCdwdXNoSWQnLCAnQmxvY2tQYXJhbScsIGJsb2NrUGFyYW1JbmRleCwgYmxvY2tQYXJhbUNoaWxkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9IHZhbC5vcmlnaW5hbCB8fCB2YWx1ZTtcbiAgICAgICAgICBpZiAodmFsdWUucmVwbGFjZSkge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9edGhpcyg/OlxcLnwkKS8sICcnKS5yZXBsYWNlKC9eXFwuXFwvLywgJycpLnJlcGxhY2UoL15cXC4kLywgJycpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMub3Bjb2RlKCdwdXNoSWQnLCB2YWwudHlwZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmFjY2VwdCh2YWwpO1xuICAgIH1cbiAgfSxcblxuICBzZXR1cEZ1bGxNdXN0YWNoZVBhcmFtczogZnVuY3Rpb24gc2V0dXBGdWxsTXVzdGFjaGVQYXJhbXMoc2V4cHIsIHByb2dyYW0sIGludmVyc2UsIG9taXRFbXB0eSkge1xuICAgIHZhciBwYXJhbXMgPSBzZXhwci5wYXJhbXM7XG4gICAgdGhpcy5wdXNoUGFyYW1zKHBhcmFtcyk7XG5cbiAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBwcm9ncmFtKTtcbiAgICB0aGlzLm9wY29kZSgncHVzaFByb2dyYW0nLCBpbnZlcnNlKTtcblxuICAgIGlmIChzZXhwci5oYXNoKSB7XG4gICAgICB0aGlzLmFjY2VwdChzZXhwci5oYXNoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vcGNvZGUoJ2VtcHR5SGFzaCcsIG9taXRFbXB0eSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfSxcblxuICBibG9ja1BhcmFtSW5kZXg6IGZ1bmN0aW9uIGJsb2NrUGFyYW1JbmRleChuYW1lKSB7XG4gICAgZm9yICh2YXIgZGVwdGggPSAwLCBsZW4gPSB0aGlzLm9wdGlvbnMuYmxvY2tQYXJhbXMubGVuZ3RoOyBkZXB0aCA8IGxlbjsgZGVwdGgrKykge1xuICAgICAgdmFyIGJsb2NrUGFyYW1zID0gdGhpcy5vcHRpb25zLmJsb2NrUGFyYW1zW2RlcHRoXSxcbiAgICAgICAgICBwYXJhbSA9IGJsb2NrUGFyYW1zICYmIF91dGlscy5pbmRleE9mKGJsb2NrUGFyYW1zLCBuYW1lKTtcbiAgICAgIGlmIChibG9ja1BhcmFtcyAmJiBwYXJhbSA+PSAwKSB7XG4gICAgICAgIHJldHVybiBbZGVwdGgsIHBhcmFtXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHByZWNvbXBpbGUoaW5wdXQsIG9wdGlvbnMsIGVudikge1xuICBpZiAoaW5wdXQgPT0gbnVsbCB8fCB0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnICYmIGlucHV0LnR5cGUgIT09ICdQcm9ncmFtJykge1xuICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdZb3UgbXVzdCBwYXNzIGEgc3RyaW5nIG9yIEhhbmRsZWJhcnMgQVNUIHRvIEhhbmRsZWJhcnMucHJlY29tcGlsZS4gWW91IHBhc3NlZCAnICsgaW5wdXQpO1xuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGlmICghKCdkYXRhJyBpbiBvcHRpb25zKSkge1xuICAgIG9wdGlvbnMuZGF0YSA9IHRydWU7XG4gIH1cbiAgaWYgKG9wdGlvbnMuY29tcGF0KSB7XG4gICAgb3B0aW9ucy51c2VEZXB0aHMgPSB0cnVlO1xuICB9XG5cbiAgdmFyIGFzdCA9IGVudi5wYXJzZShpbnB1dCwgb3B0aW9ucyksXG4gICAgICBlbnZpcm9ubWVudCA9IG5ldyBlbnYuQ29tcGlsZXIoKS5jb21waWxlKGFzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBuZXcgZW52LkphdmFTY3JpcHRDb21waWxlcigpLmNvbXBpbGUoZW52aXJvbm1lbnQsIG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBjb21waWxlKGlucHV0LCBvcHRpb25zLCBlbnYpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCkgb3B0aW9ucyA9IHt9O1xuXG4gIGlmIChpbnB1dCA9PSBudWxsIHx8IHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycgJiYgaW5wdXQudHlwZSAhPT0gJ1Byb2dyYW0nKSB7XG4gICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1lvdSBtdXN0IHBhc3MgYSBzdHJpbmcgb3IgSGFuZGxlYmFycyBBU1QgdG8gSGFuZGxlYmFycy5jb21waWxlLiBZb3UgcGFzc2VkICcgKyBpbnB1dCk7XG4gIH1cblxuICBvcHRpb25zID0gX3V0aWxzLmV4dGVuZCh7fSwgb3B0aW9ucyk7XG4gIGlmICghKCdkYXRhJyBpbiBvcHRpb25zKSkge1xuICAgIG9wdGlvbnMuZGF0YSA9IHRydWU7XG4gIH1cbiAgaWYgKG9wdGlvbnMuY29tcGF0KSB7XG4gICAgb3B0aW9ucy51c2VEZXB0aHMgPSB0cnVlO1xuICB9XG5cbiAgdmFyIGNvbXBpbGVkID0gdW5kZWZpbmVkO1xuXG4gIGZ1bmN0aW9uIGNvbXBpbGVJbnB1dCgpIHtcbiAgICB2YXIgYXN0ID0gZW52LnBhcnNlKGlucHV0LCBvcHRpb25zKSxcbiAgICAgICAgZW52aXJvbm1lbnQgPSBuZXcgZW52LkNvbXBpbGVyKCkuY29tcGlsZShhc3QsIG9wdGlvbnMpLFxuICAgICAgICB0ZW1wbGF0ZVNwZWMgPSBuZXcgZW52LkphdmFTY3JpcHRDb21waWxlcigpLmNvbXBpbGUoZW52aXJvbm1lbnQsIG9wdGlvbnMsIHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgcmV0dXJuIGVudi50ZW1wbGF0ZSh0ZW1wbGF0ZVNwZWMpO1xuICB9XG5cbiAgLy8gVGVtcGxhdGUgaXMgb25seSBjb21waWxlZCBvbiBmaXJzdCB1c2UgYW5kIGNhY2hlZCBhZnRlciB0aGF0IHBvaW50LlxuICBmdW5jdGlvbiByZXQoY29udGV4dCwgZXhlY09wdGlvbnMpIHtcbiAgICBpZiAoIWNvbXBpbGVkKSB7XG4gICAgICBjb21waWxlZCA9IGNvbXBpbGVJbnB1dCgpO1xuICAgIH1cbiAgICByZXR1cm4gY29tcGlsZWQuY2FsbCh0aGlzLCBjb250ZXh0LCBleGVjT3B0aW9ucyk7XG4gIH1cbiAgcmV0Ll9zZXR1cCA9IGZ1bmN0aW9uIChzZXR1cE9wdGlvbnMpIHtcbiAgICBpZiAoIWNvbXBpbGVkKSB7XG4gICAgICBjb21waWxlZCA9IGNvbXBpbGVJbnB1dCgpO1xuICAgIH1cbiAgICByZXR1cm4gY29tcGlsZWQuX3NldHVwKHNldHVwT3B0aW9ucyk7XG4gIH07XG4gIHJldC5fY2hpbGQgPSBmdW5jdGlvbiAoaSwgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocykge1xuICAgIGlmICghY29tcGlsZWQpIHtcbiAgICAgIGNvbXBpbGVkID0gY29tcGlsZUlucHV0KCk7XG4gICAgfVxuICAgIHJldHVybiBjb21waWxlZC5fY2hpbGQoaSwgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocyk7XG4gIH07XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGFyZ0VxdWFscyhhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoX3V0aWxzLmlzQXJyYXkoYSkgJiYgX3V0aWxzLmlzQXJyYXkoYikgJiYgYS5sZW5ndGggPT09IGIubGVuZ3RoKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWFyZ0VxdWFscyhhW2ldLCBiW2ldKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybUxpdGVyYWxUb1BhdGgoc2V4cHIpIHtcbiAgaWYgKCFzZXhwci5wYXRoLnBhcnRzKSB7XG4gICAgdmFyIGxpdGVyYWwgPSBzZXhwci5wYXRoO1xuICAgIC8vIENhc3RpbmcgdG8gc3RyaW5nIGhlcmUgdG8gbWFrZSBmYWxzZSBhbmQgMCBsaXRlcmFsIHZhbHVlcyBwbGF5IG5pY2VseSB3aXRoIHRoZSByZXN0XG4gICAgLy8gb2YgdGhlIHN5c3RlbS5cbiAgICBzZXhwci5wYXRoID0ge1xuICAgICAgdHlwZTogJ1BhdGhFeHByZXNzaW9uJyxcbiAgICAgIGRhdGE6IGZhbHNlLFxuICAgICAgZGVwdGg6IDAsXG4gICAgICBwYXJ0czogW2xpdGVyYWwub3JpZ2luYWwgKyAnJ10sXG4gICAgICBvcmlnaW5hbDogbGl0ZXJhbC5vcmlnaW5hbCArICcnLFxuICAgICAgbG9jOiBsaXRlcmFsLmxvY1xuICAgIH07XG4gIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwyTnZiWEJwYkdWeUwyTnZiWEJwYkdWeUxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN096czdPenQ1UWtGRmMwSXNZMEZCWXpzN096dHhRa0ZEU3l4VlFVRlZPenR0UWtGRGJrTXNUMEZCVHpzN096dEJRVVYyUWl4SlFVRk5MRXRCUVVzc1IwRkJSeXhGUVVGRkxFTkJRVU1zUzBGQlN5eERRVUZET3p0QlFVVm9RaXhUUVVGVExGRkJRVkVzUjBGQlJ5eEZRVUZGT3pzN096czdPMEZCVHpkQ0xGRkJRVkVzUTBGQlF5eFRRVUZUTEVkQlFVYzdRVUZEYmtJc1ZVRkJVU3hGUVVGRkxGRkJRVkU3TzBGQlJXeENMRkZCUVUwc1JVRkJSU3huUWtGQlV5eExRVUZMTEVWQlFVVTdRVUZEZEVJc1VVRkJTU3hIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4TlFVRk5MRU5CUVVNN1FVRkRPVUlzVVVGQlNTeExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTFCUVUwc1MwRkJTeXhIUVVGSExFVkJRVVU3UVVGRGFFTXNZVUZCVHl4TFFVRkxMRU5CUVVNN1MwRkRaRHM3UVVGRlJDeFRRVUZMTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzUjBGQlJ5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZPMEZCUXpWQ0xGVkJRVWtzVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRE8xVkJRekZDTEZkQlFWY3NSMEZCUnl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBGQlEycERMRlZCUTBVc1RVRkJUU3hEUVVGRExFMUJRVTBzUzBGQlN5eFhRVUZYTEVOQlFVTXNUVUZCVFN4SlFVTndReXhEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RlFVRkZMRmRCUVZjc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGRGVrTTdRVUZEUVN4bFFVRlBMRXRCUVVzc1EwRkJRenRQUVVOa08wdEJRMFk3T3pzN1FVRkpSQ3hQUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4TlFVRk5MRU5CUVVNN1FVRkRNMElzVTBGQlN5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFZEJRVWNzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlR0QlFVTTFRaXhWUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRk8wRkJReTlETEdWQlFVOHNTMEZCU3l4RFFVRkRPMDlCUTJRN1MwRkRSanM3UVVGRlJDeFhRVUZQTEVsQlFVa3NRMEZCUXp0SFFVTmlPenRCUVVWRUxFMUJRVWtzUlVGQlJTeERRVUZET3p0QlFVVlFMRk5CUVU4c1JVRkJSU3hwUWtGQlV5eFBRVUZQTEVWQlFVVXNUMEZCVHl4RlFVRkZPMEZCUTJ4RExGRkJRVWtzUTBGQlF5eFZRVUZWTEVkQlFVY3NSVUZCUlN4RFFVRkRPMEZCUTNKQ0xGRkJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NSVUZCUlN4RFFVRkRPMEZCUTJ4Q0xGRkJRVWtzUTBGQlF5eFJRVUZSTEVkQlFVY3NSVUZCUlN4RFFVRkRPMEZCUTI1Q0xGRkJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NUMEZCVHl4RFFVRkRPMEZCUTNaQ0xGRkJRVWtzUTBGQlF5eFpRVUZaTEVkQlFVY3NUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJRenRCUVVONlF5eFJRVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRTlCUVU4c1EwRkJReXhSUVVGUkxFTkJRVU03TzBGQlJXcERMRmRCUVU4c1EwRkJReXhYUVVGWExFZEJRVWNzVDBGQlR5eERRVUZETEZkQlFWY3NTVUZCU1N4RlFVRkZMRU5CUVVNN08wRkJSV2hFTEZkQlFVOHNRMEZCUXl4WlFVRlpMRWRCUVVjc1kwRkRja0lzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkRia0k3UVVGRFJTeHRRa0ZCWVN4RlFVRkZMRWxCUVVrN1FVRkRia0lzZDBKQlFXdENMRVZCUVVVc1NVRkJTVHRCUVVONFFpeFZRVUZKTEVWQlFVVXNTVUZCU1R0QlFVTldMRmxCUVVrc1NVRkJTVHRCUVVOU0xGbEJRVTBzUlVGQlJTeEpRVUZKTzBGQlExb3NZMEZCVFN4SlFVRkpPMEZCUTFZc1UwRkJSeXhGUVVGRkxFbEJRVWs3UVVGRFZDeFpRVUZOTEVWQlFVVXNTVUZCU1R0TFFVTmlMRVZCUTBRc1QwRkJUeXhEUVVGRExGbEJRVmtzUTBGRGNrSXNRMEZCUXpzN1FVRkZSaXhYUVVGUExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1IwRkROMEk3TzBGQlJVUXNaMEpCUVdNc1JVRkJSU3gzUWtGQlV5eFBRVUZQTEVWQlFVVTdRVUZEYUVNc1VVRkJTU3hoUVVGaExFZEJRVWNzU1VGQlNTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZPenRCUVVOeVF5eFZRVUZOTEVkQlFVY3NZVUZCWVN4RFFVRkRMRTlCUVU4c1EwRkJReXhQUVVGUExFVkJRVVVzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXp0UlFVTnlSQ3hKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRPenRCUVVWeVFpeFJRVUZKTEVOQlFVTXNWVUZCVlN4SFFVRkhMRWxCUVVrc1EwRkJReXhWUVVGVkxFbEJRVWtzVFVGQlRTeERRVUZETEZWQlFWVXNRMEZCUXpzN1FVRkZka1FzVVVGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhOUVVGTkxFTkJRVU03UVVGRE4wSXNVVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhKUVVGSkxFTkJRVU1zVTBGQlV5eEpRVUZKTEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNN08wRkJSWEJFTEZkQlFVOHNTVUZCU1N4RFFVRkRPMGRCUTJJN08wRkJSVVFzVVVGQlRTeEZRVUZGTEdkQ1FVRlRMRWxCUVVrc1JVRkJSVHM3UVVGRmNrSXNVVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVTdRVUZEY0VJc1dVRkJUU3d5UWtGQll5eG5Ra0ZCWjBJc1IwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMHRCUTNwRU96dEJRVVZFTEZGQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBGQlF6bENMRkZCUVVrc1IwRkJSeXhIUVVGSExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRGFFTXNVVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF6dEJRVU40UWl4WFFVRlBMRWRCUVVjc1EwRkJRenRIUVVOYU96dEJRVVZFTEZOQlFVOHNSVUZCUlN4cFFrRkJVeXhQUVVGUExFVkJRVVU3UVVGRGVrSXNVVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhYUVVGWExFTkJRVU1zVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRenM3UVVGRmRFUXNVVUZCU1N4SlFVRkpMRWRCUVVjc1QwRkJUeXhEUVVGRExFbEJRVWs3VVVGRGNrSXNWVUZCVlN4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU03UVVGRE0wSXNVMEZCU3l4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEZWQlFWVXNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRCUVVOdVF5eFZRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzB0QlEzUkNPenRCUVVWRUxGRkJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNWMEZCVnl4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRE96dEJRVVZxUXl4UlFVRkpMRU5CUVVNc1VVRkJVU3hIUVVGSExGVkJRVlVzUzBGQlN5eERRVUZETEVOQlFVTTdRVUZEYWtNc1VVRkJTU3hEUVVGRExGZEJRVmNzUjBGQlJ5eFBRVUZQTEVOQlFVTXNWMEZCVnl4SFFVRkhMRTlCUVU4c1EwRkJReXhYUVVGWExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXpzN1FVRkZlRVVzVjBGQlR5eEpRVUZKTEVOQlFVTTdSMEZEWWpzN1FVRkZSQ3huUWtGQll5eEZRVUZGTEhkQ1FVRlRMRXRCUVVzc1JVRkJSVHRCUVVNNVFpd3dRa0ZCYzBJc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6czdRVUZGT1VJc1VVRkJTU3hQUVVGUExFZEJRVWNzUzBGQlN5eERRVUZETEU5QlFVODdVVUZEZWtJc1QwRkJUeXhIUVVGSExFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTTdPMEZCUlRGQ0xGZEJRVThzUjBGQlJ5eFBRVUZQTEVsQlFVa3NTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6dEJRVU5zUkN4WFFVRlBMRWRCUVVjc1QwRkJUeXhKUVVGSkxFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN08wRkJSV3hFTEZGQlFVa3NTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdPMEZCUlhKRExGRkJRVWtzU1VGQlNTeExRVUZMTEZGQlFWRXNSVUZCUlR0QlFVTnlRaXhWUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEV0QlFVc3NSVUZCUlN4UFFVRlBMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU03UzBGRE0wTXNUVUZCVFN4SlFVRkpMRWxCUVVrc1MwRkJTeXhSUVVGUkxFVkJRVVU3UVVGRE5VSXNWVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6czdPenRCUVVsNFFpeFZRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMR0ZCUVdFc1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlF6dEJRVU53UXl4VlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExHRkJRV0VzUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXp0QlFVTndReXhWUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPMEZCUTNwQ0xGVkJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNXVUZCV1N4RlFVRkZMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdTMEZEYUVRc1RVRkJUVHRCUVVOTUxGVkJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNTMEZCU3l4RlFVRkZMRTlCUVU4c1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlF6czdPenRCUVVrM1F5eFZRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMR0ZCUVdFc1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlF6dEJRVU53UXl4VlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExHRkJRV0VzUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXp0QlFVTndReXhWUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPMEZCUTNwQ0xGVkJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zUTBGQlF6dExRVU53UXpzN1FVRkZSQ3hSUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMGRCUTNaQ096dEJRVVZFTEdkQ1FVRmpMRVZCUVVFc2QwSkJRVU1zVTBGQlV5eEZRVUZGTzBGQlEzaENMRkZCUVVrc1QwRkJUeXhIUVVGSExGTkJRVk1zUTBGQlF5eFBRVUZQTEVsQlFVa3NTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhUUVVGVExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdRVUZETVVVc1VVRkJTU3hOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEhWQ1FVRjFRaXhEUVVGRExGTkJRVk1zUlVGQlJTeFBRVUZQTEVWQlFVVXNVMEZCVXl4RFFVRkRPMUZCUTNSRkxFbEJRVWtzUjBGQlJ5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRPenRCUVVWNFFpeFJRVUZKTEVOQlFVTXNZVUZCWVN4SFFVRkhMRWxCUVVrc1EwRkJRenRCUVVNeFFpeFJRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRzFDUVVGdFFpeEZRVUZGTEUxQlFVMHNRMEZCUXl4TlFVRk5MRVZCUVVVc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzBkQlEyaEZPenRCUVVWRUxHdENRVUZuUWl4RlFVRkZMREJDUVVGVExFOUJRVThzUlVGQlJUdEJRVU5zUXl4UlFVRkpMRU5CUVVNc1ZVRkJWU3hIUVVGSExFbEJRVWtzUTBGQlF6czdRVUZGZGtJc1VVRkJTU3hQUVVGUExFZEJRVWNzVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXp0QlFVTTVRaXhSUVVGSkxFOUJRVThzUlVGQlJUdEJRVU5ZTEdGQlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFOUJRVThzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0TFFVTm9SRHM3UVVGRlJDeFJRVUZKTEUxQlFVMHNSMEZCUnl4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRE8wRkJRelZDTEZGQlFVa3NUVUZCVFN4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFVkJRVVU3UVVGRGNrSXNXVUZCVFN3eVFrRkRTaXd5UTBGQk1rTXNSMEZCUnl4TlFVRk5MRU5CUVVNc1RVRkJUU3hGUVVNelJDeFBRVUZQTEVOQlExSXNRMEZCUXp0TFFVTklMRTFCUVUwc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVWQlFVVTdRVUZEZWtJc1ZVRkJTU3hKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEhOQ1FVRnpRaXhGUVVGRk8wRkJRM1pETEZsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1lVRkJZU3hGUVVGRkxGZEJRVmNzUTBGQlF5eERRVUZETzA5QlEzcERMRTFCUVUwN1FVRkRUQ3hqUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNTVUZCU1N4RlFVRkZMR2RDUVVGblFpeEZRVUZGTEV0QlFVc3NSVUZCUlN4RlFVRkZMRVZCUVVVc1MwRkJTeXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdUMEZET1VRN1MwRkRSanM3UVVGRlJDeFJRVUZKTEZkQlFWY3NSMEZCUnl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkU3VVVGRGNrTXNVMEZCVXl4SFFVRkhMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeExRVUZMTEdWQlFXVXNRMEZCUXp0QlFVTndSQ3hSUVVGSkxGTkJRVk1zUlVGQlJUdEJRVU5pTEZWQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzB0QlF6TkNPenRCUVVWRUxGRkJRVWtzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXhQUVVGUExFVkJRVVVzVDBGQlR5eEZRVUZGTEZOQlFWTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenM3UVVGRmFFVXNVVUZCU1N4TlFVRk5MRWRCUVVjc1QwRkJUeXhEUVVGRExFMUJRVTBzU1VGQlNTeEZRVUZGTEVOQlFVTTdRVUZEYkVNc1VVRkJTU3hKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEdGQlFXRXNTVUZCU1N4TlFVRk5MRVZCUVVVN1FVRkRlRU1zVlVGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4bFFVRmxMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU03UVVGRGNrTXNXVUZCVFN4SFFVRkhMRVZCUVVVc1EwRkJRenRMUVVOaU96dEJRVVZFTEZGQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1pVRkJaU3hGUVVGRkxGTkJRVk1zUlVGQlJTeFhRVUZYTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkROMFFzVVVGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRIUVVOMlFqdEJRVU5FTEhWQ1FVRnhRaXhGUVVGRkxDdENRVUZUTEZsQlFWa3NSVUZCUlR0QlFVTTFReXhSUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU03UjBGRGNrTTdPMEZCUlVRc2JVSkJRV2xDTEVWQlFVVXNNa0pCUVZNc1VVRkJVU3hGUVVGRk8wRkJRM0JETEZGQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03TzBGQlJUZENMRkZCUVVrc1VVRkJVU3hEUVVGRExFOUJRVThzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1VVRkJVU3hGUVVGRk8wRkJRemxETEZWQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1pVRkJaU3hEUVVGRExFTkJRVU03UzBGRE9VSXNUVUZCVFR0QlFVTk1MRlZCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdTMEZEZGtJN1IwRkRSanRCUVVORUxGZEJRVk1zUlVGQlFTeHRRa0ZCUXl4VFFVRlRMRVZCUVVVN1FVRkRia0lzVVVGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenRIUVVOb1F6czdRVUZGUkN4clFrRkJaMElzUlVGQlJTd3dRa0ZCVXl4UFFVRlBMRVZCUVVVN1FVRkRiRU1zVVVGQlNTeFBRVUZQTEVOQlFVTXNTMEZCU3l4RlFVRkZPMEZCUTJwQ0xGVkJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNaVUZCWlN4RlFVRkZMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dExRVU0zUXp0SFFVTkdPenRCUVVWRUxHdENRVUZuUWl4RlFVRkZMRFJDUVVGWExFVkJRVVU3TzBGQlJTOUNMR1ZCUVdFc1JVRkJSU3gxUWtGQlV5eExRVUZMTEVWQlFVVTdRVUZETjBJc01FSkJRWE5DTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRPVUlzVVVGQlNTeEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6czdRVUZGY2tNc1VVRkJTU3hKUVVGSkxFdEJRVXNzVVVGQlVTeEZRVUZGTzBGQlEzSkNMRlZCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdTMEZEZWtJc1RVRkJUU3hKUVVGSkxFbEJRVWtzUzBGQlN5eFJRVUZSTEVWQlFVVTdRVUZETlVJc1ZVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0TFFVTjZRaXhOUVVGTk8wRkJRMHdzVlVGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRMUVVNMVFqdEhRVU5HTzBGQlEwUXNaMEpCUVdNc1JVRkJSU3gzUWtGQlV5eExRVUZMTEVWQlFVVXNUMEZCVHl4RlFVRkZMRTlCUVU4c1JVRkJSVHRCUVVOb1JDeFJRVUZKTEVsQlFVa3NSMEZCUnl4TFFVRkxMRU5CUVVNc1NVRkJTVHRSUVVOdVFpeEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGNFSXNUMEZCVHl4SFFVRkhMRTlCUVU4c1NVRkJTU3hKUVVGSkxFbEJRVWtzVDBGQlR5eEpRVUZKTEVsQlFVa3NRMEZCUXpzN1FVRkZMME1zVVVGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4WlFVRlpMRVZCUVVVc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZET3p0QlFVVjBReXhSUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEdGQlFXRXNSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJRenRCUVVOd1F5eFJRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMR0ZCUVdFc1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlF6czdRVUZGY0VNc1VVRkJTU3hEUVVGRExFMUJRVTBzUjBGQlJ5eEpRVUZKTEVOQlFVTTdRVUZEYmtJc1VVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXpzN1FVRkZiRUlzVVVGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4cFFrRkJhVUlzUlVGQlJTeEpRVUZKTEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVNN1IwRkRMME03TzBGQlJVUXNZVUZCVnl4RlFVRkZMSEZDUVVGVExFdEJRVXNzUlVGQlJUdEJRVU16UWl4UlFVRkpMRWxCUVVrc1IwRkJSeXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETzBGQlEzUkNMRkZCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETzBGQlEyNUNMRkZCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdRVUZEYkVJc1VVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXhEUVVGRE8wZEJRM1JET3p0QlFVVkVMR0ZCUVZjc1JVRkJSU3h4UWtGQlV5eExRVUZMTEVWQlFVVXNUMEZCVHl4RlFVRkZMRTlCUVU4c1JVRkJSVHRCUVVNM1F5eFJRVUZKTEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc2RVSkJRWFZDTEVOQlFVTXNTMEZCU3l4RlFVRkZMRTlCUVU4c1JVRkJSU3hQUVVGUExFTkJRVU03VVVGRGFFVXNTVUZCU1N4SFFVRkhMRXRCUVVzc1EwRkJReXhKUVVGSk8xRkJRMnBDTEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZET3p0QlFVVjJRaXhSUVVGSkxFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRk8wRkJRMjVETEZWQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc2JVSkJRVzFDTEVWQlFVVXNUVUZCVFN4RFFVRkRMRTFCUVUwc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF6dExRVU4yUkN4TlFVRk5MRWxCUVVrc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSVHRCUVVONFF5eFpRVUZOTERKQ1FVTktMRGhFUVVFNFJDeEhRVUZITEVsQlFVa3NSVUZEY2tVc1MwRkJTeXhEUVVOT0xFTkJRVU03UzBGRFNDeE5RVUZOTzBGQlEwd3NWVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU03UVVGRGJrSXNWVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU03TzBGQlJXeENMRlZCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdRVUZEYkVJc1ZVRkJTU3hEUVVGRExFMUJRVTBzUTBGRFZDeGpRVUZqTEVWQlEyUXNUVUZCVFN4RFFVRkRMRTFCUVUwc1JVRkRZaXhKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVU5pTEdsQ1FVRkpMRTlCUVU4c1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlF6TkNMRU5CUVVNN1MwRkRTRHRIUVVOR096dEJRVVZFTEdkQ1FVRmpMRVZCUVVVc2QwSkJRVk1zU1VGQlNTeEZRVUZGTzBGQlF6ZENMRkZCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMEZCUXpGQ0xGRkJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNXVUZCV1N4RlFVRkZMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6czdRVUZGZEVNc1VVRkJTU3hKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRkRUlzVFVGQlRTeEhRVUZITEdsQ1FVRkpMRTlCUVU4c1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETzFGQlEyNURMRmxCUVZrc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVsQlFVa3NRMEZCUXl4TlFVRk5MRWxCUVVrc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXpzN1FVRkZkRVVzVVVGQlNTeFpRVUZaTEVWQlFVVTdRVUZEYUVJc1ZVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eHJRa0ZCYTBJc1JVRkJSU3haUVVGWkxFVkJRVVVzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMHRCUXpORUxFMUJRVTBzU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlRzN1FVRkZhRUlzVlVGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRenRMUVVNMVFpeE5RVUZOTEVsQlFVa3NTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSVHRCUVVOd1FpeFZRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU03UVVGRGVrSXNWVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhaUVVGWkxFVkJRVVVzU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlN4SlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0TFFVTm9SU3hOUVVGTk8wRkJRMHdzVlVGQlNTeERRVUZETEUxQlFVMHNRMEZEVkN4cFFrRkJhVUlzUlVGRGFrSXNTVUZCU1N4RFFVRkRMRXRCUVVzc1JVRkRWaXhKUVVGSkxFTkJRVU1zUzBGQlN5eEZRVU5XTEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUTFnc1RVRkJUU3hEUVVOUUxFTkJRVU03UzBGRFNEdEhRVU5HT3p0QlFVVkVMR1ZCUVdFc1JVRkJSU3gxUWtGQlV5eE5RVUZOTEVWQlFVVTdRVUZET1VJc1VVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFpRVUZaTEVWQlFVVXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8wZEJRM3BET3p0QlFVVkVMR1ZCUVdFc1JVRkJSU3gxUWtGQlV5eE5RVUZOTEVWQlFVVTdRVUZET1VJc1VVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eGhRVUZoTEVWQlFVVXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8wZEJRekZET3p0QlFVVkVMR2RDUVVGakxFVkJRVVVzZDBKQlFWTXNTVUZCU1N4RlFVRkZPMEZCUXpkQ0xGRkJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNZVUZCWVN4RlFVRkZMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEhRVU40UXpzN1FVRkZSQ3hyUWtGQlowSXNSVUZCUlN3MFFrRkJWenRCUVVNelFpeFJRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMR0ZCUVdFc1JVRkJSU3hYUVVGWExFTkJRVU1zUTBGQlF6dEhRVU42UXpzN1FVRkZSQ3hoUVVGWExFVkJRVVVzZFVKQlFWYzdRVUZEZEVJc1VVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eGhRVUZoTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1IwRkRjRU03TzBGQlJVUXNUVUZCU1N4RlFVRkZMR05CUVZNc1NVRkJTU3hGUVVGRk8wRkJRMjVDTEZGQlFVa3NTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTE8xRkJRM0JDTEVOQlFVTXNSMEZCUnl4RFFVRkRPMUZCUTB3c1EwRkJReXhIUVVGSExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTTdPMEZCUlc1Q0xGRkJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN08wRkJSWGhDTEZkQlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUdEJRVU5xUWl4VlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRMUVVOb1F6dEJRVU5FTEZkQlFVOHNRMEZCUXl4RlFVRkZMRVZCUVVVN1FVRkRWaXhWUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEdOQlFXTXNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdTMEZETTBNN1FVRkRSQ3hSUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMGRCUTNoQ096czdRVUZIUkN4UlFVRk5MRVZCUVVVc1owSkJRVk1zU1VGQlNTeEZRVUZGTzBGQlEzSkNMRkZCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETzBGQlEyaENMRmxCUVUwc1JVRkJSU3hKUVVGSk8wRkJRMW9zVlVGQlNTeEZRVUZGTEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhGUVVGRkxFTkJRVU1zUTBGQlF6dEJRVU01UWl4VFFVRkhMRVZCUVVVc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhPMHRCUXpWQ0xFTkJRVU1zUTBGQlF6dEhRVU5LT3p0QlFVVkVMRlZCUVZFc1JVRkJSU3hyUWtGQlV5eExRVUZMTEVWQlFVVTdRVUZEZUVJc1VVRkJTU3hEUVVGRExFdEJRVXNzUlVGQlJUdEJRVU5XTEdGQlFVODdTMEZEVWpzN1FVRkZSQ3hSUVVGSkxFTkJRVU1zVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXp0SFFVTjJRanM3UVVGRlJDeGxRVUZoTEVWQlFVVXNkVUpCUVZNc1MwRkJTeXhGUVVGRk8wRkJRemRDTEZGQlFVa3NVVUZCVVN4SFFVRkhMR2xDUVVGSkxFOUJRVThzUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE96dEJRVVZvUkN4UlFVRkpMRmxCUVZrc1IwRkJSeXhSUVVGUkxFbEJRVWtzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenM3T3p0QlFVa3pSU3hSUVVGSkxGRkJRVkVzUjBGQlJ5eERRVUZETEZsQlFWa3NTVUZCU1N4cFFrRkJTU3hQUVVGUExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03T3pzN08wRkJTM0JGTEZGQlFVa3NWVUZCVlN4SFFVRkhMRU5CUVVNc1dVRkJXU3hMUVVGTExGRkJRVkVzU1VGQlNTeFJRVUZSTEVOQlFVRXNRVUZCUXl4RFFVRkRPenM3TzBGQlNYcEVMRkZCUVVrc1ZVRkJWU3hKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTzBGQlF6TkNMRlZCUVVrc1MwRkJTU3hIUVVGSExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJRenRWUVVNMVFpeFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJRenRCUVVONlFpeFZRVUZKTEU5QlFVOHNRMEZCUXl4WlFVRlpMRU5CUVVNc1MwRkJTU3hEUVVGRExFVkJRVVU3UVVGRE9VSXNaMEpCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU03VDBGRGFrSXNUVUZCVFN4SlFVRkpMRTlCUVU4c1EwRkJReXhuUWtGQlowSXNSVUZCUlR0QlFVTnVReXhyUWtGQlZTeEhRVUZITEV0QlFVc3NRMEZCUXp0UFFVTndRanRMUVVOR096dEJRVVZFTEZGQlFVa3NVVUZCVVN4RlFVRkZPMEZCUTFvc1lVRkJUeXhSUVVGUkxFTkJRVU03UzBGRGFrSXNUVUZCVFN4SlFVRkpMRlZCUVZVc1JVRkJSVHRCUVVOeVFpeGhRVUZQTEZkQlFWY3NRMEZCUXp0TFFVTndRaXhOUVVGTk8wRkJRMHdzWVVGQlR5eFJRVUZSTEVOQlFVTTdTMEZEYWtJN1IwRkRSanM3UVVGRlJDeFpRVUZWTEVWQlFVVXNiMEpCUVZNc1RVRkJUU3hGUVVGRk8wRkJRek5DTEZOQlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVTdRVUZETjBNc1ZVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRMUVVNelFqdEhRVU5HT3p0QlFVVkVMRmRCUVZNc1JVRkJSU3h0UWtGQlV5eEhRVUZITEVWQlFVVTdRVUZEZGtJc1VVRkJTU3hMUVVGTExFZEJRVWNzUjBGQlJ5eERRVUZETEV0QlFVc3NTVUZCU1N4SlFVRkpMRWRCUVVjc1IwRkJSeXhEUVVGRExFdEJRVXNzUjBGQlJ5eEhRVUZITEVOQlFVTXNVVUZCVVN4SlFVRkpMRVZCUVVVc1EwRkJRenM3UVVGRkwwUXNVVUZCU1N4SlFVRkpMRU5CUVVNc1dVRkJXU3hGUVVGRk8wRkJRM0pDTEZWQlFVa3NTMEZCU3l4RFFVRkRMRTlCUVU4c1JVRkJSVHRCUVVOcVFpeGhRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhqUVVGakxFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRXRCUVVzc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF6dFBRVU12UkRzN1FVRkZSQ3hWUVVGSkxFZEJRVWNzUTBGQlF5eExRVUZMTEVWQlFVVTdRVUZEWWl4WlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFZEJRVWNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0UFFVTXhRanRCUVVORUxGVkJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNXVUZCV1N4RlFVRkZMRWRCUVVjc1EwRkJReXhMUVVGTExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTTdRVUZETVVNc1ZVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eHBRa0ZCYVVJc1JVRkJSU3hMUVVGTExFVkJRVVVzUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPenRCUVVWb1JDeFZRVUZKTEVkQlFVY3NRMEZCUXl4SlFVRkpMRXRCUVVzc1pVRkJaU3hGUVVGRk96czdRVUZIYUVNc1dVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0UFFVTnNRanRMUVVOR0xFMUJRVTA3UVVGRFRDeFZRVUZKTEVsQlFVa3NRMEZCUXl4UlFVRlJMRVZCUVVVN1FVRkRha0lzV1VGQlNTeGxRVUZsTEZsQlFVRXNRMEZCUXp0QlFVTndRaXhaUVVGSkxFZEJRVWNzUTBGQlF5eExRVUZMTEVsQlFVa3NRMEZCUXl4cFFrRkJTU3hQUVVGUExFTkJRVU1zVVVGQlVTeERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFdEJRVXNzUlVGQlJUdEJRVU42UkN4NVFrRkJaU3hIUVVGSExFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFOQlEzUkVPMEZCUTBRc1dVRkJTU3hsUVVGbExFVkJRVVU3UVVGRGJrSXNZMEZCU1N4bFFVRmxMRWRCUVVjc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEyNUVMR05CUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeEZRVUZGTEZsQlFWa3NSVUZCUlN4bFFVRmxMRVZCUVVVc1pVRkJaU3hEUVVGRExFTkJRVU03VTBGRGRrVXNUVUZCVFR0QlFVTk1MR1ZCUVVzc1IwRkJSeXhIUVVGSExFTkJRVU1zVVVGQlVTeEpRVUZKTEV0QlFVc3NRMEZCUXp0QlFVTTVRaXhqUVVGSkxFdEJRVXNzUTBGQlF5eFBRVUZQTEVWQlFVVTdRVUZEYWtJc2FVSkJRVXNzUjBGQlJ5eExRVUZMTEVOQlExWXNUMEZCVHl4RFFVRkRMR1ZCUVdVc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGRE5VSXNUMEZCVHl4RFFVRkRMRTlCUVU4c1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGRGNFSXNUMEZCVHl4RFFVRkRMRTFCUVUwc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFhRVU40UWpzN1FVRkZSQ3hqUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEZGQlFWRXNSVUZCUlN4SFFVRkhMRU5CUVVNc1NVRkJTU3hGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzFOQlEzaERPMDlCUTBZN1FVRkRSQ3hWUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMHRCUTJ4Q08wZEJRMFk3TzBGQlJVUXNlVUpCUVhWQ0xFVkJRVVVzYVVOQlFWTXNTMEZCU3l4RlFVRkZMRTlCUVU4c1JVRkJSU3hQUVVGUExFVkJRVVVzVTBGQlV5eEZRVUZGTzBGQlEzQkZMRkZCUVVrc1RVRkJUU3hIUVVGSExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTTdRVUZETVVJc1VVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXpzN1FVRkZlRUlzVVVGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4aFFVRmhMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU03UVVGRGNFTXNVVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhoUVVGaExFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTTdPMEZCUlhCRExGRkJRVWtzUzBGQlN5eERRVUZETEVsQlFVa3NSVUZCUlR0QlFVTmtMRlZCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMHRCUTNwQ0xFMUJRVTA3UVVGRFRDeFZRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRmRCUVZjc1JVRkJSU3hUUVVGVExFTkJRVU1zUTBGQlF6dExRVU55UXpzN1FVRkZSQ3hYUVVGUExFMUJRVTBzUTBGQlF6dEhRVU5tT3p0QlFVVkVMR2xDUVVGbExFVkJRVVVzZVVKQlFWTXNTVUZCU1N4RlFVRkZPMEZCUXpsQ0xGTkJRMFVzU1VGQlNTeExRVUZMTEVkQlFVY3NRMEZCUXl4RlFVRkZMRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEZkQlFWY3NRMEZCUXl4TlFVRk5MRVZCUTNCRUxFdEJRVXNzUjBGQlJ5eEhRVUZITEVWQlExZ3NTMEZCU3l4RlFVRkZMRVZCUTFBN1FVRkRRU3hWUVVGSkxGZEJRVmNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRmRCUVZjc1EwRkJReXhMUVVGTExFTkJRVU03VlVGREwwTXNTMEZCU3l4SFFVRkhMRmRCUVZjc1NVRkJTU3hsUVVGUkxGZEJRVmNzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0QlFVTndSQ3hWUVVGSkxGZEJRVmNzU1VGQlNTeExRVUZMTEVsQlFVa3NRMEZCUXl4RlFVRkZPMEZCUXpkQ0xHVkJRVThzUTBGQlF5eExRVUZMTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1QwRkRka0k3UzBGRFJqdEhRVU5HTzBOQlEwWXNRMEZCUXpzN1FVRkZTeXhUUVVGVExGVkJRVlVzUTBGQlF5eExRVUZMTEVWQlFVVXNUMEZCVHl4RlFVRkZMRWRCUVVjc1JVRkJSVHRCUVVNNVF5eE5RVU5GTEV0QlFVc3NTVUZCU1N4SlFVRkpMRWxCUTFvc1QwRkJUeXhMUVVGTExFdEJRVXNzVVVGQlVTeEpRVUZKTEV0QlFVc3NRMEZCUXl4SlFVRkpMRXRCUVVzc1UwRkJVeXhCUVVGRExFVkJRM1pFTzBGQlEwRXNWVUZCVFN3eVFrRkRTaXhuUmtGQlowWXNSMEZET1VVc1MwRkJTeXhEUVVOU0xFTkJRVU03UjBGRFNEczdRVUZGUkN4VFFVRlBMRWRCUVVjc1QwRkJUeXhKUVVGSkxFVkJRVVVzUTBGQlF6dEJRVU40UWl4TlFVRkpMRVZCUVVVc1RVRkJUU3hKUVVGSkxFOUJRVThzUTBGQlFTeEJRVUZETEVWQlFVVTdRVUZEZUVJc1YwRkJUeXhEUVVGRExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTTdSMEZEY2tJN1FVRkRSQ3hOUVVGSkxFOUJRVThzUTBGQlF5eE5RVUZOTEVWQlFVVTdRVUZEYkVJc1YwRkJUeXhEUVVGRExGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTTdSMEZETVVJN08wRkJSVVFzVFVGQlNTeEhRVUZITEVkQlFVY3NSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhMUVVGTExFVkJRVVVzVDBGQlR5eERRVUZETzAxQlEycERMRmRCUVZjc1IwRkJSeXhKUVVGSkxFZEJRVWNzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZETzBGQlEzcEVMRk5CUVU4c1NVRkJTU3hIUVVGSExFTkJRVU1zYTBKQlFXdENMRVZCUVVVc1EwRkJReXhQUVVGUExFTkJRVU1zVjBGQlZ5eEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRPME5CUTI1Rk96dEJRVVZOTEZOQlFWTXNUMEZCVHl4RFFVRkRMRXRCUVVzc1JVRkJSU3hQUVVGUExFVkJRVThzUjBGQlJ5eEZRVUZGTzAxQlFXNUNMRTlCUVU4c1owSkJRVkFzVDBGQlR5eEhRVUZITEVWQlFVVTdPMEZCUTNwRExFMUJRMFVzUzBGQlN5eEpRVUZKTEVsQlFVa3NTVUZEV2l4UFFVRlBMRXRCUVVzc1MwRkJTeXhSUVVGUkxFbEJRVWtzUzBGQlN5eERRVUZETEVsQlFVa3NTMEZCU3l4VFFVRlRMRUZCUVVNc1JVRkRka1E3UVVGRFFTeFZRVUZOTERKQ1FVTktMRFpGUVVFMlJTeEhRVU16UlN4TFFVRkxMRU5CUTFJc1EwRkJRenRIUVVOSU96dEJRVVZFTEZOQlFVOHNSMEZCUnl4alFVRlBMRVZCUVVVc1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlF6dEJRVU01UWl4TlFVRkpMRVZCUVVVc1RVRkJUU3hKUVVGSkxFOUJRVThzUTBGQlFTeEJRVUZETEVWQlFVVTdRVUZEZUVJc1YwRkJUeXhEUVVGRExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTTdSMEZEY2tJN1FVRkRSQ3hOUVVGSkxFOUJRVThzUTBGQlF5eE5RVUZOTEVWQlFVVTdRVUZEYkVJc1YwRkJUeXhEUVVGRExGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTTdSMEZETVVJN08wRkJSVVFzVFVGQlNTeFJRVUZSTEZsQlFVRXNRMEZCUXpzN1FVRkZZaXhYUVVGVExGbEJRVmtzUjBGQlJ6dEJRVU4wUWl4UlFVRkpMRWRCUVVjc1IwRkJSeXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEV0QlFVc3NSVUZCUlN4UFFVRlBMRU5CUVVNN1VVRkRha01zVjBGQlZ5eEhRVUZITEVsQlFVa3NSMEZCUnl4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRExFOUJRVThzUTBGQlF5eEhRVUZITEVWQlFVVXNUMEZCVHl4RFFVRkRPMUZCUTNSRUxGbEJRVmtzUjBGQlJ5eEpRVUZKTEVkQlFVY3NRMEZCUXl4clFrRkJhMElzUlVGQlJTeERRVUZETEU5QlFVOHNRMEZEYWtRc1YwRkJWeXhGUVVOWUxFOUJRVThzUlVGRFVDeFRRVUZUTEVWQlExUXNTVUZCU1N4RFFVTk1MRU5CUVVNN1FVRkRTaXhYUVVGUExFZEJRVWNzUTBGQlF5eFJRVUZSTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNN1IwRkRia003T3p0QlFVZEVMRmRCUVZNc1IwRkJSeXhEUVVGRExFOUJRVThzUlVGQlJTeFhRVUZYTEVWQlFVVTdRVUZEYWtNc1VVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJUdEJRVU5pTEdOQlFWRXNSMEZCUnl4WlFVRlpMRVZCUVVVc1EwRkJRenRMUVVNelFqdEJRVU5FTEZkQlFVOHNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzVDBGQlR5eEZRVUZGTEZkQlFWY3NRMEZCUXl4RFFVRkRPMGRCUTJ4RU8wRkJRMFFzUzBGQlJ5eERRVUZETEUxQlFVMHNSMEZCUnl4VlFVRlRMRmxCUVZrc1JVRkJSVHRCUVVOc1F5eFJRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZPMEZCUTJJc1kwRkJVU3hIUVVGSExGbEJRVmtzUlVGQlJTeERRVUZETzB0QlF6TkNPMEZCUTBRc1YwRkJUeXhSUVVGUkxFTkJRVU1zVFVGQlRTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRPMGRCUTNSRExFTkJRVU03UVVGRFJpeExRVUZITEVOQlFVTXNUVUZCVFN4SFFVRkhMRlZCUVZNc1EwRkJReXhGUVVGRkxFbEJRVWtzUlVGQlJTeFhRVUZYTEVWQlFVVXNUVUZCVFN4RlFVRkZPMEZCUTJ4RUxGRkJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVTdRVUZEWWl4alFVRlJMRWRCUVVjc1dVRkJXU3hGUVVGRkxFTkJRVU03UzBGRE0wSTdRVUZEUkN4WFFVRlBMRkZCUVZFc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NSVUZCUlN4WFFVRlhMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU03UjBGRGRFUXNRMEZCUXp0QlFVTkdMRk5CUVU4c1IwRkJSeXhEUVVGRE8wTkJRMW83TzBGQlJVUXNVMEZCVXl4VFFVRlRMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJUdEJRVU4yUWl4TlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFVkJRVVU3UVVGRFdDeFhRVUZQTEVsQlFVa3NRMEZCUXp0SFFVTmlPenRCUVVWRUxFMUJRVWtzWlVGQlVTeERRVUZETEVOQlFVTXNTVUZCU1N4bFFVRlJMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eE5RVUZOTEV0QlFVc3NRMEZCUXl4RFFVRkRMRTFCUVUwc1JVRkJSVHRCUVVOeVJDeFRRVUZMTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRCUVVOcVF5eFZRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSVHRCUVVNeFFpeGxRVUZQTEV0QlFVc3NRMEZCUXp0UFFVTmtPMHRCUTBZN1FVRkRSQ3hYUVVGUExFbEJRVWtzUTBGQlF6dEhRVU5pTzBOQlEwWTdPMEZCUlVRc1UwRkJVeXh6UWtGQmMwSXNRMEZCUXl4TFFVRkxMRVZCUVVVN1FVRkRja01zVFVGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRk8wRkJRM0pDTEZGQlFVa3NUMEZCVHl4SFFVRkhMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU03T3p0QlFVZDZRaXhUUVVGTExFTkJRVU1zU1VGQlNTeEhRVUZITzBGQlExZ3NWVUZCU1N4RlFVRkZMR2RDUVVGblFqdEJRVU4wUWl4VlFVRkpMRVZCUVVVc1MwRkJTenRCUVVOWUxGZEJRVXNzUlVGQlJTeERRVUZETzBGQlExSXNWMEZCU3l4RlFVRkZMRU5CUVVNc1QwRkJUeXhEUVVGRExGRkJRVkVzUjBGQlJ5eEZRVUZGTEVOQlFVTTdRVUZET1VJc1kwRkJVU3hGUVVGRkxFOUJRVThzUTBGQlF5eFJRVUZSTEVkQlFVY3NSVUZCUlR0QlFVTXZRaXhUUVVGSExFVkJRVVVzVDBGQlR5eERRVUZETEVkQlFVYzdTMEZEYWtJc1EwRkJRenRIUVVOSU8wTkJRMFlpTENKbWFXeGxJam9pWTI5dGNHbHNaWEl1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaUJsYzJ4cGJuUXRaR2x6WVdKc1pTQnVaWGN0WTJGd0lDb3ZYRzVjYm1sdGNHOXlkQ0JGZUdObGNIUnBiMjRnWm5KdmJTQW5MaTR2WlhoalpYQjBhVzl1Snp0Y2JtbHRjRzl5ZENCN0lHbHpRWEp5WVhrc0lHbHVaR1Y0VDJZc0lHVjRkR1Z1WkNCOUlHWnliMjBnSnk0dUwzVjBhV3h6Snp0Y2JtbHRjRzl5ZENCQlUxUWdabkp2YlNBbkxpOWhjM1FuTzF4dVhHNWpiMjV6ZENCemJHbGpaU0E5SUZ0ZExuTnNhV05sTzF4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1EyOXRjR2xzWlhJb0tTQjdmVnh1WEc0dkx5QjBhR1VnWm05MWJtUklaV3h3WlhJZ2NtVm5hWE4wWlhJZ2QybHNiQ0JrYVhOaGJXSnBaM1ZoZEdVZ2FHVnNjR1Z5SUd4dmIydDFjQ0JtY205dElHWnBibVJwYm1jZ1lWeHVMeThnWm5WdVkzUnBiMjRnYVc0Z1lTQmpiMjUwWlhoMExpQlVhR2x6SUdseklHNWxZMlZ6YzJGeWVTQm1iM0lnYlhWemRHRmphR1VnWTI5dGNHRjBhV0pwYkdsMGVTd2dkMmhwWTJoY2JpOHZJSEpsY1hWcGNtVnpJSFJvWVhRZ1kyOXVkR1Y0ZENCbWRXNWpkR2x2Ym5NZ2FXNGdZbXh2WTJ0eklHRnlaU0JsZG1Gc2RXRjBaV1FnWW5rZ1lteHZZMnRJWld4d1pYSk5hWE56YVc1bkxGeHVMeThnWVc1a0lIUm9aVzRnY0hKdlkyVmxaQ0JoY3lCcFppQjBhR1VnY21WemRXeDBhVzVuSUhaaGJIVmxJSGRoY3lCd2NtOTJhV1JsWkNCMGJ5QmliRzlqYTBobGJIQmxjazFwYzNOcGJtY3VYRzVjYmtOdmJYQnBiR1Z5TG5CeWIzUnZkSGx3WlNBOUlIdGNiaUFnWTI5dGNHbHNaWEk2SUVOdmJYQnBiR1Z5TEZ4dVhHNGdJR1Z4ZFdGc2N6b2dablZ1WTNScGIyNG9iM1JvWlhJcElIdGNiaUFnSUNCc1pYUWdiR1Z1SUQwZ2RHaHBjeTV2Y0dOdlpHVnpMbXhsYm1kMGFEdGNiaUFnSUNCcFppQW9iM1JvWlhJdWIzQmpiMlJsY3k1c1pXNW5kR2dnSVQwOUlHeGxiaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2JHVnVPeUJwS3lzcElIdGNiaUFnSUNBZ0lHeGxkQ0J2Y0dOdlpHVWdQU0IwYUdsekxtOXdZMjlrWlhOYmFWMHNYRzRnSUNBZ0lDQWdJRzkwYUdWeVQzQmpiMlJsSUQwZ2IzUm9aWEl1YjNCamIyUmxjMXRwWFR0Y2JpQWdJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lDQWdiM0JqYjJSbExtOXdZMjlrWlNBaFBUMGdiM1JvWlhKUGNHTnZaR1V1YjNCamIyUmxJSHg4WEc0Z0lDQWdJQ0FnSUNGaGNtZEZjWFZoYkhNb2IzQmpiMlJsTG1GeVozTXNJRzkwYUdWeVQzQmpiMlJsTG1GeVozTXBYRzRnSUNBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklGZGxJR3R1YjNjZ2RHaGhkQ0JzWlc1bmRHZ2dhWE1nZEdobElITmhiV1VnWW1WMGQyVmxiaUIwYUdVZ2RIZHZJR0Z5Y21GNWN5QmlaV05oZFhObElIUm9aWGtnWVhKbElHUnBjbVZqZEd4NUlIUnBaV1JjYmlBZ0lDQXZMeUIwYnlCMGFHVWdiM0JqYjJSbElHSmxhR0YyYVc5eUlHRmliM1psTGx4dUlDQWdJR3hsYmlBOUlIUm9hWE11WTJocGJHUnlaVzR1YkdWdVozUm9PMXh1SUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2diR1Z1T3lCcEt5c3BJSHRjYmlBZ0lDQWdJR2xtSUNnaGRHaHBjeTVqYUdsc1pISmxibHRwWFM1bGNYVmhiSE1vYjNSb1pYSXVZMmhwYkdSeVpXNWJhVjBwS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ2ZTeGNibHh1SUNCbmRXbGtPaUF3TEZ4dVhHNGdJR052YlhCcGJHVTZJR1oxYm1OMGFXOXVLSEJ5YjJkeVlXMHNJRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQjBhR2x6TG5OdmRYSmpaVTV2WkdVZ1BTQmJYVHRjYmlBZ0lDQjBhR2x6TG05d1kyOWtaWE1nUFNCYlhUdGNiaUFnSUNCMGFHbHpMbU5vYVd4a2NtVnVJRDBnVzEwN1hHNGdJQ0FnZEdocGN5NXZjSFJwYjI1eklEMGdiM0IwYVc5dWN6dGNiaUFnSUNCMGFHbHpMbk4wY21sdVoxQmhjbUZ0Y3lBOUlHOXdkR2x2Ym5NdWMzUnlhVzVuVUdGeVlXMXpPMXh1SUNBZ0lIUm9hWE11ZEhKaFkydEpaSE1nUFNCdmNIUnBiMjV6TG5SeVlXTnJTV1J6TzF4dVhHNGdJQ0FnYjNCMGFXOXVjeTVpYkc5amExQmhjbUZ0Y3lBOUlHOXdkR2x2Ym5NdVlteHZZMnRRWVhKaGJYTWdmSHdnVzEwN1hHNWNiaUFnSUNCdmNIUnBiMjV6TG10dWIzZHVTR1ZzY0dWeWN5QTlJR1Y0ZEdWdVpDaGNiaUFnSUNBZ0lFOWlhbVZqZEM1amNtVmhkR1VvYm5Wc2JDa3NYRzRnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJR2hsYkhCbGNrMXBjM05wYm1jNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUdKc2IyTnJTR1ZzY0dWeVRXbHpjMmx1WnpvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnWldGamFEb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ2FXWTZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lIVnViR1Z6Y3pvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnZDJsMGFEb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ2JHOW5PaUIwY25WbExGeHVJQ0FnSUNBZ0lDQnNiMjlyZFhBNklIUnlkV1ZjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0J2Y0hScGIyNXpMbXR1YjNkdVNHVnNjR1Z5YzF4dUlDQWdJQ2s3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1aFkyTmxjSFFvY0hKdlozSmhiU2s3WEc0Z0lIMHNYRzVjYmlBZ1kyOXRjR2xzWlZCeWIyZHlZVzA2SUdaMWJtTjBhVzl1S0hCeWIyZHlZVzBwSUh0Y2JpQWdJQ0JzWlhRZ1kyaHBiR1JEYjIxd2FXeGxjaUE5SUc1bGR5QjBhR2x6TG1OdmJYQnBiR1Z5S0Nrc0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXeHBibVVnYm1WM0xXTmhjRnh1SUNBZ0lDQWdjbVZ6ZFd4MElEMGdZMmhwYkdSRGIyMXdhV3hsY2k1amIyMXdhV3hsS0hCeWIyZHlZVzBzSUhSb2FYTXViM0IwYVc5dWN5a3NYRzRnSUNBZ0lDQm5kV2xrSUQwZ2RHaHBjeTVuZFdsa0t5czdYRzVjYmlBZ0lDQjBhR2x6TG5WelpWQmhjblJwWVd3Z1BTQjBhR2x6TG5WelpWQmhjblJwWVd3Z2ZId2djbVZ6ZFd4MExuVnpaVkJoY25ScFlXdzdYRzVjYmlBZ0lDQjBhR2x6TG1Ob2FXeGtjbVZ1VzJkMWFXUmRJRDBnY21WemRXeDBPMXh1SUNBZ0lIUm9hWE11ZFhObFJHVndkR2h6SUQwZ2RHaHBjeTUxYzJWRVpYQjBhSE1nZkh3Z2NtVnpkV3gwTG5WelpVUmxjSFJvY3p0Y2JseHVJQ0FnSUhKbGRIVnliaUJuZFdsa08xeHVJQ0I5TEZ4dVhHNGdJR0ZqWTJWd2REb2dablZ1WTNScGIyNG9ibTlrWlNrZ2UxeHVJQ0FnSUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCdVpYaDBPaUJUWVc1cGRIa2dZMjlrWlNBcUwxeHVJQ0FnSUdsbUlDZ2hkR2hwYzF0dWIyUmxMblI1Y0dWZEtTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWGhqWlhCMGFXOXVLQ2RWYm10dWIzZHVJSFI1Y0dVNklDY2dLeUJ1YjJSbExuUjVjR1VzSUc1dlpHVXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIUm9hWE11YzI5MWNtTmxUbTlrWlM1MWJuTm9hV1owS0c1dlpHVXBPMXh1SUNBZ0lHeGxkQ0J5WlhRZ1BTQjBhR2x6VzI1dlpHVXVkSGx3WlYwb2JtOWtaU2s3WEc0Z0lDQWdkR2hwY3k1emIzVnlZMlZPYjJSbExuTm9hV1owS0NrN1hHNGdJQ0FnY21WMGRYSnVJSEpsZER0Y2JpQWdmU3hjYmx4dUlDQlFjbTluY21GdE9pQm1kVzVqZEdsdmJpaHdjbTluY21GdEtTQjdYRzRnSUNBZ2RHaHBjeTV2Y0hScGIyNXpMbUpzYjJOclVHRnlZVzF6TG5WdWMyaHBablFvY0hKdlozSmhiUzVpYkc5amExQmhjbUZ0Y3lrN1hHNWNiaUFnSUNCc1pYUWdZbTlrZVNBOUlIQnliMmR5WVcwdVltOWtlU3hjYmlBZ0lDQWdJR0p2WkhsTVpXNW5kR2dnUFNCaWIyUjVMbXhsYm1kMGFEdGNiaUFnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElHSnZaSGxNWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVoWTJObGNIUW9ZbTlrZVZ0cFhTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RHaHBjeTV2Y0hScGIyNXpMbUpzYjJOclVHRnlZVzF6TG5Ob2FXWjBLQ2s3WEc1Y2JpQWdJQ0IwYUdsekxtbHpVMmx0Y0d4bElEMGdZbTlrZVV4bGJtZDBhQ0E5UFQwZ01UdGNiaUFnSUNCMGFHbHpMbUpzYjJOclVHRnlZVzF6SUQwZ2NISnZaM0poYlM1aWJHOWphMUJoY21GdGN5QS9JSEJ5YjJkeVlXMHVZbXh2WTJ0UVlYSmhiWE11YkdWdVozUm9JRG9nTUR0Y2JseHVJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0I5TEZ4dVhHNGdJRUpzYjJOclUzUmhkR1Z0Wlc1ME9pQm1kVzVqZEdsdmJpaGliRzlqYXlrZ2UxeHVJQ0FnSUhSeVlXNXpabTl5YlV4cGRHVnlZV3hVYjFCaGRHZ29ZbXh2WTJzcE8xeHVYRzRnSUNBZ2JHVjBJSEJ5YjJkeVlXMGdQU0JpYkc5amF5NXdjbTluY21GdExGeHVJQ0FnSUNBZ2FXNTJaWEp6WlNBOUlHSnNiMk5yTG1sdWRtVnljMlU3WEc1Y2JpQWdJQ0J3Y205bmNtRnRJRDBnY0hKdlozSmhiU0FtSmlCMGFHbHpMbU52YlhCcGJHVlFjbTluY21GdEtIQnliMmR5WVcwcE8xeHVJQ0FnSUdsdWRtVnljMlVnUFNCcGJuWmxjbk5sSUNZbUlIUm9hWE11WTI5dGNHbHNaVkJ5YjJkeVlXMG9hVzUyWlhKelpTazdYRzVjYmlBZ0lDQnNaWFFnZEhsd1pTQTlJSFJvYVhNdVkyeGhjM05wWm5sVFpYaHdjaWhpYkc5amF5azdYRzVjYmlBZ0lDQnBaaUFvZEhsd1pTQTlQVDBnSjJobGJIQmxjaWNwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVhR1ZzY0dWeVUyVjRjSElvWW14dlkyc3NJSEJ5YjJkeVlXMHNJR2x1ZG1WeWMyVXBPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9kSGx3WlNBOVBUMGdKM05wYlhCc1pTY3BJSHRjYmlBZ0lDQWdJSFJvYVhNdWMybHRjR3hsVTJWNGNISW9ZbXh2WTJzcE8xeHVYRzRnSUNBZ0lDQXZMeUJ1YjNjZ2RHaGhkQ0IwYUdVZ2MybHRjR3hsSUcxMWMzUmhZMmhsSUdseklISmxjMjlzZG1Wa0xDQjNaU0J1WldWa0lIUnZYRzRnSUNBZ0lDQXZMeUJsZG1Gc2RXRjBaU0JwZENCaWVTQmxlR1ZqZFhScGJtY2dZR0pzYjJOclNHVnNjR1Z5VFdsemMybHVaMkJjYmlBZ0lDQWdJSFJvYVhNdWIzQmpiMlJsS0Nkd2RYTm9VSEp2WjNKaGJTY3NJSEJ5YjJkeVlXMHBPMXh1SUNBZ0lDQWdkR2hwY3k1dmNHTnZaR1VvSjNCMWMyaFFjbTluY21GdEp5d2dhVzUyWlhKelpTazdYRzRnSUNBZ0lDQjBhR2x6TG05d1kyOWtaU2duWlcxd2RIbElZWE5vSnlrN1hHNGdJQ0FnSUNCMGFHbHpMbTl3WTI5a1pTZ25ZbXh2WTJ0V1lXeDFaU2NzSUdKc2IyTnJMbkJoZEdndWIzSnBaMmx1WVd3cE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IwYUdsekxtRnRZbWxuZFc5MWMxTmxlSEJ5S0dKc2IyTnJMQ0J3Y205bmNtRnRMQ0JwYm5abGNuTmxLVHRjYmx4dUlDQWdJQ0FnTHk4Z2JtOTNJSFJvWVhRZ2RHaGxJSE5wYlhCc1pTQnRkWE4wWVdOb1pTQnBjeUJ5WlhOdmJIWmxaQ3dnZDJVZ2JtVmxaQ0IwYjF4dUlDQWdJQ0FnTHk4Z1pYWmhiSFZoZEdVZ2FYUWdZbmtnWlhobFkzVjBhVzVuSUdCaWJHOWphMGhsYkhCbGNrMXBjM05wYm1kZ1hHNGdJQ0FnSUNCMGFHbHpMbTl3WTI5a1pTZ25jSFZ6YUZCeWIyZHlZVzBuTENCd2NtOW5jbUZ0S1R0Y2JpQWdJQ0FnSUhSb2FYTXViM0JqYjJSbEtDZHdkWE5vVUhKdlozSmhiU2NzSUdsdWRtVnljMlVwTzF4dUlDQWdJQ0FnZEdocGN5NXZjR052WkdVb0oyVnRjSFI1U0dGemFDY3BPMXh1SUNBZ0lDQWdkR2hwY3k1dmNHTnZaR1VvSjJGdFltbG5kVzkxYzBKc2IyTnJWbUZzZFdVbktUdGNiaUFnSUNCOVhHNWNiaUFnSUNCMGFHbHpMbTl3WTI5a1pTZ25ZWEJ3Wlc1a0p5azdYRzRnSUgwc1hHNWNiaUFnUkdWamIzSmhkRzl5UW14dlkyc29aR1ZqYjNKaGRHOXlLU0I3WEc0Z0lDQWdiR1YwSUhCeWIyZHlZVzBnUFNCa1pXTnZjbUYwYjNJdWNISnZaM0poYlNBbUppQjBhR2x6TG1OdmJYQnBiR1ZRY205bmNtRnRLR1JsWTI5eVlYUnZjaTV3Y205bmNtRnRLVHRjYmlBZ0lDQnNaWFFnY0dGeVlXMXpJRDBnZEdocGN5NXpaWFIxY0VaMWJHeE5kWE4wWVdOb1pWQmhjbUZ0Y3loa1pXTnZjbUYwYjNJc0lIQnliMmR5WVcwc0lIVnVaR1ZtYVc1bFpDa3NYRzRnSUNBZ0lDQndZWFJvSUQwZ1pHVmpiM0poZEc5eUxuQmhkR2c3WEc1Y2JpQWdJQ0IwYUdsekxuVnpaVVJsWTI5eVlYUnZjbk1nUFNCMGNuVmxPMXh1SUNBZ0lIUm9hWE11YjNCamIyUmxLQ2R5WldkcGMzUmxja1JsWTI5eVlYUnZjaWNzSUhCaGNtRnRjeTVzWlc1bmRHZ3NJSEJoZEdndWIzSnBaMmx1WVd3cE8xeHVJQ0I5TEZ4dVhHNGdJRkJoY25ScFlXeFRkR0YwWlcxbGJuUTZJR1oxYm1OMGFXOXVLSEJoY25ScFlXd3BJSHRjYmlBZ0lDQjBhR2x6TG5WelpWQmhjblJwWVd3Z1BTQjBjblZsTzF4dVhHNGdJQ0FnYkdWMElIQnliMmR5WVcwZ1BTQndZWEowYVdGc0xuQnliMmR5WVcwN1hHNGdJQ0FnYVdZZ0tIQnliMmR5WVcwcElIdGNiaUFnSUNBZ0lIQnliMmR5WVcwZ1BTQjBhR2x6TG1OdmJYQnBiR1ZRY205bmNtRnRLSEJoY25ScFlXd3VjSEp2WjNKaGJTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2JHVjBJSEJoY21GdGN5QTlJSEJoY25ScFlXd3VjR0Z5WVcxek8xeHVJQ0FnSUdsbUlDaHdZWEpoYlhNdWJHVnVaM1JvSUQ0Z01Ta2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVY0WTJWd2RHbHZiaWhjYmlBZ0lDQWdJQ0FnSjFWdWMzVndjRzl5ZEdWa0lHNTFiV0psY2lCdlppQndZWEowYVdGc0lHRnlaM1Z0Wlc1MGN6b2dKeUFySUhCaGNtRnRjeTVzWlc1bmRHZ3NYRzRnSUNBZ0lDQWdJSEJoY25ScFlXeGNiaUFnSUNBZ0lDazdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDZ2hjR0Z5WVcxekxteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdWIzQjBhVzl1Y3k1bGVIQnNhV05wZEZCaGNuUnBZV3hEYjI1MFpYaDBLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViM0JqYjJSbEtDZHdkWE5vVEdsMFpYSmhiQ2NzSUNkMWJtUmxabWx1WldRbktUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lIQmhjbUZ0Y3k1d2RYTm9LSHNnZEhsd1pUb2dKMUJoZEdoRmVIQnlaWE56YVc5dUp5d2djR0Z5ZEhNNklGdGRMQ0JrWlhCMGFEb2dNQ0I5S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JzWlhRZ2NHRnlkR2xoYkU1aGJXVWdQU0J3WVhKMGFXRnNMbTVoYldVdWIzSnBaMmx1WVd3c1hHNGdJQ0FnSUNCcGMwUjVibUZ0YVdNZ1BTQndZWEowYVdGc0xtNWhiV1V1ZEhsd1pTQTlQVDBnSjFOMVlrVjRjSEpsYzNOcGIyNG5PMXh1SUNBZ0lHbG1JQ2hwYzBSNWJtRnRhV01wSUh0Y2JpQWdJQ0FnSUhSb2FYTXVZV05qWlhCMEtIQmhjblJwWVd3dWJtRnRaU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkR2hwY3k1elpYUjFjRVoxYkd4TmRYTjBZV05vWlZCaGNtRnRjeWh3WVhKMGFXRnNMQ0J3Y205bmNtRnRMQ0IxYm1SbFptbHVaV1FzSUhSeWRXVXBPMXh1WEc0Z0lDQWdiR1YwSUdsdVpHVnVkQ0E5SUhCaGNuUnBZV3d1YVc1a1pXNTBJSHg4SUNjbk8xeHVJQ0FnSUdsbUlDaDBhR2x6TG05d2RHbHZibk11Y0hKbGRtVnVkRWx1WkdWdWRDQW1KaUJwYm1SbGJuUXBJSHRjYmlBZ0lDQWdJSFJvYVhNdWIzQmpiMlJsS0NkaGNIQmxibVJEYjI1MFpXNTBKeXdnYVc1a1pXNTBLVHRjYmlBZ0lDQWdJR2x1WkdWdWRDQTlJQ2NuTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFJvYVhNdWIzQmpiMlJsS0NkcGJuWnZhMlZRWVhKMGFXRnNKeXdnYVhORWVXNWhiV2xqTENCd1lYSjBhV0ZzVG1GdFpTd2dhVzVrWlc1MEtUdGNiaUFnSUNCMGFHbHpMbTl3WTI5a1pTZ25ZWEJ3Wlc1a0p5azdYRzRnSUgwc1hHNGdJRkJoY25ScFlXeENiRzlqYTFOMFlYUmxiV1Z1ZERvZ1puVnVZM1JwYjI0b2NHRnlkR2xoYkVKc2IyTnJLU0I3WEc0Z0lDQWdkR2hwY3k1UVlYSjBhV0ZzVTNSaGRHVnRaVzUwS0hCaGNuUnBZV3hDYkc5amF5azdYRzRnSUgwc1hHNWNiaUFnVFhWemRHRmphR1ZUZEdGMFpXMWxiblE2SUdaMWJtTjBhVzl1S0cxMWMzUmhZMmhsS1NCN1hHNGdJQ0FnZEdocGN5NVRkV0pGZUhCeVpYTnphVzl1S0cxMWMzUmhZMmhsS1R0Y2JseHVJQ0FnSUdsbUlDaHRkWE4wWVdOb1pTNWxjMk5oY0dWa0lDWW1JQ0YwYUdsekxtOXdkR2x2Ym5NdWJtOUZjMk5oY0dVcElIdGNiaUFnSUNBZ0lIUm9hWE11YjNCamIyUmxLQ2RoY0hCbGJtUkZjMk5oY0dWa0p5azdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhSb2FYTXViM0JqYjJSbEtDZGhjSEJsYm1RbktUdGNiaUFnSUNCOVhHNGdJSDBzWEc0Z0lFUmxZMjl5WVhSdmNpaGtaV052Y21GMGIzSXBJSHRjYmlBZ0lDQjBhR2x6TGtSbFkyOXlZWFJ2Y2tKc2IyTnJLR1JsWTI5eVlYUnZjaWs3WEc0Z0lIMHNYRzVjYmlBZ1EyOXVkR1Z1ZEZOMFlYUmxiV1Z1ZERvZ1puVnVZM1JwYjI0b1kyOXVkR1Z1ZENrZ2UxeHVJQ0FnSUdsbUlDaGpiMjUwWlc1MExuWmhiSFZsS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbTl3WTI5a1pTZ25ZWEJ3Wlc1a1EyOXVkR1Z1ZENjc0lHTnZiblJsYm5RdWRtRnNkV1VwTzF4dUlDQWdJSDFjYmlBZ2ZTeGNibHh1SUNCRGIyMXRaVzUwVTNSaGRHVnRaVzUwT2lCbWRXNWpkR2x2YmlncElIdDlMRnh1WEc0Z0lGTjFZa1Y0Y0hKbGMzTnBiMjQ2SUdaMWJtTjBhVzl1S0hObGVIQnlLU0I3WEc0Z0lDQWdkSEpoYm5ObWIzSnRUR2wwWlhKaGJGUnZVR0YwYUNoelpYaHdjaWs3WEc0Z0lDQWdiR1YwSUhSNWNHVWdQU0IwYUdsekxtTnNZWE56YVdaNVUyVjRjSElvYzJWNGNISXBPMXh1WEc0Z0lDQWdhV1lnS0hSNWNHVWdQVDA5SUNkemFXMXdiR1VuS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbk5wYlhCc1pWTmxlSEJ5S0hObGVIQnlLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFI1Y0dVZ1BUMDlJQ2RvWld4d1pYSW5LU0I3WEc0Z0lDQWdJQ0IwYUdsekxtaGxiSEJsY2xObGVIQnlLSE5sZUhCeUtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnZEdocGN5NWhiV0pwWjNWdmRYTlRaWGh3Y2loelpYaHdjaWs3WEc0Z0lDQWdmVnh1SUNCOUxGeHVJQ0JoYldKcFozVnZkWE5UWlhod2Nqb2dablZ1WTNScGIyNG9jMlY0Y0hJc0lIQnliMmR5WVcwc0lHbHVkbVZ5YzJVcElIdGNiaUFnSUNCc1pYUWdjR0YwYUNBOUlITmxlSEJ5TG5CaGRHZ3NYRzRnSUNBZ0lDQnVZVzFsSUQwZ2NHRjBhQzV3WVhKMGMxc3dYU3hjYmlBZ0lDQWdJR2x6UW14dlkyc2dQU0J3Y205bmNtRnRJQ0U5SUc1MWJHd2dmSHdnYVc1MlpYSnpaU0FoUFNCdWRXeHNPMXh1WEc0Z0lDQWdkR2hwY3k1dmNHTnZaR1VvSjJkbGRFTnZiblJsZUhRbkxDQndZWFJvTG1SbGNIUm9LVHRjYmx4dUlDQWdJSFJvYVhNdWIzQmpiMlJsS0Nkd2RYTm9VSEp2WjNKaGJTY3NJSEJ5YjJkeVlXMHBPMXh1SUNBZ0lIUm9hWE11YjNCamIyUmxLQ2R3ZFhOb1VISnZaM0poYlNjc0lHbHVkbVZ5YzJVcE8xeHVYRzRnSUNBZ2NHRjBhQzV6ZEhKcFkzUWdQU0IwY25WbE8xeHVJQ0FnSUhSb2FYTXVZV05qWlhCMEtIQmhkR2dwTzF4dVhHNGdJQ0FnZEdocGN5NXZjR052WkdVb0oybHVkbTlyWlVGdFltbG5kVzkxY3ljc0lHNWhiV1VzSUdselFteHZZMnNwTzF4dUlDQjlMRnh1WEc0Z0lITnBiWEJzWlZObGVIQnlPaUJtZFc1amRHbHZiaWh6Wlhod2Npa2dlMXh1SUNBZ0lHeGxkQ0J3WVhSb0lEMGdjMlY0Y0hJdWNHRjBhRHRjYmlBZ0lDQndZWFJvTG5OMGNtbGpkQ0E5SUhSeWRXVTdYRzRnSUNBZ2RHaHBjeTVoWTJObGNIUW9jR0YwYUNrN1hHNGdJQ0FnZEdocGN5NXZjR052WkdVb0ozSmxjMjlzZG1WUWIzTnphV0pzWlV4aGJXSmtZU2NwTzF4dUlDQjlMRnh1WEc0Z0lHaGxiSEJsY2xObGVIQnlPaUJtZFc1amRHbHZiaWh6Wlhod2Npd2djSEp2WjNKaGJTd2dhVzUyWlhKelpTa2dlMXh1SUNBZ0lHeGxkQ0J3WVhKaGJYTWdQU0IwYUdsekxuTmxkSFZ3Um5Wc2JFMTFjM1JoWTJobFVHRnlZVzF6S0hObGVIQnlMQ0J3Y205bmNtRnRMQ0JwYm5abGNuTmxLU3hjYmlBZ0lDQWdJSEJoZEdnZ1BTQnpaWGh3Y2k1d1lYUm9MRnh1SUNBZ0lDQWdibUZ0WlNBOUlIQmhkR2d1Y0dGeWRITmJNRjA3WEc1Y2JpQWdJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMbXR1YjNkdVNHVnNjR1Z5YzF0dVlXMWxYU2tnZTF4dUlDQWdJQ0FnZEdocGN5NXZjR052WkdVb0oybHVkbTlyWlV0dWIzZHVTR1ZzY0dWeUp5d2djR0Z5WVcxekxteGxibWQwYUN3Z2JtRnRaU2s3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2gwYUdsekxtOXdkR2x2Ym5NdWEyNXZkMjVJWld4d1pYSnpUMjVzZVNrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVjRZMlZ3ZEdsdmJpaGNiaUFnSUNBZ0lDQWdKMWx2ZFNCemNHVmphV1pwWldRZ2EyNXZkMjVJWld4d1pYSnpUMjVzZVN3Z1luVjBJSFZ6WldRZ2RHaGxJSFZ1YTI1dmQyNGdhR1ZzY0dWeUlDY2dLeUJ1WVcxbExGeHVJQ0FnSUNBZ0lDQnpaWGh3Y2x4dUlDQWdJQ0FnS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdjR0YwYUM1emRISnBZM1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdjR0YwYUM1bVlXeHplU0E5SUhSeWRXVTdYRzVjYmlBZ0lDQWdJSFJvYVhNdVlXTmpaWEIwS0hCaGRHZ3BPMXh1SUNBZ0lDQWdkR2hwY3k1dmNHTnZaR1VvWEc0Z0lDQWdJQ0FnSUNkcGJuWnZhMlZJWld4d1pYSW5MRnh1SUNBZ0lDQWdJQ0J3WVhKaGJYTXViR1Z1WjNSb0xGeHVJQ0FnSUNBZ0lDQndZWFJvTG05eWFXZHBibUZzTEZ4dUlDQWdJQ0FnSUNCQlUxUXVhR1ZzY0dWeWN5NXphVzF3YkdWSlpDaHdZWFJvS1Z4dUlDQWdJQ0FnS1R0Y2JpQWdJQ0I5WEc0Z0lIMHNYRzVjYmlBZ1VHRjBhRVY0Y0hKbGMzTnBiMjQ2SUdaMWJtTjBhVzl1S0hCaGRHZ3BJSHRjYmlBZ0lDQjBhR2x6TG1Ga1pFUmxjSFJvS0hCaGRHZ3VaR1Z3ZEdncE8xeHVJQ0FnSUhSb2FYTXViM0JqYjJSbEtDZG5aWFJEYjI1MFpYaDBKeXdnY0dGMGFDNWtaWEIwYUNrN1hHNWNiaUFnSUNCc1pYUWdibUZ0WlNBOUlIQmhkR2d1Y0dGeWRITmJNRjBzWEc0Z0lDQWdJQ0J6WTI5d1pXUWdQU0JCVTFRdWFHVnNjR1Z5Y3k1elkyOXdaV1JKWkNod1lYUm9LU3hjYmlBZ0lDQWdJR0pzYjJOclVHRnlZVzFKWkNBOUlDRndZWFJvTG1SbGNIUm9JQ1ltSUNGelkyOXdaV1FnSmlZZ2RHaHBjeTVpYkc5amExQmhjbUZ0U1c1a1pYZ29ibUZ0WlNrN1hHNWNiaUFnSUNCcFppQW9ZbXh2WTJ0UVlYSmhiVWxrS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbTl3WTI5a1pTZ25iRzl2YTNWd1FteHZZMnRRWVhKaGJTY3NJR0pzYjJOclVHRnlZVzFKWkN3Z2NHRjBhQzV3WVhKMGN5azdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDZ2hibUZ0WlNrZ2UxeHVJQ0FnSUNBZ0x5OGdRMjl1ZEdWNGRDQnlaV1psY21WdVkyVXNJR2t1WlM0Z1lIdDdabTl2SUM1OWZXQWdiM0lnWUh0N1ptOXZJQzR1ZlgxZ1hHNGdJQ0FnSUNCMGFHbHpMbTl3WTI5a1pTZ25jSFZ6YUVOdmJuUmxlSFFuS1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0hCaGRHZ3VaR0YwWVNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV2Y0hScGIyNXpMbVJoZEdFZ1BTQjBjblZsTzF4dUlDQWdJQ0FnZEdocGN5NXZjR052WkdVb0oyeHZiMnQxY0VSaGRHRW5MQ0J3WVhSb0xtUmxjSFJvTENCd1lYUm9MbkJoY25SekxDQndZWFJvTG5OMGNtbGpkQ2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIUm9hWE11YjNCamIyUmxLRnh1SUNBZ0lDQWdJQ0FuYkc5dmEzVndUMjVEYjI1MFpYaDBKeXhjYmlBZ0lDQWdJQ0FnY0dGMGFDNXdZWEowY3l4Y2JpQWdJQ0FnSUNBZ2NHRjBhQzVtWVd4emVTeGNiaUFnSUNBZ0lDQWdjR0YwYUM1emRISnBZM1FzWEc0Z0lDQWdJQ0FnSUhOamIzQmxaRnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzRnSUgwc1hHNWNiaUFnVTNSeWFXNW5UR2wwWlhKaGJEb2dablZ1WTNScGIyNG9jM1J5YVc1bktTQjdYRzRnSUNBZ2RHaHBjeTV2Y0dOdlpHVW9KM0IxYzJoVGRISnBibWNuTENCemRISnBibWN1ZG1Gc2RXVXBPMXh1SUNCOUxGeHVYRzRnSUU1MWJXSmxja3hwZEdWeVlXdzZJR1oxYm1OMGFXOXVLRzUxYldKbGNpa2dlMXh1SUNBZ0lIUm9hWE11YjNCamIyUmxLQ2R3ZFhOb1RHbDBaWEpoYkNjc0lHNTFiV0psY2k1MllXeDFaU2s3WEc0Z0lIMHNYRzVjYmlBZ1FtOXZiR1ZoYmt4cGRHVnlZV3c2SUdaMWJtTjBhVzl1S0dKdmIyd3BJSHRjYmlBZ0lDQjBhR2x6TG05d1kyOWtaU2duY0hWemFFeHBkR1Z5WVd3bkxDQmliMjlzTG5aaGJIVmxLVHRjYmlBZ2ZTeGNibHh1SUNCVmJtUmxabWx1WldSTWFYUmxjbUZzT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNCMGFHbHpMbTl3WTI5a1pTZ25jSFZ6YUV4cGRHVnlZV3duTENBbmRXNWtaV1pwYm1Wa0p5azdYRzRnSUgwc1hHNWNiaUFnVG5Wc2JFeHBkR1Z5WVd3NklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lIUm9hWE11YjNCamIyUmxLQ2R3ZFhOb1RHbDBaWEpoYkNjc0lDZHVkV3hzSnlrN1hHNGdJSDBzWEc1Y2JpQWdTR0Z6YURvZ1puVnVZM1JwYjI0b2FHRnphQ2tnZTF4dUlDQWdJR3hsZENCd1lXbHljeUE5SUdoaGMyZ3VjR0ZwY25Nc1hHNGdJQ0FnSUNCcElEMGdNQ3hjYmlBZ0lDQWdJR3dnUFNCd1lXbHljeTVzWlc1bmRHZzdYRzVjYmlBZ0lDQjBhR2x6TG05d1kyOWtaU2duY0hWemFFaGhjMmduS1R0Y2JseHVJQ0FnSUdadmNpQW9PeUJwSUR3Z2JEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbkIxYzJoUVlYSmhiU2h3WVdseWMxdHBYUzUyWVd4MVpTazdYRzRnSUNBZ2ZWeHVJQ0FnSUhkb2FXeGxJQ2hwTFMwcElIdGNiaUFnSUNBZ0lIUm9hWE11YjNCamIyUmxLQ2RoYzNOcFoyNVViMGhoYzJnbkxDQndZV2x5YzF0cFhTNXJaWGtwTzF4dUlDQWdJSDFjYmlBZ0lDQjBhR2x6TG05d1kyOWtaU2duY0c5d1NHRnphQ2NwTzF4dUlDQjlMRnh1WEc0Z0lDOHZJRWhGVEZCRlVsTmNiaUFnYjNCamIyUmxPaUJtZFc1amRHbHZiaWh1WVcxbEtTQjdYRzRnSUNBZ2RHaHBjeTV2Y0dOdlpHVnpMbkIxYzJnb2UxeHVJQ0FnSUNBZ2IzQmpiMlJsT2lCdVlXMWxMRnh1SUNBZ0lDQWdZWEpuY3pvZ2MyeHBZMlV1WTJGc2JDaGhjbWQxYldWdWRITXNJREVwTEZ4dUlDQWdJQ0FnYkc5ak9pQjBhR2x6TG5OdmRYSmpaVTV2WkdWYk1GMHViRzlqWEc0Z0lDQWdmU2s3WEc0Z0lIMHNYRzVjYmlBZ1lXUmtSR1Z3ZEdnNklHWjFibU4wYVc5dUtHUmxjSFJvS1NCN1hHNGdJQ0FnYVdZZ0tDRmtaWEIwYUNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmx4dUlDQWdJSFJvYVhNdWRYTmxSR1Z3ZEdoeklEMGdkSEoxWlR0Y2JpQWdmU3hjYmx4dUlDQmpiR0Z6YzJsbWVWTmxlSEJ5T2lCbWRXNWpkR2x2YmloelpYaHdjaWtnZTF4dUlDQWdJR3hsZENCcGMxTnBiWEJzWlNBOUlFRlRWQzVvWld4d1pYSnpMbk5wYlhCc1pVbGtLSE5sZUhCeUxuQmhkR2dwTzF4dVhHNGdJQ0FnYkdWMElHbHpRbXh2WTJ0UVlYSmhiU0E5SUdselUybHRjR3hsSUNZbUlDRWhkR2hwY3k1aWJHOWphMUJoY21GdFNXNWtaWGdvYzJWNGNISXVjR0YwYUM1d1lYSjBjMXN3WFNrN1hHNWNiaUFnSUNBdkx5QmhJRzExYzNSaFkyaGxJR2x6SUdGdUlHVnNhV2RwWW14bElHaGxiSEJsY2lCcFpqcGNiaUFnSUNBdkx5QXFJR2wwY3lCcFpDQnBjeUJ6YVcxd2JHVWdLR0VnYzJsdVoyeGxJSEJoY25Rc0lHNXZkQ0JnZEdocGMyQWdiM0lnWUM0dVlDbGNiaUFnSUNCc1pYUWdhWE5JWld4d1pYSWdQU0FoYVhOQ2JHOWphMUJoY21GdElDWW1JRUZUVkM1b1pXeHdaWEp6TG1obGJIQmxja1Y0Y0hKbGMzTnBiMjRvYzJWNGNISXBPMXh1WEc0Z0lDQWdMeThnYVdZZ1lTQnRkWE4wWVdOb1pTQnBjeUJoYmlCbGJHbG5hV0pzWlNCb1pXeHdaWElnWW5WMElHNXZkQ0JoSUdSbFptbHVhWFJsWEc0Z0lDQWdMeThnYUdWc2NHVnlMQ0JwZENCcGN5QmhiV0pwWjNWdmRYTXNJR0Z1WkNCM2FXeHNJR0psSUhKbGMyOXNkbVZrSUdsdUlHRWdiR0YwWlhKY2JpQWdJQ0F2THlCd1lYTnpJRzl5SUdGMElISjFiblJwYldVdVhHNGdJQ0FnYkdWMElHbHpSV3hwWjJsaWJHVWdQU0FoYVhOQ2JHOWphMUJoY21GdElDWW1JQ2hwYzBobGJIQmxjaUI4ZkNCcGMxTnBiWEJzWlNrN1hHNWNiaUFnSUNBdkx5QnBaaUJoYldKcFozVnZkWE1zSUhkbElHTmhiaUJ3YjNOemFXSnNlU0J5WlhOdmJIWmxJSFJvWlNCaGJXSnBaM1ZwZEhrZ2JtOTNYRzRnSUNBZ0x5OGdRVzRnWld4cFoybGliR1VnYUdWc2NHVnlJR2x6SUc5dVpTQjBhR0YwSUdSdlpYTWdibTkwSUdoaGRtVWdZU0JqYjIxd2JHVjRJSEJoZEdnc0lHa3VaUzRnWUhSb2FYTXVabTl2WUN3Z1lDNHVMMlp2YjJBZ1pYUmpMbHh1SUNBZ0lHbG1JQ2hwYzBWc2FXZHBZbXhsSUNZbUlDRnBjMGhsYkhCbGNpa2dlMXh1SUNBZ0lDQWdiR1YwSUc1aGJXVWdQU0J6Wlhod2NpNXdZWFJvTG5CaGNuUnpXekJkTEZ4dUlDQWdJQ0FnSUNCdmNIUnBiMjV6SUQwZ2RHaHBjeTV2Y0hScGIyNXpPMXh1SUNBZ0lDQWdhV1lnS0c5d2RHbHZibk11YTI1dmQyNUlaV3h3WlhKelcyNWhiV1ZkS1NCN1hHNGdJQ0FnSUNBZ0lHbHpTR1ZzY0dWeUlEMGdkSEoxWlR0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2IzQjBhVzl1Y3k1cmJtOTNia2hsYkhCbGNuTlBibXg1S1NCN1hHNGdJQ0FnSUNBZ0lHbHpSV3hwWjJsaWJHVWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9hWE5JWld4d1pYSXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQW5hR1ZzY0dWeUp6dGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHbHpSV3hwWjJsaWJHVXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQW5ZVzFpYVdkMWIzVnpKenRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUNkemFXMXdiR1VuTzF4dUlDQWdJSDFjYmlBZ2ZTeGNibHh1SUNCd2RYTm9VR0Z5WVcxek9pQm1kVzVqZEdsdmJpaHdZWEpoYlhNcElIdGNiaUFnSUNCbWIzSWdLR3hsZENCcElEMGdNQ3dnYkNBOUlIQmhjbUZ0Y3k1c1pXNW5kR2c3SUdrZ1BDQnNPeUJwS3lzcElIdGNiaUFnSUNBZ0lIUm9hWE11Y0hWemFGQmhjbUZ0S0hCaGNtRnRjMXRwWFNrN1hHNGdJQ0FnZlZ4dUlDQjlMRnh1WEc0Z0lIQjFjMmhRWVhKaGJUb2dablZ1WTNScGIyNG9kbUZzS1NCN1hHNGdJQ0FnYkdWMElIWmhiSFZsSUQwZ2RtRnNMblpoYkhWbElDRTlJRzUxYkd3Z1B5QjJZV3d1ZG1Gc2RXVWdPaUIyWVd3dWIzSnBaMmx1WVd3Z2ZId2dKeWM3WEc1Y2JpQWdJQ0JwWmlBb2RHaHBjeTV6ZEhKcGJtZFFZWEpoYlhNcElIdGNiaUFnSUNBZ0lHbG1JQ2gyWVd4MVpTNXlaWEJzWVdObEtTQjdYRzRnSUNBZ0lDQWdJSFpoYkhWbElEMGdkbUZzZFdVdWNtVndiR0ZqWlNndlhpaGNYQzQvWEZ3dVhGd3ZLU292Wnl3Z0p5Y3BMbkpsY0d4aFkyVW9MMXhjTHk5bkxDQW5MaWNwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCcFppQW9kbUZzTG1SbGNIUm9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZV1JrUkdWd2RHZ29kbUZzTG1SbGNIUm9LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSFJvYVhNdWIzQmpiMlJsS0NkblpYUkRiMjUwWlhoMEp5d2dkbUZzTG1SbGNIUm9JSHg4SURBcE8xeHVJQ0FnSUNBZ2RHaHBjeTV2Y0dOdlpHVW9KM0IxYzJoVGRISnBibWRRWVhKaGJTY3NJSFpoYkhWbExDQjJZV3d1ZEhsd1pTazdYRzVjYmlBZ0lDQWdJR2xtSUNoMllXd3VkSGx3WlNBOVBUMGdKMU4xWWtWNGNISmxjM05wYjI0bktTQjdYRzRnSUNBZ0lDQWdJQzh2SUZOMVlrVjRjSEpsYzNOcGIyNXpJR2RsZENCbGRtRnNkV0YwWldRZ1lXNWtJSEJoYzNObFpDQnBibHh1SUNBZ0lDQWdJQ0F2THlCcGJpQnpkSEpwYm1jZ2NHRnlZVzF6SUcxdlpHVXVYRzRnSUNBZ0lDQWdJSFJvYVhNdVlXTmpaWEIwS0haaGJDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TG5SeVlXTnJTV1J6S1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JpYkc5amExQmhjbUZ0U1c1a1pYZzdYRzRnSUNBZ0lDQWdJR2xtSUNoMllXd3VjR0Z5ZEhNZ0ppWWdJVUZUVkM1b1pXeHdaWEp6TG5OamIzQmxaRWxrS0haaGJDa2dKaVlnSVhaaGJDNWtaWEIwYUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR0pzYjJOclVHRnlZVzFKYm1SbGVDQTlJSFJvYVhNdVlteHZZMnRRWVhKaGJVbHVaR1Y0S0haaGJDNXdZWEowYzFzd1hTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tHSnNiMk5yVUdGeVlXMUpibVJsZUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR3hsZENCaWJHOWphMUJoY21GdFEyaHBiR1FnUFNCMllXd3VjR0Z5ZEhNdWMyeHBZMlVvTVNrdWFtOXBiaWduTGljcE8xeHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIzQmpiMlJsS0Nkd2RYTm9TV1FuTENBblFteHZZMnRRWVhKaGJTY3NJR0pzYjJOclVHRnlZVzFKYm1SbGVDd2dZbXh2WTJ0UVlYSmhiVU5vYVd4a0tUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0IyWVd4MVpTQTlJSFpoYkM1dmNtbG5hVzVoYkNCOGZDQjJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvZG1Gc2RXVXVjbVZ3YkdGalpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1VnUFNCMllXeDFaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXVjbVZ3YkdGalpTZ3ZYblJvYVhNb1B6cGNYQzU4SkNrdkxDQW5KeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdMbkpsY0d4aFkyVW9MMTVjWEM1Y1hDOHZMQ0FuSnlsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTG5KbGNHeGhZMlVvTDE1Y1hDNGtMeXdnSnljcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11YjNCamIyUmxLQ2R3ZFhOb1NXUW5MQ0IyWVd3dWRIbHdaU3dnZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0IwYUdsekxtRmpZMlZ3ZENoMllXd3BPMXh1SUNBZ0lIMWNiaUFnZlN4Y2JseHVJQ0J6WlhSMWNFWjFiR3hOZFhOMFlXTm9aVkJoY21GdGN6b2dablZ1WTNScGIyNG9jMlY0Y0hJc0lIQnliMmR5WVcwc0lHbHVkbVZ5YzJVc0lHOXRhWFJGYlhCMGVTa2dlMXh1SUNBZ0lHeGxkQ0J3WVhKaGJYTWdQU0J6Wlhod2NpNXdZWEpoYlhNN1hHNGdJQ0FnZEdocGN5NXdkWE5vVUdGeVlXMXpLSEJoY21GdGN5azdYRzVjYmlBZ0lDQjBhR2x6TG05d1kyOWtaU2duY0hWemFGQnliMmR5WVcwbkxDQndjbTluY21GdEtUdGNiaUFnSUNCMGFHbHpMbTl3WTI5a1pTZ25jSFZ6YUZCeWIyZHlZVzBuTENCcGJuWmxjbk5sS1R0Y2JseHVJQ0FnSUdsbUlDaHpaWGh3Y2k1b1lYTm9LU0I3WEc0Z0lDQWdJQ0IwYUdsekxtRmpZMlZ3ZENoelpYaHdjaTVvWVhOb0tUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnZEdocGN5NXZjR052WkdVb0oyVnRjSFI1U0dGemFDY3NJRzl0YVhSRmJYQjBlU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlIQmhjbUZ0Y3p0Y2JpQWdmU3hjYmx4dUlDQmliRzlqYTFCaGNtRnRTVzVrWlhnNklHWjFibU4wYVc5dUtHNWhiV1VwSUh0Y2JpQWdJQ0JtYjNJZ0tGeHVJQ0FnSUNBZ2JHVjBJR1JsY0hSb0lEMGdNQ3dnYkdWdUlEMGdkR2hwY3k1dmNIUnBiMjV6TG1Kc2IyTnJVR0Z5WVcxekxteGxibWQwYUR0Y2JpQWdJQ0FnSUdSbGNIUm9JRHdnYkdWdU8xeHVJQ0FnSUNBZ1pHVndkR2dySzF4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnYkdWMElHSnNiMk5yVUdGeVlXMXpJRDBnZEdocGN5NXZjSFJwYjI1ekxtSnNiMk5yVUdGeVlXMXpXMlJsY0hSb1hTeGNiaUFnSUNBZ0lDQWdjR0Z5WVcwZ1BTQmliRzlqYTFCaGNtRnRjeUFtSmlCcGJtUmxlRTltS0dKc2IyTnJVR0Z5WVcxekxDQnVZVzFsS1R0Y2JpQWdJQ0FnSUdsbUlDaGliRzlqYTFCaGNtRnRjeUFtSmlCd1lYSmhiU0ErUFNBd0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmJaR1Z3ZEdnc0lIQmhjbUZ0WFR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNibjA3WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCd2NtVmpiMjF3YVd4bEtHbHVjSFYwTENCdmNIUnBiMjV6TENCbGJuWXBJSHRjYmlBZ2FXWWdLRnh1SUNBZ0lHbHVjSFYwSUQwOUlHNTFiR3dnZkh4Y2JpQWdJQ0FvZEhsd1pXOW1JR2x1Y0hWMElDRTlQU0FuYzNSeWFXNW5KeUFtSmlCcGJuQjFkQzUwZVhCbElDRTlQU0FuVUhKdlozSmhiU2NwWEc0Z0lDa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZlR05sY0hScGIyNG9YRzRnSUNBZ0lDQW5XVzkxSUcxMWMzUWdjR0Z6Y3lCaElITjBjbWx1WnlCdmNpQklZVzVrYkdWaVlYSnpJRUZUVkNCMGJ5QklZVzVrYkdWaVlYSnpMbkJ5WldOdmJYQnBiR1V1SUZsdmRTQndZWE56WldRZ0p5QXJYRzRnSUNBZ0lDQWdJR2x1Y0hWMFhHNGdJQ0FnS1R0Y2JpQWdmVnh1WEc0Z0lHOXdkR2x2Ym5NZ1BTQnZjSFJwYjI1eklIeDhJSHQ5TzF4dUlDQnBaaUFvSVNnblpHRjBZU2NnYVc0Z2IzQjBhVzl1Y3lrcElIdGNiaUFnSUNCdmNIUnBiMjV6TG1SaGRHRWdQU0IwY25WbE8xeHVJQ0I5WEc0Z0lHbG1JQ2h2Y0hScGIyNXpMbU52YlhCaGRDa2dlMXh1SUNBZ0lHOXdkR2x2Ym5NdWRYTmxSR1Z3ZEdoeklEMGdkSEoxWlR0Y2JpQWdmVnh1WEc0Z0lHeGxkQ0JoYzNRZ1BTQmxibll1Y0dGeWMyVW9hVzV3ZFhRc0lHOXdkR2x2Ym5NcExGeHVJQ0FnSUdWdWRtbHliMjV0Wlc1MElEMGdibVYzSUdWdWRpNURiMjF3YVd4bGNpZ3BMbU52YlhCcGJHVW9ZWE4wTENCdmNIUnBiMjV6S1R0Y2JpQWdjbVYwZFhKdUlHNWxkeUJsYm5ZdVNtRjJZVk5qY21sd2RFTnZiWEJwYkdWeUtDa3VZMjl0Y0dsc1pTaGxiblpwY205dWJXVnVkQ3dnYjNCMGFXOXVjeWs3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmpiMjF3YVd4bEtHbHVjSFYwTENCdmNIUnBiMjV6SUQwZ2UzMHNJR1Z1ZGlrZ2UxeHVJQ0JwWmlBb1hHNGdJQ0FnYVc1d2RYUWdQVDBnYm5Wc2JDQjhmRnh1SUNBZ0lDaDBlWEJsYjJZZ2FXNXdkWFFnSVQwOUlDZHpkSEpwYm1jbklDWW1JR2x1Y0hWMExuUjVjR1VnSVQwOUlDZFFjbTluY21GdEp5bGNiaUFnS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUVWNFkyVndkR2x2YmloY2JpQWdJQ0FnSUNkWmIzVWdiWFZ6ZENCd1lYTnpJR0VnYzNSeWFXNW5JRzl5SUVoaGJtUnNaV0poY25NZ1FWTlVJSFJ2SUVoaGJtUnNaV0poY25NdVkyOXRjR2xzWlM0Z1dXOTFJSEJoYzNObFpDQW5JQ3RjYmlBZ0lDQWdJQ0FnYVc1d2RYUmNiaUFnSUNBcE8xeHVJQ0I5WEc1Y2JpQWdiM0IwYVc5dWN5QTlJR1Y0ZEdWdVpDaDdmU3dnYjNCMGFXOXVjeWs3WEc0Z0lHbG1JQ2doS0Nka1lYUmhKeUJwYmlCdmNIUnBiMjV6S1NrZ2UxeHVJQ0FnSUc5d2RHbHZibk11WkdGMFlTQTlJSFJ5ZFdVN1hHNGdJSDFjYmlBZ2FXWWdLRzl3ZEdsdmJuTXVZMjl0Y0dGMEtTQjdYRzRnSUNBZ2IzQjBhVzl1Y3k1MWMyVkVaWEIwYUhNZ1BTQjBjblZsTzF4dUlDQjlYRzVjYmlBZ2JHVjBJR052YlhCcGJHVmtPMXh1WEc0Z0lHWjFibU4wYVc5dUlHTnZiWEJwYkdWSmJuQjFkQ2dwSUh0Y2JpQWdJQ0JzWlhRZ1lYTjBJRDBnWlc1MkxuQmhjbk5sS0dsdWNIVjBMQ0J2Y0hScGIyNXpLU3hjYmlBZ0lDQWdJR1Z1ZG1seWIyNXRaVzUwSUQwZ2JtVjNJR1Z1ZGk1RGIyMXdhV3hsY2lncExtTnZiWEJwYkdVb1lYTjBMQ0J2Y0hScGIyNXpLU3hjYmlBZ0lDQWdJSFJsYlhCc1lYUmxVM0JsWXlBOUlHNWxkeUJsYm5ZdVNtRjJZVk5qY21sd2RFTnZiWEJwYkdWeUtDa3VZMjl0Y0dsc1pTaGNiaUFnSUNBZ0lDQWdaVzUyYVhKdmJtMWxiblFzWEc0Z0lDQWdJQ0FnSUc5d2RHbHZibk1zWEc0Z0lDQWdJQ0FnSUhWdVpHVm1hVzVsWkN4Y2JpQWdJQ0FnSUNBZ2RISjFaVnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQnlaWFIxY200Z1pXNTJMblJsYlhCc1lYUmxLSFJsYlhCc1lYUmxVM0JsWXlrN1hHNGdJSDFjYmx4dUlDQXZMeUJVWlcxd2JHRjBaU0JwY3lCdmJteDVJR052YlhCcGJHVmtJRzl1SUdacGNuTjBJSFZ6WlNCaGJtUWdZMkZqYUdWa0lHRm1kR1Z5SUhSb1lYUWdjRzlwYm5RdVhHNGdJR1oxYm1OMGFXOXVJSEpsZENoamIyNTBaWGgwTENCbGVHVmpUM0IwYVc5dWN5a2dlMXh1SUNBZ0lHbG1JQ2doWTI5dGNHbHNaV1FwSUh0Y2JpQWdJQ0FnSUdOdmJYQnBiR1ZrSUQwZ1kyOXRjR2xzWlVsdWNIVjBLQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCamIyMXdhV3hsWkM1allXeHNLSFJvYVhNc0lHTnZiblJsZUhRc0lHVjRaV05QY0hScGIyNXpLVHRjYmlBZ2ZWeHVJQ0J5WlhRdVgzTmxkSFZ3SUQwZ1puVnVZM1JwYjI0b2MyVjBkWEJQY0hScGIyNXpLU0I3WEc0Z0lDQWdhV1lnS0NGamIyMXdhV3hsWkNrZ2UxeHVJQ0FnSUNBZ1kyOXRjR2xzWldRZ1BTQmpiMjF3YVd4bFNXNXdkWFFvS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHTnZiWEJwYkdWa0xsOXpaWFIxY0NoelpYUjFjRTl3ZEdsdmJuTXBPMXh1SUNCOU8xeHVJQ0J5WlhRdVgyTm9hV3hrSUQwZ1puVnVZM1JwYjI0b2FTd2daR0YwWVN3Z1lteHZZMnRRWVhKaGJYTXNJR1JsY0hSb2N5a2dlMXh1SUNBZ0lHbG1JQ2doWTI5dGNHbHNaV1FwSUh0Y2JpQWdJQ0FnSUdOdmJYQnBiR1ZrSUQwZ1kyOXRjR2xzWlVsdWNIVjBLQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCamIyMXdhV3hsWkM1ZlkyaHBiR1FvYVN3Z1pHRjBZU3dnWW14dlkydFFZWEpoYlhNc0lHUmxjSFJvY3lrN1hHNGdJSDA3WEc0Z0lISmxkSFZ5YmlCeVpYUTdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHRnlaMFZ4ZFdGc2N5aGhMQ0JpS1NCN1hHNGdJR2xtSUNoaElEMDlQU0JpS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJSDFjYmx4dUlDQnBaaUFvYVhOQmNuSmhlU2hoS1NBbUppQnBjMEZ5Y21GNUtHSXBJQ1ltSUdFdWJHVnVaM1JvSUQwOVBTQmlMbXhsYm1kMGFDa2dlMXh1SUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dZUzVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2FXWWdLQ0ZoY21kRmNYVmhiSE1vWVZ0cFhTd2dZbHRwWFNrcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCMGNtRnVjMlp2Y20xTWFYUmxjbUZzVkc5UVlYUm9LSE5sZUhCeUtTQjdYRzRnSUdsbUlDZ2hjMlY0Y0hJdWNHRjBhQzV3WVhKMGN5a2dlMXh1SUNBZ0lHeGxkQ0JzYVhSbGNtRnNJRDBnYzJWNGNISXVjR0YwYUR0Y2JpQWdJQ0F2THlCRFlYTjBhVzVuSUhSdklITjBjbWx1WnlCb1pYSmxJSFJ2SUcxaGEyVWdabUZzYzJVZ1lXNWtJREFnYkdsMFpYSmhiQ0IyWVd4MVpYTWdjR3hoZVNCdWFXTmxiSGtnZDJsMGFDQjBhR1VnY21WemRGeHVJQ0FnSUM4dklHOW1JSFJvWlNCemVYTjBaVzB1WEc0Z0lDQWdjMlY0Y0hJdWNHRjBhQ0E5SUh0Y2JpQWdJQ0FnSUhSNWNHVTZJQ2RRWVhSb1JYaHdjbVZ6YzJsdmJpY3NYRzRnSUNBZ0lDQmtZWFJoT2lCbVlXeHpaU3hjYmlBZ0lDQWdJR1JsY0hSb09pQXdMRnh1SUNBZ0lDQWdjR0Z5ZEhNNklGdHNhWFJsY21Gc0xtOXlhV2RwYm1Gc0lDc2dKeWRkTEZ4dUlDQWdJQ0FnYjNKcFoybHVZV3c2SUd4cGRHVnlZV3d1YjNKcFoybHVZV3dnS3lBbkp5eGNiaUFnSUNBZ0lHeHZZem9nYkdsMFpYSmhiQzVzYjJOY2JpQWdJQ0I5TzF4dUlDQjlYRzU5WEc0aVhYMD1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuU291cmNlTG9jYXRpb24gPSBTb3VyY2VMb2NhdGlvbjtcbmV4cG9ydHMuaWQgPSBpZDtcbmV4cG9ydHMuc3RyaXBGbGFncyA9IHN0cmlwRmxhZ3M7XG5leHBvcnRzLnN0cmlwQ29tbWVudCA9IHN0cmlwQ29tbWVudDtcbmV4cG9ydHMucHJlcGFyZVBhdGggPSBwcmVwYXJlUGF0aDtcbmV4cG9ydHMucHJlcGFyZU11c3RhY2hlID0gcHJlcGFyZU11c3RhY2hlO1xuZXhwb3J0cy5wcmVwYXJlUmF3QmxvY2sgPSBwcmVwYXJlUmF3QmxvY2s7XG5leHBvcnRzLnByZXBhcmVCbG9jayA9IHByZXBhcmVCbG9jaztcbmV4cG9ydHMucHJlcGFyZVByb2dyYW0gPSBwcmVwYXJlUHJvZ3JhbTtcbmV4cG9ydHMucHJlcGFyZVBhcnRpYWxCbG9jayA9IHByZXBhcmVQYXJ0aWFsQmxvY2s7XG4vLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfZXhjZXB0aW9uID0gcmVxdWlyZSgnLi4vZXhjZXB0aW9uJyk7XG5cbnZhciBfZXhjZXB0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4Y2VwdGlvbik7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQ2xvc2Uob3BlbiwgY2xvc2UpIHtcbiAgY2xvc2UgPSBjbG9zZS5wYXRoID8gY2xvc2UucGF0aC5vcmlnaW5hbCA6IGNsb3NlO1xuXG4gIGlmIChvcGVuLnBhdGgub3JpZ2luYWwgIT09IGNsb3NlKSB7XG4gICAgdmFyIGVycm9yTm9kZSA9IHsgbG9jOiBvcGVuLnBhdGgubG9jIH07XG5cbiAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXShvcGVuLnBhdGgub3JpZ2luYWwgKyBcIiBkb2Vzbid0IG1hdGNoIFwiICsgY2xvc2UsIGVycm9yTm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gU291cmNlTG9jYXRpb24oc291cmNlLCBsb2NJbmZvKSB7XG4gIHRoaXMuc291cmNlID0gc291cmNlO1xuICB0aGlzLnN0YXJ0ID0ge1xuICAgIGxpbmU6IGxvY0luZm8uZmlyc3RfbGluZSxcbiAgICBjb2x1bW46IGxvY0luZm8uZmlyc3RfY29sdW1uXG4gIH07XG4gIHRoaXMuZW5kID0ge1xuICAgIGxpbmU6IGxvY0luZm8ubGFzdF9saW5lLFxuICAgIGNvbHVtbjogbG9jSW5mby5sYXN0X2NvbHVtblxuICB9O1xufVxuXG5mdW5jdGlvbiBpZCh0b2tlbikge1xuICBpZiAoL15cXFsuKlxcXSQvLnRlc3QodG9rZW4pKSB7XG4gICAgcmV0dXJuIHRva2VuLnN1YnN0cmluZygxLCB0b2tlbi5sZW5ndGggLSAxKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdG9rZW47XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RyaXBGbGFncyhvcGVuLCBjbG9zZSkge1xuICByZXR1cm4ge1xuICAgIG9wZW46IG9wZW4uY2hhckF0KDIpID09PSAnficsXG4gICAgY2xvc2U6IGNsb3NlLmNoYXJBdChjbG9zZS5sZW5ndGggLSAzKSA9PT0gJ34nXG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmlwQ29tbWVudChjb21tZW50KSB7XG4gIHJldHVybiBjb21tZW50LnJlcGxhY2UoL15cXHtcXHt+PyEtPy0/LywgJycpLnJlcGxhY2UoLy0/LT9+P1xcfVxcfSQvLCAnJyk7XG59XG5cbmZ1bmN0aW9uIHByZXBhcmVQYXRoKGRhdGEsIHBhcnRzLCBsb2MpIHtcbiAgbG9jID0gdGhpcy5sb2NJbmZvKGxvYyk7XG5cbiAgdmFyIG9yaWdpbmFsID0gZGF0YSA/ICdAJyA6ICcnLFxuICAgICAgZGlnID0gW10sXG4gICAgICBkZXB0aCA9IDA7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYXJ0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgcGFydCA9IHBhcnRzW2ldLnBhcnQsXG5cbiAgICAvLyBJZiB3ZSBoYXZlIFtdIHN5bnRheCB0aGVuIHdlIGRvIG5vdCB0cmVhdCBwYXRoIHJlZmVyZW5jZXMgYXMgb3BlcmF0b3JzLFxuICAgIC8vIGkuZS4gZm9vLlt0aGlzXSByZXNvbHZlcyB0byBhcHByb3hpbWF0ZWx5IGNvbnRleHQuZm9vWyd0aGlzJ11cbiAgICBpc0xpdGVyYWwgPSBwYXJ0c1tpXS5vcmlnaW5hbCAhPT0gcGFydDtcbiAgICBvcmlnaW5hbCArPSAocGFydHNbaV0uc2VwYXJhdG9yIHx8ICcnKSArIHBhcnQ7XG5cbiAgICBpZiAoIWlzTGl0ZXJhbCAmJiAocGFydCA9PT0gJy4uJyB8fCBwYXJ0ID09PSAnLicgfHwgcGFydCA9PT0gJ3RoaXMnKSkge1xuICAgICAgaWYgKGRpZy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdJbnZhbGlkIHBhdGg6ICcgKyBvcmlnaW5hbCwgeyBsb2M6IGxvYyB9KTtcbiAgICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgICBkZXB0aCsrO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkaWcucHVzaChwYXJ0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHR5cGU6ICdQYXRoRXhwcmVzc2lvbicsXG4gICAgZGF0YTogZGF0YSxcbiAgICBkZXB0aDogZGVwdGgsXG4gICAgcGFydHM6IGRpZyxcbiAgICBvcmlnaW5hbDogb3JpZ2luYWwsXG4gICAgbG9jOiBsb2NcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJlcGFyZU11c3RhY2hlKHBhdGgsIHBhcmFtcywgaGFzaCwgb3Blbiwgc3RyaXAsIGxvY0luZm8pIHtcbiAgLy8gTXVzdCB1c2UgY2hhckF0IHRvIHN1cHBvcnQgSUUgcHJlLTEwXG4gIHZhciBlc2NhcGVGbGFnID0gb3Blbi5jaGFyQXQoMykgfHwgb3Blbi5jaGFyQXQoMiksXG4gICAgICBlc2NhcGVkID0gZXNjYXBlRmxhZyAhPT0gJ3snICYmIGVzY2FwZUZsYWcgIT09ICcmJztcblxuICB2YXIgZGVjb3JhdG9yID0gL1xcKi8udGVzdChvcGVuKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBkZWNvcmF0b3IgPyAnRGVjb3JhdG9yJyA6ICdNdXN0YWNoZVN0YXRlbWVudCcsXG4gICAgcGF0aDogcGF0aCxcbiAgICBwYXJhbXM6IHBhcmFtcyxcbiAgICBoYXNoOiBoYXNoLFxuICAgIGVzY2FwZWQ6IGVzY2FwZWQsXG4gICAgc3RyaXA6IHN0cmlwLFxuICAgIGxvYzogdGhpcy5sb2NJbmZvKGxvY0luZm8pXG4gIH07XG59XG5cbmZ1bmN0aW9uIHByZXBhcmVSYXdCbG9jayhvcGVuUmF3QmxvY2ssIGNvbnRlbnRzLCBjbG9zZSwgbG9jSW5mbykge1xuICB2YWxpZGF0ZUNsb3NlKG9wZW5SYXdCbG9jaywgY2xvc2UpO1xuXG4gIGxvY0luZm8gPSB0aGlzLmxvY0luZm8obG9jSW5mbyk7XG4gIHZhciBwcm9ncmFtID0ge1xuICAgIHR5cGU6ICdQcm9ncmFtJyxcbiAgICBib2R5OiBjb250ZW50cyxcbiAgICBzdHJpcDoge30sXG4gICAgbG9jOiBsb2NJbmZvXG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQmxvY2tTdGF0ZW1lbnQnLFxuICAgIHBhdGg6IG9wZW5SYXdCbG9jay5wYXRoLFxuICAgIHBhcmFtczogb3BlblJhd0Jsb2NrLnBhcmFtcyxcbiAgICBoYXNoOiBvcGVuUmF3QmxvY2suaGFzaCxcbiAgICBwcm9ncmFtOiBwcm9ncmFtLFxuICAgIG9wZW5TdHJpcDoge30sXG4gICAgaW52ZXJzZVN0cmlwOiB7fSxcbiAgICBjbG9zZVN0cmlwOiB7fSxcbiAgICBsb2M6IGxvY0luZm9cbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJlcGFyZUJsb2NrKG9wZW5CbG9jaywgcHJvZ3JhbSwgaW52ZXJzZUFuZFByb2dyYW0sIGNsb3NlLCBpbnZlcnRlZCwgbG9jSW5mbykge1xuICBpZiAoY2xvc2UgJiYgY2xvc2UucGF0aCkge1xuICAgIHZhbGlkYXRlQ2xvc2Uob3BlbkJsb2NrLCBjbG9zZSk7XG4gIH1cblxuICB2YXIgZGVjb3JhdG9yID0gL1xcKi8udGVzdChvcGVuQmxvY2sub3Blbik7XG5cbiAgcHJvZ3JhbS5ibG9ja1BhcmFtcyA9IG9wZW5CbG9jay5ibG9ja1BhcmFtcztcblxuICB2YXIgaW52ZXJzZSA9IHVuZGVmaW5lZCxcbiAgICAgIGludmVyc2VTdHJpcCA9IHVuZGVmaW5lZDtcblxuICBpZiAoaW52ZXJzZUFuZFByb2dyYW0pIHtcbiAgICBpZiAoZGVjb3JhdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnVW5leHBlY3RlZCBpbnZlcnNlIGJsb2NrIG9uIGRlY29yYXRvcicsIGludmVyc2VBbmRQcm9ncmFtKTtcbiAgICB9XG5cbiAgICBpZiAoaW52ZXJzZUFuZFByb2dyYW0uY2hhaW4pIHtcbiAgICAgIGludmVyc2VBbmRQcm9ncmFtLnByb2dyYW0uYm9keVswXS5jbG9zZVN0cmlwID0gY2xvc2Uuc3RyaXA7XG4gICAgfVxuXG4gICAgaW52ZXJzZVN0cmlwID0gaW52ZXJzZUFuZFByb2dyYW0uc3RyaXA7XG4gICAgaW52ZXJzZSA9IGludmVyc2VBbmRQcm9ncmFtLnByb2dyYW07XG4gIH1cblxuICBpZiAoaW52ZXJ0ZWQpIHtcbiAgICBpbnZlcnRlZCA9IGludmVyc2U7XG4gICAgaW52ZXJzZSA9IHByb2dyYW07XG4gICAgcHJvZ3JhbSA9IGludmVydGVkO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBkZWNvcmF0b3IgPyAnRGVjb3JhdG9yQmxvY2snIDogJ0Jsb2NrU3RhdGVtZW50JyxcbiAgICBwYXRoOiBvcGVuQmxvY2sucGF0aCxcbiAgICBwYXJhbXM6IG9wZW5CbG9jay5wYXJhbXMsXG4gICAgaGFzaDogb3BlbkJsb2NrLmhhc2gsXG4gICAgcHJvZ3JhbTogcHJvZ3JhbSxcbiAgICBpbnZlcnNlOiBpbnZlcnNlLFxuICAgIG9wZW5TdHJpcDogb3BlbkJsb2NrLnN0cmlwLFxuICAgIGludmVyc2VTdHJpcDogaW52ZXJzZVN0cmlwLFxuICAgIGNsb3NlU3RyaXA6IGNsb3NlICYmIGNsb3NlLnN0cmlwLFxuICAgIGxvYzogdGhpcy5sb2NJbmZvKGxvY0luZm8pXG4gIH07XG59XG5cbmZ1bmN0aW9uIHByZXBhcmVQcm9ncmFtKHN0YXRlbWVudHMsIGxvYykge1xuICBpZiAoIWxvYyAmJiBzdGF0ZW1lbnRzLmxlbmd0aCkge1xuICAgIHZhciBmaXJzdExvYyA9IHN0YXRlbWVudHNbMF0ubG9jLFxuICAgICAgICBsYXN0TG9jID0gc3RhdGVtZW50c1tzdGF0ZW1lbnRzLmxlbmd0aCAtIDFdLmxvYztcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKGZpcnN0TG9jICYmIGxhc3RMb2MpIHtcbiAgICAgIGxvYyA9IHtcbiAgICAgICAgc291cmNlOiBmaXJzdExvYy5zb3VyY2UsXG4gICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgbGluZTogZmlyc3RMb2Muc3RhcnQubGluZSxcbiAgICAgICAgICBjb2x1bW46IGZpcnN0TG9jLnN0YXJ0LmNvbHVtblxuICAgICAgICB9LFxuICAgICAgICBlbmQ6IHtcbiAgICAgICAgICBsaW5lOiBsYXN0TG9jLmVuZC5saW5lLFxuICAgICAgICAgIGNvbHVtbjogbGFzdExvYy5lbmQuY29sdW1uXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnUHJvZ3JhbScsXG4gICAgYm9keTogc3RhdGVtZW50cyxcbiAgICBzdHJpcDoge30sXG4gICAgbG9jOiBsb2NcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJlcGFyZVBhcnRpYWxCbG9jayhvcGVuLCBwcm9ncmFtLCBjbG9zZSwgbG9jSW5mbykge1xuICB2YWxpZGF0ZUNsb3NlKG9wZW4sIGNsb3NlKTtcblxuICByZXR1cm4ge1xuICAgIHR5cGU6ICdQYXJ0aWFsQmxvY2tTdGF0ZW1lbnQnLFxuICAgIG5hbWU6IG9wZW4ucGF0aCxcbiAgICBwYXJhbXM6IG9wZW4ucGFyYW1zLFxuICAgIGhhc2g6IG9wZW4uaGFzaCxcbiAgICBwcm9ncmFtOiBwcm9ncmFtLFxuICAgIG9wZW5TdHJpcDogb3Blbi5zdHJpcCxcbiAgICBjbG9zZVN0cmlwOiBjbG9zZSAmJiBjbG9zZS5zdHJpcCxcbiAgICBsb2M6IHRoaXMubG9jSW5mbyhsb2NJbmZvKVxuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDJOdmJYQnBiR1Z5TDJobGJIQmxjbk11YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3pzN096czdPenM3ZVVKQlFYTkNMR05CUVdNN096czdRVUZGY0VNc1UwRkJVeXhoUVVGaExFTkJRVU1zU1VGQlNTeEZRVUZGTEV0QlFVc3NSVUZCUlR0QlFVTnNReXhQUVVGTExFZEJRVWNzUzBGQlN5eERRVUZETEVsQlFVa3NSMEZCUnl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eExRVUZMTEVOQlFVTTdPMEZCUldwRUxFMUJRVWtzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRXRCUVVzc1MwRkJTeXhGUVVGRk8wRkJRMmhETEZGQlFVa3NVMEZCVXl4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNN08wRkJSWFpETEZWQlFVMHNNa0pCUTBvc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVkQlFVY3NhVUpCUVdsQ0xFZEJRVWNzUzBGQlN5eEZRVU01UXl4VFFVRlRMRU5CUTFZc1EwRkJRenRIUVVOSU8wTkJRMFk3TzBGQlJVMHNVMEZCVXl4alFVRmpMRU5CUVVNc1RVRkJUU3hGUVVGRkxFOUJRVThzUlVGQlJUdEJRVU01UXl4TlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFMUJRVTBzUTBGQlF6dEJRVU55UWl4TlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSE8wRkJRMWdzVVVGQlNTeEZRVUZGTEU5QlFVOHNRMEZCUXl4VlFVRlZPMEZCUTNoQ0xGVkJRVTBzUlVGQlJTeFBRVUZQTEVOQlFVTXNXVUZCV1R0SFFVTTNRaXhEUVVGRE8wRkJRMFlzVFVGQlNTeERRVUZETEVkQlFVY3NSMEZCUnp0QlFVTlVMRkZCUVVrc1JVRkJSU3hQUVVGUExFTkJRVU1zVTBGQlV6dEJRVU4yUWl4VlFVRk5MRVZCUVVVc1QwRkJUeXhEUVVGRExGZEJRVmM3UjBGRE5VSXNRMEZCUXp0RFFVTklPenRCUVVWTkxGTkJRVk1zUlVGQlJTeERRVUZETEV0QlFVc3NSVUZCUlR0QlFVTjRRaXhOUVVGSkxGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRVZCUVVVN1FVRkRNVUlzVjBGQlR5eExRVUZMTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hMUVVGTExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMGRCUXpkRExFMUJRVTA3UVVGRFRDeFhRVUZQTEV0QlFVc3NRMEZCUXp0SFFVTmtPME5CUTBZN08wRkJSVTBzVTBGQlV5eFZRVUZWTEVOQlFVTXNTVUZCU1N4RlFVRkZMRXRCUVVzc1JVRkJSVHRCUVVOMFF5eFRRVUZQTzBGQlEwd3NVVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVc3NSMEZCUnp0QlFVTTFRaXhUUVVGTExFVkJRVVVzUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUTBGQlF5eExRVUZMTEVkQlFVYzdSMEZET1VNc1EwRkJRenREUVVOSU96dEJRVVZOTEZOQlFWTXNXVUZCV1N4RFFVRkRMRTlCUVU4c1JVRkJSVHRCUVVOd1F5eFRRVUZQTEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1kwRkJZeXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4aFFVRmhMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU03UTBGRGRrVTdPMEZCUlUwc1UwRkJVeXhYUVVGWExFTkJRVU1zU1VGQlNTeEZRVUZGTEV0QlFVc3NSVUZCUlN4SFFVRkhMRVZCUVVVN1FVRkROVU1zUzBGQlJ5eEhRVUZITEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03TzBGQlJYaENMRTFCUVVrc1VVRkJVU3hIUVVGSExFbEJRVWtzUjBGQlJ5eEhRVUZITEVkQlFVY3NSVUZCUlR0TlFVTTFRaXhIUVVGSExFZEJRVWNzUlVGQlJUdE5RVU5TTEV0QlFVc3NSMEZCUnl4RFFVRkRMRU5CUVVNN08wRkJSVm9zVDBGQlN5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFdEJRVXNzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUdEJRVU0xUXl4UlFVRkpMRWxCUVVrc1IwRkJSeXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1RzN096dEJRVWQwUWl4aFFVRlRMRWRCUVVjc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEZGQlFWRXNTMEZCU3l4SlFVRkpMRU5CUVVNN1FVRkRla01zV1VGQlVTeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExGTkJRVk1zU1VGQlNTeEZRVUZGTEVOQlFVRXNSMEZCU1N4SlFVRkpMRU5CUVVNN08wRkJSVGxETEZGQlFVa3NRMEZCUXl4VFFVRlRMRXRCUVVzc1NVRkJTU3hMUVVGTExFbEJRVWtzU1VGQlNTeEpRVUZKTEV0QlFVc3NSMEZCUnl4SlFVRkpMRWxCUVVrc1MwRkJTeXhOUVVGTkxFTkJRVUVzUVVGQlF5eEZRVUZGTzBGQlEzQkZMRlZCUVVrc1IwRkJSeXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVWQlFVVTdRVUZEYkVJc1kwRkJUU3d5UWtGQll5eG5Ra0ZCWjBJc1IwRkJSeXhSUVVGUkxFVkJRVVVzUlVGQlJTeEhRVUZITEVWQlFVZ3NSMEZCUnl4RlFVRkZMRU5CUVVNc1EwRkJRenRQUVVNelJDeE5RVUZOTEVsQlFVa3NTVUZCU1N4TFFVRkxMRWxCUVVrc1JVRkJSVHRCUVVONFFpeGhRVUZMTEVWQlFVVXNRMEZCUXp0UFFVTlVPMHRCUTBZc1RVRkJUVHRCUVVOTUxGTkJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1MwRkRhRUk3UjBGRFJqczdRVUZGUkN4VFFVRlBPMEZCUTB3c1VVRkJTU3hGUVVGRkxHZENRVUZuUWp0QlFVTjBRaXhSUVVGSkxFVkJRVW9zU1VGQlNUdEJRVU5LTEZOQlFVc3NSVUZCVEN4TFFVRkxPMEZCUTB3c1UwRkJTeXhGUVVGRkxFZEJRVWM3UVVGRFZpeFpRVUZSTEVWQlFWSXNVVUZCVVR0QlFVTlNMRTlCUVVjc1JVRkJTQ3hIUVVGSE8wZEJRMG9zUTBGQlF6dERRVU5JT3p0QlFVVk5MRk5CUVZNc1pVRkJaU3hEUVVGRExFbEJRVWtzUlVGQlJTeE5RVUZOTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hMUVVGTExFVkJRVVVzVDBGQlR5eEZRVUZGT3p0QlFVVjRSU3hOUVVGSkxGVkJRVlVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRPMDFCUXk5RExFOUJRVThzUjBGQlJ5eFZRVUZWTEV0QlFVc3NSMEZCUnl4SlFVRkpMRlZCUVZVc1MwRkJTeXhIUVVGSExFTkJRVU03TzBGQlJYSkVMRTFCUVVrc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRhRU1zVTBGQlR6dEJRVU5NTEZGQlFVa3NSVUZCUlN4VFFVRlRMRWRCUVVjc1YwRkJWeXhIUVVGSExHMUNRVUZ0UWp0QlFVTnVSQ3hSUVVGSkxFVkJRVW9zU1VGQlNUdEJRVU5LTEZWQlFVMHNSVUZCVGl4TlFVRk5PMEZCUTA0c1VVRkJTU3hGUVVGS0xFbEJRVWs3UVVGRFNpeFhRVUZQTEVWQlFWQXNUMEZCVHp0QlFVTlFMRk5CUVVzc1JVRkJUQ3hMUVVGTE8wRkJRMHdzVDBGQlJ5eEZRVUZGTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1QwRkJUeXhEUVVGRE8wZEJRek5DTEVOQlFVTTdRMEZEU0RzN1FVRkZUU3hUUVVGVExHVkJRV1VzUTBGQlF5eFpRVUZaTEVWQlFVVXNVVUZCVVN4RlFVRkZMRXRCUVVzc1JVRkJSU3hQUVVGUExFVkJRVVU3UVVGRGRFVXNaVUZCWVN4RFFVRkRMRmxCUVZrc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6czdRVUZGYmtNc1UwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1FVRkRhRU1zVFVGQlNTeFBRVUZQTEVkQlFVYzdRVUZEV2l4UlFVRkpMRVZCUVVVc1UwRkJVenRCUVVObUxGRkJRVWtzUlVGQlJTeFJRVUZSTzBGQlEyUXNVMEZCU3l4RlFVRkZMRVZCUVVVN1FVRkRWQ3hQUVVGSExFVkJRVVVzVDBGQlR6dEhRVU5pTEVOQlFVTTdPMEZCUlVZc1UwRkJUenRCUVVOTUxGRkJRVWtzUlVGQlJTeG5Ra0ZCWjBJN1FVRkRkRUlzVVVGQlNTeEZRVUZGTEZsQlFWa3NRMEZCUXl4SlFVRkpPMEZCUTNaQ0xGVkJRVTBzUlVGQlJTeFpRVUZaTEVOQlFVTXNUVUZCVFR0QlFVTXpRaXhSUVVGSkxFVkJRVVVzV1VGQldTeERRVUZETEVsQlFVazdRVUZEZGtJc1YwRkJUeXhGUVVGUUxFOUJRVTg3UVVGRFVDeGhRVUZUTEVWQlFVVXNSVUZCUlR0QlFVTmlMR2RDUVVGWkxFVkJRVVVzUlVGQlJUdEJRVU5vUWl4alFVRlZMRVZCUVVVc1JVRkJSVHRCUVVOa0xFOUJRVWNzUlVGQlJTeFBRVUZQTzBkQlEySXNRMEZCUXp0RFFVTklPenRCUVVWTkxGTkJRVk1zV1VGQldTeERRVU14UWl4VFFVRlRMRVZCUTFRc1QwRkJUeXhGUVVOUUxHbENRVUZwUWl4RlFVTnFRaXhMUVVGTExFVkJRMHdzVVVGQlVTeEZRVU5TTEU5QlFVOHNSVUZEVUR0QlFVTkJMRTFCUVVrc1MwRkJTeXhKUVVGSkxFdEJRVXNzUTBGQlF5eEpRVUZKTEVWQlFVVTdRVUZEZGtJc2FVSkJRV0VzUTBGQlF5eFRRVUZUTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1IwRkRha003TzBGQlJVUXNUVUZCU1N4VFFVRlRMRWRCUVVjc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN08wRkJSVEZETEZOQlFVOHNRMEZCUXl4WFFVRlhMRWRCUVVjc1UwRkJVeXhEUVVGRExGZEJRVmNzUTBGQlF6czdRVUZGTlVNc1RVRkJTU3hQUVVGUExGbEJRVUU3VFVGQlJTeFpRVUZaTEZsQlFVRXNRMEZCUXpzN1FVRkZNVUlzVFVGQlNTeHBRa0ZCYVVJc1JVRkJSVHRCUVVOeVFpeFJRVUZKTEZOQlFWTXNSVUZCUlR0QlFVTmlMRmxCUVUwc01rSkJRMG9zZFVOQlFYVkRMRVZCUTNaRExHbENRVUZwUWl4RFFVTnNRaXhEUVVGRE8wdEJRMGc3TzBGQlJVUXNVVUZCU1N4cFFrRkJhVUlzUTBGQlF5eExRVUZMTEVWQlFVVTdRVUZETTBJc2RVSkJRV2xDTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eFZRVUZWTEVkQlFVY3NTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJRenRMUVVNMVJEczdRVUZGUkN4blFrRkJXU3hIUVVGSExHbENRVUZwUWl4RFFVRkRMRXRCUVVzc1EwRkJRenRCUVVOMlF5eFhRVUZQTEVkQlFVY3NhVUpCUVdsQ0xFTkJRVU1zVDBGQlR5eERRVUZETzBkQlEzSkRPenRCUVVWRUxFMUJRVWtzVVVGQlVTeEZRVUZGTzBGQlExb3NXVUZCVVN4SFFVRkhMRTlCUVU4c1EwRkJRenRCUVVOdVFpeFhRVUZQTEVkQlFVY3NUMEZCVHl4RFFVRkRPMEZCUTJ4Q0xGZEJRVThzUjBGQlJ5eFJRVUZSTEVOQlFVTTdSMEZEY0VJN08wRkJSVVFzVTBGQlR6dEJRVU5NTEZGQlFVa3NSVUZCUlN4VFFVRlRMRWRCUVVjc1owSkJRV2RDTEVkQlFVY3NaMEpCUVdkQ08wRkJRM0pFTEZGQlFVa3NSVUZCUlN4VFFVRlRMRU5CUVVNc1NVRkJTVHRCUVVOd1FpeFZRVUZOTEVWQlFVVXNVMEZCVXl4RFFVRkRMRTFCUVUwN1FVRkRlRUlzVVVGQlNTeEZRVUZGTEZOQlFWTXNRMEZCUXl4SlFVRkpPMEZCUTNCQ0xGZEJRVThzUlVGQlVDeFBRVUZQTzBGQlExQXNWMEZCVHl4RlFVRlFMRTlCUVU4N1FVRkRVQ3hoUVVGVExFVkJRVVVzVTBGQlV5eERRVUZETEV0QlFVczdRVUZETVVJc1owSkJRVmtzUlVGQldpeFpRVUZaTzBGQlExb3NZMEZCVlN4RlFVRkZMRXRCUVVzc1NVRkJTU3hMUVVGTExFTkJRVU1zUzBGQlN6dEJRVU5vUXl4UFFVRkhMRVZCUVVVc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFBRVUZQTEVOQlFVTTdSMEZETTBJc1EwRkJRenREUVVOSU96dEJRVVZOTEZOQlFWTXNZMEZCWXl4RFFVRkRMRlZCUVZVc1JVRkJSU3hIUVVGSExFVkJRVVU3UVVGRE9VTXNUVUZCU1N4RFFVRkRMRWRCUVVjc1NVRkJTU3hWUVVGVkxFTkJRVU1zVFVGQlRTeEZRVUZGTzBGQlF6ZENMRkZCUVUwc1VVRkJVU3hIUVVGSExGVkJRVlVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhPMUZCUTJoRExFOUJRVThzUjBGQlJ5eFZRVUZWTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTTdPenRCUVVkc1JDeFJRVUZKTEZGQlFWRXNTVUZCU1N4UFFVRlBMRVZCUVVVN1FVRkRka0lzVTBGQlJ5eEhRVUZITzBGQlEwb3NZMEZCVFN4RlFVRkZMRkZCUVZFc1EwRkJReXhOUVVGTk8wRkJRM1pDTEdGQlFVc3NSVUZCUlR0QlFVTk1MR05CUVVrc1JVRkJSU3hSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVazdRVUZEZWtJc1owSkJRVTBzUlVGQlJTeFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwN1UwRkRPVUk3UVVGRFJDeFhRVUZITEVWQlFVVTdRVUZEU0N4alFVRkpMRVZCUVVVc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTzBGQlEzUkNMR2RDUVVGTkxFVkJRVVVzVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4TlFVRk5PMU5CUXpOQ08wOUJRMFlzUTBGQlF6dExRVU5JTzBkQlEwWTdPMEZCUlVRc1UwRkJUenRCUVVOTUxGRkJRVWtzUlVGQlJTeFRRVUZUTzBGQlEyWXNVVUZCU1N4RlFVRkZMRlZCUVZVN1FVRkRhRUlzVTBGQlN5eEZRVUZGTEVWQlFVVTdRVUZEVkN4UFFVRkhMRVZCUVVVc1IwRkJSenRIUVVOVUxFTkJRVU03UTBGRFNEczdRVUZGVFN4VFFVRlRMRzFDUVVGdFFpeERRVUZETEVsQlFVa3NSVUZCUlN4UFFVRlBMRVZCUVVVc1MwRkJTeXhGUVVGRkxFOUJRVThzUlVGQlJUdEJRVU5xUlN4bFFVRmhMRU5CUVVNc1NVRkJTU3hGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZET3p0QlFVVXpRaXhUUVVGUE8wRkJRMHdzVVVGQlNTeEZRVUZGTEhWQ1FVRjFRanRCUVVNM1FpeFJRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMRWxCUVVrN1FVRkRaaXhWUVVGTkxFVkJRVVVzU1VGQlNTeERRVUZETEUxQlFVMDdRVUZEYmtJc1VVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlF5eEpRVUZKTzBGQlEyWXNWMEZCVHl4RlFVRlFMRTlCUVU4N1FVRkRVQ3hoUVVGVExFVkJRVVVzU1VGQlNTeERRVUZETEV0QlFVczdRVUZEY2tJc1kwRkJWU3hGUVVGRkxFdEJRVXNzU1VGQlNTeExRVUZMTEVOQlFVTXNTMEZCU3p0QlFVTm9ReXhQUVVGSExFVkJRVVVzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNN1IwRkRNMElzUTBGQlF6dERRVU5JSWl3aVptbHNaU0k2SW1obGJIQmxjbk11YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ1JYaGpaWEIwYVc5dUlHWnliMjBnSnk0dUwyVjRZMlZ3ZEdsdmJpYzdYRzVjYm1aMWJtTjBhVzl1SUhaaGJHbGtZWFJsUTJ4dmMyVW9iM0JsYml3Z1kyeHZjMlVwSUh0Y2JpQWdZMnh2YzJVZ1BTQmpiRzl6WlM1d1lYUm9JRDhnWTJ4dmMyVXVjR0YwYUM1dmNtbG5hVzVoYkNBNklHTnNiM05sTzF4dVhHNGdJR2xtSUNodmNHVnVMbkJoZEdndWIzSnBaMmx1WVd3Z0lUMDlJR05zYjNObEtTQjdYRzRnSUNBZ2JHVjBJR1Z5Y205eVRtOWtaU0E5SUhzZ2JHOWpPaUJ2Y0dWdUxuQmhkR2d1Ykc5aklIMDdYRzVjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWGhqWlhCMGFXOXVLRnh1SUNBZ0lDQWdiM0JsYmk1d1lYUm9MbTl5YVdkcGJtRnNJQ3NnWENJZ1pHOWxjMjRuZENCdFlYUmphQ0JjSWlBcklHTnNiM05sTEZ4dUlDQWdJQ0FnWlhKeWIzSk9iMlJsWEc0Z0lDQWdLVHRjYmlBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnVTI5MWNtTmxURzlqWVhScGIyNG9jMjkxY21ObExDQnNiMk5KYm1adktTQjdYRzRnSUhSb2FYTXVjMjkxY21ObElEMGdjMjkxY21ObE8xeHVJQ0IwYUdsekxuTjBZWEowSUQwZ2UxeHVJQ0FnSUd4cGJtVTZJR3h2WTBsdVptOHVabWx5YzNSZmJHbHVaU3hjYmlBZ0lDQmpiMngxYlc0NklHeHZZMGx1Wm04dVptbHljM1JmWTI5c2RXMXVYRzRnSUgwN1hHNGdJSFJvYVhNdVpXNWtJRDBnZTF4dUlDQWdJR3hwYm1VNklHeHZZMGx1Wm04dWJHRnpkRjlzYVc1bExGeHVJQ0FnSUdOdmJIVnRiam9nYkc5alNXNW1ieTVzWVhOMFgyTnZiSFZ0Ymx4dUlDQjlPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2FXUW9kRzlyWlc0cElIdGNiaUFnYVdZZ0tDOWVYRnhiTGlwY1hGMGtMeTUwWlhOMEtIUnZhMlZ1S1NrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYjJ0bGJpNXpkV0p6ZEhKcGJtY29NU3dnZEc5clpXNHViR1Z1WjNSb0lDMGdNU2s3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnY21WMGRYSnVJSFJ2YTJWdU8xeHVJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnpkSEpwY0Vac1lXZHpLRzl3Wlc0c0lHTnNiM05sS1NCN1hHNGdJSEpsZEhWeWJpQjdYRzRnSUNBZ2IzQmxiam9nYjNCbGJpNWphR0Z5UVhRb01pa2dQVDA5SUNkK0p5eGNiaUFnSUNCamJHOXpaVG9nWTJ4dmMyVXVZMmhoY2tGMEtHTnNiM05sTG14bGJtZDBhQ0F0SURNcElEMDlQU0FuZmlkY2JpQWdmVHRjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlITjBjbWx3UTI5dGJXVnVkQ2hqYjIxdFpXNTBLU0I3WEc0Z0lISmxkSFZ5YmlCamIyMXRaVzUwTG5KbGNHeGhZMlVvTDE1Y1hIdGNYSHQrUHlFdFB5MC9MeXdnSnljcExuSmxjR3hoWTJVb0x5MC9MVDkrUDF4Y2ZWeGNmU1F2TENBbkp5azdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCd2NtVndZWEpsVUdGMGFDaGtZWFJoTENCd1lYSjBjeXdnYkc5aktTQjdYRzRnSUd4dll5QTlJSFJvYVhNdWJHOWpTVzVtYnloc2IyTXBPMXh1WEc0Z0lHeGxkQ0J2Y21sbmFXNWhiQ0E5SUdSaGRHRWdQeUFuUUNjZ09pQW5KeXhjYmlBZ0lDQmthV2NnUFNCYlhTeGNiaUFnSUNCa1pYQjBhQ0E5SURBN1hHNWNiaUFnWm05eUlDaHNaWFFnYVNBOUlEQXNJR3dnUFNCd1lYSjBjeTVzWlc1bmRHZzdJR2tnUENCc095QnBLeXNwSUh0Y2JpQWdJQ0JzWlhRZ2NHRnlkQ0E5SUhCaGNuUnpXMmxkTG5CaGNuUXNYRzRnSUNBZ0lDQXZMeUJKWmlCM1pTQm9ZWFpsSUZ0ZElITjViblJoZUNCMGFHVnVJSGRsSUdSdklHNXZkQ0IwY21WaGRDQndZWFJvSUhKbFptVnlaVzVqWlhNZ1lYTWdiM0JsY21GMGIzSnpMRnh1SUNBZ0lDQWdMeThnYVM1bExpQm1iMjh1VzNSb2FYTmRJSEpsYzI5c2RtVnpJSFJ2SUdGd2NISnZlR2x0WVhSbGJIa2dZMjl1ZEdWNGRDNW1iMjliSjNSb2FYTW5YVnh1SUNBZ0lDQWdhWE5NYVhSbGNtRnNJRDBnY0dGeWRITmJhVjB1YjNKcFoybHVZV3dnSVQwOUlIQmhjblE3WEc0Z0lDQWdiM0pwWjJsdVlXd2dLejBnS0hCaGNuUnpXMmxkTG5ObGNHRnlZWFJ2Y2lCOGZDQW5KeWtnS3lCd1lYSjBPMXh1WEc0Z0lDQWdhV1lnS0NGcGMweHBkR1Z5WVd3Z0ppWWdLSEJoY25RZ1BUMDlJQ2N1TGljZ2ZId2djR0Z5ZENBOVBUMGdKeTRuSUh4OElIQmhjblFnUFQwOUlDZDBhR2x6SnlrcElIdGNiaUFnSUNBZ0lHbG1JQ2hrYVdjdWJHVnVaM1JvSUQ0Z01Da2dlMXh1SUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhoalpYQjBhVzl1S0NkSmJuWmhiR2xrSUhCaGRHZzZJQ2NnS3lCdmNtbG5hVzVoYkN3Z2V5QnNiMk1nZlNrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIQmhjblFnUFQwOUlDY3VMaWNwSUh0Y2JpQWdJQ0FnSUNBZ1pHVndkR2dyS3p0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdaR2xuTG5CMWMyZ29jR0Z5ZENrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0IwZVhCbE9pQW5VR0YwYUVWNGNISmxjM05wYjI0bkxGeHVJQ0FnSUdSaGRHRXNYRzRnSUNBZ1pHVndkR2dzWEc0Z0lDQWdjR0Z5ZEhNNklHUnBaeXhjYmlBZ0lDQnZjbWxuYVc1aGJDeGNiaUFnSUNCc2IyTmNiaUFnZlR0Y2JuMWNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJSEJ5WlhCaGNtVk5kWE4wWVdOb1pTaHdZWFJvTENCd1lYSmhiWE1zSUdoaGMyZ3NJRzl3Wlc0c0lITjBjbWx3TENCc2IyTkpibVp2S1NCN1hHNGdJQzh2SUUxMWMzUWdkWE5sSUdOb1lYSkJkQ0IwYnlCemRYQndiM0owSUVsRklIQnlaUzB4TUZ4dUlDQnNaWFFnWlhOallYQmxSbXhoWnlBOUlHOXdaVzR1WTJoaGNrRjBLRE1wSUh4OElHOXdaVzR1WTJoaGNrRjBLRElwTEZ4dUlDQWdJR1Z6WTJGd1pXUWdQU0JsYzJOaGNHVkdiR0ZuSUNFOVBTQW5leWNnSmlZZ1pYTmpZWEJsUm14aFp5QWhQVDBnSnlZbk8xeHVYRzRnSUd4bGRDQmtaV052Y21GMGIzSWdQU0F2WEZ3cUx5NTBaWE4wS0c5d1pXNHBPMXh1SUNCeVpYUjFjbTRnZTF4dUlDQWdJSFI1Y0dVNklHUmxZMjl5WVhSdmNpQS9JQ2RFWldOdmNtRjBiM0luSURvZ0owMTFjM1JoWTJobFUzUmhkR1Z0Wlc1MEp5eGNiaUFnSUNCd1lYUm9MRnh1SUNBZ0lIQmhjbUZ0Y3l4Y2JpQWdJQ0JvWVhOb0xGeHVJQ0FnSUdWelkyRndaV1FzWEc0Z0lDQWdjM1J5YVhBc1hHNGdJQ0FnYkc5ak9pQjBhR2x6TG14dlkwbHVabThvYkc5alNXNW1ieWxjYmlBZ2ZUdGNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUhCeVpYQmhjbVZTWVhkQ2JHOWpheWh2Y0dWdVVtRjNRbXh2WTJzc0lHTnZiblJsYm5SekxDQmpiRzl6WlN3Z2JHOWpTVzVtYnlrZ2UxeHVJQ0IyWVd4cFpHRjBaVU5zYjNObEtHOXdaVzVTWVhkQ2JHOWpheXdnWTJ4dmMyVXBPMXh1WEc0Z0lHeHZZMGx1Wm04Z1BTQjBhR2x6TG14dlkwbHVabThvYkc5alNXNW1ieWs3WEc0Z0lHeGxkQ0J3Y205bmNtRnRJRDBnZTF4dUlDQWdJSFI1Y0dVNklDZFFjbTluY21GdEp5eGNiaUFnSUNCaWIyUjVPaUJqYjI1MFpXNTBjeXhjYmlBZ0lDQnpkSEpwY0RvZ2UzMHNYRzRnSUNBZ2JHOWpPaUJzYjJOSmJtWnZYRzRnSUgwN1hHNWNiaUFnY21WMGRYSnVJSHRjYmlBZ0lDQjBlWEJsT2lBblFteHZZMnRUZEdGMFpXMWxiblFuTEZ4dUlDQWdJSEJoZEdnNklHOXdaVzVTWVhkQ2JHOWpheTV3WVhSb0xGeHVJQ0FnSUhCaGNtRnRjem9nYjNCbGJsSmhkMEpzYjJOckxuQmhjbUZ0Y3l4Y2JpQWdJQ0JvWVhOb09pQnZjR1Z1VW1GM1FteHZZMnN1YUdGemFDeGNiaUFnSUNCd2NtOW5jbUZ0TEZ4dUlDQWdJRzl3Wlc1VGRISnBjRG9nZTMwc1hHNGdJQ0FnYVc1MlpYSnpaVk4wY21sd09pQjdmU3hjYmlBZ0lDQmpiRzl6WlZOMGNtbHdPaUI3ZlN4Y2JpQWdJQ0JzYjJNNklHeHZZMGx1Wm05Y2JpQWdmVHRjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlIQnlaWEJoY21WQ2JHOWpheWhjYmlBZ2IzQmxia0pzYjJOckxGeHVJQ0J3Y205bmNtRnRMRnh1SUNCcGJuWmxjbk5sUVc1a1VISnZaM0poYlN4Y2JpQWdZMnh2YzJVc1hHNGdJR2x1ZG1WeWRHVmtMRnh1SUNCc2IyTkpibVp2WEc0cElIdGNiaUFnYVdZZ0tHTnNiM05sSUNZbUlHTnNiM05sTG5CaGRHZ3BJSHRjYmlBZ0lDQjJZV3hwWkdGMFpVTnNiM05sS0c5d1pXNUNiRzlqYXl3Z1kyeHZjMlVwTzF4dUlDQjlYRzVjYmlBZ2JHVjBJR1JsWTI5eVlYUnZjaUE5SUM5Y1hDb3ZMblJsYzNRb2IzQmxia0pzYjJOckxtOXdaVzRwTzF4dVhHNGdJSEJ5YjJkeVlXMHVZbXh2WTJ0UVlYSmhiWE1nUFNCdmNHVnVRbXh2WTJzdVlteHZZMnRRWVhKaGJYTTdYRzVjYmlBZ2JHVjBJR2x1ZG1WeWMyVXNJR2x1ZG1WeWMyVlRkSEpwY0R0Y2JseHVJQ0JwWmlBb2FXNTJaWEp6WlVGdVpGQnliMmR5WVcwcElIdGNiaUFnSUNCcFppQW9aR1ZqYjNKaGRHOXlLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhoalpYQjBhVzl1S0Z4dUlDQWdJQ0FnSUNBblZXNWxlSEJsWTNSbFpDQnBiblpsY25ObElHSnNiMk5ySUc5dUlHUmxZMjl5WVhSdmNpY3NYRzRnSUNBZ0lDQWdJR2x1ZG1WeWMyVkJibVJRY205bmNtRnRYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2hwYm5abGNuTmxRVzVrVUhKdlozSmhiUzVqYUdGcGJpa2dlMXh1SUNBZ0lDQWdhVzUyWlhKelpVRnVaRkJ5YjJkeVlXMHVjSEp2WjNKaGJTNWliMlI1V3pCZExtTnNiM05sVTNSeWFYQWdQU0JqYkc5elpTNXpkSEpwY0R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwYm5abGNuTmxVM1J5YVhBZ1BTQnBiblpsY25ObFFXNWtVSEp2WjNKaGJTNXpkSEpwY0R0Y2JpQWdJQ0JwYm5abGNuTmxJRDBnYVc1MlpYSnpaVUZ1WkZCeWIyZHlZVzB1Y0hKdlozSmhiVHRjYmlBZ2ZWeHVYRzRnSUdsbUlDaHBiblpsY25SbFpDa2dlMXh1SUNBZ0lHbHVkbVZ5ZEdWa0lEMGdhVzUyWlhKelpUdGNiaUFnSUNCcGJuWmxjbk5sSUQwZ2NISnZaM0poYlR0Y2JpQWdJQ0J3Y205bmNtRnRJRDBnYVc1MlpYSjBaV1E3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnZTF4dUlDQWdJSFI1Y0dVNklHUmxZMjl5WVhSdmNpQS9JQ2RFWldOdmNtRjBiM0pDYkc5amF5Y2dPaUFuUW14dlkydFRkR0YwWlcxbGJuUW5MRnh1SUNBZ0lIQmhkR2c2SUc5d1pXNUNiRzlqYXk1d1lYUm9MRnh1SUNBZ0lIQmhjbUZ0Y3pvZ2IzQmxia0pzYjJOckxuQmhjbUZ0Y3l4Y2JpQWdJQ0JvWVhOb09pQnZjR1Z1UW14dlkyc3VhR0Z6YUN4Y2JpQWdJQ0J3Y205bmNtRnRMRnh1SUNBZ0lHbHVkbVZ5YzJVc1hHNGdJQ0FnYjNCbGJsTjBjbWx3T2lCdmNHVnVRbXh2WTJzdWMzUnlhWEFzWEc0Z0lDQWdhVzUyWlhKelpWTjBjbWx3TEZ4dUlDQWdJR05zYjNObFUzUnlhWEE2SUdOc2IzTmxJQ1ltSUdOc2IzTmxMbk4wY21sd0xGeHVJQ0FnSUd4dll6b2dkR2hwY3k1c2IyTkpibVp2S0d4dlkwbHVabThwWEc0Z0lIMDdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCd2NtVndZWEpsVUhKdlozSmhiU2h6ZEdGMFpXMWxiblJ6TENCc2IyTXBJSHRjYmlBZ2FXWWdLQ0ZzYjJNZ0ppWWdjM1JoZEdWdFpXNTBjeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQmpiMjV6ZENCbWFYSnpkRXh2WXlBOUlITjBZWFJsYldWdWRITmJNRjB1Ykc5akxGeHVJQ0FnSUNBZ2JHRnpkRXh2WXlBOUlITjBZWFJsYldWdWRITmJjM1JoZEdWdFpXNTBjeTVzWlc1bmRHZ2dMU0F4WFM1c2IyTTdYRzVjYmlBZ0lDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdaV3h6WlNBcUwxeHVJQ0FnSUdsbUlDaG1hWEp6ZEV4dll5QW1KaUJzWVhOMFRHOWpLU0I3WEc0Z0lDQWdJQ0JzYjJNZ1BTQjdYRzRnSUNBZ0lDQWdJSE52ZFhKalpUb2dabWx5YzNSTWIyTXVjMjkxY21ObExGeHVJQ0FnSUNBZ0lDQnpkR0Z5ZERvZ2UxeHVJQ0FnSUNBZ0lDQWdJR3hwYm1VNklHWnBjbk4wVEc5akxuTjBZWEowTG14cGJtVXNYRzRnSUNBZ0lDQWdJQ0FnWTI5c2RXMXVPaUJtYVhKemRFeHZZeTV6ZEdGeWRDNWpiMngxYlc1Y2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdaVzVrT2lCN1hHNGdJQ0FnSUNBZ0lDQWdiR2x1WlRvZ2JHRnpkRXh2WXk1bGJtUXViR2x1WlN4Y2JpQWdJQ0FnSUNBZ0lDQmpiMngxYlc0NklHeGhjM1JNYjJNdVpXNWtMbU52YkhWdGJseHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQjdYRzRnSUNBZ2RIbHdaVG9nSjFCeWIyZHlZVzBuTEZ4dUlDQWdJR0p2WkhrNklITjBZWFJsYldWdWRITXNYRzRnSUNBZ2MzUnlhWEE2SUh0OUxGeHVJQ0FnSUd4dll6b2diRzlqWEc0Z0lIMDdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCd2NtVndZWEpsVUdGeWRHbGhiRUpzYjJOcktHOXdaVzRzSUhCeWIyZHlZVzBzSUdOc2IzTmxMQ0JzYjJOSmJtWnZLU0I3WEc0Z0lIWmhiR2xrWVhSbFEyeHZjMlVvYjNCbGJpd2dZMnh2YzJVcE8xeHVYRzRnSUhKbGRIVnliaUI3WEc0Z0lDQWdkSGx3WlRvZ0oxQmhjblJwWVd4Q2JHOWphMU4wWVhSbGJXVnVkQ2NzWEc0Z0lDQWdibUZ0WlRvZ2IzQmxiaTV3WVhSb0xGeHVJQ0FnSUhCaGNtRnRjem9nYjNCbGJpNXdZWEpoYlhNc1hHNGdJQ0FnYUdGemFEb2diM0JsYmk1b1lYTm9MRnh1SUNBZ0lIQnliMmR5WVcwc1hHNGdJQ0FnYjNCbGJsTjBjbWx3T2lCdmNHVnVMbk4wY21sd0xGeHVJQ0FnSUdOc2IzTmxVM1J5YVhBNklHTnNiM05sSUNZbUlHTnNiM05sTG5OMGNtbHdMRnh1SUNBZ0lHeHZZem9nZEdocGN5NXNiMk5KYm1adktHeHZZMGx1Wm04cFhHNGdJSDA3WEc1OVhHNGlYWDA9XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG4vLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfYmFzZSA9IHJlcXVpcmUoJy4uL2Jhc2UnKTtcblxudmFyIF9leGNlcHRpb24gPSByZXF1aXJlKCcuLi9leGNlcHRpb24nKTtcblxudmFyIF9leGNlcHRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhjZXB0aW9uKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbnZhciBfY29kZUdlbiA9IHJlcXVpcmUoJy4vY29kZS1nZW4nKTtcblxudmFyIF9jb2RlR2VuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvZGVHZW4pO1xuXG5mdW5jdGlvbiBMaXRlcmFsKHZhbHVlKSB7XG4gIHRoaXMudmFsdWUgPSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gSmF2YVNjcmlwdENvbXBpbGVyKCkge31cblxuSmF2YVNjcmlwdENvbXBpbGVyLnByb3RvdHlwZSA9IHtcbiAgLy8gUFVCTElDIEFQSTogWW91IGNhbiBvdmVycmlkZSB0aGVzZSBtZXRob2RzIGluIGEgc3ViY2xhc3MgdG8gcHJvdmlkZVxuICAvLyBhbHRlcm5hdGl2ZSBjb21waWxlZCBmb3JtcyBmb3IgbmFtZSBsb29rdXAgYW5kIGJ1ZmZlcmluZyBzZW1hbnRpY3NcbiAgbmFtZUxvb2t1cDogZnVuY3Rpb24gbmFtZUxvb2t1cChwYXJlbnQsIG5hbWUgLyosICB0eXBlICovKSB7XG4gICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxOYW1lTG9va3VwKHBhcmVudCwgbmFtZSk7XG4gIH0sXG4gIGRlcHRoZWRMb29rdXA6IGZ1bmN0aW9uIGRlcHRoZWRMb29rdXAobmFtZSkge1xuICAgIHJldHVybiBbdGhpcy5hbGlhc2FibGUoJ2NvbnRhaW5lci5sb29rdXAnKSwgJyhkZXB0aHMsICcsIEpTT04uc3RyaW5naWZ5KG5hbWUpLCAnKSddO1xuICB9LFxuXG4gIGNvbXBpbGVySW5mbzogZnVuY3Rpb24gY29tcGlsZXJJbmZvKCkge1xuICAgIHZhciByZXZpc2lvbiA9IF9iYXNlLkNPTVBJTEVSX1JFVklTSU9OLFxuICAgICAgICB2ZXJzaW9ucyA9IF9iYXNlLlJFVklTSU9OX0NIQU5HRVNbcmV2aXNpb25dO1xuICAgIHJldHVybiBbcmV2aXNpb24sIHZlcnNpb25zXTtcbiAgfSxcblxuICBhcHBlbmRUb0J1ZmZlcjogZnVuY3Rpb24gYXBwZW5kVG9CdWZmZXIoc291cmNlLCBsb2NhdGlvbiwgZXhwbGljaXQpIHtcbiAgICAvLyBGb3JjZSBhIHNvdXJjZSBhcyB0aGlzIHNpbXBsaWZpZXMgdGhlIG1lcmdlIGxvZ2ljLlxuICAgIGlmICghX3V0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgc291cmNlID0gW3NvdXJjZV07XG4gICAgfVxuICAgIHNvdXJjZSA9IHRoaXMuc291cmNlLndyYXAoc291cmNlLCBsb2NhdGlvbik7XG5cbiAgICBpZiAodGhpcy5lbnZpcm9ubWVudC5pc1NpbXBsZSkge1xuICAgICAgcmV0dXJuIFsncmV0dXJuICcsIHNvdXJjZSwgJzsnXTtcbiAgICB9IGVsc2UgaWYgKGV4cGxpY2l0KSB7XG4gICAgICAvLyBUaGlzIGlzIGEgY2FzZSB3aGVyZSB0aGUgYnVmZmVyIG9wZXJhdGlvbiBvY2N1cnMgYXMgYSBjaGlsZCBvZiBhbm90aGVyXG4gICAgICAvLyBjb25zdHJ1Y3QsIGdlbmVyYWxseSBicmFjZXMuIFdlIGhhdmUgdG8gZXhwbGljaXRseSBvdXRwdXQgdGhlc2UgYnVmZmVyXG4gICAgICAvLyBvcGVyYXRpb25zIHRvIGVuc3VyZSB0aGF0IHRoZSBlbWl0dGVkIGNvZGUgZ29lcyBpbiB0aGUgY29ycmVjdCBsb2NhdGlvbi5cbiAgICAgIHJldHVybiBbJ2J1ZmZlciArPSAnLCBzb3VyY2UsICc7J107XG4gICAgfSBlbHNlIHtcbiAgICAgIHNvdXJjZS5hcHBlbmRUb0J1ZmZlciA9IHRydWU7XG4gICAgICByZXR1cm4gc291cmNlO1xuICAgIH1cbiAgfSxcblxuICBpbml0aWFsaXplQnVmZmVyOiBmdW5jdGlvbiBpbml0aWFsaXplQnVmZmVyKCkge1xuICAgIHJldHVybiB0aGlzLnF1b3RlZFN0cmluZygnJyk7XG4gIH0sXG4gIC8vIEVORCBQVUJMSUMgQVBJXG4gIGludGVybmFsTmFtZUxvb2t1cDogZnVuY3Rpb24gaW50ZXJuYWxOYW1lTG9va3VwKHBhcmVudCwgbmFtZSkge1xuICAgIHRoaXMubG9va3VwUHJvcGVydHlGdW5jdGlvbklzVXNlZCA9IHRydWU7XG4gICAgcmV0dXJuIFsnbG9va3VwUHJvcGVydHkoJywgcGFyZW50LCAnLCcsIEpTT04uc3RyaW5naWZ5KG5hbWUpLCAnKSddO1xuICB9LFxuXG4gIGxvb2t1cFByb3BlcnR5RnVuY3Rpb25Jc1VzZWQ6IGZhbHNlLFxuXG4gIGNvbXBpbGU6IGZ1bmN0aW9uIGNvbXBpbGUoZW52aXJvbm1lbnQsIG9wdGlvbnMsIGNvbnRleHQsIGFzT2JqZWN0KSB7XG4gICAgdGhpcy5lbnZpcm9ubWVudCA9IGVudmlyb25tZW50O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5zdHJpbmdQYXJhbXMgPSB0aGlzLm9wdGlvbnMuc3RyaW5nUGFyYW1zO1xuICAgIHRoaXMudHJhY2tJZHMgPSB0aGlzLm9wdGlvbnMudHJhY2tJZHM7XG4gICAgdGhpcy5wcmVjb21waWxlID0gIWFzT2JqZWN0O1xuXG4gICAgdGhpcy5uYW1lID0gdGhpcy5lbnZpcm9ubWVudC5uYW1lO1xuICAgIHRoaXMuaXNDaGlsZCA9ICEhY29udGV4dDtcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0IHx8IHtcbiAgICAgIGRlY29yYXRvcnM6IFtdLFxuICAgICAgcHJvZ3JhbXM6IFtdLFxuICAgICAgZW52aXJvbm1lbnRzOiBbXVxuICAgIH07XG5cbiAgICB0aGlzLnByZWFtYmxlKCk7XG5cbiAgICB0aGlzLnN0YWNrU2xvdCA9IDA7XG4gICAgdGhpcy5zdGFja1ZhcnMgPSBbXTtcbiAgICB0aGlzLmFsaWFzZXMgPSB7fTtcbiAgICB0aGlzLnJlZ2lzdGVycyA9IHsgbGlzdDogW10gfTtcbiAgICB0aGlzLmhhc2hlcyA9IFtdO1xuICAgIHRoaXMuY29tcGlsZVN0YWNrID0gW107XG4gICAgdGhpcy5pbmxpbmVTdGFjayA9IFtdO1xuICAgIHRoaXMuYmxvY2tQYXJhbXMgPSBbXTtcblxuICAgIHRoaXMuY29tcGlsZUNoaWxkcmVuKGVudmlyb25tZW50LCBvcHRpb25zKTtcblxuICAgIHRoaXMudXNlRGVwdGhzID0gdGhpcy51c2VEZXB0aHMgfHwgZW52aXJvbm1lbnQudXNlRGVwdGhzIHx8IGVudmlyb25tZW50LnVzZURlY29yYXRvcnMgfHwgdGhpcy5vcHRpb25zLmNvbXBhdDtcbiAgICB0aGlzLnVzZUJsb2NrUGFyYW1zID0gdGhpcy51c2VCbG9ja1BhcmFtcyB8fCBlbnZpcm9ubWVudC51c2VCbG9ja1BhcmFtcztcblxuICAgIHZhciBvcGNvZGVzID0gZW52aXJvbm1lbnQub3Bjb2RlcyxcbiAgICAgICAgb3Bjb2RlID0gdW5kZWZpbmVkLFxuICAgICAgICBmaXJzdExvYyA9IHVuZGVmaW5lZCxcbiAgICAgICAgaSA9IHVuZGVmaW5lZCxcbiAgICAgICAgbCA9IHVuZGVmaW5lZDtcblxuICAgIGZvciAoaSA9IDAsIGwgPSBvcGNvZGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgb3Bjb2RlID0gb3Bjb2Rlc1tpXTtcblxuICAgICAgdGhpcy5zb3VyY2UuY3VycmVudExvY2F0aW9uID0gb3Bjb2RlLmxvYztcbiAgICAgIGZpcnN0TG9jID0gZmlyc3RMb2MgfHwgb3Bjb2RlLmxvYztcbiAgICAgIHRoaXNbb3Bjb2RlLm9wY29kZV0uYXBwbHkodGhpcywgb3Bjb2RlLmFyZ3MpO1xuICAgIH1cblxuICAgIC8vIEZsdXNoIGFueSB0cmFpbGluZyBjb250ZW50IHRoYXQgbWlnaHQgYmUgcGVuZGluZy5cbiAgICB0aGlzLnNvdXJjZS5jdXJyZW50TG9jYXRpb24gPSBmaXJzdExvYztcbiAgICB0aGlzLnB1c2hTb3VyY2UoJycpO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBpZiAodGhpcy5zdGFja1Nsb3QgfHwgdGhpcy5pbmxpbmVTdGFjay5sZW5ndGggfHwgdGhpcy5jb21waWxlU3RhY2subGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnQ29tcGlsZSBjb21wbGV0ZWQgd2l0aCBjb250ZW50IGxlZnQgb24gc3RhY2snKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuZGVjb3JhdG9ycy5pc0VtcHR5KCkpIHtcbiAgICAgIHRoaXMudXNlRGVjb3JhdG9ycyA9IHRydWU7XG5cbiAgICAgIHRoaXMuZGVjb3JhdG9ycy5wcmVwZW5kKFsndmFyIGRlY29yYXRvcnMgPSBjb250YWluZXIuZGVjb3JhdG9ycywgJywgdGhpcy5sb29rdXBQcm9wZXJ0eUZ1bmN0aW9uVmFyRGVjbGFyYXRpb24oKSwgJztcXG4nXSk7XG4gICAgICB0aGlzLmRlY29yYXRvcnMucHVzaCgncmV0dXJuIGZuOycpO1xuXG4gICAgICBpZiAoYXNPYmplY3QpIHtcbiAgICAgICAgdGhpcy5kZWNvcmF0b3JzID0gRnVuY3Rpb24uYXBwbHkodGhpcywgWydmbicsICdwcm9wcycsICdjb250YWluZXInLCAnZGVwdGgwJywgJ2RhdGEnLCAnYmxvY2tQYXJhbXMnLCAnZGVwdGhzJywgdGhpcy5kZWNvcmF0b3JzLm1lcmdlKCldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZGVjb3JhdG9ycy5wcmVwZW5kKCdmdW5jdGlvbihmbiwgcHJvcHMsIGNvbnRhaW5lciwgZGVwdGgwLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKSB7XFxuJyk7XG4gICAgICAgIHRoaXMuZGVjb3JhdG9ycy5wdXNoKCd9XFxuJyk7XG4gICAgICAgIHRoaXMuZGVjb3JhdG9ycyA9IHRoaXMuZGVjb3JhdG9ycy5tZXJnZSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRlY29yYXRvcnMgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdmFyIGZuID0gdGhpcy5jcmVhdGVGdW5jdGlvbkNvbnRleHQoYXNPYmplY3QpO1xuICAgIGlmICghdGhpcy5pc0NoaWxkKSB7XG4gICAgICB2YXIgcmV0ID0ge1xuICAgICAgICBjb21waWxlcjogdGhpcy5jb21waWxlckluZm8oKSxcbiAgICAgICAgbWFpbjogZm5cbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLmRlY29yYXRvcnMpIHtcbiAgICAgICAgcmV0Lm1haW5fZCA9IHRoaXMuZGVjb3JhdG9yczsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcbiAgICAgICAgcmV0LnVzZURlY29yYXRvcnMgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgX2NvbnRleHQgPSB0aGlzLmNvbnRleHQ7XG4gICAgICB2YXIgcHJvZ3JhbXMgPSBfY29udGV4dC5wcm9ncmFtcztcbiAgICAgIHZhciBkZWNvcmF0b3JzID0gX2NvbnRleHQuZGVjb3JhdG9ycztcblxuICAgICAgZm9yIChpID0gMCwgbCA9IHByb2dyYW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAocHJvZ3JhbXNbaV0pIHtcbiAgICAgICAgICByZXRbaV0gPSBwcm9ncmFtc1tpXTtcbiAgICAgICAgICBpZiAoZGVjb3JhdG9yc1tpXSkge1xuICAgICAgICAgICAgcmV0W2kgKyAnX2QnXSA9IGRlY29yYXRvcnNbaV07XG4gICAgICAgICAgICByZXQudXNlRGVjb3JhdG9ycyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmVudmlyb25tZW50LnVzZVBhcnRpYWwpIHtcbiAgICAgICAgcmV0LnVzZVBhcnRpYWwgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5kYXRhKSB7XG4gICAgICAgIHJldC51c2VEYXRhID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnVzZURlcHRocykge1xuICAgICAgICByZXQudXNlRGVwdGhzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnVzZUJsb2NrUGFyYW1zKSB7XG4gICAgICAgIHJldC51c2VCbG9ja1BhcmFtcyA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmNvbXBhdCkge1xuICAgICAgICByZXQuY29tcGF0ID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFhc09iamVjdCkge1xuICAgICAgICByZXQuY29tcGlsZXIgPSBKU09OLnN0cmluZ2lmeShyZXQuY29tcGlsZXIpO1xuXG4gICAgICAgIHRoaXMuc291cmNlLmN1cnJlbnRMb2NhdGlvbiA9IHsgc3RhcnQ6IHsgbGluZTogMSwgY29sdW1uOiAwIH0gfTtcbiAgICAgICAgcmV0ID0gdGhpcy5vYmplY3RMaXRlcmFsKHJldCk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuc3JjTmFtZSkge1xuICAgICAgICAgIHJldCA9IHJldC50b1N0cmluZ1dpdGhTb3VyY2VNYXAoeyBmaWxlOiBvcHRpb25zLmRlc3ROYW1lIH0pO1xuICAgICAgICAgIHJldC5tYXAgPSByZXQubWFwICYmIHJldC5tYXAudG9TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXQgPSByZXQudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0LmNvbXBpbGVyT3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZuO1xuICAgIH1cbiAgfSxcblxuICBwcmVhbWJsZTogZnVuY3Rpb24gcHJlYW1ibGUoKSB7XG4gICAgLy8gdHJhY2sgdGhlIGxhc3QgY29udGV4dCBwdXNoZWQgaW50byBwbGFjZSB0byBhbGxvdyBza2lwcGluZyB0aGVcbiAgICAvLyBnZXRDb250ZXh0IG9wY29kZSB3aGVuIGl0IHdvdWxkIGJlIGEgbm9vcFxuICAgIHRoaXMubGFzdENvbnRleHQgPSAwO1xuICAgIHRoaXMuc291cmNlID0gbmV3IF9jb2RlR2VuMlsnZGVmYXVsdCddKHRoaXMub3B0aW9ucy5zcmNOYW1lKTtcbiAgICB0aGlzLmRlY29yYXRvcnMgPSBuZXcgX2NvZGVHZW4yWydkZWZhdWx0J10odGhpcy5vcHRpb25zLnNyY05hbWUpO1xuICB9LFxuXG4gIGNyZWF0ZUZ1bmN0aW9uQ29udGV4dDogZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb25Db250ZXh0KGFzT2JqZWN0KSB7XG4gICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcblxuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgdmFyRGVjbGFyYXRpb25zID0gJyc7XG5cbiAgICB2YXIgbG9jYWxzID0gdGhpcy5zdGFja1ZhcnMuY29uY2F0KHRoaXMucmVnaXN0ZXJzLmxpc3QpO1xuICAgIGlmIChsb2NhbHMubGVuZ3RoID4gMCkge1xuICAgICAgdmFyRGVjbGFyYXRpb25zICs9ICcsICcgKyBsb2NhbHMuam9pbignLCAnKTtcbiAgICB9XG5cbiAgICAvLyBHZW5lcmF0ZSBtaW5pbWl6ZXIgYWxpYXMgbWFwcGluZ3NcbiAgICAvL1xuICAgIC8vIFdoZW4gdXNpbmcgdHJ1ZSBTb3VyY2VOb2RlcywgdGhpcyB3aWxsIHVwZGF0ZSBhbGwgcmVmZXJlbmNlcyB0byB0aGUgZ2l2ZW4gYWxpYXNcbiAgICAvLyBhcyB0aGUgc291cmNlIG5vZGVzIGFyZSByZXVzZWQgaW4gc2l0dS4gRm9yIHRoZSBub24tc291cmNlIG5vZGUgY29tcGlsYXRpb24gbW9kZSxcbiAgICAvLyBhbGlhc2VzIHdpbGwgbm90IGJlIHVzZWQsIGJ1dCB0aGlzIGNhc2UgaXMgYWxyZWFkeSBiZWluZyBydW4gb24gdGhlIGNsaWVudCBhbmRcbiAgICAvLyB3ZSBhcmVuJ3QgY29uY2VybiBhYm91dCBtaW5pbWl6aW5nIHRoZSB0ZW1wbGF0ZSBzaXplLlxuICAgIHZhciBhbGlhc0NvdW50ID0gMDtcbiAgICBPYmplY3Qua2V5cyh0aGlzLmFsaWFzZXMpLmZvckVhY2goZnVuY3Rpb24gKGFsaWFzKSB7XG4gICAgICB2YXIgbm9kZSA9IF90aGlzLmFsaWFzZXNbYWxpYXNdO1xuICAgICAgaWYgKG5vZGUuY2hpbGRyZW4gJiYgbm9kZS5yZWZlcmVuY2VDb3VudCA+IDEpIHtcbiAgICAgICAgdmFyRGVjbGFyYXRpb25zICs9ICcsIGFsaWFzJyArICsrYWxpYXNDb3VudCArICc9JyArIGFsaWFzO1xuICAgICAgICBub2RlLmNoaWxkcmVuWzBdID0gJ2FsaWFzJyArIGFsaWFzQ291bnQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5sb29rdXBQcm9wZXJ0eUZ1bmN0aW9uSXNVc2VkKSB7XG4gICAgICB2YXJEZWNsYXJhdGlvbnMgKz0gJywgJyArIHRoaXMubG9va3VwUHJvcGVydHlGdW5jdGlvblZhckRlY2xhcmF0aW9uKCk7XG4gICAgfVxuXG4gICAgdmFyIHBhcmFtcyA9IFsnY29udGFpbmVyJywgJ2RlcHRoMCcsICdoZWxwZXJzJywgJ3BhcnRpYWxzJywgJ2RhdGEnXTtcblxuICAgIGlmICh0aGlzLnVzZUJsb2NrUGFyYW1zIHx8IHRoaXMudXNlRGVwdGhzKSB7XG4gICAgICBwYXJhbXMucHVzaCgnYmxvY2tQYXJhbXMnKTtcbiAgICB9XG4gICAgaWYgKHRoaXMudXNlRGVwdGhzKSB7XG4gICAgICBwYXJhbXMucHVzaCgnZGVwdGhzJyk7XG4gICAgfVxuXG4gICAgLy8gUGVyZm9ybSBhIHNlY29uZCBwYXNzIG92ZXIgdGhlIG91dHB1dCB0byBtZXJnZSBjb250ZW50IHdoZW4gcG9zc2libGVcbiAgICB2YXIgc291cmNlID0gdGhpcy5tZXJnZVNvdXJjZSh2YXJEZWNsYXJhdGlvbnMpO1xuXG4gICAgaWYgKGFzT2JqZWN0KSB7XG4gICAgICBwYXJhbXMucHVzaChzb3VyY2UpO1xuXG4gICAgICByZXR1cm4gRnVuY3Rpb24uYXBwbHkodGhpcywgcGFyYW1zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuc291cmNlLndyYXAoWydmdW5jdGlvbignLCBwYXJhbXMuam9pbignLCcpLCAnKSB7XFxuICAnLCBzb3VyY2UsICd9J10pO1xuICAgIH1cbiAgfSxcbiAgbWVyZ2VTb3VyY2U6IGZ1bmN0aW9uIG1lcmdlU291cmNlKHZhckRlY2xhcmF0aW9ucykge1xuICAgIHZhciBpc1NpbXBsZSA9IHRoaXMuZW52aXJvbm1lbnQuaXNTaW1wbGUsXG4gICAgICAgIGFwcGVuZE9ubHkgPSAhdGhpcy5mb3JjZUJ1ZmZlcixcbiAgICAgICAgYXBwZW5kRmlyc3QgPSB1bmRlZmluZWQsXG4gICAgICAgIHNvdXJjZVNlZW4gPSB1bmRlZmluZWQsXG4gICAgICAgIGJ1ZmZlclN0YXJ0ID0gdW5kZWZpbmVkLFxuICAgICAgICBidWZmZXJFbmQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zb3VyY2UuZWFjaChmdW5jdGlvbiAobGluZSkge1xuICAgICAgaWYgKGxpbmUuYXBwZW5kVG9CdWZmZXIpIHtcbiAgICAgICAgaWYgKGJ1ZmZlclN0YXJ0KSB7XG4gICAgICAgICAgbGluZS5wcmVwZW5kKCcgICsgJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnVmZmVyU3RhcnQgPSBsaW5lO1xuICAgICAgICB9XG4gICAgICAgIGJ1ZmZlckVuZCA9IGxpbmU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoYnVmZmVyU3RhcnQpIHtcbiAgICAgICAgICBpZiAoIXNvdXJjZVNlZW4pIHtcbiAgICAgICAgICAgIGFwcGVuZEZpcnN0ID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnVmZmVyU3RhcnQucHJlcGVuZCgnYnVmZmVyICs9ICcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBidWZmZXJFbmQuYWRkKCc7Jyk7XG4gICAgICAgICAgYnVmZmVyU3RhcnQgPSBidWZmZXJFbmQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBzb3VyY2VTZWVuID0gdHJ1ZTtcbiAgICAgICAgaWYgKCFpc1NpbXBsZSkge1xuICAgICAgICAgIGFwcGVuZE9ubHkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGFwcGVuZE9ubHkpIHtcbiAgICAgIGlmIChidWZmZXJTdGFydCkge1xuICAgICAgICBidWZmZXJTdGFydC5wcmVwZW5kKCdyZXR1cm4gJyk7XG4gICAgICAgIGJ1ZmZlckVuZC5hZGQoJzsnKTtcbiAgICAgIH0gZWxzZSBpZiAoIXNvdXJjZVNlZW4pIHtcbiAgICAgICAgdGhpcy5zb3VyY2UucHVzaCgncmV0dXJuIFwiXCI7Jyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhckRlY2xhcmF0aW9ucyArPSAnLCBidWZmZXIgPSAnICsgKGFwcGVuZEZpcnN0ID8gJycgOiB0aGlzLmluaXRpYWxpemVCdWZmZXIoKSk7XG5cbiAgICAgIGlmIChidWZmZXJTdGFydCkge1xuICAgICAgICBidWZmZXJTdGFydC5wcmVwZW5kKCdyZXR1cm4gYnVmZmVyICsgJyk7XG4gICAgICAgIGJ1ZmZlckVuZC5hZGQoJzsnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc291cmNlLnB1c2goJ3JldHVybiBidWZmZXI7Jyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHZhckRlY2xhcmF0aW9ucykge1xuICAgICAgdGhpcy5zb3VyY2UucHJlcGVuZCgndmFyICcgKyB2YXJEZWNsYXJhdGlvbnMuc3Vic3RyaW5nKDIpICsgKGFwcGVuZEZpcnN0ID8gJycgOiAnO1xcbicpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zb3VyY2UubWVyZ2UoKTtcbiAgfSxcblxuICBsb29rdXBQcm9wZXJ0eUZ1bmN0aW9uVmFyRGVjbGFyYXRpb246IGZ1bmN0aW9uIGxvb2t1cFByb3BlcnR5RnVuY3Rpb25WYXJEZWNsYXJhdGlvbigpIHtcbiAgICByZXR1cm4gJ1xcbiAgICAgIGxvb2t1cFByb3BlcnR5ID0gY29udGFpbmVyLmxvb2t1cFByb3BlcnR5IHx8IGZ1bmN0aW9uKHBhcmVudCwgcHJvcGVydHlOYW1lKSB7XFxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHBhcmVudCwgcHJvcGVydHlOYW1lKSkge1xcbiAgICAgICAgICByZXR1cm4gcGFyZW50W3Byb3BlcnR5TmFtZV07XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXFxuICAgIH1cXG4gICAgJy50cmltKCk7XG4gIH0sXG5cbiAgLy8gW2Jsb2NrVmFsdWVdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IGhhc2gsIGludmVyc2UsIHByb2dyYW0sIHZhbHVlXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogcmV0dXJuIHZhbHVlIG9mIGJsb2NrSGVscGVyTWlzc2luZ1xuICAvL1xuICAvLyBUaGUgcHVycG9zZSBvZiB0aGlzIG9wY29kZSBpcyB0byB0YWtlIGEgYmxvY2sgb2YgdGhlIGZvcm1cbiAgLy8gYHt7I3RoaXMuZm9vfX0uLi57ey90aGlzLmZvb319YCwgcmVzb2x2ZSB0aGUgdmFsdWUgb2YgYGZvb2AsIGFuZFxuICAvLyByZXBsYWNlIGl0IG9uIHRoZSBzdGFjayB3aXRoIHRoZSByZXN1bHQgb2YgcHJvcGVybHlcbiAgLy8gaW52b2tpbmcgYmxvY2tIZWxwZXJNaXNzaW5nLlxuICBibG9ja1ZhbHVlOiBmdW5jdGlvbiBibG9ja1ZhbHVlKG5hbWUpIHtcbiAgICB2YXIgYmxvY2tIZWxwZXJNaXNzaW5nID0gdGhpcy5hbGlhc2FibGUoJ2NvbnRhaW5lci5ob29rcy5ibG9ja0hlbHBlck1pc3NpbmcnKSxcbiAgICAgICAgcGFyYW1zID0gW3RoaXMuY29udGV4dE5hbWUoMCldO1xuICAgIHRoaXMuc2V0dXBIZWxwZXJBcmdzKG5hbWUsIDAsIHBhcmFtcyk7XG5cbiAgICB2YXIgYmxvY2tOYW1lID0gdGhpcy5wb3BTdGFjaygpO1xuICAgIHBhcmFtcy5zcGxpY2UoMSwgMCwgYmxvY2tOYW1lKTtcblxuICAgIHRoaXMucHVzaCh0aGlzLnNvdXJjZS5mdW5jdGlvbkNhbGwoYmxvY2tIZWxwZXJNaXNzaW5nLCAnY2FsbCcsIHBhcmFtcykpO1xuICB9LFxuXG4gIC8vIFthbWJpZ3VvdXNCbG9ja1ZhbHVlXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiBoYXNoLCBpbnZlcnNlLCBwcm9ncmFtLCB2YWx1ZVxuICAvLyBDb21waWxlciB2YWx1ZSwgYmVmb3JlOiBsYXN0SGVscGVyPXZhbHVlIG9mIGxhc3QgZm91bmQgaGVscGVyLCBpZiBhbnlcbiAgLy8gT24gc3RhY2ssIGFmdGVyLCBpZiBubyBsYXN0SGVscGVyOiBzYW1lIGFzIFtibG9ja1ZhbHVlXVxuICAvLyBPbiBzdGFjaywgYWZ0ZXIsIGlmIGxhc3RIZWxwZXI6IHZhbHVlXG4gIGFtYmlndW91c0Jsb2NrVmFsdWU6IGZ1bmN0aW9uIGFtYmlndW91c0Jsb2NrVmFsdWUoKSB7XG4gICAgLy8gV2UncmUgYmVpbmcgYSBiaXQgY2hlZWt5IGFuZCByZXVzaW5nIHRoZSBvcHRpb25zIHZhbHVlIGZyb20gdGhlIHByaW9yIGV4ZWNcbiAgICB2YXIgYmxvY2tIZWxwZXJNaXNzaW5nID0gdGhpcy5hbGlhc2FibGUoJ2NvbnRhaW5lci5ob29rcy5ibG9ja0hlbHBlck1pc3NpbmcnKSxcbiAgICAgICAgcGFyYW1zID0gW3RoaXMuY29udGV4dE5hbWUoMCldO1xuICAgIHRoaXMuc2V0dXBIZWxwZXJBcmdzKCcnLCAwLCBwYXJhbXMsIHRydWUpO1xuXG4gICAgdGhpcy5mbHVzaElubGluZSgpO1xuXG4gICAgdmFyIGN1cnJlbnQgPSB0aGlzLnRvcFN0YWNrKCk7XG4gICAgcGFyYW1zLnNwbGljZSgxLCAwLCBjdXJyZW50KTtcblxuICAgIHRoaXMucHVzaFNvdXJjZShbJ2lmICghJywgdGhpcy5sYXN0SGVscGVyLCAnKSB7ICcsIGN1cnJlbnQsICcgPSAnLCB0aGlzLnNvdXJjZS5mdW5jdGlvbkNhbGwoYmxvY2tIZWxwZXJNaXNzaW5nLCAnY2FsbCcsIHBhcmFtcyksICd9J10pO1xuICB9LFxuXG4gIC8vIFthcHBlbmRDb250ZW50XVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi5cbiAgLy9cbiAgLy8gQXBwZW5kcyB0aGUgc3RyaW5nIHZhbHVlIG9mIGBjb250ZW50YCB0byB0aGUgY3VycmVudCBidWZmZXJcbiAgYXBwZW5kQ29udGVudDogZnVuY3Rpb24gYXBwZW5kQ29udGVudChjb250ZW50KSB7XG4gICAgaWYgKHRoaXMucGVuZGluZ0NvbnRlbnQpIHtcbiAgICAgIGNvbnRlbnQgPSB0aGlzLnBlbmRpbmdDb250ZW50ICsgY29udGVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wZW5kaW5nTG9jYXRpb24gPSB0aGlzLnNvdXJjZS5jdXJyZW50TG9jYXRpb247XG4gICAgfVxuXG4gICAgdGhpcy5wZW5kaW5nQ29udGVudCA9IGNvbnRlbnQ7XG4gIH0sXG5cbiAgLy8gW2FwcGVuZF1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogdmFsdWUsIC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IC4uLlxuICAvL1xuICAvLyBDb2VyY2VzIGB2YWx1ZWAgdG8gYSBTdHJpbmcgYW5kIGFwcGVuZHMgaXQgdG8gdGhlIGN1cnJlbnQgYnVmZmVyLlxuICAvL1xuICAvLyBJZiBgdmFsdWVgIGlzIHRydXRoeSwgb3IgMCwgaXQgaXMgY29lcmNlZCBpbnRvIGEgc3RyaW5nIGFuZCBhcHBlbmRlZFxuICAvLyBPdGhlcndpc2UsIHRoZSBlbXB0eSBzdHJpbmcgaXMgYXBwZW5kZWRcbiAgYXBwZW5kOiBmdW5jdGlvbiBhcHBlbmQoKSB7XG4gICAgaWYgKHRoaXMuaXNJbmxpbmUoKSkge1xuICAgICAgdGhpcy5yZXBsYWNlU3RhY2soZnVuY3Rpb24gKGN1cnJlbnQpIHtcbiAgICAgICAgcmV0dXJuIFsnICE9IG51bGwgPyAnLCBjdXJyZW50LCAnIDogXCJcIiddO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMucHVzaFNvdXJjZSh0aGlzLmFwcGVuZFRvQnVmZmVyKHRoaXMucG9wU3RhY2soKSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYWwgPSB0aGlzLnBvcFN0YWNrKCk7XG4gICAgICB0aGlzLnB1c2hTb3VyY2UoWydpZiAoJywgbG9jYWwsICcgIT0gbnVsbCkgeyAnLCB0aGlzLmFwcGVuZFRvQnVmZmVyKGxvY2FsLCB1bmRlZmluZWQsIHRydWUpLCAnIH0nXSk7XG4gICAgICBpZiAodGhpcy5lbnZpcm9ubWVudC5pc1NpbXBsZSkge1xuICAgICAgICB0aGlzLnB1c2hTb3VyY2UoWydlbHNlIHsgJywgdGhpcy5hcHBlbmRUb0J1ZmZlcihcIicnXCIsIHVuZGVmaW5lZCwgdHJ1ZSksICcgfSddKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLy8gW2FwcGVuZEVzY2FwZWRdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IHZhbHVlLCAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi5cbiAgLy9cbiAgLy8gRXNjYXBlIGB2YWx1ZWAgYW5kIGFwcGVuZCBpdCB0byB0aGUgYnVmZmVyXG4gIGFwcGVuZEVzY2FwZWQ6IGZ1bmN0aW9uIGFwcGVuZEVzY2FwZWQoKSB7XG4gICAgdGhpcy5wdXNoU291cmNlKHRoaXMuYXBwZW5kVG9CdWZmZXIoW3RoaXMuYWxpYXNhYmxlKCdjb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbicpLCAnKCcsIHRoaXMucG9wU3RhY2soKSwgJyknXSkpO1xuICB9LFxuXG4gIC8vIFtnZXRDb250ZXh0XVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiAuLi5cbiAgLy8gQ29tcGlsZXIgdmFsdWUsIGFmdGVyOiBsYXN0Q29udGV4dD1kZXB0aFxuICAvL1xuICAvLyBTZXQgdGhlIHZhbHVlIG9mIHRoZSBgbGFzdENvbnRleHRgIGNvbXBpbGVyIHZhbHVlIHRvIHRoZSBkZXB0aFxuICBnZXRDb250ZXh0OiBmdW5jdGlvbiBnZXRDb250ZXh0KGRlcHRoKSB7XG4gICAgdGhpcy5sYXN0Q29udGV4dCA9IGRlcHRoO1xuICB9LFxuXG4gIC8vIFtwdXNoQ29udGV4dF1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogY3VycmVudENvbnRleHQsIC4uLlxuICAvL1xuICAvLyBQdXNoZXMgdGhlIHZhbHVlIG9mIHRoZSBjdXJyZW50IGNvbnRleHQgb250byB0aGUgc3RhY2suXG4gIHB1c2hDb250ZXh0OiBmdW5jdGlvbiBwdXNoQ29udGV4dCgpIHtcbiAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwodGhpcy5jb250ZXh0TmFtZSh0aGlzLmxhc3RDb250ZXh0KSk7XG4gIH0sXG5cbiAgLy8gW2xvb2t1cE9uQ29udGV4dF1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogY3VycmVudENvbnRleHRbbmFtZV0sIC4uLlxuICAvL1xuICAvLyBMb29rcyB1cCB0aGUgdmFsdWUgb2YgYG5hbWVgIG9uIHRoZSBjdXJyZW50IGNvbnRleHQgYW5kIHB1c2hlc1xuICAvLyBpdCBvbnRvIHRoZSBzdGFjay5cbiAgbG9va3VwT25Db250ZXh0OiBmdW5jdGlvbiBsb29rdXBPbkNvbnRleHQocGFydHMsIGZhbHN5LCBzdHJpY3QsIHNjb3BlZCkge1xuICAgIHZhciBpID0gMDtcblxuICAgIGlmICghc2NvcGVkICYmIHRoaXMub3B0aW9ucy5jb21wYXQgJiYgIXRoaXMubGFzdENvbnRleHQpIHtcbiAgICAgIC8vIFRoZSBkZXB0aGVkIHF1ZXJ5IGlzIGV4cGVjdGVkIHRvIGhhbmRsZSB0aGUgdW5kZWZpbmVkIGxvZ2ljIGZvciB0aGUgcm9vdCBsZXZlbCB0aGF0XG4gICAgICAvLyBpcyBpbXBsZW1lbnRlZCBiZWxvdywgc28gd2UgZXZhbHVhdGUgdGhhdCBkaXJlY3RseSBpbiBjb21wYXQgbW9kZVxuICAgICAgdGhpcy5wdXNoKHRoaXMuZGVwdGhlZExvb2t1cChwYXJ0c1tpKytdKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHVzaENvbnRleHQoKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlc29sdmVQYXRoKCdjb250ZXh0JywgcGFydHMsIGksIGZhbHN5LCBzdHJpY3QpO1xuICB9LFxuXG4gIC8vIFtsb29rdXBCbG9ja1BhcmFtXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiBibG9ja1BhcmFtW25hbWVdLCAuLi5cbiAgLy9cbiAgLy8gTG9va3MgdXAgdGhlIHZhbHVlIG9mIGBwYXJ0c2Agb24gdGhlIGdpdmVuIGJsb2NrIHBhcmFtIGFuZCBwdXNoZXNcbiAgLy8gaXQgb250byB0aGUgc3RhY2suXG4gIGxvb2t1cEJsb2NrUGFyYW06IGZ1bmN0aW9uIGxvb2t1cEJsb2NrUGFyYW0oYmxvY2tQYXJhbUlkLCBwYXJ0cykge1xuICAgIHRoaXMudXNlQmxvY2tQYXJhbXMgPSB0cnVlO1xuXG4gICAgdGhpcy5wdXNoKFsnYmxvY2tQYXJhbXNbJywgYmxvY2tQYXJhbUlkWzBdLCAnXVsnLCBibG9ja1BhcmFtSWRbMV0sICddJ10pO1xuICAgIHRoaXMucmVzb2x2ZVBhdGgoJ2NvbnRleHQnLCBwYXJ0cywgMSk7XG4gIH0sXG5cbiAgLy8gW2xvb2t1cERhdGFdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IGRhdGEsIC4uLlxuICAvL1xuICAvLyBQdXNoIHRoZSBkYXRhIGxvb2t1cCBvcGVyYXRvclxuICBsb29rdXBEYXRhOiBmdW5jdGlvbiBsb29rdXBEYXRhKGRlcHRoLCBwYXJ0cywgc3RyaWN0KSB7XG4gICAgaWYgKCFkZXB0aCkge1xuICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKCdkYXRhJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCgnY29udGFpbmVyLmRhdGEoZGF0YSwgJyArIGRlcHRoICsgJyknKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlc29sdmVQYXRoKCdkYXRhJywgcGFydHMsIDAsIHRydWUsIHN0cmljdCk7XG4gIH0sXG5cbiAgcmVzb2x2ZVBhdGg6IGZ1bmN0aW9uIHJlc29sdmVQYXRoKHR5cGUsIHBhcnRzLCBpLCBmYWxzeSwgc3RyaWN0KSB7XG4gICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcblxuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5zdHJpY3QgfHwgdGhpcy5vcHRpb25zLmFzc3VtZU9iamVjdHMpIHtcbiAgICAgIHRoaXMucHVzaChzdHJpY3RMb29rdXAodGhpcy5vcHRpb25zLnN0cmljdCAmJiBzdHJpY3QsIHRoaXMsIHBhcnRzLCBpLCB0eXBlKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGxlbiA9IHBhcnRzLmxlbmd0aDtcbiAgICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cbiAgICAgIHRoaXMucmVwbGFjZVN0YWNrKGZ1bmN0aW9uIChjdXJyZW50KSB7XG4gICAgICAgIHZhciBsb29rdXAgPSBfdGhpczIubmFtZUxvb2t1cChjdXJyZW50LCBwYXJ0c1tpXSwgdHlwZSk7XG4gICAgICAgIC8vIFdlIHdhbnQgdG8gZW5zdXJlIHRoYXQgemVybyBhbmQgZmFsc2UgYXJlIGhhbmRsZWQgcHJvcGVybHkgaWYgdGhlIGNvbnRleHQgKGZhbHN5IGZsYWcpXG4gICAgICAgIC8vIG5lZWRzIHRvIGhhdmUgdGhlIHNwZWNpYWwgaGFuZGxpbmcgZm9yIHRoZXNlIHZhbHVlcy5cbiAgICAgICAgaWYgKCFmYWxzeSkge1xuICAgICAgICAgIHJldHVybiBbJyAhPSBudWxsID8gJywgbG9va3VwLCAnIDogJywgY3VycmVudF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIHdlIGNhbiB1c2UgZ2VuZXJpYyBmYWxzeSBoYW5kbGluZ1xuICAgICAgICAgIHJldHVybiBbJyAmJiAnLCBsb29rdXBdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG4gICAgfVxuICB9LFxuXG4gIC8vIFtyZXNvbHZlUG9zc2libGVMYW1iZGFdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IHZhbHVlLCAuLi5cbiAgLy8gT24gc3RhY2ssIGFmdGVyOiByZXNvbHZlZCB2YWx1ZSwgLi4uXG4gIC8vXG4gIC8vIElmIHRoZSBgdmFsdWVgIGlzIGEgbGFtYmRhLCByZXBsYWNlIGl0IG9uIHRoZSBzdGFjayBieVxuICAvLyB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBsYW1iZGFcbiAgcmVzb2x2ZVBvc3NpYmxlTGFtYmRhOiBmdW5jdGlvbiByZXNvbHZlUG9zc2libGVMYW1iZGEoKSB7XG4gICAgdGhpcy5wdXNoKFt0aGlzLmFsaWFzYWJsZSgnY29udGFpbmVyLmxhbWJkYScpLCAnKCcsIHRoaXMucG9wU3RhY2soKSwgJywgJywgdGhpcy5jb250ZXh0TmFtZSgwKSwgJyknXSk7XG4gIH0sXG5cbiAgLy8gW3B1c2hTdHJpbmdQYXJhbV1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogc3RyaW5nLCBjdXJyZW50Q29udGV4dCwgLi4uXG4gIC8vXG4gIC8vIFRoaXMgb3Bjb2RlIGlzIGRlc2lnbmVkIGZvciB1c2UgaW4gc3RyaW5nIG1vZGUsIHdoaWNoXG4gIC8vIHByb3ZpZGVzIHRoZSBzdHJpbmcgdmFsdWUgb2YgYSBwYXJhbWV0ZXIgYWxvbmcgd2l0aCBpdHNcbiAgLy8gZGVwdGggcmF0aGVyIHRoYW4gcmVzb2x2aW5nIGl0IGltbWVkaWF0ZWx5LlxuICBwdXNoU3RyaW5nUGFyYW06IGZ1bmN0aW9uIHB1c2hTdHJpbmdQYXJhbShzdHJpbmcsIHR5cGUpIHtcbiAgICB0aGlzLnB1c2hDb250ZXh0KCk7XG4gICAgdGhpcy5wdXNoU3RyaW5nKHR5cGUpO1xuXG4gICAgLy8gSWYgaXQncyBhIHN1YmV4cHJlc3Npb24sIHRoZSBzdHJpbmcgcmVzdWx0XG4gICAgLy8gd2lsbCBiZSBwdXNoZWQgYWZ0ZXIgdGhpcyBvcGNvZGUuXG4gICAgaWYgKHR5cGUgIT09ICdTdWJFeHByZXNzaW9uJykge1xuICAgICAgaWYgKHR5cGVvZiBzdHJpbmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMucHVzaFN0cmluZyhzdHJpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKHN0cmluZyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGVtcHR5SGFzaDogZnVuY3Rpb24gZW1wdHlIYXNoKG9taXRFbXB0eSkge1xuICAgIGlmICh0aGlzLnRyYWNrSWRzKSB7XG4gICAgICB0aGlzLnB1c2goJ3t9Jyk7IC8vIGhhc2hJZHNcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RyaW5nUGFyYW1zKSB7XG4gICAgICB0aGlzLnB1c2goJ3t9Jyk7IC8vIGhhc2hDb250ZXh0c1xuICAgICAgdGhpcy5wdXNoKCd7fScpOyAvLyBoYXNoVHlwZXNcbiAgICB9XG4gICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKG9taXRFbXB0eSA/ICd1bmRlZmluZWQnIDogJ3t9Jyk7XG4gIH0sXG4gIHB1c2hIYXNoOiBmdW5jdGlvbiBwdXNoSGFzaCgpIHtcbiAgICBpZiAodGhpcy5oYXNoKSB7XG4gICAgICB0aGlzLmhhc2hlcy5wdXNoKHRoaXMuaGFzaCk7XG4gICAgfVxuICAgIHRoaXMuaGFzaCA9IHsgdmFsdWVzOiB7fSwgdHlwZXM6IFtdLCBjb250ZXh0czogW10sIGlkczogW10gfTtcbiAgfSxcbiAgcG9wSGFzaDogZnVuY3Rpb24gcG9wSGFzaCgpIHtcbiAgICB2YXIgaGFzaCA9IHRoaXMuaGFzaDtcbiAgICB0aGlzLmhhc2ggPSB0aGlzLmhhc2hlcy5wb3AoKTtcblxuICAgIGlmICh0aGlzLnRyYWNrSWRzKSB7XG4gICAgICB0aGlzLnB1c2godGhpcy5vYmplY3RMaXRlcmFsKGhhc2guaWRzKSk7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0cmluZ1BhcmFtcykge1xuICAgICAgdGhpcy5wdXNoKHRoaXMub2JqZWN0TGl0ZXJhbChoYXNoLmNvbnRleHRzKSk7XG4gICAgICB0aGlzLnB1c2godGhpcy5vYmplY3RMaXRlcmFsKGhhc2gudHlwZXMpKTtcbiAgICB9XG5cbiAgICB0aGlzLnB1c2godGhpcy5vYmplY3RMaXRlcmFsKGhhc2gudmFsdWVzKSk7XG4gIH0sXG5cbiAgLy8gW3B1c2hTdHJpbmddXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHF1b3RlZFN0cmluZyhzdHJpbmcpLCAuLi5cbiAgLy9cbiAgLy8gUHVzaCBhIHF1b3RlZCB2ZXJzaW9uIG9mIGBzdHJpbmdgIG9udG8gdGhlIHN0YWNrXG4gIHB1c2hTdHJpbmc6IGZ1bmN0aW9uIHB1c2hTdHJpbmcoc3RyaW5nKSB7XG4gICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKHRoaXMucXVvdGVkU3RyaW5nKHN0cmluZykpO1xuICB9LFxuXG4gIC8vIFtwdXNoTGl0ZXJhbF1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogdmFsdWUsIC4uLlxuICAvL1xuICAvLyBQdXNoZXMgYSB2YWx1ZSBvbnRvIHRoZSBzdGFjay4gVGhpcyBvcGVyYXRpb24gcHJldmVudHNcbiAgLy8gdGhlIGNvbXBpbGVyIGZyb20gY3JlYXRpbmcgYSB0ZW1wb3JhcnkgdmFyaWFibGUgdG8gaG9sZFxuICAvLyBpdC5cbiAgcHVzaExpdGVyYWw6IGZ1bmN0aW9uIHB1c2hMaXRlcmFsKHZhbHVlKSB7XG4gICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKHZhbHVlKTtcbiAgfSxcblxuICAvLyBbcHVzaFByb2dyYW1dXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHByb2dyYW0oZ3VpZCksIC4uLlxuICAvL1xuICAvLyBQdXNoIGEgcHJvZ3JhbSBleHByZXNzaW9uIG9udG8gdGhlIHN0YWNrLiBUaGlzIHRha2VzXG4gIC8vIGEgY29tcGlsZS10aW1lIGd1aWQgYW5kIGNvbnZlcnRzIGl0IGludG8gYSBydW50aW1lLWFjY2Vzc2libGVcbiAgLy8gZXhwcmVzc2lvbi5cbiAgcHVzaFByb2dyYW06IGZ1bmN0aW9uIHB1c2hQcm9ncmFtKGd1aWQpIHtcbiAgICBpZiAoZ3VpZCAhPSBudWxsKSB7XG4gICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwodGhpcy5wcm9ncmFtRXhwcmVzc2lvbihndWlkKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbChudWxsKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gW3JlZ2lzdGVyRGVjb3JhdG9yXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiBoYXNoLCBwcm9ncmFtLCBwYXJhbXMuLi4sIC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IC4uLlxuICAvL1xuICAvLyBQb3BzIG9mZiB0aGUgZGVjb3JhdG9yJ3MgcGFyYW1ldGVycywgaW52b2tlcyB0aGUgZGVjb3JhdG9yLFxuICAvLyBhbmQgaW5zZXJ0cyB0aGUgZGVjb3JhdG9yIGludG8gdGhlIGRlY29yYXRvcnMgbGlzdC5cbiAgcmVnaXN0ZXJEZWNvcmF0b3I6IGZ1bmN0aW9uIHJlZ2lzdGVyRGVjb3JhdG9yKHBhcmFtU2l6ZSwgbmFtZSkge1xuICAgIHZhciBmb3VuZERlY29yYXRvciA9IHRoaXMubmFtZUxvb2t1cCgnZGVjb3JhdG9ycycsIG5hbWUsICdkZWNvcmF0b3InKSxcbiAgICAgICAgb3B0aW9ucyA9IHRoaXMuc2V0dXBIZWxwZXJBcmdzKG5hbWUsIHBhcmFtU2l6ZSk7XG5cbiAgICB0aGlzLmRlY29yYXRvcnMucHVzaChbJ2ZuID0gJywgdGhpcy5kZWNvcmF0b3JzLmZ1bmN0aW9uQ2FsbChmb3VuZERlY29yYXRvciwgJycsIFsnZm4nLCAncHJvcHMnLCAnY29udGFpbmVyJywgb3B0aW9uc10pLCAnIHx8IGZuOyddKTtcbiAgfSxcblxuICAvLyBbaW52b2tlSGVscGVyXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiBoYXNoLCBpbnZlcnNlLCBwcm9ncmFtLCBwYXJhbXMuLi4sIC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHJlc3VsdCBvZiBoZWxwZXIgaW52b2NhdGlvblxuICAvL1xuICAvLyBQb3BzIG9mZiB0aGUgaGVscGVyJ3MgcGFyYW1ldGVycywgaW52b2tlcyB0aGUgaGVscGVyLFxuICAvLyBhbmQgcHVzaGVzIHRoZSBoZWxwZXIncyByZXR1cm4gdmFsdWUgb250byB0aGUgc3RhY2suXG4gIC8vXG4gIC8vIElmIHRoZSBoZWxwZXIgaXMgbm90IGZvdW5kLCBgaGVscGVyTWlzc2luZ2AgaXMgY2FsbGVkLlxuICBpbnZva2VIZWxwZXI6IGZ1bmN0aW9uIGludm9rZUhlbHBlcihwYXJhbVNpemUsIG5hbWUsIGlzU2ltcGxlKSB7XG4gICAgdmFyIG5vbkhlbHBlciA9IHRoaXMucG9wU3RhY2soKSxcbiAgICAgICAgaGVscGVyID0gdGhpcy5zZXR1cEhlbHBlcihwYXJhbVNpemUsIG5hbWUpO1xuXG4gICAgdmFyIHBvc3NpYmxlRnVuY3Rpb25DYWxscyA9IFtdO1xuXG4gICAgaWYgKGlzU2ltcGxlKSB7XG4gICAgICAvLyBkaXJlY3QgY2FsbCB0byBoZWxwZXJcbiAgICAgIHBvc3NpYmxlRnVuY3Rpb25DYWxscy5wdXNoKGhlbHBlci5uYW1lKTtcbiAgICB9XG4gICAgLy8gY2FsbCBhIGZ1bmN0aW9uIGZyb20gdGhlIGlucHV0IG9iamVjdFxuICAgIHBvc3NpYmxlRnVuY3Rpb25DYWxscy5wdXNoKG5vbkhlbHBlcik7XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuc3RyaWN0KSB7XG4gICAgICBwb3NzaWJsZUZ1bmN0aW9uQ2FsbHMucHVzaCh0aGlzLmFsaWFzYWJsZSgnY29udGFpbmVyLmhvb2tzLmhlbHBlck1pc3NpbmcnKSk7XG4gICAgfVxuXG4gICAgdmFyIGZ1bmN0aW9uTG9va3VwQ29kZSA9IFsnKCcsIHRoaXMuaXRlbXNTZXBhcmF0ZWRCeShwb3NzaWJsZUZ1bmN0aW9uQ2FsbHMsICd8fCcpLCAnKSddO1xuICAgIHZhciBmdW5jdGlvbkNhbGwgPSB0aGlzLnNvdXJjZS5mdW5jdGlvbkNhbGwoZnVuY3Rpb25Mb29rdXBDb2RlLCAnY2FsbCcsIGhlbHBlci5jYWxsUGFyYW1zKTtcbiAgICB0aGlzLnB1c2goZnVuY3Rpb25DYWxsKTtcbiAgfSxcblxuICBpdGVtc1NlcGFyYXRlZEJ5OiBmdW5jdGlvbiBpdGVtc1NlcGFyYXRlZEJ5KGl0ZW1zLCBzZXBhcmF0b3IpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgcmVzdWx0LnB1c2goaXRlbXNbMF0pO1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3VsdC5wdXNoKHNlcGFyYXRvciwgaXRlbXNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuICAvLyBbaW52b2tlS25vd25IZWxwZXJdXG4gIC8vXG4gIC8vIE9uIHN0YWNrLCBiZWZvcmU6IGhhc2gsIGludmVyc2UsIHByb2dyYW0sIHBhcmFtcy4uLiwgLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogcmVzdWx0IG9mIGhlbHBlciBpbnZvY2F0aW9uXG4gIC8vXG4gIC8vIFRoaXMgb3BlcmF0aW9uIGlzIHVzZWQgd2hlbiB0aGUgaGVscGVyIGlzIGtub3duIHRvIGV4aXN0LFxuICAvLyBzbyBhIGBoZWxwZXJNaXNzaW5nYCBmYWxsYmFjayBpcyBub3QgcmVxdWlyZWQuXG4gIGludm9rZUtub3duSGVscGVyOiBmdW5jdGlvbiBpbnZva2VLbm93bkhlbHBlcihwYXJhbVNpemUsIG5hbWUpIHtcbiAgICB2YXIgaGVscGVyID0gdGhpcy5zZXR1cEhlbHBlcihwYXJhbVNpemUsIG5hbWUpO1xuICAgIHRoaXMucHVzaCh0aGlzLnNvdXJjZS5mdW5jdGlvbkNhbGwoaGVscGVyLm5hbWUsICdjYWxsJywgaGVscGVyLmNhbGxQYXJhbXMpKTtcbiAgfSxcblxuICAvLyBbaW52b2tlQW1iaWd1b3VzXVxuICAvL1xuICAvLyBPbiBzdGFjaywgYmVmb3JlOiBoYXNoLCBpbnZlcnNlLCBwcm9ncmFtLCBwYXJhbXMuLi4sIC4uLlxuICAvLyBPbiBzdGFjaywgYWZ0ZXI6IHJlc3VsdCBvZiBkaXNhbWJpZ3VhdGlvblxuICAvL1xuICAvLyBUaGlzIG9wZXJhdGlvbiBpcyB1c2VkIHdoZW4gYW4gZXhwcmVzc2lvbiBsaWtlIGB7e2Zvb319YFxuICAvLyBpcyBwcm92aWRlZCwgYnV0IHdlIGRvbid0IGtub3cgYXQgY29tcGlsZS10aW1lIHdoZXRoZXIgaXRcbiAgLy8gaXMgYSBoZWxwZXIgb3IgYSBwYXRoLlxuICAvL1xuICAvLyBUaGlzIG9wZXJhdGlvbiBlbWl0cyBtb3JlIGNvZGUgdGhhbiB0aGUgb3RoZXIgb3B0aW9ucyxcbiAgLy8gYW5kIGNhbiBiZSBhdm9pZGVkIGJ5IHBhc3NpbmcgdGhlIGBrbm93bkhlbHBlcnNgIGFuZFxuICAvLyBga25vd25IZWxwZXJzT25seWAgZmxhZ3MgYXQgY29tcGlsZS10aW1lLlxuICBpbnZva2VBbWJpZ3VvdXM6IGZ1bmN0aW9uIGludm9rZUFtYmlndW91cyhuYW1lLCBoZWxwZXJDYWxsKSB7XG4gICAgdGhpcy51c2VSZWdpc3RlcignaGVscGVyJyk7XG5cbiAgICB2YXIgbm9uSGVscGVyID0gdGhpcy5wb3BTdGFjaygpO1xuXG4gICAgdGhpcy5lbXB0eUhhc2goKTtcbiAgICB2YXIgaGVscGVyID0gdGhpcy5zZXR1cEhlbHBlcigwLCBuYW1lLCBoZWxwZXJDYWxsKTtcblxuICAgIHZhciBoZWxwZXJOYW1lID0gdGhpcy5sYXN0SGVscGVyID0gdGhpcy5uYW1lTG9va3VwKCdoZWxwZXJzJywgbmFtZSwgJ2hlbHBlcicpO1xuXG4gICAgdmFyIGxvb2t1cCA9IFsnKCcsICcoaGVscGVyID0gJywgaGVscGVyTmFtZSwgJyB8fCAnLCBub25IZWxwZXIsICcpJ107XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuc3RyaWN0KSB7XG4gICAgICBsb29rdXBbMF0gPSAnKGhlbHBlciA9ICc7XG4gICAgICBsb29rdXAucHVzaCgnICE9IG51bGwgPyBoZWxwZXIgOiAnLCB0aGlzLmFsaWFzYWJsZSgnY29udGFpbmVyLmhvb2tzLmhlbHBlck1pc3NpbmcnKSk7XG4gICAgfVxuXG4gICAgdGhpcy5wdXNoKFsnKCcsIGxvb2t1cCwgaGVscGVyLnBhcmFtc0luaXQgPyBbJyksKCcsIGhlbHBlci5wYXJhbXNJbml0XSA6IFtdLCAnKSwnLCAnKHR5cGVvZiBoZWxwZXIgPT09ICcsIHRoaXMuYWxpYXNhYmxlKCdcImZ1bmN0aW9uXCInKSwgJyA/ICcsIHRoaXMuc291cmNlLmZ1bmN0aW9uQ2FsbCgnaGVscGVyJywgJ2NhbGwnLCBoZWxwZXIuY2FsbFBhcmFtcyksICcgOiBoZWxwZXIpKSddKTtcbiAgfSxcblxuICAvLyBbaW52b2tlUGFydGlhbF1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogY29udGV4dCwgLi4uXG4gIC8vIE9uIHN0YWNrIGFmdGVyOiByZXN1bHQgb2YgcGFydGlhbCBpbnZvY2F0aW9uXG4gIC8vXG4gIC8vIFRoaXMgb3BlcmF0aW9uIHBvcHMgb2ZmIGEgY29udGV4dCwgaW52b2tlcyBhIHBhcnRpYWwgd2l0aCB0aGF0IGNvbnRleHQsXG4gIC8vIGFuZCBwdXNoZXMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2NhdGlvbiBiYWNrLlxuICBpbnZva2VQYXJ0aWFsOiBmdW5jdGlvbiBpbnZva2VQYXJ0aWFsKGlzRHluYW1pYywgbmFtZSwgaW5kZW50KSB7XG4gICAgdmFyIHBhcmFtcyA9IFtdLFxuICAgICAgICBvcHRpb25zID0gdGhpcy5zZXR1cFBhcmFtcyhuYW1lLCAxLCBwYXJhbXMpO1xuXG4gICAgaWYgKGlzRHluYW1pYykge1xuICAgICAgbmFtZSA9IHRoaXMucG9wU3RhY2soKTtcbiAgICAgIGRlbGV0ZSBvcHRpb25zLm5hbWU7XG4gICAgfVxuXG4gICAgaWYgKGluZGVudCkge1xuICAgICAgb3B0aW9ucy5pbmRlbnQgPSBKU09OLnN0cmluZ2lmeShpbmRlbnQpO1xuICAgIH1cbiAgICBvcHRpb25zLmhlbHBlcnMgPSAnaGVscGVycyc7XG4gICAgb3B0aW9ucy5wYXJ0aWFscyA9ICdwYXJ0aWFscyc7XG4gICAgb3B0aW9ucy5kZWNvcmF0b3JzID0gJ2NvbnRhaW5lci5kZWNvcmF0b3JzJztcblxuICAgIGlmICghaXNEeW5hbWljKSB7XG4gICAgICBwYXJhbXMudW5zaGlmdCh0aGlzLm5hbWVMb29rdXAoJ3BhcnRpYWxzJywgbmFtZSwgJ3BhcnRpYWwnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmFtcy51bnNoaWZ0KG5hbWUpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuY29tcGF0KSB7XG4gICAgICBvcHRpb25zLmRlcHRocyA9ICdkZXB0aHMnO1xuICAgIH1cbiAgICBvcHRpb25zID0gdGhpcy5vYmplY3RMaXRlcmFsKG9wdGlvbnMpO1xuICAgIHBhcmFtcy5wdXNoKG9wdGlvbnMpO1xuXG4gICAgdGhpcy5wdXNoKHRoaXMuc291cmNlLmZ1bmN0aW9uQ2FsbCgnY29udGFpbmVyLmludm9rZVBhcnRpYWwnLCAnJywgcGFyYW1zKSk7XG4gIH0sXG5cbiAgLy8gW2Fzc2lnblRvSGFzaF1cbiAgLy9cbiAgLy8gT24gc3RhY2ssIGJlZm9yZTogdmFsdWUsIC4uLiwgaGFzaCwgLi4uXG4gIC8vIE9uIHN0YWNrLCBhZnRlcjogLi4uLCBoYXNoLCAuLi5cbiAgLy9cbiAgLy8gUG9wcyBhIHZhbHVlIG9mZiB0aGUgc3RhY2sgYW5kIGFzc2lnbnMgaXQgdG8gdGhlIGN1cnJlbnQgaGFzaFxuICBhc3NpZ25Ub0hhc2g6IGZ1bmN0aW9uIGFzc2lnblRvSGFzaChrZXkpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLnBvcFN0YWNrKCksXG4gICAgICAgIGNvbnRleHQgPSB1bmRlZmluZWQsXG4gICAgICAgIHR5cGUgPSB1bmRlZmluZWQsXG4gICAgICAgIGlkID0gdW5kZWZpbmVkO1xuXG4gICAgaWYgKHRoaXMudHJhY2tJZHMpIHtcbiAgICAgIGlkID0gdGhpcy5wb3BTdGFjaygpO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdHJpbmdQYXJhbXMpIHtcbiAgICAgIHR5cGUgPSB0aGlzLnBvcFN0YWNrKCk7XG4gICAgICBjb250ZXh0ID0gdGhpcy5wb3BTdGFjaygpO1xuICAgIH1cblxuICAgIHZhciBoYXNoID0gdGhpcy5oYXNoO1xuICAgIGlmIChjb250ZXh0KSB7XG4gICAgICBoYXNoLmNvbnRleHRzW2tleV0gPSBjb250ZXh0O1xuICAgIH1cbiAgICBpZiAodHlwZSkge1xuICAgICAgaGFzaC50eXBlc1trZXldID0gdHlwZTtcbiAgICB9XG4gICAgaWYgKGlkKSB7XG4gICAgICBoYXNoLmlkc1trZXldID0gaWQ7XG4gICAgfVxuICAgIGhhc2gudmFsdWVzW2tleV0gPSB2YWx1ZTtcbiAgfSxcblxuICBwdXNoSWQ6IGZ1bmN0aW9uIHB1c2hJZCh0eXBlLCBuYW1lLCBjaGlsZCkge1xuICAgIGlmICh0eXBlID09PSAnQmxvY2tQYXJhbScpIHtcbiAgICAgIHRoaXMucHVzaFN0YWNrTGl0ZXJhbCgnYmxvY2tQYXJhbXNbJyArIG5hbWVbMF0gKyAnXS5wYXRoWycgKyBuYW1lWzFdICsgJ10nICsgKGNoaWxkID8gJyArICcgKyBKU09OLnN0cmluZ2lmeSgnLicgKyBjaGlsZCkgOiAnJykpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1BhdGhFeHByZXNzaW9uJykge1xuICAgICAgdGhpcy5wdXNoU3RyaW5nKG5hbWUpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1N1YkV4cHJlc3Npb24nKSB7XG4gICAgICB0aGlzLnB1c2hTdGFja0xpdGVyYWwoJ3RydWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXNoU3RhY2tMaXRlcmFsKCdudWxsJyk7XG4gICAgfVxuICB9LFxuXG4gIC8vIEhFTFBFUlNcblxuICBjb21waWxlcjogSmF2YVNjcmlwdENvbXBpbGVyLFxuXG4gIGNvbXBpbGVDaGlsZHJlbjogZnVuY3Rpb24gY29tcGlsZUNoaWxkcmVuKGVudmlyb25tZW50LCBvcHRpb25zKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gZW52aXJvbm1lbnQuY2hpbGRyZW4sXG4gICAgICAgIGNoaWxkID0gdW5kZWZpbmVkLFxuICAgICAgICBjb21waWxlciA9IHVuZGVmaW5lZDtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgY29tcGlsZXIgPSBuZXcgdGhpcy5jb21waWxlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5ldy1jYXBcblxuICAgICAgdmFyIGV4aXN0aW5nID0gdGhpcy5tYXRjaEV4aXN0aW5nUHJvZ3JhbShjaGlsZCk7XG5cbiAgICAgIGlmIChleGlzdGluZyA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuY29udGV4dC5wcm9ncmFtcy5wdXNoKCcnKTsgLy8gUGxhY2Vob2xkZXIgdG8gcHJldmVudCBuYW1lIGNvbmZsaWN0cyBmb3IgbmVzdGVkIGNoaWxkcmVuXG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuY29udGV4dC5wcm9ncmFtcy5sZW5ndGg7XG4gICAgICAgIGNoaWxkLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIGNoaWxkLm5hbWUgPSAncHJvZ3JhbScgKyBpbmRleDtcbiAgICAgICAgdGhpcy5jb250ZXh0LnByb2dyYW1zW2luZGV4XSA9IGNvbXBpbGVyLmNvbXBpbGUoY2hpbGQsIG9wdGlvbnMsIHRoaXMuY29udGV4dCwgIXRoaXMucHJlY29tcGlsZSk7XG4gICAgICAgIHRoaXMuY29udGV4dC5kZWNvcmF0b3JzW2luZGV4XSA9IGNvbXBpbGVyLmRlY29yYXRvcnM7XG4gICAgICAgIHRoaXMuY29udGV4dC5lbnZpcm9ubWVudHNbaW5kZXhdID0gY2hpbGQ7XG5cbiAgICAgICAgdGhpcy51c2VEZXB0aHMgPSB0aGlzLnVzZURlcHRocyB8fCBjb21waWxlci51c2VEZXB0aHM7XG4gICAgICAgIHRoaXMudXNlQmxvY2tQYXJhbXMgPSB0aGlzLnVzZUJsb2NrUGFyYW1zIHx8IGNvbXBpbGVyLnVzZUJsb2NrUGFyYW1zO1xuICAgICAgICBjaGlsZC51c2VEZXB0aHMgPSB0aGlzLnVzZURlcHRocztcbiAgICAgICAgY2hpbGQudXNlQmxvY2tQYXJhbXMgPSB0aGlzLnVzZUJsb2NrUGFyYW1zO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hpbGQuaW5kZXggPSBleGlzdGluZy5pbmRleDtcbiAgICAgICAgY2hpbGQubmFtZSA9ICdwcm9ncmFtJyArIGV4aXN0aW5nLmluZGV4O1xuXG4gICAgICAgIHRoaXMudXNlRGVwdGhzID0gdGhpcy51c2VEZXB0aHMgfHwgZXhpc3RpbmcudXNlRGVwdGhzO1xuICAgICAgICB0aGlzLnVzZUJsb2NrUGFyYW1zID0gdGhpcy51c2VCbG9ja1BhcmFtcyB8fCBleGlzdGluZy51c2VCbG9ja1BhcmFtcztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIG1hdGNoRXhpc3RpbmdQcm9ncmFtOiBmdW5jdGlvbiBtYXRjaEV4aXN0aW5nUHJvZ3JhbShjaGlsZCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLmNvbnRleHQuZW52aXJvbm1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgZW52aXJvbm1lbnQgPSB0aGlzLmNvbnRleHQuZW52aXJvbm1lbnRzW2ldO1xuICAgICAgaWYgKGVudmlyb25tZW50ICYmIGVudmlyb25tZW50LmVxdWFscyhjaGlsZCkpIHtcbiAgICAgICAgcmV0dXJuIGVudmlyb25tZW50O1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBwcm9ncmFtRXhwcmVzc2lvbjogZnVuY3Rpb24gcHJvZ3JhbUV4cHJlc3Npb24oZ3VpZCkge1xuICAgIHZhciBjaGlsZCA9IHRoaXMuZW52aXJvbm1lbnQuY2hpbGRyZW5bZ3VpZF0sXG4gICAgICAgIHByb2dyYW1QYXJhbXMgPSBbY2hpbGQuaW5kZXgsICdkYXRhJywgY2hpbGQuYmxvY2tQYXJhbXNdO1xuXG4gICAgaWYgKHRoaXMudXNlQmxvY2tQYXJhbXMgfHwgdGhpcy51c2VEZXB0aHMpIHtcbiAgICAgIHByb2dyYW1QYXJhbXMucHVzaCgnYmxvY2tQYXJhbXMnKTtcbiAgICB9XG4gICAgaWYgKHRoaXMudXNlRGVwdGhzKSB7XG4gICAgICBwcm9ncmFtUGFyYW1zLnB1c2goJ2RlcHRocycpO1xuICAgIH1cblxuICAgIHJldHVybiAnY29udGFpbmVyLnByb2dyYW0oJyArIHByb2dyYW1QYXJhbXMuam9pbignLCAnKSArICcpJztcbiAgfSxcblxuICB1c2VSZWdpc3RlcjogZnVuY3Rpb24gdXNlUmVnaXN0ZXIobmFtZSkge1xuICAgIGlmICghdGhpcy5yZWdpc3RlcnNbbmFtZV0pIHtcbiAgICAgIHRoaXMucmVnaXN0ZXJzW25hbWVdID0gdHJ1ZTtcbiAgICAgIHRoaXMucmVnaXN0ZXJzLmxpc3QucHVzaChuYW1lKTtcbiAgICB9XG4gIH0sXG5cbiAgcHVzaDogZnVuY3Rpb24gcHVzaChleHByKSB7XG4gICAgaWYgKCEoZXhwciBpbnN0YW5jZW9mIExpdGVyYWwpKSB7XG4gICAgICBleHByID0gdGhpcy5zb3VyY2Uud3JhcChleHByKTtcbiAgICB9XG5cbiAgICB0aGlzLmlubGluZVN0YWNrLnB1c2goZXhwcik7XG4gICAgcmV0dXJuIGV4cHI7XG4gIH0sXG5cbiAgcHVzaFN0YWNrTGl0ZXJhbDogZnVuY3Rpb24gcHVzaFN0YWNrTGl0ZXJhbChpdGVtKSB7XG4gICAgdGhpcy5wdXNoKG5ldyBMaXRlcmFsKGl0ZW0pKTtcbiAgfSxcblxuICBwdXNoU291cmNlOiBmdW5jdGlvbiBwdXNoU291cmNlKHNvdXJjZSkge1xuICAgIGlmICh0aGlzLnBlbmRpbmdDb250ZW50KSB7XG4gICAgICB0aGlzLnNvdXJjZS5wdXNoKHRoaXMuYXBwZW5kVG9CdWZmZXIodGhpcy5zb3VyY2UucXVvdGVkU3RyaW5nKHRoaXMucGVuZGluZ0NvbnRlbnQpLCB0aGlzLnBlbmRpbmdMb2NhdGlvbikpO1xuICAgICAgdGhpcy5wZW5kaW5nQ29udGVudCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAoc291cmNlKSB7XG4gICAgICB0aGlzLnNvdXJjZS5wdXNoKHNvdXJjZSk7XG4gICAgfVxuICB9LFxuXG4gIHJlcGxhY2VTdGFjazogZnVuY3Rpb24gcmVwbGFjZVN0YWNrKGNhbGxiYWNrKSB7XG4gICAgdmFyIHByZWZpeCA9IFsnKCddLFxuICAgICAgICBzdGFjayA9IHVuZGVmaW5lZCxcbiAgICAgICAgY3JlYXRlZFN0YWNrID0gdW5kZWZpbmVkLFxuICAgICAgICB1c2VkTGl0ZXJhbCA9IHVuZGVmaW5lZDtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgaWYgKCF0aGlzLmlzSW5saW5lKCkpIHtcbiAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdyZXBsYWNlU3RhY2sgb24gbm9uLWlubGluZScpO1xuICAgIH1cblxuICAgIC8vIFdlIHdhbnQgdG8gbWVyZ2UgdGhlIGlubGluZSBzdGF0ZW1lbnQgaW50byB0aGUgcmVwbGFjZW1lbnQgc3RhdGVtZW50IHZpYSAnLCdcbiAgICB2YXIgdG9wID0gdGhpcy5wb3BTdGFjayh0cnVlKTtcblxuICAgIGlmICh0b3AgaW5zdGFuY2VvZiBMaXRlcmFsKSB7XG4gICAgICAvLyBMaXRlcmFscyBkbyBub3QgbmVlZCB0byBiZSBpbmxpbmVkXG4gICAgICBzdGFjayA9IFt0b3AudmFsdWVdO1xuICAgICAgcHJlZml4ID0gWycoJywgc3RhY2tdO1xuICAgICAgdXNlZExpdGVyYWwgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBHZXQgb3IgY3JlYXRlIHRoZSBjdXJyZW50IHN0YWNrIG5hbWUgZm9yIHVzZSBieSB0aGUgaW5saW5lXG4gICAgICBjcmVhdGVkU3RhY2sgPSB0cnVlO1xuICAgICAgdmFyIF9uYW1lID0gdGhpcy5pbmNyU3RhY2soKTtcblxuICAgICAgcHJlZml4ID0gWycoKCcsIHRoaXMucHVzaChfbmFtZSksICcgPSAnLCB0b3AsICcpJ107XG4gICAgICBzdGFjayA9IHRoaXMudG9wU3RhY2soKTtcbiAgICB9XG5cbiAgICB2YXIgaXRlbSA9IGNhbGxiYWNrLmNhbGwodGhpcywgc3RhY2spO1xuXG4gICAgaWYgKCF1c2VkTGl0ZXJhbCkge1xuICAgICAgdGhpcy5wb3BTdGFjaygpO1xuICAgIH1cbiAgICBpZiAoY3JlYXRlZFN0YWNrKSB7XG4gICAgICB0aGlzLnN0YWNrU2xvdC0tO1xuICAgIH1cbiAgICB0aGlzLnB1c2gocHJlZml4LmNvbmNhdChpdGVtLCAnKScpKTtcbiAgfSxcblxuICBpbmNyU3RhY2s6IGZ1bmN0aW9uIGluY3JTdGFjaygpIHtcbiAgICB0aGlzLnN0YWNrU2xvdCsrO1xuICAgIGlmICh0aGlzLnN0YWNrU2xvdCA+IHRoaXMuc3RhY2tWYXJzLmxlbmd0aCkge1xuICAgICAgdGhpcy5zdGFja1ZhcnMucHVzaCgnc3RhY2snICsgdGhpcy5zdGFja1Nsb3QpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50b3BTdGFja05hbWUoKTtcbiAgfSxcbiAgdG9wU3RhY2tOYW1lOiBmdW5jdGlvbiB0b3BTdGFja05hbWUoKSB7XG4gICAgcmV0dXJuICdzdGFjaycgKyB0aGlzLnN0YWNrU2xvdDtcbiAgfSxcbiAgZmx1c2hJbmxpbmU6IGZ1bmN0aW9uIGZsdXNoSW5saW5lKCkge1xuICAgIHZhciBpbmxpbmVTdGFjayA9IHRoaXMuaW5saW5lU3RhY2s7XG4gICAgdGhpcy5pbmxpbmVTdGFjayA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBpbmxpbmVTdGFjay5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIGVudHJ5ID0gaW5saW5lU3RhY2tbaV07XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChlbnRyeSBpbnN0YW5jZW9mIExpdGVyYWwpIHtcbiAgICAgICAgdGhpcy5jb21waWxlU3RhY2sucHVzaChlbnRyeSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgc3RhY2sgPSB0aGlzLmluY3JTdGFjaygpO1xuICAgICAgICB0aGlzLnB1c2hTb3VyY2UoW3N0YWNrLCAnID0gJywgZW50cnksICc7J10pO1xuICAgICAgICB0aGlzLmNvbXBpbGVTdGFjay5wdXNoKHN0YWNrKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGlzSW5saW5lOiBmdW5jdGlvbiBpc0lubGluZSgpIHtcbiAgICByZXR1cm4gdGhpcy5pbmxpbmVTdGFjay5sZW5ndGg7XG4gIH0sXG5cbiAgcG9wU3RhY2s6IGZ1bmN0aW9uIHBvcFN0YWNrKHdyYXBwZWQpIHtcbiAgICB2YXIgaW5saW5lID0gdGhpcy5pc0lubGluZSgpLFxuICAgICAgICBpdGVtID0gKGlubGluZSA/IHRoaXMuaW5saW5lU3RhY2sgOiB0aGlzLmNvbXBpbGVTdGFjaykucG9wKCk7XG5cbiAgICBpZiAoIXdyYXBwZWQgJiYgaXRlbSBpbnN0YW5jZW9mIExpdGVyYWwpIHtcbiAgICAgIHJldHVybiBpdGVtLnZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWlubGluZSkge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBpZiAoIXRoaXMuc3RhY2tTbG90KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ0ludmFsaWQgc3RhY2sgcG9wJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGFja1Nsb3QtLTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cbiAgfSxcblxuICB0b3BTdGFjazogZnVuY3Rpb24gdG9wU3RhY2soKSB7XG4gICAgdmFyIHN0YWNrID0gdGhpcy5pc0lubGluZSgpID8gdGhpcy5pbmxpbmVTdGFjayA6IHRoaXMuY29tcGlsZVN0YWNrLFxuICAgICAgICBpdGVtID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIExpdGVyYWwpIHtcbiAgICAgIHJldHVybiBpdGVtLnZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9XG4gIH0sXG5cbiAgY29udGV4dE5hbWU6IGZ1bmN0aW9uIGNvbnRleHROYW1lKGNvbnRleHQpIHtcbiAgICBpZiAodGhpcy51c2VEZXB0aHMgJiYgY29udGV4dCkge1xuICAgICAgcmV0dXJuICdkZXB0aHNbJyArIGNvbnRleHQgKyAnXSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnZGVwdGgnICsgY29udGV4dDtcbiAgICB9XG4gIH0sXG5cbiAgcXVvdGVkU3RyaW5nOiBmdW5jdGlvbiBxdW90ZWRTdHJpbmcoc3RyKSB7XG4gICAgcmV0dXJuIHRoaXMuc291cmNlLnF1b3RlZFN0cmluZyhzdHIpO1xuICB9LFxuXG4gIG9iamVjdExpdGVyYWw6IGZ1bmN0aW9uIG9iamVjdExpdGVyYWwob2JqKSB7XG4gICAgcmV0dXJuIHRoaXMuc291cmNlLm9iamVjdExpdGVyYWwob2JqKTtcbiAgfSxcblxuICBhbGlhc2FibGU6IGZ1bmN0aW9uIGFsaWFzYWJsZShuYW1lKSB7XG4gICAgdmFyIHJldCA9IHRoaXMuYWxpYXNlc1tuYW1lXTtcbiAgICBpZiAocmV0KSB7XG4gICAgICByZXQucmVmZXJlbmNlQ291bnQrKztcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgcmV0ID0gdGhpcy5hbGlhc2VzW25hbWVdID0gdGhpcy5zb3VyY2Uud3JhcChuYW1lKTtcbiAgICByZXQuYWxpYXNhYmxlID0gdHJ1ZTtcbiAgICByZXQucmVmZXJlbmNlQ291bnQgPSAxO1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfSxcblxuICBzZXR1cEhlbHBlcjogZnVuY3Rpb24gc2V0dXBIZWxwZXIocGFyYW1TaXplLCBuYW1lLCBibG9ja0hlbHBlcikge1xuICAgIHZhciBwYXJhbXMgPSBbXSxcbiAgICAgICAgcGFyYW1zSW5pdCA9IHRoaXMuc2V0dXBIZWxwZXJBcmdzKG5hbWUsIHBhcmFtU2l6ZSwgcGFyYW1zLCBibG9ja0hlbHBlcik7XG4gICAgdmFyIGZvdW5kSGVscGVyID0gdGhpcy5uYW1lTG9va3VwKCdoZWxwZXJzJywgbmFtZSwgJ2hlbHBlcicpLFxuICAgICAgICBjYWxsQ29udGV4dCA9IHRoaXMuYWxpYXNhYmxlKHRoaXMuY29udGV4dE5hbWUoMCkgKyAnICE9IG51bGwgPyAnICsgdGhpcy5jb250ZXh0TmFtZSgwKSArICcgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KScpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgcGFyYW1zSW5pdDogcGFyYW1zSW5pdCxcbiAgICAgIG5hbWU6IGZvdW5kSGVscGVyLFxuICAgICAgY2FsbFBhcmFtczogW2NhbGxDb250ZXh0XS5jb25jYXQocGFyYW1zKVxuICAgIH07XG4gIH0sXG5cbiAgc2V0dXBQYXJhbXM6IGZ1bmN0aW9uIHNldHVwUGFyYW1zKGhlbHBlciwgcGFyYW1TaXplLCBwYXJhbXMpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHt9LFxuICAgICAgICBjb250ZXh0cyA9IFtdLFxuICAgICAgICB0eXBlcyA9IFtdLFxuICAgICAgICBpZHMgPSBbXSxcbiAgICAgICAgb2JqZWN0QXJncyA9ICFwYXJhbXMsXG4gICAgICAgIHBhcmFtID0gdW5kZWZpbmVkO1xuXG4gICAgaWYgKG9iamVjdEFyZ3MpIHtcbiAgICAgIHBhcmFtcyA9IFtdO1xuICAgIH1cblxuICAgIG9wdGlvbnMubmFtZSA9IHRoaXMucXVvdGVkU3RyaW5nKGhlbHBlcik7XG4gICAgb3B0aW9ucy5oYXNoID0gdGhpcy5wb3BTdGFjaygpO1xuXG4gICAgaWYgKHRoaXMudHJhY2tJZHMpIHtcbiAgICAgIG9wdGlvbnMuaGFzaElkcyA9IHRoaXMucG9wU3RhY2soKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RyaW5nUGFyYW1zKSB7XG4gICAgICBvcHRpb25zLmhhc2hUeXBlcyA9IHRoaXMucG9wU3RhY2soKTtcbiAgICAgIG9wdGlvbnMuaGFzaENvbnRleHRzID0gdGhpcy5wb3BTdGFjaygpO1xuICAgIH1cblxuICAgIHZhciBpbnZlcnNlID0gdGhpcy5wb3BTdGFjaygpLFxuICAgICAgICBwcm9ncmFtID0gdGhpcy5wb3BTdGFjaygpO1xuXG4gICAgLy8gQXZvaWQgc2V0dGluZyBmbiBhbmQgaW52ZXJzZSBpZiBuZWl0aGVyIGFyZSBzZXQuIFRoaXMgYWxsb3dzXG4gICAgLy8gaGVscGVycyB0byBkbyBhIGNoZWNrIGZvciBgaWYgKG9wdGlvbnMuZm4pYFxuICAgIGlmIChwcm9ncmFtIHx8IGludmVyc2UpIHtcbiAgICAgIG9wdGlvbnMuZm4gPSBwcm9ncmFtIHx8ICdjb250YWluZXIubm9vcCc7XG4gICAgICBvcHRpb25zLmludmVyc2UgPSBpbnZlcnNlIHx8ICdjb250YWluZXIubm9vcCc7XG4gICAgfVxuXG4gICAgLy8gVGhlIHBhcmFtZXRlcnMgZ28gb24gdG8gdGhlIHN0YWNrIGluIG9yZGVyIChtYWtpbmcgc3VyZSB0aGF0IHRoZXkgYXJlIGV2YWx1YXRlZCBpbiBvcmRlcilcbiAgICAvLyBzbyB3ZSBuZWVkIHRvIHBvcCB0aGVtIG9mZiB0aGUgc3RhY2sgaW4gcmV2ZXJzZSBvcmRlclxuICAgIHZhciBpID0gcGFyYW1TaXplO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHBhcmFtID0gdGhpcy5wb3BTdGFjaygpO1xuICAgICAgcGFyYW1zW2ldID0gcGFyYW07XG5cbiAgICAgIGlmICh0aGlzLnRyYWNrSWRzKSB7XG4gICAgICAgIGlkc1tpXSA9IHRoaXMucG9wU3RhY2soKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnN0cmluZ1BhcmFtcykge1xuICAgICAgICB0eXBlc1tpXSA9IHRoaXMucG9wU3RhY2soKTtcbiAgICAgICAgY29udGV4dHNbaV0gPSB0aGlzLnBvcFN0YWNrKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9iamVjdEFyZ3MpIHtcbiAgICAgIG9wdGlvbnMuYXJncyA9IHRoaXMuc291cmNlLmdlbmVyYXRlQXJyYXkocGFyYW1zKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy50cmFja0lkcykge1xuICAgICAgb3B0aW9ucy5pZHMgPSB0aGlzLnNvdXJjZS5nZW5lcmF0ZUFycmF5KGlkcyk7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0cmluZ1BhcmFtcykge1xuICAgICAgb3B0aW9ucy50eXBlcyA9IHRoaXMuc291cmNlLmdlbmVyYXRlQXJyYXkodHlwZXMpO1xuICAgICAgb3B0aW9ucy5jb250ZXh0cyA9IHRoaXMuc291cmNlLmdlbmVyYXRlQXJyYXkoY29udGV4dHMpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuZGF0YSkge1xuICAgICAgb3B0aW9ucy5kYXRhID0gJ2RhdGEnO1xuICAgIH1cbiAgICBpZiAodGhpcy51c2VCbG9ja1BhcmFtcykge1xuICAgICAgb3B0aW9ucy5ibG9ja1BhcmFtcyA9ICdibG9ja1BhcmFtcyc7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xuICB9LFxuXG4gIHNldHVwSGVscGVyQXJnczogZnVuY3Rpb24gc2V0dXBIZWxwZXJBcmdzKGhlbHBlciwgcGFyYW1TaXplLCBwYXJhbXMsIHVzZVJlZ2lzdGVyKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB0aGlzLnNldHVwUGFyYW1zKGhlbHBlciwgcGFyYW1TaXplLCBwYXJhbXMpO1xuICAgIG9wdGlvbnMubG9jID0gSlNPTi5zdHJpbmdpZnkodGhpcy5zb3VyY2UuY3VycmVudExvY2F0aW9uKTtcbiAgICBvcHRpb25zID0gdGhpcy5vYmplY3RMaXRlcmFsKG9wdGlvbnMpO1xuICAgIGlmICh1c2VSZWdpc3Rlcikge1xuICAgICAgdGhpcy51c2VSZWdpc3Rlcignb3B0aW9ucycpO1xuICAgICAgcGFyYW1zLnB1c2goJ29wdGlvbnMnKTtcbiAgICAgIHJldHVybiBbJ29wdGlvbnM9Jywgb3B0aW9uc107XG4gICAgfSBlbHNlIGlmIChwYXJhbXMpIHtcbiAgICAgIHBhcmFtcy5wdXNoKG9wdGlvbnMpO1xuICAgICAgcmV0dXJuICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb3B0aW9ucztcbiAgICB9XG4gIH1cbn07XG5cbihmdW5jdGlvbiAoKSB7XG4gIHZhciByZXNlcnZlZFdvcmRzID0gKCdicmVhayBlbHNlIG5ldyB2YXInICsgJyBjYXNlIGZpbmFsbHkgcmV0dXJuIHZvaWQnICsgJyBjYXRjaCBmb3Igc3dpdGNoIHdoaWxlJyArICcgY29udGludWUgZnVuY3Rpb24gdGhpcyB3aXRoJyArICcgZGVmYXVsdCBpZiB0aHJvdycgKyAnIGRlbGV0ZSBpbiB0cnknICsgJyBkbyBpbnN0YW5jZW9mIHR5cGVvZicgKyAnIGFic3RyYWN0IGVudW0gaW50IHNob3J0JyArICcgYm9vbGVhbiBleHBvcnQgaW50ZXJmYWNlIHN0YXRpYycgKyAnIGJ5dGUgZXh0ZW5kcyBsb25nIHN1cGVyJyArICcgY2hhciBmaW5hbCBuYXRpdmUgc3luY2hyb25pemVkJyArICcgY2xhc3MgZmxvYXQgcGFja2FnZSB0aHJvd3MnICsgJyBjb25zdCBnb3RvIHByaXZhdGUgdHJhbnNpZW50JyArICcgZGVidWdnZXIgaW1wbGVtZW50cyBwcm90ZWN0ZWQgdm9sYXRpbGUnICsgJyBkb3VibGUgaW1wb3J0IHB1YmxpYyBsZXQgeWllbGQgYXdhaXQnICsgJyBudWxsIHRydWUgZmFsc2UnKS5zcGxpdCgnICcpO1xuXG4gIHZhciBjb21waWxlcldvcmRzID0gSmF2YVNjcmlwdENvbXBpbGVyLlJFU0VSVkVEX1dPUkRTID0ge307XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSByZXNlcnZlZFdvcmRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGNvbXBpbGVyV29yZHNbcmVzZXJ2ZWRXb3Jkc1tpXV0gPSB0cnVlO1xuICB9XG59KSgpO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIE1heSBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb25cbiAqL1xuSmF2YVNjcmlwdENvbXBpbGVyLmlzVmFsaWRKYXZhU2NyaXB0VmFyaWFibGVOYW1lID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuICFKYXZhU2NyaXB0Q29tcGlsZXIuUkVTRVJWRURfV09SRFNbbmFtZV0gJiYgL15bYS16QS1aXyRdWzAtOWEtekEtWl8kXSokLy50ZXN0KG5hbWUpO1xufTtcblxuZnVuY3Rpb24gc3RyaWN0TG9va3VwKHJlcXVpcmVUZXJtaW5hbCwgY29tcGlsZXIsIHBhcnRzLCBpLCB0eXBlKSB7XG4gIHZhciBzdGFjayA9IGNvbXBpbGVyLnBvcFN0YWNrKCksXG4gICAgICBsZW4gPSBwYXJ0cy5sZW5ndGg7XG4gIGlmIChyZXF1aXJlVGVybWluYWwpIHtcbiAgICBsZW4tLTtcbiAgfVxuXG4gIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBzdGFjayA9IGNvbXBpbGVyLm5hbWVMb29rdXAoc3RhY2ssIHBhcnRzW2ldLCB0eXBlKTtcbiAgfVxuXG4gIGlmIChyZXF1aXJlVGVybWluYWwpIHtcbiAgICByZXR1cm4gW2NvbXBpbGVyLmFsaWFzYWJsZSgnY29udGFpbmVyLnN0cmljdCcpLCAnKCcsIHN0YWNrLCAnLCAnLCBjb21waWxlci5xdW90ZWRTdHJpbmcocGFydHNbaV0pLCAnLCAnLCBKU09OLnN0cmluZ2lmeShjb21waWxlci5zb3VyY2UuY3VycmVudExvY2F0aW9uKSwgJyApJ107XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0YWNrO1xuICB9XG59XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IEphdmFTY3JpcHRDb21waWxlcjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDJOdmJYQnBiR1Z5TDJwaGRtRnpZM0pwY0hRdFkyOXRjR2xzWlhJdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3p0dlFrRkJiMFFzVTBGQlV6czdlVUpCUTNaRExHTkJRV003T3pzN2NVSkJRMW9zVlVGQlZUczdkVUpCUTJRc1dVRkJXVHM3T3p0QlFVVm9ReXhUUVVGVExFOUJRVThzUTBGQlF5eExRVUZMTEVWQlFVVTdRVUZEZEVJc1RVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eExRVUZMTEVOQlFVTTdRMEZEY0VJN08wRkJSVVFzVTBGQlV5eHJRa0ZCYTBJc1IwRkJSeXhGUVVGRk96dEJRVVZvUXl4clFrRkJhMElzUTBGQlF5eFRRVUZUTEVkQlFVYzdPenRCUVVjM1FpeFpRVUZWTEVWQlFVVXNiMEpCUVZNc1RVRkJUU3hGUVVGRkxFbEJRVWtzWlVGQlpUdEJRVU01UXl4WFFVRlBMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4TlFVRk5MRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03UjBGRE9VTTdRVUZEUkN4bFFVRmhMRVZCUVVVc2RVSkJRVk1zU1VGQlNTeEZRVUZGTzBGQlF6VkNMRmRCUVU4c1EwRkRUQ3hKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEd0Q1FVRnJRaXhEUVVGRExFVkJRMnhETEZkQlFWY3NSVUZEV0N4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVU53UWl4SFFVRkhMRU5CUTBvc1EwRkJRenRIUVVOSU96dEJRVVZFTEdOQlFWa3NSVUZCUlN4M1FrRkJWenRCUVVOMlFpeFJRVUZOTEZGQlFWRXNNRUpCUVc5Q08xRkJRMmhETEZGQlFWRXNSMEZCUnl4MVFrRkJhVUlzVVVGQlVTeERRVUZETEVOQlFVTTdRVUZEZUVNc1YwRkJUeXhEUVVGRExGRkJRVkVzUlVGQlJTeFJRVUZSTEVOQlFVTXNRMEZCUXp0SFFVTTNRanM3UVVGRlJDeG5Ra0ZCWXl4RlFVRkZMSGRDUVVGVExFMUJRVTBzUlVGQlJTeFJRVUZSTEVWQlFVVXNVVUZCVVN4RlFVRkZPenRCUVVWdVJDeFJRVUZKTEVOQlFVTXNaVUZCVVN4TlFVRk5MRU5CUVVNc1JVRkJSVHRCUVVOd1FpeFpRVUZOTEVkQlFVY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRMUVVOdVFqdEJRVU5FTEZWQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVNN08wRkJSVFZETEZGQlFVa3NTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhSUVVGUkxFVkJRVVU3UVVGRE4wSXNZVUZCVHl4RFFVRkRMRk5CUVZNc1JVRkJSU3hOUVVGTkxFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTTdTMEZEYWtNc1RVRkJUU3hKUVVGSkxGRkJRVkVzUlVGQlJUczdPenRCUVVsdVFpeGhRVUZQTEVOQlFVTXNXVUZCV1N4RlFVRkZMRTFCUVUwc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF6dExRVU53UXl4TlFVRk5PMEZCUTB3c1dVRkJUU3hEUVVGRExHTkJRV01zUjBGQlJ5eEpRVUZKTEVOQlFVTTdRVUZETjBJc1lVRkJUeXhOUVVGTkxFTkJRVU03UzBGRFpqdEhRVU5HT3p0QlFVVkVMR3RDUVVGblFpeEZRVUZGTERSQ1FVRlhPMEZCUXpOQ0xGZEJRVThzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRIUVVNNVFqczdRVUZGUkN4dlFrRkJhMElzUlVGQlJTdzBRa0ZCVXl4TlFVRk5MRVZCUVVVc1NVRkJTU3hGUVVGRk8wRkJRM3BETEZGQlFVa3NRMEZCUXl3MFFrRkJORUlzUjBGQlJ5eEpRVUZKTEVOQlFVTTdRVUZEZWtNc1YwRkJUeXhEUVVGRExHbENRVUZwUWl4RlFVRkZMRTFCUVUwc1JVRkJSU3hIUVVGSExFVkJRVVVzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF6dEhRVU53UlRzN1FVRkZSQ3c0UWtGQk5FSXNSVUZCUlN4TFFVRkxPenRCUVVWdVF5eFRRVUZQTEVWQlFVVXNhVUpCUVZNc1YwRkJWeXhGUVVGRkxFOUJRVThzUlVGQlJTeFBRVUZQTEVWQlFVVXNVVUZCVVN4RlFVRkZPMEZCUTNwRUxGRkJRVWtzUTBGQlF5eFhRVUZYTEVkQlFVY3NWMEZCVnl4RFFVRkRPMEZCUXk5Q0xGRkJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NUMEZCVHl4RFFVRkRPMEZCUTNaQ0xGRkJRVWtzUTBGQlF5eFpRVUZaTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhaUVVGWkxFTkJRVU03UVVGRE9VTXNVVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEZGQlFWRXNRMEZCUXp0QlFVTjBReXhSUVVGSkxFTkJRVU1zVlVGQlZTeEhRVUZITEVOQlFVTXNVVUZCVVN4RFFVRkRPenRCUVVVMVFpeFJRVUZKTEVOQlFVTXNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZETzBGQlEyeERMRkZCUVVrc1EwRkJReXhQUVVGUExFZEJRVWNzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXp0QlFVTjZRaXhSUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZITEU5QlFVOHNTVUZCU1R0QlFVTjRRaXhuUWtGQlZTeEZRVUZGTEVWQlFVVTdRVUZEWkN4alFVRlJMRVZCUVVVc1JVRkJSVHRCUVVOYUxHdENRVUZaTEVWQlFVVXNSVUZCUlR0TFFVTnFRaXhEUVVGRE96dEJRVVZHTEZGQlFVa3NRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJRenM3UVVGRmFFSXNVVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRGJrSXNVVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhGUVVGRkxFTkJRVU03UVVGRGNFSXNVVUZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhGUVVGRkxFTkJRVU03UVVGRGJFSXNVVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhGUVVGRkxFbEJRVWtzUlVGQlJTeEZRVUZGTEVWQlFVVXNRMEZCUXp0QlFVTTVRaXhSUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTnFRaXhSUVVGSkxFTkJRVU1zV1VGQldTeEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTjJRaXhSUVVGSkxFTkJRVU1zVjBGQlZ5eEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTjBRaXhSUVVGSkxFTkJRVU1zVjBGQlZ5eEhRVUZITEVWQlFVVXNRMEZCUXpzN1FVRkZkRUlzVVVGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4WFFVRlhMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU03TzBGQlJUTkRMRkZCUVVrc1EwRkJReXhUUVVGVExFZEJRMW9zU1VGQlNTeERRVUZETEZOQlFWTXNTVUZEWkN4WFFVRlhMRU5CUVVNc1UwRkJVeXhKUVVOeVFpeFhRVUZYTEVOQlFVTXNZVUZCWVN4SlFVTjZRaXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXp0QlFVTjBRaXhSUVVGSkxFTkJRVU1zWTBGQll5eEhRVUZITEVsQlFVa3NRMEZCUXl4alFVRmpMRWxCUVVrc1YwRkJWeXhEUVVGRExHTkJRV01zUTBGQlF6czdRVUZGZUVVc1VVRkJTU3hQUVVGUExFZEJRVWNzVjBGQlZ5eERRVUZETEU5QlFVODdVVUZETDBJc1RVRkJUU3haUVVGQk8xRkJRMDRzVVVGQlVTeFpRVUZCTzFGQlExSXNRMEZCUXl4WlFVRkJPMUZCUTBRc1EwRkJReXhaUVVGQkxFTkJRVU03TzBGQlJVb3NVMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eFBRVUZQTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVTdRVUZETVVNc1dVRkJUU3hIUVVGSExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXpzN1FVRkZjRUlzVlVGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4bFFVRmxMRWRCUVVjc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF6dEJRVU42UXl4alFVRlJMRWRCUVVjc1VVRkJVU3hKUVVGSkxFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTTdRVUZEYkVNc1ZVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hGUVVGRkxFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0TFFVTTVRenM3TzBGQlIwUXNVVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhsUVVGbExFZEJRVWNzVVVGQlVTeERRVUZETzBGQlEzWkRMRkZCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdPenRCUVVkd1FpeFJRVUZKTEVsQlFVa3NRMEZCUXl4VFFVRlRMRWxCUVVrc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eE5RVUZOTEVsQlFVa3NTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhOUVVGTkxFVkJRVVU3UVVGRGVrVXNXVUZCVFN3eVFrRkJZeXc0UTBGQk9FTXNRMEZCUXl4RFFVRkRPMHRCUTNKRk96dEJRVVZFTEZGQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFOUJRVThzUlVGQlJTeEZRVUZGTzBGQlF6bENMRlZCUVVrc1EwRkJReXhoUVVGaExFZEJRVWNzU1VGQlNTeERRVUZET3p0QlFVVXhRaXhWUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVTjBRaXg1UTBGQmVVTXNSVUZEZWtNc1NVRkJTU3hEUVVGRExHOURRVUZ2UXl4RlFVRkZMRVZCUXpORExFdEJRVXNzUTBGRFRpeERRVUZETEVOQlFVTTdRVUZEU0N4VlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXpzN1FVRkZia01zVlVGQlNTeFJRVUZSTEVWQlFVVTdRVUZEV2l4WlFVRkpMRU5CUVVNc1ZVRkJWU3hIUVVGSExGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUTNKRExFbEJRVWtzUlVGRFNpeFBRVUZQTEVWQlExQXNWMEZCVnl4RlFVTllMRkZCUVZFc1JVRkRVaXhOUVVGTkxFVkJRMDRzWVVGQllTeEZRVU5pTEZGQlFWRXNSVUZEVWl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFdEJRVXNzUlVGQlJTeERRVU40UWl4RFFVRkRMRU5CUVVNN1QwRkRTaXhOUVVGTk8wRkJRMHdzV1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4UFFVRlBMRU5CUTNKQ0xIVkZRVUYxUlN4RFFVTjRSU3hEUVVGRE8wRkJRMFlzV1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03UVVGRE5VSXNXVUZCU1N4RFFVRkRMRlZCUVZVc1IwRkJSeXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRPMDlCUXpORE8wdEJRMFlzVFVGQlRUdEJRVU5NTEZWQlFVa3NRMEZCUXl4VlFVRlZMRWRCUVVjc1UwRkJVeXhEUVVGRE8wdEJRemRDT3p0QlFVVkVMRkZCUVVrc1JVRkJSU3hIUVVGSExFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dEJRVU01UXl4UlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUlVGQlJUdEJRVU5xUWl4VlFVRkpMRWRCUVVjc1IwRkJSenRCUVVOU0xHZENRVUZSTEVWQlFVVXNTVUZCU1N4RFFVRkRMRmxCUVZrc1JVRkJSVHRCUVVNM1FpeFpRVUZKTEVWQlFVVXNSVUZCUlR0UFFVTlVMRU5CUVVNN08wRkJSVVlzVlVGQlNTeEpRVUZKTEVOQlFVTXNWVUZCVlN4RlFVRkZPMEZCUTI1Q0xGZEJRVWNzUTBGQlF5eE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJRenRCUVVNM1FpeFhRVUZITEVOQlFVTXNZVUZCWVN4SFFVRkhMRWxCUVVrc1EwRkJRenRQUVVNeFFqczdjVUpCUlRoQ0xFbEJRVWtzUTBGQlF5eFBRVUZQTzFWQlFYSkRMRkZCUVZFc1dVRkJVaXhSUVVGUk8xVkJRVVVzVlVGQlZTeFpRVUZXTEZWQlFWVTdPMEZCUXpGQ0xGZEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1VVRkJVU3hEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk8wRkJRek5ETEZsQlFVa3NVVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRk8wRkJRMllzWVVGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU55UWl4alFVRkpMRlZCUVZVc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJUdEJRVU5xUWl4bFFVRkhMRU5CUVVNc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eEhRVUZITEZWQlFWVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVNNVFpeGxRVUZITEVOQlFVTXNZVUZCWVN4SFFVRkhMRWxCUVVrc1EwRkJRenRYUVVNeFFqdFRRVU5HTzA5QlEwWTdPMEZCUlVRc1ZVRkJTU3hKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEZWQlFWVXNSVUZCUlR0QlFVTXZRaXhYUVVGSExFTkJRVU1zVlVGQlZTeEhRVUZITEVsQlFVa3NRMEZCUXp0UFFVTjJRanRCUVVORUxGVkJRVWtzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRVZCUVVVN1FVRkRja0lzVjBGQlJ5eERRVUZETEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNN1QwRkRjRUk3UVVGRFJDeFZRVUZKTEVsQlFVa3NRMEZCUXl4VFFVRlRMRVZCUVVVN1FVRkRiRUlzVjBGQlJ5eERRVUZETEZOQlFWTXNSMEZCUnl4SlFVRkpMRU5CUVVNN1QwRkRkRUk3UVVGRFJDeFZRVUZKTEVsQlFVa3NRMEZCUXl4alFVRmpMRVZCUVVVN1FVRkRka0lzVjBGQlJ5eERRVUZETEdOQlFXTXNSMEZCUnl4SlFVRkpMRU5CUVVNN1QwRkRNMEk3UVVGRFJDeFZRVUZKTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1RVRkJUU3hGUVVGRk8wRkJRM1pDTEZkQlFVY3NRMEZCUXl4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRE8wOUJRMjVDT3p0QlFVVkVMRlZCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVU3UVVGRFlpeFhRVUZITEVOQlFVTXNVVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPenRCUVVVMVF5eFpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMR1ZCUVdVc1IwRkJSeXhGUVVGRkxFdEJRVXNzUlVGQlJTeEZRVUZGTEVsQlFVa3NSVUZCUlN4RFFVRkRMRVZCUVVVc1RVRkJUU3hGUVVGRkxFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTTdRVUZEYUVVc1YwRkJSeXhIUVVGSExFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN08wRkJSVGxDTEZsQlFVa3NUMEZCVHl4RFFVRkRMRTlCUVU4c1JVRkJSVHRCUVVOdVFpeGhRVUZITEVkQlFVY3NSMEZCUnl4RFFVRkRMSEZDUVVGeFFpeERRVUZETEVWQlFVVXNTVUZCU1N4RlFVRkZMRTlCUVU4c1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF5eERRVUZETzBGQlF6VkVMR0ZCUVVjc1EwRkJReXhIUVVGSExFZEJRVWNzUjBGQlJ5eERRVUZETEVkQlFVY3NTVUZCU1N4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETzFOQlEzcERMRTFCUVUwN1FVRkRUQ3hoUVVGSExFZEJRVWNzUjBGQlJ5eERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRPMU5CUTNSQ08wOUJRMFlzVFVGQlRUdEJRVU5NTEZkQlFVY3NRMEZCUXl4bFFVRmxMRWRCUVVjc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF6dFBRVU53UXpzN1FVRkZSQ3hoUVVGUExFZEJRVWNzUTBGQlF6dExRVU5hTEUxQlFVMDdRVUZEVEN4aFFVRlBMRVZCUVVVc1EwRkJRenRMUVVOWU8wZEJRMFk3TzBGQlJVUXNWVUZCVVN4RlFVRkZMRzlDUVVGWE96czdRVUZIYmtJc1VVRkJTU3hEUVVGRExGZEJRVmNzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEY2tJc1VVRkJTU3hEUVVGRExFMUJRVTBzUjBGQlJ5eDVRa0ZCV1N4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzBGQlEyaEVMRkZCUVVrc1EwRkJReXhWUVVGVkxFZEJRVWNzZVVKQlFWa3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6dEhRVU55UkRzN1FVRkZSQ3gxUWtGQmNVSXNSVUZCUlN3clFrRkJVeXhSUVVGUkxFVkJRVVU3T3pzN08wRkJRM2hETEZGQlFVa3NaVUZCWlN4SFFVRkhMRVZCUVVVc1EwRkJRenM3UVVGRmVrSXNVVUZCU1N4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU40UkN4UlFVRkpMRTFCUVUwc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eEZRVUZGTzBGQlEzSkNMSEZDUVVGbExFbEJRVWtzU1VGQlNTeEhRVUZITEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UzBGRE4wTTdPenM3T3pzN08wRkJVVVFzVVVGQlNTeFZRVUZWTEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUTI1Q0xGVkJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZCTEV0QlFVc3NSVUZCU1R0QlFVTjZReXhWUVVGSkxFbEJRVWtzUjBGQlJ5eE5RVUZMTEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRCUVVNdlFpeFZRVUZKTEVsQlFVa3NRMEZCUXl4UlFVRlJMRWxCUVVrc1NVRkJTU3hEUVVGRExHTkJRV01zUjBGQlJ5eERRVUZETEVWQlFVVTdRVUZETlVNc2RVSkJRV1VzU1VGQlNTeFRRVUZUTEVkQlFVY3NSVUZCUlN4VlFVRlZMRWRCUVVjc1IwRkJSeXhIUVVGSExFdEJRVXNzUTBGQlF6dEJRVU14UkN4WlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEU5QlFVOHNSMEZCUnl4VlFVRlZMRU5CUVVNN1QwRkRla003UzBGRFJpeERRVUZETEVOQlFVTTdPMEZCUlVnc1VVRkJTU3hKUVVGSkxFTkJRVU1zTkVKQlFUUkNMRVZCUVVVN1FVRkRja01zY1VKQlFXVXNTVUZCU1N4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExHOURRVUZ2UXl4RlFVRkZMRU5CUVVNN1MwRkRka1U3TzBGQlJVUXNVVUZCU1N4TlFVRk5MRWRCUVVjc1EwRkJReXhYUVVGWExFVkJRVVVzVVVGQlVTeEZRVUZGTEZOQlFWTXNSVUZCUlN4VlFVRlZMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU03TzBGQlJYQkZMRkZCUVVrc1NVRkJTU3hEUVVGRExHTkJRV01zU1VGQlNTeEpRVUZKTEVOQlFVTXNVMEZCVXl4RlFVRkZPMEZCUTNwRExGbEJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVNN1MwRkROVUk3UVVGRFJDeFJRVUZKTEVsQlFVa3NRMEZCUXl4VFFVRlRMRVZCUVVVN1FVRkRiRUlzV1VGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRMUVVOMlFqczdPMEZCUjBRc1VVRkJTU3hOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4bFFVRmxMRU5CUVVNc1EwRkJRenM3UVVGRkwwTXNVVUZCU1N4UlFVRlJMRVZCUVVVN1FVRkRXaXhaUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPenRCUVVWd1FpeGhRVUZQTEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETzB0QlEzSkRMRTFCUVUwN1FVRkRUQ3hoUVVGUExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUTNSQ0xGZEJRVmNzUlVGRFdDeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVOb1FpeFRRVUZUTEVWQlExUXNUVUZCVFN4RlFVTk9MRWRCUVVjc1EwRkRTaXhEUVVGRExFTkJRVU03UzBGRFNqdEhRVU5HTzBGQlEwUXNZVUZCVnl4RlFVRkZMSEZDUVVGVExHVkJRV1VzUlVGQlJUdEJRVU55UXl4UlFVRkpMRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEZGQlFWRTdVVUZEZEVNc1ZVRkJWU3hIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEZkQlFWYzdVVUZET1VJc1YwRkJWeXhaUVVGQk8xRkJRMWdzVlVGQlZTeFpRVUZCTzFGQlExWXNWMEZCVnl4WlFVRkJPMUZCUTFnc1UwRkJVeXhaUVVGQkxFTkJRVU03UVVGRFdpeFJRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGQkxFbEJRVWtzUlVGQlNUdEJRVU4yUWl4VlFVRkpMRWxCUVVrc1EwRkJReXhqUVVGakxFVkJRVVU3UVVGRGRrSXNXVUZCU1N4WFFVRlhMRVZCUVVVN1FVRkRaaXhqUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMU5CUTNSQ0xFMUJRVTA3UVVGRFRDeHhRa0ZCVnl4SFFVRkhMRWxCUVVrc1EwRkJRenRUUVVOd1FqdEJRVU5FTEdsQ1FVRlRMRWRCUVVjc1NVRkJTU3hEUVVGRE8wOUJRMnhDTEUxQlFVMDdRVUZEVEN4WlFVRkpMRmRCUVZjc1JVRkJSVHRCUVVObUxHTkJRVWtzUTBGQlF5eFZRVUZWTEVWQlFVVTdRVUZEWml4MVFrRkJWeXhIUVVGSExFbEJRVWtzUTBGQlF6dFhRVU53UWl4TlFVRk5PMEZCUTB3c2RVSkJRVmNzUTBGQlF5eFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNN1YwRkRia003UVVGRFJDeHRRa0ZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU51UWl4eFFrRkJWeXhIUVVGSExGTkJRVk1zUjBGQlJ5eFRRVUZUTEVOQlFVTTdVMEZEY2tNN08wRkJSVVFzYTBKQlFWVXNSMEZCUnl4SlFVRkpMRU5CUVVNN1FVRkRiRUlzV1VGQlNTeERRVUZETEZGQlFWRXNSVUZCUlR0QlFVTmlMRzlDUVVGVkxFZEJRVWNzUzBGQlN5eERRVUZETzFOQlEzQkNPMDlCUTBZN1MwRkRSaXhEUVVGRExFTkJRVU03TzBGQlJVZ3NVVUZCU1N4VlFVRlZMRVZCUVVVN1FVRkRaQ3hWUVVGSkxGZEJRVmNzUlVGQlJUdEJRVU5tTEcxQ1FVRlhMRU5CUVVNc1QwRkJUeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzBGQlF5OUNMR2xDUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMDlCUTNCQ0xFMUJRVTBzU1VGQlNTeERRVUZETEZWQlFWVXNSVUZCUlR0QlFVTjBRaXhaUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJRenRQUVVOb1F6dExRVU5HTEUxQlFVMDdRVUZEVEN4eFFrRkJaU3hKUVVOaUxHRkJRV0VzU1VGQlNTeFhRVUZYTEVkQlFVY3NSVUZCUlN4SFFVRkhMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNSVUZCUlN4RFFVRkJMRUZCUVVNc1EwRkJRenM3UVVGRkwwUXNWVUZCU1N4WFFVRlhMRVZCUVVVN1FVRkRaaXh0UWtGQlZ5eERRVUZETEU5QlFVOHNRMEZCUXl4clFrRkJhMElzUTBGQlF5eERRVUZETzBGQlEzaERMR2xDUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMDlCUTNCQ0xFMUJRVTA3UVVGRFRDeFpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4RFFVRkRPMDlCUTNCRE8wdEJRMFk3TzBGQlJVUXNVVUZCU1N4bFFVRmxMRVZCUVVVN1FVRkRia0lzVlVGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUTJwQ0xFMUJRVTBzUjBGQlJ5eGxRVUZsTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxGZEJRVmNzUjBGQlJ5eEZRVUZGTEVkQlFVY3NTMEZCU3l4RFFVRkJMRUZCUVVNc1EwRkRia1VzUTBGQlF6dExRVU5JT3p0QlFVVkVMRmRCUVU4c1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXp0SFFVTTFRanM3UVVGRlJDeHpRMEZCYjBNc1JVRkJSU3huUkVGQlZ6dEJRVU12UXl4WFFVRlBMRFpRUVU5TUxFbEJRVWtzUlVGQlJTeERRVUZETzBkQlExWTdPenM3T3pzN096czdPMEZCVjBRc1dVRkJWU3hGUVVGRkxHOUNRVUZUTEVsQlFVa3NSVUZCUlR0QlFVTjZRaXhSUVVGSkxHdENRVUZyUWl4SFFVRkhMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRMjVETEc5RFFVRnZReXhEUVVOeVF6dFJRVU5FTEUxQlFVMHNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTnFReXhSUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU03TzBGQlJYUkRMRkZCUVVrc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXp0QlFVTm9ReXhWUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1UwRkJVeXhEUVVGRExFTkJRVU03TzBGQlJTOUNMRkZCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4WlFVRlpMRU5CUVVNc2EwSkJRV3RDTEVWQlFVVXNUVUZCVFN4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU03UjBGRGVrVTdPenM3T3pzN08wRkJVVVFzY1VKQlFXMUNMRVZCUVVVc0swSkJRVmM3TzBGQlJUbENMRkZCUVVrc2EwSkJRV3RDTEVkQlFVY3NTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkRia01zYjBOQlFXOURMRU5CUTNKRE8xRkJRMFFzVFVGQlRTeEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBGQlEycERMRkZCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTXNSVUZCUlN4TlFVRk5MRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03TzBGQlJURkRMRkZCUVVrc1EwRkJReXhYUVVGWExFVkJRVVVzUTBGQlF6czdRVUZGYmtJc1VVRkJTU3hQUVVGUExFZEJRVWNzU1VGQlNTeERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRPMEZCUXpsQ0xGVkJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlF6czdRVUZGTjBJc1VVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVU5rTEU5QlFVOHNSVUZEVUN4SlFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVObUxFMUJRVTBzUlVGRFRpeFBRVUZQTEVWQlExQXNTMEZCU3l4RlFVTk1MRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zV1VGQldTeERRVUZETEd0Q1FVRnJRaXhGUVVGRkxFMUJRVTBzUlVGQlJTeE5RVUZOTEVOQlFVTXNSVUZETlVRc1IwRkJSeXhEUVVOS0xFTkJRVU1zUTBGQlF6dEhRVU5LT3pzN096czdPenRCUVZGRUxHVkJRV0VzUlVGQlJTeDFRa0ZCVXl4UFFVRlBMRVZCUVVVN1FVRkRMMElzVVVGQlNTeEpRVUZKTEVOQlFVTXNZMEZCWXl4RlFVRkZPMEZCUTNaQ0xHRkJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVTXNZMEZCWXl4SFFVRkhMRTlCUVU4c1EwRkJRenRMUVVONlF5eE5RVUZOTzBGQlEwd3NWVUZCU1N4RFFVRkRMR1ZCUVdVc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEdWQlFXVXNRMEZCUXp0TFFVTndSRHM3UVVGRlJDeFJRVUZKTEVOQlFVTXNZMEZCWXl4SFFVRkhMRTlCUVU4c1EwRkJRenRIUVVNdlFqczdPenM3T3pzN096czdRVUZYUkN4UlFVRk5MRVZCUVVVc2EwSkJRVmM3UVVGRGFrSXNVVUZCU1N4SlFVRkpMRU5CUVVNc1VVRkJVU3hGUVVGRkxFVkJRVVU3UVVGRGJrSXNWVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhWUVVGQkxFOUJRVTg3WlVGQlNTeERRVUZETEdGQlFXRXNSVUZCUlN4UFFVRlBMRVZCUVVVc1QwRkJUeXhEUVVGRE8wOUJRVUVzUTBGQlF5eERRVUZET3p0QlFVVm9SU3hWUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0TFFVTjJSQ3hOUVVGTk8wRkJRMHdzVlVGQlNTeExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRE8wRkJRelZDTEZWQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkRaQ3hOUVVGTkxFVkJRMDRzUzBGQlN5eEZRVU5NTEdOQlFXTXNSVUZEWkN4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFdEJRVXNzUlVGQlJTeFRRVUZUTEVWQlFVVXNTVUZCU1N4RFFVRkRMRVZCUXpORExFbEJRVWtzUTBGRFRDeERRVUZETEVOQlFVTTdRVUZEU0N4VlFVRkpMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zVVVGQlVTeEZRVUZGTzBGQlF6ZENMRmxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGRFpDeFRRVUZUTEVWQlExUXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhKUVVGSkxFVkJRVVVzVTBGQlV5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RlFVTXhReXhKUVVGSkxFTkJRMHdzUTBGQlF5eERRVUZETzA5QlEwbzdTMEZEUmp0SFFVTkdPenM3T3pzN096dEJRVkZFTEdWQlFXRXNSVUZCUlN4NVFrRkJWenRCUVVONFFpeFJRVUZKTEVOQlFVTXNWVUZCVlN4RFFVTmlMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGRGJFSXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXcwUWtGQk5FSXNRMEZCUXl4RlFVTTFReXhIUVVGSExFVkJRMGdzU1VGQlNTeERRVUZETEZGQlFWRXNSVUZCUlN4RlFVTm1MRWRCUVVjc1EwRkRTaXhEUVVGRExFTkJRMGdzUTBGQlF6dEhRVU5JT3pzN096czdPenM3UVVGVFJDeFpRVUZWTEVWQlFVVXNiMEpCUVZNc1MwRkJTeXhGUVVGRk8wRkJRekZDTEZGQlFVa3NRMEZCUXl4WFFVRlhMRWRCUVVjc1MwRkJTeXhEUVVGRE8wZEJRekZDT3pzN096czdPenRCUVZGRUxHRkJRVmNzUlVGQlJTeDFRa0ZCVnp0QlFVTjBRaXhSUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNc1EwRkJRenRIUVVNelJEczdPenM3T3pzN08wRkJVMFFzYVVKQlFXVXNSVUZCUlN4NVFrRkJVeXhMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEUxQlFVMHNSVUZCUlN4TlFVRk5MRVZCUVVVN1FVRkRkRVFzVVVGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPenRCUVVWV0xGRkJRVWtzUTBGQlF5eE5RVUZOTEVsQlFVa3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhOUVVGTkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RlFVRkZPenM3UVVGSGRrUXNWVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dExRVU16UXl4TlFVRk5PMEZCUTB3c1ZVRkJTU3hEUVVGRExGZEJRVmNzUlVGQlJTeERRVUZETzB0QlEzQkNPenRCUVVWRUxGRkJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNVMEZCVXl4RlFVRkZMRXRCUVVzc1JVRkJSU3hEUVVGRExFVkJRVVVzUzBGQlN5eEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRPMGRCUTNSRU96czdPenM3T3pzN1FVRlRSQ3hyUWtGQlowSXNSVUZCUlN3d1FrRkJVeXhaUVVGWkxFVkJRVVVzUzBGQlN5eEZRVUZGTzBGQlF6bERMRkZCUVVrc1EwRkJReXhqUVVGakxFZEJRVWNzU1VGQlNTeERRVUZET3p0QlFVVXpRaXhSUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNZMEZCWXl4RlFVRkZMRmxCUVZrc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeEpRVUZKTEVWQlFVVXNXVUZCV1N4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEZWtVc1VVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eFRRVUZUTEVWQlFVVXNTMEZCU3l4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8wZEJRM1pET3pzN096czdPenRCUVZGRUxGbEJRVlVzUlVGQlJTeHZRa0ZCVXl4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFMUJRVTBzUlVGQlJUdEJRVU42UXl4UlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRk8wRkJRMVlzVlVGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzB0QlF5OUNMRTFCUVUwN1FVRkRUQ3hWUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc2RVSkJRWFZDTEVkQlFVY3NTMEZCU3l4SFFVRkhMRWRCUVVjc1EwRkJReXhEUVVGRE8wdEJRemxFT3p0QlFVVkVMRkZCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zVFVGQlRTeEZRVUZGTEV0QlFVc3NSVUZCUlN4RFFVRkRMRVZCUVVVc1NVRkJTU3hGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETzBkQlEyeEVPenRCUVVWRUxHRkJRVmNzUlVGQlJTeHhRa0ZCVXl4SlFVRkpMRVZCUVVVc1MwRkJTeXhGUVVGRkxFTkJRVU1zUlVGQlJTeExRVUZMTEVWQlFVVXNUVUZCVFN4RlFVRkZPenM3T3p0QlFVTnVSQ3hSUVVGSkxFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNUVUZCVFN4SlFVRkpMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zWVVGQllTeEZRVUZGTzBGQlEzSkVMRlZCUVVrc1EwRkJReXhKUVVGSkxFTkJRMUFzV1VGQldTeERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1RVRkJUU3hKUVVGSkxFMUJRVTBzUlVGQlJTeEpRVUZKTEVWQlFVVXNTMEZCU3l4RlFVRkZMRU5CUVVNc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGRGJFVXNRMEZCUXp0QlFVTkdMR0ZCUVU4N1MwRkRVanM3UVVGRlJDeFJRVUZKTEVkQlFVY3NSMEZCUnl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRE8wRkJRM1pDTEZkQlFVOHNRMEZCUXl4SFFVRkhMRWRCUVVjc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUczdRVUZGYmtJc1ZVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eFZRVUZCTEU5QlFVOHNSVUZCU1R0QlFVTXpRaXhaUVVGSkxFMUJRVTBzUjBGQlJ5eFBRVUZMTEZWQlFWVXNRMEZCUXl4UFFVRlBMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPenM3UVVGSGRFUXNXVUZCU1N4RFFVRkRMRXRCUVVzc1JVRkJSVHRCUVVOV0xHbENRVUZQTEVOQlFVTXNZVUZCWVN4RlFVRkZMRTFCUVUwc1JVRkJSU3hMUVVGTExFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTTdVMEZEYUVRc1RVRkJUVHM3UVVGRlRDeHBRa0ZCVHl4RFFVRkRMRTFCUVUwc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF6dFRRVU42UWp0UFFVTkdMRU5CUVVNc1EwRkJRenM3UzBGRlNqdEhRVU5HT3pzN096czdPenM3UVVGVFJDeDFRa0ZCY1VJc1JVRkJSU3hwUTBGQlZ6dEJRVU5vUXl4UlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRMUlzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eEZRVU5zUXl4SFFVRkhMRVZCUTBnc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJTeEZRVU5tTEVsQlFVa3NSVUZEU2l4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVU51UWl4SFFVRkhMRU5CUTBvc1EwRkJReXhEUVVGRE8wZEJRMG83T3pzN096czdPenM3UVVGVlJDeHBRa0ZCWlN4RlFVRkZMSGxDUVVGVExFMUJRVTBzUlVGQlJTeEpRVUZKTEVWQlFVVTdRVUZEZEVNc1VVRkJTU3hEUVVGRExGZEJRVmNzUlVGQlJTeERRVUZETzBGQlEyNUNMRkZCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdPenM3UVVGSmRFSXNVVUZCU1N4SlFVRkpMRXRCUVVzc1pVRkJaU3hGUVVGRk8wRkJRelZDTEZWQlFVa3NUMEZCVHl4TlFVRk5MRXRCUVVzc1VVRkJVU3hGUVVGRk8wRkJRemxDTEZsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03VDBGRGVrSXNUVUZCVFR0QlFVTk1MRmxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRQUVVNdlFqdExRVU5HTzBkQlEwWTdPMEZCUlVRc1YwRkJVeXhGUVVGRkxHMUNRVUZUTEZOQlFWTXNSVUZCUlR0QlFVTTNRaXhSUVVGSkxFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVTdRVUZEYWtJc1ZVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0TFFVTnFRanRCUVVORUxGRkJRVWtzU1VGQlNTeERRVUZETEZsQlFWa3NSVUZCUlR0QlFVTnlRaXhWUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMEZCUTJoQ0xGVkJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1MwRkRha0k3UVVGRFJDeFJRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVTBGQlV5eEhRVUZITEZkQlFWY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1EwRkJRenRIUVVOMlJEdEJRVU5FTEZWQlFWRXNSVUZCUlN4dlFrRkJWenRCUVVOdVFpeFJRVUZKTEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVN1FVRkRZaXhWUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UzBGRE4wSTdRVUZEUkN4UlFVRkpMRU5CUVVNc1NVRkJTU3hIUVVGSExFVkJRVVVzVFVGQlRTeEZRVUZGTEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1JVRkJSU3hGUVVGRkxGRkJRVkVzUlVGQlJTeEZRVUZGTEVWQlFVVXNSMEZCUnl4RlFVRkZMRVZCUVVVc1JVRkJSU3hEUVVGRE8wZEJRemxFTzBGQlEwUXNVMEZCVHl4RlFVRkZMRzFDUVVGWE8wRkJRMnhDTEZGQlFVa3NTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU03UVVGRGNrSXNVVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRPenRCUVVVNVFpeFJRVUZKTEVsQlFVa3NRMEZCUXl4UlFVRlJMRVZCUVVVN1FVRkRha0lzVlVGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMHRCUTNwRE8wRkJRMFFzVVVGQlNTeEpRVUZKTEVOQlFVTXNXVUZCV1N4RlFVRkZPMEZCUTNKQ0xGVkJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTTNReXhWUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTTdTMEZETTBNN08wRkJSVVFzVVVGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGRCUXpWRE96czdPenM3T3p0QlFWRkVMRmxCUVZVc1JVRkJSU3h2UWtGQlV5eE5RVUZOTEVWQlFVVTdRVUZETTBJc1VVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXp0SFFVTnNSRHM3T3pzN096czdPenRCUVZWRUxHRkJRVmNzUlVGQlJTeHhRa0ZCVXl4TFFVRkxMRVZCUVVVN1FVRkRNMElzVVVGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBkQlF6bENPenM3T3pzN096czdPMEZCVlVRc1lVRkJWeXhGUVVGRkxIRkNRVUZUTEVsQlFVa3NSVUZCUlR0QlFVTXhRaXhSUVVGSkxFbEJRVWtzU1VGQlNTeEpRVUZKTEVWQlFVVTdRVUZEYUVJc1ZVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRE8wdEJRM0pFTEUxQlFVMDdRVUZEVEN4VlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1MwRkROMEk3UjBGRFJqczdPenM3T3pzN08wRkJVMFFzYlVKQlFXbENMRVZCUVVFc01rSkJRVU1zVTBGQlV5eEZRVUZGTEVsQlFVa3NSVUZCUlR0QlFVTnFReXhSUVVGSkxHTkJRV01zUjBGQlJ5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRmxCUVZrc1JVRkJSU3hKUVVGSkxFVkJRVVVzVjBGQlZ5eERRVUZETzFGQlEyNUZMRTlCUVU4c1IwRkJSeXhKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEVsQlFVa3NSVUZCUlN4VFFVRlRMRU5CUVVNc1EwRkJRenM3UVVGRmJFUXNVVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGRGJrSXNUMEZCVHl4RlFVTlFMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zV1VGQldTeERRVUZETEdOQlFXTXNSVUZCUlN4RlFVRkZMRVZCUVVVc1EwRkRMME1zU1VGQlNTeEZRVU5LTEU5QlFVOHNSVUZEVUN4WFFVRlhMRVZCUTFnc1QwRkJUeXhEUVVOU0xFTkJRVU1zUlVGRFJpeFRRVUZUTEVOQlExWXNRMEZCUXl4RFFVRkRPMGRCUTBvN096czdPenM3T3pzN08wRkJWMFFzWTBGQldTeEZRVUZGTEhOQ1FVRlRMRk5CUVZNc1JVRkJSU3hKUVVGSkxFVkJRVVVzVVVGQlVTeEZRVUZGTzBGQlEyaEVMRkZCUVVrc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVTdVVUZETjBJc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNVMEZCVXl4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE96dEJRVVUzUXl4UlFVRkpMSEZDUVVGeFFpeEhRVUZITEVWQlFVVXNRMEZCUXpzN1FVRkZMMElzVVVGQlNTeFJRVUZSTEVWQlFVVTdPMEZCUlZvc01rSkJRWEZDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dExRVU42UXpzN1FVRkZSQ3g1UWtGQmNVSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU03UVVGRGRFTXNVVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVFVGQlRTeEZRVUZGTzBGQlEzaENMREpDUVVGeFFpeERRVUZETEVsQlFVa3NRMEZEZUVJc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5d3JRa0ZCSzBJc1EwRkJReXhEUVVOb1JDeERRVUZETzB0QlEwZzdPMEZCUlVRc1VVRkJTU3hyUWtGQmEwSXNSMEZCUnl4RFFVTjJRaXhIUVVGSExFVkJRMGdzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExIRkNRVUZ4UWl4RlFVRkZMRWxCUVVrc1EwRkJReXhGUVVOc1JDeEhRVUZITEVOQlEwb3NRMEZCUXp0QlFVTkdMRkZCUVVrc1dVRkJXU3hIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNXVUZCV1N4RFFVTjZReXhyUWtGQmEwSXNSVUZEYkVJc1RVRkJUU3hGUVVOT0xFMUJRVTBzUTBGQlF5eFZRVUZWTEVOQlEyeENMRU5CUVVNN1FVRkRSaXhSUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRPMGRCUTNwQ096dEJRVVZFTEd0Q1FVRm5RaXhGUVVGRkxEQkNRVUZUTEV0QlFVc3NSVUZCUlN4VFFVRlRMRVZCUVVVN1FVRkRNME1zVVVGQlNTeE5RVUZOTEVkQlFVY3NSVUZCUlN4RFFVRkRPMEZCUTJoQ0xGVkJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRGRFSXNVMEZCU3l4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVU3UVVGRGNrTXNXVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1MwRkRiRU03UVVGRFJDeFhRVUZQTEUxQlFVMHNRMEZCUXp0SFFVTm1PenM3T3pzN096dEJRVkZFTEcxQ1FVRnBRaXhGUVVGRkxESkNRVUZUTEZOQlFWTXNSVUZCUlN4SlFVRkpMRVZCUVVVN1FVRkRNME1zVVVGQlNTeE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhUUVVGVExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdRVUZETDBNc1VVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRmxCUVZrc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeEZRVUZGTEUxQlFVMHNSVUZCUlN4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU1zUTBGQlF6dEhRVU0zUlRzN096czdPenM3T3pzN096czdRVUZqUkN4cFFrRkJaU3hGUVVGRkxIbENRVUZUTEVsQlFVa3NSVUZCUlN4VlFVRlZMRVZCUVVVN1FVRkRNVU1zVVVGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenM3UVVGRk0wSXNVVUZCU1N4VFFVRlRMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZET3p0QlFVVm9ReXhSUVVGSkxFTkJRVU1zVTBGQlV5eEZRVUZGTEVOQlFVTTdRVUZEYWtJc1VVRkJTU3hOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRMRVZCUVVVc1NVRkJTU3hGUVVGRkxGVkJRVlVzUTBGQlF5eERRVUZET3p0QlFVVnVSQ3hSUVVGSkxGVkJRVlVzUjBGQlNTeEpRVUZKTEVOQlFVTXNWVUZCVlN4SFFVRkhMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRMnBFTEZOQlFWTXNSVUZEVkN4SlFVRkpMRVZCUTBvc1VVRkJVU3hEUVVOVUxFRkJRVU1zUTBGQlF6czdRVUZGU0N4UlFVRkpMRTFCUVUwc1IwRkJSeXhEUVVGRExFZEJRVWNzUlVGQlJTeFpRVUZaTEVWQlFVVXNWVUZCVlN4RlFVRkZMRTFCUVUwc1JVRkJSU3hUUVVGVExFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEY2tVc1VVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNUVUZCVFN4RlFVRkZPMEZCUTNoQ0xGbEJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4WlFVRlpMRU5CUVVNN1FVRkRla0lzV1VGQlRTeERRVUZETEVsQlFVa3NRMEZEVkN4elFrRkJjMElzUlVGRGRFSXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXdyUWtGQkswSXNRMEZCUXl4RFFVTm9SQ3hEUVVGRE8wdEJRMGc3TzBGQlJVUXNVVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVOU0xFZEJRVWNzUlVGRFNDeE5RVUZOTEVWQlEwNHNUVUZCVFN4RFFVRkRMRlZCUVZVc1IwRkJSeXhEUVVGRExFdEJRVXNzUlVGQlJTeE5RVUZOTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWRCUVVjc1JVRkJSU3hGUVVOdVJDeEpRVUZKTEVWQlEwb3NjVUpCUVhGQ0xFVkJRM0pDTEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1dVRkJXU3hEUVVGRExFVkJRelZDTEV0QlFVc3NSVUZEVEN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExGbEJRVmtzUTBGQlF5eFJRVUZSTEVWQlFVVXNUVUZCVFN4RlFVRkZMRTFCUVUwc1EwRkJReXhWUVVGVkxFTkJRVU1zUlVGRE4wUXNZVUZCWVN4RFFVTmtMRU5CUVVNc1EwRkJRenRIUVVOS096czdPenM3T3pzN1FVRlRSQ3hsUVVGaExFVkJRVVVzZFVKQlFWTXNVMEZCVXl4RlFVRkZMRWxCUVVrc1JVRkJSU3hOUVVGTkxFVkJRVVU3UVVGREwwTXNVVUZCU1N4TlFVRk5MRWRCUVVjc1JVRkJSVHRSUVVOaUxFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTTdPMEZCUlRsRExGRkJRVWtzVTBGQlV5eEZRVUZGTzBGQlEySXNWVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF6dEJRVU4yUWl4aFFVRlBMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU03UzBGRGNrSTdPMEZCUlVRc1VVRkJTU3hOUVVGTkxFVkJRVVU3UVVGRFZpeGhRVUZQTEVOQlFVTXNUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdTMEZEZWtNN1FVRkRSQ3hYUVVGUExFTkJRVU1zVDBGQlR5eEhRVUZITEZOQlFWTXNRMEZCUXp0QlFVTTFRaXhYUVVGUExFTkJRVU1zVVVGQlVTeEhRVUZITEZWQlFWVXNRMEZCUXp0QlFVTTVRaXhYUVVGUExFTkJRVU1zVlVGQlZTeEhRVUZITEhOQ1FVRnpRaXhEUVVGRE96dEJRVVUxUXl4UlFVRkpMRU5CUVVNc1UwRkJVeXhGUVVGRk8wRkJRMlFzV1VGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExGVkJRVlVzUlVGQlJTeEpRVUZKTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJRenRMUVVNNVJDeE5RVUZOTzBGQlEwd3NXVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dExRVU4wUWpzN1FVRkZSQ3hSUVVGSkxFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNUVUZCVFN4RlFVRkZPMEZCUTNaQ0xHRkJRVThzUTBGQlF5eE5RVUZOTEVkQlFVY3NVVUZCVVN4RFFVRkRPMHRCUXpOQ08wRkJRMFFzVjBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03UVVGRGRFTXNWVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6czdRVUZGY2tJc1VVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRmxCUVZrc1EwRkJReXg1UWtGQmVVSXNSVUZCUlN4RlFVRkZMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF6dEhRVU0xUlRzN096czdPenM3UVVGUlJDeGpRVUZaTEVWQlFVVXNjMEpCUVZNc1IwRkJSeXhGUVVGRk8wRkJRekZDTEZGQlFVa3NTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVU3VVVGRGVrSXNUMEZCVHl4WlFVRkJPMUZCUTFBc1NVRkJTU3haUVVGQk8xRkJRMG9zUlVGQlJTeFpRVUZCTEVOQlFVTTdPMEZCUlV3c1VVRkJTU3hKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTzBGQlEycENMRkZCUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTTdTMEZEZEVJN1FVRkRSQ3hSUVVGSkxFbEJRVWtzUTBGQlF5eFpRVUZaTEVWQlFVVTdRVUZEY2tJc1ZVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXp0QlFVTjJRaXhoUVVGUExFZEJRVWNzU1VGQlNTeERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRPMHRCUXpOQ096dEJRVVZFTEZGQlFVa3NTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU03UVVGRGNrSXNVVUZCU1N4UFFVRlBMRVZCUVVVN1FVRkRXQ3hWUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRTlCUVU4c1EwRkJRenRMUVVNNVFqdEJRVU5FTEZGQlFVa3NTVUZCU1N4RlFVRkZPMEZCUTFJc1ZVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNN1MwRkRlRUk3UVVGRFJDeFJRVUZKTEVWQlFVVXNSVUZCUlR0QlFVTk9MRlZCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRPMHRCUTNCQ08wRkJRMFFzVVVGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU03UjBGRE1VSTdPMEZCUlVRc1VVRkJUU3hGUVVGRkxHZENRVUZUTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1MwRkJTeXhGUVVGRk8wRkJRMnhETEZGQlFVa3NTVUZCU1N4TFFVRkxMRmxCUVZrc1JVRkJSVHRCUVVONlFpeFZRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFTkJRMjVDTEdOQlFXTXNSMEZEV2l4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRMUFzVTBGQlV5eEhRVU5VTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkRVQ3hIUVVGSExFbEJRMFlzUzBGQlN5eEhRVUZITEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUjBGQlJ5eExRVUZMTEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVFc1FVRkJReXhEUVVOeVJDeERRVUZETzB0QlEwZ3NUVUZCVFN4SlFVRkpMRWxCUVVrc1MwRkJTeXhuUWtGQlowSXNSVUZCUlR0QlFVTndReXhWUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMHRCUTNaQ0xFMUJRVTBzU1VGQlNTeEpRVUZKTEV0QlFVc3NaVUZCWlN4RlFVRkZPMEZCUTI1RExGVkJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dExRVU12UWl4TlFVRk5PMEZCUTB3c1ZVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8wdEJReTlDTzBkQlEwWTdPenM3UVVGSlJDeFZRVUZSTEVWQlFVVXNhMEpCUVd0Q096dEJRVVUxUWl4cFFrRkJaU3hGUVVGRkxIbENRVUZUTEZkQlFWY3NSVUZCUlN4UFFVRlBMRVZCUVVVN1FVRkRPVU1zVVVGQlNTeFJRVUZSTEVkQlFVY3NWMEZCVnl4RFFVRkRMRkZCUVZFN1VVRkRha01zUzBGQlN5eFpRVUZCTzFGQlEwd3NVVUZCVVN4WlFVRkJMRU5CUVVNN08wRkJSVmdzVTBGQlN5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExGRkJRVkVzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUdEJRVU12UXl4WFFVRkxMRWRCUVVjc1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBGQlEzQkNMR05CUVZFc1IwRkJSeXhKUVVGSkxFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXpzN1FVRkZMMElzVlVGQlNTeFJRVUZSTEVkQlFVY3NTVUZCU1N4RFFVRkRMRzlDUVVGdlFpeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPenRCUVVWb1JDeFZRVUZKTEZGQlFWRXNTVUZCU1N4SlFVRkpMRVZCUVVVN1FVRkRjRUlzV1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzBGQlF5OUNMRmxCUVVrc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTFCUVUwc1EwRkJRenRCUVVONlF5eGhRVUZMTEVOQlFVTXNTMEZCU3l4SFFVRkhMRXRCUVVzc1EwRkJRenRCUVVOd1FpeGhRVUZMTEVOQlFVTXNTVUZCU1N4SFFVRkhMRk5CUVZNc1IwRkJSeXhMUVVGTExFTkJRVU03UVVGREwwSXNXVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NVVUZCVVN4RFFVRkRMRTlCUVU4c1EwRkROME1zUzBGQlN5eEZRVU5NTEU5QlFVOHNSVUZEVUN4SlFVRkpMRU5CUVVNc1QwRkJUeXhGUVVOYUxFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVXNRMEZEYWtJc1EwRkJRenRCUVVOR0xGbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCVlN4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExGRkJRVkVzUTBGQlF5eFZRVUZWTEVOQlFVTTdRVUZEY2tRc1dVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1MwRkJTeXhEUVVGRE96dEJRVVY2UXl4WlFVRkpMRU5CUVVNc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF5eFRRVUZUTEVsQlFVa3NVVUZCVVN4RFFVRkRMRk5CUVZNc1EwRkJRenRCUVVOMFJDeFpRVUZKTEVOQlFVTXNZMEZCWXl4SFFVRkhMRWxCUVVrc1EwRkJReXhqUVVGakxFbEJRVWtzVVVGQlVTeERRVUZETEdOQlFXTXNRMEZCUXp0QlFVTnlSU3hoUVVGTExFTkJRVU1zVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNN1FVRkRha01zWVVGQlN5eERRVUZETEdOQlFXTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRE8wOUJRelZETEUxQlFVMDdRVUZEVEN4aFFVRkxMRU5CUVVNc1MwRkJTeXhIUVVGSExGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTTdRVUZETjBJc1lVRkJTeXhEUVVGRExFbEJRVWtzUjBGQlJ5eFRRVUZUTEVkQlFVY3NVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJRenM3UVVGRmVFTXNXVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhKUVVGSkxFTkJRVU1zVTBGQlV5eEpRVUZKTEZGQlFWRXNRMEZCUXl4VFFVRlRMRU5CUVVNN1FVRkRkRVFzV1VGQlNTeERRVUZETEdOQlFXTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1kwRkJZeXhKUVVGSkxGRkJRVkVzUTBGQlF5eGpRVUZqTEVOQlFVTTdUMEZEZEVVN1MwRkRSanRIUVVOR08wRkJRMFFzYzBKQlFXOUNMRVZCUVVVc09FSkJRVk1zUzBGQlN5eEZRVUZGTzBGQlEzQkRMRk5CUVVzc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExGbEJRVmtzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4SFFVRkhMRWRCUVVjc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUdEJRVU53UlN4VlFVRkpMRmRCUVZjc1IwRkJSeXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVNdlF5eFZRVUZKTEZkQlFWY3NTVUZCU1N4WFFVRlhMRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eEZRVUZGTzBGQlF6VkRMR1ZCUVU4c1YwRkJWeXhEUVVGRE8wOUJRM0JDTzB0QlEwWTdSMEZEUmpzN1FVRkZSQ3h0UWtGQmFVSXNSVUZCUlN3eVFrRkJVeXhKUVVGSkxFVkJRVVU3UVVGRGFFTXNVVUZCU1N4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRPMUZCUTNwRExHRkJRV0VzUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRVZCUVVVc1RVRkJUU3hGUVVGRkxFdEJRVXNzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXpzN1FVRkZNMFFzVVVGQlNTeEpRVUZKTEVOQlFVTXNZMEZCWXl4SlFVRkpMRWxCUVVrc1EwRkJReXhUUVVGVExFVkJRVVU3UVVGRGVrTXNiVUpCUVdFc1EwRkJReXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVTTdTMEZEYmtNN1FVRkRSQ3hSUVVGSkxFbEJRVWtzUTBGQlF5eFRRVUZUTEVWQlFVVTdRVUZEYkVJc2JVSkJRV0VzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1MwRkRPVUk3TzBGQlJVUXNWMEZCVHl4dlFrRkJiMElzUjBGQlJ5eGhRVUZoTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFZEJRVWNzUTBGQlF6dEhRVU01UkRzN1FVRkZSQ3hoUVVGWExFVkJRVVVzY1VKQlFWTXNTVUZCU1N4RlFVRkZPMEZCUXpGQ0xGRkJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRk8wRkJRM3BDTEZWQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETzBGQlF6VkNMRlZCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRMUVVOb1F6dEhRVU5HT3p0QlFVVkVMRTFCUVVrc1JVRkJSU3hqUVVGVExFbEJRVWtzUlVGQlJUdEJRVU51UWl4UlFVRkpMRVZCUVVVc1NVRkJTU3haUVVGWkxFOUJRVThzUTBGQlFTeEJRVUZETEVWQlFVVTdRVUZET1VJc1ZVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wdEJReTlDT3p0QlFVVkVMRkZCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMEZCUXpWQ0xGZEJRVThzU1VGQlNTeERRVUZETzBkQlEySTdPMEZCUlVRc2EwSkJRV2RDTEVWQlFVVXNNRUpCUVZNc1NVRkJTU3hGUVVGRk8wRkJReTlDTEZGQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXp0SFFVTTVRanM3UVVGRlJDeFpRVUZWTEVWQlFVVXNiMEpCUVZNc1RVRkJUU3hGUVVGRk8wRkJRek5DTEZGQlFVa3NTVUZCU1N4RFFVRkRMR05CUVdNc1JVRkJSVHRCUVVOMlFpeFZRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkRaQ3hKUVVGSkxFTkJRVU1zWTBGQll5eERRVU5xUWl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExGbEJRVmtzUTBGQlF5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRVZCUXpkRExFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlEzSkNMRU5CUTBZc1EwRkJRenRCUVVOR0xGVkJRVWtzUTBGQlF5eGpRVUZqTEVkQlFVY3NVMEZCVXl4RFFVRkRPMHRCUTJwRE96dEJRVVZFTEZGQlFVa3NUVUZCVFN4RlFVRkZPMEZCUTFZc1ZVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1MwRkRNVUk3UjBGRFJqczdRVUZGUkN4alFVRlpMRVZCUVVVc2MwSkJRVk1zVVVGQlVTeEZRVUZGTzBGQlF5OUNMRkZCUVVrc1RVRkJUU3hIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETzFGQlEyaENMRXRCUVVzc1dVRkJRVHRSUVVOTUxGbEJRVmtzV1VGQlFUdFJRVU5hTEZkQlFWY3NXVUZCUVN4RFFVRkRPenM3UVVGSFpDeFJRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSU3hGUVVGRk8wRkJRM0JDTEZsQlFVMHNNa0pCUVdNc05FSkJRVFJDTEVOQlFVTXNRMEZCUXp0TFFVTnVSRHM3TzBGQlIwUXNVVUZCU1N4SFFVRkhMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXpzN1FVRkZPVUlzVVVGQlNTeEhRVUZITEZsQlFWa3NUMEZCVHl4RlFVRkZPenRCUVVVeFFpeFhRVUZMTEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03UVVGRGNFSXNXVUZCVFN4SFFVRkhMRU5CUVVNc1IwRkJSeXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzBGQlEzUkNMR2xDUVVGWExFZEJRVWNzU1VGQlNTeERRVUZETzB0QlEzQkNMRTFCUVUwN08wRkJSVXdzYTBKQlFWa3NSMEZCUnl4SlFVRkpMRU5CUVVNN1FVRkRjRUlzVlVGQlNTeExRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRMRk5CUVZNc1JVRkJSU3hEUVVGRE96dEJRVVUxUWl4WlFVRk5MRWRCUVVjc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkpMRU5CUVVNc1JVRkJSU3hMUVVGTExFVkJRVVVzUjBGQlJ5eEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUTJ4RUxGZEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZMRU5CUVVNN1MwRkRla0k3TzBGQlJVUXNVVUZCU1N4SlFVRkpMRWRCUVVjc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN08wRkJSWFJETEZGQlFVa3NRMEZCUXl4WFFVRlhMRVZCUVVVN1FVRkRhRUlzVlVGQlNTeERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRPMHRCUTJwQ08wRkJRMFFzVVVGQlNTeFpRVUZaTEVWQlFVVTdRVUZEYUVJc1ZVRkJTU3hEUVVGRExGTkJRVk1zUlVGQlJTeERRVUZETzB0QlEyeENPMEZCUTBRc1VVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETzBkQlEzSkRPenRCUVVWRUxGZEJRVk1zUlVGQlJTeHhRa0ZCVnp0QlFVTndRaXhSUVVGSkxFTkJRVU1zVTBGQlV5eEZRVUZGTEVOQlFVTTdRVUZEYWtJc1VVRkJTU3hKUVVGSkxFTkJRVU1zVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUU3hGUVVGRk8wRkJRekZETEZWQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1MwRkRMME03UVVGRFJDeFhRVUZQTEVsQlFVa3NRMEZCUXl4WlFVRlpMRVZCUVVVc1EwRkJRenRIUVVNMVFqdEJRVU5FTEdOQlFWa3NSVUZCUlN4M1FrRkJWenRCUVVOMlFpeFhRVUZQTEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRE8wZEJRMnBETzBGQlEwUXNZVUZCVnl4RlFVRkZMSFZDUVVGWE8wRkJRM1JDTEZGQlFVa3NWMEZCVnl4SFFVRkhMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU03UVVGRGJrTXNVVUZCU1N4RFFVRkRMRmRCUVZjc1IwRkJSeXhGUVVGRkxFTkJRVU03UVVGRGRFSXNVMEZCU3l4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUjBGQlJ5eEhRVUZITEZkQlFWY3NRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJReXhIUVVGSExFZEJRVWNzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlR0QlFVTjBSQ3hWUVVGSkxFdEJRVXNzUjBGQlJ5eFhRVUZYTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN08wRkJSVE5DTEZWQlFVa3NTMEZCU3l4WlFVRlpMRTlCUVU4c1JVRkJSVHRCUVVNMVFpeFpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dFBRVU12UWl4TlFVRk5PMEZCUTB3c1dVRkJTU3hMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEZOQlFWTXNSVUZCUlN4RFFVRkRPMEZCUXpkQ0xGbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUXpWRExGbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8wOUJReTlDTzB0QlEwWTdSMEZEUmp0QlFVTkVMRlZCUVZFc1JVRkJSU3h2UWtGQlZ6dEJRVU51UWl4WFFVRlBMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zVFVGQlRTeERRVUZETzBkQlEyaERPenRCUVVWRUxGVkJRVkVzUlVGQlJTeHJRa0ZCVXl4UFFVRlBMRVZCUVVVN1FVRkRNVUlzVVVGQlNTeE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSVHRSUVVNeFFpeEpRVUZKTEVkQlFVY3NRMEZCUXl4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExGZEJRVmNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkJMRU5CUVVVc1IwRkJSeXhGUVVGRkxFTkJRVU03TzBGQlJTOUVMRkZCUVVrc1EwRkJReXhQUVVGUExFbEJRVWtzU1VGQlNTeFpRVUZaTEU5QlFVOHNSVUZCUlR0QlFVTjJReXhoUVVGUExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTTdTMEZEYmtJc1RVRkJUVHRCUVVOTUxGVkJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVTdPMEZCUlZnc1dVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVWQlFVVTdRVUZEYmtJc1owSkJRVTBzTWtKQlFXTXNiVUpCUVcxQ0xFTkJRVU1zUTBGQlF6dFRRVU14UXp0QlFVTkVMRmxCUVVrc1EwRkJReXhUUVVGVExFVkJRVVVzUTBGQlF6dFBRVU5zUWp0QlFVTkVMR0ZCUVU4c1NVRkJTU3hEUVVGRE8wdEJRMkk3UjBGRFJqczdRVUZGUkN4VlFVRlJMRVZCUVVVc2IwSkJRVmM3UVVGRGJrSXNVVUZCU1N4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJTeEhRVUZITEVsQlFVa3NRMEZCUXl4WFFVRlhMRWRCUVVjc1NVRkJTU3hEUVVGRExGbEJRVms3VVVGRGFFVXNTVUZCU1N4SFFVRkhMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPenM3UVVGSGFrTXNVVUZCU1N4SlFVRkpMRmxCUVZrc1QwRkJUeXhGUVVGRk8wRkJRek5DTEdGQlFVOHNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJRenRMUVVOdVFpeE5RVUZOTzBGQlEwd3NZVUZCVHl4SlFVRkpMRU5CUVVNN1MwRkRZanRIUVVOR096dEJRVVZFTEdGQlFWY3NSVUZCUlN4eFFrRkJVeXhQUVVGUExFVkJRVVU3UVVGRE4wSXNVVUZCU1N4SlFVRkpMRU5CUVVNc1UwRkJVeXhKUVVGSkxFOUJRVThzUlVGQlJUdEJRVU0zUWl4aFFVRlBMRk5CUVZNc1IwRkJSeXhQUVVGUExFZEJRVWNzUjBGQlJ5eERRVUZETzB0QlEyeERMRTFCUVUwN1FVRkRUQ3hoUVVGUExFOUJRVThzUjBGQlJ5eFBRVUZQTEVOQlFVTTdTMEZETVVJN1IwRkRSanM3UVVGRlJDeGpRVUZaTEVWQlFVVXNjMEpCUVZNc1IwRkJSeXhGUVVGRk8wRkJRekZDTEZkQlFVOHNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhaUVVGWkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdSMEZEZEVNN08wRkJSVVFzWlVGQllTeEZRVUZGTEhWQ1FVRlRMRWRCUVVjc1JVRkJSVHRCUVVNelFpeFhRVUZQTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1lVRkJZU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBkQlEzWkRPenRCUVVWRUxGZEJRVk1zUlVGQlJTeHRRa0ZCVXl4SlFVRkpMRVZCUVVVN1FVRkRlRUlzVVVGQlNTeEhRVUZITEVkQlFVY3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU0zUWl4UlFVRkpMRWRCUVVjc1JVRkJSVHRCUVVOUUxGTkJRVWNzUTBGQlF5eGpRVUZqTEVWQlFVVXNRMEZCUXp0QlFVTnlRaXhoUVVGUExFZEJRVWNzUTBGQlF6dExRVU5hT3p0QlFVVkVMRTlCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMEZCUTJ4RUxFOUJRVWNzUTBGQlF5eFRRVUZUTEVkQlFVY3NTVUZCU1N4RFFVRkRPMEZCUTNKQ0xFOUJRVWNzUTBGQlF5eGpRVUZqTEVkQlFVY3NRMEZCUXl4RFFVRkRPenRCUVVWMlFpeFhRVUZQTEVkQlFVY3NRMEZCUXp0SFFVTmFPenRCUVVWRUxHRkJRVmNzUlVGQlJTeHhRa0ZCVXl4VFFVRlRMRVZCUVVVc1NVRkJTU3hGUVVGRkxGZEJRVmNzUlVGQlJUdEJRVU5zUkN4UlFVRkpMRTFCUVUwc1IwRkJSeXhGUVVGRk8xRkJRMklzVlVGQlZTeEhRVUZITEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc1NVRkJTU3hGUVVGRkxGTkJRVk1zUlVGQlJTeE5RVUZOTEVWQlFVVXNWMEZCVnl4RFFVRkRMRU5CUVVNN1FVRkRNVVVzVVVGQlNTeFhRVUZYTEVkQlFVY3NTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhUUVVGVExFVkJRVVVzU1VGQlNTeEZRVUZGTEZGQlFWRXNRMEZCUXp0UlFVTXhSQ3hYUVVGWExFZEJRVWNzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZEZGtJc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETEVOQlFVTXNiVUpCUVdNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGRGJFUXNRMEZCUXl4RFFVTkdMSE5EUVVOR0xFTkJRVU03TzBGQlJVb3NWMEZCVHp0QlFVTk1MRmxCUVUwc1JVRkJSU3hOUVVGTk8wRkJRMlFzWjBKQlFWVXNSVUZCUlN4VlFVRlZPMEZCUTNSQ0xGVkJRVWtzUlVGQlJTeFhRVUZYTzBGQlEycENMR2RDUVVGVkxFVkJRVVVzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRE8wdEJRM3BETEVOQlFVTTdSMEZEU0RzN1FVRkZSQ3hoUVVGWExFVkJRVVVzY1VKQlFWTXNUVUZCVFN4RlFVRkZMRk5CUVZNc1JVRkJSU3hOUVVGTkxFVkJRVVU3UVVGREwwTXNVVUZCU1N4UFFVRlBMRWRCUVVjc1JVRkJSVHRSUVVOa0xGRkJRVkVzUjBGQlJ5eEZRVUZGTzFGQlEySXNTMEZCU3l4SFFVRkhMRVZCUVVVN1VVRkRWaXhIUVVGSExFZEJRVWNzUlVGQlJUdFJRVU5TTEZWQlFWVXNSMEZCUnl4RFFVRkRMRTFCUVUwN1VVRkRjRUlzUzBGQlN5eFpRVUZCTEVOQlFVTTdPMEZCUlZJc1VVRkJTU3hWUVVGVkxFVkJRVVU3UVVGRFpDeFpRVUZOTEVkQlFVY3NSVUZCUlN4RFFVRkRPMHRCUTJJN08wRkJSVVFzVjBGQlR5eERRVUZETEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzBGQlEzcERMRmRCUVU4c1EwRkJReXhKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRPenRCUVVVdlFpeFJRVUZKTEVsQlFVa3NRMEZCUXl4UlFVRlJMRVZCUVVVN1FVRkRha0lzWVVGQlR5eERRVUZETEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU03UzBGRGJrTTdRVUZEUkN4UlFVRkpMRWxCUVVrc1EwRkJReXhaUVVGWkxFVkJRVVU3UVVGRGNrSXNZVUZCVHl4RFFVRkRMRk5CUVZNc1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTTdRVUZEY0VNc1lVRkJUeXhEUVVGRExGbEJRVmtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZMRU5CUVVNN1MwRkRlRU03TzBGQlJVUXNVVUZCU1N4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJUdFJRVU16UWl4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZET3pzN08wRkJTVFZDTEZGQlFVa3NUMEZCVHl4SlFVRkpMRTlCUVU4c1JVRkJSVHRCUVVOMFFpeGhRVUZQTEVOQlFVTXNSVUZCUlN4SFFVRkhMRTlCUVU4c1NVRkJTU3huUWtGQlowSXNRMEZCUXp0QlFVTjZReXhoUVVGUExFTkJRVU1zVDBGQlR5eEhRVUZITEU5QlFVOHNTVUZCU1N4blFrRkJaMElzUTBGQlF6dExRVU12UXpzN096dEJRVWxFTEZGQlFVa3NRMEZCUXl4SFFVRkhMRk5CUVZNc1EwRkJRenRCUVVOc1FpeFhRVUZQTEVOQlFVTXNSVUZCUlN4RlFVRkZPMEZCUTFZc1YwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXp0QlFVTjRRaXhaUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRPenRCUVVWc1FpeFZRVUZKTEVsQlFVa3NRMEZCUXl4UlFVRlJMRVZCUVVVN1FVRkRha0lzVjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF6dFBRVU14UWp0QlFVTkVMRlZCUVVrc1NVRkJTU3hEUVVGRExGbEJRVmtzUlVGQlJUdEJRVU55UWl4aFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRPMEZCUXpOQ0xHZENRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETzA5QlF5OUNPMHRCUTBZN08wRkJSVVFzVVVGQlNTeFZRVUZWTEVWQlFVVTdRVUZEWkN4aFFVRlBMRU5CUVVNc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNZVUZCWVN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8wdEJRMnhFT3p0QlFVVkVMRkZCUVVrc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJUdEJRVU5xUWl4aFFVRlBMRU5CUVVNc1IwRkJSeXhIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNZVUZCWVN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wdEJRemxETzBGQlEwUXNVVUZCU1N4SlFVRkpMRU5CUVVNc1dVRkJXU3hGUVVGRk8wRkJRM0pDTEdGQlFVOHNRMEZCUXl4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eGhRVUZoTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRha1FzWVVGQlR5eERRVUZETEZGQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExHRkJRV0VzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0TFFVTjRSRHM3UVVGRlJDeFJRVUZKTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hGUVVGRk8wRkJRM0pDTEdGQlFVOHNRMEZCUXl4SlFVRkpMRWRCUVVjc1RVRkJUU3hEUVVGRE8wdEJRM1pDTzBGQlEwUXNVVUZCU1N4SlFVRkpMRU5CUVVNc1kwRkJZeXhGUVVGRk8wRkJRM1pDTEdGQlFVOHNRMEZCUXl4WFFVRlhMRWRCUVVjc1lVRkJZU3hEUVVGRE8wdEJRM0pETzBGQlEwUXNWMEZCVHl4UFFVRlBMRU5CUVVNN1IwRkRhRUk3TzBGQlJVUXNhVUpCUVdVc1JVRkJSU3g1UWtGQlV5eE5RVUZOTEVWQlFVVXNVMEZCVXl4RlFVRkZMRTFCUVUwc1JVRkJSU3hYUVVGWExFVkJRVVU3UVVGRGFFVXNVVUZCU1N4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eE5RVUZOTEVWQlFVVXNVMEZCVXl4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRE8wRkJRekZFTEZkQlFVOHNRMEZCUXl4SFFVRkhMRWRCUVVjc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMR1ZCUVdVc1EwRkJReXhEUVVGRE8wRkJRekZFTEZkQlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzBGQlEzUkRMRkZCUVVrc1YwRkJWeXhGUVVGRk8wRkJRMllzVlVGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenRCUVVNMVFpeFpRVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRE8wRkJRM1pDTEdGQlFVOHNRMEZCUXl4VlFVRlZMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU03UzBGRE9VSXNUVUZCVFN4SlFVRkpMRTFCUVUwc1JVRkJSVHRCUVVOcVFpeFpRVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8wRkJRM0pDTEdGQlFVOHNSVUZCUlN4RFFVRkRPMHRCUTFnc1RVRkJUVHRCUVVOTUxHRkJRVThzVDBGQlR5eERRVUZETzB0QlEyaENPMGRCUTBZN1EwRkRSaXhEUVVGRE96dEJRVVZHTEVOQlFVTXNXVUZCVnp0QlFVTldMRTFCUVUwc1lVRkJZU3hIUVVGSExFTkJRM0JDTEc5Q1FVRnZRaXhIUVVOd1Fpd3lRa0ZCTWtJc1IwRkRNMElzZVVKQlFYbENMRWRCUTNwQ0xEaENRVUU0UWl4SFFVTTVRaXh0UWtGQmJVSXNSMEZEYmtJc1owSkJRV2RDTEVkQlEyaENMSFZDUVVGMVFpeEhRVU4yUWl3d1FrRkJNRUlzUjBGRE1VSXNhME5CUVd0RExFZEJRMnhETERCQ1FVRXdRaXhIUVVNeFFpeHBRMEZCYVVNc1IwRkRha01zTmtKQlFUWkNMRWRCUXpkQ0xDdENRVUVyUWl4SFFVTXZRaXg1UTBGQmVVTXNSMEZEZWtNc2RVTkJRWFZETEVkQlEzWkRMR3RDUVVGclFpeERRVUZCTEVOQlEyeENMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6czdRVUZGWWl4TlFVRk5MR0ZCUVdFc1IwRkJTU3hyUWtGQmEwSXNRMEZCUXl4alFVRmpMRWRCUVVjc1JVRkJSU3hCUVVGRExFTkJRVU03TzBGQlJTOUVMRTlCUVVzc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4aFFVRmhMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVN1FVRkRjRVFzYVVKQlFXRXNRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTTdSMEZEZUVNN1EwRkRSaXhEUVVGQkxFVkJRVWNzUTBGQlF6czdPenM3UVVGTFRDeHJRa0ZCYTBJc1EwRkJReXcyUWtGQk5rSXNSMEZCUnl4VlFVRlRMRWxCUVVrc1JVRkJSVHRCUVVOb1JTeFRRVU5GTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zWTBGQll5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVTjRReXcwUWtGQk5FSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRM1pETzBOQlEwZ3NRMEZCUXpzN1FVRkZSaXhUUVVGVExGbEJRVmtzUTBGQlF5eGxRVUZsTEVWQlFVVXNVVUZCVVN4RlFVRkZMRXRCUVVzc1JVRkJSU3hEUVVGRExFVkJRVVVzU1VGQlNTeEZRVUZGTzBGQlF5OUVMRTFCUVVrc1MwRkJTeXhIUVVGSExGRkJRVkVzUTBGQlF5eFJRVUZSTEVWQlFVVTdUVUZETjBJc1IwRkJSeXhIUVVGSExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTTdRVUZEY2tJc1RVRkJTU3hsUVVGbExFVkJRVVU3UVVGRGJrSXNUMEZCUnl4RlFVRkZMRU5CUVVNN1IwRkRVRHM3UVVGRlJDeFRRVUZQTEVOQlFVTXNSMEZCUnl4SFFVRkhMRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVU3UVVGRGJrSXNVMEZCU3l4SFFVRkhMRkZCUVZFc1EwRkJReXhWUVVGVkxFTkJRVU1zUzBGQlN5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF6dEhRVU53UkRzN1FVRkZSQ3hOUVVGSkxHVkJRV1VzUlVGQlJUdEJRVU51UWl4WFFVRlBMRU5CUTB3c1VVRkJVU3hEUVVGRExGTkJRVk1zUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhGUVVOMFF5eEhRVUZITEVWQlEwZ3NTMEZCU3l4RlFVTk1MRWxCUVVrc1JVRkRTaXhSUVVGUkxFTkJRVU1zV1VGQldTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVNdlFpeEpRVUZKTEVWQlEwb3NTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhSUVVGUkxFTkJRVU1zVFVGQlRTeERRVUZETEdWQlFXVXNRMEZCUXl4RlFVTXZReXhKUVVGSkxFTkJRMHdzUTBGQlF6dEhRVU5JTEUxQlFVMDdRVUZEVEN4WFFVRlBMRXRCUVVzc1EwRkJRenRIUVVOa08wTkJRMFk3TzNGQ1FVVmpMR3RDUVVGclFpSXNJbVpwYkdVaU9pSnFZWFpoYzJOeWFYQjBMV052YlhCcGJHVnlMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUhzZ1EwOU5VRWxNUlZKZlVrVldTVk5KVDA0c0lGSkZWa2xUU1U5T1gwTklRVTVIUlZNZ2ZTQm1jbTl0SUNjdUxpOWlZWE5sSnp0Y2JtbHRjRzl5ZENCRmVHTmxjSFJwYjI0Z1puSnZiU0FuTGk0dlpYaGpaWEIwYVc5dUp6dGNibWx0Y0c5eWRDQjdJR2x6UVhKeVlYa2dmU0JtY205dElDY3VMaTkxZEdsc2N5YzdYRzVwYlhCdmNuUWdRMjlrWlVkbGJpQm1jbTl0SUNjdUwyTnZaR1V0WjJWdUp6dGNibHh1Wm5WdVkzUnBiMjRnVEdsMFpYSmhiQ2gyWVd4MVpTa2dlMXh1SUNCMGFHbHpMblpoYkhWbElEMGdkbUZzZFdVN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUVwaGRtRlRZM0pwY0hSRGIyMXdhV3hsY2lncElIdDlYRzVjYmtwaGRtRlRZM0pwY0hSRGIyMXdhV3hsY2k1d2NtOTBiM1I1Y0dVZ1BTQjdYRzRnSUM4dklGQlZRa3hKUXlCQlVFazZJRmx2ZFNCallXNGdiM1psY25KcFpHVWdkR2hsYzJVZ2JXVjBhRzlrY3lCcGJpQmhJSE4xWW1Oc1lYTnpJSFJ2SUhCeWIzWnBaR1ZjYmlBZ0x5OGdZV3gwWlhKdVlYUnBkbVVnWTI5dGNHbHNaV1FnWm05eWJYTWdabTl5SUc1aGJXVWdiRzl2YTNWd0lHRnVaQ0JpZFdabVpYSnBibWNnYzJWdFlXNTBhV056WEc0Z0lHNWhiV1ZNYjI5cmRYQTZJR1oxYm1OMGFXOXVLSEJoY21WdWRDd2dibUZ0WlNBdktpd2dJSFI1Y0dVZ0tpOHBJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVwYm5SbGNtNWhiRTVoYldWTWIyOXJkWEFvY0dGeVpXNTBMQ0J1WVcxbEtUdGNiaUFnZlN4Y2JpQWdaR1Z3ZEdobFpFeHZiMnQxY0RvZ1puVnVZM1JwYjI0b2JtRnRaU2tnZTF4dUlDQWdJSEpsZEhWeWJpQmJYRzRnSUNBZ0lDQjBhR2x6TG1Gc2FXRnpZV0pzWlNnblkyOXVkR0ZwYm1WeUxteHZiMnQxY0NjcExGeHVJQ0FnSUNBZ0p5aGtaWEIwYUhNc0lDY3NYRzRnSUNBZ0lDQktVMDlPTG5OMGNtbHVaMmxtZVNodVlXMWxLU3hjYmlBZ0lDQWdJQ2NwSjF4dUlDQWdJRjA3WEc0Z0lIMHNYRzVjYmlBZ1kyOXRjR2xzWlhKSmJtWnZPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0JqYjI1emRDQnlaWFpwYzJsdmJpQTlJRU5QVFZCSlRFVlNYMUpGVmtsVFNVOU9MRnh1SUNBZ0lDQWdkbVZ5YzJsdmJuTWdQU0JTUlZaSlUwbFBUbDlEU0VGT1IwVlRXM0psZG1semFXOXVYVHRjYmlBZ0lDQnlaWFIxY200Z1czSmxkbWx6YVc5dUxDQjJaWEp6YVc5dWMxMDdYRzRnSUgwc1hHNWNiaUFnWVhCd1pXNWtWRzlDZFdabVpYSTZJR1oxYm1OMGFXOXVLSE52ZFhKalpTd2diRzlqWVhScGIyNHNJR1Y0Y0d4cFkybDBLU0I3WEc0Z0lDQWdMeThnUm05eVkyVWdZU0J6YjNWeVkyVWdZWE1nZEdocGN5QnphVzF3YkdsbWFXVnpJSFJvWlNCdFpYSm5aU0JzYjJkcFl5NWNiaUFnSUNCcFppQW9JV2x6UVhKeVlYa29jMjkxY21ObEtTa2dlMXh1SUNBZ0lDQWdjMjkxY21ObElEMGdXM052ZFhKalpWMDdYRzRnSUNBZ2ZWeHVJQ0FnSUhOdmRYSmpaU0E5SUhSb2FYTXVjMjkxY21ObExuZHlZWEFvYzI5MWNtTmxMQ0JzYjJOaGRHbHZiaWs3WEc1Y2JpQWdJQ0JwWmlBb2RHaHBjeTVsYm5acGNtOXViV1Z1ZEM1cGMxTnBiWEJzWlNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUZzbmNtVjBkWEp1SUNjc0lITnZkWEpqWlN3Z0p6c25YVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLR1Y0Y0d4cFkybDBLU0I3WEc0Z0lDQWdJQ0F2THlCVWFHbHpJR2x6SUdFZ1kyRnpaU0IzYUdWeVpTQjBhR1VnWW5WbVptVnlJRzl3WlhKaGRHbHZiaUJ2WTJOMWNuTWdZWE1nWVNCamFHbHNaQ0J2WmlCaGJtOTBhR1Z5WEc0Z0lDQWdJQ0F2THlCamIyNXpkSEoxWTNRc0lHZGxibVZ5WVd4c2VTQmljbUZqWlhNdUlGZGxJR2hoZG1VZ2RHOGdaWGh3YkdsamFYUnNlU0J2ZFhSd2RYUWdkR2hsYzJVZ1luVm1abVZ5WEc0Z0lDQWdJQ0F2THlCdmNHVnlZWFJwYjI1eklIUnZJR1Z1YzNWeVpTQjBhR0YwSUhSb1pTQmxiV2wwZEdWa0lHTnZaR1VnWjI5bGN5QnBiaUIwYUdVZ1kyOXljbVZqZENCc2IyTmhkR2x2Ymk1Y2JpQWdJQ0FnSUhKbGRIVnliaUJiSjJKMVptWmxjaUFyUFNBbkxDQnpiM1Z5WTJVc0lDYzdKMTA3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lITnZkWEpqWlM1aGNIQmxibVJVYjBKMVptWmxjaUE5SUhSeWRXVTdYRzRnSUNBZ0lDQnlaWFIxY200Z2MyOTFjbU5sTzF4dUlDQWdJSDFjYmlBZ2ZTeGNibHh1SUNCcGJtbDBhV0ZzYVhwbFFuVm1abVZ5T2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXhkVzkwWldSVGRISnBibWNvSnljcE8xeHVJQ0I5TEZ4dUlDQXZMeUJGVGtRZ1VGVkNURWxESUVGUVNWeHVJQ0JwYm5SbGNtNWhiRTVoYldWTWIyOXJkWEE2SUdaMWJtTjBhVzl1S0hCaGNtVnVkQ3dnYm1GdFpTa2dlMXh1SUNBZ0lIUm9hWE11Ykc5dmEzVndVSEp2Y0dWeWRIbEdkVzVqZEdsdmJrbHpWWE5sWkNBOUlIUnlkV1U3WEc0Z0lDQWdjbVYwZFhKdUlGc25iRzl2YTNWd1VISnZjR1Z5ZEhrb0p5d2djR0Z5Wlc1MExDQW5MQ2NzSUVwVFQwNHVjM1J5YVc1bmFXWjVLRzVoYldVcExDQW5LU2RkTzF4dUlDQjlMRnh1WEc0Z0lHeHZiMnQxY0ZCeWIzQmxjblI1Um5WdVkzUnBiMjVKYzFWelpXUTZJR1poYkhObExGeHVYRzRnSUdOdmJYQnBiR1U2SUdaMWJtTjBhVzl1S0dWdWRtbHliMjV0Wlc1MExDQnZjSFJwYjI1ekxDQmpiMjUwWlhoMExDQmhjMDlpYW1WamRDa2dlMXh1SUNBZ0lIUm9hWE11Wlc1MmFYSnZibTFsYm5RZ1BTQmxiblpwY205dWJXVnVkRHRjYmlBZ0lDQjBhR2x6TG05d2RHbHZibk1nUFNCdmNIUnBiMjV6TzF4dUlDQWdJSFJvYVhNdWMzUnlhVzVuVUdGeVlXMXpJRDBnZEdocGN5NXZjSFJwYjI1ekxuTjBjbWx1WjFCaGNtRnRjenRjYmlBZ0lDQjBhR2x6TG5SeVlXTnJTV1J6SUQwZ2RHaHBjeTV2Y0hScGIyNXpMblJ5WVdOclNXUnpPMXh1SUNBZ0lIUm9hWE11Y0hKbFkyOXRjR2xzWlNBOUlDRmhjMDlpYW1WamREdGNibHh1SUNBZ0lIUm9hWE11Ym1GdFpTQTlJSFJvYVhNdVpXNTJhWEp2Ym0xbGJuUXVibUZ0WlR0Y2JpQWdJQ0IwYUdsekxtbHpRMmhwYkdRZ1BTQWhJV052Ym5SbGVIUTdYRzRnSUNBZ2RHaHBjeTVqYjI1MFpYaDBJRDBnWTI5dWRHVjRkQ0I4ZkNCN1hHNGdJQ0FnSUNCa1pXTnZjbUYwYjNKek9pQmJYU3hjYmlBZ0lDQWdJSEJ5YjJkeVlXMXpPaUJiWFN4Y2JpQWdJQ0FnSUdWdWRtbHliMjV0Wlc1MGN6b2dXMTFjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdkR2hwY3k1d2NtVmhiV0pzWlNncE8xeHVYRzRnSUNBZ2RHaHBjeTV6ZEdGamExTnNiM1FnUFNBd08xeHVJQ0FnSUhSb2FYTXVjM1JoWTJ0V1lYSnpJRDBnVzEwN1hHNGdJQ0FnZEdocGN5NWhiR2xoYzJWeklEMGdlMzA3WEc0Z0lDQWdkR2hwY3k1eVpXZHBjM1JsY25NZ1BTQjdJR3hwYzNRNklGdGRJSDA3WEc0Z0lDQWdkR2hwY3k1b1lYTm9aWE1nUFNCYlhUdGNiaUFnSUNCMGFHbHpMbU52YlhCcGJHVlRkR0ZqYXlBOUlGdGRPMXh1SUNBZ0lIUm9hWE11YVc1c2FXNWxVM1JoWTJzZ1BTQmJYVHRjYmlBZ0lDQjBhR2x6TG1Kc2IyTnJVR0Z5WVcxeklEMGdXMTA3WEc1Y2JpQWdJQ0IwYUdsekxtTnZiWEJwYkdWRGFHbHNaSEpsYmlobGJuWnBjbTl1YldWdWRDd2diM0IwYVc5dWN5azdYRzVjYmlBZ0lDQjBhR2x6TG5WelpVUmxjSFJvY3lBOVhHNGdJQ0FnSUNCMGFHbHpMblZ6WlVSbGNIUm9jeUI4ZkZ4dUlDQWdJQ0FnWlc1MmFYSnZibTFsYm5RdWRYTmxSR1Z3ZEdoeklIeDhYRzRnSUNBZ0lDQmxiblpwY205dWJXVnVkQzUxYzJWRVpXTnZjbUYwYjNKeklIeDhYRzRnSUNBZ0lDQjBhR2x6TG05d2RHbHZibk11WTI5dGNHRjBPMXh1SUNBZ0lIUm9hWE11ZFhObFFteHZZMnRRWVhKaGJYTWdQU0IwYUdsekxuVnpaVUpzYjJOclVHRnlZVzF6SUh4OElHVnVkbWx5YjI1dFpXNTBMblZ6WlVKc2IyTnJVR0Z5WVcxek8xeHVYRzRnSUNBZ2JHVjBJRzl3WTI5a1pYTWdQU0JsYm5acGNtOXViV1Z1ZEM1dmNHTnZaR1Z6TEZ4dUlDQWdJQ0FnYjNCamIyUmxMRnh1SUNBZ0lDQWdabWx5YzNSTWIyTXNYRzRnSUNBZ0lDQnBMRnh1SUNBZ0lDQWdiRHRjYmx4dUlDQWdJR1p2Y2lBb2FTQTlJREFzSUd3Z1BTQnZjR052WkdWekxteGxibWQwYURzZ2FTQThJR3c3SUdrckt5a2dlMXh1SUNBZ0lDQWdiM0JqYjJSbElEMGdiM0JqYjJSbGMxdHBYVHRjYmx4dUlDQWdJQ0FnZEdocGN5NXpiM1Z5WTJVdVkzVnljbVZ1ZEV4dlkyRjBhVzl1SUQwZ2IzQmpiMlJsTG14dll6dGNiaUFnSUNBZ0lHWnBjbk4wVEc5aklEMGdabWx5YzNSTWIyTWdmSHdnYjNCamIyUmxMbXh2WXp0Y2JpQWdJQ0FnSUhSb2FYTmJiM0JqYjJSbExtOXdZMjlrWlYwdVlYQndiSGtvZEdocGN5d2diM0JqYjJSbExtRnlaM01wTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUVac2RYTm9JR0Z1ZVNCMGNtRnBiR2x1WnlCamIyNTBaVzUwSUhSb1lYUWdiV2xuYUhRZ1ltVWdjR1Z1WkdsdVp5NWNiaUFnSUNCMGFHbHpMbk52ZFhKalpTNWpkWEp5Wlc1MFRHOWpZWFJwYjI0Z1BTQm1hWEp6ZEV4dll6dGNiaUFnSUNCMGFHbHpMbkIxYzJoVGIzVnlZMlVvSnljcE8xeHVYRzRnSUNBZ0x5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHNWxlSFFnS2k5Y2JpQWdJQ0JwWmlBb2RHaHBjeTV6ZEdGamExTnNiM1FnZkh3Z2RHaHBjeTVwYm14cGJtVlRkR0ZqYXk1c1pXNW5kR2dnZkh3Z2RHaHBjeTVqYjIxd2FXeGxVM1JoWTJzdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYaGpaWEIwYVc5dUtDZERiMjF3YVd4bElHTnZiWEJzWlhSbFpDQjNhWFJvSUdOdmJuUmxiblFnYkdWbWRDQnZiaUJ6ZEdGamF5Y3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2doZEdocGN5NWtaV052Y21GMGIzSnpMbWx6Ulcxd2RIa29LU2tnZTF4dUlDQWdJQ0FnZEdocGN5NTFjMlZFWldOdmNtRjBiM0p6SUQwZ2RISjFaVHRjYmx4dUlDQWdJQ0FnZEdocGN5NWtaV052Y21GMGIzSnpMbkJ5WlhCbGJtUW9XMXh1SUNBZ0lDQWdJQ0FuZG1GeUlHUmxZMjl5WVhSdmNuTWdQU0JqYjI1MFlXbHVaWEl1WkdWamIzSmhkRzl5Y3l3Z0p5eGNiaUFnSUNBZ0lDQWdkR2hwY3k1c2IyOXJkWEJRY205d1pYSjBlVVoxYm1OMGFXOXVWbUZ5UkdWamJHRnlZWFJwYjI0b0tTeGNiaUFnSUNBZ0lDQWdKenRjWEc0blhHNGdJQ0FnSUNCZEtUdGNiaUFnSUNBZ0lIUm9hWE11WkdWamIzSmhkRzl5Y3k1d2RYTm9LQ2R5WlhSMWNtNGdabTQ3SnlrN1hHNWNiaUFnSUNBZ0lHbG1JQ2hoYzA5aWFtVmpkQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbVJsWTI5eVlYUnZjbk1nUFNCR2RXNWpkR2x2Ymk1aGNIQnNlU2gwYUdsekxDQmJYRzRnSUNBZ0lDQWdJQ0FnSjJadUp5eGNiaUFnSUNBZ0lDQWdJQ0FuY0hKdmNITW5MRnh1SUNBZ0lDQWdJQ0FnSUNkamIyNTBZV2x1WlhJbkxGeHVJQ0FnSUNBZ0lDQWdJQ2RrWlhCMGFEQW5MRnh1SUNBZ0lDQWdJQ0FnSUNka1lYUmhKeXhjYmlBZ0lDQWdJQ0FnSUNBbllteHZZMnRRWVhKaGJYTW5MRnh1SUNBZ0lDQWdJQ0FnSUNka1pYQjBhSE1uTEZ4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WkdWamIzSmhkRzl5Y3k1dFpYSm5aU2dwWEc0Z0lDQWdJQ0FnSUYwcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVrWldOdmNtRjBiM0p6TG5CeVpYQmxibVFvWEc0Z0lDQWdJQ0FnSUNBZ0oyWjFibU4wYVc5dUtHWnVMQ0J3Y205d2N5d2dZMjl1ZEdGcGJtVnlMQ0JrWlhCMGFEQXNJR1JoZEdFc0lHSnNiMk5yVUdGeVlXMXpMQ0JrWlhCMGFITXBJSHRjWEc0blhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpHVmpiM0poZEc5eWN5NXdkWE5vS0NkOVhGeHVKeWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaR1ZqYjNKaGRHOXljeUE5SUhSb2FYTXVaR1ZqYjNKaGRHOXljeTV0WlhKblpTZ3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMGFHbHpMbVJsWTI5eVlYUnZjbk1nUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYkdWMElHWnVJRDBnZEdocGN5NWpjbVZoZEdWR2RXNWpkR2x2YmtOdmJuUmxlSFFvWVhOUFltcGxZM1FwTzF4dUlDQWdJR2xtSUNnaGRHaHBjeTVwYzBOb2FXeGtLU0I3WEc0Z0lDQWdJQ0JzWlhRZ2NtVjBJRDBnZTF4dUlDQWdJQ0FnSUNCamIyMXdhV3hsY2pvZ2RHaHBjeTVqYjIxd2FXeGxja2x1Wm04b0tTeGNiaUFnSUNBZ0lDQWdiV0ZwYmpvZ1ptNWNiaUFnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbVJsWTI5eVlYUnZjbk1wSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBMbTFoYVc1ZlpDQTlJSFJvYVhNdVpHVmpiM0poZEc5eWN6c2dMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRiR2x1WlNCallXMWxiR05oYzJWY2JpQWdJQ0FnSUNBZ2NtVjBMblZ6WlVSbFkyOXlZWFJ2Y25NZ1BTQjBjblZsTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCc1pYUWdleUJ3Y205bmNtRnRjeXdnWkdWamIzSmhkRzl5Y3lCOUlEMGdkR2hwY3k1amIyNTBaWGgwTzF4dUlDQWdJQ0FnWm05eUlDaHBJRDBnTUN3Z2JDQTlJSEJ5YjJkeVlXMXpMbXhsYm1kMGFEc2dhU0E4SUd3N0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9jSEp2WjNKaGJYTmJhVjBwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFJiYVYwZ1BTQndjbTluY21GdGMxdHBYVHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9aR1ZqYjNKaGRHOXljMXRwWFNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMFcya2dLeUFuWDJRblhTQTlJR1JsWTI5eVlYUnZjbk5iYVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhRdWRYTmxSR1ZqYjNKaGRHOXljeUE5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxtVnVkbWx5YjI1dFpXNTBMblZ6WlZCaGNuUnBZV3dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBMblZ6WlZCaGNuUnBZV3dnUFNCMGNuVmxPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NWtZWFJoS1NCN1hHNGdJQ0FnSUNBZ0lISmxkQzUxYzJWRVlYUmhJRDBnZEhKMVpUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxuVnpaVVJsY0hSb2N5a2dlMXh1SUNBZ0lDQWdJQ0J5WlhRdWRYTmxSR1Z3ZEdoeklEMGdkSEoxWlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdsbUlDaDBhR2x6TG5WelpVSnNiMk5yVUdGeVlXMXpLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRDNTFjMlZDYkc5amExQmhjbUZ0Y3lBOUlIUnlkV1U3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMbU52YlhCaGRDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhRdVkyOXRjR0YwSUQwZ2RISjFaVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYVdZZ0tDRmhjMDlpYW1WamRDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhRdVkyOXRjR2xzWlhJZ1BTQktVMDlPTG5OMGNtbHVaMmxtZVNoeVpYUXVZMjl0Y0dsc1pYSXBPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMjkxY21ObExtTjFjbkpsYm5STWIyTmhkR2x2YmlBOUlIc2djM1JoY25RNklIc2diR2x1WlRvZ01Td2dZMjlzZFcxdU9pQXdJSDBnZlR0Y2JpQWdJQ0FnSUNBZ2NtVjBJRDBnZEdocGN5NXZZbXBsWTNSTWFYUmxjbUZzS0hKbGRDazdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHOXdkR2x2Ym5NdWMzSmpUbUZ0WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsZENBOUlISmxkQzUwYjFOMGNtbHVaMWRwZEdoVGIzVnlZMlZOWVhBb2V5Qm1hV3hsT2lCdmNIUnBiMjV6TG1SbGMzUk9ZVzFsSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJSEpsZEM1dFlYQWdQU0J5WlhRdWJXRndJQ1ltSUhKbGRDNXRZWEF1ZEc5VGRISnBibWNvS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFFnUFNCeVpYUXVkRzlUZEhKcGJtY29LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnY21WMExtTnZiWEJwYkdWeVQzQjBhVzl1Y3lBOUlIUm9hWE11YjNCMGFXOXVjenRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnY21WMGRYSnVJSEpsZER0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHWnVPMXh1SUNBZ0lIMWNiaUFnZlN4Y2JseHVJQ0J3Y21WaGJXSnNaVG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnTHk4Z2RISmhZMnNnZEdobElHeGhjM1FnWTI5dWRHVjRkQ0J3ZFhOb1pXUWdhVzUwYnlCd2JHRmpaU0IwYnlCaGJHeHZkeUJ6YTJsd2NHbHVaeUIwYUdWY2JpQWdJQ0F2THlCblpYUkRiMjUwWlhoMElHOXdZMjlrWlNCM2FHVnVJR2wwSUhkdmRXeGtJR0psSUdFZ2JtOXZjRnh1SUNBZ0lIUm9hWE11YkdGemRFTnZiblJsZUhRZ1BTQXdPMXh1SUNBZ0lIUm9hWE11YzI5MWNtTmxJRDBnYm1WM0lFTnZaR1ZIWlc0b2RHaHBjeTV2Y0hScGIyNXpMbk55WTA1aGJXVXBPMXh1SUNBZ0lIUm9hWE11WkdWamIzSmhkRzl5Y3lBOUlHNWxkeUJEYjJSbFIyVnVLSFJvYVhNdWIzQjBhVzl1Y3k1emNtTk9ZVzFsS1R0Y2JpQWdmU3hjYmx4dUlDQmpjbVZoZEdWR2RXNWpkR2x2YmtOdmJuUmxlSFE2SUdaMWJtTjBhVzl1S0dGelQySnFaV04wS1NCN1hHNGdJQ0FnYkdWMElIWmhja1JsWTJ4aGNtRjBhVzl1Y3lBOUlDY25PMXh1WEc0Z0lDQWdiR1YwSUd4dlkyRnNjeUE5SUhSb2FYTXVjM1JoWTJ0V1lYSnpMbU52Ym1OaGRDaDBhR2x6TG5KbFoybHpkR1Z5Y3k1c2FYTjBLVHRjYmlBZ0lDQnBaaUFvYkc5allXeHpMbXhsYm1kMGFDQStJREFwSUh0Y2JpQWdJQ0FnSUhaaGNrUmxZMnhoY21GMGFXOXVjeUFyUFNBbkxDQW5JQ3NnYkc5allXeHpMbXB2YVc0b0p5d2dKeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnUjJWdVpYSmhkR1VnYldsdWFXMXBlbVZ5SUdGc2FXRnpJRzFoY0hCcGJtZHpYRzRnSUNBZ0x5OWNiaUFnSUNBdkx5QlhhR1Z1SUhWemFXNW5JSFJ5ZFdVZ1UyOTFjbU5sVG05a1pYTXNJSFJvYVhNZ2QybHNiQ0IxY0dSaGRHVWdZV3hzSUhKbFptVnlaVzVqWlhNZ2RHOGdkR2hsSUdkcGRtVnVJR0ZzYVdGelhHNGdJQ0FnTHk4Z1lYTWdkR2hsSUhOdmRYSmpaU0J1YjJSbGN5QmhjbVVnY21WMWMyVmtJR2x1SUhOcGRIVXVJRVp2Y2lCMGFHVWdibTl1TFhOdmRYSmpaU0J1YjJSbElHTnZiWEJwYkdGMGFXOXVJRzF2WkdVc1hHNGdJQ0FnTHk4Z1lXeHBZWE5sY3lCM2FXeHNJRzV2ZENCaVpTQjFjMlZrTENCaWRYUWdkR2hwY3lCallYTmxJR2x6SUdGc2NtVmhaSGtnWW1WcGJtY2djblZ1SUc5dUlIUm9aU0JqYkdsbGJuUWdZVzVrWEc0Z0lDQWdMeThnZDJVZ1lYSmxiaWQwSUdOdmJtTmxjbTRnWVdKdmRYUWdiV2x1YVcxcGVtbHVaeUIwYUdVZ2RHVnRjR3hoZEdVZ2MybDZaUzVjYmlBZ0lDQnNaWFFnWVd4cFlYTkRiM1Z1ZENBOUlEQTdYRzRnSUNBZ1QySnFaV04wTG10bGVYTW9kR2hwY3k1aGJHbGhjMlZ6S1M1bWIzSkZZV05vS0dGc2FXRnpJRDArSUh0Y2JpQWdJQ0FnSUd4bGRDQnViMlJsSUQwZ2RHaHBjeTVoYkdsaGMyVnpXMkZzYVdGelhUdGNiaUFnSUNBZ0lHbG1JQ2h1YjJSbExtTm9hV3hrY21WdUlDWW1JRzV2WkdVdWNtVm1aWEpsYm1ObFEyOTFiblFnUGlBeEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2tSbFkyeGhjbUYwYVc5dWN5QXJQU0FuTENCaGJHbGhjeWNnS3lBcksyRnNhV0Z6UTI5MWJuUWdLeUFuUFNjZ0t5QmhiR2xoY3p0Y2JpQWdJQ0FnSUNBZ2JtOWtaUzVqYUdsc1pISmxibHN3WFNBOUlDZGhiR2xoY3ljZ0t5QmhiR2xoYzBOdmRXNTBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdhV1lnS0hSb2FYTXViRzl2YTNWd1VISnZjR1Z5ZEhsR2RXNWpkR2x2YmtselZYTmxaQ2tnZTF4dUlDQWdJQ0FnZG1GeVJHVmpiR0Z5WVhScGIyNXpJQ3M5SUNjc0lDY2dLeUIwYUdsekxteHZiMnQxY0ZCeWIzQmxjblI1Um5WdVkzUnBiMjVXWVhKRVpXTnNZWEpoZEdsdmJpZ3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHeGxkQ0J3WVhKaGJYTWdQU0JiSjJOdmJuUmhhVzVsY2ljc0lDZGtaWEIwYURBbkxDQW5hR1ZzY0dWeWN5Y3NJQ2R3WVhKMGFXRnNjeWNzSUNka1lYUmhKMTA3WEc1Y2JpQWdJQ0JwWmlBb2RHaHBjeTUxYzJWQ2JHOWphMUJoY21GdGN5QjhmQ0IwYUdsekxuVnpaVVJsY0hSb2N5a2dlMXh1SUNBZ0lDQWdjR0Z5WVcxekxuQjFjMmdvSjJKc2IyTnJVR0Z5WVcxekp5azdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaDBhR2x6TG5WelpVUmxjSFJvY3lrZ2UxeHVJQ0FnSUNBZ2NHRnlZVzF6TG5CMWMyZ29KMlJsY0hSb2N5Y3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRkJsY21admNtMGdZU0J6WldOdmJtUWdjR0Z6Y3lCdmRtVnlJSFJvWlNCdmRYUndkWFFnZEc4Z2JXVnlaMlVnWTI5dWRHVnVkQ0IzYUdWdUlIQnZjM05wWW14bFhHNGdJQ0FnYkdWMElITnZkWEpqWlNBOUlIUm9hWE11YldWeVoyVlRiM1Z5WTJVb2RtRnlSR1ZqYkdGeVlYUnBiMjV6S1R0Y2JseHVJQ0FnSUdsbUlDaGhjMDlpYW1WamRDa2dlMXh1SUNBZ0lDQWdjR0Z5WVcxekxuQjFjMmdvYzI5MWNtTmxLVHRjYmx4dUlDQWdJQ0FnY21WMGRYSnVJRVoxYm1OMGFXOXVMbUZ3Y0d4NUtIUm9hWE1zSUhCaGNtRnRjeWs3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbk52ZFhKalpTNTNjbUZ3S0Z0Y2JpQWdJQ0FnSUNBZ0oyWjFibU4wYVc5dUtDY3NYRzRnSUNBZ0lDQWdJSEJoY21GdGN5NXFiMmx1S0Njc0p5a3NYRzRnSUNBZ0lDQWdJQ2NwSUh0Y1hHNGdJQ2NzWEc0Z0lDQWdJQ0FnSUhOdmRYSmpaU3hjYmlBZ0lDQWdJQ0FnSjMwblhHNGdJQ0FnSUNCZEtUdGNiaUFnSUNCOVhHNGdJSDBzWEc0Z0lHMWxjbWRsVTI5MWNtTmxPaUJtZFc1amRHbHZiaWgyWVhKRVpXTnNZWEpoZEdsdmJuTXBJSHRjYmlBZ0lDQnNaWFFnYVhOVGFXMXdiR1VnUFNCMGFHbHpMbVZ1ZG1seWIyNXRaVzUwTG1selUybHRjR3hsTEZ4dUlDQWdJQ0FnWVhCd1pXNWtUMjVzZVNBOUlDRjBhR2x6TG1admNtTmxRblZtWm1WeUxGeHVJQ0FnSUNBZ1lYQndaVzVrUm1seWMzUXNYRzRnSUNBZ0lDQnpiM1Z5WTJWVFpXVnVMRnh1SUNBZ0lDQWdZblZtWm1WeVUzUmhjblFzWEc0Z0lDQWdJQ0JpZFdabVpYSkZibVE3WEc0Z0lDQWdkR2hwY3k1emIzVnlZMlV1WldGamFDaHNhVzVsSUQwK0lIdGNiaUFnSUNBZ0lHbG1JQ2hzYVc1bExtRndjR1Z1WkZSdlFuVm1abVZ5S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hpZFdabVpYSlRkR0Z5ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJR3hwYm1VdWNISmxjR1Z1WkNnbklDQXJJQ2NwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lHSjFabVpsY2xOMFlYSjBJRDBnYkdsdVpUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JpZFdabVpYSkZibVFnUFNCc2FXNWxPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdhV1lnS0dKMVptWmxjbE4wWVhKMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnpiM1Z5WTJWVFpXVnVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhjSEJsYm1SR2FYSnpkQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHSjFabVpsY2xOMFlYSjBMbkJ5WlhCbGJtUW9KMkoxWm1abGNpQXJQU0FuS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnWW5WbVptVnlSVzVrTG1Ga1pDZ25PeWNwTzF4dUlDQWdJQ0FnSUNBZ0lHSjFabVpsY2xOMFlYSjBJRDBnWW5WbVptVnlSVzVrSUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYzI5MWNtTmxVMlZsYmlBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hhWE5UYVcxd2JHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNCaGNIQmxibVJQYm14NUlEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNibHh1SUNBZ0lHbG1JQ2hoY0hCbGJtUlBibXg1S1NCN1hHNGdJQ0FnSUNCcFppQW9ZblZtWm1WeVUzUmhjblFwSUh0Y2JpQWdJQ0FnSUNBZ1luVm1abVZ5VTNSaGNuUXVjSEpsY0dWdVpDZ25jbVYwZFhKdUlDY3BPMXh1SUNBZ0lDQWdJQ0JpZFdabVpYSkZibVF1WVdSa0tDYzdKeWs3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0NGemIzVnlZMlZUWldWdUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyOTFjbU5sTG5CMWMyZ29KM0psZEhWeWJpQmNJbHdpT3ljcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IyWVhKRVpXTnNZWEpoZEdsdmJuTWdLejFjYmlBZ0lDQWdJQ0FnSnl3Z1luVm1abVZ5SUQwZ0p5QXJJQ2hoY0hCbGJtUkdhWEp6ZENBL0lDY25JRG9nZEdocGN5NXBibWwwYVdGc2FYcGxRblZtWm1WeUtDa3BPMXh1WEc0Z0lDQWdJQ0JwWmlBb1luVm1abVZ5VTNSaGNuUXBJSHRjYmlBZ0lDQWdJQ0FnWW5WbVptVnlVM1JoY25RdWNISmxjR1Z1WkNnbmNtVjBkWEp1SUdKMVptWmxjaUFySUNjcE8xeHVJQ0FnSUNBZ0lDQmlkV1ptWlhKRmJtUXVZV1JrS0NjN0p5azdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OdmRYSmpaUzV3ZFhOb0tDZHlaWFIxY200Z1luVm1abVZ5T3ljcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaDJZWEpFWldOc1lYSmhkR2x2Ym5NcElIdGNiaUFnSUNBZ0lIUm9hWE11YzI5MWNtTmxMbkJ5WlhCbGJtUW9YRzRnSUNBZ0lDQWdJQ2QyWVhJZ0p5QXJJSFpoY2tSbFkyeGhjbUYwYVc5dWN5NXpkV0p6ZEhKcGJtY29NaWtnS3lBb1lYQndaVzVrUm1seWMzUWdQeUFuSnlBNklDYzdYRnh1SnlsY2JpQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWMyOTFjbU5sTG0xbGNtZGxLQ2s3WEc0Z0lIMHNYRzVjYmlBZ2JHOXZhM1Z3VUhKdmNHVnlkSGxHZFc1amRHbHZibFpoY2tSbFkyeGhjbUYwYVc5dU9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z1lGeHVJQ0FnSUNBZ2JHOXZhM1Z3VUhKdmNHVnlkSGtnUFNCamIyNTBZV2x1WlhJdWJHOXZhM1Z3VUhKdmNHVnlkSGtnZkh3Z1puVnVZM1JwYjI0b2NHRnlaVzUwTENCd2NtOXdaWEowZVU1aGJXVXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaHdZWEpsYm5Rc0lIQnliM0JsY25SNVRtRnRaU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NHRnlaVzUwVzNCeWIzQmxjblI1VG1GdFpWMDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFZ1WkdWbWFXNWxaRnh1SUNBZ0lIMWNiaUFnSUNCZ0xuUnlhVzBvS1R0Y2JpQWdmU3hjYmx4dUlDQXZMeUJiWW14dlkydFdZV3gxWlYxY2JpQWdMeTljYmlBZ0x5OGdUMjRnYzNSaFkyc3NJR0psWm05eVpUb2dhR0Z6YUN3Z2FXNTJaWEp6WlN3Z2NISnZaM0poYlN3Z2RtRnNkV1ZjYmlBZ0x5OGdUMjRnYzNSaFkyc3NJR0ZtZEdWeU9pQnlaWFIxY200Z2RtRnNkV1VnYjJZZ1lteHZZMnRJWld4d1pYSk5hWE56YVc1blhHNGdJQzh2WEc0Z0lDOHZJRlJvWlNCd2RYSndiM05sSUc5bUlIUm9hWE1nYjNCamIyUmxJR2x6SUhSdklIUmhhMlVnWVNCaWJHOWpheUJ2WmlCMGFHVWdabTl5YlZ4dUlDQXZMeUJnZTNzamRHaHBjeTVtYjI5OWZTNHVMbnQ3TDNSb2FYTXVabTl2ZlgxZ0xDQnlaWE52YkhabElIUm9aU0IyWVd4MVpTQnZaaUJnWm05dllDd2dZVzVrWEc0Z0lDOHZJSEpsY0d4aFkyVWdhWFFnYjI0Z2RHaGxJSE4wWVdOcklIZHBkR2dnZEdobElISmxjM1ZzZENCdlppQndjbTl3WlhKc2VWeHVJQ0F2THlCcGJuWnZhMmx1WnlCaWJHOWphMGhsYkhCbGNrMXBjM05wYm1jdVhHNGdJR0pzYjJOclZtRnNkV1U2SUdaMWJtTjBhVzl1S0c1aGJXVXBJSHRjYmlBZ0lDQnNaWFFnWW14dlkydElaV3h3WlhKTmFYTnphVzVuSUQwZ2RHaHBjeTVoYkdsaGMyRmliR1VvWEc0Z0lDQWdJQ0FnSUNkamIyNTBZV2x1WlhJdWFHOXZhM011WW14dlkydElaV3h3WlhKTmFYTnphVzVuSjF4dUlDQWdJQ0FnS1N4Y2JpQWdJQ0FnSUhCaGNtRnRjeUE5SUZ0MGFHbHpMbU52Ym5SbGVIUk9ZVzFsS0RBcFhUdGNiaUFnSUNCMGFHbHpMbk5sZEhWd1NHVnNjR1Z5UVhKbmN5aHVZVzFsTENBd0xDQndZWEpoYlhNcE8xeHVYRzRnSUNBZ2JHVjBJR0pzYjJOclRtRnRaU0E5SUhSb2FYTXVjRzl3VTNSaFkyc29LVHRjYmlBZ0lDQndZWEpoYlhNdWMzQnNhV05sS0RFc0lEQXNJR0pzYjJOclRtRnRaU2s3WEc1Y2JpQWdJQ0IwYUdsekxuQjFjMmdvZEdocGN5NXpiM1Z5WTJVdVpuVnVZM1JwYjI1RFlXeHNLR0pzYjJOclNHVnNjR1Z5VFdsemMybHVaeXdnSjJOaGJHd25MQ0J3WVhKaGJYTXBLVHRjYmlBZ2ZTeGNibHh1SUNBdkx5QmJZVzFpYVdkMWIzVnpRbXh2WTJ0V1lXeDFaVjFjYmlBZ0x5OWNiaUFnTHk4Z1QyNGdjM1JoWTJzc0lHSmxabTl5WlRvZ2FHRnphQ3dnYVc1MlpYSnpaU3dnY0hKdlozSmhiU3dnZG1Gc2RXVmNiaUFnTHk4Z1EyOXRjR2xzWlhJZ2RtRnNkV1VzSUdKbFptOXlaVG9nYkdGemRFaGxiSEJsY2oxMllXeDFaU0J2WmlCc1lYTjBJR1p2ZFc1a0lHaGxiSEJsY2l3Z2FXWWdZVzU1WEc0Z0lDOHZJRTl1SUhOMFlXTnJMQ0JoWm5SbGNpd2dhV1lnYm04Z2JHRnpkRWhsYkhCbGNqb2djMkZ0WlNCaGN5QmJZbXh2WTJ0V1lXeDFaVjFjYmlBZ0x5OGdUMjRnYzNSaFkyc3NJR0ZtZEdWeUxDQnBaaUJzWVhOMFNHVnNjR1Z5T2lCMllXeDFaVnh1SUNCaGJXSnBaM1Z2ZFhOQ2JHOWphMVpoYkhWbE9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQXZMeUJYWlNkeVpTQmlaV2x1WnlCaElHSnBkQ0JqYUdWbGEza2dZVzVrSUhKbGRYTnBibWNnZEdobElHOXdkR2x2Ym5NZ2RtRnNkV1VnWm5KdmJTQjBhR1VnY0hKcGIzSWdaWGhsWTF4dUlDQWdJR3hsZENCaWJHOWphMGhsYkhCbGNrMXBjM05wYm1jZ1BTQjBhR2x6TG1Gc2FXRnpZV0pzWlNoY2JpQWdJQ0FnSUNBZ0oyTnZiblJoYVc1bGNpNW9iMjlyY3k1aWJHOWphMGhsYkhCbGNrMXBjM05wYm1jblhHNGdJQ0FnSUNBcExGeHVJQ0FnSUNBZ2NHRnlZVzF6SUQwZ1czUm9hWE11WTI5dWRHVjRkRTVoYldVb01DbGRPMXh1SUNBZ0lIUm9hWE11YzJWMGRYQklaV3h3WlhKQmNtZHpLQ2NuTENBd0xDQndZWEpoYlhNc0lIUnlkV1VwTzF4dVhHNGdJQ0FnZEdocGN5NW1iSFZ6YUVsdWJHbHVaU2dwTzF4dVhHNGdJQ0FnYkdWMElHTjFjbkpsYm5RZ1BTQjBhR2x6TG5SdmNGTjBZV05yS0NrN1hHNGdJQ0FnY0dGeVlXMXpMbk53YkdsalpTZ3hMQ0F3TENCamRYSnlaVzUwS1R0Y2JseHVJQ0FnSUhSb2FYTXVjSFZ6YUZOdmRYSmpaU2hiWEc0Z0lDQWdJQ0FuYVdZZ0tDRW5MRnh1SUNBZ0lDQWdkR2hwY3k1c1lYTjBTR1ZzY0dWeUxGeHVJQ0FnSUNBZ0p5a2dleUFuTEZ4dUlDQWdJQ0FnWTNWeWNtVnVkQ3hjYmlBZ0lDQWdJQ2NnUFNBbkxGeHVJQ0FnSUNBZ2RHaHBjeTV6YjNWeVkyVXVablZ1WTNScGIyNURZV3hzS0dKc2IyTnJTR1ZzY0dWeVRXbHpjMmx1Wnl3Z0oyTmhiR3duTENCd1lYSmhiWE1wTEZ4dUlDQWdJQ0FnSjMwblhHNGdJQ0FnWFNrN1hHNGdJSDBzWEc1Y2JpQWdMeThnVzJGd2NHVnVaRU52Ym5SbGJuUmRYRzRnSUM4dlhHNGdJQzh2SUU5dUlITjBZV05yTENCaVpXWnZjbVU2SUM0dUxseHVJQ0F2THlCUGJpQnpkR0ZqYXl3Z1lXWjBaWEk2SUM0dUxseHVJQ0F2TDF4dUlDQXZMeUJCY0hCbGJtUnpJSFJvWlNCemRISnBibWNnZG1Gc2RXVWdiMllnWUdOdmJuUmxiblJnSUhSdklIUm9aU0JqZFhKeVpXNTBJR0oxWm1abGNseHVJQ0JoY0hCbGJtUkRiMjUwWlc1ME9pQm1kVzVqZEdsdmJpaGpiMjUwWlc1MEtTQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdWNHVnVaR2x1WjBOdmJuUmxiblFwSUh0Y2JpQWdJQ0FnSUdOdmJuUmxiblFnUFNCMGFHbHpMbkJsYm1ScGJtZERiMjUwWlc1MElDc2dZMjl1ZEdWdWREdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnZEdocGN5NXdaVzVrYVc1blRHOWpZWFJwYjI0Z1BTQjBhR2x6TG5OdmRYSmpaUzVqZFhKeVpXNTBURzlqWVhScGIyNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RHaHBjeTV3Wlc1a2FXNW5RMjl1ZEdWdWRDQTlJR052Ym5SbGJuUTdYRzRnSUgwc1hHNWNiaUFnTHk4Z1cyRndjR1Z1WkYxY2JpQWdMeTljYmlBZ0x5OGdUMjRnYzNSaFkyc3NJR0psWm05eVpUb2dkbUZzZFdVc0lDNHVMbHh1SUNBdkx5QlBiaUJ6ZEdGamF5d2dZV1owWlhJNklDNHVMbHh1SUNBdkwxeHVJQ0F2THlCRGIyVnlZMlZ6SUdCMllXeDFaV0FnZEc4Z1lTQlRkSEpwYm1jZ1lXNWtJR0Z3Y0dWdVpITWdhWFFnZEc4Z2RHaGxJR04xY25KbGJuUWdZblZtWm1WeUxseHVJQ0F2TDF4dUlDQXZMeUJKWmlCZ2RtRnNkV1ZnSUdseklIUnlkWFJvZVN3Z2IzSWdNQ3dnYVhRZ2FYTWdZMjlsY21ObFpDQnBiblJ2SUdFZ2MzUnlhVzVuSUdGdVpDQmhjSEJsYm1SbFpGeHVJQ0F2THlCUGRHaGxjbmRwYzJVc0lIUm9aU0JsYlhCMGVTQnpkSEpwYm1jZ2FYTWdZWEJ3Wlc1a1pXUmNiaUFnWVhCd1pXNWtPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVwYzBsdWJHbHVaU2dwS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbkpsY0d4aFkyVlRkR0ZqYXloamRYSnlaVzUwSUQwK0lGc25JQ0U5SUc1MWJHd2dQeUFuTENCamRYSnlaVzUwTENBbklEb2dYQ0pjSWlkZEtUdGNibHh1SUNBZ0lDQWdkR2hwY3k1d2RYTm9VMjkxY21ObEtIUm9hWE11WVhCd1pXNWtWRzlDZFdabVpYSW9kR2hwY3k1d2IzQlRkR0ZqYXlncEtTazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUd4bGRDQnNiMk5oYkNBOUlIUm9hWE11Y0c5d1UzUmhZMnNvS1R0Y2JpQWdJQ0FnSUhSb2FYTXVjSFZ6YUZOdmRYSmpaU2hiWEc0Z0lDQWdJQ0FnSUNkcFppQW9KeXhjYmlBZ0lDQWdJQ0FnYkc5allXd3NYRzRnSUNBZ0lDQWdJQ2NnSVQwZ2JuVnNiQ2tnZXlBbkxGeHVJQ0FnSUNBZ0lDQjBhR2x6TG1Gd2NHVnVaRlJ2UW5WbVptVnlLR3h2WTJGc0xDQjFibVJsWm1sdVpXUXNJSFJ5ZFdVcExGeHVJQ0FnSUNBZ0lDQW5JSDBuWEc0Z0lDQWdJQ0JkS1R0Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TG1WdWRtbHliMjV0Wlc1MExtbHpVMmx0Y0d4bEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNIVnphRk52ZFhKalpTaGJYRzRnSUNBZ0lDQWdJQ0FnSjJWc2MyVWdleUFuTEZ4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WVhCd1pXNWtWRzlDZFdabVpYSW9YQ0luSjF3aUxDQjFibVJsWm1sdVpXUXNJSFJ5ZFdVcExGeHVJQ0FnSUNBZ0lDQWdJQ2NnZlNkY2JpQWdJQ0FnSUNBZ1hTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5TEZ4dVhHNGdJQzh2SUZ0aGNIQmxibVJGYzJOaGNHVmtYVnh1SUNBdkwxeHVJQ0F2THlCUGJpQnpkR0ZqYXl3Z1ltVm1iM0psT2lCMllXeDFaU3dnTGk0dVhHNGdJQzh2SUU5dUlITjBZV05yTENCaFpuUmxjam9nTGk0dVhHNGdJQzh2WEc0Z0lDOHZJRVZ6WTJGd1pTQmdkbUZzZFdWZ0lHRnVaQ0JoY0hCbGJtUWdhWFFnZEc4Z2RHaGxJR0oxWm1abGNseHVJQ0JoY0hCbGJtUkZjMk5oY0dWa09pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQjBhR2x6TG5CMWMyaFRiM1Z5WTJVb1hHNGdJQ0FnSUNCMGFHbHpMbUZ3Y0dWdVpGUnZRblZtWm1WeUtGdGNiaUFnSUNBZ0lDQWdkR2hwY3k1aGJHbGhjMkZpYkdVb0oyTnZiblJoYVc1bGNpNWxjMk5oY0dWRmVIQnlaWE56YVc5dUp5a3NYRzRnSUNBZ0lDQWdJQ2NvSnl4Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV3YjNCVGRHRmpheWdwTEZ4dUlDQWdJQ0FnSUNBbktTZGNiaUFnSUNBZ0lGMHBYRzRnSUNBZ0tUdGNiaUFnZlN4Y2JseHVJQ0F2THlCYloyVjBRMjl1ZEdWNGRGMWNiaUFnTHk5Y2JpQWdMeThnVDI0Z2MzUmhZMnNzSUdKbFptOXlaVG9nTGk0dVhHNGdJQzh2SUU5dUlITjBZV05yTENCaFpuUmxjam9nTGk0dVhHNGdJQzh2SUVOdmJYQnBiR1Z5SUhaaGJIVmxMQ0JoWm5SbGNqb2diR0Z6ZEVOdmJuUmxlSFE5WkdWd2RHaGNiaUFnTHk5Y2JpQWdMeThnVTJWMElIUm9aU0IyWVd4MVpTQnZaaUIwYUdVZ1lHeGhjM1JEYjI1MFpYaDBZQ0JqYjIxd2FXeGxjaUIyWVd4MVpTQjBieUIwYUdVZ1pHVndkR2hjYmlBZ1oyVjBRMjl1ZEdWNGREb2dablZ1WTNScGIyNG9aR1Z3ZEdncElIdGNiaUFnSUNCMGFHbHpMbXhoYzNSRGIyNTBaWGgwSUQwZ1pHVndkR2c3WEc0Z0lIMHNYRzVjYmlBZ0x5OGdXM0IxYzJoRGIyNTBaWGgwWFZ4dUlDQXZMMXh1SUNBdkx5QlBiaUJ6ZEdGamF5d2dZbVZtYjNKbE9pQXVMaTVjYmlBZ0x5OGdUMjRnYzNSaFkyc3NJR0ZtZEdWeU9pQmpkWEp5Wlc1MFEyOXVkR1Y0ZEN3Z0xpNHVYRzRnSUM4dlhHNGdJQzh2SUZCMWMyaGxjeUIwYUdVZ2RtRnNkV1VnYjJZZ2RHaGxJR04xY25KbGJuUWdZMjl1ZEdWNGRDQnZiblJ2SUhSb1pTQnpkR0ZqYXk1Y2JpQWdjSFZ6YUVOdmJuUmxlSFE2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUhSb2FYTXVjSFZ6YUZOMFlXTnJUR2wwWlhKaGJDaDBhR2x6TG1OdmJuUmxlSFJPWVcxbEtIUm9hWE11YkdGemRFTnZiblJsZUhRcEtUdGNiaUFnZlN4Y2JseHVJQ0F2THlCYmJHOXZhM1Z3VDI1RGIyNTBaWGgwWFZ4dUlDQXZMMXh1SUNBdkx5QlBiaUJ6ZEdGamF5d2dZbVZtYjNKbE9pQXVMaTVjYmlBZ0x5OGdUMjRnYzNSaFkyc3NJR0ZtZEdWeU9pQmpkWEp5Wlc1MFEyOXVkR1Y0ZEZ0dVlXMWxYU3dnTGk0dVhHNGdJQzh2WEc0Z0lDOHZJRXh2YjJ0eklIVndJSFJvWlNCMllXeDFaU0J2WmlCZ2JtRnRaV0FnYjI0Z2RHaGxJR04xY25KbGJuUWdZMjl1ZEdWNGRDQmhibVFnY0hWemFHVnpYRzRnSUM4dklHbDBJRzl1ZEc4Z2RHaGxJSE4wWVdOckxseHVJQ0JzYjI5cmRYQlBia052Ym5SbGVIUTZJR1oxYm1OMGFXOXVLSEJoY25SekxDQm1ZV3h6ZVN3Z2MzUnlhV04wTENCelkyOXdaV1FwSUh0Y2JpQWdJQ0JzWlhRZ2FTQTlJREE3WEc1Y2JpQWdJQ0JwWmlBb0lYTmpiM0JsWkNBbUppQjBhR2x6TG05d2RHbHZibk11WTI5dGNHRjBJQ1ltSUNGMGFHbHpMbXhoYzNSRGIyNTBaWGgwS1NCN1hHNGdJQ0FnSUNBdkx5QlVhR1VnWkdWd2RHaGxaQ0J4ZFdWeWVTQnBjeUJsZUhCbFkzUmxaQ0IwYnlCb1lXNWtiR1VnZEdobElIVnVaR1ZtYVc1bFpDQnNiMmRwWXlCbWIzSWdkR2hsSUhKdmIzUWdiR1YyWld3Z2RHaGhkRnh1SUNBZ0lDQWdMeThnYVhNZ2FXMXdiR1Z0Wlc1MFpXUWdZbVZzYjNjc0lITnZJSGRsSUdWMllXeDFZWFJsSUhSb1lYUWdaR2x5WldOMGJIa2dhVzRnWTI5dGNHRjBJRzF2WkdWY2JpQWdJQ0FnSUhSb2FYTXVjSFZ6YUNoMGFHbHpMbVJsY0hSb1pXUk1iMjlyZFhBb2NHRnlkSE5iYVNzclhTa3BPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMGFHbHpMbkIxYzJoRGIyNTBaWGgwS0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NXlaWE52YkhabFVHRjBhQ2duWTI5dWRHVjRkQ2NzSUhCaGNuUnpMQ0JwTENCbVlXeHplU3dnYzNSeWFXTjBLVHRjYmlBZ2ZTeGNibHh1SUNBdkx5QmJiRzl2YTNWd1FteHZZMnRRWVhKaGJWMWNiaUFnTHk5Y2JpQWdMeThnVDI0Z2MzUmhZMnNzSUdKbFptOXlaVG9nTGk0dVhHNGdJQzh2SUU5dUlITjBZV05yTENCaFpuUmxjam9nWW14dlkydFFZWEpoYlZ0dVlXMWxYU3dnTGk0dVhHNGdJQzh2WEc0Z0lDOHZJRXh2YjJ0eklIVndJSFJvWlNCMllXeDFaU0J2WmlCZ2NHRnlkSE5nSUc5dUlIUm9aU0JuYVhabGJpQmliRzlqYXlCd1lYSmhiU0JoYm1RZ2NIVnphR1Z6WEc0Z0lDOHZJR2wwSUc5dWRHOGdkR2hsSUhOMFlXTnJMbHh1SUNCc2IyOXJkWEJDYkc5amExQmhjbUZ0T2lCbWRXNWpkR2x2YmloaWJHOWphMUJoY21GdFNXUXNJSEJoY25SektTQjdYRzRnSUNBZ2RHaHBjeTUxYzJWQ2JHOWphMUJoY21GdGN5QTlJSFJ5ZFdVN1hHNWNiaUFnSUNCMGFHbHpMbkIxYzJnb1d5ZGliRzlqYTFCaGNtRnRjMXNuTENCaWJHOWphMUJoY21GdFNXUmJNRjBzSUNkZFd5Y3NJR0pzYjJOclVHRnlZVzFKWkZzeFhTd2dKMTBuWFNrN1hHNGdJQ0FnZEdocGN5NXlaWE52YkhabFVHRjBhQ2duWTI5dWRHVjRkQ2NzSUhCaGNuUnpMQ0F4S1R0Y2JpQWdmU3hjYmx4dUlDQXZMeUJiYkc5dmEzVndSR0YwWVYxY2JpQWdMeTljYmlBZ0x5OGdUMjRnYzNSaFkyc3NJR0psWm05eVpUb2dMaTR1WEc0Z0lDOHZJRTl1SUhOMFlXTnJMQ0JoWm5SbGNqb2daR0YwWVN3Z0xpNHVYRzRnSUM4dlhHNGdJQzh2SUZCMWMyZ2dkR2hsSUdSaGRHRWdiRzl2YTNWd0lHOXdaWEpoZEc5eVhHNGdJR3h2YjJ0MWNFUmhkR0U2SUdaMWJtTjBhVzl1S0dSbGNIUm9MQ0J3WVhKMGN5d2djM1J5YVdOMEtTQjdYRzRnSUNBZ2FXWWdLQ0ZrWlhCMGFDa2dlMXh1SUNBZ0lDQWdkR2hwY3k1d2RYTm9VM1JoWTJ0TWFYUmxjbUZzS0Nka1lYUmhKeWs3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIUm9hWE11Y0hWemFGTjBZV05yVEdsMFpYSmhiQ2duWTI5dWRHRnBibVZ5TG1SaGRHRW9aR0YwWVN3Z0p5QXJJR1JsY0hSb0lDc2dKeWtuS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxuSmxjMjlzZG1WUVlYUm9LQ2RrWVhSaEp5d2djR0Z5ZEhNc0lEQXNJSFJ5ZFdVc0lITjBjbWxqZENrN1hHNGdJSDBzWEc1Y2JpQWdjbVZ6YjJ4MlpWQmhkR2c2SUdaMWJtTjBhVzl1S0hSNWNHVXNJSEJoY25SekxDQnBMQ0JtWVd4emVTd2djM1J5YVdOMEtTQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdWIzQjBhVzl1Y3k1emRISnBZM1FnZkh3Z2RHaHBjeTV2Y0hScGIyNXpMbUZ6YzNWdFpVOWlhbVZqZEhNcElIdGNiaUFnSUNBZ0lIUm9hWE11Y0hWemFDaGNiaUFnSUNBZ0lDQWdjM1J5YVdOMFRHOXZhM1Z3S0hSb2FYTXViM0IwYVc5dWN5NXpkSEpwWTNRZ0ppWWdjM1J5YVdOMExDQjBhR2x6TENCd1lYSjBjeXdnYVN3Z2RIbHdaU2xjYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2JHVjBJR3hsYmlBOUlIQmhjblJ6TG14bGJtZDBhRHRjYmlBZ0lDQm1iM0lnS0RzZ2FTQThJR3hsYmpzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0F2S2lCbGMyeHBiblF0WkdsellXSnNaU0J1Ynkxc2IyOXdMV1oxYm1NZ0tpOWNiaUFnSUNBZ0lIUm9hWE11Y21Wd2JHRmpaVk4wWVdOcktHTjFjbkpsYm5RZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2JHOXZhM1Z3SUQwZ2RHaHBjeTV1WVcxbFRHOXZhM1Z3S0dOMWNuSmxiblFzSUhCaGNuUnpXMmxkTENCMGVYQmxLVHRjYmlBZ0lDQWdJQ0FnTHk4Z1YyVWdkMkZ1ZENCMGJ5Qmxibk4xY21VZ2RHaGhkQ0I2WlhKdklHRnVaQ0JtWVd4elpTQmhjbVVnYUdGdVpHeGxaQ0J3Y205d1pYSnNlU0JwWmlCMGFHVWdZMjl1ZEdWNGRDQW9abUZzYzNrZ1pteGhaeWxjYmlBZ0lDQWdJQ0FnTHk4Z2JtVmxaSE1nZEc4Z2FHRjJaU0IwYUdVZ2MzQmxZMmxoYkNCb1lXNWtiR2x1WnlCbWIzSWdkR2hsYzJVZ2RtRnNkV1Z6TGx4dUlDQWdJQ0FnSUNCcFppQW9JV1poYkhONUtTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRnNuSUNFOUlHNTFiR3dnUHlBbkxDQnNiMjlyZFhBc0lDY2dPaUFuTENCamRYSnlaVzUwWFR0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJQZEdobGNuZHBjMlVnZDJVZ1kyRnVJSFZ6WlNCblpXNWxjbWxqSUdaaGJITjVJR2hoYm1Sc2FXNW5YRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRnNuSUNZbUlDY3NJR3h2YjJ0MWNGMDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnTHlvZ1pYTnNhVzUwTFdWdVlXSnNaU0J1Ynkxc2IyOXdMV1oxYm1NZ0tpOWNiaUFnSUNCOVhHNGdJSDBzWEc1Y2JpQWdMeThnVzNKbGMyOXNkbVZRYjNOemFXSnNaVXhoYldKa1lWMWNiaUFnTHk5Y2JpQWdMeThnVDI0Z2MzUmhZMnNzSUdKbFptOXlaVG9nZG1Gc2RXVXNJQzR1TGx4dUlDQXZMeUJQYmlCemRHRmpheXdnWVdaMFpYSTZJSEpsYzI5c2RtVmtJSFpoYkhWbExDQXVMaTVjYmlBZ0x5OWNiaUFnTHk4Z1NXWWdkR2hsSUdCMllXeDFaV0FnYVhNZ1lTQnNZVzFpWkdFc0lISmxjR3hoWTJVZ2FYUWdiMjRnZEdobElITjBZV05ySUdKNVhHNGdJQzh2SUhSb1pTQnlaWFIxY200Z2RtRnNkV1VnYjJZZ2RHaGxJR3hoYldKa1lWeHVJQ0J5WlhOdmJIWmxVRzl6YzJsaWJHVk1ZVzFpWkdFNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lIUm9hWE11Y0hWemFDaGJYRzRnSUNBZ0lDQjBhR2x6TG1Gc2FXRnpZV0pzWlNnblkyOXVkR0ZwYm1WeUxteGhiV0prWVNjcExGeHVJQ0FnSUNBZ0p5Z25MRnh1SUNBZ0lDQWdkR2hwY3k1d2IzQlRkR0ZqYXlncExGeHVJQ0FnSUNBZ0p5d2dKeXhjYmlBZ0lDQWdJSFJvYVhNdVkyOXVkR1Y0ZEU1aGJXVW9NQ2tzWEc0Z0lDQWdJQ0FuS1NkY2JpQWdJQ0JkS1R0Y2JpQWdmU3hjYmx4dUlDQXZMeUJiY0hWemFGTjBjbWx1WjFCaGNtRnRYVnh1SUNBdkwxeHVJQ0F2THlCUGJpQnpkR0ZqYXl3Z1ltVm1iM0psT2lBdUxpNWNiaUFnTHk4Z1QyNGdjM1JoWTJzc0lHRm1kR1Z5T2lCemRISnBibWNzSUdOMWNuSmxiblJEYjI1MFpYaDBMQ0F1TGk1Y2JpQWdMeTljYmlBZ0x5OGdWR2hwY3lCdmNHTnZaR1VnYVhNZ1pHVnphV2R1WldRZ1ptOXlJSFZ6WlNCcGJpQnpkSEpwYm1jZ2JXOWtaU3dnZDJocFkyaGNiaUFnTHk4Z2NISnZkbWxrWlhNZ2RHaGxJSE4wY21sdVp5QjJZV3gxWlNCdlppQmhJSEJoY21GdFpYUmxjaUJoYkc5dVp5QjNhWFJvSUdsMGMxeHVJQ0F2THlCa1pYQjBhQ0J5WVhSb1pYSWdkR2hoYmlCeVpYTnZiSFpwYm1jZ2FYUWdhVzF0WldScFlYUmxiSGt1WEc0Z0lIQjFjMmhUZEhKcGJtZFFZWEpoYlRvZ1puVnVZM1JwYjI0b2MzUnlhVzVuTENCMGVYQmxLU0I3WEc0Z0lDQWdkR2hwY3k1d2RYTm9RMjl1ZEdWNGRDZ3BPMXh1SUNBZ0lIUm9hWE11Y0hWemFGTjBjbWx1WnloMGVYQmxLVHRjYmx4dUlDQWdJQzh2SUVsbUlHbDBKM01nWVNCemRXSmxlSEJ5WlhOemFXOXVMQ0IwYUdVZ2MzUnlhVzVuSUhKbGMzVnNkRnh1SUNBZ0lDOHZJSGRwYkd3Z1ltVWdjSFZ6YUdWa0lHRm1kR1Z5SUhSb2FYTWdiM0JqYjJSbExseHVJQ0FnSUdsbUlDaDBlWEJsSUNFOVBTQW5VM1ZpUlhod2NtVnpjMmx2YmljcElIdGNiaUFnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdjM1J5YVc1bklEMDlQU0FuYzNSeWFXNW5KeWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbkIxYzJoVGRISnBibWNvYzNSeWFXNW5LVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNIVnphRk4wWVdOclRHbDBaWEpoYkNoemRISnBibWNwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZTeGNibHh1SUNCbGJYQjBlVWhoYzJnNklHWjFibU4wYVc5dUtHOXRhWFJGYlhCMGVTa2dlMXh1SUNBZ0lHbG1JQ2gwYUdsekxuUnlZV05yU1dSektTQjdYRzRnSUNBZ0lDQjBhR2x6TG5CMWMyZ29KM3Q5SnlrN0lDOHZJR2hoYzJoSlpITmNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIUm9hWE11YzNSeWFXNW5VR0Z5WVcxektTQjdYRzRnSUNBZ0lDQjBhR2x6TG5CMWMyZ29KM3Q5SnlrN0lDOHZJR2hoYzJoRGIyNTBaWGgwYzF4dUlDQWdJQ0FnZEdocGN5NXdkWE5vS0NkN2ZTY3BPeUF2THlCb1lYTm9WSGx3WlhOY2JpQWdJQ0I5WEc0Z0lDQWdkR2hwY3k1d2RYTm9VM1JoWTJ0TWFYUmxjbUZzS0c5dGFYUkZiWEIwZVNBL0lDZDFibVJsWm1sdVpXUW5JRG9nSjN0OUp5azdYRzRnSUgwc1hHNGdJSEIxYzJoSVlYTm9PaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVvWVhOb0tTQjdYRzRnSUNBZ0lDQjBhR2x6TG1oaGMyaGxjeTV3ZFhOb0tIUm9hWE11YUdGemFDazdYRzRnSUNBZ2ZWeHVJQ0FnSUhSb2FYTXVhR0Z6YUNBOUlIc2dkbUZzZFdWek9pQjdmU3dnZEhsd1pYTTZJRnRkTENCamIyNTBaWGgwY3pvZ1cxMHNJR2xrY3pvZ1cxMGdmVHRjYmlBZ2ZTeGNiaUFnY0c5d1NHRnphRG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnYkdWMElHaGhjMmdnUFNCMGFHbHpMbWhoYzJnN1hHNGdJQ0FnZEdocGN5NW9ZWE5vSUQwZ2RHaHBjeTVvWVhOb1pYTXVjRzl3S0NrN1hHNWNiaUFnSUNCcFppQW9kR2hwY3k1MGNtRmphMGxrY3lrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV3ZFhOb0tIUm9hWE11YjJKcVpXTjBUR2wwWlhKaGJDaG9ZWE5vTG1sa2N5a3BPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9kR2hwY3k1emRISnBibWRRWVhKaGJYTXBJSHRjYmlBZ0lDQWdJSFJvYVhNdWNIVnphQ2gwYUdsekxtOWlhbVZqZEV4cGRHVnlZV3dvYUdGemFDNWpiMjUwWlhoMGN5a3BPMXh1SUNBZ0lDQWdkR2hwY3k1d2RYTm9LSFJvYVhNdWIySnFaV04wVEdsMFpYSmhiQ2hvWVhOb0xuUjVjR1Z6S1NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NXdkWE5vS0hSb2FYTXViMkpxWldOMFRHbDBaWEpoYkNob1lYTm9MblpoYkhWbGN5a3BPMXh1SUNCOUxGeHVYRzRnSUM4dklGdHdkWE5vVTNSeWFXNW5YVnh1SUNBdkwxeHVJQ0F2THlCUGJpQnpkR0ZqYXl3Z1ltVm1iM0psT2lBdUxpNWNiaUFnTHk4Z1QyNGdjM1JoWTJzc0lHRm1kR1Z5T2lCeGRXOTBaV1JUZEhKcGJtY29jM1J5YVc1bktTd2dMaTR1WEc0Z0lDOHZYRzRnSUM4dklGQjFjMmdnWVNCeGRXOTBaV1FnZG1WeWMybHZiaUJ2WmlCZ2MzUnlhVzVuWUNCdmJuUnZJSFJvWlNCemRHRmphMXh1SUNCd2RYTm9VM1J5YVc1bk9pQm1kVzVqZEdsdmJpaHpkSEpwYm1jcElIdGNiaUFnSUNCMGFHbHpMbkIxYzJoVGRHRmphMHhwZEdWeVlXd29kR2hwY3k1eGRXOTBaV1JUZEhKcGJtY29jM1J5YVc1bktTazdYRzRnSUgwc1hHNWNiaUFnTHk4Z1czQjFjMmhNYVhSbGNtRnNYVnh1SUNBdkwxeHVJQ0F2THlCUGJpQnpkR0ZqYXl3Z1ltVm1iM0psT2lBdUxpNWNiaUFnTHk4Z1QyNGdjM1JoWTJzc0lHRm1kR1Z5T2lCMllXeDFaU3dnTGk0dVhHNGdJQzh2WEc0Z0lDOHZJRkIxYzJobGN5QmhJSFpoYkhWbElHOXVkRzhnZEdobElITjBZV05yTGlCVWFHbHpJRzl3WlhKaGRHbHZiaUJ3Y21WMlpXNTBjMXh1SUNBdkx5QjBhR1VnWTI5dGNHbHNaWElnWm5KdmJTQmpjbVZoZEdsdVp5QmhJSFJsYlhCdmNtRnllU0IyWVhKcFlXSnNaU0IwYnlCb2IyeGtYRzRnSUM4dklHbDBMbHh1SUNCd2RYTm9UR2wwWlhKaGJEb2dablZ1WTNScGIyNG9kbUZzZFdVcElIdGNiaUFnSUNCMGFHbHpMbkIxYzJoVGRHRmphMHhwZEdWeVlXd29kbUZzZFdVcE8xeHVJQ0I5TEZ4dVhHNGdJQzh2SUZ0d2RYTm9VSEp2WjNKaGJWMWNiaUFnTHk5Y2JpQWdMeThnVDI0Z2MzUmhZMnNzSUdKbFptOXlaVG9nTGk0dVhHNGdJQzh2SUU5dUlITjBZV05yTENCaFpuUmxjam9nY0hKdlozSmhiU2huZFdsa0tTd2dMaTR1WEc0Z0lDOHZYRzRnSUM4dklGQjFjMmdnWVNCd2NtOW5jbUZ0SUdWNGNISmxjM05wYjI0Z2IyNTBieUIwYUdVZ2MzUmhZMnN1SUZSb2FYTWdkR0ZyWlhOY2JpQWdMeThnWVNCamIyMXdhV3hsTFhScGJXVWdaM1ZwWkNCaGJtUWdZMjl1ZG1WeWRITWdhWFFnYVc1MGJ5QmhJSEoxYm5ScGJXVXRZV05qWlhOemFXSnNaVnh1SUNBdkx5QmxlSEJ5WlhOemFXOXVMbHh1SUNCd2RYTm9VSEp2WjNKaGJUb2dablZ1WTNScGIyNG9aM1ZwWkNrZ2UxeHVJQ0FnSUdsbUlDaG5kV2xrSUNFOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVjSFZ6YUZOMFlXTnJUR2wwWlhKaGJDaDBhR2x6TG5CeWIyZHlZVzFGZUhCeVpYTnphVzl1S0dkMWFXUXBLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV3ZFhOb1UzUmhZMnRNYVhSbGNtRnNLRzUxYkd3cE8xeHVJQ0FnSUgxY2JpQWdmU3hjYmx4dUlDQXZMeUJiY21WbmFYTjBaWEpFWldOdmNtRjBiM0pkWEc0Z0lDOHZYRzRnSUM4dklFOXVJSE4wWVdOckxDQmlaV1p2Y21VNklHaGhjMmdzSUhCeWIyZHlZVzBzSUhCaGNtRnRjeTR1TGl3Z0xpNHVYRzRnSUM4dklFOXVJSE4wWVdOckxDQmhablJsY2pvZ0xpNHVYRzRnSUM4dlhHNGdJQzh2SUZCdmNITWdiMlptSUhSb1pTQmtaV052Y21GMGIzSW5jeUJ3WVhKaGJXVjBaWEp6TENCcGJuWnZhMlZ6SUhSb1pTQmtaV052Y21GMGIzSXNYRzRnSUM4dklHRnVaQ0JwYm5ObGNuUnpJSFJvWlNCa1pXTnZjbUYwYjNJZ2FXNTBieUIwYUdVZ1pHVmpiM0poZEc5eWN5QnNhWE4wTGx4dUlDQnlaV2RwYzNSbGNrUmxZMjl5WVhSdmNpaHdZWEpoYlZOcGVtVXNJRzVoYldVcElIdGNiaUFnSUNCc1pYUWdabTkxYm1SRVpXTnZjbUYwYjNJZ1BTQjBhR2x6TG01aGJXVk1iMjlyZFhBb0oyUmxZMjl5WVhSdmNuTW5MQ0J1WVcxbExDQW5aR1ZqYjNKaGRHOXlKeWtzWEc0Z0lDQWdJQ0J2Y0hScGIyNXpJRDBnZEdocGN5NXpaWFIxY0VobGJIQmxja0Z5WjNNb2JtRnRaU3dnY0dGeVlXMVRhWHBsS1R0Y2JseHVJQ0FnSUhSb2FYTXVaR1ZqYjNKaGRHOXljeTV3ZFhOb0tGdGNiaUFnSUNBZ0lDZG1iaUE5SUNjc1hHNGdJQ0FnSUNCMGFHbHpMbVJsWTI5eVlYUnZjbk11Wm5WdVkzUnBiMjVEWVd4c0tHWnZkVzVrUkdWamIzSmhkRzl5TENBbkp5d2dXMXh1SUNBZ0lDQWdJQ0FuWm00bkxGeHVJQ0FnSUNBZ0lDQW5jSEp2Y0hNbkxGeHVJQ0FnSUNBZ0lDQW5ZMjl1ZEdGcGJtVnlKeXhjYmlBZ0lDQWdJQ0FnYjNCMGFXOXVjMXh1SUNBZ0lDQWdYU2tzWEc0Z0lDQWdJQ0FuSUh4OElHWnVPeWRjYmlBZ0lDQmRLVHRjYmlBZ2ZTeGNibHh1SUNBdkx5QmJhVzUyYjJ0bFNHVnNjR1Z5WFZ4dUlDQXZMMXh1SUNBdkx5QlBiaUJ6ZEdGamF5d2dZbVZtYjNKbE9pQm9ZWE5vTENCcGJuWmxjbk5sTENCd2NtOW5jbUZ0TENCd1lYSmhiWE11TGk0c0lDNHVMbHh1SUNBdkx5QlBiaUJ6ZEdGamF5d2dZV1owWlhJNklISmxjM1ZzZENCdlppQm9aV3h3WlhJZ2FXNTJiMk5oZEdsdmJseHVJQ0F2TDF4dUlDQXZMeUJRYjNCeklHOW1aaUIwYUdVZ2FHVnNjR1Z5SjNNZ2NHRnlZVzFsZEdWeWN5d2dhVzUyYjJ0bGN5QjBhR1VnYUdWc2NHVnlMRnh1SUNBdkx5QmhibVFnY0hWemFHVnpJSFJvWlNCb1pXeHdaWEluY3lCeVpYUjFjbTRnZG1Gc2RXVWdiMjUwYnlCMGFHVWdjM1JoWTJzdVhHNGdJQzh2WEc0Z0lDOHZJRWxtSUhSb1pTQm9aV3h3WlhJZ2FYTWdibTkwSUdadmRXNWtMQ0JnYUdWc2NHVnlUV2x6YzJsdVoyQWdhWE1nWTJGc2JHVmtMbHh1SUNCcGJuWnZhMlZJWld4d1pYSTZJR1oxYm1OMGFXOXVLSEJoY21GdFUybDZaU3dnYm1GdFpTd2dhWE5UYVcxd2JHVXBJSHRjYmlBZ0lDQnNaWFFnYm05dVNHVnNjR1Z5SUQwZ2RHaHBjeTV3YjNCVGRHRmpheWdwTEZ4dUlDQWdJQ0FnYUdWc2NHVnlJRDBnZEdocGN5NXpaWFIxY0VobGJIQmxjaWh3WVhKaGJWTnBlbVVzSUc1aGJXVXBPMXh1WEc0Z0lDQWdiR1YwSUhCdmMzTnBZbXhsUm5WdVkzUnBiMjVEWVd4c2N5QTlJRnRkTzF4dVhHNGdJQ0FnYVdZZ0tHbHpVMmx0Y0d4bEtTQjdYRzRnSUNBZ0lDQXZMeUJrYVhKbFkzUWdZMkZzYkNCMGJ5Qm9aV3h3WlhKY2JpQWdJQ0FnSUhCdmMzTnBZbXhsUm5WdVkzUnBiMjVEWVd4c2N5NXdkWE5vS0dobGJIQmxjaTV1WVcxbEtUdGNiaUFnSUNCOVhHNGdJQ0FnTHk4Z1kyRnNiQ0JoSUdaMWJtTjBhVzl1SUdaeWIyMGdkR2hsSUdsdWNIVjBJRzlpYW1WamRGeHVJQ0FnSUhCdmMzTnBZbXhsUm5WdVkzUnBiMjVEWVd4c2N5NXdkWE5vS0c1dmJraGxiSEJsY2lrN1hHNGdJQ0FnYVdZZ0tDRjBhR2x6TG05d2RHbHZibk11YzNSeWFXTjBLU0I3WEc0Z0lDQWdJQ0J3YjNOemFXSnNaVVoxYm1OMGFXOXVRMkZzYkhNdWNIVnphQ2hjYmlBZ0lDQWdJQ0FnZEdocGN5NWhiR2xoYzJGaWJHVW9KMk52Ym5SaGFXNWxjaTVvYjI5cmN5NW9aV3h3WlhKTmFYTnphVzVuSnlsY2JpQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYkdWMElHWjFibU4wYVc5dVRHOXZhM1Z3UTI5a1pTQTlJRnRjYmlBZ0lDQWdJQ2NvSnl4Y2JpQWdJQ0FnSUhSb2FYTXVhWFJsYlhOVFpYQmhjbUYwWldSQ2VTaHdiM056YVdKc1pVWjFibU4wYVc5dVEyRnNiSE1zSUNkOGZDY3BMRnh1SUNBZ0lDQWdKeWtuWEc0Z0lDQWdYVHRjYmlBZ0lDQnNaWFFnWm5WdVkzUnBiMjVEWVd4c0lEMGdkR2hwY3k1emIzVnlZMlV1Wm5WdVkzUnBiMjVEWVd4c0tGeHVJQ0FnSUNBZ1puVnVZM1JwYjI1TWIyOXJkWEJEYjJSbExGeHVJQ0FnSUNBZ0oyTmhiR3duTEZ4dUlDQWdJQ0FnYUdWc2NHVnlMbU5oYkd4UVlYSmhiWE5jYmlBZ0lDQXBPMXh1SUNBZ0lIUm9hWE11Y0hWemFDaG1kVzVqZEdsdmJrTmhiR3dwTzF4dUlDQjlMRnh1WEc0Z0lHbDBaVzF6VTJWd1lYSmhkR1ZrUW5rNklHWjFibU4wYVc5dUtHbDBaVzF6TENCelpYQmhjbUYwYjNJcElIdGNiaUFnSUNCc1pYUWdjbVZ6ZFd4MElEMGdXMTA3WEc0Z0lDQWdjbVZ6ZFd4MExuQjFjMmdvYVhSbGJYTmJNRjBwTzF4dUlDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBeE95QnBJRHdnYVhSbGJYTXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUhKbGMzVnNkQzV3ZFhOb0tITmxjR0Z5WVhSdmNpd2dhWFJsYlhOYmFWMHBPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnY21WemRXeDBPMXh1SUNCOUxGeHVJQ0F2THlCYmFXNTJiMnRsUzI1dmQyNUlaV3h3WlhKZFhHNGdJQzh2WEc0Z0lDOHZJRTl1SUhOMFlXTnJMQ0JpWldadmNtVTZJR2hoYzJnc0lHbHVkbVZ5YzJVc0lIQnliMmR5WVcwc0lIQmhjbUZ0Y3k0dUxpd2dMaTR1WEc0Z0lDOHZJRTl1SUhOMFlXTnJMQ0JoWm5SbGNqb2djbVZ6ZFd4MElHOW1JR2hsYkhCbGNpQnBiblp2WTJGMGFXOXVYRzRnSUM4dlhHNGdJQzh2SUZSb2FYTWdiM0JsY21GMGFXOXVJR2x6SUhWelpXUWdkMmhsYmlCMGFHVWdhR1ZzY0dWeUlHbHpJR3R1YjNkdUlIUnZJR1Y0YVhOMExGeHVJQ0F2THlCemJ5QmhJR0JvWld4d1pYSk5hWE56YVc1bllDQm1ZV3hzWW1GamF5QnBjeUJ1YjNRZ2NtVnhkV2x5WldRdVhHNGdJR2x1ZG05clpVdHViM2R1U0dWc2NHVnlPaUJtZFc1amRHbHZiaWh3WVhKaGJWTnBlbVVzSUc1aGJXVXBJSHRjYmlBZ0lDQnNaWFFnYUdWc2NHVnlJRDBnZEdocGN5NXpaWFIxY0VobGJIQmxjaWh3WVhKaGJWTnBlbVVzSUc1aGJXVXBPMXh1SUNBZ0lIUm9hWE11Y0hWemFDaDBhR2x6TG5OdmRYSmpaUzVtZFc1amRHbHZia05oYkd3b2FHVnNjR1Z5TG01aGJXVXNJQ2RqWVd4c0p5d2dhR1ZzY0dWeUxtTmhiR3hRWVhKaGJYTXBLVHRjYmlBZ2ZTeGNibHh1SUNBdkx5QmJhVzUyYjJ0bFFXMWlhV2QxYjNWelhWeHVJQ0F2TDF4dUlDQXZMeUJQYmlCemRHRmpheXdnWW1WbWIzSmxPaUJvWVhOb0xDQnBiblpsY25ObExDQndjbTluY21GdExDQndZWEpoYlhNdUxpNHNJQzR1TGx4dUlDQXZMeUJQYmlCemRHRmpheXdnWVdaMFpYSTZJSEpsYzNWc2RDQnZaaUJrYVhOaGJXSnBaM1ZoZEdsdmJseHVJQ0F2TDF4dUlDQXZMeUJVYUdseklHOXdaWEpoZEdsdmJpQnBjeUIxYzJWa0lIZG9aVzRnWVc0Z1pYaHdjbVZ6YzJsdmJpQnNhV3RsSUdCN2UyWnZiMzE5WUZ4dUlDQXZMeUJwY3lCd2NtOTJhV1JsWkN3Z1luVjBJSGRsSUdSdmJpZDBJR3R1YjNjZ1lYUWdZMjl0Y0dsc1pTMTBhVzFsSUhkb1pYUm9aWElnYVhSY2JpQWdMeThnYVhNZ1lTQm9aV3h3WlhJZ2IzSWdZU0J3WVhSb0xseHVJQ0F2TDF4dUlDQXZMeUJVYUdseklHOXdaWEpoZEdsdmJpQmxiV2wwY3lCdGIzSmxJR052WkdVZ2RHaGhiaUIwYUdVZ2IzUm9aWElnYjNCMGFXOXVjeXhjYmlBZ0x5OGdZVzVrSUdOaGJpQmlaU0JoZG05cFpHVmtJR0o1SUhCaGMzTnBibWNnZEdobElHQnJibTkzYmtobGJIQmxjbk5nSUdGdVpGeHVJQ0F2THlCZ2EyNXZkMjVJWld4d1pYSnpUMjVzZVdBZ1pteGhaM01nWVhRZ1kyOXRjR2xzWlMxMGFXMWxMbHh1SUNCcGJuWnZhMlZCYldKcFozVnZkWE02SUdaMWJtTjBhVzl1S0c1aGJXVXNJR2hsYkhCbGNrTmhiR3dwSUh0Y2JpQWdJQ0IwYUdsekxuVnpaVkpsWjJsemRHVnlLQ2RvWld4d1pYSW5LVHRjYmx4dUlDQWdJR3hsZENCdWIyNUlaV3h3WlhJZ1BTQjBhR2x6TG5CdmNGTjBZV05yS0NrN1hHNWNiaUFnSUNCMGFHbHpMbVZ0Y0hSNVNHRnphQ2dwTzF4dUlDQWdJR3hsZENCb1pXeHdaWElnUFNCMGFHbHpMbk5sZEhWd1NHVnNjR1Z5S0RBc0lHNWhiV1VzSUdobGJIQmxja05oYkd3cE8xeHVYRzRnSUNBZ2JHVjBJR2hsYkhCbGNrNWhiV1VnUFNBb2RHaHBjeTVzWVhOMFNHVnNjR1Z5SUQwZ2RHaHBjeTV1WVcxbFRHOXZhM1Z3S0Z4dUlDQWdJQ0FnSjJobGJIQmxjbk1uTEZ4dUlDQWdJQ0FnYm1GdFpTeGNiaUFnSUNBZ0lDZG9aV3h3WlhJblhHNGdJQ0FnS1NrN1hHNWNiaUFnSUNCc1pYUWdiRzl2YTNWd0lEMGdXeWNvSnl3Z0p5aG9aV3h3WlhJZ1BTQW5MQ0JvWld4d1pYSk9ZVzFsTENBbklIeDhJQ2NzSUc1dmJraGxiSEJsY2l3Z0p5a25YVHRjYmlBZ0lDQnBaaUFvSVhSb2FYTXViM0IwYVc5dWN5NXpkSEpwWTNRcElIdGNiaUFnSUNBZ0lHeHZiMnQxY0Zzd1hTQTlJQ2NvYUdWc2NHVnlJRDBnSnp0Y2JpQWdJQ0FnSUd4dmIydDFjQzV3ZFhOb0tGeHVJQ0FnSUNBZ0lDQW5JQ0U5SUc1MWJHd2dQeUJvWld4d1pYSWdPaUFuTEZ4dUlDQWdJQ0FnSUNCMGFHbHpMbUZzYVdGellXSnNaU2duWTI5dWRHRnBibVZ5TG1odmIydHpMbWhsYkhCbGNrMXBjM05wYm1jbktWeHVJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCMGFHbHpMbkIxYzJnb1cxeHVJQ0FnSUNBZ0p5Z25MRnh1SUNBZ0lDQWdiRzl2YTNWd0xGeHVJQ0FnSUNBZ2FHVnNjR1Z5TG5CaGNtRnRjMGx1YVhRZ1B5QmJKeWtzS0Njc0lHaGxiSEJsY2k1d1lYSmhiWE5KYm1sMFhTQTZJRnRkTEZ4dUlDQWdJQ0FnSnlrc0p5eGNiaUFnSUNBZ0lDY29kSGx3Wlc5bUlHaGxiSEJsY2lBOVBUMGdKeXhjYmlBZ0lDQWdJSFJvYVhNdVlXeHBZWE5oWW14bEtDZGNJbVoxYm1OMGFXOXVYQ0luS1N4Y2JpQWdJQ0FnSUNjZ1B5QW5MRnh1SUNBZ0lDQWdkR2hwY3k1emIzVnlZMlV1Wm5WdVkzUnBiMjVEWVd4c0tDZG9aV3h3WlhJbkxDQW5ZMkZzYkNjc0lHaGxiSEJsY2k1allXeHNVR0Z5WVcxektTeGNiaUFnSUNBZ0lDY2dPaUJvWld4d1pYSXBLU2RjYmlBZ0lDQmRLVHRjYmlBZ2ZTeGNibHh1SUNBdkx5QmJhVzUyYjJ0bFVHRnlkR2xoYkYxY2JpQWdMeTljYmlBZ0x5OGdUMjRnYzNSaFkyc3NJR0psWm05eVpUb2dZMjl1ZEdWNGRDd2dMaTR1WEc0Z0lDOHZJRTl1SUhOMFlXTnJJR0ZtZEdWeU9pQnlaWE4xYkhRZ2IyWWdjR0Z5ZEdsaGJDQnBiblp2WTJGMGFXOXVYRzRnSUM4dlhHNGdJQzh2SUZSb2FYTWdiM0JsY21GMGFXOXVJSEJ2Y0hNZ2IyWm1JR0VnWTI5dWRHVjRkQ3dnYVc1MmIydGxjeUJoSUhCaGNuUnBZV3dnZDJsMGFDQjBhR0YwSUdOdmJuUmxlSFFzWEc0Z0lDOHZJR0Z1WkNCd2RYTm9aWE1nZEdobElISmxjM1ZzZENCdlppQjBhR1VnYVc1MmIyTmhkR2x2YmlCaVlXTnJMbHh1SUNCcGJuWnZhMlZRWVhKMGFXRnNPaUJtZFc1amRHbHZiaWhwYzBSNWJtRnRhV01zSUc1aGJXVXNJR2x1WkdWdWRDa2dlMXh1SUNBZ0lHeGxkQ0J3WVhKaGJYTWdQU0JiWFN4Y2JpQWdJQ0FnSUc5d2RHbHZibk1nUFNCMGFHbHpMbk5sZEhWd1VHRnlZVzF6S0c1aGJXVXNJREVzSUhCaGNtRnRjeWs3WEc1Y2JpQWdJQ0JwWmlBb2FYTkVlVzVoYldsaktTQjdYRzRnSUNBZ0lDQnVZVzFsSUQwZ2RHaHBjeTV3YjNCVGRHRmpheWdwTzF4dUlDQWdJQ0FnWkdWc1pYUmxJRzl3ZEdsdmJuTXVibUZ0WlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2FXNWtaVzUwS1NCN1hHNGdJQ0FnSUNCdmNIUnBiMjV6TG1sdVpHVnVkQ0E5SUVwVFQwNHVjM1J5YVc1bmFXWjVLR2x1WkdWdWRDazdYRzRnSUNBZ2ZWeHVJQ0FnSUc5d2RHbHZibk11YUdWc2NHVnljeUE5SUNkb1pXeHdaWEp6Snp0Y2JpQWdJQ0J2Y0hScGIyNXpMbkJoY25ScFlXeHpJRDBnSjNCaGNuUnBZV3h6Snp0Y2JpQWdJQ0J2Y0hScGIyNXpMbVJsWTI5eVlYUnZjbk1nUFNBblkyOXVkR0ZwYm1WeUxtUmxZMjl5WVhSdmNuTW5PMXh1WEc0Z0lDQWdhV1lnS0NGcGMwUjVibUZ0YVdNcElIdGNiaUFnSUNBZ0lIQmhjbUZ0Y3k1MWJuTm9hV1owS0hSb2FYTXVibUZ0WlV4dmIydDFjQ2duY0dGeWRHbGhiSE1uTENCdVlXMWxMQ0FuY0dGeWRHbGhiQ2NwS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdjR0Z5WVcxekxuVnVjMmhwWm5Rb2JtRnRaU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NWpiMjF3WVhRcElIdGNiaUFnSUNBZ0lHOXdkR2x2Ym5NdVpHVndkR2h6SUQwZ0oyUmxjSFJvY3ljN1hHNGdJQ0FnZlZ4dUlDQWdJRzl3ZEdsdmJuTWdQU0IwYUdsekxtOWlhbVZqZEV4cGRHVnlZV3dvYjNCMGFXOXVjeWs3WEc0Z0lDQWdjR0Z5WVcxekxuQjFjMmdvYjNCMGFXOXVjeWs3WEc1Y2JpQWdJQ0IwYUdsekxuQjFjMmdvZEdocGN5NXpiM1Z5WTJVdVpuVnVZM1JwYjI1RFlXeHNLQ2RqYjI1MFlXbHVaWEl1YVc1MmIydGxVR0Z5ZEdsaGJDY3NJQ2NuTENCd1lYSmhiWE1wS1R0Y2JpQWdmU3hjYmx4dUlDQXZMeUJiWVhOemFXZHVWRzlJWVhOb1hWeHVJQ0F2TDF4dUlDQXZMeUJQYmlCemRHRmpheXdnWW1WbWIzSmxPaUIyWVd4MVpTd2dMaTR1TENCb1lYTm9MQ0F1TGk1Y2JpQWdMeThnVDI0Z2MzUmhZMnNzSUdGbWRHVnlPaUF1TGk0c0lHaGhjMmdzSUM0dUxseHVJQ0F2TDF4dUlDQXZMeUJRYjNCeklHRWdkbUZzZFdVZ2IyWm1JSFJvWlNCemRHRmpheUJoYm1RZ1lYTnphV2R1Y3lCcGRDQjBieUIwYUdVZ1kzVnljbVZ1ZENCb1lYTm9YRzRnSUdGemMybG5ibFJ2U0dGemFEb2dablZ1WTNScGIyNG9hMlY1S1NCN1hHNGdJQ0FnYkdWMElIWmhiSFZsSUQwZ2RHaHBjeTV3YjNCVGRHRmpheWdwTEZ4dUlDQWdJQ0FnWTI5dWRHVjRkQ3hjYmlBZ0lDQWdJSFI1Y0dVc1hHNGdJQ0FnSUNCcFpEdGNibHh1SUNBZ0lHbG1JQ2gwYUdsekxuUnlZV05yU1dSektTQjdYRzRnSUNBZ0lDQnBaQ0E5SUhSb2FYTXVjRzl3VTNSaFkyc29LVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSFJvYVhNdWMzUnlhVzVuVUdGeVlXMXpLU0I3WEc0Z0lDQWdJQ0IwZVhCbElEMGdkR2hwY3k1d2IzQlRkR0ZqYXlncE8xeHVJQ0FnSUNBZ1kyOXVkR1Y0ZENBOUlIUm9hWE11Y0c5d1UzUmhZMnNvS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JzWlhRZ2FHRnphQ0E5SUhSb2FYTXVhR0Z6YUR0Y2JpQWdJQ0JwWmlBb1kyOXVkR1Y0ZENrZ2UxeHVJQ0FnSUNBZ2FHRnphQzVqYjI1MFpYaDBjMXRyWlhsZElEMGdZMjl1ZEdWNGREdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIUjVjR1VwSUh0Y2JpQWdJQ0FnSUdoaGMyZ3VkSGx3WlhOYmEyVjVYU0E5SUhSNWNHVTdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHBaQ2tnZTF4dUlDQWdJQ0FnYUdGemFDNXBaSE5iYTJWNVhTQTlJR2xrTzF4dUlDQWdJSDFjYmlBZ0lDQm9ZWE5vTG5aaGJIVmxjMXRyWlhsZElEMGdkbUZzZFdVN1hHNGdJSDBzWEc1Y2JpQWdjSFZ6YUVsa09pQm1kVzVqZEdsdmJpaDBlWEJsTENCdVlXMWxMQ0JqYUdsc1pDa2dlMXh1SUNBZ0lHbG1JQ2gwZVhCbElEMDlQU0FuUW14dlkydFFZWEpoYlNjcElIdGNiaUFnSUNBZ0lIUm9hWE11Y0hWemFGTjBZV05yVEdsMFpYSmhiQ2hjYmlBZ0lDQWdJQ0FnSjJKc2IyTnJVR0Z5WVcxeld5Y2dLMXh1SUNBZ0lDQWdJQ0FnSUc1aGJXVmJNRjBnSzF4dUlDQWdJQ0FnSUNBZ0lDZGRMbkJoZEdoYkp5QXJYRzRnSUNBZ0lDQWdJQ0FnYm1GdFpWc3hYU0FyWEc0Z0lDQWdJQ0FnSUNBZ0oxMG5JQ3RjYmlBZ0lDQWdJQ0FnSUNBb1kyaHBiR1FnUHlBbklDc2dKeUFySUVwVFQwNHVjM1J5YVc1bmFXWjVLQ2N1SnlBcklHTm9hV3hrS1NBNklDY25LVnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFI1Y0dVZ1BUMDlJQ2RRWVhSb1JYaHdjbVZ6YzJsdmJpY3BJSHRjYmlBZ0lDQWdJSFJvYVhNdWNIVnphRk4wY21sdVp5aHVZVzFsS1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0hSNWNHVWdQVDA5SUNkVGRXSkZlSEJ5WlhOemFXOXVKeWtnZTF4dUlDQWdJQ0FnZEdocGN5NXdkWE5vVTNSaFkydE1hWFJsY21Gc0tDZDBjblZsSnlrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSFJvYVhNdWNIVnphRk4wWVdOclRHbDBaWEpoYkNnbmJuVnNiQ2NwTzF4dUlDQWdJSDFjYmlBZ2ZTeGNibHh1SUNBdkx5QklSVXhRUlZKVFhHNWNiaUFnWTI5dGNHbHNaWEk2SUVwaGRtRlRZM0pwY0hSRGIyMXdhV3hsY2l4Y2JseHVJQ0JqYjIxd2FXeGxRMmhwYkdSeVpXNDZJR1oxYm1OMGFXOXVLR1Z1ZG1seWIyNXRaVzUwTENCdmNIUnBiMjV6S1NCN1hHNGdJQ0FnYkdWMElHTm9hV3hrY21WdUlEMGdaVzUyYVhKdmJtMWxiblF1WTJocGJHUnlaVzRzWEc0Z0lDQWdJQ0JqYUdsc1pDeGNiaUFnSUNBZ0lHTnZiWEJwYkdWeU8xeHVYRzRnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREFzSUd3Z1BTQmphR2xzWkhKbGJpNXNaVzVuZEdnN0lHa2dQQ0JzT3lCcEt5c3BJSHRjYmlBZ0lDQWdJR05vYVd4a0lEMGdZMmhwYkdSeVpXNWJhVjA3WEc0Z0lDQWdJQ0JqYjIxd2FXeGxjaUE5SUc1bGR5QjBhR2x6TG1OdmJYQnBiR1Z5S0NrN0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXeHBibVVnYm1WM0xXTmhjRnh1WEc0Z0lDQWdJQ0JzWlhRZ1pYaHBjM1JwYm1jZ1BTQjBhR2x6TG0xaGRHTm9SWGhwYzNScGJtZFFjbTluY21GdEtHTm9hV3hrS1R0Y2JseHVJQ0FnSUNBZ2FXWWdLR1Y0YVhOMGFXNW5JRDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWpiMjUwWlhoMExuQnliMmR5WVcxekxuQjFjMmdvSnljcE95QXZMeUJRYkdGalpXaHZiR1JsY2lCMGJ5QndjbVYyWlc1MElHNWhiV1VnWTI5dVpteHBZM1J6SUdadmNpQnVaWE4wWldRZ1kyaHBiR1J5Wlc1Y2JpQWdJQ0FnSUNBZ2JHVjBJR2x1WkdWNElEMGdkR2hwY3k1amIyNTBaWGgwTG5CeWIyZHlZVzF6TG14bGJtZDBhRHRjYmlBZ0lDQWdJQ0FnWTJocGJHUXVhVzVrWlhnZ1BTQnBibVJsZUR0Y2JpQWdJQ0FnSUNBZ1kyaHBiR1F1Ym1GdFpTQTlJQ2R3Y205bmNtRnRKeUFySUdsdVpHVjRPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTnZiblJsZUhRdWNISnZaM0poYlhOYmFXNWtaWGhkSUQwZ1kyOXRjR2xzWlhJdVkyOXRjR2xzWlNoY2JpQWdJQ0FnSUNBZ0lDQmphR2xzWkN4Y2JpQWdJQ0FnSUNBZ0lDQnZjSFJwYjI1ekxGeHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyOXVkR1Y0ZEN4Y2JpQWdJQ0FnSUNBZ0lDQWhkR2hwY3k1d2NtVmpiMjF3YVd4bFhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyOXVkR1Y0ZEM1a1pXTnZjbUYwYjNKelcybHVaR1Y0WFNBOUlHTnZiWEJwYkdWeUxtUmxZMjl5WVhSdmNuTTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyOXVkR1Y0ZEM1bGJuWnBjbTl1YldWdWRITmJhVzVrWlhoZElEMGdZMmhwYkdRN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1MWMyVkVaWEIwYUhNZ1BTQjBhR2x6TG5WelpVUmxjSFJvY3lCOGZDQmpiMjF3YVd4bGNpNTFjMlZFWlhCMGFITTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRYTmxRbXh2WTJ0UVlYSmhiWE1nUFNCMGFHbHpMblZ6WlVKc2IyTnJVR0Z5WVcxeklIeDhJR052YlhCcGJHVnlMblZ6WlVKc2IyTnJVR0Z5WVcxek8xeHVJQ0FnSUNBZ0lDQmphR2xzWkM1MWMyVkVaWEIwYUhNZ1BTQjBhR2x6TG5WelpVUmxjSFJvY3p0Y2JpQWdJQ0FnSUNBZ1kyaHBiR1F1ZFhObFFteHZZMnRRWVhKaGJYTWdQU0IwYUdsekxuVnpaVUpzYjJOclVHRnlZVzF6TzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnWTJocGJHUXVhVzVrWlhnZ1BTQmxlR2x6ZEdsdVp5NXBibVJsZUR0Y2JpQWdJQ0FnSUNBZ1kyaHBiR1F1Ym1GdFpTQTlJQ2R3Y205bmNtRnRKeUFySUdWNGFYTjBhVzVuTG1sdVpHVjRPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkWE5sUkdWd2RHaHpJRDBnZEdocGN5NTFjMlZFWlhCMGFITWdmSHdnWlhocGMzUnBibWN1ZFhObFJHVndkR2h6TzF4dUlDQWdJQ0FnSUNCMGFHbHpMblZ6WlVKc2IyTnJVR0Z5WVcxeklEMGdkR2hwY3k1MWMyVkNiRzlqYTFCaGNtRnRjeUI4ZkNCbGVHbHpkR2x1Wnk1MWMyVkNiRzlqYTFCaGNtRnRjenRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgwc1hHNGdJRzFoZEdOb1JYaHBjM1JwYm1kUWNtOW5jbUZ0T2lCbWRXNWpkR2x2YmloamFHbHNaQ2tnZTF4dUlDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd0xDQnNaVzRnUFNCMGFHbHpMbU52Ym5SbGVIUXVaVzUyYVhKdmJtMWxiblJ6TG14bGJtZDBhRHNnYVNBOElHeGxianNnYVNzcktTQjdYRzRnSUNBZ0lDQnNaWFFnWlc1MmFYSnZibTFsYm5RZ1BTQjBhR2x6TG1OdmJuUmxlSFF1Wlc1MmFYSnZibTFsYm5SelcybGRPMXh1SUNBZ0lDQWdhV1lnS0dWdWRtbHliMjV0Wlc1MElDWW1JR1Z1ZG1seWIyNXRaVzUwTG1WeGRXRnNjeWhqYUdsc1pDa3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1Z1ZG1seWIyNXRaVzUwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZTeGNibHh1SUNCd2NtOW5jbUZ0Ulhod2NtVnpjMmx2YmpvZ1puVnVZM1JwYjI0b1ozVnBaQ2tnZTF4dUlDQWdJR3hsZENCamFHbHNaQ0E5SUhSb2FYTXVaVzUyYVhKdmJtMWxiblF1WTJocGJHUnlaVzViWjNWcFpGMHNYRzRnSUNBZ0lDQndjbTluY21GdFVHRnlZVzF6SUQwZ1cyTm9hV3hrTG1sdVpHVjRMQ0FuWkdGMFlTY3NJR05vYVd4a0xtSnNiMk5yVUdGeVlXMXpYVHRjYmx4dUlDQWdJR2xtSUNoMGFHbHpMblZ6WlVKc2IyTnJVR0Z5WVcxeklIeDhJSFJvYVhNdWRYTmxSR1Z3ZEdoektTQjdYRzRnSUNBZ0lDQndjbTluY21GdFVHRnlZVzF6TG5CMWMyZ29KMkpzYjJOclVHRnlZVzF6SnlrN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoMGFHbHpMblZ6WlVSbGNIUm9jeWtnZTF4dUlDQWdJQ0FnY0hKdlozSmhiVkJoY21GdGN5NXdkWE5vS0Nka1pYQjBhSE1uS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdKMk52Ym5SaGFXNWxjaTV3Y205bmNtRnRLQ2NnS3lCd2NtOW5jbUZ0VUdGeVlXMXpMbXB2YVc0b0p5d2dKeWtnS3lBbktTYzdYRzRnSUgwc1hHNWNiaUFnZFhObFVtVm5hWE4wWlhJNklHWjFibU4wYVc5dUtHNWhiV1VwSUh0Y2JpQWdJQ0JwWmlBb0lYUm9hWE11Y21WbmFYTjBaWEp6VzI1aGJXVmRLU0I3WEc0Z0lDQWdJQ0IwYUdsekxuSmxaMmx6ZEdWeWMxdHVZVzFsWFNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0IwYUdsekxuSmxaMmx6ZEdWeWN5NXNhWE4wTG5CMWMyZ29ibUZ0WlNrN1hHNGdJQ0FnZlZ4dUlDQjlMRnh1WEc0Z0lIQjFjMmc2SUdaMWJtTjBhVzl1S0dWNGNISXBJSHRjYmlBZ0lDQnBaaUFvSVNobGVIQnlJR2x1YzNSaGJtTmxiMllnVEdsMFpYSmhiQ2twSUh0Y2JpQWdJQ0FnSUdWNGNISWdQU0IwYUdsekxuTnZkWEpqWlM1M2NtRndLR1Y0Y0hJcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb2FYTXVhVzVzYVc1bFUzUmhZMnN1Y0hWemFDaGxlSEJ5S1R0Y2JpQWdJQ0J5WlhSMWNtNGdaWGh3Y2p0Y2JpQWdmU3hjYmx4dUlDQndkWE5vVTNSaFkydE1hWFJsY21Gc09pQm1kVzVqZEdsdmJpaHBkR1Z0S1NCN1hHNGdJQ0FnZEdocGN5NXdkWE5vS0c1bGR5Qk1hWFJsY21Gc0tHbDBaVzBwS1R0Y2JpQWdmU3hjYmx4dUlDQndkWE5vVTI5MWNtTmxPaUJtZFc1amRHbHZiaWh6YjNWeVkyVXBJSHRjYmlBZ0lDQnBaaUFvZEdocGN5NXdaVzVrYVc1blEyOXVkR1Z1ZENrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV6YjNWeVkyVXVjSFZ6YUNoY2JpQWdJQ0FnSUNBZ2RHaHBjeTVoY0hCbGJtUlViMEoxWm1abGNpaGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxuTnZkWEpqWlM1eGRXOTBaV1JUZEhKcGJtY29kR2hwY3k1d1pXNWthVzVuUTI5dWRHVnVkQ2tzWEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTV3Wlc1a2FXNW5URzlqWVhScGIyNWNiaUFnSUNBZ0lDQWdLVnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQWdJSFJvYVhNdWNHVnVaR2x1WjBOdmJuUmxiblFnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tITnZkWEpqWlNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV6YjNWeVkyVXVjSFZ6YUNoemIzVnlZMlVwTzF4dUlDQWdJSDFjYmlBZ2ZTeGNibHh1SUNCeVpYQnNZV05sVTNSaFkyczZJR1oxYm1OMGFXOXVLR05oYkd4aVlXTnJLU0I3WEc0Z0lDQWdiR1YwSUhCeVpXWnBlQ0E5SUZzbktDZGRMRnh1SUNBZ0lDQWdjM1JoWTJzc1hHNGdJQ0FnSUNCamNtVmhkR1ZrVTNSaFkyc3NYRzRnSUNBZ0lDQjFjMlZrVEdsMFpYSmhiRHRjYmx4dUlDQWdJQzhxSUdsemRHRnVZblZzSUdsbmJtOXlaU0J1WlhoMElDb3ZYRzRnSUNBZ2FXWWdLQ0YwYUdsekxtbHpTVzVzYVc1bEtDa3BJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGZUdObGNIUnBiMjRvSjNKbGNHeGhZMlZUZEdGamF5QnZiaUJ1YjI0dGFXNXNhVzVsSnlrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1YyVWdkMkZ1ZENCMGJ5QnRaWEpuWlNCMGFHVWdhVzVzYVc1bElITjBZWFJsYldWdWRDQnBiblJ2SUhSb1pTQnlaWEJzWVdObGJXVnVkQ0J6ZEdGMFpXMWxiblFnZG1saElDY3NKMXh1SUNBZ0lHeGxkQ0IwYjNBZ1BTQjBhR2x6TG5CdmNGTjBZV05yS0hSeWRXVXBPMXh1WEc0Z0lDQWdhV1lnS0hSdmNDQnBibk4wWVc1alpXOW1JRXhwZEdWeVlXd3BJSHRjYmlBZ0lDQWdJQzh2SUV4cGRHVnlZV3h6SUdSdklHNXZkQ0J1WldWa0lIUnZJR0psSUdsdWJHbHVaV1JjYmlBZ0lDQWdJSE4wWVdOcklEMGdXM1J2Y0M1MllXeDFaVjA3WEc0Z0lDQWdJQ0J3Y21WbWFYZ2dQU0JiSnlnbkxDQnpkR0ZqYTEwN1hHNGdJQ0FnSUNCMWMyVmtUR2wwWlhKaGJDQTlJSFJ5ZFdVN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQzh2SUVkbGRDQnZjaUJqY21WaGRHVWdkR2hsSUdOMWNuSmxiblFnYzNSaFkyc2dibUZ0WlNCbWIzSWdkWE5sSUdKNUlIUm9aU0JwYm14cGJtVmNiaUFnSUNBZ0lHTnlaV0YwWldSVGRHRmpheUE5SUhSeWRXVTdYRzRnSUNBZ0lDQnNaWFFnYm1GdFpTQTlJSFJvYVhNdWFXNWpjbE4wWVdOcktDazdYRzVjYmlBZ0lDQWdJSEJ5WldacGVDQTlJRnNuS0NnbkxDQjBhR2x6TG5CMWMyZ29ibUZ0WlNrc0lDY2dQU0FuTENCMGIzQXNJQ2NwSjEwN1hHNGdJQ0FnSUNCemRHRmpheUE5SUhSb2FYTXVkRzl3VTNSaFkyc29LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnNaWFFnYVhSbGJTQTlJR05oYkd4aVlXTnJMbU5oYkd3b2RHaHBjeXdnYzNSaFkyc3BPMXh1WEc0Z0lDQWdhV1lnS0NGMWMyVmtUR2wwWlhKaGJDa2dlMXh1SUNBZ0lDQWdkR2hwY3k1d2IzQlRkR0ZqYXlncE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb1kzSmxZWFJsWkZOMFlXTnJLU0I3WEc0Z0lDQWdJQ0IwYUdsekxuTjBZV05yVTJ4dmRDMHRPMXh1SUNBZ0lIMWNiaUFnSUNCMGFHbHpMbkIxYzJnb2NISmxabWw0TG1OdmJtTmhkQ2hwZEdWdExDQW5LU2NwS1R0Y2JpQWdmU3hjYmx4dUlDQnBibU55VTNSaFkyczZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJSFJvYVhNdWMzUmhZMnRUYkc5MEt5czdYRzRnSUNBZ2FXWWdLSFJvYVhNdWMzUmhZMnRUYkc5MElENGdkR2hwY3k1emRHRmphMVpoY25NdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbk4wWVdOclZtRnljeTV3ZFhOb0tDZHpkR0ZqYXljZ0t5QjBhR2x6TG5OMFlXTnJVMnh2ZENrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5SdmNGTjBZV05yVG1GdFpTZ3BPMXh1SUNCOUxGeHVJQ0IwYjNCVGRHRmphMDVoYldVNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlBbmMzUmhZMnNuSUNzZ2RHaHBjeTV6ZEdGamExTnNiM1E3WEc0Z0lIMHNYRzRnSUdac2RYTm9TVzVzYVc1bE9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQnNaWFFnYVc1c2FXNWxVM1JoWTJzZ1BTQjBhR2x6TG1sdWJHbHVaVk4wWVdOck8xeHVJQ0FnSUhSb2FYTXVhVzVzYVc1bFUzUmhZMnNnUFNCYlhUdGNiaUFnSUNCbWIzSWdLR3hsZENCcElEMGdNQ3dnYkdWdUlEMGdhVzVzYVc1bFUzUmhZMnN1YkdWdVozUm9PeUJwSUR3Z2JHVnVPeUJwS3lzcElIdGNiaUFnSUNBZ0lHeGxkQ0JsYm5SeWVTQTlJR2x1YkdsdVpWTjBZV05yVzJsZE8xeHVJQ0FnSUNBZ0x5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHbG1JQ292WEc0Z0lDQWdJQ0JwWmlBb1pXNTBjbmtnYVc1emRHRnVZMlZ2WmlCTWFYUmxjbUZzS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WTI5dGNHbHNaVk4wWVdOckxuQjFjMmdvWlc1MGNua3BPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdiR1YwSUhOMFlXTnJJRDBnZEdocGN5NXBibU55VTNSaFkyc29LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdkWE5vVTI5MWNtTmxLRnR6ZEdGamF5d2dKeUE5SUNjc0lHVnVkSEo1TENBbk95ZGRLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWpiMjF3YVd4bFUzUmhZMnN1Y0hWemFDaHpkR0ZqYXlrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlMRnh1SUNCcGMwbHViR2x1WlRvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVhVzVzYVc1bFUzUmhZMnN1YkdWdVozUm9PMXh1SUNCOUxGeHVYRzRnSUhCdmNGTjBZV05yT2lCbWRXNWpkR2x2YmloM2NtRndjR1ZrS1NCN1hHNGdJQ0FnYkdWMElHbHViR2x1WlNBOUlIUm9hWE11YVhOSmJteHBibVVvS1N4Y2JpQWdJQ0FnSUdsMFpXMGdQU0FvYVc1c2FXNWxJRDhnZEdocGN5NXBibXhwYm1WVGRHRmpheUE2SUhSb2FYTXVZMjl0Y0dsc1pWTjBZV05yS1M1d2IzQW9LVHRjYmx4dUlDQWdJR2xtSUNnaGQzSmhjSEJsWkNBbUppQnBkR1Z0SUdsdWMzUmhibU5sYjJZZ1RHbDBaWEpoYkNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdsMFpXMHVkbUZzZFdVN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR2xtSUNnaGFXNXNhVzVsS1NCN1hHNGdJQ0FnSUNBZ0lDOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnVaWGgwSUNvdlhHNGdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NXpkR0ZqYTFOc2IzUXBJSHRjYmlBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYaGpaWEIwYVc5dUtDZEpiblpoYkdsa0lITjBZV05ySUhCdmNDY3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjM1JoWTJ0VGJHOTBMUzA3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdhWFJsYlR0Y2JpQWdJQ0I5WEc0Z0lIMHNYRzVjYmlBZ2RHOXdVM1JoWTJzNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lHeGxkQ0J6ZEdGamF5QTlJSFJvYVhNdWFYTkpibXhwYm1Vb0tTQS9JSFJvYVhNdWFXNXNhVzVsVTNSaFkyc2dPaUIwYUdsekxtTnZiWEJwYkdWVGRHRmpheXhjYmlBZ0lDQWdJR2wwWlcwZ1BTQnpkR0ZqYTF0emRHRmpheTVzWlc1bmRHZ2dMU0F4WFR0Y2JseHVJQ0FnSUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCcFppQXFMMXh1SUNBZ0lHbG1JQ2hwZEdWdElHbHVjM1JoYm1ObGIyWWdUR2wwWlhKaGJDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHbDBaVzB1ZG1Gc2RXVTdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJwZEdWdE8xeHVJQ0FnSUgxY2JpQWdmU3hjYmx4dUlDQmpiMjUwWlhoMFRtRnRaVG9nWm5WdVkzUnBiMjRvWTI5dWRHVjRkQ2tnZTF4dUlDQWdJR2xtSUNoMGFHbHpMblZ6WlVSbGNIUm9jeUFtSmlCamIyNTBaWGgwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnSjJSbGNIUm9jMXNuSUNzZ1kyOXVkR1Y0ZENBcklDZGRKenRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUNka1pYQjBhQ2NnS3lCamIyNTBaWGgwTzF4dUlDQWdJSDFjYmlBZ2ZTeGNibHh1SUNCeGRXOTBaV1JUZEhKcGJtYzZJR1oxYm1OMGFXOXVLSE4wY2lrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuTnZkWEpqWlM1eGRXOTBaV1JUZEhKcGJtY29jM1J5S1R0Y2JpQWdmU3hjYmx4dUlDQnZZbXBsWTNSTWFYUmxjbUZzT2lCbWRXNWpkR2x2Ymlodlltb3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV6YjNWeVkyVXViMkpxWldOMFRHbDBaWEpoYkNodlltb3BPMXh1SUNCOUxGeHVYRzRnSUdGc2FXRnpZV0pzWlRvZ1puVnVZM1JwYjI0b2JtRnRaU2tnZTF4dUlDQWdJR3hsZENCeVpYUWdQU0IwYUdsekxtRnNhV0Z6WlhOYmJtRnRaVjA3WEc0Z0lDQWdhV1lnS0hKbGRDa2dlMXh1SUNBZ0lDQWdjbVYwTG5KbFptVnlaVzVqWlVOdmRXNTBLeXM3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjbVYwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZENBOUlIUm9hWE11WVd4cFlYTmxjMXR1WVcxbFhTQTlJSFJvYVhNdWMyOTFjbU5sTG5keVlYQW9ibUZ0WlNrN1hHNGdJQ0FnY21WMExtRnNhV0Z6WVdKc1pTQTlJSFJ5ZFdVN1hHNGdJQ0FnY21WMExuSmxabVZ5Wlc1alpVTnZkVzUwSUQwZ01UdGNibHh1SUNBZ0lISmxkSFZ5YmlCeVpYUTdYRzRnSUgwc1hHNWNiaUFnYzJWMGRYQklaV3h3WlhJNklHWjFibU4wYVc5dUtIQmhjbUZ0VTJsNlpTd2dibUZ0WlN3Z1lteHZZMnRJWld4d1pYSXBJSHRjYmlBZ0lDQnNaWFFnY0dGeVlXMXpJRDBnVzEwc1hHNGdJQ0FnSUNCd1lYSmhiWE5KYm1sMElEMGdkR2hwY3k1elpYUjFjRWhsYkhCbGNrRnlaM01vYm1GdFpTd2djR0Z5WVcxVGFYcGxMQ0J3WVhKaGJYTXNJR0pzYjJOclNHVnNjR1Z5S1R0Y2JpQWdJQ0JzWlhRZ1ptOTFibVJJWld4d1pYSWdQU0IwYUdsekxtNWhiV1ZNYjI5cmRYQW9KMmhsYkhCbGNuTW5MQ0J1WVcxbExDQW5hR1ZzY0dWeUp5a3NYRzRnSUNBZ0lDQmpZV3hzUTI5dWRHVjRkQ0E5SUhSb2FYTXVZV3hwWVhOaFlteGxLRnh1SUNBZ0lDQWdJQ0JnSkh0MGFHbHpMbU52Ym5SbGVIUk9ZVzFsS0RBcGZTQWhQU0J1ZFd4c0lEOGdKSHQwYUdsekxtTnZiblJsZUhST1lXMWxLRnh1SUNBZ0lDQWdJQ0FnSURCY2JpQWdJQ0FnSUNBZ0tYMGdPaUFvWTI5dWRHRnBibVZ5TG01MWJHeERiMjUwWlhoMElIeDhJSHQ5S1dCY2JpQWdJQ0FnSUNrN1hHNWNiaUFnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnY0dGeVlXMXpPaUJ3WVhKaGJYTXNYRzRnSUNBZ0lDQndZWEpoYlhOSmJtbDBPaUJ3WVhKaGJYTkpibWwwTEZ4dUlDQWdJQ0FnYm1GdFpUb2dabTkxYm1SSVpXeHdaWElzWEc0Z0lDQWdJQ0JqWVd4c1VHRnlZVzF6T2lCYlkyRnNiRU52Ym5SbGVIUmRMbU52Ym1OaGRDaHdZWEpoYlhNcFhHNGdJQ0FnZlR0Y2JpQWdmU3hjYmx4dUlDQnpaWFIxY0ZCaGNtRnRjem9nWm5WdVkzUnBiMjRvYUdWc2NHVnlMQ0J3WVhKaGJWTnBlbVVzSUhCaGNtRnRjeWtnZTF4dUlDQWdJR3hsZENCdmNIUnBiMjV6SUQwZ2UzMHNYRzRnSUNBZ0lDQmpiMjUwWlhoMGN5QTlJRnRkTEZ4dUlDQWdJQ0FnZEhsd1pYTWdQU0JiWFN4Y2JpQWdJQ0FnSUdsa2N5QTlJRnRkTEZ4dUlDQWdJQ0FnYjJKcVpXTjBRWEpuY3lBOUlDRndZWEpoYlhNc1hHNGdJQ0FnSUNCd1lYSmhiVHRjYmx4dUlDQWdJR2xtSUNodlltcGxZM1JCY21kektTQjdYRzRnSUNBZ0lDQndZWEpoYlhNZ1BTQmJYVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnZjSFJwYjI1ekxtNWhiV1VnUFNCMGFHbHpMbkYxYjNSbFpGTjBjbWx1Wnlob1pXeHdaWElwTzF4dUlDQWdJRzl3ZEdsdmJuTXVhR0Z6YUNBOUlIUm9hWE11Y0c5d1UzUmhZMnNvS1R0Y2JseHVJQ0FnSUdsbUlDaDBhR2x6TG5SeVlXTnJTV1J6S1NCN1hHNGdJQ0FnSUNCdmNIUnBiMjV6TG1oaGMyaEpaSE1nUFNCMGFHbHpMbkJ2Y0ZOMFlXTnJLQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2gwYUdsekxuTjBjbWx1WjFCaGNtRnRjeWtnZTF4dUlDQWdJQ0FnYjNCMGFXOXVjeTVvWVhOb1ZIbHdaWE1nUFNCMGFHbHpMbkJ2Y0ZOMFlXTnJLQ2s3WEc0Z0lDQWdJQ0J2Y0hScGIyNXpMbWhoYzJoRGIyNTBaWGgwY3lBOUlIUm9hWE11Y0c5d1UzUmhZMnNvS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JzWlhRZ2FXNTJaWEp6WlNBOUlIUm9hWE11Y0c5d1UzUmhZMnNvS1N4Y2JpQWdJQ0FnSUhCeWIyZHlZVzBnUFNCMGFHbHpMbkJ2Y0ZOMFlXTnJLQ2s3WEc1Y2JpQWdJQ0F2THlCQmRtOXBaQ0J6WlhSMGFXNW5JR1p1SUdGdVpDQnBiblpsY25ObElHbG1JRzVsYVhSb1pYSWdZWEpsSUhObGRDNGdWR2hwY3lCaGJHeHZkM05jYmlBZ0lDQXZMeUJvWld4d1pYSnpJSFJ2SUdSdklHRWdZMmhsWTJzZ1ptOXlJR0JwWmlBb2IzQjBhVzl1Y3k1bWJpbGdYRzRnSUNBZ2FXWWdLSEJ5YjJkeVlXMGdmSHdnYVc1MlpYSnpaU2tnZTF4dUlDQWdJQ0FnYjNCMGFXOXVjeTVtYmlBOUlIQnliMmR5WVcwZ2ZId2dKMk52Ym5SaGFXNWxjaTV1YjI5d0p6dGNiaUFnSUNBZ0lHOXdkR2x2Ym5NdWFXNTJaWEp6WlNBOUlHbHVkbVZ5YzJVZ2ZId2dKMk52Ym5SaGFXNWxjaTV1YjI5d0p6dGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QlVhR1VnY0dGeVlXMWxkR1Z5Y3lCbmJ5QnZiaUIwYnlCMGFHVWdjM1JoWTJzZ2FXNGdiM0prWlhJZ0tHMWhhMmx1WnlCemRYSmxJSFJvWVhRZ2RHaGxlU0JoY21VZ1pYWmhiSFZoZEdWa0lHbHVJRzl5WkdWeUtWeHVJQ0FnSUM4dklITnZJSGRsSUc1bFpXUWdkRzhnY0c5d0lIUm9aVzBnYjJabUlIUm9aU0J6ZEdGamF5QnBiaUJ5WlhabGNuTmxJRzl5WkdWeVhHNGdJQ0FnYkdWMElHa2dQU0J3WVhKaGJWTnBlbVU3WEc0Z0lDQWdkMmhwYkdVZ0tHa3RMU2tnZTF4dUlDQWdJQ0FnY0dGeVlXMGdQU0IwYUdsekxuQnZjRk4wWVdOcktDazdYRzRnSUNBZ0lDQndZWEpoYlhOYmFWMGdQU0J3WVhKaGJUdGNibHh1SUNBZ0lDQWdhV1lnS0hSb2FYTXVkSEpoWTJ0SlpITXBJSHRjYmlBZ0lDQWdJQ0FnYVdSelcybGRJRDBnZEdocGN5NXdiM0JUZEdGamF5Z3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdhV1lnS0hSb2FYTXVjM1J5YVc1blVHRnlZVzF6S1NCN1hHNGdJQ0FnSUNBZ0lIUjVjR1Z6VzJsZElEMGdkR2hwY3k1d2IzQlRkR0ZqYXlncE8xeHVJQ0FnSUNBZ0lDQmpiMjUwWlhoMGMxdHBYU0E5SUhSb2FYTXVjRzl3VTNSaFkyc29LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvYjJKcVpXTjBRWEpuY3lrZ2UxeHVJQ0FnSUNBZ2IzQjBhVzl1Y3k1aGNtZHpJRDBnZEdocGN5NXpiM1Z5WTJVdVoyVnVaWEpoZEdWQmNuSmhlU2h3WVhKaGJYTXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2gwYUdsekxuUnlZV05yU1dSektTQjdYRzRnSUNBZ0lDQnZjSFJwYjI1ekxtbGtjeUE5SUhSb2FYTXVjMjkxY21ObExtZGxibVZ5WVhSbFFYSnlZWGtvYVdSektUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIUm9hWE11YzNSeWFXNW5VR0Z5WVcxektTQjdYRzRnSUNBZ0lDQnZjSFJwYjI1ekxuUjVjR1Z6SUQwZ2RHaHBjeTV6YjNWeVkyVXVaMlZ1WlhKaGRHVkJjbkpoZVNoMGVYQmxjeWs3WEc0Z0lDQWdJQ0J2Y0hScGIyNXpMbU52Ym5SbGVIUnpJRDBnZEdocGN5NXpiM1Z5WTJVdVoyVnVaWEpoZEdWQmNuSmhlU2hqYjI1MFpYaDBjeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NWtZWFJoS1NCN1hHNGdJQ0FnSUNCdmNIUnBiMjV6TG1SaGRHRWdQU0FuWkdGMFlTYzdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaDBhR2x6TG5WelpVSnNiMk5yVUdGeVlXMXpLU0I3WEc0Z0lDQWdJQ0J2Y0hScGIyNXpMbUpzYjJOclVHRnlZVzF6SUQwZ0oySnNiMk5yVUdGeVlXMXpKenRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUc5d2RHbHZibk03WEc0Z0lIMHNYRzVjYmlBZ2MyVjBkWEJJWld4d1pYSkJjbWR6T2lCbWRXNWpkR2x2Ymlob1pXeHdaWElzSUhCaGNtRnRVMmw2WlN3Z2NHRnlZVzF6TENCMWMyVlNaV2RwYzNSbGNpa2dlMXh1SUNBZ0lHeGxkQ0J2Y0hScGIyNXpJRDBnZEdocGN5NXpaWFIxY0ZCaGNtRnRjeWhvWld4d1pYSXNJSEJoY21GdFUybDZaU3dnY0dGeVlXMXpLVHRjYmlBZ0lDQnZjSFJwYjI1ekxteHZZeUE5SUVwVFQwNHVjM1J5YVc1bmFXWjVLSFJvYVhNdWMyOTFjbU5sTG1OMWNuSmxiblJNYjJOaGRHbHZiaWs3WEc0Z0lDQWdiM0IwYVc5dWN5QTlJSFJvYVhNdWIySnFaV04wVEdsMFpYSmhiQ2h2Y0hScGIyNXpLVHRjYmlBZ0lDQnBaaUFvZFhObFVtVm5hWE4wWlhJcElIdGNiaUFnSUNBZ0lIUm9hWE11ZFhObFVtVm5hWE4wWlhJb0oyOXdkR2x2Ym5NbktUdGNiaUFnSUNBZ0lIQmhjbUZ0Y3k1d2RYTm9LQ2R2Y0hScGIyNXpKeWs3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdXeWR2Y0hScGIyNXpQU2NzSUc5d2RHbHZibk5kTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvY0dGeVlXMXpLU0I3WEc0Z0lDQWdJQ0J3WVhKaGJYTXVjSFZ6YUNodmNIUnBiMjV6S1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUFuSnp0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHOXdkR2x2Ym5NN1hHNGdJQ0FnZlZ4dUlDQjlYRzU5TzF4dVhHNG9ablZ1WTNScGIyNG9LU0I3WEc0Z0lHTnZibk4wSUhKbGMyVnlkbVZrVjI5eVpITWdQU0FvWEc0Z0lDQWdKMkp5WldGcklHVnNjMlVnYm1WM0lIWmhjaWNnSzF4dUlDQWdJQ2NnWTJGelpTQm1hVzVoYkd4NUlISmxkSFZ5YmlCMmIybGtKeUFyWEc0Z0lDQWdKeUJqWVhSamFDQm1iM0lnYzNkcGRHTm9JSGRvYVd4bEp5QXJYRzRnSUNBZ0p5QmpiMjUwYVc1MVpTQm1kVzVqZEdsdmJpQjBhR2x6SUhkcGRHZ25JQ3RjYmlBZ0lDQW5JR1JsWm1GMWJIUWdhV1lnZEdoeWIzY25JQ3RjYmlBZ0lDQW5JR1JsYkdWMFpTQnBiaUIwY25rbklDdGNiaUFnSUNBbklHUnZJR2x1YzNSaGJtTmxiMllnZEhsd1pXOW1KeUFyWEc0Z0lDQWdKeUJoWW5OMGNtRmpkQ0JsYm5WdElHbHVkQ0J6YUc5eWRDY2dLMXh1SUNBZ0lDY2dZbTl2YkdWaGJpQmxlSEJ2Y25RZ2FXNTBaWEptWVdObElITjBZWFJwWXljZ0sxeHVJQ0FnSUNjZ1lubDBaU0JsZUhSbGJtUnpJR3h2Ym1jZ2MzVndaWEluSUN0Y2JpQWdJQ0FuSUdOb1lYSWdabWx1WVd3Z2JtRjBhWFpsSUhONWJtTm9jbTl1YVhwbFpDY2dLMXh1SUNBZ0lDY2dZMnhoYzNNZ1pteHZZWFFnY0dGamEyRm5aU0IwYUhKdmQzTW5JQ3RjYmlBZ0lDQW5JR052Ym5OMElHZHZkRzhnY0hKcGRtRjBaU0IwY21GdWMybGxiblFuSUN0Y2JpQWdJQ0FuSUdSbFluVm5aMlZ5SUdsdGNHeGxiV1Z1ZEhNZ2NISnZkR1ZqZEdWa0lIWnZiR0YwYVd4bEp5QXJYRzRnSUNBZ0p5QmtiM1ZpYkdVZ2FXMXdiM0owSUhCMVlteHBZeUJzWlhRZ2VXbGxiR1FnWVhkaGFYUW5JQ3RjYmlBZ0lDQW5JRzUxYkd3Z2RISjFaU0JtWVd4elpTZGNiaUFnS1M1emNHeHBkQ2duSUNjcE8xeHVYRzRnSUdOdmJuTjBJR052YlhCcGJHVnlWMjl5WkhNZ1BTQW9TbUYyWVZOamNtbHdkRU52YlhCcGJHVnlMbEpGVTBWU1ZrVkVYMWRQVWtSVElEMGdlMzBwTzF4dVhHNGdJR1p2Y2lBb2JHVjBJR2tnUFNBd0xDQnNJRDBnY21WelpYSjJaV1JYYjNKa2N5NXNaVzVuZEdnN0lHa2dQQ0JzT3lCcEt5c3BJSHRjYmlBZ0lDQmpiMjF3YVd4bGNsZHZjbVJ6VzNKbGMyVnlkbVZrVjI5eVpITmJhVjFkSUQwZ2RISjFaVHRjYmlBZ2ZWeHVmU2tvS1R0Y2JseHVMeW9xWEc0Z0tpQkFaR1Z3Y21WallYUmxaQ0JOWVhrZ1ltVWdjbVZ0YjNabFpDQnBiaUIwYUdVZ2JtVjRkQ0J0WVdwdmNpQjJaWEp6YVc5dVhHNGdLaTljYmtwaGRtRlRZM0pwY0hSRGIyMXdhV3hsY2k1cGMxWmhiR2xrU21GMllWTmpjbWx3ZEZaaGNtbGhZbXhsVG1GdFpTQTlJR1oxYm1OMGFXOXVLRzVoYldVcElIdGNiaUFnY21WMGRYSnVJQ2hjYmlBZ0lDQWhTbUYyWVZOamNtbHdkRU52YlhCcGJHVnlMbEpGVTBWU1ZrVkVYMWRQVWtSVFcyNWhiV1ZkSUNZbVhHNGdJQ0FnTDE1YllTMTZRUzFhWHlSZFd6QXRPV0V0ZWtFdFdsOGtYU29rTHk1MFpYTjBLRzVoYldVcFhHNGdJQ2s3WEc1OU8xeHVYRzVtZFc1amRHbHZiaUJ6ZEhKcFkzUk1iMjlyZFhBb2NtVnhkV2x5WlZSbGNtMXBibUZzTENCamIyMXdhV3hsY2l3Z2NHRnlkSE1zSUdrc0lIUjVjR1VwSUh0Y2JpQWdiR1YwSUhOMFlXTnJJRDBnWTI5dGNHbHNaWEl1Y0c5d1UzUmhZMnNvS1N4Y2JpQWdJQ0JzWlc0Z1BTQndZWEowY3k1c1pXNW5kR2c3WEc0Z0lHbG1JQ2h5WlhGMWFYSmxWR1Z5YldsdVlXd3BJSHRjYmlBZ0lDQnNaVzR0TFR0Y2JpQWdmVnh1WEc0Z0lHWnZjaUFvT3lCcElEd2diR1Z1T3lCcEt5c3BJSHRjYmlBZ0lDQnpkR0ZqYXlBOUlHTnZiWEJwYkdWeUxtNWhiV1ZNYjI5cmRYQW9jM1JoWTJzc0lIQmhjblJ6VzJsZExDQjBlWEJsS1R0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2h5WlhGMWFYSmxWR1Z5YldsdVlXd3BJSHRjYmlBZ0lDQnlaWFIxY200Z1cxeHVJQ0FnSUNBZ1kyOXRjR2xzWlhJdVlXeHBZWE5oWW14bEtDZGpiMjUwWVdsdVpYSXVjM1J5YVdOMEp5a3NYRzRnSUNBZ0lDQW5LQ2NzWEc0Z0lDQWdJQ0J6ZEdGamF5eGNiaUFnSUNBZ0lDY3NJQ2NzWEc0Z0lDQWdJQ0JqYjIxd2FXeGxjaTV4ZFc5MFpXUlRkSEpwYm1jb2NHRnlkSE5iYVYwcExGeHVJQ0FnSUNBZ0p5d2dKeXhjYmlBZ0lDQWdJRXBUVDA0dWMzUnlhVzVuYVdaNUtHTnZiWEJwYkdWeUxuTnZkWEpqWlM1amRYSnlaVzUwVEc5allYUnBiMjRwTEZ4dUlDQWdJQ0FnSnlBcEoxeHVJQ0FnSUYwN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2NtVjBkWEp1SUhOMFlXTnJPMXh1SUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRXBoZG1GVFkzSnBjSFJEYjIxd2FXeGxjanRjYmlKZGZRPT1cbiIsIi8vIEZpbGUgaWdub3JlZCBpbiBjb3ZlcmFnZSB0ZXN0cyB2aWEgc2V0dGluZyBpbiAuaXN0YW5idWwueW1sXG4vKiBKaXNvbiBnZW5lcmF0ZWQgcGFyc2VyICovXG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciBoYW5kbGViYXJzID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyc2VyID0geyB0cmFjZTogZnVuY3Rpb24gdHJhY2UoKSB7fSxcbiAgICAgICAgeXk6IHt9LFxuICAgICAgICBzeW1ib2xzXzogeyBcImVycm9yXCI6IDIsIFwicm9vdFwiOiAzLCBcInByb2dyYW1cIjogNCwgXCJFT0ZcIjogNSwgXCJwcm9ncmFtX3JlcGV0aXRpb24wXCI6IDYsIFwic3RhdGVtZW50XCI6IDcsIFwibXVzdGFjaGVcIjogOCwgXCJibG9ja1wiOiA5LCBcInJhd0Jsb2NrXCI6IDEwLCBcInBhcnRpYWxcIjogMTEsIFwicGFydGlhbEJsb2NrXCI6IDEyLCBcImNvbnRlbnRcIjogMTMsIFwiQ09NTUVOVFwiOiAxNCwgXCJDT05URU5UXCI6IDE1LCBcIm9wZW5SYXdCbG9ja1wiOiAxNiwgXCJyYXdCbG9ja19yZXBldGl0aW9uMFwiOiAxNywgXCJFTkRfUkFXX0JMT0NLXCI6IDE4LCBcIk9QRU5fUkFXX0JMT0NLXCI6IDE5LCBcImhlbHBlck5hbWVcIjogMjAsIFwib3BlblJhd0Jsb2NrX3JlcGV0aXRpb24wXCI6IDIxLCBcIm9wZW5SYXdCbG9ja19vcHRpb24wXCI6IDIyLCBcIkNMT1NFX1JBV19CTE9DS1wiOiAyMywgXCJvcGVuQmxvY2tcIjogMjQsIFwiYmxvY2tfb3B0aW9uMFwiOiAyNSwgXCJjbG9zZUJsb2NrXCI6IDI2LCBcIm9wZW5JbnZlcnNlXCI6IDI3LCBcImJsb2NrX29wdGlvbjFcIjogMjgsIFwiT1BFTl9CTE9DS1wiOiAyOSwgXCJvcGVuQmxvY2tfcmVwZXRpdGlvbjBcIjogMzAsIFwib3BlbkJsb2NrX29wdGlvbjBcIjogMzEsIFwib3BlbkJsb2NrX29wdGlvbjFcIjogMzIsIFwiQ0xPU0VcIjogMzMsIFwiT1BFTl9JTlZFUlNFXCI6IDM0LCBcIm9wZW5JbnZlcnNlX3JlcGV0aXRpb24wXCI6IDM1LCBcIm9wZW5JbnZlcnNlX29wdGlvbjBcIjogMzYsIFwib3BlbkludmVyc2Vfb3B0aW9uMVwiOiAzNywgXCJvcGVuSW52ZXJzZUNoYWluXCI6IDM4LCBcIk9QRU5fSU5WRVJTRV9DSEFJTlwiOiAzOSwgXCJvcGVuSW52ZXJzZUNoYWluX3JlcGV0aXRpb24wXCI6IDQwLCBcIm9wZW5JbnZlcnNlQ2hhaW5fb3B0aW9uMFwiOiA0MSwgXCJvcGVuSW52ZXJzZUNoYWluX29wdGlvbjFcIjogNDIsIFwiaW52ZXJzZUFuZFByb2dyYW1cIjogNDMsIFwiSU5WRVJTRVwiOiA0NCwgXCJpbnZlcnNlQ2hhaW5cIjogNDUsIFwiaW52ZXJzZUNoYWluX29wdGlvbjBcIjogNDYsIFwiT1BFTl9FTkRCTE9DS1wiOiA0NywgXCJPUEVOXCI6IDQ4LCBcIm11c3RhY2hlX3JlcGV0aXRpb24wXCI6IDQ5LCBcIm11c3RhY2hlX29wdGlvbjBcIjogNTAsIFwiT1BFTl9VTkVTQ0FQRURcIjogNTEsIFwibXVzdGFjaGVfcmVwZXRpdGlvbjFcIjogNTIsIFwibXVzdGFjaGVfb3B0aW9uMVwiOiA1MywgXCJDTE9TRV9VTkVTQ0FQRURcIjogNTQsIFwiT1BFTl9QQVJUSUFMXCI6IDU1LCBcInBhcnRpYWxOYW1lXCI6IDU2LCBcInBhcnRpYWxfcmVwZXRpdGlvbjBcIjogNTcsIFwicGFydGlhbF9vcHRpb24wXCI6IDU4LCBcIm9wZW5QYXJ0aWFsQmxvY2tcIjogNTksIFwiT1BFTl9QQVJUSUFMX0JMT0NLXCI6IDYwLCBcIm9wZW5QYXJ0aWFsQmxvY2tfcmVwZXRpdGlvbjBcIjogNjEsIFwib3BlblBhcnRpYWxCbG9ja19vcHRpb24wXCI6IDYyLCBcInBhcmFtXCI6IDYzLCBcInNleHByXCI6IDY0LCBcIk9QRU5fU0VYUFJcIjogNjUsIFwic2V4cHJfcmVwZXRpdGlvbjBcIjogNjYsIFwic2V4cHJfb3B0aW9uMFwiOiA2NywgXCJDTE9TRV9TRVhQUlwiOiA2OCwgXCJoYXNoXCI6IDY5LCBcImhhc2hfcmVwZXRpdGlvbl9wbHVzMFwiOiA3MCwgXCJoYXNoU2VnbWVudFwiOiA3MSwgXCJJRFwiOiA3MiwgXCJFUVVBTFNcIjogNzMsIFwiYmxvY2tQYXJhbXNcIjogNzQsIFwiT1BFTl9CTE9DS19QQVJBTVNcIjogNzUsIFwiYmxvY2tQYXJhbXNfcmVwZXRpdGlvbl9wbHVzMFwiOiA3NiwgXCJDTE9TRV9CTE9DS19QQVJBTVNcIjogNzcsIFwicGF0aFwiOiA3OCwgXCJkYXRhTmFtZVwiOiA3OSwgXCJTVFJJTkdcIjogODAsIFwiTlVNQkVSXCI6IDgxLCBcIkJPT0xFQU5cIjogODIsIFwiVU5ERUZJTkVEXCI6IDgzLCBcIk5VTExcIjogODQsIFwiREFUQVwiOiA4NSwgXCJwYXRoU2VnbWVudHNcIjogODYsIFwiU0VQXCI6IDg3LCBcIiRhY2NlcHRcIjogMCwgXCIkZW5kXCI6IDEgfSxcbiAgICAgICAgdGVybWluYWxzXzogeyAyOiBcImVycm9yXCIsIDU6IFwiRU9GXCIsIDE0OiBcIkNPTU1FTlRcIiwgMTU6IFwiQ09OVEVOVFwiLCAxODogXCJFTkRfUkFXX0JMT0NLXCIsIDE5OiBcIk9QRU5fUkFXX0JMT0NLXCIsIDIzOiBcIkNMT1NFX1JBV19CTE9DS1wiLCAyOTogXCJPUEVOX0JMT0NLXCIsIDMzOiBcIkNMT1NFXCIsIDM0OiBcIk9QRU5fSU5WRVJTRVwiLCAzOTogXCJPUEVOX0lOVkVSU0VfQ0hBSU5cIiwgNDQ6IFwiSU5WRVJTRVwiLCA0NzogXCJPUEVOX0VOREJMT0NLXCIsIDQ4OiBcIk9QRU5cIiwgNTE6IFwiT1BFTl9VTkVTQ0FQRURcIiwgNTQ6IFwiQ0xPU0VfVU5FU0NBUEVEXCIsIDU1OiBcIk9QRU5fUEFSVElBTFwiLCA2MDogXCJPUEVOX1BBUlRJQUxfQkxPQ0tcIiwgNjU6IFwiT1BFTl9TRVhQUlwiLCA2ODogXCJDTE9TRV9TRVhQUlwiLCA3MjogXCJJRFwiLCA3MzogXCJFUVVBTFNcIiwgNzU6IFwiT1BFTl9CTE9DS19QQVJBTVNcIiwgNzc6IFwiQ0xPU0VfQkxPQ0tfUEFSQU1TXCIsIDgwOiBcIlNUUklOR1wiLCA4MTogXCJOVU1CRVJcIiwgODI6IFwiQk9PTEVBTlwiLCA4MzogXCJVTkRFRklORURcIiwgODQ6IFwiTlVMTFwiLCA4NTogXCJEQVRBXCIsIDg3OiBcIlNFUFwiIH0sXG4gICAgICAgIHByb2R1Y3Rpb25zXzogWzAsIFszLCAyXSwgWzQsIDFdLCBbNywgMV0sIFs3LCAxXSwgWzcsIDFdLCBbNywgMV0sIFs3LCAxXSwgWzcsIDFdLCBbNywgMV0sIFsxMywgMV0sIFsxMCwgM10sIFsxNiwgNV0sIFs5LCA0XSwgWzksIDRdLCBbMjQsIDZdLCBbMjcsIDZdLCBbMzgsIDZdLCBbNDMsIDJdLCBbNDUsIDNdLCBbNDUsIDFdLCBbMjYsIDNdLCBbOCwgNV0sIFs4LCA1XSwgWzExLCA1XSwgWzEyLCAzXSwgWzU5LCA1XSwgWzYzLCAxXSwgWzYzLCAxXSwgWzY0LCA1XSwgWzY5LCAxXSwgWzcxLCAzXSwgWzc0LCAzXSwgWzIwLCAxXSwgWzIwLCAxXSwgWzIwLCAxXSwgWzIwLCAxXSwgWzIwLCAxXSwgWzIwLCAxXSwgWzIwLCAxXSwgWzU2LCAxXSwgWzU2LCAxXSwgWzc5LCAyXSwgWzc4LCAxXSwgWzg2LCAzXSwgWzg2LCAxXSwgWzYsIDBdLCBbNiwgMl0sIFsxNywgMF0sIFsxNywgMl0sIFsyMSwgMF0sIFsyMSwgMl0sIFsyMiwgMF0sIFsyMiwgMV0sIFsyNSwgMF0sIFsyNSwgMV0sIFsyOCwgMF0sIFsyOCwgMV0sIFszMCwgMF0sIFszMCwgMl0sIFszMSwgMF0sIFszMSwgMV0sIFszMiwgMF0sIFszMiwgMV0sIFszNSwgMF0sIFszNSwgMl0sIFszNiwgMF0sIFszNiwgMV0sIFszNywgMF0sIFszNywgMV0sIFs0MCwgMF0sIFs0MCwgMl0sIFs0MSwgMF0sIFs0MSwgMV0sIFs0MiwgMF0sIFs0MiwgMV0sIFs0NiwgMF0sIFs0NiwgMV0sIFs0OSwgMF0sIFs0OSwgMl0sIFs1MCwgMF0sIFs1MCwgMV0sIFs1MiwgMF0sIFs1MiwgMl0sIFs1MywgMF0sIFs1MywgMV0sIFs1NywgMF0sIFs1NywgMl0sIFs1OCwgMF0sIFs1OCwgMV0sIFs2MSwgMF0sIFs2MSwgMl0sIFs2MiwgMF0sIFs2MiwgMV0sIFs2NiwgMF0sIFs2NiwgMl0sIFs2NywgMF0sIFs2NywgMV0sIFs3MCwgMV0sIFs3MCwgMl0sIFs3NiwgMV0sIFs3NiwgMl1dLFxuICAgICAgICBwZXJmb3JtQWN0aW9uOiBmdW5jdGlvbiBhbm9ueW1vdXMoeXl0ZXh0LCB5eWxlbmcsIHl5bGluZW5vLCB5eSwgeXlzdGF0ZSwgJCQsIF8kKSB7XG5cbiAgICAgICAgICAgIHZhciAkMCA9ICQkLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICBzd2l0Y2ggKHl5c3RhdGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkJFskMCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHl5LnByZXBhcmVQcm9ncmFtKCQkWyQwXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gJCRbJDBdO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9ICQkWyQwXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSAkJFskMF07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gJCRbJDBdO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9ICQkWyQwXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSAkJFskMF07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ0NvbW1lbnRTdGF0ZW1lbnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHl5LnN0cmlwQ29tbWVudCgkJFskMF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDBdLCAkJFskMF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ0NvbnRlbnRTdGF0ZW1lbnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWw6ICQkWyQwXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAkJFskMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2M6IHl5LmxvY0luZm8odGhpcy5fJClcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB5eS5wcmVwYXJlUmF3QmxvY2soJCRbJDAgLSAyXSwgJCRbJDAgLSAxXSwgJCRbJDBdLCB0aGlzLl8kKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geyBwYXRoOiAkJFskMCAtIDNdLCBwYXJhbXM6ICQkWyQwIC0gMl0sIGhhc2g6ICQkWyQwIC0gMV0gfTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geXkucHJlcGFyZUJsb2NrKCQkWyQwIC0gM10sICQkWyQwIC0gMl0sICQkWyQwIC0gMV0sICQkWyQwXSwgZmFsc2UsIHRoaXMuXyQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE0OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB5eS5wcmVwYXJlQmxvY2soJCRbJDAgLSAzXSwgJCRbJDAgLSAyXSwgJCRbJDAgLSAxXSwgJCRbJDBdLCB0cnVlLCB0aGlzLl8kKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxNTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geyBvcGVuOiAkJFskMCAtIDVdLCBwYXRoOiAkJFskMCAtIDRdLCBwYXJhbXM6ICQkWyQwIC0gM10sIGhhc2g6ICQkWyQwIC0gMl0sIGJsb2NrUGFyYW1zOiAkJFskMCAtIDFdLCBzdHJpcDogeXkuc3RyaXBGbGFncygkJFskMCAtIDVdLCAkJFskMF0pIH07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTY6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgcGF0aDogJCRbJDAgLSA0XSwgcGFyYW1zOiAkJFskMCAtIDNdLCBoYXNoOiAkJFskMCAtIDJdLCBibG9ja1BhcmFtczogJCRbJDAgLSAxXSwgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAgLSA1XSwgJCRbJDBdKSB9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE3OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB7IHBhdGg6ICQkWyQwIC0gNF0sIHBhcmFtczogJCRbJDAgLSAzXSwgaGFzaDogJCRbJDAgLSAyXSwgYmxvY2tQYXJhbXM6ICQkWyQwIC0gMV0sIHN0cmlwOiB5eS5zdHJpcEZsYWdzKCQkWyQwIC0gNV0sICQkWyQwXSkgfTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxODpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geyBzdHJpcDogeXkuc3RyaXBGbGFncygkJFskMCAtIDFdLCAkJFskMCAtIDFdKSwgcHJvZ3JhbTogJCRbJDBdIH07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTk6XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnZlcnNlID0geXkucHJlcGFyZUJsb2NrKCQkWyQwIC0gMl0sICQkWyQwIC0gMV0sICQkWyQwXSwgJCRbJDBdLCBmYWxzZSwgdGhpcy5fJCksXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9ncmFtID0geXkucHJlcGFyZVByb2dyYW0oW2ludmVyc2VdLCAkJFskMCAtIDFdLmxvYyk7XG4gICAgICAgICAgICAgICAgICAgIHByb2dyYW0uY2hhaW5lZCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geyBzdHJpcDogJCRbJDAgLSAyXS5zdHJpcCwgcHJvZ3JhbTogcHJvZ3JhbSwgY2hhaW46IHRydWUgfTtcblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDIwOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSAkJFskMF07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjE6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgcGF0aDogJCRbJDAgLSAxXSwgc3RyaXA6IHl5LnN0cmlwRmxhZ3MoJCRbJDAgLSAyXSwgJCRbJDBdKSB9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDIyOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB5eS5wcmVwYXJlTXVzdGFjaGUoJCRbJDAgLSAzXSwgJCRbJDAgLSAyXSwgJCRbJDAgLSAxXSwgJCRbJDAgLSA0XSwgeXkuc3RyaXBGbGFncygkJFskMCAtIDRdLCAkJFskMF0pLCB0aGlzLl8kKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyMzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geXkucHJlcGFyZU11c3RhY2hlKCQkWyQwIC0gM10sICQkWyQwIC0gMl0sICQkWyQwIC0gMV0sICQkWyQwIC0gNF0sIHl5LnN0cmlwRmxhZ3MoJCRbJDAgLSA0XSwgJCRbJDBdKSwgdGhpcy5fJCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdQYXJ0aWFsU3RhdGVtZW50JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICQkWyQwIC0gM10sXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6ICQkWyQwIC0gMl0sXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNoOiAkJFskMCAtIDFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZW50OiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmlwOiB5eS5zdHJpcEZsYWdzKCQkWyQwIC0gNF0sICQkWyQwXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2M6IHl5LmxvY0luZm8odGhpcy5fJClcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI1OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB5eS5wcmVwYXJlUGFydGlhbEJsb2NrKCQkWyQwIC0gMl0sICQkWyQwIC0gMV0sICQkWyQwXSwgdGhpcy5fJCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjY6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgcGF0aDogJCRbJDAgLSAzXSwgcGFyYW1zOiAkJFskMCAtIDJdLCBoYXNoOiAkJFskMCAtIDFdLCBzdHJpcDogeXkuc3RyaXBGbGFncygkJFskMCAtIDRdLCAkJFskMF0pIH07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9ICQkWyQwXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyODpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gJCRbJDBdO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI5OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnU3ViRXhwcmVzc2lvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiAkJFskMCAtIDNdLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiAkJFskMCAtIDJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzaDogJCRbJDAgLSAxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzA6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgdHlwZTogJ0hhc2gnLCBwYWlyczogJCRbJDBdLCBsb2M6IHl5LmxvY0luZm8odGhpcy5fJCkgfTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzMTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geyB0eXBlOiAnSGFzaFBhaXInLCBrZXk6IHl5LmlkKCQkWyQwIC0gMl0pLCB2YWx1ZTogJCRbJDBdLCBsb2M6IHl5LmxvY0luZm8odGhpcy5fJCkgfTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0geXkuaWQoJCRbJDAgLSAxXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzM6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9ICQkWyQwXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gJCRbJDBdO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM1OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB7IHR5cGU6ICdTdHJpbmdMaXRlcmFsJywgdmFsdWU6ICQkWyQwXSwgb3JpZ2luYWw6ICQkWyQwXSwgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpIH07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzY6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgdHlwZTogJ051bWJlckxpdGVyYWwnLCB2YWx1ZTogTnVtYmVyKCQkWyQwXSksIG9yaWdpbmFsOiBOdW1iZXIoJCRbJDBdKSwgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpIH07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgdHlwZTogJ0Jvb2xlYW5MaXRlcmFsJywgdmFsdWU6ICQkWyQwXSA9PT0gJ3RydWUnLCBvcmlnaW5hbDogJCRbJDBdID09PSAndHJ1ZScsIGxvYzogeXkubG9jSW5mbyh0aGlzLl8kKSB9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSB7IHR5cGU6ICdVbmRlZmluZWRMaXRlcmFsJywgb3JpZ2luYWw6IHVuZGVmaW5lZCwgdmFsdWU6IHVuZGVmaW5lZCwgbG9jOiB5eS5sb2NJbmZvKHRoaXMuXyQpIH07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHsgdHlwZTogJ051bGxMaXRlcmFsJywgb3JpZ2luYWw6IG51bGwsIHZhbHVlOiBudWxsLCBsb2M6IHl5LmxvY0luZm8odGhpcy5fJCkgfTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gJCRbJDBdO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQxOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSAkJFskMF07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHl5LnByZXBhcmVQYXRoKHRydWUsICQkWyQwXSwgdGhpcy5fJCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDM6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IHl5LnByZXBhcmVQYXRoKGZhbHNlLCAkJFskMF0sIHRoaXMuXyQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ0OlxuICAgICAgICAgICAgICAgICAgICAkJFskMCAtIDJdLnB1c2goeyBwYXJ0OiB5eS5pZCgkJFskMF0pLCBvcmlnaW5hbDogJCRbJDBdLCBzZXBhcmF0b3I6ICQkWyQwIC0gMV0gfSk7dGhpcy4kID0gJCRbJDAgLSAyXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gW3sgcGFydDogeXkuaWQoJCRbJDBdKSwgb3JpZ2luYWw6ICQkWyQwXSB9XTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0NjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gW107XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICAgICQkWyQwIC0gMV0ucHVzaCgkJFskMF0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ4OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OTpcbiAgICAgICAgICAgICAgICAgICAgJCRbJDAgLSAxXS5wdXNoKCQkWyQwXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNTA6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDUxOlxuICAgICAgICAgICAgICAgICAgICAkJFskMCAtIDFdLnB1c2goJCRbJDBdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA1ODpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gW107XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNTk6XG4gICAgICAgICAgICAgICAgICAgICQkWyQwIC0gMV0ucHVzaCgkJFskMF0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDY0OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA2NTpcbiAgICAgICAgICAgICAgICAgICAgJCRbJDAgLSAxXS5wdXNoKCQkWyQwXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNzA6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDcxOlxuICAgICAgICAgICAgICAgICAgICAkJFskMCAtIDFdLnB1c2goJCRbJDBdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA3ODpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gW107XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNzk6XG4gICAgICAgICAgICAgICAgICAgICQkWyQwIC0gMV0ucHVzaCgkJFskMF0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDgyOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA4MzpcbiAgICAgICAgICAgICAgICAgICAgJCRbJDAgLSAxXS5wdXNoKCQkWyQwXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgODY6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDg3OlxuICAgICAgICAgICAgICAgICAgICAkJFskMCAtIDFdLnB1c2goJCRbJDBdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA5MDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kID0gW107XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgOTE6XG4gICAgICAgICAgICAgICAgICAgICQkWyQwIC0gMV0ucHVzaCgkJFskMF0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDk0OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLiQgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA5NTpcbiAgICAgICAgICAgICAgICAgICAgJCRbJDAgLSAxXS5wdXNoKCQkWyQwXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgOTg6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IFskJFskMF1dO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDk5OlxuICAgICAgICAgICAgICAgICAgICAkJFskMCAtIDFdLnB1c2goJCRbJDBdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMDA6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJCA9IFskJFskMF1dO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEwMTpcbiAgICAgICAgICAgICAgICAgICAgJCRbJDAgLSAxXS5wdXNoKCQkWyQwXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0YWJsZTogW3sgMzogMSwgNDogMiwgNTogWzIsIDQ2XSwgNjogMywgMTQ6IFsyLCA0Nl0sIDE1OiBbMiwgNDZdLCAxOTogWzIsIDQ2XSwgMjk6IFsyLCA0Nl0sIDM0OiBbMiwgNDZdLCA0ODogWzIsIDQ2XSwgNTE6IFsyLCA0Nl0sIDU1OiBbMiwgNDZdLCA2MDogWzIsIDQ2XSB9LCB7IDE6IFszXSB9LCB7IDU6IFsxLCA0XSB9LCB7IDU6IFsyLCAyXSwgNzogNSwgODogNiwgOTogNywgMTA6IDgsIDExOiA5LCAxMjogMTAsIDEzOiAxMSwgMTQ6IFsxLCAxMl0sIDE1OiBbMSwgMjBdLCAxNjogMTcsIDE5OiBbMSwgMjNdLCAyNDogMTUsIDI3OiAxNiwgMjk6IFsxLCAyMV0sIDM0OiBbMSwgMjJdLCAzOTogWzIsIDJdLCA0NDogWzIsIDJdLCA0NzogWzIsIDJdLCA0ODogWzEsIDEzXSwgNTE6IFsxLCAxNF0sIDU1OiBbMSwgMThdLCA1OTogMTksIDYwOiBbMSwgMjRdIH0sIHsgMTogWzIsIDFdIH0sIHsgNTogWzIsIDQ3XSwgMTQ6IFsyLCA0N10sIDE1OiBbMiwgNDddLCAxOTogWzIsIDQ3XSwgMjk6IFsyLCA0N10sIDM0OiBbMiwgNDddLCAzOTogWzIsIDQ3XSwgNDQ6IFsyLCA0N10sIDQ3OiBbMiwgNDddLCA0ODogWzIsIDQ3XSwgNTE6IFsyLCA0N10sIDU1OiBbMiwgNDddLCA2MDogWzIsIDQ3XSB9LCB7IDU6IFsyLCAzXSwgMTQ6IFsyLCAzXSwgMTU6IFsyLCAzXSwgMTk6IFsyLCAzXSwgMjk6IFsyLCAzXSwgMzQ6IFsyLCAzXSwgMzk6IFsyLCAzXSwgNDQ6IFsyLCAzXSwgNDc6IFsyLCAzXSwgNDg6IFsyLCAzXSwgNTE6IFsyLCAzXSwgNTU6IFsyLCAzXSwgNjA6IFsyLCAzXSB9LCB7IDU6IFsyLCA0XSwgMTQ6IFsyLCA0XSwgMTU6IFsyLCA0XSwgMTk6IFsyLCA0XSwgMjk6IFsyLCA0XSwgMzQ6IFsyLCA0XSwgMzk6IFsyLCA0XSwgNDQ6IFsyLCA0XSwgNDc6IFsyLCA0XSwgNDg6IFsyLCA0XSwgNTE6IFsyLCA0XSwgNTU6IFsyLCA0XSwgNjA6IFsyLCA0XSB9LCB7IDU6IFsyLCA1XSwgMTQ6IFsyLCA1XSwgMTU6IFsyLCA1XSwgMTk6IFsyLCA1XSwgMjk6IFsyLCA1XSwgMzQ6IFsyLCA1XSwgMzk6IFsyLCA1XSwgNDQ6IFsyLCA1XSwgNDc6IFsyLCA1XSwgNDg6IFsyLCA1XSwgNTE6IFsyLCA1XSwgNTU6IFsyLCA1XSwgNjA6IFsyLCA1XSB9LCB7IDU6IFsyLCA2XSwgMTQ6IFsyLCA2XSwgMTU6IFsyLCA2XSwgMTk6IFsyLCA2XSwgMjk6IFsyLCA2XSwgMzQ6IFsyLCA2XSwgMzk6IFsyLCA2XSwgNDQ6IFsyLCA2XSwgNDc6IFsyLCA2XSwgNDg6IFsyLCA2XSwgNTE6IFsyLCA2XSwgNTU6IFsyLCA2XSwgNjA6IFsyLCA2XSB9LCB7IDU6IFsyLCA3XSwgMTQ6IFsyLCA3XSwgMTU6IFsyLCA3XSwgMTk6IFsyLCA3XSwgMjk6IFsyLCA3XSwgMzQ6IFsyLCA3XSwgMzk6IFsyLCA3XSwgNDQ6IFsyLCA3XSwgNDc6IFsyLCA3XSwgNDg6IFsyLCA3XSwgNTE6IFsyLCA3XSwgNTU6IFsyLCA3XSwgNjA6IFsyLCA3XSB9LCB7IDU6IFsyLCA4XSwgMTQ6IFsyLCA4XSwgMTU6IFsyLCA4XSwgMTk6IFsyLCA4XSwgMjk6IFsyLCA4XSwgMzQ6IFsyLCA4XSwgMzk6IFsyLCA4XSwgNDQ6IFsyLCA4XSwgNDc6IFsyLCA4XSwgNDg6IFsyLCA4XSwgNTE6IFsyLCA4XSwgNTU6IFsyLCA4XSwgNjA6IFsyLCA4XSB9LCB7IDU6IFsyLCA5XSwgMTQ6IFsyLCA5XSwgMTU6IFsyLCA5XSwgMTk6IFsyLCA5XSwgMjk6IFsyLCA5XSwgMzQ6IFsyLCA5XSwgMzk6IFsyLCA5XSwgNDQ6IFsyLCA5XSwgNDc6IFsyLCA5XSwgNDg6IFsyLCA5XSwgNTE6IFsyLCA5XSwgNTU6IFsyLCA5XSwgNjA6IFsyLCA5XSB9LCB7IDIwOiAyNSwgNzI6IFsxLCAzNV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyAyMDogMzYsIDcyOiBbMSwgMzVdLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgNDogMzcsIDY6IDMsIDE0OiBbMiwgNDZdLCAxNTogWzIsIDQ2XSwgMTk6IFsyLCA0Nl0sIDI5OiBbMiwgNDZdLCAzNDogWzIsIDQ2XSwgMzk6IFsyLCA0Nl0sIDQ0OiBbMiwgNDZdLCA0NzogWzIsIDQ2XSwgNDg6IFsyLCA0Nl0sIDUxOiBbMiwgNDZdLCA1NTogWzIsIDQ2XSwgNjA6IFsyLCA0Nl0gfSwgeyA0OiAzOCwgNjogMywgMTQ6IFsyLCA0Nl0sIDE1OiBbMiwgNDZdLCAxOTogWzIsIDQ2XSwgMjk6IFsyLCA0Nl0sIDM0OiBbMiwgNDZdLCA0NDogWzIsIDQ2XSwgNDc6IFsyLCA0Nl0sIDQ4OiBbMiwgNDZdLCA1MTogWzIsIDQ2XSwgNTU6IFsyLCA0Nl0sIDYwOiBbMiwgNDZdIH0sIHsgMTU6IFsyLCA0OF0sIDE3OiAzOSwgMTg6IFsyLCA0OF0gfSwgeyAyMDogNDEsIDU2OiA0MCwgNjQ6IDQyLCA2NTogWzEsIDQzXSwgNzI6IFsxLCAzNV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyA0OiA0NCwgNjogMywgMTQ6IFsyLCA0Nl0sIDE1OiBbMiwgNDZdLCAxOTogWzIsIDQ2XSwgMjk6IFsyLCA0Nl0sIDM0OiBbMiwgNDZdLCA0NzogWzIsIDQ2XSwgNDg6IFsyLCA0Nl0sIDUxOiBbMiwgNDZdLCA1NTogWzIsIDQ2XSwgNjA6IFsyLCA0Nl0gfSwgeyA1OiBbMiwgMTBdLCAxNDogWzIsIDEwXSwgMTU6IFsyLCAxMF0sIDE4OiBbMiwgMTBdLCAxOTogWzIsIDEwXSwgMjk6IFsyLCAxMF0sIDM0OiBbMiwgMTBdLCAzOTogWzIsIDEwXSwgNDQ6IFsyLCAxMF0sIDQ3OiBbMiwgMTBdLCA0ODogWzIsIDEwXSwgNTE6IFsyLCAxMF0sIDU1OiBbMiwgMTBdLCA2MDogWzIsIDEwXSB9LCB7IDIwOiA0NSwgNzI6IFsxLCAzNV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyAyMDogNDYsIDcyOiBbMSwgMzVdLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgMjA6IDQ3LCA3MjogWzEsIDM1XSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDIwOiA0MSwgNTY6IDQ4LCA2NDogNDIsIDY1OiBbMSwgNDNdLCA3MjogWzEsIDM1XSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDMzOiBbMiwgNzhdLCA0OTogNDksIDY1OiBbMiwgNzhdLCA3MjogWzIsIDc4XSwgODA6IFsyLCA3OF0sIDgxOiBbMiwgNzhdLCA4MjogWzIsIDc4XSwgODM6IFsyLCA3OF0sIDg0OiBbMiwgNzhdLCA4NTogWzIsIDc4XSB9LCB7IDIzOiBbMiwgMzNdLCAzMzogWzIsIDMzXSwgNTQ6IFsyLCAzM10sIDY1OiBbMiwgMzNdLCA2ODogWzIsIDMzXSwgNzI6IFsyLCAzM10sIDc1OiBbMiwgMzNdLCA4MDogWzIsIDMzXSwgODE6IFsyLCAzM10sIDgyOiBbMiwgMzNdLCA4MzogWzIsIDMzXSwgODQ6IFsyLCAzM10sIDg1OiBbMiwgMzNdIH0sIHsgMjM6IFsyLCAzNF0sIDMzOiBbMiwgMzRdLCA1NDogWzIsIDM0XSwgNjU6IFsyLCAzNF0sIDY4OiBbMiwgMzRdLCA3MjogWzIsIDM0XSwgNzU6IFsyLCAzNF0sIDgwOiBbMiwgMzRdLCA4MTogWzIsIDM0XSwgODI6IFsyLCAzNF0sIDgzOiBbMiwgMzRdLCA4NDogWzIsIDM0XSwgODU6IFsyLCAzNF0gfSwgeyAyMzogWzIsIDM1XSwgMzM6IFsyLCAzNV0sIDU0OiBbMiwgMzVdLCA2NTogWzIsIDM1XSwgNjg6IFsyLCAzNV0sIDcyOiBbMiwgMzVdLCA3NTogWzIsIDM1XSwgODA6IFsyLCAzNV0sIDgxOiBbMiwgMzVdLCA4MjogWzIsIDM1XSwgODM6IFsyLCAzNV0sIDg0OiBbMiwgMzVdLCA4NTogWzIsIDM1XSB9LCB7IDIzOiBbMiwgMzZdLCAzMzogWzIsIDM2XSwgNTQ6IFsyLCAzNl0sIDY1OiBbMiwgMzZdLCA2ODogWzIsIDM2XSwgNzI6IFsyLCAzNl0sIDc1OiBbMiwgMzZdLCA4MDogWzIsIDM2XSwgODE6IFsyLCAzNl0sIDgyOiBbMiwgMzZdLCA4MzogWzIsIDM2XSwgODQ6IFsyLCAzNl0sIDg1OiBbMiwgMzZdIH0sIHsgMjM6IFsyLCAzN10sIDMzOiBbMiwgMzddLCA1NDogWzIsIDM3XSwgNjU6IFsyLCAzN10sIDY4OiBbMiwgMzddLCA3MjogWzIsIDM3XSwgNzU6IFsyLCAzN10sIDgwOiBbMiwgMzddLCA4MTogWzIsIDM3XSwgODI6IFsyLCAzN10sIDgzOiBbMiwgMzddLCA4NDogWzIsIDM3XSwgODU6IFsyLCAzN10gfSwgeyAyMzogWzIsIDM4XSwgMzM6IFsyLCAzOF0sIDU0OiBbMiwgMzhdLCA2NTogWzIsIDM4XSwgNjg6IFsyLCAzOF0sIDcyOiBbMiwgMzhdLCA3NTogWzIsIDM4XSwgODA6IFsyLCAzOF0sIDgxOiBbMiwgMzhdLCA4MjogWzIsIDM4XSwgODM6IFsyLCAzOF0sIDg0OiBbMiwgMzhdLCA4NTogWzIsIDM4XSB9LCB7IDIzOiBbMiwgMzldLCAzMzogWzIsIDM5XSwgNTQ6IFsyLCAzOV0sIDY1OiBbMiwgMzldLCA2ODogWzIsIDM5XSwgNzI6IFsyLCAzOV0sIDc1OiBbMiwgMzldLCA4MDogWzIsIDM5XSwgODE6IFsyLCAzOV0sIDgyOiBbMiwgMzldLCA4MzogWzIsIDM5XSwgODQ6IFsyLCAzOV0sIDg1OiBbMiwgMzldIH0sIHsgMjM6IFsyLCA0M10sIDMzOiBbMiwgNDNdLCA1NDogWzIsIDQzXSwgNjU6IFsyLCA0M10sIDY4OiBbMiwgNDNdLCA3MjogWzIsIDQzXSwgNzU6IFsyLCA0M10sIDgwOiBbMiwgNDNdLCA4MTogWzIsIDQzXSwgODI6IFsyLCA0M10sIDgzOiBbMiwgNDNdLCA4NDogWzIsIDQzXSwgODU6IFsyLCA0M10sIDg3OiBbMSwgNTBdIH0sIHsgNzI6IFsxLCAzNV0sIDg2OiA1MSB9LCB7IDIzOiBbMiwgNDVdLCAzMzogWzIsIDQ1XSwgNTQ6IFsyLCA0NV0sIDY1OiBbMiwgNDVdLCA2ODogWzIsIDQ1XSwgNzI6IFsyLCA0NV0sIDc1OiBbMiwgNDVdLCA4MDogWzIsIDQ1XSwgODE6IFsyLCA0NV0sIDgyOiBbMiwgNDVdLCA4MzogWzIsIDQ1XSwgODQ6IFsyLCA0NV0sIDg1OiBbMiwgNDVdLCA4NzogWzIsIDQ1XSB9LCB7IDUyOiA1MiwgNTQ6IFsyLCA4Ml0sIDY1OiBbMiwgODJdLCA3MjogWzIsIDgyXSwgODA6IFsyLCA4Ml0sIDgxOiBbMiwgODJdLCA4MjogWzIsIDgyXSwgODM6IFsyLCA4Ml0sIDg0OiBbMiwgODJdLCA4NTogWzIsIDgyXSB9LCB7IDI1OiA1MywgMzg6IDU1LCAzOTogWzEsIDU3XSwgNDM6IDU2LCA0NDogWzEsIDU4XSwgNDU6IDU0LCA0NzogWzIsIDU0XSB9LCB7IDI4OiA1OSwgNDM6IDYwLCA0NDogWzEsIDU4XSwgNDc6IFsyLCA1Nl0gfSwgeyAxMzogNjIsIDE1OiBbMSwgMjBdLCAxODogWzEsIDYxXSB9LCB7IDMzOiBbMiwgODZdLCA1NzogNjMsIDY1OiBbMiwgODZdLCA3MjogWzIsIDg2XSwgODA6IFsyLCA4Nl0sIDgxOiBbMiwgODZdLCA4MjogWzIsIDg2XSwgODM6IFsyLCA4Nl0sIDg0OiBbMiwgODZdLCA4NTogWzIsIDg2XSB9LCB7IDMzOiBbMiwgNDBdLCA2NTogWzIsIDQwXSwgNzI6IFsyLCA0MF0sIDgwOiBbMiwgNDBdLCA4MTogWzIsIDQwXSwgODI6IFsyLCA0MF0sIDgzOiBbMiwgNDBdLCA4NDogWzIsIDQwXSwgODU6IFsyLCA0MF0gfSwgeyAzMzogWzIsIDQxXSwgNjU6IFsyLCA0MV0sIDcyOiBbMiwgNDFdLCA4MDogWzIsIDQxXSwgODE6IFsyLCA0MV0sIDgyOiBbMiwgNDFdLCA4MzogWzIsIDQxXSwgODQ6IFsyLCA0MV0sIDg1OiBbMiwgNDFdIH0sIHsgMjA6IDY0LCA3MjogWzEsIDM1XSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDI2OiA2NSwgNDc6IFsxLCA2Nl0gfSwgeyAzMDogNjcsIDMzOiBbMiwgNThdLCA2NTogWzIsIDU4XSwgNzI6IFsyLCA1OF0sIDc1OiBbMiwgNThdLCA4MDogWzIsIDU4XSwgODE6IFsyLCA1OF0sIDgyOiBbMiwgNThdLCA4MzogWzIsIDU4XSwgODQ6IFsyLCA1OF0sIDg1OiBbMiwgNThdIH0sIHsgMzM6IFsyLCA2NF0sIDM1OiA2OCwgNjU6IFsyLCA2NF0sIDcyOiBbMiwgNjRdLCA3NTogWzIsIDY0XSwgODA6IFsyLCA2NF0sIDgxOiBbMiwgNjRdLCA4MjogWzIsIDY0XSwgODM6IFsyLCA2NF0sIDg0OiBbMiwgNjRdLCA4NTogWzIsIDY0XSB9LCB7IDIxOiA2OSwgMjM6IFsyLCA1MF0sIDY1OiBbMiwgNTBdLCA3MjogWzIsIDUwXSwgODA6IFsyLCA1MF0sIDgxOiBbMiwgNTBdLCA4MjogWzIsIDUwXSwgODM6IFsyLCA1MF0sIDg0OiBbMiwgNTBdLCA4NTogWzIsIDUwXSB9LCB7IDMzOiBbMiwgOTBdLCA2MTogNzAsIDY1OiBbMiwgOTBdLCA3MjogWzIsIDkwXSwgODA6IFsyLCA5MF0sIDgxOiBbMiwgOTBdLCA4MjogWzIsIDkwXSwgODM6IFsyLCA5MF0sIDg0OiBbMiwgOTBdLCA4NTogWzIsIDkwXSB9LCB7IDIwOiA3NCwgMzM6IFsyLCA4MF0sIDUwOiA3MSwgNjM6IDcyLCA2NDogNzUsIDY1OiBbMSwgNDNdLCA2OTogNzMsIDcwOiA3NiwgNzE6IDc3LCA3MjogWzEsIDc4XSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDcyOiBbMSwgNzldIH0sIHsgMjM6IFsyLCA0Ml0sIDMzOiBbMiwgNDJdLCA1NDogWzIsIDQyXSwgNjU6IFsyLCA0Ml0sIDY4OiBbMiwgNDJdLCA3MjogWzIsIDQyXSwgNzU6IFsyLCA0Ml0sIDgwOiBbMiwgNDJdLCA4MTogWzIsIDQyXSwgODI6IFsyLCA0Ml0sIDgzOiBbMiwgNDJdLCA4NDogWzIsIDQyXSwgODU6IFsyLCA0Ml0sIDg3OiBbMSwgNTBdIH0sIHsgMjA6IDc0LCA1MzogODAsIDU0OiBbMiwgODRdLCA2MzogODEsIDY0OiA3NSwgNjU6IFsxLCA0M10sIDY5OiA4MiwgNzA6IDc2LCA3MTogNzcsIDcyOiBbMSwgNzhdLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgMjY6IDgzLCA0NzogWzEsIDY2XSB9LCB7IDQ3OiBbMiwgNTVdIH0sIHsgNDogODQsIDY6IDMsIDE0OiBbMiwgNDZdLCAxNTogWzIsIDQ2XSwgMTk6IFsyLCA0Nl0sIDI5OiBbMiwgNDZdLCAzNDogWzIsIDQ2XSwgMzk6IFsyLCA0Nl0sIDQ0OiBbMiwgNDZdLCA0NzogWzIsIDQ2XSwgNDg6IFsyLCA0Nl0sIDUxOiBbMiwgNDZdLCA1NTogWzIsIDQ2XSwgNjA6IFsyLCA0Nl0gfSwgeyA0NzogWzIsIDIwXSB9LCB7IDIwOiA4NSwgNzI6IFsxLCAzNV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyA0OiA4NiwgNjogMywgMTQ6IFsyLCA0Nl0sIDE1OiBbMiwgNDZdLCAxOTogWzIsIDQ2XSwgMjk6IFsyLCA0Nl0sIDM0OiBbMiwgNDZdLCA0NzogWzIsIDQ2XSwgNDg6IFsyLCA0Nl0sIDUxOiBbMiwgNDZdLCA1NTogWzIsIDQ2XSwgNjA6IFsyLCA0Nl0gfSwgeyAyNjogODcsIDQ3OiBbMSwgNjZdIH0sIHsgNDc6IFsyLCA1N10gfSwgeyA1OiBbMiwgMTFdLCAxNDogWzIsIDExXSwgMTU6IFsyLCAxMV0sIDE5OiBbMiwgMTFdLCAyOTogWzIsIDExXSwgMzQ6IFsyLCAxMV0sIDM5OiBbMiwgMTFdLCA0NDogWzIsIDExXSwgNDc6IFsyLCAxMV0sIDQ4OiBbMiwgMTFdLCA1MTogWzIsIDExXSwgNTU6IFsyLCAxMV0sIDYwOiBbMiwgMTFdIH0sIHsgMTU6IFsyLCA0OV0sIDE4OiBbMiwgNDldIH0sIHsgMjA6IDc0LCAzMzogWzIsIDg4XSwgNTg6IDg4LCA2MzogODksIDY0OiA3NSwgNjU6IFsxLCA0M10sIDY5OiA5MCwgNzA6IDc2LCA3MTogNzcsIDcyOiBbMSwgNzhdLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgNjU6IFsyLCA5NF0sIDY2OiA5MSwgNjg6IFsyLCA5NF0sIDcyOiBbMiwgOTRdLCA4MDogWzIsIDk0XSwgODE6IFsyLCA5NF0sIDgyOiBbMiwgOTRdLCA4MzogWzIsIDk0XSwgODQ6IFsyLCA5NF0sIDg1OiBbMiwgOTRdIH0sIHsgNTogWzIsIDI1XSwgMTQ6IFsyLCAyNV0sIDE1OiBbMiwgMjVdLCAxOTogWzIsIDI1XSwgMjk6IFsyLCAyNV0sIDM0OiBbMiwgMjVdLCAzOTogWzIsIDI1XSwgNDQ6IFsyLCAyNV0sIDQ3OiBbMiwgMjVdLCA0ODogWzIsIDI1XSwgNTE6IFsyLCAyNV0sIDU1OiBbMiwgMjVdLCA2MDogWzIsIDI1XSB9LCB7IDIwOiA5MiwgNzI6IFsxLCAzNV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyAyMDogNzQsIDMxOiA5MywgMzM6IFsyLCA2MF0sIDYzOiA5NCwgNjQ6IDc1LCA2NTogWzEsIDQzXSwgNjk6IDk1LCA3MDogNzYsIDcxOiA3NywgNzI6IFsxLCA3OF0sIDc1OiBbMiwgNjBdLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgMjA6IDc0LCAzMzogWzIsIDY2XSwgMzY6IDk2LCA2MzogOTcsIDY0OiA3NSwgNjU6IFsxLCA0M10sIDY5OiA5OCwgNzA6IDc2LCA3MTogNzcsIDcyOiBbMSwgNzhdLCA3NTogWzIsIDY2XSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDIwOiA3NCwgMjI6IDk5LCAyMzogWzIsIDUyXSwgNjM6IDEwMCwgNjQ6IDc1LCA2NTogWzEsIDQzXSwgNjk6IDEwMSwgNzA6IDc2LCA3MTogNzcsIDcyOiBbMSwgNzhdLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgMjA6IDc0LCAzMzogWzIsIDkyXSwgNjI6IDEwMiwgNjM6IDEwMywgNjQ6IDc1LCA2NTogWzEsIDQzXSwgNjk6IDEwNCwgNzA6IDc2LCA3MTogNzcsIDcyOiBbMSwgNzhdLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgMzM6IFsxLCAxMDVdIH0sIHsgMzM6IFsyLCA3OV0sIDY1OiBbMiwgNzldLCA3MjogWzIsIDc5XSwgODA6IFsyLCA3OV0sIDgxOiBbMiwgNzldLCA4MjogWzIsIDc5XSwgODM6IFsyLCA3OV0sIDg0OiBbMiwgNzldLCA4NTogWzIsIDc5XSB9LCB7IDMzOiBbMiwgODFdIH0sIHsgMjM6IFsyLCAyN10sIDMzOiBbMiwgMjddLCA1NDogWzIsIDI3XSwgNjU6IFsyLCAyN10sIDY4OiBbMiwgMjddLCA3MjogWzIsIDI3XSwgNzU6IFsyLCAyN10sIDgwOiBbMiwgMjddLCA4MTogWzIsIDI3XSwgODI6IFsyLCAyN10sIDgzOiBbMiwgMjddLCA4NDogWzIsIDI3XSwgODU6IFsyLCAyN10gfSwgeyAyMzogWzIsIDI4XSwgMzM6IFsyLCAyOF0sIDU0OiBbMiwgMjhdLCA2NTogWzIsIDI4XSwgNjg6IFsyLCAyOF0sIDcyOiBbMiwgMjhdLCA3NTogWzIsIDI4XSwgODA6IFsyLCAyOF0sIDgxOiBbMiwgMjhdLCA4MjogWzIsIDI4XSwgODM6IFsyLCAyOF0sIDg0OiBbMiwgMjhdLCA4NTogWzIsIDI4XSB9LCB7IDIzOiBbMiwgMzBdLCAzMzogWzIsIDMwXSwgNTQ6IFsyLCAzMF0sIDY4OiBbMiwgMzBdLCA3MTogMTA2LCA3MjogWzEsIDEwN10sIDc1OiBbMiwgMzBdIH0sIHsgMjM6IFsyLCA5OF0sIDMzOiBbMiwgOThdLCA1NDogWzIsIDk4XSwgNjg6IFsyLCA5OF0sIDcyOiBbMiwgOThdLCA3NTogWzIsIDk4XSB9LCB7IDIzOiBbMiwgNDVdLCAzMzogWzIsIDQ1XSwgNTQ6IFsyLCA0NV0sIDY1OiBbMiwgNDVdLCA2ODogWzIsIDQ1XSwgNzI6IFsyLCA0NV0sIDczOiBbMSwgMTA4XSwgNzU6IFsyLCA0NV0sIDgwOiBbMiwgNDVdLCA4MTogWzIsIDQ1XSwgODI6IFsyLCA0NV0sIDgzOiBbMiwgNDVdLCA4NDogWzIsIDQ1XSwgODU6IFsyLCA0NV0sIDg3OiBbMiwgNDVdIH0sIHsgMjM6IFsyLCA0NF0sIDMzOiBbMiwgNDRdLCA1NDogWzIsIDQ0XSwgNjU6IFsyLCA0NF0sIDY4OiBbMiwgNDRdLCA3MjogWzIsIDQ0XSwgNzU6IFsyLCA0NF0sIDgwOiBbMiwgNDRdLCA4MTogWzIsIDQ0XSwgODI6IFsyLCA0NF0sIDgzOiBbMiwgNDRdLCA4NDogWzIsIDQ0XSwgODU6IFsyLCA0NF0sIDg3OiBbMiwgNDRdIH0sIHsgNTQ6IFsxLCAxMDldIH0sIHsgNTQ6IFsyLCA4M10sIDY1OiBbMiwgODNdLCA3MjogWzIsIDgzXSwgODA6IFsyLCA4M10sIDgxOiBbMiwgODNdLCA4MjogWzIsIDgzXSwgODM6IFsyLCA4M10sIDg0OiBbMiwgODNdLCA4NTogWzIsIDgzXSB9LCB7IDU0OiBbMiwgODVdIH0sIHsgNTogWzIsIDEzXSwgMTQ6IFsyLCAxM10sIDE1OiBbMiwgMTNdLCAxOTogWzIsIDEzXSwgMjk6IFsyLCAxM10sIDM0OiBbMiwgMTNdLCAzOTogWzIsIDEzXSwgNDQ6IFsyLCAxM10sIDQ3OiBbMiwgMTNdLCA0ODogWzIsIDEzXSwgNTE6IFsyLCAxM10sIDU1OiBbMiwgMTNdLCA2MDogWzIsIDEzXSB9LCB7IDM4OiA1NSwgMzk6IFsxLCA1N10sIDQzOiA1NiwgNDQ6IFsxLCA1OF0sIDQ1OiAxMTEsIDQ2OiAxMTAsIDQ3OiBbMiwgNzZdIH0sIHsgMzM6IFsyLCA3MF0sIDQwOiAxMTIsIDY1OiBbMiwgNzBdLCA3MjogWzIsIDcwXSwgNzU6IFsyLCA3MF0sIDgwOiBbMiwgNzBdLCA4MTogWzIsIDcwXSwgODI6IFsyLCA3MF0sIDgzOiBbMiwgNzBdLCA4NDogWzIsIDcwXSwgODU6IFsyLCA3MF0gfSwgeyA0NzogWzIsIDE4XSB9LCB7IDU6IFsyLCAxNF0sIDE0OiBbMiwgMTRdLCAxNTogWzIsIDE0XSwgMTk6IFsyLCAxNF0sIDI5OiBbMiwgMTRdLCAzNDogWzIsIDE0XSwgMzk6IFsyLCAxNF0sIDQ0OiBbMiwgMTRdLCA0NzogWzIsIDE0XSwgNDg6IFsyLCAxNF0sIDUxOiBbMiwgMTRdLCA1NTogWzIsIDE0XSwgNjA6IFsyLCAxNF0gfSwgeyAzMzogWzEsIDExM10gfSwgeyAzMzogWzIsIDg3XSwgNjU6IFsyLCA4N10sIDcyOiBbMiwgODddLCA4MDogWzIsIDg3XSwgODE6IFsyLCA4N10sIDgyOiBbMiwgODddLCA4MzogWzIsIDg3XSwgODQ6IFsyLCA4N10sIDg1OiBbMiwgODddIH0sIHsgMzM6IFsyLCA4OV0gfSwgeyAyMDogNzQsIDYzOiAxMTUsIDY0OiA3NSwgNjU6IFsxLCA0M10sIDY3OiAxMTQsIDY4OiBbMiwgOTZdLCA2OTogMTE2LCA3MDogNzYsIDcxOiA3NywgNzI6IFsxLCA3OF0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyAzMzogWzEsIDExN10gfSwgeyAzMjogMTE4LCAzMzogWzIsIDYyXSwgNzQ6IDExOSwgNzU6IFsxLCAxMjBdIH0sIHsgMzM6IFsyLCA1OV0sIDY1OiBbMiwgNTldLCA3MjogWzIsIDU5XSwgNzU6IFsyLCA1OV0sIDgwOiBbMiwgNTldLCA4MTogWzIsIDU5XSwgODI6IFsyLCA1OV0sIDgzOiBbMiwgNTldLCA4NDogWzIsIDU5XSwgODU6IFsyLCA1OV0gfSwgeyAzMzogWzIsIDYxXSwgNzU6IFsyLCA2MV0gfSwgeyAzMzogWzIsIDY4XSwgMzc6IDEyMSwgNzQ6IDEyMiwgNzU6IFsxLCAxMjBdIH0sIHsgMzM6IFsyLCA2NV0sIDY1OiBbMiwgNjVdLCA3MjogWzIsIDY1XSwgNzU6IFsyLCA2NV0sIDgwOiBbMiwgNjVdLCA4MTogWzIsIDY1XSwgODI6IFsyLCA2NV0sIDgzOiBbMiwgNjVdLCA4NDogWzIsIDY1XSwgODU6IFsyLCA2NV0gfSwgeyAzMzogWzIsIDY3XSwgNzU6IFsyLCA2N10gfSwgeyAyMzogWzEsIDEyM10gfSwgeyAyMzogWzIsIDUxXSwgNjU6IFsyLCA1MV0sIDcyOiBbMiwgNTFdLCA4MDogWzIsIDUxXSwgODE6IFsyLCA1MV0sIDgyOiBbMiwgNTFdLCA4MzogWzIsIDUxXSwgODQ6IFsyLCA1MV0sIDg1OiBbMiwgNTFdIH0sIHsgMjM6IFsyLCA1M10gfSwgeyAzMzogWzEsIDEyNF0gfSwgeyAzMzogWzIsIDkxXSwgNjU6IFsyLCA5MV0sIDcyOiBbMiwgOTFdLCA4MDogWzIsIDkxXSwgODE6IFsyLCA5MV0sIDgyOiBbMiwgOTFdLCA4MzogWzIsIDkxXSwgODQ6IFsyLCA5MV0sIDg1OiBbMiwgOTFdIH0sIHsgMzM6IFsyLCA5M10gfSwgeyA1OiBbMiwgMjJdLCAxNDogWzIsIDIyXSwgMTU6IFsyLCAyMl0sIDE5OiBbMiwgMjJdLCAyOTogWzIsIDIyXSwgMzQ6IFsyLCAyMl0sIDM5OiBbMiwgMjJdLCA0NDogWzIsIDIyXSwgNDc6IFsyLCAyMl0sIDQ4OiBbMiwgMjJdLCA1MTogWzIsIDIyXSwgNTU6IFsyLCAyMl0sIDYwOiBbMiwgMjJdIH0sIHsgMjM6IFsyLCA5OV0sIDMzOiBbMiwgOTldLCA1NDogWzIsIDk5XSwgNjg6IFsyLCA5OV0sIDcyOiBbMiwgOTldLCA3NTogWzIsIDk5XSB9LCB7IDczOiBbMSwgMTA4XSB9LCB7IDIwOiA3NCwgNjM6IDEyNSwgNjQ6IDc1LCA2NTogWzEsIDQzXSwgNzI6IFsxLCAzNV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyA1OiBbMiwgMjNdLCAxNDogWzIsIDIzXSwgMTU6IFsyLCAyM10sIDE5OiBbMiwgMjNdLCAyOTogWzIsIDIzXSwgMzQ6IFsyLCAyM10sIDM5OiBbMiwgMjNdLCA0NDogWzIsIDIzXSwgNDc6IFsyLCAyM10sIDQ4OiBbMiwgMjNdLCA1MTogWzIsIDIzXSwgNTU6IFsyLCAyM10sIDYwOiBbMiwgMjNdIH0sIHsgNDc6IFsyLCAxOV0gfSwgeyA0NzogWzIsIDc3XSB9LCB7IDIwOiA3NCwgMzM6IFsyLCA3Ml0sIDQxOiAxMjYsIDYzOiAxMjcsIDY0OiA3NSwgNjU6IFsxLCA0M10sIDY5OiAxMjgsIDcwOiA3NiwgNzE6IDc3LCA3MjogWzEsIDc4XSwgNzU6IFsyLCA3Ml0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyA1OiBbMiwgMjRdLCAxNDogWzIsIDI0XSwgMTU6IFsyLCAyNF0sIDE5OiBbMiwgMjRdLCAyOTogWzIsIDI0XSwgMzQ6IFsyLCAyNF0sIDM5OiBbMiwgMjRdLCA0NDogWzIsIDI0XSwgNDc6IFsyLCAyNF0sIDQ4OiBbMiwgMjRdLCA1MTogWzIsIDI0XSwgNTU6IFsyLCAyNF0sIDYwOiBbMiwgMjRdIH0sIHsgNjg6IFsxLCAxMjldIH0sIHsgNjU6IFsyLCA5NV0sIDY4OiBbMiwgOTVdLCA3MjogWzIsIDk1XSwgODA6IFsyLCA5NV0sIDgxOiBbMiwgOTVdLCA4MjogWzIsIDk1XSwgODM6IFsyLCA5NV0sIDg0OiBbMiwgOTVdLCA4NTogWzIsIDk1XSB9LCB7IDY4OiBbMiwgOTddIH0sIHsgNTogWzIsIDIxXSwgMTQ6IFsyLCAyMV0sIDE1OiBbMiwgMjFdLCAxOTogWzIsIDIxXSwgMjk6IFsyLCAyMV0sIDM0OiBbMiwgMjFdLCAzOTogWzIsIDIxXSwgNDQ6IFsyLCAyMV0sIDQ3OiBbMiwgMjFdLCA0ODogWzIsIDIxXSwgNTE6IFsyLCAyMV0sIDU1OiBbMiwgMjFdLCA2MDogWzIsIDIxXSB9LCB7IDMzOiBbMSwgMTMwXSB9LCB7IDMzOiBbMiwgNjNdIH0sIHsgNzI6IFsxLCAxMzJdLCA3NjogMTMxIH0sIHsgMzM6IFsxLCAxMzNdIH0sIHsgMzM6IFsyLCA2OV0gfSwgeyAxNTogWzIsIDEyXSwgMTg6IFsyLCAxMl0gfSwgeyAxNDogWzIsIDI2XSwgMTU6IFsyLCAyNl0sIDE5OiBbMiwgMjZdLCAyOTogWzIsIDI2XSwgMzQ6IFsyLCAyNl0sIDQ3OiBbMiwgMjZdLCA0ODogWzIsIDI2XSwgNTE6IFsyLCAyNl0sIDU1OiBbMiwgMjZdLCA2MDogWzIsIDI2XSB9LCB7IDIzOiBbMiwgMzFdLCAzMzogWzIsIDMxXSwgNTQ6IFsyLCAzMV0sIDY4OiBbMiwgMzFdLCA3MjogWzIsIDMxXSwgNzU6IFsyLCAzMV0gfSwgeyAzMzogWzIsIDc0XSwgNDI6IDEzNCwgNzQ6IDEzNSwgNzU6IFsxLCAxMjBdIH0sIHsgMzM6IFsyLCA3MV0sIDY1OiBbMiwgNzFdLCA3MjogWzIsIDcxXSwgNzU6IFsyLCA3MV0sIDgwOiBbMiwgNzFdLCA4MTogWzIsIDcxXSwgODI6IFsyLCA3MV0sIDgzOiBbMiwgNzFdLCA4NDogWzIsIDcxXSwgODU6IFsyLCA3MV0gfSwgeyAzMzogWzIsIDczXSwgNzU6IFsyLCA3M10gfSwgeyAyMzogWzIsIDI5XSwgMzM6IFsyLCAyOV0sIDU0OiBbMiwgMjldLCA2NTogWzIsIDI5XSwgNjg6IFsyLCAyOV0sIDcyOiBbMiwgMjldLCA3NTogWzIsIDI5XSwgODA6IFsyLCAyOV0sIDgxOiBbMiwgMjldLCA4MjogWzIsIDI5XSwgODM6IFsyLCAyOV0sIDg0OiBbMiwgMjldLCA4NTogWzIsIDI5XSB9LCB7IDE0OiBbMiwgMTVdLCAxNTogWzIsIDE1XSwgMTk6IFsyLCAxNV0sIDI5OiBbMiwgMTVdLCAzNDogWzIsIDE1XSwgMzk6IFsyLCAxNV0sIDQ0OiBbMiwgMTVdLCA0NzogWzIsIDE1XSwgNDg6IFsyLCAxNV0sIDUxOiBbMiwgMTVdLCA1NTogWzIsIDE1XSwgNjA6IFsyLCAxNV0gfSwgeyA3MjogWzEsIDEzN10sIDc3OiBbMSwgMTM2XSB9LCB7IDcyOiBbMiwgMTAwXSwgNzc6IFsyLCAxMDBdIH0sIHsgMTQ6IFsyLCAxNl0sIDE1OiBbMiwgMTZdLCAxOTogWzIsIDE2XSwgMjk6IFsyLCAxNl0sIDM0OiBbMiwgMTZdLCA0NDogWzIsIDE2XSwgNDc6IFsyLCAxNl0sIDQ4OiBbMiwgMTZdLCA1MTogWzIsIDE2XSwgNTU6IFsyLCAxNl0sIDYwOiBbMiwgMTZdIH0sIHsgMzM6IFsxLCAxMzhdIH0sIHsgMzM6IFsyLCA3NV0gfSwgeyAzMzogWzIsIDMyXSB9LCB7IDcyOiBbMiwgMTAxXSwgNzc6IFsyLCAxMDFdIH0sIHsgMTQ6IFsyLCAxN10sIDE1OiBbMiwgMTddLCAxOTogWzIsIDE3XSwgMjk6IFsyLCAxN10sIDM0OiBbMiwgMTddLCAzOTogWzIsIDE3XSwgNDQ6IFsyLCAxN10sIDQ3OiBbMiwgMTddLCA0ODogWzIsIDE3XSwgNTE6IFsyLCAxN10sIDU1OiBbMiwgMTddLCA2MDogWzIsIDE3XSB9XSxcbiAgICAgICAgZGVmYXVsdEFjdGlvbnM6IHsgNDogWzIsIDFdLCA1NDogWzIsIDU1XSwgNTY6IFsyLCAyMF0sIDYwOiBbMiwgNTddLCA3MzogWzIsIDgxXSwgODI6IFsyLCA4NV0sIDg2OiBbMiwgMThdLCA5MDogWzIsIDg5XSwgMTAxOiBbMiwgNTNdLCAxMDQ6IFsyLCA5M10sIDExMDogWzIsIDE5XSwgMTExOiBbMiwgNzddLCAxMTY6IFsyLCA5N10sIDExOTogWzIsIDYzXSwgMTIyOiBbMiwgNjldLCAxMzU6IFsyLCA3NV0sIDEzNjogWzIsIDMyXSB9LFxuICAgICAgICBwYXJzZUVycm9yOiBmdW5jdGlvbiBwYXJzZUVycm9yKHN0ciwgaGFzaCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHN0cik7XG4gICAgICAgIH0sXG4gICAgICAgIHBhcnNlOiBmdW5jdGlvbiBwYXJzZShpbnB1dCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICAgICAgICAgIHN0YWNrID0gWzBdLFxuICAgICAgICAgICAgICAgIHZzdGFjayA9IFtudWxsXSxcbiAgICAgICAgICAgICAgICBsc3RhY2sgPSBbXSxcbiAgICAgICAgICAgICAgICB0YWJsZSA9IHRoaXMudGFibGUsXG4gICAgICAgICAgICAgICAgeXl0ZXh0ID0gXCJcIixcbiAgICAgICAgICAgICAgICB5eWxpbmVubyA9IDAsXG4gICAgICAgICAgICAgICAgeXlsZW5nID0gMCxcbiAgICAgICAgICAgICAgICByZWNvdmVyaW5nID0gMCxcbiAgICAgICAgICAgICAgICBURVJST1IgPSAyLFxuICAgICAgICAgICAgICAgIEVPRiA9IDE7XG4gICAgICAgICAgICB0aGlzLmxleGVyLnNldElucHV0KGlucHV0KTtcbiAgICAgICAgICAgIHRoaXMubGV4ZXIueXkgPSB0aGlzLnl5O1xuICAgICAgICAgICAgdGhpcy55eS5sZXhlciA9IHRoaXMubGV4ZXI7XG4gICAgICAgICAgICB0aGlzLnl5LnBhcnNlciA9IHRoaXM7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMubGV4ZXIueXlsbG9jID09IFwidW5kZWZpbmVkXCIpIHRoaXMubGV4ZXIueXlsbG9jID0ge307XG4gICAgICAgICAgICB2YXIgeXlsb2MgPSB0aGlzLmxleGVyLnl5bGxvYztcbiAgICAgICAgICAgIGxzdGFjay5wdXNoKHl5bG9jKTtcbiAgICAgICAgICAgIHZhciByYW5nZXMgPSB0aGlzLmxleGVyLm9wdGlvbnMgJiYgdGhpcy5sZXhlci5vcHRpb25zLnJhbmdlcztcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy55eS5wYXJzZUVycm9yID09PSBcImZ1bmN0aW9uXCIpIHRoaXMucGFyc2VFcnJvciA9IHRoaXMueXkucGFyc2VFcnJvcjtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBvcFN0YWNrKG4pIHtcbiAgICAgICAgICAgICAgICBzdGFjay5sZW5ndGggPSBzdGFjay5sZW5ndGggLSAyICogbjtcbiAgICAgICAgICAgICAgICB2c3RhY2subGVuZ3RoID0gdnN0YWNrLmxlbmd0aCAtIG47XG4gICAgICAgICAgICAgICAgbHN0YWNrLmxlbmd0aCA9IGxzdGFjay5sZW5ndGggLSBuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbGV4KCkge1xuICAgICAgICAgICAgICAgIHZhciB0b2tlbjtcbiAgICAgICAgICAgICAgICB0b2tlbiA9IHNlbGYubGV4ZXIubGV4KCkgfHwgMTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRva2VuICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuID0gc2VsZi5zeW1ib2xzX1t0b2tlbl0gfHwgdG9rZW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzeW1ib2wsXG4gICAgICAgICAgICAgICAgcHJlRXJyb3JTeW1ib2wsXG4gICAgICAgICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgcixcbiAgICAgICAgICAgICAgICB5eXZhbCA9IHt9LFxuICAgICAgICAgICAgICAgIHAsXG4gICAgICAgICAgICAgICAgbGVuLFxuICAgICAgICAgICAgICAgIG5ld1N0YXRlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkO1xuICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlZmF1bHRBY3Rpb25zW3N0YXRlXSkge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSB0aGlzLmRlZmF1bHRBY3Rpb25zW3N0YXRlXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3ltYm9sID09PSBudWxsIHx8IHR5cGVvZiBzeW1ib2wgPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ltYm9sID0gbGV4KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gdGFibGVbc3RhdGVdICYmIHRhYmxlW3N0YXRlXVtzeW1ib2xdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFjdGlvbiA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhYWN0aW9uLmxlbmd0aCB8fCAhYWN0aW9uWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlcnJTdHIgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlY292ZXJpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHAgaW4gdGFibGVbc3RhdGVdKSBpZiAodGhpcy50ZXJtaW5hbHNfW3BdICYmIHAgPiAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0ZWQucHVzaChcIidcIiArIHRoaXMudGVybWluYWxzX1twXSArIFwiJ1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmxleGVyLnNob3dQb3NpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVyclN0ciA9IFwiUGFyc2UgZXJyb3Igb24gbGluZSBcIiArICh5eWxpbmVubyArIDEpICsgXCI6XFxuXCIgKyB0aGlzLmxleGVyLnNob3dQb3NpdGlvbigpICsgXCJcXG5FeHBlY3RpbmcgXCIgKyBleHBlY3RlZC5qb2luKFwiLCBcIikgKyBcIiwgZ290ICdcIiArICh0aGlzLnRlcm1pbmFsc19bc3ltYm9sXSB8fCBzeW1ib2wpICsgXCInXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVyclN0ciA9IFwiUGFyc2UgZXJyb3Igb24gbGluZSBcIiArICh5eWxpbmVubyArIDEpICsgXCI6IFVuZXhwZWN0ZWQgXCIgKyAoc3ltYm9sID09IDEgPyBcImVuZCBvZiBpbnB1dFwiIDogXCInXCIgKyAodGhpcy50ZXJtaW5hbHNfW3N5bWJvbF0gfHwgc3ltYm9sKSArIFwiJ1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFyc2VFcnJvcihlcnJTdHIsIHsgdGV4dDogdGhpcy5sZXhlci5tYXRjaCwgdG9rZW46IHRoaXMudGVybWluYWxzX1tzeW1ib2xdIHx8IHN5bWJvbCwgbGluZTogdGhpcy5sZXhlci55eWxpbmVubywgbG9jOiB5eWxvYywgZXhwZWN0ZWQ6IGV4cGVjdGVkIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChhY3Rpb25bMF0gaW5zdGFuY2VvZiBBcnJheSAmJiBhY3Rpb24ubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQYXJzZSBFcnJvcjogbXVsdGlwbGUgYWN0aW9ucyBwb3NzaWJsZSBhdCBzdGF0ZTogXCIgKyBzdGF0ZSArIFwiLCB0b2tlbjogXCIgKyBzeW1ib2wpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGFjdGlvblswXSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKHN5bWJvbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2c3RhY2sucHVzaCh0aGlzLmxleGVyLnl5dGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsc3RhY2sucHVzaCh0aGlzLmxleGVyLnl5bGxvYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKGFjdGlvblsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzeW1ib2wgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwcmVFcnJvclN5bWJvbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHl5bGVuZyA9IHRoaXMubGV4ZXIueXlsZW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHl5dGV4dCA9IHRoaXMubGV4ZXIueXl0ZXh0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHl5bGluZW5vID0gdGhpcy5sZXhlci55eWxpbmVubztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5eWxvYyA9IHRoaXMubGV4ZXIueXlsbG9jO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWNvdmVyaW5nID4gMCkgcmVjb3ZlcmluZy0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeW1ib2wgPSBwcmVFcnJvclN5bWJvbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVFcnJvclN5bWJvbCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgbGVuID0gdGhpcy5wcm9kdWN0aW9uc19bYWN0aW9uWzFdXVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHl5dmFsLiQgPSB2c3RhY2tbdnN0YWNrLmxlbmd0aCAtIGxlbl07XG4gICAgICAgICAgICAgICAgICAgICAgICB5eXZhbC5fJCA9IHsgZmlyc3RfbGluZTogbHN0YWNrW2xzdGFjay5sZW5ndGggLSAobGVuIHx8IDEpXS5maXJzdF9saW5lLCBsYXN0X2xpbmU6IGxzdGFja1tsc3RhY2subGVuZ3RoIC0gMV0ubGFzdF9saW5lLCBmaXJzdF9jb2x1bW46IGxzdGFja1tsc3RhY2subGVuZ3RoIC0gKGxlbiB8fCAxKV0uZmlyc3RfY29sdW1uLCBsYXN0X2NvbHVtbjogbHN0YWNrW2xzdGFjay5sZW5ndGggLSAxXS5sYXN0X2NvbHVtbiB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHl5dmFsLl8kLnJhbmdlID0gW2xzdGFja1tsc3RhY2subGVuZ3RoIC0gKGxlbiB8fCAxKV0ucmFuZ2VbMF0sIGxzdGFja1tsc3RhY2subGVuZ3RoIC0gMV0ucmFuZ2VbMV1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgciA9IHRoaXMucGVyZm9ybUFjdGlvbi5jYWxsKHl5dmFsLCB5eXRleHQsIHl5bGVuZywgeXlsaW5lbm8sIHRoaXMueXksIGFjdGlvblsxXSwgdnN0YWNrLCBsc3RhY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sgPSBzdGFjay5zbGljZSgwLCAtMSAqIGxlbiAqIDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZzdGFjayA9IHZzdGFjay5zbGljZSgwLCAtMSAqIGxlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbHN0YWNrID0gbHN0YWNrLnNsaWNlKDAsIC0xICogbGVuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2godGhpcy5wcm9kdWN0aW9uc19bYWN0aW9uWzFdXVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2c3RhY2sucHVzaCh5eXZhbC4kKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxzdGFjay5wdXNoKHl5dmFsLl8kKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0YXRlID0gdGFibGVbc3RhY2tbc3RhY2subGVuZ3RoIC0gMl1dW3N0YWNrW3N0YWNrLmxlbmd0aCAtIDFdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2gobmV3U3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKiBKaXNvbiBnZW5lcmF0ZWQgbGV4ZXIgKi9cbiAgICB2YXIgbGV4ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbGV4ZXIgPSB7IEVPRjogMSxcbiAgICAgICAgICAgIHBhcnNlRXJyb3I6IGZ1bmN0aW9uIHBhcnNlRXJyb3Ioc3RyLCBoYXNoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMueXkucGFyc2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMueXkucGFyc2VyLnBhcnNlRXJyb3Ioc3RyLCBoYXNoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3Ioc3RyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0SW5wdXQ6IGZ1bmN0aW9uIHNldElucHV0KGlucHV0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faW5wdXQgPSBpbnB1dDtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb3JlID0gdGhpcy5fbGVzcyA9IHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMueXlsaW5lbm8gPSB0aGlzLnl5bGVuZyA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy55eXRleHQgPSB0aGlzLm1hdGNoZWQgPSB0aGlzLm1hdGNoID0gJyc7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25kaXRpb25TdGFjayA9IFsnSU5JVElBTCddO1xuICAgICAgICAgICAgICAgIHRoaXMueXlsbG9jID0geyBmaXJzdF9saW5lOiAxLCBmaXJzdF9jb2x1bW46IDAsIGxhc3RfbGluZTogMSwgbGFzdF9jb2x1bW46IDAgfTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcykgdGhpcy55eWxsb2MucmFuZ2UgPSBbMCwgMF07XG4gICAgICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbiBpbnB1dCgpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2ggPSB0aGlzLl9pbnB1dFswXTtcbiAgICAgICAgICAgICAgICB0aGlzLnl5dGV4dCArPSBjaDtcbiAgICAgICAgICAgICAgICB0aGlzLnl5bGVuZysrO1xuICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0Kys7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXRjaCArPSBjaDtcbiAgICAgICAgICAgICAgICB0aGlzLm1hdGNoZWQgKz0gY2g7XG4gICAgICAgICAgICAgICAgdmFyIGxpbmVzID0gY2gubWF0Y2goLyg/Olxcclxcbj98XFxuKS4qL2cpO1xuICAgICAgICAgICAgICAgIGlmIChsaW5lcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnl5bGluZW5vKys7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMueXlsbG9jLmxhc3RfbGluZSsrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMueXlsbG9jLmxhc3RfY29sdW1uKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmFuZ2VzKSB0aGlzLnl5bGxvYy5yYW5nZVsxXSsrO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5faW5wdXQgPSB0aGlzLl9pbnB1dC5zbGljZSgxKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2g7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdW5wdXQ6IGZ1bmN0aW9uIHVucHV0KGNoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxlbiA9IGNoLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB2YXIgbGluZXMgPSBjaC5zcGxpdCgvKD86XFxyXFxuP3xcXG4pL2cpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5faW5wdXQgPSBjaCArIHRoaXMuX2lucHV0O1xuICAgICAgICAgICAgICAgIHRoaXMueXl0ZXh0ID0gdGhpcy55eXRleHQuc3Vic3RyKDAsIHRoaXMueXl0ZXh0Lmxlbmd0aCAtIGxlbiAtIDEpO1xuICAgICAgICAgICAgICAgIC8vdGhpcy55eWxlbmcgLT0gbGVuO1xuICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0IC09IGxlbjtcbiAgICAgICAgICAgICAgICB2YXIgb2xkTGluZXMgPSB0aGlzLm1hdGNoLnNwbGl0KC8oPzpcXHJcXG4/fFxcbikvZyk7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXRjaCA9IHRoaXMubWF0Y2guc3Vic3RyKDAsIHRoaXMubWF0Y2gubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXRjaGVkID0gdGhpcy5tYXRjaGVkLnN1YnN0cigwLCB0aGlzLm1hdGNoZWQubGVuZ3RoIC0gMSk7XG5cbiAgICAgICAgICAgICAgICBpZiAobGluZXMubGVuZ3RoIC0gMSkgdGhpcy55eWxpbmVubyAtPSBsaW5lcy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgIHZhciByID0gdGhpcy55eWxsb2MucmFuZ2U7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnl5bGxvYyA9IHsgZmlyc3RfbGluZTogdGhpcy55eWxsb2MuZmlyc3RfbGluZSxcbiAgICAgICAgICAgICAgICAgICAgbGFzdF9saW5lOiB0aGlzLnl5bGluZW5vICsgMSxcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RfY29sdW1uOiB0aGlzLnl5bGxvYy5maXJzdF9jb2x1bW4sXG4gICAgICAgICAgICAgICAgICAgIGxhc3RfY29sdW1uOiBsaW5lcyA/IChsaW5lcy5sZW5ndGggPT09IG9sZExpbmVzLmxlbmd0aCA/IHRoaXMueXlsbG9jLmZpcnN0X2NvbHVtbiA6IDApICsgb2xkTGluZXNbb2xkTGluZXMubGVuZ3RoIC0gbGluZXMubGVuZ3RoXS5sZW5ndGggLSBsaW5lc1swXS5sZW5ndGggOiB0aGlzLnl5bGxvYy5maXJzdF9jb2x1bW4gLSBsZW5cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55eWxsb2MucmFuZ2UgPSBbclswXSwgclswXSArIHRoaXMueXlsZW5nIC0gbGVuXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbW9yZTogZnVuY3Rpb24gbW9yZSgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb3JlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsZXNzOiBmdW5jdGlvbiBsZXNzKG4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVucHV0KHRoaXMubWF0Y2guc2xpY2UobikpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhc3RJbnB1dDogZnVuY3Rpb24gcGFzdElucHV0KCkge1xuICAgICAgICAgICAgICAgIHZhciBwYXN0ID0gdGhpcy5tYXRjaGVkLnN1YnN0cigwLCB0aGlzLm1hdGNoZWQubGVuZ3RoIC0gdGhpcy5tYXRjaC5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHJldHVybiAocGFzdC5sZW5ndGggPiAyMCA/ICcuLi4nIDogJycpICsgcGFzdC5zdWJzdHIoLTIwKS5yZXBsYWNlKC9cXG4vZywgXCJcIik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdXBjb21pbmdJbnB1dDogZnVuY3Rpb24gdXBjb21pbmdJbnB1dCgpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV4dCA9IHRoaXMubWF0Y2g7XG4gICAgICAgICAgICAgICAgaWYgKG5leHQubGVuZ3RoIDwgMjApIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dCArPSB0aGlzLl9pbnB1dC5zdWJzdHIoMCwgMjAgLSBuZXh0Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAobmV4dC5zdWJzdHIoMCwgMjApICsgKG5leHQubGVuZ3RoID4gMjAgPyAnLi4uJyA6ICcnKSkucmVwbGFjZSgvXFxuL2csIFwiXCIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNob3dQb3NpdGlvbjogZnVuY3Rpb24gc2hvd1Bvc2l0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBwcmUgPSB0aGlzLnBhc3RJbnB1dCgpO1xuICAgICAgICAgICAgICAgIHZhciBjID0gbmV3IEFycmF5KHByZS5sZW5ndGggKyAxKS5qb2luKFwiLVwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJlICsgdGhpcy51cGNvbWluZ0lucHV0KCkgKyBcIlxcblwiICsgYyArIFwiXlwiO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5FT0Y7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5faW5wdXQpIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICB2YXIgdG9rZW4sIG1hdGNoLCB0ZW1wTWF0Y2gsIGluZGV4LCBjb2wsIGxpbmVzO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fbW9yZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnl5dGV4dCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGNoID0gJyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBydWxlcyA9IHRoaXMuX2N1cnJlbnRSdWxlcygpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcE1hdGNoID0gdGhpcy5faW5wdXQubWF0Y2godGhpcy5ydWxlc1tydWxlc1tpXV0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGVtcE1hdGNoICYmICghbWF0Y2ggfHwgdGVtcE1hdGNoWzBdLmxlbmd0aCA+IG1hdGNoWzBdLmxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gdGVtcE1hdGNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuZmxleCkgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmVzID0gbWF0Y2hbMF0ubWF0Y2goLyg/Olxcclxcbj98XFxuKS4qL2cpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobGluZXMpIHRoaXMueXlsaW5lbm8gKz0gbGluZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnl5bGxvYyA9IHsgZmlyc3RfbGluZTogdGhpcy55eWxsb2MubGFzdF9saW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdF9saW5lOiB0aGlzLnl5bGluZW5vICsgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0X2NvbHVtbjogdGhpcy55eWxsb2MubGFzdF9jb2x1bW4sXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0X2NvbHVtbjogbGluZXMgPyBsaW5lc1tsaW5lcy5sZW5ndGggLSAxXS5sZW5ndGggLSBsaW5lc1tsaW5lcy5sZW5ndGggLSAxXS5tYXRjaCgvXFxyP1xcbj8vKVswXS5sZW5ndGggOiB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbiArIG1hdGNoWzBdLmxlbmd0aCB9O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnl5dGV4dCArPSBtYXRjaFswXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXRjaCArPSBtYXRjaFswXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXRjaGVzID0gbWF0Y2g7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMueXlsZW5nID0gdGhpcy55eXRleHQubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55eWxsb2MucmFuZ2UgPSBbdGhpcy5vZmZzZXQsIHRoaXMub2Zmc2V0ICs9IHRoaXMueXlsZW5nXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb3JlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2lucHV0ID0gdGhpcy5faW5wdXQuc2xpY2UobWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXRjaGVkICs9IG1hdGNoWzBdO1xuICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHRoaXMucGVyZm9ybUFjdGlvbi5jYWxsKHRoaXMsIHRoaXMueXksIHRoaXMsIHJ1bGVzW2luZGV4XSwgdGhpcy5jb25kaXRpb25TdGFja1t0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aCAtIDFdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9uZSAmJiB0aGlzLl9pbnB1dCkgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbikgcmV0dXJuIHRva2VuO2Vsc2UgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faW5wdXQgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuRU9GO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlRXJyb3IoJ0xleGljYWwgZXJyb3Igb24gbGluZSAnICsgKHRoaXMueXlsaW5lbm8gKyAxKSArICcuIFVucmVjb2duaXplZCB0ZXh0LlxcbicgKyB0aGlzLnNob3dQb3NpdGlvbigpLCB7IHRleHQ6IFwiXCIsIHRva2VuOiBudWxsLCBsaW5lOiB0aGlzLnl5bGluZW5vIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsZXg6IGZ1bmN0aW9uIGxleCgpIHtcbiAgICAgICAgICAgICAgICB2YXIgciA9IHRoaXMubmV4dCgpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGV4KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJlZ2luOiBmdW5jdGlvbiBiZWdpbihjb25kaXRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmRpdGlvblN0YWNrLnB1c2goY29uZGl0aW9uKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwb3BTdGF0ZTogZnVuY3Rpb24gcG9wU3RhdGUoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uU3RhY2sucG9wKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2N1cnJlbnRSdWxlczogZnVuY3Rpb24gX2N1cnJlbnRSdWxlcygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25zW3RoaXMuY29uZGl0aW9uU3RhY2tbdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGggLSAxXV0ucnVsZXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9wU3RhdGU6IGZ1bmN0aW9uIHRvcFN0YXRlKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmRpdGlvblN0YWNrW3RoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoIC0gMl07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHVzaFN0YXRlOiBmdW5jdGlvbiBiZWdpbihjb25kaXRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKGNvbmRpdGlvbik7XG4gICAgICAgICAgICB9IH07XG4gICAgICAgIGxleGVyLm9wdGlvbnMgPSB7fTtcbiAgICAgICAgbGV4ZXIucGVyZm9ybUFjdGlvbiA9IGZ1bmN0aW9uIGFub255bW91cyh5eSwgeXlfLCAkYXZvaWRpbmdfbmFtZV9jb2xsaXNpb25zLCBZWV9TVEFSVCkge1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBzdHJpcChzdGFydCwgZW5kKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHl5Xy55eXRleHQgPSB5eV8ueXl0ZXh0LnN1YnN0cmluZyhzdGFydCwgeXlfLnl5bGVuZyAtIGVuZCArIHN0YXJ0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIFlZU1RBVEUgPSBZWV9TVEFSVDtcbiAgICAgICAgICAgIHN3aXRjaCAoJGF2b2lkaW5nX25hbWVfY29sbGlzaW9ucykge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHl5Xy55eXRleHQuc2xpY2UoLTIpID09PSBcIlxcXFxcXFxcXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmlwKDAsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWdpbihcIm11XCIpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHl5Xy55eXRleHQuc2xpY2UoLTEpID09PSBcIlxcXFxcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaXAoMCwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKFwiZW11XCIpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWdpbihcIm11XCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh5eV8ueXl0ZXh0KSByZXR1cm4gMTU7XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3BTdGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTU7XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKCdyYXcnKTtyZXR1cm4gMTU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3BTdGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAvLyBTaG91bGQgYmUgdXNpbmcgYHRoaXMudG9wU3RhdGUoKWAgYmVsb3csIGJ1dCBpdCBjdXJyZW50bHlcbiAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJucyB0aGUgc2Vjb25kIHRvcCBpbnN0ZWFkIG9mIHRoZSBmaXJzdCB0b3AuIE9wZW5lZCBhblxuICAgICAgICAgICAgICAgICAgICAvLyBpc3N1ZSBhYm91dCBpdCBhdCBodHRwczovL2dpdGh1Yi5jb20vemFhY2gvamlzb24vaXNzdWVzLzI5MVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25kaXRpb25TdGFja1t0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aCAtIDFdID09PSAncmF3Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE1O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaXAoNSwgOSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0VORF9SQVdfQkxPQ0snO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3BTdGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTQ7XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gNjU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDY4O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxOTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3BTdGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKCdyYXcnKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDIzO1xuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA1NTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDYwO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMjk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA0NztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxNTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3BTdGF0ZSgpO3JldHVybiA0NDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxNjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3BTdGF0ZSgpO3JldHVybiA0NDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxNzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDM0O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE4OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMzk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTk6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA1MTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDQ4O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDIxOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVucHV0KHl5Xy55eXRleHQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmVnaW4oJ2NvbScpO1xuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9wU3RhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE0O1xuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjM6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA0ODtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyNDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDczO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI1OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gNzI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjY6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA3MjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDg3O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI4OlxuICAgICAgICAgICAgICAgICAgICAvLyBpZ25vcmUgd2hpdGVzcGFjZVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI5OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7cmV0dXJuIDU0O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDMwOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7cmV0dXJuIDMzO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDMxOlxuICAgICAgICAgICAgICAgICAgICB5eV8ueXl0ZXh0ID0gc3RyaXAoMSwgMikucmVwbGFjZSgvXFxcXFwiL2csICdcIicpO3JldHVybiA4MDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgICAgICAgeXlfLnl5dGV4dCA9IHN0cmlwKDEsIDIpLnJlcGxhY2UoL1xcXFwnL2csIFwiJ1wiKTtyZXR1cm4gODA7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzM6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA4NTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDgyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM1OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gODI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzY6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA4MztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzNzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDg0O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gODE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA3NTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDc3O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQxOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gNzI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICAgICAgICAgIHl5Xy55eXRleHQgPSB5eV8ueXl0ZXh0LnJlcGxhY2UoL1xcXFwoW1xcXFxcXF1dKS9nLCAnJDEnKTtyZXR1cm4gNzI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDM6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnSU5WQUxJRCc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA1O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgbGV4ZXIucnVsZXMgPSBbL14oPzpbXlxceDAwXSo/KD89KFxce1xceykpKS8sIC9eKD86W15cXHgwMF0rKS8sIC9eKD86W15cXHgwMF17Mix9Pyg/PShcXHtcXHt8XFxcXFxce1xce3xcXFxcXFxcXFxce1xce3wkKSkpLywgL14oPzpcXHtcXHtcXHtcXHsoPz1bXi9dKSkvLCAvXig/Olxce1xce1xce1xce1xcL1teXFxzIVwiIyUtLFxcLlxcLzstPkBcXFstXFxeYFxcey1+XSsoPz1bPX1cXHNcXC8uXSlcXH1cXH1cXH1cXH0pLywgL14oPzpbXlxceDAwXSs/KD89KFxce1xce1xce1xceykpKS8sIC9eKD86W1xcc1xcU10qPy0tKH4pP1xcfVxcfSkvLCAvXig/OlxcKCkvLCAvXig/OlxcKSkvLCAvXig/Olxce1xce1xce1xceykvLCAvXig/OlxcfVxcfVxcfVxcfSkvLCAvXig/Olxce1xceyh+KT8+KS8sIC9eKD86XFx7XFx7KH4pPyM+KS8sIC9eKD86XFx7XFx7KH4pPyNcXCo/KS8sIC9eKD86XFx7XFx7KH4pP1xcLykvLCAvXig/Olxce1xceyh+KT9cXF5cXHMqKH4pP1xcfVxcfSkvLCAvXig/Olxce1xceyh+KT9cXHMqZWxzZVxccyoofik/XFx9XFx9KS8sIC9eKD86XFx7XFx7KH4pP1xcXikvLCAvXig/Olxce1xceyh+KT9cXHMqZWxzZVxcYikvLCAvXig/Olxce1xceyh+KT9cXHspLywgL14oPzpcXHtcXHsofik/JikvLCAvXig/Olxce1xceyh+KT8hLS0pLywgL14oPzpcXHtcXHsofik/IVtcXHNcXFNdKj9cXH1cXH0pLywgL14oPzpcXHtcXHsofik/XFwqPykvLCAvXig/Oj0pLywgL14oPzpcXC5cXC4pLywgL14oPzpcXC4oPz0oWz1+fVxcc1xcLy4pfF0pKSkvLCAvXig/OltcXC8uXSkvLCAvXig/OlxccyspLywgL14oPzpcXH0ofik/XFx9XFx9KS8sIC9eKD86KH4pP1xcfVxcfSkvLCAvXig/OlwiKFxcXFxbXCJdfFteXCJdKSpcIikvLCAvXig/OicoXFxcXFsnXXxbXiddKSonKS8sIC9eKD86QCkvLCAvXig/OnRydWUoPz0oW359XFxzKV0pKSkvLCAvXig/OmZhbHNlKD89KFt+fVxccyldKSkpLywgL14oPzp1bmRlZmluZWQoPz0oW359XFxzKV0pKSkvLCAvXig/Om51bGwoPz0oW359XFxzKV0pKSkvLCAvXig/Oi0/WzAtOV0rKD86XFwuWzAtOV0rKT8oPz0oW359XFxzKV0pKSkvLCAvXig/OmFzXFxzK1xcfCkvLCAvXig/OlxcfCkvLCAvXig/OihbXlxccyFcIiMlLSxcXC5cXC87LT5AXFxbLVxcXmBcXHstfl0rKD89KFs9fn1cXHNcXC8uKXxdKSkpKS8sIC9eKD86XFxbKFxcXFxcXF18W15cXF1dKSpcXF0pLywgL14oPzouKS8sIC9eKD86JCkvXTtcbiAgICAgICAgbGV4ZXIuY29uZGl0aW9ucyA9IHsgXCJtdVwiOiB7IFwicnVsZXNcIjogWzcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsIDE2LCAxNywgMTgsIDE5LCAyMCwgMjEsIDIyLCAyMywgMjQsIDI1LCAyNiwgMjcsIDI4LCAyOSwgMzAsIDMxLCAzMiwgMzMsIDM0LCAzNSwgMzYsIDM3LCAzOCwgMzksIDQwLCA0MSwgNDIsIDQzLCA0NF0sIFwiaW5jbHVzaXZlXCI6IGZhbHNlIH0sIFwiZW11XCI6IHsgXCJydWxlc1wiOiBbMl0sIFwiaW5jbHVzaXZlXCI6IGZhbHNlIH0sIFwiY29tXCI6IHsgXCJydWxlc1wiOiBbNl0sIFwiaW5jbHVzaXZlXCI6IGZhbHNlIH0sIFwicmF3XCI6IHsgXCJydWxlc1wiOiBbMywgNCwgNV0sIFwiaW5jbHVzaXZlXCI6IGZhbHNlIH0sIFwiSU5JVElBTFwiOiB7IFwicnVsZXNcIjogWzAsIDEsIDQ0XSwgXCJpbmNsdXNpdmVcIjogdHJ1ZSB9IH07XG4gICAgICAgIHJldHVybiBsZXhlcjtcbiAgICB9KSgpO1xuICAgIHBhcnNlci5sZXhlciA9IGxleGVyO1xuICAgIGZ1bmN0aW9uIFBhcnNlcigpIHtcbiAgICAgICAgdGhpcy55eSA9IHt9O1xuICAgIH1QYXJzZXIucHJvdG90eXBlID0gcGFyc2VyO3BhcnNlci5QYXJzZXIgPSBQYXJzZXI7XG4gICAgcmV0dXJuIG5ldyBQYXJzZXIoKTtcbn0pKCk7ZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBoYW5kbGViYXJzO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwyTnZiWEJwYkdWeUwzQmhjbk5sY2k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdPenRCUVVWQkxFbEJRVWtzVlVGQlZTeEhRVUZITEVOQlFVTXNXVUZCVlR0QlFVTTFRaXhSUVVGSkxFMUJRVTBzUjBGQlJ5eEZRVUZETEV0QlFVc3NSVUZCUlN4VFFVRlRMRXRCUVVzc1IwRkJTU3hGUVVGSE8wRkJRekZETEZWQlFVVXNSVUZCUlN4RlFVRkZPMEZCUTA0c1owSkJRVkVzUlVGQlJTeEZRVUZETEU5QlFVOHNSVUZCUXl4RFFVRkRMRVZCUVVNc1RVRkJUU3hGUVVGRExFTkJRVU1zUlVGQlF5eFRRVUZUTEVWQlFVTXNRMEZCUXl4RlFVRkRMRXRCUVVzc1JVRkJReXhEUVVGRExFVkJRVU1zY1VKQlFYRkNMRVZCUVVNc1EwRkJReXhGUVVGRExGZEJRVmNzUlVGQlF5eERRVUZETEVWQlFVTXNWVUZCVlN4RlFVRkRMRU5CUVVNc1JVRkJReXhQUVVGUExFVkJRVU1zUTBGQlF5eEZRVUZETEZWQlFWVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1UwRkJVeXhGUVVGRExFVkJRVVVzUlVGQlF5eGpRVUZqTEVWQlFVTXNSVUZCUlN4RlFVRkRMRk5CUVZNc1JVRkJReXhGUVVGRkxFVkJRVU1zVTBGQlV5eEZRVUZETEVWQlFVVXNSVUZCUXl4VFFVRlRMRVZCUVVNc1JVRkJSU3hGUVVGRExHTkJRV01zUlVGQlF5eEZRVUZGTEVWQlFVTXNjMEpCUVhOQ0xFVkJRVU1zUlVGQlJTeEZRVUZETEdWQlFXVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1owSkJRV2RDTEVWQlFVTXNSVUZCUlN4RlFVRkRMRmxCUVZrc1JVRkJReXhGUVVGRkxFVkJRVU1zTUVKQlFUQkNMRVZCUVVNc1JVRkJSU3hGUVVGRExITkNRVUZ6UWl4RlFVRkRMRVZCUVVVc1JVRkJReXhwUWtGQmFVSXNSVUZCUXl4RlFVRkZMRVZCUVVNc1YwRkJWeXhGUVVGRExFVkJRVVVzUlVGQlF5eGxRVUZsTEVWQlFVTXNSVUZCUlN4RlFVRkRMRmxCUVZrc1JVRkJReXhGUVVGRkxFVkJRVU1zWVVGQllTeEZRVUZETEVWQlFVVXNSVUZCUXl4bFFVRmxMRVZCUVVNc1JVRkJSU3hGUVVGRExGbEJRVmtzUlVGQlF5eEZRVUZGTEVWQlFVTXNkVUpCUVhWQ0xFVkJRVU1zUlVGQlJTeEZRVUZETEcxQ1FVRnRRaXhGUVVGRExFVkJRVVVzUlVGQlF5eHRRa0ZCYlVJc1JVRkJReXhGUVVGRkxFVkJRVU1zVDBGQlR5eEZRVUZETEVWQlFVVXNSVUZCUXl4alFVRmpMRVZCUVVNc1JVRkJSU3hGUVVGRExIbENRVUY1UWl4RlFVRkRMRVZCUVVVc1JVRkJReXh4UWtGQmNVSXNSVUZCUXl4RlFVRkZMRVZCUVVNc2NVSkJRWEZDTEVWQlFVTXNSVUZCUlN4RlFVRkRMR3RDUVVGclFpeEZRVUZETEVWQlFVVXNSVUZCUXl4dlFrRkJiMElzUlVGQlF5eEZRVUZGTEVWQlFVTXNPRUpCUVRoQ0xFVkJRVU1zUlVGQlJTeEZRVUZETERCQ1FVRXdRaXhGUVVGRExFVkJRVVVzUlVGQlF5d3dRa0ZCTUVJc1JVRkJReXhGUVVGRkxFVkJRVU1zYlVKQlFXMUNMRVZCUVVNc1JVRkJSU3hGUVVGRExGTkJRVk1zUlVGQlF5eEZRVUZGTEVWQlFVTXNZMEZCWXl4RlFVRkRMRVZCUVVVc1JVRkJReXh6UWtGQmMwSXNSVUZCUXl4RlFVRkZMRVZCUVVNc1pVRkJaU3hGUVVGRExFVkJRVVVzUlVGQlF5eE5RVUZOTEVWQlFVTXNSVUZCUlN4RlFVRkRMSE5DUVVGelFpeEZRVUZETEVWQlFVVXNSVUZCUXl4clFrRkJhMElzUlVGQlF5eEZRVUZGTEVWQlFVTXNaMEpCUVdkQ0xFVkJRVU1zUlVGQlJTeEZRVUZETEhOQ1FVRnpRaXhGUVVGRExFVkJRVVVzUlVGQlF5eHJRa0ZCYTBJc1JVRkJReXhGUVVGRkxFVkJRVU1zYVVKQlFXbENMRVZCUVVNc1JVRkJSU3hGUVVGRExHTkJRV01zUlVGQlF5eEZRVUZGTEVWQlFVTXNZVUZCWVN4RlFVRkRMRVZCUVVVc1JVRkJReXh4UWtGQmNVSXNSVUZCUXl4RlFVRkZMRVZCUVVNc2FVSkJRV2xDTEVWQlFVTXNSVUZCUlN4RlFVRkRMR3RDUVVGclFpeEZRVUZETEVWQlFVVXNSVUZCUXl4dlFrRkJiMElzUlVGQlF5eEZRVUZGTEVWQlFVTXNPRUpCUVRoQ0xFVkJRVU1zUlVGQlJTeEZRVUZETERCQ1FVRXdRaXhGUVVGRExFVkJRVVVzUlVGQlF5eFBRVUZQTEVWQlFVTXNSVUZCUlN4RlFVRkRMRTlCUVU4c1JVRkJReXhGUVVGRkxFVkJRVU1zV1VGQldTeEZRVUZETEVWQlFVVXNSVUZCUXl4dFFrRkJiVUlzUlVGQlF5eEZRVUZGTEVWQlFVTXNaVUZCWlN4RlFVRkRMRVZCUVVVc1JVRkJReXhoUVVGaExFVkJRVU1zUlVGQlJTeEZRVUZETEUxQlFVMHNSVUZCUXl4RlFVRkZMRVZCUVVNc2RVSkJRWFZDTEVWQlFVTXNSVUZCUlN4RlFVRkRMR0ZCUVdFc1JVRkJReXhGUVVGRkxFVkJRVU1zU1VGQlNTeEZRVUZETEVWQlFVVXNSVUZCUXl4UlFVRlJMRVZCUVVNc1JVRkJSU3hGUVVGRExHRkJRV0VzUlVGQlF5eEZRVUZGTEVWQlFVTXNiVUpCUVcxQ0xFVkJRVU1zUlVGQlJTeEZRVUZETERoQ1FVRTRRaXhGUVVGRExFVkJRVVVzUlVGQlF5eHZRa0ZCYjBJc1JVRkJReXhGUVVGRkxFVkJRVU1zVFVGQlRTeEZRVUZETEVWQlFVVXNSVUZCUXl4VlFVRlZMRVZCUVVNc1JVRkJSU3hGUVVGRExGRkJRVkVzUlVGQlF5eEZRVUZGTEVWQlFVTXNVVUZCVVN4RlFVRkRMRVZCUVVVc1JVRkJReXhUUVVGVExFVkJRVU1zUlVGQlJTeEZRVUZETEZkQlFWY3NSVUZCUXl4RlFVRkZMRVZCUVVNc1RVRkJUU3hGUVVGRExFVkJRVVVzUlVGQlF5eE5RVUZOTEVWQlFVTXNSVUZCUlN4RlFVRkRMR05CUVdNc1JVRkJReXhGUVVGRkxFVkJRVU1zUzBGQlN5eEZRVUZETEVWQlFVVXNSVUZCUXl4VFFVRlRMRVZCUVVNc1EwRkJReXhGUVVGRExFMUJRVTBzUlVGQlF5eERRVUZETEVWQlFVTTdRVUZETlcxRUxHdENRVUZWTEVWQlFVVXNSVUZCUXl4RFFVRkRMRVZCUVVNc1QwRkJUeXhGUVVGRExFTkJRVU1zUlVGQlF5eExRVUZMTEVWQlFVTXNSVUZCUlN4RlFVRkRMRk5CUVZNc1JVRkJReXhGUVVGRkxFVkJRVU1zVTBGQlV5eEZRVUZETEVWQlFVVXNSVUZCUXl4bFFVRmxMRVZCUVVNc1JVRkJSU3hGUVVGRExHZENRVUZuUWl4RlFVRkRMRVZCUVVVc1JVRkJReXhwUWtGQmFVSXNSVUZCUXl4RlFVRkZMRVZCUVVNc1dVRkJXU3hGUVVGRExFVkJRVVVzUlVGQlF5eFBRVUZQTEVWQlFVTXNSVUZCUlN4RlFVRkRMR05CUVdNc1JVRkJReXhGUVVGRkxFVkJRVU1zYjBKQlFXOUNMRVZCUVVNc1JVRkJSU3hGUVVGRExGTkJRVk1zUlVGQlF5eEZRVUZGTEVWQlFVTXNaVUZCWlN4RlFVRkRMRVZCUVVVc1JVRkJReXhOUVVGTkxFVkJRVU1zUlVGQlJTeEZRVUZETEdkQ1FVRm5RaXhGUVVGRExFVkJRVVVzUlVGQlF5eHBRa0ZCYVVJc1JVRkJReXhGUVVGRkxFVkJRVU1zWTBGQll5eEZRVUZETEVWQlFVVXNSVUZCUXl4dlFrRkJiMElzUlVGQlF5eEZRVUZGTEVWQlFVTXNXVUZCV1N4RlFVRkRMRVZCUVVVc1JVRkJReXhoUVVGaExFVkJRVU1zUlVGQlJTeEZRVUZETEVsQlFVa3NSVUZCUXl4RlFVRkZMRVZCUVVNc1VVRkJVU3hGUVVGRExFVkJRVVVzUlVGQlF5eHRRa0ZCYlVJc1JVRkJReXhGUVVGRkxFVkJRVU1zYjBKQlFXOUNMRVZCUVVNc1JVRkJSU3hGUVVGRExGRkJRVkVzUlVGQlF5eEZRVUZGTEVWQlFVTXNVVUZCVVN4RlFVRkRMRVZCUVVVc1JVRkJReXhUUVVGVExFVkJRVU1zUlVGQlJTeEZRVUZETEZkQlFWY3NSVUZCUXl4RlFVRkZMRVZCUVVNc1RVRkJUU3hGUVVGRExFVkJRVVVzUlVGQlF5eE5RVUZOTEVWQlFVTXNSVUZCUlN4RlFVRkRMRXRCUVVzc1JVRkJRenRCUVVNMVpTeHZRa0ZCV1N4RlFVRkZMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBGQlEzSnpRaXh4UWtGQllTeEZRVUZGTEZOQlFWTXNVMEZCVXl4RFFVRkRMRTFCUVUwc1JVRkJReXhOUVVGTkxFVkJRVU1zVVVGQlVTeEZRVUZETEVWQlFVVXNSVUZCUXl4UFFVRlBMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVVVzUlVGRGRrVTdPMEZCUlVZc1owSkJRVWtzUlVGQlJTeEhRVUZITEVWQlFVVXNRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRM1pDTEc5Q1FVRlJMRTlCUVU4N1FVRkRaaXh4UWtGQlN5eERRVUZETzBGQlFVVXNNa0pCUVU4c1JVRkJSU3hEUVVGRExFVkJRVVVzUjBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTjRRaXd3UWtGQlRUdEJRVUZCTEVGQlEwNHNjVUpCUVVzc1EwRkJRenRCUVVGRExIZENRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJReXhqUVVGakxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRNVU1zTUVKQlFVMDdRVUZCUVN4QlFVTk9MSEZDUVVGTExFTkJRVU03UVVGQlF5eDNRa0ZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdRVUZEZGtJc01FSkJRVTA3UVVGQlFTeEJRVU5PTEhGQ1FVRkxMRU5CUVVNN1FVRkJReXgzUWtGQlNTeERRVUZETEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGRGRrSXNNRUpCUVUwN1FVRkJRU3hCUVVOT0xIRkNRVUZMTEVOQlFVTTdRVUZCUXl4M1FrRkJTU3hEUVVGRExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkRka0lzTUVKQlFVMDdRVUZCUVN4QlFVTk9MSEZDUVVGTExFTkJRVU03UVVGQlF5eDNRa0ZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdRVUZEZGtJc01FSkJRVTA3UVVGQlFTeEJRVU5PTEhGQ1FVRkxMRU5CUVVNN1FVRkJReXgzUWtGQlNTeERRVUZETEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGRGRrSXNNRUpCUVUwN1FVRkJRU3hCUVVOT0xIRkNRVUZMTEVOQlFVTTdRVUZCUXl4M1FrRkJTU3hEUVVGRExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkRka0lzTUVKQlFVMDdRVUZCUVN4QlFVTk9MSEZDUVVGTExFTkJRVU03UVVGRFJpeDNRa0ZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSenRCUVVOUUxEUkNRVUZKTEVWQlFVVXNhMEpCUVd0Q08wRkJRM2hDTERaQ1FVRkxMRVZCUVVVc1JVRkJSU3hEUVVGRExGbEJRVmtzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkRPVUlzTmtKQlFVc3NSVUZCUlN4RlFVRkZMRU5CUVVNc1ZVRkJWU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGRGNFTXNNa0pCUVVjc1JVRkJSU3hGUVVGRkxFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNN2NVSkJRM3BDTEVOQlFVTTdPMEZCUlU0c01FSkJRVTA3UVVGQlFTeEJRVU5PTEhGQ1FVRkxMRVZCUVVVN1FVRkRTQ3gzUWtGQlNTeERRVUZETEVOQlFVTXNSMEZCUnp0QlFVTlFMRFJDUVVGSkxFVkJRVVVzYTBKQlFXdENPMEZCUTNoQ0xHZERRVUZSTEVWQlFVVXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJRenRCUVVOb1FpdzJRa0ZCU3l4RlFVRkZMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU03UVVGRFlpd3lRa0ZCUnl4RlFVRkZMRVZCUVVVc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXp0eFFrRkRla0lzUTBGQlF6czdRVUZGVGl3d1FrRkJUVHRCUVVGQkxFRkJRMDRzY1VKQlFVc3NSVUZCUlR0QlFVRkRMSGRDUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXl4bFFVRmxMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUjBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1JVRkJSU3hIUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdRVUZEZWtVc01FSkJRVTA3UVVGQlFTeEJRVU5PTEhGQ1FVRkxMRVZCUVVVN1FVRkJReXgzUWtGQlNTeERRVUZETEVOQlFVTXNSMEZCUnl4RlFVRkZMRWxCUVVrc1JVRkJSU3hGUVVGRkxFTkJRVU1zUlVGQlJTeEhRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRTFCUVUwc1JVRkJSU3hGUVVGRkxFTkJRVU1zUlVGQlJTeEhRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRWxCUVVrc1JVRkJSU3hGUVVGRkxFTkJRVU1zUlVGQlJTeEhRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNN1FVRkRkRVVzTUVKQlFVMDdRVUZCUVN4QlFVTk9MSEZDUVVGTExFVkJRVVU3UVVGQlF5eDNRa0ZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU1zV1VGQldTeERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRWRCUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETEVWQlFVVXNSMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUlVGQlJTeEhRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeExRVUZMTEVWQlFVVXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRE8wRkJRM1pHTERCQ1FVRk5PMEZCUVVFc1FVRkRUaXh4UWtGQlN5eEZRVUZGTzBGQlFVTXNkMEpCUVVrc1EwRkJReXhEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETEZsQlFWa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hIUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RlFVRkZMRWRCUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETEVWQlFVVXNSMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dEJRVU4wUml3d1FrRkJUVHRCUVVGQkxFRkJRMDRzY1VKQlFVc3NSVUZCUlR0QlFVRkRMSGRDUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNTVUZCU1N4RlFVRkZMRVZCUVVVc1EwRkJReXhGUVVGRkxFZEJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNTVUZCU1N4RlFVRkZMRVZCUVVVc1EwRkJReXhGUVVGRkxFZEJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNUVUZCVFN4RlFVRkZMRVZCUVVVc1EwRkJReXhGUVVGRkxFZEJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNTVUZCU1N4RlFVRkZMRVZCUVVVc1EwRkJReXhGUVVGRkxFZEJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNWMEZCVnl4RlFVRkZMRVZCUVVVc1EwRkJReXhGUVVGRkxFZEJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNTMEZCU3l4RlFVRkZMRVZCUVVVc1EwRkJReXhWUVVGVkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNSMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRPMEZCUTNKS0xEQkNRVUZOTzBGQlFVRXNRVUZEVGl4eFFrRkJTeXhGUVVGRk8wRkJRVU1zZDBKQlFVa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1JVRkJSU3hKUVVGSkxFVkJRVVVzUlVGQlJTeERRVUZETEVWQlFVVXNSMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hOUVVGTkxFVkJRVVVzUlVGQlJTeERRVUZETEVWQlFVVXNSMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hKUVVGSkxFVkJRVVVzUlVGQlJTeERRVUZETEVWQlFVVXNSMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hYUVVGWExFVkJRVVVzUlVGQlJTeERRVUZETEVWQlFVVXNSMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hMUVVGTExFVkJRVVVzUlVGQlJTeERRVUZETEZWQlFWVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hIUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU03UVVGRGNra3NNRUpCUVUwN1FVRkJRU3hCUVVOT0xIRkNRVUZMTEVWQlFVVTdRVUZCUXl4M1FrRkJTU3hEUVVGRExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVsQlFVa3NSVUZCUlN4RlFVRkZMRU5CUVVNc1JVRkJSU3hIUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEUxQlFVMHNSVUZCUlN4RlFVRkZMRU5CUVVNc1JVRkJSU3hIUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NSVUZCUlN4RlFVRkZMRU5CUVVNc1JVRkJSU3hIUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEZkQlFWY3NSVUZCUlN4RlFVRkZMRU5CUVVNc1JVRkJSU3hIUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEV0QlFVc3NSVUZCUlN4RlFVRkZMRU5CUVVNc1ZVRkJWU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVkQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXp0QlFVTnlTU3d3UWtGQlRUdEJRVUZCTEVGQlEwNHNjVUpCUVVzc1JVRkJSVHRCUVVGRExIZENRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMRVZCUVVVc1MwRkJTeXhGUVVGRkxFVkJRVVVzUTBGQlF5eFZRVUZWTEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1IwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTXNSVUZCUlN4SFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzVDBGQlR5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRE8wRkJReTlGTERCQ1FVRk5PMEZCUVVFc1FVRkRUaXh4UWtGQlN5eEZRVUZGTzBGQlEwZ3NkMEpCUVVrc1QwRkJUeXhIUVVGSExFVkJRVVVzUTBGQlF5eFpRVUZaTEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1IwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTXNSVUZCUlN4SFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUzBGQlN5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNN2QwSkJRemRGTEU5QlFVOHNSMEZCUnl4RlFVRkZMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRMRVZCUVVVc1IwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTjZSQ3d5UWtGQlR5eERRVUZETEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNN08wRkJSWFpDTEhkQ1FVRkpMRU5CUVVNc1EwRkJReXhIUVVGSExFVkJRVVVzUzBGQlN5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RlFVRkZMRWRCUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN5eEZRVUZGTEU5QlFVOHNSVUZCUlN4UFFVRlBMRVZCUVVVc1MwRkJTeXhGUVVGRkxFbEJRVWtzUlVGQlJTeERRVUZET3p0QlFVVjBSU3d3UWtGQlRUdEJRVUZCTEVGQlEwNHNjVUpCUVVzc1JVRkJSVHRCUVVGRExIZENRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dEJRVU40UWl3d1FrRkJUVHRCUVVGQkxFRkJRMDRzY1VKQlFVc3NSVUZCUlR0QlFVRkRMSGRDUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVTXNTVUZCU1N4RlFVRkZMRVZCUVVVc1EwRkJReXhGUVVGRkxFZEJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNTMEZCU3l4RlFVRkZMRVZCUVVVc1EwRkJReXhWUVVGVkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNSMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNSVUZCUXl4RFFVRkRPMEZCUXpGRkxEQkNRVUZOTzBGQlFVRXNRVUZEVGl4eFFrRkJTeXhGUVVGRk8wRkJRVU1zZDBKQlFVa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRExHVkJRV1VzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4SFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVkQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExFVkJRVVVzUjBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1JVRkJSU3hIUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXl4VlFVRlZMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUjBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkRkRWdzTUVKQlFVMDdRVUZCUVN4QlFVTk9MSEZDUVVGTExFVkJRVVU3UVVGQlF5eDNRa0ZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU1zWlVGQlpTeERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRWRCUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETEVWQlFVVXNSMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUlVGQlJTeEhRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJReXhGUVVGRkxFZEJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRMRlZCUVZVc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeEhRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRCUVVOMFNDd3dRa0ZCVFR0QlFVRkJMRUZCUTA0c2NVSkJRVXNzUlVGQlJUdEJRVU5JTEhkQ1FVRkpMRU5CUVVNc1EwRkJReXhIUVVGSE8wRkJRMUFzTkVKQlFVa3NSVUZCUlN4clFrRkJhMEk3UVVGRGVFSXNORUpCUVVrc1JVRkJSU3hGUVVGRkxFTkJRVU1zUlVGQlJTeEhRVUZETEVOQlFVTXNRMEZCUXp0QlFVTmtMRGhDUVVGTkxFVkJRVVVzUlVGQlJTeERRVUZETEVWQlFVVXNSMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRhRUlzTkVKQlFVa3NSVUZCUlN4RlFVRkZMRU5CUVVNc1JVRkJSU3hIUVVGRExFTkJRVU1zUTBGQlF6dEJRVU5rTERoQ1FVRk5MRVZCUVVVc1JVRkJSVHRCUVVOV0xEWkNRVUZMTEVWQlFVVXNSVUZCUlN4RFFVRkRMRlZCUVZVc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeEhRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dEJRVU4wUXl3eVFrRkJSeXhGUVVGRkxFVkJRVVVzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJRenR4UWtGRGVrSXNRMEZCUXpzN1FVRkZUaXd3UWtGQlRUdEJRVUZCTEVGQlEwNHNjVUpCUVVzc1JVRkJSVHRCUVVGRExIZENRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hIUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RlFVRkZMRWRCUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dEJRVU0zUlN3d1FrRkJUVHRCUVVGQkxFRkJRMDRzY1VKQlFVc3NSVUZCUlR0QlFVRkRMSGRDUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNTVUZCU1N4RlFVRkZMRVZCUVVVc1EwRkJReXhGUVVGRkxFZEJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNUVUZCVFN4RlFVRkZMRVZCUVVVc1EwRkJReXhGUVVGRkxFZEJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNTVUZCU1N4RlFVRkZMRVZCUVVVc1EwRkJReXhGUVVGRkxFZEJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNTMEZCU3l4RlFVRkZMRVZCUVVVc1EwRkJReXhWUVVGVkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNSMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRPMEZCUXpsSExEQkNRVUZOTzBGQlFVRXNRVUZEVGl4eFFrRkJTeXhGUVVGRk8wRkJRVU1zZDBKQlFVa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzBGQlEzaENMREJDUVVGTk8wRkJRVUVzUVVGRFRpeHhRa0ZCU3l4RlFVRkZPMEZCUVVNc2QwSkJRVWtzUTBGQlF5eERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRE8wRkJRM2hDTERCQ1FVRk5PMEZCUVVFc1FVRkRUaXh4UWtGQlN5eEZRVUZGTzBGQlEwZ3NkMEpCUVVrc1EwRkJReXhEUVVGRExFZEJRVWM3UVVGRFVDdzBRa0ZCU1N4RlFVRkZMR1ZCUVdVN1FVRkRja0lzTkVKQlFVa3NSVUZCUlN4RlFVRkZMRU5CUVVNc1JVRkJSU3hIUVVGRExFTkJRVU1zUTBGQlF6dEJRVU5rTERoQ1FVRk5MRVZCUVVVc1JVRkJSU3hEUVVGRExFVkJRVVVzUjBGQlF5eERRVUZETEVOQlFVTTdRVUZEYUVJc05FSkJRVWtzUlVGQlJTeEZRVUZGTEVOQlFVTXNSVUZCUlN4SFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOa0xESkNRVUZITEVWQlFVVXNSVUZCUlN4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETzNGQ1FVTjZRaXhEUVVGRE96dEJRVVZPTERCQ1FVRk5PMEZCUVVFc1FVRkRUaXh4UWtGQlN5eEZRVUZGTzBGQlFVTXNkMEpCUVVrc1EwRkJReXhEUVVGRExFZEJRVWNzUlVGQlF5eEpRVUZKTEVWQlFVVXNUVUZCVFN4RlFVRkZMRXRCUVVzc1JVRkJSU3hGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNSMEZCUnl4RlFVRkZMRVZCUVVVc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRU5CUVVNN1FVRkRla1VzTUVKQlFVMDdRVUZCUVN4QlFVTk9MSEZDUVVGTExFVkJRVVU3UVVGQlF5eDNRa0ZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhGUVVGRExFbEJRVWtzUlVGQlJTeFZRVUZWTEVWQlFVVXNSMEZCUnl4RlFVRkZMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNSMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFdEJRVXNzUlVGQlJTeEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1IwRkJSeXhGUVVGRkxFVkJRVVVzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFTkJRVU03UVVGRGJrY3NNRUpCUVUwN1FVRkJRU3hCUVVOT0xIRkNRVUZMTEVWQlFVVTdRVUZCUXl4M1FrRkJTU3hEUVVGRExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFZEJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTnFReXd3UWtGQlRUdEJRVUZCTEVGQlEwNHNjVUpCUVVzc1JVRkJSVHRCUVVGRExIZENRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dEJRVU40UWl3d1FrRkJUVHRCUVVGQkxFRkJRMDRzY1VKQlFVc3NSVUZCUlR0QlFVRkRMSGRDUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRCUVVONFFpd3dRa0ZCVFR0QlFVRkJMRUZCUTA0c2NVSkJRVXNzUlVGQlJUdEJRVUZETEhkQ1FVRkpMRU5CUVVNc1EwRkJReXhIUVVGSExFVkJRVU1zU1VGQlNTeEZRVUZGTEdWQlFXVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEZGQlFWRXNSVUZCUlN4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUjBGQlJ5eEZRVUZGTEVWQlFVVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVOQlFVTTdRVUZEY0Vjc01FSkJRVTA3UVVGQlFTeEJRVU5PTEhGQ1FVRkxMRVZCUVVVN1FVRkJReXgzUWtGQlNTeERRVUZETEVOQlFVTXNSMEZCUnl4RlFVRkRMRWxCUVVrc1JVRkJSU3hsUVVGbExFVkJRVVVzUzBGQlN5eEZRVUZGTEUxQlFVMHNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUlVGQlJTeFJRVUZSTEVWQlFVVXNUVUZCVFN4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVkQlFVY3NSVUZCUlN4RlFVRkZMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RFFVRkRPMEZCUTNCSUxEQkNRVUZOTzBGQlFVRXNRVUZEVGl4eFFrRkJTeXhGUVVGRk8wRkJRVU1zZDBKQlFVa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1JVRkJReXhKUVVGSkxFVkJRVVVzWjBKQlFXZENMRVZCUVVVc1MwRkJTeXhGUVVGRkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNTMEZCU3l4TlFVRk5MRVZCUVVVc1VVRkJVU3hGUVVGRkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNTMEZCU3l4TlFVRk5MRVZCUVVVc1IwRkJSeXhGUVVGRkxFVkJRVVVzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFTkJRVU03UVVGRE0wZ3NNRUpCUVUwN1FVRkJRU3hCUVVOT0xIRkNRVUZMTEVWQlFVVTdRVUZCUXl4M1FrRkJTU3hEUVVGRExFTkJRVU1zUjBGQlJ5eEZRVUZETEVsQlFVa3NSVUZCUlN4clFrRkJhMElzUlVGQlJTeFJRVUZSTEVWQlFVVXNVMEZCVXl4RlFVRkZMRXRCUVVzc1JVRkJSU3hUUVVGVExFVkJRVVVzUjBGQlJ5eEZRVUZGTEVWQlFVVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVOQlFVTTdRVUZETjBjc01FSkJRVTA3UVVGQlFTeEJRVU5PTEhGQ1FVRkxMRVZCUVVVN1FVRkJReXgzUWtGQlNTeERRVUZETEVOQlFVTXNSMEZCUnl4RlFVRkRMRWxCUVVrc1JVRkJSU3hoUVVGaExFVkJRVVVzVVVGQlVTeEZRVUZGTEVsQlFVa3NSVUZCUlN4TFFVRkxMRVZCUVVVc1NVRkJTU3hGUVVGRkxFZEJRVWNzUlVGQlJTeEZRVUZGTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eERRVUZETzBGQlF6bEdMREJDUVVGTk8wRkJRVUVzUVVGRFRpeHhRa0ZCU3l4RlFVRkZPMEZCUVVNc2QwSkJRVWtzUTBGQlF5eERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRE8wRkJRM2hDTERCQ1FVRk5PMEZCUVVFc1FVRkRUaXh4UWtGQlN5eEZRVUZGTzBGQlFVTXNkMEpCUVVrc1EwRkJReXhEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPMEZCUTNoQ0xEQkNRVUZOTzBGQlFVRXNRVUZEVGl4eFFrRkJTeXhGUVVGRk8wRkJRVU1zZDBKQlFVa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRExGZEJRVmNzUTBGQlF5eEpRVUZKTEVWQlFVVXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0QlFVTjJSQ3d3UWtGQlRUdEJRVUZCTEVGQlEwNHNjVUpCUVVzc1JVRkJSVHRCUVVGRExIZENRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJReXhYUVVGWExFTkJRVU1zUzBGQlN5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdRVUZEZUVRc01FSkJRVTA3UVVGQlFTeEJRVU5PTEhGQ1FVRkxMRVZCUVVVN1FVRkJSU3h6UWtGQlJTeERRVUZETEVWQlFVVXNSMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlF5eEpRVUZKTEVWQlFVVXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNSVUZCUlN4UlFVRlJMRVZCUVVVc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEZOQlFWTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1JVRkJSU3hIUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNRMEZCUXl4QlFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETEVWQlFVVXNSMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVONFJ5d3dRa0ZCVFR0QlFVRkJMRUZCUTA0c2NVSkJRVXNzUlVGQlJUdEJRVUZETEhkQ1FVRkpMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlF5eEpRVUZKTEVWQlFVVXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNSVUZCUlN4UlFVRlJMRVZCUVVVc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVOQlFVTXNRMEZCUXp0QlFVTXpSQ3d3UWtGQlRUdEJRVUZCTEVGQlEwNHNjVUpCUVVzc1JVRkJSVHRCUVVGRExIZENRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJRenRCUVVOd1Fpd3dRa0ZCVFR0QlFVRkJMRUZCUTA0c2NVSkJRVXNzUlVGQlJUdEJRVUZETEhOQ1FVRkZMRU5CUVVNc1JVRkJSU3hIUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU01UWl3d1FrRkJUVHRCUVVGQkxFRkJRMDRzY1VKQlFVc3NSVUZCUlR0QlFVRkRMSGRDUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTndRaXd3UWtGQlRUdEJRVUZCTEVGQlEwNHNjVUpCUVVzc1JVRkJSVHRCUVVGRExITkNRVUZGTEVOQlFVTXNSVUZCUlN4SFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVNNVFpd3dRa0ZCVFR0QlFVRkJMRUZCUTA0c2NVSkJRVXNzUlVGQlJUdEJRVUZETEhkQ1FVRkpMRU5CUVVNc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF6dEJRVU53UWl3d1FrRkJUVHRCUVVGQkxFRkJRMDRzY1VKQlFVc3NSVUZCUlR0QlFVRkRMSE5DUVVGRkxFTkJRVU1zUlVGQlJTeEhRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTTVRaXd3UWtGQlRUdEJRVUZCTEVGQlEwNHNjVUpCUVVzc1JVRkJSVHRCUVVGRExIZENRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJRenRCUVVOd1Fpd3dRa0ZCVFR0QlFVRkJMRUZCUTA0c2NVSkJRVXNzUlVGQlJUdEJRVUZETEhOQ1FVRkZMRU5CUVVNc1JVRkJSU3hIUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU01UWl3d1FrRkJUVHRCUVVGQkxFRkJRMDRzY1VKQlFVc3NSVUZCUlR0QlFVRkRMSGRDUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTndRaXd3UWtGQlRUdEJRVUZCTEVGQlEwNHNjVUpCUVVzc1JVRkJSVHRCUVVGRExITkNRVUZGTEVOQlFVTXNSVUZCUlN4SFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVNNVFpd3dRa0ZCVFR0QlFVRkJMRUZCUTA0c2NVSkJRVXNzUlVGQlJUdEJRVUZETEhkQ1FVRkpMRU5CUVVNc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF6dEJRVU53UWl3d1FrRkJUVHRCUVVGQkxFRkJRMDRzY1VKQlFVc3NSVUZCUlR0QlFVRkRMSE5DUVVGRkxFTkJRVU1zUlVGQlJTeEhRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTTVRaXd3UWtGQlRUdEJRVUZCTEVGQlEwNHNjVUpCUVVzc1JVRkJSVHRCUVVGRExIZENRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJRenRCUVVOd1Fpd3dRa0ZCVFR0QlFVRkJMRUZCUTA0c2NVSkJRVXNzUlVGQlJUdEJRVUZETEhOQ1FVRkZMRU5CUVVNc1JVRkJSU3hIUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU01UWl3d1FrRkJUVHRCUVVGQkxFRkJRMDRzY1VKQlFVc3NSVUZCUlR0QlFVRkRMSGRDUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTndRaXd3UWtGQlRUdEJRVUZCTEVGQlEwNHNjVUpCUVVzc1JVRkJSVHRCUVVGRExITkNRVUZGTEVOQlFVTXNSVUZCUlN4SFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVNNVFpd3dRa0ZCVFR0QlFVRkJMRUZCUTA0c2NVSkJRVXNzUlVGQlJUdEJRVUZETEhkQ1FVRkpMRU5CUVVNc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF6dEJRVU53UWl3d1FrRkJUVHRCUVVGQkxFRkJRMDRzY1VKQlFVc3NSVUZCUlR0QlFVRkRMSE5DUVVGRkxFTkJRVU1zUlVGQlJTeEhRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTTVRaXd3UWtGQlRUdEJRVUZCTEVGQlEwNHNjVUpCUVVzc1JVRkJSVHRCUVVGRExIZENRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJRenRCUVVOd1Fpd3dRa0ZCVFR0QlFVRkJMRUZCUTA0c2NVSkJRVXNzUlVGQlJUdEJRVUZETEhOQ1FVRkZMRU5CUVVNc1JVRkJSU3hIUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU01UWl3d1FrRkJUVHRCUVVGQkxFRkJRMDRzY1VKQlFVc3NSVUZCUlR0QlFVRkRMSGRDUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTndRaXd3UWtGQlRUdEJRVUZCTEVGQlEwNHNjVUpCUVVzc1JVRkJSVHRCUVVGRExITkNRVUZGTEVOQlFVTXNSVUZCUlN4SFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVNNVFpd3dRa0ZCVFR0QlFVRkJMRUZCUTA0c2NVSkJRVXNzUlVGQlJUdEJRVUZETEhkQ1FVRkpMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRNVUlzTUVKQlFVMDdRVUZCUVN4QlFVTk9MSEZDUVVGTExFVkJRVVU3UVVGQlF5eHpRa0ZCUlN4RFFVRkRMRVZCUVVVc1IwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRE9VSXNNRUpCUVUwN1FVRkJRU3hCUVVOT0xIRkNRVUZMTEVkQlFVYzdRVUZCUXl4M1FrRkJTU3hEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRek5DTERCQ1FVRk5PMEZCUVVFc1FVRkRUaXh4UWtGQlN5eEhRVUZITzBGQlFVTXNjMEpCUVVVc1EwRkJReXhGUVVGRkxFZEJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzBGQlF5OUNMREJDUVVGTk8wRkJRVUVzWVVGRFREdFRRVU5CTzBGQlEwUXNZVUZCU3l4RlFVRkZMRU5CUVVNc1JVRkJReXhEUVVGRExFVkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUXl4RFFVRkRMRVZCUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlF5eEZRVUZETEVOQlFVTXNSVUZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVU1zUlVGQlF5eERRVUZETEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlF5eEZRVUZETEVOQlFVTXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eERRVUZETEVWQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJReXhEUVVGRExFVkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRExFTkJRVU1zUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRExFVkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVNc1JVRkJReXhEUVVGRExFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkRMRU5CUVVNc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZETEVWQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVU1zUlVGQlF5eERRVUZETEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRExFTkJRVU1zUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkRMRVZCUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVTXNSVUZCUXl4RFFVRkRMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkRMRVZCUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVWQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVTXNSVUZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUlVGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVNc1JVRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNSVUZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVNc1JVRkJReXhEUVVGRExFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRExFVkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRVZCUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkRMRVZCUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVNc1JVRkJReXhEUVVGRExFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFZEJRVWNzUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1IwRkJSeXhGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eEhRVUZITEVWQlFVTXNSVUZCUlN4RlFVRkRMRWRCUVVjc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNSMEZCUnl4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhIUVVGSExFTkJRVU1zUlVGQlF5eEZRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUjBGQlJ5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhIUVVGSExFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1IwRkJSeXhEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRExFVkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVTXNSVUZCUXl4RFFVRkRMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eEhRVUZITEVWQlFVTXNSVUZCUlN4RlFVRkRMRWRCUVVjc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUjBGQlJ5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkRMRU5CUVVNc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4SFFVRkhMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVkQlFVY3NSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRWRCUVVjc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhIUVVGSExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eEhRVUZITEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1IwRkJSeXhGUVVGRExFVkJRVVVzUlVGQlF5eEhRVUZITEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEhRVUZITEVOQlFVTXNSVUZCUXl4RlFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRExFVkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVTXNSVUZCUXl4RFFVRkRMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRWRCUVVjc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJReXhGUVVGRExFTkJRVU1zUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4SFFVRkhMRVZCUVVNc1JVRkJSU3hGUVVGRExFZEJRVWNzUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1IwRkJSeXhGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVTXNSVUZCUXl4RFFVRkRMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhIUVVGSExFTkJRVU1zUlVGQlF5eEZRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkRMRVZCUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhIUVVGSExFVkJRVU1zUlVGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhIUVVGSExFTkJRVU1zUlVGQlF5eEZRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVkQlFVY3NSVUZCUXl4RlFVRkZMRVZCUVVNc1IwRkJSeXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4SFFVRkhMRU5CUVVNc1JVRkJReXhGUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVNc1JVRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1IwRkJSeXhEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRExFVkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEZRVUZGTEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhEUVVGRE8wRkJReTh2Vml4elFrRkJZeXhGUVVGRkxFVkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhGUVVGRkxFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRVZCUVVVc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4RlFVRkZMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF5eEhRVUZITEVWQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRExFVkJRVU1zUjBGQlJ5eEZRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRExFZEJRVWNzUlVGQlF5eERRVUZETEVOQlFVTXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhIUVVGSExFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVNc1IwRkJSeXhGUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkRMRWRCUVVjc1JVRkJReXhEUVVGRExFTkJRVU1zUlVGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUXl4SFFVRkhMRVZCUVVNc1EwRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNSMEZCUnl4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEVkQlFVY3NSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhGUVVGRkxFTkJRVU1zUlVGQlF6dEJRVU5zVFN4clFrRkJWU3hGUVVGRkxGTkJRVk1zVlVGQlZTeERRVUZGTEVkQlFVY3NSVUZCUlN4SlFVRkpMRVZCUVVVN1FVRkRlRU1zYTBKQlFVMHNTVUZCU1N4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03VTBGRGVFSTdRVUZEUkN4aFFVRkxMRVZCUVVVc1UwRkJVeXhMUVVGTExFTkJRVU1zUzBGQlN5eEZRVUZGTzBGQlEzcENMR2RDUVVGSkxFbEJRVWtzUjBGQlJ5eEpRVUZKTzJkQ1FVRkZMRXRCUVVzc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZCUlN4TlFVRk5MRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU03WjBKQlFVVXNUVUZCVFN4SFFVRkhMRVZCUVVVN1owSkJRVVVzUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxPMmRDUVVGRkxFMUJRVTBzUjBGQlJ5eEZRVUZGTzJkQ1FVRkZMRkZCUVZFc1IwRkJSeXhEUVVGRE8yZENRVUZGTEUxQlFVMHNSMEZCUnl4RFFVRkRPMmRDUVVGRkxGVkJRVlVzUjBGQlJ5eERRVUZETzJkQ1FVRkZMRTFCUVUwc1IwRkJSeXhEUVVGRE8yZENRVUZGTEVkQlFVY3NSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRNMG9zWjBKQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBGQlF6TkNMR2RDUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVWQlFVVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRE8wRkJRM2hDTEdkQ1FVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRPMEZCUXpOQ0xHZENRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU03UVVGRGRFSXNaMEpCUVVrc1QwRkJUeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNTVUZCU1N4WFFVRlhMRVZCUTNaRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRkhMRVZCUVVVc1EwRkJRenRCUVVNelFpeG5Ra0ZCU1N4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTTdRVUZET1VJc2EwSkJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRia0lzWjBKQlFVa3NUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVDBGQlR5eEpRVUZKTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF6dEJRVU0zUkN4blFrRkJTU3hQUVVGUExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNWVUZCVlN4TFFVRkxMRlZCUVZVc1JVRkRlRU1zU1VGQlNTeERRVUZETEZWQlFWVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExGVkJRVlVzUTBGQlF6dEJRVU42UXl4eFFrRkJVeXhSUVVGUkxFTkJRVU1zUTBGQlF5eEZRVUZGTzBGQlEycENMSEZDUVVGTExFTkJRVU1zVFVGQlRTeEhRVUZITEV0QlFVc3NRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU53UXl4elFrRkJUU3hEUVVGRExFMUJRVTBzUjBGQlJ5eE5RVUZOTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVOc1F5eHpRa0ZCVFN4RFFVRkRMRTFCUVUwc1IwRkJSeXhOUVVGTkxFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXp0aFFVTnlRenRCUVVORUxIRkNRVUZUTEVkQlFVY3NSMEZCUnp0QlFVTllMRzlDUVVGSkxFdEJRVXNzUTBGQlF6dEJRVU5XTEhGQ1FVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRPVUlzYjBKQlFVa3NUMEZCVHl4TFFVRkxMRXRCUVVzc1VVRkJVU3hGUVVGRk8wRkJRek5DTEhsQ1FVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4TFFVRkxMRU5CUVVNN2FVSkJRM3BETzBGQlEwUXNkVUpCUVU4c1MwRkJTeXhEUVVGRE8yRkJRMmhDTzBGQlEwUXNaMEpCUVVrc1RVRkJUVHRuUWtGQlJTeGpRVUZqTzJkQ1FVRkZMRXRCUVVzN1owSkJRVVVzVFVGQlRUdG5Ra0ZCUlN4RFFVRkRPMmRDUVVGRkxFTkJRVU03WjBKQlFVVXNTMEZCU3l4SFFVRkhMRVZCUVVVN1owSkJRVVVzUTBGQlF6dG5Ra0ZCUlN4SFFVRkhPMmRDUVVGRkxGRkJRVkU3WjBKQlFVVXNVVUZCVVN4RFFVRkRPMEZCUTNoR0xHMUNRVUZQTEVsQlFVa3NSVUZCUlR0QlFVTlVMSEZDUVVGTExFZEJRVWNzUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRGFFTXNiMEpCUVVrc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eExRVUZMTEVOQlFVTXNSVUZCUlR0QlFVTTFRaXd3UWtGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03YVVKQlEzWkRMRTFCUVUwN1FVRkRTQ3gzUWtGQlNTeE5RVUZOTEV0QlFVc3NTVUZCU1N4SlFVRkpMRTlCUVU4c1RVRkJUU3hKUVVGSkxGZEJRVmNzUlVGQlJUdEJRVU5xUkN3NFFrRkJUU3hIUVVGSExFZEJRVWNzUlVGQlJTeERRVUZETzNGQ1FVTnNRanRCUVVORUxEQkNRVUZOTEVkQlFVY3NTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRwUWtGRGFrUTdRVUZEUkN4dlFrRkJTU3hQUVVGUExFMUJRVTBzUzBGQlN5eFhRVUZYTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1RVRkJUU3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZPMEZCUXk5RUxIZENRVUZKTEUxQlFVMHNSMEZCUnl4RlFVRkZMRU5CUVVNN1FVRkRhRUlzZDBKQlFVa3NRMEZCUXl4VlFVRlZMRVZCUVVVN1FVRkRZaXhuUTBGQlVTeEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTmtMRFpDUVVGTExFTkJRVU1zU1VGQlNTeExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRVZCUTJ4Q0xFbEJRVWtzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTzBGQlF6ZENMRzlEUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVkQlFVY3NRMEZCUXl4RFFVRkRPM2xDUVVOcVJEdEJRVU5NTERSQ1FVRkpMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zV1VGQldTeEZRVUZGTzBGQlEzcENMR3REUVVGTkxFZEJRVWNzYzBKQlFYTkNMRWxCUVVrc1VVRkJVU3hIUVVGSExFTkJRVU1zUTBGQlFTeEJRVUZETEVkQlFVY3NTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zV1VGQldTeEZRVUZGTEVkQlFVY3NZMEZCWXl4SFFVRkhMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NVMEZCVXl4SlFVRkpMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NUVUZCVFN4RFFVRkJMRUZCUVVNc1IwRkJSeXhIUVVGSExFTkJRVU03ZVVKQlEzWk1MRTFCUVUwN1FVRkRTQ3hyUTBGQlRTeEhRVUZITEhOQ1FVRnpRaXhKUVVGSkxGRkJRVkVzUjBGQlJ5eERRVUZETEVOQlFVRXNRVUZCUXl4SFFVRkhMR1ZCUVdVc1NVRkJTU3hOUVVGTkxFbEJRVWtzUTBGQlF5eEhRVUZETEdOQlFXTXNSMEZCUXl4SFFVRkhMRWxCUVVrc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4TlFVRk5MRU5CUVVFc1FVRkJReXhIUVVGSExFZEJRVWNzUTBGQlFTeEJRVUZETEVOQlFVTTdlVUpCUTNKS08wRkJRMFFzTkVKQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1RVRkJUU3hGUVVGRkxFVkJRVU1zU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFMUJRVTBzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFVkJRVVVzUjBGQlJ5eEZRVUZGTEV0QlFVc3NSVUZCUlN4UlFVRlJMRVZCUVVVc1VVRkJVU3hGUVVGRExFTkJRVU1zUTBGQlF6dHhRa0ZETVVvN2FVSkJRMG83UVVGRFJDeHZRa0ZCU1N4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExGbEJRVmtzUzBGQlN5eEpRVUZKTEUxQlFVMHNRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJReXhGUVVGRk8wRkJRMnBFTERCQ1FVRk5MRWxCUVVrc1MwRkJTeXhEUVVGRExHMUVRVUZ0UkN4SFFVRkhMRXRCUVVzc1IwRkJSeXhYUVVGWExFZEJRVWNzVFVGQlRTeERRVUZETEVOQlFVTTdhVUpCUTNaSE8wRkJRMFFzZDBKQlFWRXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOcVFpeDVRa0ZCU3l4RFFVRkRPMEZCUTBZc05rSkJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkRia0lzT0VKQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0QlFVTXZRaXc0UWtGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzBGQlF5OUNMRFpDUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRM1JDTERoQ1FVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRE8wRkJRMlFzTkVKQlFVa3NRMEZCUXl4alFVRmpMRVZCUVVVN1FVRkRha0lzYTBOQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF6dEJRVU16UWl4clEwRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRPMEZCUXpOQ0xHOURRVUZSTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU03UVVGREwwSXNhVU5CUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXp0QlFVTXhRaXhuUTBGQlNTeFZRVUZWTEVkQlFVY3NRMEZCUXl4RlFVTmtMRlZCUVZVc1JVRkJSU3hEUVVGRE8zbENRVU53UWl4TlFVRk5PMEZCUTBnc2EwTkJRVTBzUjBGQlJ5eGpRVUZqTEVOQlFVTTdRVUZEZUVJc01FTkJRV01zUjBGQlJ5eEpRVUZKTEVOQlFVTTdlVUpCUTNwQ08wRkJRMFFzT0VKQlFVMDdRVUZCUVN4QlFVTldMSGxDUVVGTExFTkJRVU03UVVGRFJpd3lRa0ZCUnl4SFFVRkhMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRGRFTXNOa0pCUVVzc1EwRkJReXhEUVVGRExFZEJRVWNzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4TlFVRk5MRWRCUVVjc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRGRFTXNOa0pCUVVzc1EwRkJReXhGUVVGRkxFZEJRVWNzUlVGQlF5eFZRVUZWTEVWQlFVVXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhOUVVGTkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNRMEZCUVN4QlFVRkRMRU5CUVVNc1EwRkJReXhWUVVGVkxFVkJRVVVzVTBGQlV5eEZRVUZGTEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEZOQlFWTXNSVUZCUlN4WlFVRlpMRVZCUVVVc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1EwRkJRU3hCUVVGRExFTkJRVU1zUTBGQlF5eFpRVUZaTEVWQlFVVXNWMEZCVnl4RlFVRkZMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRmRCUVZjc1JVRkJReXhEUVVGRE8wRkJRekZQTERSQ1FVRkpMRTFCUVUwc1JVRkJSVHRCUVVOU0xHbERRVUZMTEVOQlFVTXNSVUZCUlN4RFFVRkRMRXRCUVVzc1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNUVUZCVFN4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExFTkJRVUVzUVVGQlF5eERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPM2xDUVVOMFJ6dEJRVU5FTEhsQ1FVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZMRTFCUVUwc1JVRkJSU3hOUVVGTkxFVkJRVVVzVVVGQlVTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RlFVRkZMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEUxQlFVMHNSVUZCUlN4TlFVRk5MRU5CUVVNc1EwRkJRenRCUVVOcVJ5dzBRa0ZCU1N4UFFVRlBMRU5CUVVNc1MwRkJTeXhYUVVGWExFVkJRVVU3UVVGRE1VSXNiVU5CUVU4c1EwRkJReXhEUVVGRE8zbENRVU5hTzBGQlEwUXNORUpCUVVrc1IwRkJSeXhGUVVGRk8wRkJRMHdzYVVOQlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNSMEZCUnl4SFFVRkhMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRGNrTXNhME5CUVUwc1IwRkJSeXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1IwRkJSeXhIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU51UXl4clEwRkJUU3hIUVVGSExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhIUVVGSExFZEJRVWNzUTBGQlF5eERRVUZETzNsQ1FVTjBRenRCUVVORUxEWkNRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU0xUXl3NFFrRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRja0lzT0VKQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzBGQlEzUkNMR2REUVVGUkxFZEJRVWNzUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTnVSU3cyUWtGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRCUVVOeVFpdzRRa0ZCVFR0QlFVRkJMRUZCUTFZc2VVSkJRVXNzUTBGQlF6dEJRVU5HTEN0Q1FVRlBMRWxCUVVrc1EwRkJRenRCUVVGQkxHbENRVU5tTzJGQlEwbzdRVUZEUkN4dFFrRkJUeXhKUVVGSkxFTkJRVU03VTBGRFpqdExRVU5CTEVOQlFVTTdPMEZCUlVZc1VVRkJTU3hMUVVGTExFZEJRVWNzUTBGQlF5eFpRVUZWTzBGQlEzWkNMRmxCUVVrc1MwRkJTeXhIUVVGSkxFVkJRVU1zUjBGQlJ5eEZRVUZETEVOQlFVTTdRVUZEYmtJc2MwSkJRVlVzUlVGQlF5eFRRVUZUTEZWQlFWVXNRMEZCUXl4SFFVRkhMRVZCUVVVc1NVRkJTU3hGUVVGRk8wRkJRMnhETEc5Q1FVRkpMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zVFVGQlRTeEZRVUZGTzBGQlEyaENMSGRDUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEUxQlFVMHNRMEZCUXl4VlFVRlZMRU5CUVVNc1IwRkJSeXhGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzJsQ1FVTjRReXhOUVVGTk8wRkJRMGdzTUVKQlFVMHNTVUZCU1N4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03YVVKQlEzaENPMkZCUTBvN1FVRkRUQ3h2UWtGQlVTeEZRVUZETEd0Q1FVRlZMRXRCUVVzc1JVRkJSVHRCUVVOc1FpeHZRa0ZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhMUVVGTExFTkJRVU03UVVGRGNFSXNiMEpCUVVrc1EwRkJReXhMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc1NVRkJTU3hIUVVGSExFdEJRVXNzUTBGQlF6dEJRVU0xUXl4dlFrRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVOb1F5eHZRa0ZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1JVRkJSU3hEUVVGRE8wRkJRemRETEc5Q1FVRkpMRU5CUVVNc1kwRkJZeXhIUVVGSExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTTdRVUZEYkVNc2IwSkJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NSVUZCUXl4VlFVRlZMRVZCUVVNc1EwRkJReXhGUVVGRExGbEJRVmtzUlVGQlF5eERRVUZETEVWQlFVTXNVMEZCVXl4RlFVRkRMRU5CUVVNc1JVRkJReXhYUVVGWExFVkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTTdRVUZEZEVVc2IwSkJRVWtzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4TlFVRk5MRVZCUVVVc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eExRVUZMTEVkQlFVY3NRMEZCUXl4RFFVRkRMRVZCUVVNc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRGJrUXNiMEpCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEyaENMSFZDUVVGUExFbEJRVWtzUTBGQlF6dGhRVU5tTzBGQlEwd3NhVUpCUVVzc1JVRkJReXhwUWtGQldUdEJRVU5XTEc5Q1FVRkpMRVZCUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTNoQ0xHOUNRVUZKTEVOQlFVTXNUVUZCVFN4SlFVRkpMRVZCUVVVc1EwRkJRenRCUVVOc1FpeHZRa0ZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRE8wRkJRMlFzYjBKQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJRenRCUVVOa0xHOUNRVUZKTEVOQlFVTXNTMEZCU3l4SlFVRkpMRVZCUVVVc1EwRkJRenRCUVVOcVFpeHZRa0ZCU1N4RFFVRkRMRTlCUVU4c1NVRkJTU3hGUVVGRkxFTkJRVU03UVVGRGJrSXNiMEpCUVVrc1MwRkJTeXhIUVVGSExFVkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUTBGQlF6dEJRVU40UXl4dlFrRkJTU3hMUVVGTExFVkJRVVU3UVVGRFVDeDNRa0ZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRE8wRkJRMmhDTEhkQ1FVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExGTkJRVk1zUlVGQlJTeERRVUZETzJsQ1FVTXpRaXhOUVVGTk8wRkJRMGdzZDBKQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVU03YVVKQlF6ZENPMEZCUTBRc2IwSkJRVWtzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4TlFVRk5MRVZCUVVVc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJRenM3UVVGRmFFUXNiMEpCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRGJrTXNkVUpCUVU4c1JVRkJSU3hEUVVGRE8yRkJRMkk3UVVGRFRDeHBRa0ZCU3l4RlFVRkRMR1ZCUVZVc1JVRkJSU3hGUVVGRk8wRkJRMW9zYjBKQlFVa3NSMEZCUnl4SFFVRkhMRVZCUVVVc1EwRkJReXhOUVVGTkxFTkJRVU03UVVGRGNFSXNiMEpCUVVrc1MwRkJTeXhIUVVGSExFVkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNN08wRkJSWFJETEc5Q1FVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFVkJRVVVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRPMEZCUXk5Q0xHOUNRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFMUJRVTBzUjBGQlF5eEhRVUZITEVkQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN08wRkJSVGxFTEc5Q1FVRkpMRU5CUVVNc1RVRkJUU3hKUVVGSkxFZEJRVWNzUTBGQlF6dEJRVU51UWl4dlFrRkJTU3hSUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1pVRkJaU3hEUVVGRExFTkJRVU03UVVGRGFrUXNiMEpCUVVrc1EwRkJReXhMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhGUVVGRkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRM1pFTEc5Q1FVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1JVRkJSU3hKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFVMHNSMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenM3UVVGRk4wUXNiMEpCUVVrc1MwRkJTeXhEUVVGRExFMUJRVTBzUjBGQlF5eERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRkZCUVZFc1NVRkJTU3hMUVVGTExFTkJRVU1zVFVGQlRTeEhRVUZETEVOQlFVTXNRMEZCUXp0QlFVTndSQ3h2UWtGQlNTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU03TzBGQlJURkNMRzlDUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEVWQlFVTXNWVUZCVlN4RlFVRkZMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVlVGQlZUdEJRVU12UXl3MlFrRkJVeXhGUVVGRkxFbEJRVWtzUTBGQlF5eFJRVUZSTEVkQlFVTXNRMEZCUXp0QlFVTXhRaXhuUTBGQldTeEZRVUZGTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1dVRkJXVHRCUVVOMFF5d3JRa0ZCVnl4RlFVRkZMRXRCUVVzc1IwRkRaQ3hEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEV0QlFVc3NVVUZCVVN4RFFVRkRMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEZsQlFWa3NSMEZCUnl4RFFVRkRMRU5CUVVFc1IwRkJTU3hSUVVGUkxFTkJRVU1zVVVGQlVTeERRVUZETEUxQlFVMHNSMEZCUnl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zVFVGQlRTeEhRVUZITEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhOUVVGTkxFZEJRM0pKTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1dVRkJXU3hIUVVGSExFZEJRVWM3YVVKQlEycERMRU5CUVVNN08wRkJSVW9zYjBKQlFVa3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhOUVVGTkxFVkJRVVU3UVVGRGNrSXNkMEpCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zUzBGQlN5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFZEJRVWNzUTBGQlF5eERRVUZETzJsQ1FVTjRSRHRCUVVORUxIVkNRVUZQTEVsQlFVa3NRMEZCUXp0aFFVTm1PMEZCUTB3c1owSkJRVWtzUlVGQlF5eG5Ra0ZCV1R0QlFVTlVMRzlDUVVGSkxFTkJRVU1zUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXp0QlFVTnNRaXgxUWtGQlR5eEpRVUZKTEVOQlFVTTdZVUZEWmp0QlFVTk1MR2RDUVVGSkxFVkJRVU1zWTBGQlZTeERRVUZETEVWQlFVVTdRVUZEVml4dlFrRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzJGQlEyNURPMEZCUTB3c2NVSkJRVk1zUlVGQlF5eHhRa0ZCV1R0QlFVTmtMRzlDUVVGSkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFVkJRVVVzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0QlFVTXpSU3gxUWtGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1JVRkJSU3hIUVVGSExFdEJRVXNzUjBGQlF5eEZRVUZGTEVOQlFVRXNSMEZCU1N4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRXRCUVVzc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF6dGhRVU01UlR0QlFVTk1MSGxDUVVGaExFVkJRVU1zZVVKQlFWazdRVUZEYkVJc2IwSkJRVWtzU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNN1FVRkRkRUlzYjBKQlFVa3NTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhGUVVGRkxFVkJRVVU3UVVGRGJFSXNkMEpCUVVrc1NVRkJTU3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRVZCUVVVc1JVRkJSU3hIUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0cFFrRkRha1E3UVVGRFJDeDFRa0ZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eEZRVUZETEVWQlFVVXNRMEZCUXl4SlFVRkZMRWxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzUlVGQlJTeEhRVUZITEV0QlFVc3NSMEZCUXl4RlFVRkZMRU5CUVVFc1EwRkJReXhEUVVGRkxFOUJRVThzUTBGQlF5eExRVUZMTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNN1lVRkRMMFU3UVVGRFRDeDNRa0ZCV1N4RlFVRkRMSGRDUVVGWk8wRkJRMnBDTEc5Q1FVRkpMRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zVTBGQlV5eEZRVUZGTEVOQlFVTTdRVUZETTBJc2IwSkJRVWtzUTBGQlF5eEhRVUZITEVsQlFVa3NTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRelZETEhWQ1FVRlBMRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zWVVGQllTeEZRVUZGTEVkQlFVY3NTVUZCU1N4SFFVRkhMRU5CUVVNc1IwRkJReXhIUVVGSExFTkJRVU03WVVGRGNFUTdRVUZEVEN4blFrRkJTU3hGUVVGRExHZENRVUZaTzBGQlExUXNiMEpCUVVrc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJUdEJRVU5ZTERKQ1FVRlBMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU03YVVKQlEyNUNPMEZCUTBRc2IwSkJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZET3p0QlFVVnVReXh2UWtGQlNTeExRVUZMTEVWQlEwd3NTMEZCU3l4RlFVTk1MRk5CUVZNc1JVRkRWQ3hMUVVGTExFVkJRMHdzUjBGQlJ5eEZRVU5JTEV0QlFVc3NRMEZCUXp0QlFVTldMRzlDUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlR0QlFVTmlMSGRDUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTnFRaXgzUWtGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4RlFVRkZMRU5CUVVNN2FVSkJRMjVDTzBGQlEwUXNiMEpCUVVrc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF5eGhRVUZoTEVWQlFVVXNRMEZCUXp0QlFVTnFReXh4UWtGQlN5eEpRVUZKTEVOQlFVTXNSMEZCUXl4RFFVRkRMRVZCUVVNc1EwRkJReXhIUVVGSExFdEJRVXNzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVN1FVRkRhRU1zTmtKQlFWTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEY0VRc2QwSkJRVWtzVTBGQlV5eExRVUZMTEVOQlFVTXNTMEZCU3l4SlFVRkpMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eE5RVUZOTEVkQlFVY3NTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlFTeEJRVUZETEVWQlFVVTdRVUZEYUVVc05rSkJRVXNzUjBGQlJ5eFRRVUZUTEVOQlFVTTdRVUZEYkVJc05rSkJRVXNzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEVml3MFFrRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RlFVRkZMRTFCUVUwN2NVSkJRMnBETzJsQ1FVTktPMEZCUTBRc2IwSkJRVWtzUzBGQlN5eEZRVUZGTzBGQlExQXNlVUpCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVOQlFVTTdRVUZETVVNc2QwSkJRVWtzUzBGQlN5eEZRVUZGTEVsQlFVa3NRMEZCUXl4UlFVRlJMRWxCUVVrc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF6dEJRVU42UXl4M1FrRkJTU3hEUVVGRExFMUJRVTBzUjBGQlJ5eEZRVUZETEZWQlFWVXNSVUZCUlN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExGTkJRVk03UVVGRGFrTXNhVU5CUVZNc1JVRkJSU3hKUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZETEVOQlFVTTdRVUZETVVJc2IwTkJRVmtzUlVGQlJTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRmRCUVZjN1FVRkRja01zYlVOQlFWY3NSVUZCUlN4TFFVRkxMRWRCUVVjc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVkQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1RVRkJUU3hIUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4WFFVRlhMRWRCUVVjc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEUxQlFVMHNSVUZCUXl4RFFVRkRPMEZCUXpsS0xIZENRVUZKTEVOQlFVTXNUVUZCVFN4SlFVRkpMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU40UWl4M1FrRkJTU3hEUVVGRExFdEJRVXNzU1VGQlNTeExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRka0lzZDBKQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1MwRkJTeXhEUVVGRE8wRkJRM0pDTEhkQ1FVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRPMEZCUTJwRExIZENRVUZKTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1RVRkJUU3hGUVVGRk8wRkJRM0pDTERSQ1FVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1NVRkJTU3hEUVVGRExFMUJRVTBzU1VGQlNTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN2NVSkJRMnBGTzBGQlEwUXNkMEpCUVVrc1EwRkJReXhMUVVGTExFZEJRVWNzUzBGQlN5eERRVUZETzBGQlEyNUNMSGRDUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRCUVVOcVJDeDNRa0ZCU1N4RFFVRkRMRTlCUVU4c1NVRkJTU3hMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEZWtJc2VVSkJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEVWQlFVVXNSVUZCUlN4SlFVRkpMRVZCUVVVc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eEZRVUZETEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eE5RVUZOTEVkQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOeVNDeDNRa0ZCU1N4SlFVRkpMRU5CUVVNc1NVRkJTU3hKUVVGSkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNTVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhMUVVGTExFTkJRVU03UVVGRGFFUXNkMEpCUVVrc1MwRkJTeXhGUVVGRkxFOUJRVThzUzBGQlN5eERRVUZETEV0QlEyNUNMRTlCUVU4N2FVSkJRMlk3UVVGRFJDeHZRa0ZCU1N4SlFVRkpMRU5CUVVNc1RVRkJUU3hMUVVGTExFVkJRVVVzUlVGQlJUdEJRVU53UWl3eVFrRkJUeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETzJsQ1FVTnVRaXhOUVVGTk8wRkJRMGdzTWtKQlFVOHNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXgzUWtGQmQwSXNTVUZCUlN4SlFVRkpMRU5CUVVNc1VVRkJVU3hIUVVGRExFTkJRVU1zUTBGQlFTeEJRVUZETEVkQlFVTXNkMEpCUVhkQ0xFZEJRVU1zU1VGQlNTeERRVUZETEZsQlFWa3NSVUZCUlN4RlFVTjBSeXhGUVVGRExFbEJRVWtzUlVGQlJTeEZRVUZGTEVWQlFVVXNTMEZCU3l4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEZGQlFWRXNSVUZCUXl4RFFVRkRMRU5CUVVNN2FVSkJRM3BFTzJGQlEwbzdRVUZEVEN4bFFVRkhMRVZCUVVNc1UwRkJVeXhIUVVGSExFZEJRVWs3UVVGRFdpeHZRa0ZCU1N4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETzBGQlEzQkNMRzlDUVVGSkxFOUJRVThzUTBGQlF5eExRVUZMTEZkQlFWY3NSVUZCUlR0QlFVTXhRaXd5UWtGQlR5eERRVUZETEVOQlFVTTdhVUpCUTFvc1RVRkJUVHRCUVVOSUxESkNRVUZQTEVsQlFVa3NRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJRenRwUWtGRGNrSTdZVUZEU2p0QlFVTk1MR2xDUVVGTExFVkJRVU1zVTBGQlV5eExRVUZMTEVOQlFVVXNVMEZCVXl4RlFVRkZPMEZCUTNwQ0xHOUNRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6dGhRVU4yUXp0QlFVTk1MRzlDUVVGUkxFVkJRVU1zVTBGQlV5eFJRVUZSTEVkQlFVazdRVUZEZEVJc2RVSkJRVThzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJRenRoUVVOd1F6dEJRVU5NTEhsQ1FVRmhMRVZCUVVNc1UwRkJVeXhoUVVGaExFZEJRVWs3UVVGRGFFTXNkVUpCUVU4c1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zVFVGQlRTeEhRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRE8yRkJRMjVHTzBGQlEwd3NiMEpCUVZFc1JVRkJReXh2UWtGQldUdEJRVU5pTEhWQ1FVRlBMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4TlFVRk5MRWRCUVVNc1EwRkJReXhEUVVGRExFTkJRVU03WVVGRE5VUTdRVUZEVEN4eFFrRkJVeXhGUVVGRExGTkJRVk1zUzBGQlN5eERRVUZGTEZOQlFWTXNSVUZCUlR0QlFVTTNRaXh2UWtGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenRoUVVONlFpeEZRVUZETEVGQlFVTXNRMEZCUXp0QlFVTlNMR0ZCUVVzc1EwRkJReXhQUVVGUExFZEJRVWNzUlVGQlJTeERRVUZETzBGQlEyNUNMR0ZCUVVzc1EwRkJReXhoUVVGaExFZEJRVWNzVTBGQlV5eFRRVUZUTEVOQlFVTXNSVUZCUlN4RlFVRkRMRWRCUVVjc1JVRkJReXg1UWtGQmVVSXNSVUZCUXl4UlFVRlJMRVZCUTJoR096dEJRVWRHTEhGQ1FVRlRMRXRCUVVzc1EwRkJReXhMUVVGTExFVkJRVVVzUjBGQlJ5eEZRVUZGTzBGQlEzcENMSFZDUVVGUExFZEJRVWNzUTBGQlF5eE5RVUZOTEVkQlFVY3NSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zUzBGQlN5eEZRVUZGTEVkQlFVY3NRMEZCUXl4TlFVRk5MRWRCUVVjc1IwRkJSeXhIUVVGSExFdEJRVXNzUTBGQlF5eERRVUZETzJGQlF6TkZPenRCUVVkRUxHZENRVUZKTEU5QlFVOHNSMEZCUXl4UlFVRlJMRU5CUVVFN1FVRkRjRUlzYjBKQlFVOHNlVUpCUVhsQ08wRkJRMmhETEhGQ1FVRkxMRU5CUVVNN1FVRkROa0lzZDBKQlFVY3NSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNTMEZCU3l4TlFVRk5MRVZCUVVVN1FVRkRiRU1zTmtKQlFVc3NRMEZCUXl4RFFVRkRMRVZCUVVNc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRFdDdzBRa0ZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dHhRa0ZEYkVJc1RVRkJUU3hKUVVGSExFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzU1VGQlNTeEZRVUZGTzBGQlEzWkRMRFpDUVVGTExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTFnc05FSkJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN2NVSkJRMjVDTEUxQlFVMDdRVUZEVEN3MFFrRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0eFFrRkRiRUk3UVVGRFJDeDNRa0ZCUnl4SFFVRkhMRU5CUVVNc1RVRkJUU3hGUVVGRkxFOUJRVThzUlVGQlJTeERRVUZET3p0QlFVVTFSQ3d3UWtGQlRUdEJRVUZCTEVGQlEwNHNjVUpCUVVzc1EwRkJRenRCUVVGRExESkNRVUZQTEVWQlFVVXNRMEZCUXp0QlFVTnFRaXd3UWtGQlRUdEJRVUZCTEVGQlEwNHNjVUpCUVVzc1EwRkJRenRCUVVNMlFpeDNRa0ZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRE8wRkJRMmhDTERKQ1FVRlBMRVZCUVVVc1EwRkJRenM3UVVGRk4wTXNNRUpCUVUwN1FVRkJRU3hCUVVOT0xIRkNRVUZMTEVOQlFVTTdRVUZCUXl4M1FrRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4QlFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRE8wRkJRM0JETERCQ1FVRk5PMEZCUVVFc1FVRkRUaXh4UWtGQlN5eERRVUZETzBGQlF6UkNMSGRDUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTTdPenM3UVVGSmFFSXNkMEpCUVVrc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRTFCUVUwc1IwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN5eExRVUZMTEVWQlFVVTdRVUZETDBRc0swSkJRVThzUlVGQlJTeERRVUZETzNGQ1FVTllMRTFCUVUwN1FVRkRUQ3cyUWtGQlN5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOYUxDdENRVUZQTEdWQlFXVXNRMEZCUXp0eFFrRkRlRUk3TzBGQlJXNURMREJDUVVGTk8wRkJRVUVzUVVGRFRpeHhRa0ZCU3l4RFFVRkRPMEZCUVVVc01rSkJRVThzUlVGQlJTeERRVUZETzBGQlEyeENMREJDUVVGTk8wRkJRVUVzUVVGRFRpeHhRa0ZCU3l4RFFVRkRPMEZCUTBvc2QwSkJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXp0QlFVTm9RaXd5UWtGQlR5eEZRVUZGTEVOQlFVTTdPMEZCUlZvc01FSkJRVTA3UVVGQlFTeEJRVU5PTEhGQ1FVRkxMRU5CUVVNN1FVRkJReXd5UWtGQlR5eEZRVUZGTEVOQlFVTTdRVUZEYWtJc01FSkJRVTA3UVVGQlFTeEJRVU5PTEhGQ1FVRkxMRU5CUVVNN1FVRkJReXd5UWtGQlR5eEZRVUZGTEVOQlFVTTdRVUZEYWtJc01FSkJRVTA3UVVGQlFTeEJRVU5PTEhGQ1FVRkxMRU5CUVVNN1FVRkJSU3d5UWtGQlR5eEZRVUZGTEVOQlFVTTdRVUZEYkVJc01FSkJRVTA3UVVGQlFTeEJRVU5PTEhGQ1FVRkxMRVZCUVVVN1FVRkRNa0lzZDBKQlFVa3NRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJRenRCUVVOb1FpeDNRa0ZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU5zUWl3eVFrRkJUeXhGUVVGRkxFTkJRVU03TzBGQlJUVkRMREJDUVVGTk8wRkJRVUVzUVVGRFRpeHhRa0ZCU3l4RlFVRkZPMEZCUVVNc01rSkJRVThzUlVGQlJTeERRVUZETzBGQlEyeENMREJDUVVGTk8wRkJRVUVzUVVGRFRpeHhRa0ZCU3l4RlFVRkZPMEZCUVVNc01rSkJRVThzUlVGQlJTeERRVUZETzBGQlEyeENMREJDUVVGTk8wRkJRVUVzUVVGRFRpeHhRa0ZCU3l4RlFVRkZPMEZCUVVNc01rSkJRVThzUlVGQlJTeERRVUZETzBGQlEyeENMREJDUVVGTk8wRkJRVUVzUVVGRFRpeHhRa0ZCU3l4RlFVRkZPMEZCUVVNc01rSkJRVThzUlVGQlJTeERRVUZETzBGQlEyeENMREJDUVVGTk8wRkJRVUVzUVVGRFRpeHhRa0ZCU3l4RlFVRkZPMEZCUVVNc2QwSkJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXl4QlFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRE8wRkJRMjVETERCQ1FVRk5PMEZCUVVFc1FVRkRUaXh4UWtGQlN5eEZRVUZGTzBGQlFVTXNkMEpCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF5eEJRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRPMEZCUTI1RExEQkNRVUZOTzBGQlFVRXNRVUZEVGl4eFFrRkJTeXhGUVVGRk8wRkJRVU1zTWtKQlFVOHNSVUZCUlN4RFFVRkRPMEZCUTJ4Q0xEQkNRVUZOTzBGQlFVRXNRVUZEVGl4eFFrRkJTeXhGUVVGRk8wRkJRVU1zTWtKQlFVOHNSVUZCUlN4RFFVRkRPMEZCUTJ4Q0xEQkNRVUZOTzBGQlFVRXNRVUZEVGl4eFFrRkJTeXhGUVVGRk8wRkJRVU1zTWtKQlFVOHNSVUZCUlN4RFFVRkRPMEZCUTJ4Q0xEQkNRVUZOTzBGQlFVRXNRVUZEVGl4eFFrRkJTeXhGUVVGRk8wRkJRVU1zTWtKQlFVOHNSVUZCUlN4RFFVRkRPMEZCUTJ4Q0xEQkNRVUZOTzBGQlFVRXNRVUZEVGl4eFFrRkJTeXhGUVVGRk8wRkJRMHdzZDBKQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzBGQlEzWkNMSGRDUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTTdRVUZEYUVJc2QwSkJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN08wRkJSWEJDTERCQ1FVRk5PMEZCUVVFc1FVRkRUaXh4UWtGQlN5eEZRVUZGTzBGQlEwd3NkMEpCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF6dEJRVU5vUWl3eVFrRkJUeXhGUVVGRkxFTkJRVU03TzBGQlJWb3NNRUpCUVUwN1FVRkJRU3hCUVVOT0xIRkNRVUZMTEVWQlFVVTdRVUZCUXl3eVFrRkJUeXhGUVVGRkxFTkJRVU03UVVGRGJFSXNNRUpCUVUwN1FVRkJRU3hCUVVOT0xIRkNRVUZMTEVWQlFVVTdRVUZCUXl3eVFrRkJUeXhGUVVGRkxFTkJRVU03UVVGRGJFSXNNRUpCUVUwN1FVRkJRU3hCUVVOT0xIRkNRVUZMTEVWQlFVVTdRVUZCUXl3eVFrRkJUeXhGUVVGRkxFTkJRVU03UVVGRGJFSXNNRUpCUVUwN1FVRkJRU3hCUVVOT0xIRkNRVUZMTEVWQlFVVTdRVUZCUXl3eVFrRkJUeXhGUVVGRkxFTkJRVU03UVVGRGJFSXNNRUpCUVUwN1FVRkJRU3hCUVVOT0xIRkNRVUZMTEVWQlFVVTdRVUZCUXl3eVFrRkJUeXhGUVVGRkxFTkJRVU03UVVGRGJFSXNNRUpCUVUwN1FVRkJRU3hCUVVOT0xIRkNRVUZMTEVWQlFVVTdPMEZCUTFBc01FSkJRVTA3UVVGQlFTeEJRVU5PTEhGQ1FVRkxMRVZCUVVVN1FVRkJReXgzUWtGQlNTeERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRMRUZCUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU03UVVGRGJrTXNNRUpCUVUwN1FVRkJRU3hCUVVOT0xIRkNRVUZMTEVWQlFVVTdRVUZCUXl4M1FrRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETEVGQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNN1FVRkRia01zTUVKQlFVMDdRVUZCUVN4QlFVTk9MSEZDUVVGTExFVkJRVVU3UVVGQlF5eDFRa0ZCUnl4RFFVRkRMRTFCUVUwc1IwRkJSeXhMUVVGTExFTkJRVU1zUTBGQlF5eEZRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhOUVVGTkxFVkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRVUZCUXl4UFFVRlBMRVZCUVVVc1EwRkJRenRCUVVNdlJDd3dRa0ZCVFR0QlFVRkJMRUZCUTA0c2NVSkJRVXNzUlVGQlJUdEJRVUZETEhWQ1FVRkhMRU5CUVVNc1RVRkJUU3hIUVVGSExFdEJRVXNzUTBGQlF5eERRVUZETEVWQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUlVGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4QlFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRE8wRkJReTlFTERCQ1FVRk5PMEZCUVVFc1FVRkRUaXh4UWtGQlN5eEZRVUZGTzBGQlFVTXNNa0pCUVU4c1JVRkJSU3hEUVVGRE8wRkJRMnhDTERCQ1FVRk5PMEZCUVVFc1FVRkRUaXh4UWtGQlN5eEZRVUZGTzBGQlFVTXNNa0pCUVU4c1JVRkJSU3hEUVVGRE8wRkJRMnhDTERCQ1FVRk5PMEZCUVVFc1FVRkRUaXh4UWtGQlN5eEZRVUZGTzBGQlFVTXNNa0pCUVU4c1JVRkJSU3hEUVVGRE8wRkJRMnhDTERCQ1FVRk5PMEZCUVVFc1FVRkRUaXh4UWtGQlN5eEZRVUZGTzBGQlFVTXNNa0pCUVU4c1JVRkJSU3hEUVVGRE8wRkJRMnhDTERCQ1FVRk5PMEZCUVVFc1FVRkRUaXh4UWtGQlN5eEZRVUZGTzBGQlFVTXNNa0pCUVU4c1JVRkJSU3hEUVVGRE8wRkJRMnhDTERCQ1FVRk5PMEZCUVVFc1FVRkRUaXh4UWtGQlN5eEZRVUZGTzBGQlFVTXNNa0pCUVU4c1JVRkJSU3hEUVVGRE8wRkJRMnhDTERCQ1FVRk5PMEZCUVVFc1FVRkRUaXh4UWtGQlN5eEZRVUZGTzBGQlFVTXNNa0pCUVU4c1JVRkJSU3hEUVVGRE8wRkJRMnhDTERCQ1FVRk5PMEZCUVVFc1FVRkRUaXh4UWtGQlN5eEZRVUZGTzBGQlFVTXNNa0pCUVU4c1JVRkJSU3hEUVVGRE8wRkJRMnhDTERCQ1FVRk5PMEZCUVVFc1FVRkRUaXh4UWtGQlN5eEZRVUZGTzBGQlFVTXNNa0pCUVU4c1JVRkJSU3hEUVVGRE8wRkJRMnhDTERCQ1FVRk5PMEZCUVVFc1FVRkRUaXh4UWtGQlN5eEZRVUZGTzBGQlFVTXNkVUpCUVVjc1EwRkJReXhOUVVGTkxFZEJRVWNzUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1lVRkJZU3hGUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVGQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNN1FVRkRka1VzTUVKQlFVMDdRVUZCUVN4QlFVTk9MSEZDUVVGTExFVkJRVVU3UVVGQlF5d3lRa0ZCVHl4VFFVRlRMRU5CUVVNN1FVRkRla0lzTUVKQlFVMDdRVUZCUVN4QlFVTk9MSEZDUVVGTExFVkJRVVU3UVVGQlF5d3lRa0ZCVHl4RFFVRkRMRU5CUVVNN1FVRkRha0lzTUVKQlFVMDdRVUZCUVN4aFFVTk1PMU5CUTBFc1EwRkJRenRCUVVOR0xHRkJRVXNzUTBGQlF5eExRVUZMTEVkQlFVY3NRMEZCUXl3d1FrRkJNRUlzUlVGQlF5eGxRVUZsTEVWQlFVTXNLME5CUVN0RExFVkJRVU1zZFVKQlFYVkNMRVZCUVVNc2IwVkJRVzlGTEVWQlFVTXNPRUpCUVRoQ0xFVkJRVU1zZVVKQlFYbENMRVZCUVVNc1UwRkJVeXhGUVVGRExGTkJRVk1zUlVGQlF5eGxRVUZsTEVWQlFVTXNaVUZCWlN4RlFVRkRMR2RDUVVGblFpeEZRVUZETEdsQ1FVRnBRaXhGUVVGRExHMUNRVUZ0UWl4RlFVRkRMR2xDUVVGcFFpeEZRVUZETERSQ1FVRTBRaXhGUVVGRExHbERRVUZwUXl4RlFVRkRMR2xDUVVGcFFpeEZRVUZETEhkQ1FVRjNRaXhGUVVGRExHbENRVUZwUWl4RlFVRkRMR2RDUVVGblFpeEZRVUZETEd0Q1FVRnJRaXhGUVVGRExEUkNRVUUwUWl4RlFVRkRMR3RDUVVGclFpeEZRVUZETEZGQlFWRXNSVUZCUXl4WFFVRlhMRVZCUVVNc01rSkJRVEpDTEVWQlFVTXNXVUZCV1N4RlFVRkRMRlZCUVZVc1JVRkJReXhwUWtGQmFVSXNSVUZCUXl4bFFVRmxMRVZCUVVNc2MwSkJRWE5DTEVWQlFVTXNjMEpCUVhOQ0xFVkJRVU1zVVVGQlVTeEZRVUZETEhkQ1FVRjNRaXhGUVVGRExIbENRVUY1UWl4RlFVRkRMRFpDUVVFMlFpeEZRVUZETEhkQ1FVRjNRaXhGUVVGRExIbERRVUY1UXl4RlFVRkRMR05CUVdNc1JVRkJReXhUUVVGVExFVkJRVU1zZVVSQlFYbEVMRVZCUVVNc2QwSkJRWGRDTEVWQlFVTXNVVUZCVVN4RlFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wRkJRMnhuUXl4aFFVRkxMRU5CUVVNc1ZVRkJWU3hIUVVGSExFVkJRVU1zU1VGQlNTeEZRVUZETEVWQlFVTXNUMEZCVHl4RlFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRExFTkJRVU1zUlVGQlF5eERRVUZETEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVVVzUlVGQlF5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkRMRVZCUVVVc1JVRkJReXhGUVVGRkxFVkJRVU1zUlVGQlJTeEZRVUZETEVWQlFVVXNSVUZCUXl4RlFVRkZMRVZCUVVNc1JVRkJSU3hGUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZETEZkQlFWY3NSVUZCUXl4TFFVRkxMRVZCUVVNc1JVRkJReXhMUVVGTExFVkJRVU1zUlVGQlF5eFBRVUZQTEVWQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhYUVVGWExFVkJRVU1zUzBGQlN5eEZRVUZETEVWQlFVTXNTMEZCU3l4RlFVRkRMRVZCUVVNc1QwRkJUeXhGUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNWMEZCVnl4RlFVRkRMRXRCUVVzc1JVRkJReXhGUVVGRExFdEJRVXNzUlVGQlF5eEZRVUZETEU5QlFVOHNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhEUVVGRExFVkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNWMEZCVnl4RlFVRkRMRXRCUVVzc1JVRkJReXhGUVVGRExGTkJRVk1zUlVGQlF5eEZRVUZETEU5QlFVOHNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkJReXhEUVVGRExFVkJRVU1zUlVGQlJTeERRVUZETEVWQlFVTXNWMEZCVnl4RlFVRkRMRWxCUVVrc1JVRkJReXhGUVVGRExFTkJRVU03UVVGRE0xVXNaVUZCVHl4TFFVRkxMRU5CUVVNN1MwRkJReXhEUVVGQkxFVkJRVWNzUTBGQlFUdEJRVU5xUWl4VlFVRk5MRU5CUVVNc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlF6dEJRVU55UWl4aFFVRlRMRTFCUVUwc1IwRkJTVHRCUVVGRkxGbEJRVWtzUTBGQlF5eEZRVUZGTEVkQlFVY3NSVUZCUlN4RFFVRkRPMHRCUVVVc1RVRkJUU3hEUVVGRExGTkJRVk1zUjBGQlJ5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRTFCUVUwc1IwRkJSeXhOUVVGTkxFTkJRVU03UVVGRGNrWXNWMEZCVHl4SlFVRkpMRTFCUVUwc1JVRkJRU3hEUVVGRE8wTkJRMnBDTEVOQlFVRXNSVUZCUnl4RFFVRkRMSEZDUVVGbExGVkJRVlVpTENKbWFXeGxJam9pY0dGeWMyVnlMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5OGdSbWxzWlNCcFoyNXZjbVZrSUdsdUlHTnZkbVZ5WVdkbElIUmxjM1J6SUhacFlTQnpaWFIwYVc1bklHbHVJQzVwYzNSaGJtSjFiQzU1Yld4Y2JpOHFJRXBwYzI5dUlHZGxibVZ5WVhSbFpDQndZWEp6WlhJZ0tpOWNiblpoY2lCb1lXNWtiR1ZpWVhKeklEMGdLR1oxYm1OMGFXOXVLQ2w3WEc1MllYSWdjR0Z5YzJWeUlEMGdlM1J5WVdObE9pQm1kVzVqZEdsdmJpQjBjbUZqWlNBb0tTQjdJSDBzWEc1NWVUb2dlMzBzWEc1emVXMWliMnh6WHpvZ2Uxd2laWEp5YjNKY0lqb3lMRndpY205dmRGd2lPak1zWENKd2NtOW5jbUZ0WENJNk5DeGNJa1ZQUmx3aU9qVXNYQ0p3Y205bmNtRnRYM0psY0dWMGFYUnBiMjR3WENJNk5peGNJbk4wWVhSbGJXVnVkRndpT2pjc1hDSnRkWE4wWVdOb1pWd2lPamdzWENKaWJHOWphMXdpT2prc1hDSnlZWGRDYkc5amExd2lPakV3TEZ3aWNHRnlkR2xoYkZ3aU9qRXhMRndpY0dGeWRHbGhiRUpzYjJOclhDSTZNVElzWENKamIyNTBaVzUwWENJNk1UTXNYQ0pEVDAxTlJVNVVYQ0k2TVRRc1hDSkRUMDVVUlU1VVhDSTZNVFVzWENKdmNHVnVVbUYzUW14dlkydGNJam94Tml4Y0luSmhkMEpzYjJOclgzSmxjR1YwYVhScGIyNHdYQ0k2TVRjc1hDSkZUa1JmVWtGWFgwSk1UME5MWENJNk1UZ3NYQ0pQVUVWT1gxSkJWMTlDVEU5RFMxd2lPakU1TEZ3aWFHVnNjR1Z5VG1GdFpWd2lPakl3TEZ3aWIzQmxibEpoZDBKc2IyTnJYM0psY0dWMGFYUnBiMjR3WENJNk1qRXNYQ0p2Y0dWdVVtRjNRbXh2WTJ0ZmIzQjBhVzl1TUZ3aU9qSXlMRndpUTB4UFUwVmZVa0ZYWDBKTVQwTkxYQ0k2TWpNc1hDSnZjR1Z1UW14dlkydGNJam95TkN4Y0ltSnNiMk5yWDI5d2RHbHZiakJjSWpveU5TeGNJbU5zYjNObFFteHZZMnRjSWpveU5peGNJbTl3Wlc1SmJuWmxjbk5sWENJNk1qY3NYQ0ppYkc5amExOXZjSFJwYjI0eFhDSTZNamdzWENKUFVFVk9YMEpNVDBOTFhDSTZNamtzWENKdmNHVnVRbXh2WTJ0ZmNtVndaWFJwZEdsdmJqQmNJam96TUN4Y0ltOXdaVzVDYkc5amExOXZjSFJwYjI0d1hDSTZNekVzWENKdmNHVnVRbXh2WTJ0ZmIzQjBhVzl1TVZ3aU9qTXlMRndpUTB4UFUwVmNJam96TXl4Y0lrOVFSVTVmU1U1V1JWSlRSVndpT2pNMExGd2liM0JsYmtsdWRtVnljMlZmY21Wd1pYUnBkR2x2YmpCY0lqb3pOU3hjSW05d1pXNUpiblpsY25ObFgyOXdkR2x2YmpCY0lqb3pOaXhjSW05d1pXNUpiblpsY25ObFgyOXdkR2x2YmpGY0lqb3pOeXhjSW05d1pXNUpiblpsY25ObFEyaGhhVzVjSWpvek9DeGNJazlRUlU1ZlNVNVdSVkpUUlY5RFNFRkpUbHdpT2pNNUxGd2liM0JsYmtsdWRtVnljMlZEYUdGcGJsOXlaWEJsZEdsMGFXOXVNRndpT2pRd0xGd2liM0JsYmtsdWRtVnljMlZEYUdGcGJsOXZjSFJwYjI0d1hDSTZOREVzWENKdmNHVnVTVzUyWlhKelpVTm9ZV2x1WDI5d2RHbHZiakZjSWpvME1peGNJbWx1ZG1WeWMyVkJibVJRY205bmNtRnRYQ0k2TkRNc1hDSkpUbFpGVWxORlhDSTZORFFzWENKcGJuWmxjbk5sUTJoaGFXNWNJam8wTlN4Y0ltbHVkbVZ5YzJWRGFHRnBibDl2Y0hScGIyNHdYQ0k2TkRZc1hDSlBVRVZPWDBWT1JFSk1UME5MWENJNk5EY3NYQ0pQVUVWT1hDSTZORGdzWENKdGRYTjBZV05vWlY5eVpYQmxkR2wwYVc5dU1Gd2lPalE1TEZ3aWJYVnpkR0ZqYUdWZmIzQjBhVzl1TUZ3aU9qVXdMRndpVDFCRlRsOVZUa1ZUUTBGUVJVUmNJam8xTVN4Y0ltMTFjM1JoWTJobFgzSmxjR1YwYVhScGIyNHhYQ0k2TlRJc1hDSnRkWE4wWVdOb1pWOXZjSFJwYjI0eFhDSTZOVE1zWENKRFRFOVRSVjlWVGtWVFEwRlFSVVJjSWpvMU5DeGNJazlRUlU1ZlVFRlNWRWxCVEZ3aU9qVTFMRndpY0dGeWRHbGhiRTVoYldWY0lqbzFOaXhjSW5CaGNuUnBZV3hmY21Wd1pYUnBkR2x2YmpCY0lqbzFOeXhjSW5CaGNuUnBZV3hmYjNCMGFXOXVNRndpT2pVNExGd2liM0JsYmxCaGNuUnBZV3hDYkc5amExd2lPalU1TEZ3aVQxQkZUbDlRUVZKVVNVRk1YMEpNVDBOTFhDSTZOakFzWENKdmNHVnVVR0Z5ZEdsaGJFSnNiMk5yWDNKbGNHVjBhWFJwYjI0d1hDSTZOakVzWENKdmNHVnVVR0Z5ZEdsaGJFSnNiMk5yWDI5d2RHbHZiakJjSWpvMk1peGNJbkJoY21GdFhDSTZOak1zWENKelpYaHdjbHdpT2pZMExGd2lUMUJGVGw5VFJWaFFVbHdpT2pZMUxGd2ljMlY0Y0hKZmNtVndaWFJwZEdsdmJqQmNJam8yTml4Y0luTmxlSEJ5WDI5d2RHbHZiakJjSWpvMk55eGNJa05NVDFORlgxTkZXRkJTWENJNk5qZ3NYQ0pvWVhOb1hDSTZOamtzWENKb1lYTm9YM0psY0dWMGFYUnBiMjVmY0d4MWN6QmNJam8zTUN4Y0ltaGhjMmhUWldkdFpXNTBYQ0k2TnpFc1hDSkpSRndpT2pjeUxGd2lSVkZWUVV4VFhDSTZOek1zWENKaWJHOWphMUJoY21GdGMxd2lPamMwTEZ3aVQxQkZUbDlDVEU5RFMxOVFRVkpCVFZOY0lqbzNOU3hjSW1Kc2IyTnJVR0Z5WVcxelgzSmxjR1YwYVhScGIyNWZjR3gxY3pCY0lqbzNOaXhjSWtOTVQxTkZYMEpNVDBOTFgxQkJVa0ZOVTF3aU9qYzNMRndpY0dGMGFGd2lPamM0TEZ3aVpHRjBZVTVoYldWY0lqbzNPU3hjSWxOVVVrbE9SMXdpT2pnd0xGd2lUbFZOUWtWU1hDSTZPREVzWENKQ1QwOU1SVUZPWENJNk9ESXNYQ0pWVGtSRlJrbE9SVVJjSWpvNE15eGNJazVWVEV4Y0lqbzROQ3hjSWtSQlZFRmNJam80TlN4Y0luQmhkR2hUWldkdFpXNTBjMXdpT2pnMkxGd2lVMFZRWENJNk9EY3NYQ0lrWVdOalpYQjBYQ0k2TUN4Y0lpUmxibVJjSWpveGZTeGNiblJsY20xcGJtRnNjMTg2SUhzeU9sd2laWEp5YjNKY0lpdzFPbHdpUlU5R1hDSXNNVFE2WENKRFQwMU5SVTVVWENJc01UVTZYQ0pEVDA1VVJVNVVYQ0lzTVRnNlhDSkZUa1JmVWtGWFgwSk1UME5MWENJc01UazZYQ0pQVUVWT1gxSkJWMTlDVEU5RFMxd2lMREl6T2x3aVEweFBVMFZmVWtGWFgwSk1UME5MWENJc01qazZYQ0pQVUVWT1gwSk1UME5MWENJc016TTZYQ0pEVEU5VFJWd2lMRE0wT2x3aVQxQkZUbDlKVGxaRlVsTkZYQ0lzTXprNlhDSlBVRVZPWDBsT1ZrVlNVMFZmUTBoQlNVNWNJaXcwTkRwY0lrbE9Wa1ZTVTBWY0lpdzBOenBjSWs5UVJVNWZSVTVFUWt4UFEwdGNJaXcwT0RwY0lrOVFSVTVjSWl3MU1UcGNJazlRUlU1ZlZVNUZVME5CVUVWRVhDSXNOVFE2WENKRFRFOVRSVjlWVGtWVFEwRlFSVVJjSWl3MU5UcGNJazlRUlU1ZlVFRlNWRWxCVEZ3aUxEWXdPbHdpVDFCRlRsOVFRVkpVU1VGTVgwSk1UME5MWENJc05qVTZYQ0pQVUVWT1gxTkZXRkJTWENJc05qZzZYQ0pEVEU5VFJWOVRSVmhRVWx3aUxEY3lPbHdpU1VSY0lpdzNNenBjSWtWUlZVRk1VMXdpTERjMU9sd2lUMUJGVGw5Q1RFOURTMTlRUVZKQlRWTmNJaXczTnpwY0lrTk1UMU5GWDBKTVQwTkxYMUJCVWtGTlUxd2lMRGd3T2x3aVUxUlNTVTVIWENJc09ERTZYQ0pPVlUxQ1JWSmNJaXc0TWpwY0lrSlBUMHhGUVU1Y0lpdzRNenBjSWxWT1JFVkdTVTVGUkZ3aUxEZzBPbHdpVGxWTVRGd2lMRGcxT2x3aVJFRlVRVndpTERnM09sd2lVMFZRWENKOUxGeHVjSEp2WkhWamRHbHZibk5mT2lCYk1DeGJNeXd5WFN4Yk5Dd3hYU3hiTnl3eFhTeGJOeXd4WFN4Yk55d3hYU3hiTnl3eFhTeGJOeXd4WFN4Yk55d3hYU3hiTnl3eFhTeGJNVE1zTVYwc1d6RXdMRE5kTEZzeE5pdzFYU3hiT1N3MFhTeGJPU3cwWFN4Yk1qUXNObDBzV3pJM0xEWmRMRnN6T0N3MlhTeGJORE1zTWwwc1d6UTFMRE5kTEZzME5Td3hYU3hiTWpZc00xMHNXemdzTlYwc1d6Z3NOVjBzV3pFeExEVmRMRnN4TWl3elhTeGJOVGtzTlYwc1d6WXpMREZkTEZzMk15d3hYU3hiTmpRc05WMHNXelk1TERGZExGczNNU3d6WFN4Yk56UXNNMTBzV3pJd0xERmRMRnN5TUN3eFhTeGJNakFzTVYwc1d6SXdMREZkTEZzeU1Dd3hYU3hiTWpBc01WMHNXekl3TERGZExGczFOaXd4WFN4Yk5UWXNNVjBzV3pjNUxESmRMRnMzT0N3eFhTeGJPRFlzTTEwc1d6ZzJMREZkTEZzMkxEQmRMRnMyTERKZExGc3hOeXd3WFN4Yk1UY3NNbDBzV3pJeExEQmRMRnN5TVN3eVhTeGJNaklzTUYwc1d6SXlMREZkTEZzeU5Td3dYU3hiTWpVc01WMHNXekk0TERCZExGc3lPQ3d4WFN4Yk16QXNNRjBzV3pNd0xESmRMRnN6TVN3d1hTeGJNekVzTVYwc1d6TXlMREJkTEZzek1pd3hYU3hiTXpVc01GMHNXek0xTERKZExGc3pOaXd3WFN4Yk16WXNNVjBzV3pNM0xEQmRMRnN6Tnl3eFhTeGJOREFzTUYwc1d6UXdMREpkTEZzME1Td3dYU3hiTkRFc01WMHNXelF5TERCZExGczBNaXd4WFN4Yk5EWXNNRjBzV3pRMkxERmRMRnMwT1N3d1hTeGJORGtzTWwwc1d6VXdMREJkTEZzMU1Dd3hYU3hiTlRJc01GMHNXelV5TERKZExGczFNeXd3WFN4Yk5UTXNNVjBzV3pVM0xEQmRMRnMxTnl3eVhTeGJOVGdzTUYwc1d6VTRMREZkTEZzMk1Td3dYU3hiTmpFc01sMHNXell5TERCZExGczJNaXd4WFN4Yk5qWXNNRjBzV3pZMkxESmRMRnMyTnl3d1hTeGJOamNzTVYwc1d6Y3dMREZkTEZzM01Dd3lYU3hiTnpZc01WMHNXemMyTERKZFhTeGNibkJsY21admNtMUJZM1JwYjI0NklHWjFibU4wYVc5dUlHRnViMjU1Ylc5MWN5aDVlWFJsZUhRc2VYbHNaVzVuTEhsNWJHbHVaVzV2TEhsNUxIbDVjM1JoZEdVc0pDUXNYeVJjYmlrZ2UxeHVYRzUyWVhJZ0pEQWdQU0FrSkM1c1pXNW5kR2dnTFNBeE8xeHVjM2RwZEdOb0lDaDVlWE4wWVhSbEtTQjdYRzVqWVhObElERTZJSEpsZEhWeWJpQWtKRnNrTUMweFhUc2dYRzVpY21WaGF6dGNibU5oYzJVZ01qcDBhR2x6TGlRZ1BTQjVlUzV3Y21Wd1lYSmxVSEp2WjNKaGJTZ2tKRnNrTUYwcE8xeHVZbkpsWVdzN1hHNWpZWE5sSURNNmRHaHBjeTRrSUQwZ0pDUmJKREJkTzF4dVluSmxZV3M3WEc1allYTmxJRFE2ZEdocGN5NGtJRDBnSkNSYkpEQmRPMXh1WW5KbFlXczdYRzVqWVhObElEVTZkR2hwY3k0a0lEMGdKQ1JiSkRCZE8xeHVZbkpsWVdzN1hHNWpZWE5sSURZNmRHaHBjeTRrSUQwZ0pDUmJKREJkTzF4dVluSmxZV3M3WEc1allYTmxJRGM2ZEdocGN5NGtJRDBnSkNSYkpEQmRPMXh1WW5KbFlXczdYRzVqWVhObElEZzZkR2hwY3k0a0lEMGdKQ1JiSkRCZE8xeHVZbkpsWVdzN1hHNWpZWE5sSURrNlhHNGdJQ0FnZEdocGN5NGtJRDBnZTF4dUlDQWdJQ0FnZEhsd1pUb2dKME52YlcxbGJuUlRkR0YwWlcxbGJuUW5MRnh1SUNBZ0lDQWdkbUZzZFdVNklIbDVMbk4wY21sd1EyOXRiV1Z1ZENna0pGc2tNRjBwTEZ4dUlDQWdJQ0FnYzNSeWFYQTZJSGw1TG5OMGNtbHdSbXhoWjNNb0pDUmJKREJkTENBa0pGc2tNRjBwTEZ4dUlDQWdJQ0FnYkc5ak9pQjVlUzVzYjJOSmJtWnZLSFJvYVhNdVh5UXBYRzRnSUNBZ2ZUdGNiaUFnWEc1aWNtVmhhenRjYm1OaGMyVWdNVEE2WEc0Z0lDQWdkR2hwY3k0a0lEMGdlMXh1SUNBZ0lDQWdkSGx3WlRvZ0owTnZiblJsYm5SVGRHRjBaVzFsYm5RbkxGeHVJQ0FnSUNBZ2IzSnBaMmx1WVd3NklDUWtXeVF3WFN4Y2JpQWdJQ0FnSUhaaGJIVmxPaUFrSkZza01GMHNYRzRnSUNBZ0lDQnNiMk02SUhsNUxteHZZMGx1Wm04b2RHaHBjeTVmSkNsY2JpQWdJQ0I5TzF4dUlDQmNibUp5WldGck8xeHVZMkZ6WlNBeE1UcDBhR2x6TGlRZ1BTQjVlUzV3Y21Wd1lYSmxVbUYzUW14dlkyc29KQ1JiSkRBdE1sMHNJQ1FrV3lRd0xURmRMQ0FrSkZza01GMHNJSFJvYVhNdVh5UXBPMXh1WW5KbFlXczdYRzVqWVhObElERXlPblJvYVhNdUpDQTlJSHNnY0dGMGFEb2dKQ1JiSkRBdE0xMHNJSEJoY21GdGN6b2dKQ1JiSkRBdE1sMHNJR2hoYzJnNklDUWtXeVF3TFRGZElIMDdYRzVpY21WaGF6dGNibU5oYzJVZ01UTTZkR2hwY3k0a0lEMGdlWGt1Y0hKbGNHRnlaVUpzYjJOcktDUWtXeVF3TFROZExDQWtKRnNrTUMweVhTd2dKQ1JiSkRBdE1WMHNJQ1FrV3lRd1hTd2dabUZzYzJVc0lIUm9hWE11WHlRcE8xeHVZbkpsWVdzN1hHNWpZWE5sSURFME9uUm9hWE11SkNBOUlIbDVMbkJ5WlhCaGNtVkNiRzlqYXlna0pGc2tNQzB6WFN3Z0pDUmJKREF0TWwwc0lDUWtXeVF3TFRGZExDQWtKRnNrTUYwc0lIUnlkV1VzSUhSb2FYTXVYeVFwTzF4dVluSmxZV3M3WEc1allYTmxJREUxT25Sb2FYTXVKQ0E5SUhzZ2IzQmxiam9nSkNSYkpEQXROVjBzSUhCaGRHZzZJQ1FrV3lRd0xUUmRMQ0J3WVhKaGJYTTZJQ1FrV3lRd0xUTmRMQ0JvWVhOb09pQWtKRnNrTUMweVhTd2dZbXh2WTJ0UVlYSmhiWE02SUNRa1d5UXdMVEZkTENCemRISnBjRG9nZVhrdWMzUnlhWEJHYkdGbmN5Z2tKRnNrTUMwMVhTd2dKQ1JiSkRCZEtTQjlPMXh1WW5KbFlXczdYRzVqWVhObElERTJPblJvYVhNdUpDQTlJSHNnY0dGMGFEb2dKQ1JiSkRBdE5GMHNJSEJoY21GdGN6b2dKQ1JiSkRBdE0xMHNJR2hoYzJnNklDUWtXeVF3TFRKZExDQmliRzlqYTFCaGNtRnRjem9nSkNSYkpEQXRNVjBzSUhOMGNtbHdPaUI1ZVM1emRISnBjRVpzWVdkektDUWtXeVF3TFRWZExDQWtKRnNrTUYwcElIMDdYRzVpY21WaGF6dGNibU5oYzJVZ01UYzZkR2hwY3k0a0lEMGdleUJ3WVhSb09pQWtKRnNrTUMwMFhTd2djR0Z5WVcxek9pQWtKRnNrTUMwelhTd2dhR0Z6YURvZ0pDUmJKREF0TWwwc0lHSnNiMk5yVUdGeVlXMXpPaUFrSkZza01DMHhYU3dnYzNSeWFYQTZJSGw1TG5OMGNtbHdSbXhoWjNNb0pDUmJKREF0TlYwc0lDUWtXeVF3WFNrZ2ZUdGNibUp5WldGck8xeHVZMkZ6WlNBeE9EcDBhR2x6TGlRZ1BTQjdJSE4wY21sd09pQjVlUzV6ZEhKcGNFWnNZV2R6S0NRa1d5UXdMVEZkTENBa0pGc2tNQzB4WFNrc0lIQnliMmR5WVcwNklDUWtXeVF3WFNCOU8xeHVZbkpsWVdzN1hHNWpZWE5sSURFNU9seHVJQ0FnSUhaaGNpQnBiblpsY25ObElEMGdlWGt1Y0hKbGNHRnlaVUpzYjJOcktDUWtXeVF3TFRKZExDQWtKRnNrTUMweFhTd2dKQ1JiSkRCZExDQWtKRnNrTUYwc0lHWmhiSE5sTENCMGFHbHpMbDhrS1N4Y2JpQWdJQ0FnSUNBZ2NISnZaM0poYlNBOUlIbDVMbkJ5WlhCaGNtVlFjbTluY21GdEtGdHBiblpsY25ObFhTd2dKQ1JiSkRBdE1WMHViRzlqS1R0Y2JpQWdJQ0J3Y205bmNtRnRMbU5vWVdsdVpXUWdQU0IwY25WbE8xeHVYRzRnSUNBZ2RHaHBjeTRrSUQwZ2V5QnpkSEpwY0RvZ0pDUmJKREF0TWwwdWMzUnlhWEFzSUhCeWIyZHlZVzA2SUhCeWIyZHlZVzBzSUdOb1lXbHVPaUIwY25WbElIMDdYRzRnSUZ4dVluSmxZV3M3WEc1allYTmxJREl3T25Sb2FYTXVKQ0E5SUNRa1d5UXdYVHRjYm1KeVpXRnJPMXh1WTJGelpTQXlNVHAwYUdsekxpUWdQU0I3Y0dGMGFEb2dKQ1JiSkRBdE1WMHNJSE4wY21sd09pQjVlUzV6ZEhKcGNFWnNZV2R6S0NRa1d5UXdMVEpkTENBa0pGc2tNRjBwZlR0Y2JtSnlaV0ZyTzF4dVkyRnpaU0F5TWpwMGFHbHpMaVFnUFNCNWVTNXdjbVZ3WVhKbFRYVnpkR0ZqYUdVb0pDUmJKREF0TTEwc0lDUWtXeVF3TFRKZExDQWtKRnNrTUMweFhTd2dKQ1JiSkRBdE5GMHNJSGw1TG5OMGNtbHdSbXhoWjNNb0pDUmJKREF0TkYwc0lDUWtXeVF3WFNrc0lIUm9hWE11WHlRcE8xeHVZbkpsWVdzN1hHNWpZWE5sSURJek9uUm9hWE11SkNBOUlIbDVMbkJ5WlhCaGNtVk5kWE4wWVdOb1pTZ2tKRnNrTUMwelhTd2dKQ1JiSkRBdE1sMHNJQ1FrV3lRd0xURmRMQ0FrSkZza01DMDBYU3dnZVhrdWMzUnlhWEJHYkdGbmN5Z2tKRnNrTUMwMFhTd2dKQ1JiSkRCZEtTd2dkR2hwY3k1ZkpDazdYRzVpY21WaGF6dGNibU5oYzJVZ01qUTZYRzRnSUNBZ2RHaHBjeTRrSUQwZ2UxeHVJQ0FnSUNBZ2RIbHdaVG9nSjFCaGNuUnBZV3hUZEdGMFpXMWxiblFuTEZ4dUlDQWdJQ0FnYm1GdFpUb2dKQ1JiSkRBdE0xMHNYRzRnSUNBZ0lDQndZWEpoYlhNNklDUWtXeVF3TFRKZExGeHVJQ0FnSUNBZ2FHRnphRG9nSkNSYkpEQXRNVjBzWEc0Z0lDQWdJQ0JwYm1SbGJuUTZJQ2NuTEZ4dUlDQWdJQ0FnYzNSeWFYQTZJSGw1TG5OMGNtbHdSbXhoWjNNb0pDUmJKREF0TkYwc0lDUWtXeVF3WFNrc1hHNGdJQ0FnSUNCc2IyTTZJSGw1TG14dlkwbHVabThvZEdocGN5NWZKQ2xjYmlBZ0lDQjlPMXh1SUNCY2JtSnlaV0ZyTzF4dVkyRnpaU0F5TlRwMGFHbHpMaVFnUFNCNWVTNXdjbVZ3WVhKbFVHRnlkR2xoYkVKc2IyTnJLQ1FrV3lRd0xUSmRMQ0FrSkZza01DMHhYU3dnSkNSYkpEQmRMQ0IwYUdsekxsOGtLVHRjYm1KeVpXRnJPMXh1WTJGelpTQXlOanAwYUdsekxpUWdQU0I3SUhCaGRHZzZJQ1FrV3lRd0xUTmRMQ0J3WVhKaGJYTTZJQ1FrV3lRd0xUSmRMQ0JvWVhOb09pQWtKRnNrTUMweFhTd2djM1J5YVhBNklIbDVMbk4wY21sd1JteGhaM01vSkNSYkpEQXRORjBzSUNRa1d5UXdYU2tnZlR0Y2JtSnlaV0ZyTzF4dVkyRnpaU0F5TnpwMGFHbHpMaVFnUFNBa0pGc2tNRjA3WEc1aWNtVmhhenRjYm1OaGMyVWdNamc2ZEdocGN5NGtJRDBnSkNSYkpEQmRPMXh1WW5KbFlXczdYRzVqWVhObElESTVPbHh1SUNBZ0lIUm9hWE11SkNBOUlIdGNiaUFnSUNBZ0lIUjVjR1U2SUNkVGRXSkZlSEJ5WlhOemFXOXVKeXhjYmlBZ0lDQWdJSEJoZEdnNklDUWtXeVF3TFROZExGeHVJQ0FnSUNBZ2NHRnlZVzF6T2lBa0pGc2tNQzB5WFN4Y2JpQWdJQ0FnSUdoaGMyZzZJQ1FrV3lRd0xURmRMRnh1SUNBZ0lDQWdiRzlqT2lCNWVTNXNiMk5KYm1adktIUm9hWE11WHlRcFhHNGdJQ0FnZlR0Y2JpQWdYRzVpY21WaGF6dGNibU5oYzJVZ016QTZkR2hwY3k0a0lEMGdlM1I1Y0dVNklDZElZWE5vSnl3Z2NHRnBjbk02SUNRa1d5UXdYU3dnYkc5ak9pQjVlUzVzYjJOSmJtWnZLSFJvYVhNdVh5UXBmVHRjYm1KeVpXRnJPMXh1WTJGelpTQXpNVHAwYUdsekxpUWdQU0I3ZEhsd1pUb2dKMGhoYzJoUVlXbHlKeXdnYTJWNU9pQjVlUzVwWkNna0pGc2tNQzB5WFNrc0lIWmhiSFZsT2lBa0pGc2tNRjBzSUd4dll6b2dlWGt1Ykc5alNXNW1ieWgwYUdsekxsOGtLWDA3WEc1aWNtVmhhenRjYm1OaGMyVWdNekk2ZEdocGN5NGtJRDBnZVhrdWFXUW9KQ1JiSkRBdE1WMHBPMXh1WW5KbFlXczdYRzVqWVhObElETXpPblJvYVhNdUpDQTlJQ1FrV3lRd1hUdGNibUp5WldGck8xeHVZMkZ6WlNBek5EcDBhR2x6TGlRZ1BTQWtKRnNrTUYwN1hHNWljbVZoYXp0Y2JtTmhjMlVnTXpVNmRHaHBjeTRrSUQwZ2UzUjVjR1U2SUNkVGRISnBibWRNYVhSbGNtRnNKeXdnZG1Gc2RXVTZJQ1FrV3lRd1hTd2diM0pwWjJsdVlXdzZJQ1FrV3lRd1hTd2diRzlqT2lCNWVTNXNiMk5KYm1adktIUm9hWE11WHlRcGZUdGNibUp5WldGck8xeHVZMkZ6WlNBek5qcDBhR2x6TGlRZ1BTQjdkSGx3WlRvZ0owNTFiV0psY2t4cGRHVnlZV3duTENCMllXeDFaVG9nVG5WdFltVnlLQ1FrV3lRd1hTa3NJRzl5YVdkcGJtRnNPaUJPZFcxaVpYSW9KQ1JiSkRCZEtTd2diRzlqT2lCNWVTNXNiMk5KYm1adktIUm9hWE11WHlRcGZUdGNibUp5WldGck8xeHVZMkZ6WlNBek56cDBhR2x6TGlRZ1BTQjdkSGx3WlRvZ0owSnZiMnhsWVc1TWFYUmxjbUZzSnl3Z2RtRnNkV1U2SUNRa1d5UXdYU0E5UFQwZ0ozUnlkV1VuTENCdmNtbG5hVzVoYkRvZ0pDUmJKREJkSUQwOVBTQW5kSEoxWlNjc0lHeHZZem9nZVhrdWJHOWpTVzVtYnloMGFHbHpMbDhrS1gwN1hHNWljbVZoYXp0Y2JtTmhjMlVnTXpnNmRHaHBjeTRrSUQwZ2UzUjVjR1U2SUNkVmJtUmxabWx1WldSTWFYUmxjbUZzSnl3Z2IzSnBaMmx1WVd3NklIVnVaR1ZtYVc1bFpDd2dkbUZzZFdVNklIVnVaR1ZtYVc1bFpDd2diRzlqT2lCNWVTNXNiMk5KYm1adktIUm9hWE11WHlRcGZUdGNibUp5WldGck8xeHVZMkZ6WlNBek9UcDBhR2x6TGlRZ1BTQjdkSGx3WlRvZ0owNTFiR3hNYVhSbGNtRnNKeXdnYjNKcFoybHVZV3c2SUc1MWJHd3NJSFpoYkhWbE9pQnVkV3hzTENCc2IyTTZJSGw1TG14dlkwbHVabThvZEdocGN5NWZKQ2w5TzF4dVluSmxZV3M3WEc1allYTmxJRFF3T25Sb2FYTXVKQ0E5SUNRa1d5UXdYVHRjYm1KeVpXRnJPMXh1WTJGelpTQTBNVHAwYUdsekxpUWdQU0FrSkZza01GMDdYRzVpY21WaGF6dGNibU5oYzJVZ05ESTZkR2hwY3k0a0lEMGdlWGt1Y0hKbGNHRnlaVkJoZEdnb2RISjFaU3dnSkNSYkpEQmRMQ0IwYUdsekxsOGtLVHRjYm1KeVpXRnJPMXh1WTJGelpTQTBNenAwYUdsekxpUWdQU0I1ZVM1d2NtVndZWEpsVUdGMGFDaG1ZV3h6WlN3Z0pDUmJKREJkTENCMGFHbHpMbDhrS1R0Y2JtSnlaV0ZyTzF4dVkyRnpaU0EwTkRvZ0pDUmJKREF0TWwwdWNIVnphQ2g3Y0dGeWREb2dlWGt1YVdRb0pDUmJKREJkS1N3Z2IzSnBaMmx1WVd3NklDUWtXeVF3WFN3Z2MyVndZWEpoZEc5eU9pQWtKRnNrTUMweFhYMHBPeUIwYUdsekxpUWdQU0FrSkZza01DMHlYVHNnWEc1aWNtVmhhenRjYm1OaGMyVWdORFU2ZEdocGN5NGtJRDBnVzN0d1lYSjBPaUI1ZVM1cFpDZ2tKRnNrTUYwcExDQnZjbWxuYVc1aGJEb2dKQ1JiSkRCZGZWMDdYRzVpY21WaGF6dGNibU5oYzJVZ05EWTZkR2hwY3k0a0lEMGdXMTA3WEc1aWNtVmhhenRjYm1OaGMyVWdORGM2SkNSYkpEQXRNVjB1Y0hWemFDZ2tKRnNrTUYwcE8xeHVZbkpsWVdzN1hHNWpZWE5sSURRNE9uUm9hWE11SkNBOUlGdGRPMXh1WW5KbFlXczdYRzVqWVhObElEUTVPaVFrV3lRd0xURmRMbkIxYzJnb0pDUmJKREJkS1R0Y2JtSnlaV0ZyTzF4dVkyRnpaU0ExTURwMGFHbHpMaVFnUFNCYlhUdGNibUp5WldGck8xeHVZMkZ6WlNBMU1Ub2tKRnNrTUMweFhTNXdkWE5vS0NRa1d5UXdYU2s3WEc1aWNtVmhhenRjYm1OaGMyVWdOVGc2ZEdocGN5NGtJRDBnVzEwN1hHNWljbVZoYXp0Y2JtTmhjMlVnTlRrNkpDUmJKREF0TVYwdWNIVnphQ2drSkZza01GMHBPMXh1WW5KbFlXczdYRzVqWVhObElEWTBPblJvYVhNdUpDQTlJRnRkTzF4dVluSmxZV3M3WEc1allYTmxJRFkxT2lRa1d5UXdMVEZkTG5CMWMyZ29KQ1JiSkRCZEtUdGNibUp5WldGck8xeHVZMkZ6WlNBM01EcDBhR2x6TGlRZ1BTQmJYVHRjYm1KeVpXRnJPMXh1WTJGelpTQTNNVG9rSkZza01DMHhYUzV3ZFhOb0tDUWtXeVF3WFNrN1hHNWljbVZoYXp0Y2JtTmhjMlVnTnpnNmRHaHBjeTRrSUQwZ1cxMDdYRzVpY21WaGF6dGNibU5oYzJVZ056azZKQ1JiSkRBdE1WMHVjSFZ6YUNna0pGc2tNRjBwTzF4dVluSmxZV3M3WEc1allYTmxJRGd5T25Sb2FYTXVKQ0E5SUZ0ZE8xeHVZbkpsWVdzN1hHNWpZWE5sSURnek9pUWtXeVF3TFRGZExuQjFjMmdvSkNSYkpEQmRLVHRjYm1KeVpXRnJPMXh1WTJGelpTQTROanAwYUdsekxpUWdQU0JiWFR0Y2JtSnlaV0ZyTzF4dVkyRnpaU0E0Tnpva0pGc2tNQzB4WFM1d2RYTm9LQ1FrV3lRd1hTazdYRzVpY21WaGF6dGNibU5oYzJVZ09UQTZkR2hwY3k0a0lEMGdXMTA3WEc1aWNtVmhhenRjYm1OaGMyVWdPVEU2SkNSYkpEQXRNVjB1Y0hWemFDZ2tKRnNrTUYwcE8xeHVZbkpsWVdzN1hHNWpZWE5sSURrME9uUm9hWE11SkNBOUlGdGRPMXh1WW5KbFlXczdYRzVqWVhObElEazFPaVFrV3lRd0xURmRMbkIxYzJnb0pDUmJKREJkS1R0Y2JtSnlaV0ZyTzF4dVkyRnpaU0E1T0RwMGFHbHpMaVFnUFNCYkpDUmJKREJkWFR0Y2JtSnlaV0ZyTzF4dVkyRnpaU0E1T1Rva0pGc2tNQzB4WFM1d2RYTm9LQ1FrV3lRd1hTazdYRzVpY21WaGF6dGNibU5oYzJVZ01UQXdPblJvYVhNdUpDQTlJRnNrSkZza01GMWRPMXh1WW5KbFlXczdYRzVqWVhObElERXdNVG9rSkZza01DMHhYUzV3ZFhOb0tDUWtXeVF3WFNrN1hHNWljbVZoYXp0Y2JuMWNibjBzWEc1MFlXSnNaVG9nVzNzek9qRXNORG95TERVNld6SXNORFpkTERZNk15d3hORHBiTWl3ME5sMHNNVFU2V3pJc05EWmRMREU1T2xzeUxEUTJYU3d5T1RwYk1pdzBObDBzTXpRNld6SXNORFpkTERRNE9sc3lMRFEyWFN3MU1UcGJNaXcwTmwwc05UVTZXeklzTkRaZExEWXdPbHN5TERRMlhYMHNlekU2V3pOZGZTeDdOVHBiTVN3MFhYMHNlelU2V3pJc01sMHNOem8xTERnNk5pdzVPamNzTVRBNk9Dd3hNVG81TERFeU9qRXdMREV6T2pFeExERTBPbHN4TERFeVhTd3hOVHBiTVN3eU1GMHNNVFk2TVRjc01UazZXekVzTWpOZExESTBPakUxTERJM09qRTJMREk1T2xzeExESXhYU3d6TkRwYk1Td3lNbDBzTXprNld6SXNNbDBzTkRRNld6SXNNbDBzTkRjNld6SXNNbDBzTkRnNld6RXNNVE5kTERVeE9sc3hMREUwWFN3MU5UcGJNU3d4T0Ywc05UazZNVGtzTmpBNld6RXNNalJkZlN4N01UcGJNaXd4WFgwc2V6VTZXeklzTkRkZExERTBPbHN5TERRM1hTd3hOVHBiTWl3ME4xMHNNVGs2V3pJc05EZGRMREk1T2xzeUxEUTNYU3d6TkRwYk1pdzBOMTBzTXprNld6SXNORGRkTERRME9sc3lMRFEzWFN3ME56cGJNaXcwTjEwc05EZzZXeklzTkRkZExEVXhPbHN5TERRM1hTdzFOVHBiTWl3ME4xMHNOakE2V3pJc05EZGRmU3g3TlRwYk1pd3pYU3d4TkRwYk1pd3pYU3d4TlRwYk1pd3pYU3d4T1RwYk1pd3pYU3d5T1RwYk1pd3pYU3d6TkRwYk1pd3pYU3d6T1RwYk1pd3pYU3cwTkRwYk1pd3pYU3cwTnpwYk1pd3pYU3cwT0RwYk1pd3pYU3cxTVRwYk1pd3pYU3cxTlRwYk1pd3pYU3cyTURwYk1pd3pYWDBzZXpVNld6SXNORjBzTVRRNld6SXNORjBzTVRVNld6SXNORjBzTVRrNld6SXNORjBzTWprNld6SXNORjBzTXpRNld6SXNORjBzTXprNld6SXNORjBzTkRRNld6SXNORjBzTkRjNld6SXNORjBzTkRnNld6SXNORjBzTlRFNld6SXNORjBzTlRVNld6SXNORjBzTmpBNld6SXNORjE5TEhzMU9sc3lMRFZkTERFME9sc3lMRFZkTERFMU9sc3lMRFZkTERFNU9sc3lMRFZkTERJNU9sc3lMRFZkTERNME9sc3lMRFZkTERNNU9sc3lMRFZkTERRME9sc3lMRFZkTERRM09sc3lMRFZkTERRNE9sc3lMRFZkTERVeE9sc3lMRFZkTERVMU9sc3lMRFZkTERZd09sc3lMRFZkZlN4N05UcGJNaXcyWFN3eE5EcGJNaXcyWFN3eE5UcGJNaXcyWFN3eE9UcGJNaXcyWFN3eU9UcGJNaXcyWFN3ek5EcGJNaXcyWFN3ek9UcGJNaXcyWFN3ME5EcGJNaXcyWFN3ME56cGJNaXcyWFN3ME9EcGJNaXcyWFN3MU1UcGJNaXcyWFN3MU5UcGJNaXcyWFN3Mk1EcGJNaXcyWFgwc2V6VTZXeklzTjEwc01UUTZXeklzTjEwc01UVTZXeklzTjEwc01UazZXeklzTjEwc01qazZXeklzTjEwc016UTZXeklzTjEwc016azZXeklzTjEwc05EUTZXeklzTjEwc05EYzZXeklzTjEwc05EZzZXeklzTjEwc05URTZXeklzTjEwc05UVTZXeklzTjEwc05qQTZXeklzTjExOUxIczFPbHN5TERoZExERTBPbHN5TERoZExERTFPbHN5TERoZExERTVPbHN5TERoZExESTVPbHN5TERoZExETTBPbHN5TERoZExETTVPbHN5TERoZExEUTBPbHN5TERoZExEUTNPbHN5TERoZExEUTRPbHN5TERoZExEVXhPbHN5TERoZExEVTFPbHN5TERoZExEWXdPbHN5TERoZGZTeDdOVHBiTWl3NVhTd3hORHBiTWl3NVhTd3hOVHBiTWl3NVhTd3hPVHBiTWl3NVhTd3lPVHBiTWl3NVhTd3pORHBiTWl3NVhTd3pPVHBiTWl3NVhTdzBORHBiTWl3NVhTdzBOenBiTWl3NVhTdzBPRHBiTWl3NVhTdzFNVHBiTWl3NVhTdzFOVHBiTWl3NVhTdzJNRHBiTWl3NVhYMHNlekl3T2pJMUxEY3lPbHN4TERNMVhTdzNPRG95Tml3M09Ub3lOeXc0TURwYk1Td3lPRjBzT0RFNld6RXNNamxkTERneU9sc3hMRE13WFN3NE16cGJNU3d6TVYwc09EUTZXekVzTXpKZExEZzFPbHN4TERNMFhTdzROam96TTMwc2V6SXdPak0yTERjeU9sc3hMRE0xWFN3M09Eb3lOaXczT1RveU55dzRNRHBiTVN3eU9GMHNPREU2V3pFc01qbGRMRGd5T2xzeExETXdYU3c0TXpwYk1Td3pNVjBzT0RRNld6RXNNekpkTERnMU9sc3hMRE0wWFN3NE5qb3pNMzBzZXpRNk16Y3NOam96TERFME9sc3lMRFEyWFN3eE5UcGJNaXcwTmwwc01UazZXeklzTkRaZExESTVPbHN5TERRMlhTd3pORHBiTWl3ME5sMHNNems2V3pJc05EWmRMRFEwT2xzeUxEUTJYU3cwTnpwYk1pdzBObDBzTkRnNld6SXNORFpkTERVeE9sc3lMRFEyWFN3MU5UcGJNaXcwTmwwc05qQTZXeklzTkRaZGZTeDdORG96T0N3Mk9qTXNNVFE2V3pJc05EWmRMREUxT2xzeUxEUTJYU3d4T1RwYk1pdzBObDBzTWprNld6SXNORFpkTERNME9sc3lMRFEyWFN3ME5EcGJNaXcwTmwwc05EYzZXeklzTkRaZExEUTRPbHN5TERRMlhTdzFNVHBiTWl3ME5sMHNOVFU2V3pJc05EWmRMRFl3T2xzeUxEUTJYWDBzZXpFMU9sc3lMRFE0WFN3eE56b3pPU3d4T0RwYk1pdzBPRjE5TEhzeU1EbzBNU3cxTmpvME1DdzJORG8wTWl3Mk5UcGJNU3cwTTEwc056STZXekVzTXpWZExEYzRPakkyTERjNU9qSTNMRGd3T2xzeExESTRYU3c0TVRwYk1Td3lPVjBzT0RJNld6RXNNekJkTERnek9sc3hMRE14WFN3NE5EcGJNU3d6TWwwc09EVTZXekVzTXpSZExEZzJPak16ZlN4N05EbzBOQ3cyT2pNc01UUTZXeklzTkRaZExERTFPbHN5TERRMlhTd3hPVHBiTWl3ME5sMHNNams2V3pJc05EWmRMRE0wT2xzeUxEUTJYU3cwTnpwYk1pdzBObDBzTkRnNld6SXNORFpkTERVeE9sc3lMRFEyWFN3MU5UcGJNaXcwTmwwc05qQTZXeklzTkRaZGZTeDdOVHBiTWl3eE1GMHNNVFE2V3pJc01UQmRMREUxT2xzeUxERXdYU3d4T0RwYk1pd3hNRjBzTVRrNld6SXNNVEJkTERJNU9sc3lMREV3WFN3ek5EcGJNaXd4TUYwc016azZXeklzTVRCZExEUTBPbHN5TERFd1hTdzBOenBiTWl3eE1GMHNORGc2V3pJc01UQmRMRFV4T2xzeUxERXdYU3cxTlRwYk1pd3hNRjBzTmpBNld6SXNNVEJkZlN4N01qQTZORFVzTnpJNld6RXNNelZkTERjNE9qSTJMRGM1T2pJM0xEZ3dPbHN4TERJNFhTdzRNVHBiTVN3eU9WMHNPREk2V3pFc016QmRMRGd6T2xzeExETXhYU3c0TkRwYk1Td3pNbDBzT0RVNld6RXNNelJkTERnMk9qTXpmU3g3TWpBNk5EWXNOekk2V3pFc016VmRMRGM0T2pJMkxEYzVPakkzTERnd09sc3hMREk0WFN3NE1UcGJNU3d5T1Ywc09ESTZXekVzTXpCZExEZ3pPbHN4TERNeFhTdzRORHBiTVN3ek1sMHNPRFU2V3pFc016UmRMRGcyT2pNemZTeDdNakE2TkRjc056STZXekVzTXpWZExEYzRPakkyTERjNU9qSTNMRGd3T2xzeExESTRYU3c0TVRwYk1Td3lPVjBzT0RJNld6RXNNekJkTERnek9sc3hMRE14WFN3NE5EcGJNU3d6TWwwc09EVTZXekVzTXpSZExEZzJPak16ZlN4N01qQTZOREVzTlRZNk5EZ3NOalE2TkRJc05qVTZXekVzTkROZExEY3lPbHN4TERNMVhTdzNPRG95Tml3M09Ub3lOeXc0TURwYk1Td3lPRjBzT0RFNld6RXNNamxkTERneU9sc3hMRE13WFN3NE16cGJNU3d6TVYwc09EUTZXekVzTXpKZExEZzFPbHN4TERNMFhTdzROam96TTMwc2V6TXpPbHN5TERjNFhTdzBPVG8wT1N3Mk5UcGJNaXczT0Ywc056STZXeklzTnpoZExEZ3dPbHN5TERjNFhTdzRNVHBiTWl3M09GMHNPREk2V3pJc056aGRMRGd6T2xzeUxEYzRYU3c0TkRwYk1pdzNPRjBzT0RVNld6SXNOemhkZlN4N01qTTZXeklzTXpOZExETXpPbHN5TERNelhTdzFORHBiTWl3ek0xMHNOalU2V3pJc016TmRMRFk0T2xzeUxETXpYU3czTWpwYk1pd3pNMTBzTnpVNld6SXNNek5kTERnd09sc3lMRE16WFN3NE1UcGJNaXd6TTEwc09ESTZXeklzTXpOZExEZ3pPbHN5TERNelhTdzRORHBiTWl3ek0xMHNPRFU2V3pJc016TmRmU3g3TWpNNld6SXNNelJkTERNek9sc3lMRE0wWFN3MU5EcGJNaXd6TkYwc05qVTZXeklzTXpSZExEWTRPbHN5TERNMFhTdzNNanBiTWl3ek5GMHNOelU2V3pJc016UmRMRGd3T2xzeUxETTBYU3c0TVRwYk1pd3pORjBzT0RJNld6SXNNelJkTERnek9sc3lMRE0wWFN3NE5EcGJNaXd6TkYwc09EVTZXeklzTXpSZGZTeDdNak02V3pJc016VmRMRE16T2xzeUxETTFYU3cxTkRwYk1pd3pOVjBzTmpVNld6SXNNelZkTERZNE9sc3lMRE0xWFN3M01qcGJNaXd6TlYwc056VTZXeklzTXpWZExEZ3dPbHN5TERNMVhTdzRNVHBiTWl3ek5WMHNPREk2V3pJc016VmRMRGd6T2xzeUxETTFYU3c0TkRwYk1pd3pOVjBzT0RVNld6SXNNelZkZlN4N01qTTZXeklzTXpaZExETXpPbHN5TERNMlhTdzFORHBiTWl3ek5sMHNOalU2V3pJc016WmRMRFk0T2xzeUxETTJYU3czTWpwYk1pd3pObDBzTnpVNld6SXNNelpkTERnd09sc3lMRE0yWFN3NE1UcGJNaXd6Tmwwc09ESTZXeklzTXpaZExEZ3pPbHN5TERNMlhTdzRORHBiTWl3ek5sMHNPRFU2V3pJc016WmRmU3g3TWpNNld6SXNNemRkTERNek9sc3lMRE0zWFN3MU5EcGJNaXd6TjEwc05qVTZXeklzTXpkZExEWTRPbHN5TERNM1hTdzNNanBiTWl3ek4xMHNOelU2V3pJc016ZGRMRGd3T2xzeUxETTNYU3c0TVRwYk1pd3pOMTBzT0RJNld6SXNNemRkTERnek9sc3lMRE0zWFN3NE5EcGJNaXd6TjEwc09EVTZXeklzTXpkZGZTeDdNak02V3pJc016aGRMRE16T2xzeUxETTRYU3cxTkRwYk1pd3pPRjBzTmpVNld6SXNNemhkTERZNE9sc3lMRE00WFN3M01qcGJNaXd6T0Ywc056VTZXeklzTXpoZExEZ3dPbHN5TERNNFhTdzRNVHBiTWl3ek9GMHNPREk2V3pJc016aGRMRGd6T2xzeUxETTRYU3c0TkRwYk1pd3pPRjBzT0RVNld6SXNNemhkZlN4N01qTTZXeklzTXpsZExETXpPbHN5TERNNVhTdzFORHBiTWl3ek9WMHNOalU2V3pJc016bGRMRFk0T2xzeUxETTVYU3czTWpwYk1pd3pPVjBzTnpVNld6SXNNemxkTERnd09sc3lMRE01WFN3NE1UcGJNaXd6T1Ywc09ESTZXeklzTXpsZExEZ3pPbHN5TERNNVhTdzRORHBiTWl3ek9WMHNPRFU2V3pJc016bGRmU3g3TWpNNld6SXNORE5kTERNek9sc3lMRFF6WFN3MU5EcGJNaXcwTTEwc05qVTZXeklzTkROZExEWTRPbHN5TERRelhTdzNNanBiTWl3ME0xMHNOelU2V3pJc05ETmRMRGd3T2xzeUxEUXpYU3c0TVRwYk1pdzBNMTBzT0RJNld6SXNORE5kTERnek9sc3lMRFF6WFN3NE5EcGJNaXcwTTEwc09EVTZXeklzTkROZExEZzNPbHN4TERVd1hYMHNlemN5T2xzeExETTFYU3c0TmpvMU1YMHNlekl6T2xzeUxEUTFYU3d6TXpwYk1pdzBOVjBzTlRRNld6SXNORFZkTERZMU9sc3lMRFExWFN3Mk9EcGJNaXcwTlYwc056STZXeklzTkRWZExEYzFPbHN5TERRMVhTdzRNRHBiTWl3ME5WMHNPREU2V3pJc05EVmRMRGd5T2xzeUxEUTFYU3c0TXpwYk1pdzBOVjBzT0RRNld6SXNORFZkTERnMU9sc3lMRFExWFN3NE56cGJNaXcwTlYxOUxIczFNam8xTWl3MU5EcGJNaXc0TWwwc05qVTZXeklzT0RKZExEY3lPbHN5TERneVhTdzRNRHBiTWl3NE1sMHNPREU2V3pJc09ESmRMRGd5T2xzeUxEZ3lYU3c0TXpwYk1pdzRNbDBzT0RRNld6SXNPREpkTERnMU9sc3lMRGd5WFgwc2V6STFPalV6TERNNE9qVTFMRE01T2xzeExEVTNYU3cwTXpvMU5pdzBORHBiTVN3MU9GMHNORFU2TlRRc05EYzZXeklzTlRSZGZTeDdNamc2TlRrc05ETTZOakFzTkRRNld6RXNOVGhkTERRM09sc3lMRFUyWFgwc2V6RXpPall5TERFMU9sc3hMREl3WFN3eE9EcGJNU3cyTVYxOUxIc3pNenBiTWl3NE5sMHNOVGM2TmpNc05qVTZXeklzT0RaZExEY3lPbHN5TERnMlhTdzRNRHBiTWl3NE5sMHNPREU2V3pJc09EWmRMRGd5T2xzeUxEZzJYU3c0TXpwYk1pdzRObDBzT0RRNld6SXNPRFpkTERnMU9sc3lMRGcyWFgwc2V6TXpPbHN5TERRd1hTdzJOVHBiTWl3ME1GMHNOekk2V3pJc05EQmRMRGd3T2xzeUxEUXdYU3c0TVRwYk1pdzBNRjBzT0RJNld6SXNOREJkTERnek9sc3lMRFF3WFN3NE5EcGJNaXcwTUYwc09EVTZXeklzTkRCZGZTeDdNek02V3pJc05ERmRMRFkxT2xzeUxEUXhYU3czTWpwYk1pdzBNVjBzT0RBNld6SXNOREZkTERneE9sc3lMRFF4WFN3NE1qcGJNaXcwTVYwc09ETTZXeklzTkRGZExEZzBPbHN5TERReFhTdzROVHBiTWl3ME1WMTlMSHN5TURvMk5DdzNNanBiTVN3ek5WMHNOemc2TWpZc056azZNamNzT0RBNld6RXNNamhkTERneE9sc3hMREk1WFN3NE1qcGJNU3d6TUYwc09ETTZXekVzTXpGZExEZzBPbHN4TERNeVhTdzROVHBiTVN3ek5GMHNPRFk2TXpOOUxIc3lOam8yTlN3ME56cGJNU3cyTmwxOUxIc3pNRG8yTnl3ek16cGJNaXcxT0Ywc05qVTZXeklzTlRoZExEY3lPbHN5TERVNFhTdzNOVHBiTWl3MU9GMHNPREE2V3pJc05UaGRMRGd4T2xzeUxEVTRYU3c0TWpwYk1pdzFPRjBzT0RNNld6SXNOVGhkTERnME9sc3lMRFU0WFN3NE5UcGJNaXcxT0YxOUxIc3pNenBiTWl3Mk5GMHNNelU2Tmpnc05qVTZXeklzTmpSZExEY3lPbHN5TERZMFhTdzNOVHBiTWl3Mk5GMHNPREE2V3pJc05qUmRMRGd4T2xzeUxEWTBYU3c0TWpwYk1pdzJORjBzT0RNNld6SXNOalJkTERnME9sc3lMRFkwWFN3NE5UcGJNaXcyTkYxOUxIc3lNVG8yT1N3eU16cGJNaXcxTUYwc05qVTZXeklzTlRCZExEY3lPbHN5TERVd1hTdzRNRHBiTWl3MU1GMHNPREU2V3pJc05UQmRMRGd5T2xzeUxEVXdYU3c0TXpwYk1pdzFNRjBzT0RRNld6SXNOVEJkTERnMU9sc3lMRFV3WFgwc2V6TXpPbHN5TERrd1hTdzJNVG8zTUN3Mk5UcGJNaXc1TUYwc056STZXeklzT1RCZExEZ3dPbHN5TERrd1hTdzRNVHBiTWl3NU1GMHNPREk2V3pJc09UQmRMRGd6T2xzeUxEa3dYU3c0TkRwYk1pdzVNRjBzT0RVNld6SXNPVEJkZlN4N01qQTZOelFzTXpNNld6SXNPREJkTERVd09qY3hMRFl6T2pjeUxEWTBPamMxTERZMU9sc3hMRFF6WFN3Mk9UbzNNeXczTURvM05pdzNNVG8zTnl3M01qcGJNU3czT0Ywc056ZzZNallzTnprNk1qY3NPREE2V3pFc01qaGRMRGd4T2xzeExESTVYU3c0TWpwYk1Td3pNRjBzT0RNNld6RXNNekZkTERnME9sc3hMRE15WFN3NE5UcGJNU3d6TkYwc09EWTZNek45TEhzM01qcGJNU3czT1YxOUxIc3lNenBiTWl3ME1sMHNNek02V3pJc05ESmRMRFUwT2xzeUxEUXlYU3cyTlRwYk1pdzBNbDBzTmpnNld6SXNOREpkTERjeU9sc3lMRFF5WFN3M05UcGJNaXcwTWwwc09EQTZXeklzTkRKZExEZ3hPbHN5TERReVhTdzRNanBiTWl3ME1sMHNPRE02V3pJc05ESmRMRGcwT2xzeUxEUXlYU3c0TlRwYk1pdzBNbDBzT0RjNld6RXNOVEJkZlN4N01qQTZOelFzTlRNNk9EQXNOVFE2V3pJc09EUmRMRFl6T2pneExEWTBPamMxTERZMU9sc3hMRFF6WFN3Mk9UbzRNaXczTURvM05pdzNNVG8zTnl3M01qcGJNU3czT0Ywc056ZzZNallzTnprNk1qY3NPREE2V3pFc01qaGRMRGd4T2xzeExESTVYU3c0TWpwYk1Td3pNRjBzT0RNNld6RXNNekZkTERnME9sc3hMRE15WFN3NE5UcGJNU3d6TkYwc09EWTZNek45TEhzeU5qbzRNeXcwTnpwYk1TdzJObDE5TEhzME56cGJNaXcxTlYxOUxIczBPamcwTERZNk15d3hORHBiTWl3ME5sMHNNVFU2V3pJc05EWmRMREU1T2xzeUxEUTJYU3d5T1RwYk1pdzBObDBzTXpRNld6SXNORFpkTERNNU9sc3lMRFEyWFN3ME5EcGJNaXcwTmwwc05EYzZXeklzTkRaZExEUTRPbHN5TERRMlhTdzFNVHBiTWl3ME5sMHNOVFU2V3pJc05EWmRMRFl3T2xzeUxEUTJYWDBzZXpRM09sc3lMREl3WFgwc2V6SXdPamcxTERjeU9sc3hMRE0xWFN3M09Eb3lOaXczT1RveU55dzRNRHBiTVN3eU9GMHNPREU2V3pFc01qbGRMRGd5T2xzeExETXdYU3c0TXpwYk1Td3pNVjBzT0RRNld6RXNNekpkTERnMU9sc3hMRE0wWFN3NE5qb3pNMzBzZXpRNk9EWXNOam96TERFME9sc3lMRFEyWFN3eE5UcGJNaXcwTmwwc01UazZXeklzTkRaZExESTVPbHN5TERRMlhTd3pORHBiTWl3ME5sMHNORGM2V3pJc05EWmRMRFE0T2xzeUxEUTJYU3cxTVRwYk1pdzBObDBzTlRVNld6SXNORFpkTERZd09sc3lMRFEyWFgwc2V6STJPamczTERRM09sc3hMRFkyWFgwc2V6UTNPbHN5TERVM1hYMHNlelU2V3pJc01URmRMREUwT2xzeUxERXhYU3d4TlRwYk1pd3hNVjBzTVRrNld6SXNNVEZkTERJNU9sc3lMREV4WFN3ek5EcGJNaXd4TVYwc016azZXeklzTVRGZExEUTBPbHN5TERFeFhTdzBOenBiTWl3eE1WMHNORGc2V3pJc01URmRMRFV4T2xzeUxERXhYU3cxTlRwYk1pd3hNVjBzTmpBNld6SXNNVEZkZlN4N01UVTZXeklzTkRsZExERTRPbHN5TERRNVhYMHNlekl3T2pjMExETXpPbHN5TERnNFhTdzFPRG80T0N3Mk16bzRPU3cyTkRvM05TdzJOVHBiTVN3ME0xMHNOams2T1RBc056QTZOellzTnpFNk56Y3NOekk2V3pFc056aGRMRGM0T2pJMkxEYzVPakkzTERnd09sc3hMREk0WFN3NE1UcGJNU3d5T1Ywc09ESTZXekVzTXpCZExEZ3pPbHN4TERNeFhTdzRORHBiTVN3ek1sMHNPRFU2V3pFc016UmRMRGcyT2pNemZTeDdOalU2V3pJc09UUmRMRFkyT2preExEWTRPbHN5TERrMFhTdzNNanBiTWl3NU5GMHNPREE2V3pJc09UUmRMRGd4T2xzeUxEazBYU3c0TWpwYk1pdzVORjBzT0RNNld6SXNPVFJkTERnME9sc3lMRGswWFN3NE5UcGJNaXc1TkYxOUxIczFPbHN5TERJMVhTd3hORHBiTWl3eU5WMHNNVFU2V3pJc01qVmRMREU1T2xzeUxESTFYU3d5T1RwYk1pd3lOVjBzTXpRNld6SXNNalZkTERNNU9sc3lMREkxWFN3ME5EcGJNaXd5TlYwc05EYzZXeklzTWpWZExEUTRPbHN5TERJMVhTdzFNVHBiTWl3eU5WMHNOVFU2V3pJc01qVmRMRFl3T2xzeUxESTFYWDBzZXpJd09qa3lMRGN5T2xzeExETTFYU3czT0RveU5pdzNPVG95Tnl3NE1EcGJNU3d5T0Ywc09ERTZXekVzTWpsZExEZ3lPbHN4TERNd1hTdzRNenBiTVN3ek1WMHNPRFE2V3pFc016SmRMRGcxT2xzeExETTBYU3c0Tmpvek0zMHNlekl3T2pjMExETXhPamt6TERNek9sc3lMRFl3WFN3Mk16bzVOQ3cyTkRvM05TdzJOVHBiTVN3ME0xMHNOams2T1RVc056QTZOellzTnpFNk56Y3NOekk2V3pFc056aGRMRGMxT2xzeUxEWXdYU3czT0RveU5pdzNPVG95Tnl3NE1EcGJNU3d5T0Ywc09ERTZXekVzTWpsZExEZ3lPbHN4TERNd1hTdzRNenBiTVN3ek1WMHNPRFE2V3pFc016SmRMRGcxT2xzeExETTBYU3c0Tmpvek0zMHNlekl3T2pjMExETXpPbHN5TERZMlhTd3pOam81Tml3Mk16bzVOeXcyTkRvM05TdzJOVHBiTVN3ME0xMHNOams2T1Rnc056QTZOellzTnpFNk56Y3NOekk2V3pFc056aGRMRGMxT2xzeUxEWTJYU3czT0RveU5pdzNPVG95Tnl3NE1EcGJNU3d5T0Ywc09ERTZXekVzTWpsZExEZ3lPbHN4TERNd1hTdzRNenBiTVN3ek1WMHNPRFE2V3pFc016SmRMRGcxT2xzeExETTBYU3c0Tmpvek0zMHNlekl3T2pjMExESXlPams1TERJek9sc3lMRFV5WFN3Mk16b3hNREFzTmpRNk56VXNOalU2V3pFc05ETmRMRFk1T2pFd01TdzNNRG8zTml3M01UbzNOeXczTWpwYk1TdzNPRjBzTnpnNk1qWXNOems2TWpjc09EQTZXekVzTWpoZExEZ3hPbHN4TERJNVhTdzRNanBiTVN3ek1GMHNPRE02V3pFc016RmRMRGcwT2xzeExETXlYU3c0TlRwYk1Td3pORjBzT0RZNk16TjlMSHN5TURvM05Dd3pNenBiTWl3NU1sMHNOakk2TVRBeUxEWXpPakV3TXl3Mk5EbzNOU3cyTlRwYk1TdzBNMTBzTmprNk1UQTBMRGN3T2pjMkxEY3hPamMzTERjeU9sc3hMRGM0WFN3M09Eb3lOaXczT1RveU55dzRNRHBiTVN3eU9GMHNPREU2V3pFc01qbGRMRGd5T2xzeExETXdYU3c0TXpwYk1Td3pNVjBzT0RRNld6RXNNekpkTERnMU9sc3hMRE0wWFN3NE5qb3pNMzBzZXpNek9sc3hMREV3TlYxOUxIc3pNenBiTWl3M09WMHNOalU2V3pJc056bGRMRGN5T2xzeUxEYzVYU3c0TURwYk1pdzNPVjBzT0RFNld6SXNOemxkTERneU9sc3lMRGM1WFN3NE16cGJNaXczT1Ywc09EUTZXeklzTnpsZExEZzFPbHN5TERjNVhYMHNlek16T2xzeUxEZ3hYWDBzZXpJek9sc3lMREkzWFN3ek16cGJNaXd5TjEwc05UUTZXeklzTWpkZExEWTFPbHN5TERJM1hTdzJPRHBiTWl3eU4xMHNOekk2V3pJc01qZGRMRGMxT2xzeUxESTNYU3c0TURwYk1pd3lOMTBzT0RFNld6SXNNamRkTERneU9sc3lMREkzWFN3NE16cGJNaXd5TjEwc09EUTZXeklzTWpkZExEZzFPbHN5TERJM1hYMHNlekl6T2xzeUxESTRYU3d6TXpwYk1pd3lPRjBzTlRRNld6SXNNamhkTERZMU9sc3lMREk0WFN3Mk9EcGJNaXd5T0Ywc056STZXeklzTWpoZExEYzFPbHN5TERJNFhTdzRNRHBiTWl3eU9GMHNPREU2V3pJc01qaGRMRGd5T2xzeUxESTRYU3c0TXpwYk1pd3lPRjBzT0RRNld6SXNNamhkTERnMU9sc3lMREk0WFgwc2V6SXpPbHN5TERNd1hTd3pNenBiTWl3ek1GMHNOVFE2V3pJc016QmRMRFk0T2xzeUxETXdYU3czTVRveE1EWXNOekk2V3pFc01UQTNYU3czTlRwYk1pd3pNRjE5TEhzeU16cGJNaXc1T0Ywc016TTZXeklzT1RoZExEVTBPbHN5TERrNFhTdzJPRHBiTWl3NU9GMHNOekk2V3pJc09UaGRMRGMxT2xzeUxEazRYWDBzZXpJek9sc3lMRFExWFN3ek16cGJNaXcwTlYwc05UUTZXeklzTkRWZExEWTFPbHN5TERRMVhTdzJPRHBiTWl3ME5WMHNOekk2V3pJc05EVmRMRGN6T2xzeExERXdPRjBzTnpVNld6SXNORFZkTERnd09sc3lMRFExWFN3NE1UcGJNaXcwTlYwc09ESTZXeklzTkRWZExEZ3pPbHN5TERRMVhTdzRORHBiTWl3ME5WMHNPRFU2V3pJc05EVmRMRGczT2xzeUxEUTFYWDBzZXpJek9sc3lMRFEwWFN3ek16cGJNaXcwTkYwc05UUTZXeklzTkRSZExEWTFPbHN5TERRMFhTdzJPRHBiTWl3ME5GMHNOekk2V3pJc05EUmRMRGMxT2xzeUxEUTBYU3c0TURwYk1pdzBORjBzT0RFNld6SXNORFJkTERneU9sc3lMRFEwWFN3NE16cGJNaXcwTkYwc09EUTZXeklzTkRSZExEZzFPbHN5TERRMFhTdzROenBiTWl3ME5GMTlMSHMxTkRwYk1Td3hNRGxkZlN4N05UUTZXeklzT0ROZExEWTFPbHN5TERnelhTdzNNanBiTWl3NE0xMHNPREE2V3pJc09ETmRMRGd4T2xzeUxEZ3pYU3c0TWpwYk1pdzRNMTBzT0RNNld6SXNPRE5kTERnME9sc3lMRGd6WFN3NE5UcGJNaXc0TTExOUxIczFORHBiTWl3NE5WMTlMSHMxT2xzeUxERXpYU3d4TkRwYk1pd3hNMTBzTVRVNld6SXNNVE5kTERFNU9sc3lMREV6WFN3eU9UcGJNaXd4TTEwc016UTZXeklzTVROZExETTVPbHN5TERFelhTdzBORHBiTWl3eE0xMHNORGM2V3pJc01UTmRMRFE0T2xzeUxERXpYU3cxTVRwYk1pd3hNMTBzTlRVNld6SXNNVE5kTERZd09sc3lMREV6WFgwc2V6TTRPalUxTERNNU9sc3hMRFUzWFN3ME16bzFOaXcwTkRwYk1TdzFPRjBzTkRVNk1URXhMRFEyT2pFeE1DdzBOenBiTWl3M05sMTlMSHN6TXpwYk1pdzNNRjBzTkRBNk1URXlMRFkxT2xzeUxEY3dYU3czTWpwYk1pdzNNRjBzTnpVNld6SXNOekJkTERnd09sc3lMRGN3WFN3NE1UcGJNaXczTUYwc09ESTZXeklzTnpCZExEZ3pPbHN5TERjd1hTdzRORHBiTWl3M01GMHNPRFU2V3pJc056QmRmU3g3TkRjNld6SXNNVGhkZlN4N05UcGJNaXd4TkYwc01UUTZXeklzTVRSZExERTFPbHN5TERFMFhTd3hPVHBiTWl3eE5GMHNNams2V3pJc01UUmRMRE0wT2xzeUxERTBYU3d6T1RwYk1pd3hORjBzTkRRNld6SXNNVFJkTERRM09sc3lMREUwWFN3ME9EcGJNaXd4TkYwc05URTZXeklzTVRSZExEVTFPbHN5TERFMFhTdzJNRHBiTWl3eE5GMTlMSHN6TXpwYk1Td3hNVE5kZlN4N016TTZXeklzT0RkZExEWTFPbHN5TERnM1hTdzNNanBiTWl3NE4xMHNPREE2V3pJc09EZGRMRGd4T2xzeUxEZzNYU3c0TWpwYk1pdzROMTBzT0RNNld6SXNPRGRkTERnME9sc3lMRGczWFN3NE5UcGJNaXc0TjExOUxIc3pNenBiTWl3NE9WMTlMSHN5TURvM05DdzJNem94TVRVc05qUTZOelVzTmpVNld6RXNORE5kTERZM09qRXhOQ3cyT0RwYk1pdzVObDBzTmprNk1URTJMRGN3T2pjMkxEY3hPamMzTERjeU9sc3hMRGM0WFN3M09Eb3lOaXczT1RveU55dzRNRHBiTVN3eU9GMHNPREU2V3pFc01qbGRMRGd5T2xzeExETXdYU3c0TXpwYk1Td3pNVjBzT0RRNld6RXNNekpkTERnMU9sc3hMRE0wWFN3NE5qb3pNMzBzZXpNek9sc3hMREV4TjExOUxIc3pNam94TVRnc016TTZXeklzTmpKZExEYzBPakV4T1N3M05UcGJNU3d4TWpCZGZTeDdNek02V3pJc05UbGRMRFkxT2xzeUxEVTVYU3czTWpwYk1pdzFPVjBzTnpVNld6SXNOVGxkTERnd09sc3lMRFU1WFN3NE1UcGJNaXcxT1Ywc09ESTZXeklzTlRsZExEZ3pPbHN5TERVNVhTdzRORHBiTWl3MU9WMHNPRFU2V3pJc05UbGRmU3g3TXpNNld6SXNOakZkTERjMU9sc3lMRFl4WFgwc2V6TXpPbHN5TERZNFhTd3pOem94TWpFc056UTZNVEl5TERjMU9sc3hMREV5TUYxOUxIc3pNenBiTWl3Mk5WMHNOalU2V3pJc05qVmRMRGN5T2xzeUxEWTFYU3czTlRwYk1pdzJOVjBzT0RBNld6SXNOalZkTERneE9sc3lMRFkxWFN3NE1qcGJNaXcyTlYwc09ETTZXeklzTmpWZExEZzBPbHN5TERZMVhTdzROVHBiTWl3Mk5WMTlMSHN6TXpwYk1pdzJOMTBzTnpVNld6SXNOamRkZlN4N01qTTZXekVzTVRJelhYMHNlekl6T2xzeUxEVXhYU3cyTlRwYk1pdzFNVjBzTnpJNld6SXNOVEZkTERnd09sc3lMRFV4WFN3NE1UcGJNaXcxTVYwc09ESTZXeklzTlRGZExEZ3pPbHN5TERVeFhTdzRORHBiTWl3MU1WMHNPRFU2V3pJc05URmRmU3g3TWpNNld6SXNOVE5kZlN4N016TTZXekVzTVRJMFhYMHNlek16T2xzeUxEa3hYU3cyTlRwYk1pdzVNVjBzTnpJNld6SXNPVEZkTERnd09sc3lMRGt4WFN3NE1UcGJNaXc1TVYwc09ESTZXeklzT1RGZExEZ3pPbHN5TERreFhTdzRORHBiTWl3NU1WMHNPRFU2V3pJc09URmRmU3g3TXpNNld6SXNPVE5kZlN4N05UcGJNaXd5TWwwc01UUTZXeklzTWpKZExERTFPbHN5TERJeVhTd3hPVHBiTWl3eU1sMHNNams2V3pJc01qSmRMRE0wT2xzeUxESXlYU3d6T1RwYk1pd3lNbDBzTkRRNld6SXNNakpkTERRM09sc3lMREl5WFN3ME9EcGJNaXd5TWwwc05URTZXeklzTWpKZExEVTFPbHN5TERJeVhTdzJNRHBiTWl3eU1sMTlMSHN5TXpwYk1pdzVPVjBzTXpNNld6SXNPVGxkTERVME9sc3lMRGs1WFN3Mk9EcGJNaXc1T1Ywc056STZXeklzT1RsZExEYzFPbHN5TERrNVhYMHNlemN6T2xzeExERXdPRjE5TEhzeU1EbzNOQ3cyTXpveE1qVXNOalE2TnpVc05qVTZXekVzTkROZExEY3lPbHN4TERNMVhTdzNPRG95Tml3M09Ub3lOeXc0TURwYk1Td3lPRjBzT0RFNld6RXNNamxkTERneU9sc3hMRE13WFN3NE16cGJNU3d6TVYwc09EUTZXekVzTXpKZExEZzFPbHN4TERNMFhTdzROam96TTMwc2V6VTZXeklzTWpOZExERTBPbHN5TERJelhTd3hOVHBiTWl3eU0xMHNNVGs2V3pJc01qTmRMREk1T2xzeUxESXpYU3d6TkRwYk1pd3lNMTBzTXprNld6SXNNak5kTERRME9sc3lMREl6WFN3ME56cGJNaXd5TTEwc05EZzZXeklzTWpOZExEVXhPbHN5TERJelhTdzFOVHBiTWl3eU0xMHNOakE2V3pJc01qTmRmU3g3TkRjNld6SXNNVGxkZlN4N05EYzZXeklzTnpkZGZTeDdNakE2TnpRc016TTZXeklzTnpKZExEUXhPakV5Tml3Mk16b3hNamNzTmpRNk56VXNOalU2V3pFc05ETmRMRFk1T2pFeU9DdzNNRG8zTml3M01UbzNOeXczTWpwYk1TdzNPRjBzTnpVNld6SXNOekpkTERjNE9qSTJMRGM1T2pJM0xEZ3dPbHN4TERJNFhTdzRNVHBiTVN3eU9WMHNPREk2V3pFc016QmRMRGd6T2xzeExETXhYU3c0TkRwYk1Td3pNbDBzT0RVNld6RXNNelJkTERnMk9qTXpmU3g3TlRwYk1pd3lORjBzTVRRNld6SXNNalJkTERFMU9sc3lMREkwWFN3eE9UcGJNaXd5TkYwc01qazZXeklzTWpSZExETTBPbHN5TERJMFhTd3pPVHBiTWl3eU5GMHNORFE2V3pJc01qUmRMRFEzT2xzeUxESTBYU3cwT0RwYk1pd3lORjBzTlRFNld6SXNNalJkTERVMU9sc3lMREkwWFN3Mk1EcGJNaXd5TkYxOUxIczJPRHBiTVN3eE1qbGRmU3g3TmpVNld6SXNPVFZkTERZNE9sc3lMRGsxWFN3M01qcGJNaXc1TlYwc09EQTZXeklzT1RWZExEZ3hPbHN5TERrMVhTdzRNanBiTWl3NU5WMHNPRE02V3pJc09UVmRMRGcwT2xzeUxEazFYU3c0TlRwYk1pdzVOVjE5TEhzMk9EcGJNaXc1TjExOUxIczFPbHN5TERJeFhTd3hORHBiTWl3eU1WMHNNVFU2V3pJc01qRmRMREU1T2xzeUxESXhYU3d5T1RwYk1pd3lNVjBzTXpRNld6SXNNakZkTERNNU9sc3lMREl4WFN3ME5EcGJNaXd5TVYwc05EYzZXeklzTWpGZExEUTRPbHN5TERJeFhTdzFNVHBiTWl3eU1WMHNOVFU2V3pJc01qRmRMRFl3T2xzeUxESXhYWDBzZXpNek9sc3hMREV6TUYxOUxIc3pNenBiTWl3Mk0xMTlMSHMzTWpwYk1Td3hNekpkTERjMk9qRXpNWDBzZXpNek9sc3hMREV6TTExOUxIc3pNenBiTWl3Mk9WMTlMSHN4TlRwYk1pd3hNbDBzTVRnNld6SXNNVEpkZlN4N01UUTZXeklzTWpaZExERTFPbHN5TERJMlhTd3hPVHBiTWl3eU5sMHNNams2V3pJc01qWmRMRE0wT2xzeUxESTJYU3cwTnpwYk1pd3lObDBzTkRnNld6SXNNalpkTERVeE9sc3lMREkyWFN3MU5UcGJNaXd5Tmwwc05qQTZXeklzTWpaZGZTeDdNak02V3pJc016RmRMRE16T2xzeUxETXhYU3cxTkRwYk1pd3pNVjBzTmpnNld6SXNNekZkTERjeU9sc3lMRE14WFN3M05UcGJNaXd6TVYxOUxIc3pNenBiTWl3M05GMHNOREk2TVRNMExEYzBPakV6TlN3M05UcGJNU3d4TWpCZGZTeDdNek02V3pJc056RmRMRFkxT2xzeUxEY3hYU3czTWpwYk1pdzNNVjBzTnpVNld6SXNOekZkTERnd09sc3lMRGN4WFN3NE1UcGJNaXczTVYwc09ESTZXeklzTnpGZExEZ3pPbHN5TERjeFhTdzRORHBiTWl3M01WMHNPRFU2V3pJc056RmRmU3g3TXpNNld6SXNOek5kTERjMU9sc3lMRGN6WFgwc2V6SXpPbHN5TERJNVhTd3pNenBiTWl3eU9WMHNOVFE2V3pJc01qbGRMRFkxT2xzeUxESTVYU3cyT0RwYk1pd3lPVjBzTnpJNld6SXNNamxkTERjMU9sc3lMREk1WFN3NE1EcGJNaXd5T1Ywc09ERTZXeklzTWpsZExEZ3lPbHN5TERJNVhTdzRNenBiTWl3eU9WMHNPRFE2V3pJc01qbGRMRGcxT2xzeUxESTVYWDBzZXpFME9sc3lMREUxWFN3eE5UcGJNaXd4TlYwc01UazZXeklzTVRWZExESTVPbHN5TERFMVhTd3pORHBiTWl3eE5WMHNNems2V3pJc01UVmRMRFEwT2xzeUxERTFYU3cwTnpwYk1pd3hOVjBzTkRnNld6SXNNVFZkTERVeE9sc3lMREUxWFN3MU5UcGJNaXd4TlYwc05qQTZXeklzTVRWZGZTeDdOekk2V3pFc01UTTNYU3czTnpwYk1Td3hNelpkZlN4N056STZXeklzTVRBd1hTdzNOenBiTWl3eE1EQmRmU3g3TVRRNld6SXNNVFpkTERFMU9sc3lMREUyWFN3eE9UcGJNaXd4Tmwwc01qazZXeklzTVRaZExETTBPbHN5TERFMlhTdzBORHBiTWl3eE5sMHNORGM2V3pJc01UWmRMRFE0T2xzeUxERTJYU3cxTVRwYk1pd3hObDBzTlRVNld6SXNNVFpkTERZd09sc3lMREUyWFgwc2V6TXpPbHN4TERFek9GMTlMSHN6TXpwYk1pdzNOVjE5TEhzek16cGJNaXd6TWwxOUxIczNNanBiTWl3eE1ERmRMRGMzT2xzeUxERXdNVjE5TEhzeE5EcGJNaXd4TjEwc01UVTZXeklzTVRkZExERTVPbHN5TERFM1hTd3lPVHBiTWl3eE4xMHNNelE2V3pJc01UZGRMRE01T2xzeUxERTNYU3cwTkRwYk1pd3hOMTBzTkRjNld6SXNNVGRkTERRNE9sc3lMREUzWFN3MU1UcGJNaXd4TjEwc05UVTZXeklzTVRkZExEWXdPbHN5TERFM1hYMWRMRnh1WkdWbVlYVnNkRUZqZEdsdmJuTTZJSHMwT2xzeUxERmRMRFUwT2xzeUxEVTFYU3cxTmpwYk1pd3lNRjBzTmpBNld6SXNOVGRkTERjek9sc3lMRGd4WFN3NE1qcGJNaXc0TlYwc09EWTZXeklzTVRoZExEa3dPbHN5TERnNVhTd3hNREU2V3pJc05UTmRMREV3TkRwYk1pdzVNMTBzTVRFd09sc3lMREU1WFN3eE1URTZXeklzTnpkZExERXhOanBiTWl3NU4xMHNNVEU1T2xzeUxEWXpYU3d4TWpJNld6SXNOamxkTERFek5UcGJNaXczTlYwc01UTTJPbHN5TERNeVhYMHNYRzV3WVhKelpVVnljbTl5T2lCbWRXNWpkR2x2YmlCd1lYSnpaVVZ5Y205eUlDaHpkSElzSUdoaGMyZ3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb2MzUnlLVHRjYm4wc1hHNXdZWEp6WlRvZ1puVnVZM1JwYjI0Z2NHRnljMlVvYVc1d2RYUXBJSHRjYmlBZ0lDQjJZWElnYzJWc1ppQTlJSFJvYVhNc0lITjBZV05ySUQwZ1d6QmRMQ0IyYzNSaFkyc2dQU0JiYm5Wc2JGMHNJR3h6ZEdGamF5QTlJRnRkTENCMFlXSnNaU0E5SUhSb2FYTXVkR0ZpYkdVc0lIbDVkR1Y0ZENBOUlGd2lYQ0lzSUhsNWJHbHVaVzV2SUQwZ01Dd2dlWGxzWlc1bklEMGdNQ3dnY21WamIzWmxjbWx1WnlBOUlEQXNJRlJGVWxKUFVpQTlJRElzSUVWUFJpQTlJREU3WEc0Z0lDQWdkR2hwY3k1c1pYaGxjaTV6WlhSSmJuQjFkQ2hwYm5CMWRDazdYRzRnSUNBZ2RHaHBjeTVzWlhobGNpNTVlU0E5SUhSb2FYTXVlWGs3WEc0Z0lDQWdkR2hwY3k1NWVTNXNaWGhsY2lBOUlIUm9hWE11YkdWNFpYSTdYRzRnSUNBZ2RHaHBjeTU1ZVM1d1lYSnpaWElnUFNCMGFHbHpPMXh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdkR2hwY3k1c1pYaGxjaTU1ZVd4c2IyTWdQVDBnWENKMWJtUmxabWx1WldSY0lpbGNiaUFnSUNBZ0lDQWdkR2hwY3k1c1pYaGxjaTU1ZVd4c2IyTWdQU0I3ZlR0Y2JpQWdJQ0IyWVhJZ2VYbHNiMk1nUFNCMGFHbHpMbXhsZUdWeUxubDViR3h2WXp0Y2JpQWdJQ0JzYzNSaFkyc3VjSFZ6YUNoNWVXeHZZeWs3WEc0Z0lDQWdkbUZ5SUhKaGJtZGxjeUE5SUhSb2FYTXViR1Y0WlhJdWIzQjBhVzl1Y3lBbUppQjBhR2x6TG14bGVHVnlMbTl3ZEdsdmJuTXVjbUZ1WjJWek8xeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2RHaHBjeTU1ZVM1d1lYSnpaVVZ5Y205eUlEMDlQU0JjSW1aMWJtTjBhVzl1WENJcFhHNGdJQ0FnSUNBZ0lIUm9hWE11Y0dGeWMyVkZjbkp2Y2lBOUlIUm9hWE11ZVhrdWNHRnljMlZGY25KdmNqdGNiaUFnSUNCbWRXNWpkR2x2YmlCd2IzQlRkR0ZqYXlodUtTQjdYRzRnSUNBZ0lDQWdJSE4wWVdOckxteGxibWQwYUNBOUlITjBZV05yTG14bGJtZDBhQ0F0SURJZ0tpQnVPMXh1SUNBZ0lDQWdJQ0IyYzNSaFkyc3ViR1Z1WjNSb0lEMGdkbk4wWVdOckxteGxibWQwYUNBdElHNDdYRzRnSUNBZ0lDQWdJR3h6ZEdGamF5NXNaVzVuZEdnZ1BTQnNjM1JoWTJzdWJHVnVaM1JvSUMwZ2JqdGNiaUFnSUNCOVhHNGdJQ0FnWm5WdVkzUnBiMjRnYkdWNEtDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2RHOXJaVzQ3WEc0Z0lDQWdJQ0FnSUhSdmEyVnVJRDBnYzJWc1ppNXNaWGhsY2k1c1pYZ29LU0I4ZkNBeE8xeHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSFJ2YTJWdUlDRTlQU0JjSW01MWJXSmxjbHdpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYjJ0bGJpQTlJSE5sYkdZdWMzbHRZbTlzYzE5YmRHOXJaVzVkSUh4OElIUnZhMlZ1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGIydGxianRjYmlBZ0lDQjlYRzRnSUNBZ2RtRnlJSE41YldKdmJDd2djSEpsUlhKeWIzSlRlVzFpYjJ3c0lITjBZWFJsTENCaFkzUnBiMjRzSUdFc0lISXNJSGw1ZG1Gc0lEMGdlMzBzSUhBc0lHeGxiaXdnYm1WM1UzUmhkR1VzSUdWNGNHVmpkR1ZrTzF4dUlDQWdJSGRvYVd4bElDaDBjblZsS1NCN1hHNGdJQ0FnSUNBZ0lITjBZWFJsSUQwZ2MzUmhZMnRiYzNSaFkyc3ViR1Z1WjNSb0lDMGdNVjA3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1SbFptRjFiSFJCWTNScGIyNXpXM04wWVhSbFhTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lXTjBhVzl1SUQwZ2RHaHBjeTVrWldaaGRXeDBRV04wYVc5dWMxdHpkR0YwWlYwN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MzbHRZbTlzSUQwOVBTQnVkV3hzSUh4OElIUjVjR1Z2WmlCemVXMWliMndnUFQwZ1hDSjFibVJsWm1sdVpXUmNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhONWJXSnZiQ0E5SUd4bGVDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWVdOMGFXOXVJRDBnZEdGaWJHVmJjM1JoZEdWZElDWW1JSFJoWW14bFczTjBZWFJsWFZ0emVXMWliMnhkTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdZV04wYVc5dUlEMDlQU0JjSW5WdVpHVm1hVzVsWkZ3aUlIeDhJQ0ZoWTNScGIyNHViR1Z1WjNSb0lIeDhJQ0ZoWTNScGIyNWJNRjBwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCbGNuSlRkSElnUFNCY0lsd2lPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0Z5WldOdmRtVnlhVzVuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pYaHdaV04wWldRZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tIQWdhVzRnZEdGaWJHVmJjM1JoZEdWZEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTUwWlhKdGFXNWhiSE5mVzNCZElDWW1JSEFnUGlBeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxlSEJsWTNSbFpDNXdkWE5vS0Z3aUoxd2lJQ3NnZEdocGN5NTBaWEp0YVc1aGJITmZXM0JkSUNzZ1hDSW5YQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXViR1Y0WlhJdWMyaHZkMUJ2YzJsMGFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnljbE4wY2lBOUlGd2lVR0Z5YzJVZ1pYSnliM0lnYjI0Z2JHbHVaU0JjSWlBcklDaDVlV3hwYm1WdWJ5QXJJREVwSUNzZ1hDSTZYRnh1WENJZ0t5QjBhR2x6TG14bGVHVnlMbk5vYjNkUWIzTnBkR2x2YmlncElDc2dYQ0pjWEc1RmVIQmxZM1JwYm1jZ1hDSWdLeUJsZUhCbFkzUmxaQzVxYjJsdUtGd2lMQ0JjSWlrZ0t5QmNJaXdnWjI5MElDZGNJaUFySUNoMGFHbHpMblJsY20xcGJtRnNjMTliYzNsdFltOXNYU0I4ZkNCemVXMWliMndwSUNzZ1hDSW5YQ0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pYSnlVM1J5SUQwZ1hDSlFZWEp6WlNCbGNuSnZjaUJ2YmlCc2FXNWxJRndpSUNzZ0tIbDViR2x1Wlc1dklDc2dNU2tnS3lCY0lqb2dWVzVsZUhCbFkzUmxaQ0JjSWlBcklDaHplVzFpYjJ3Z1BUMGdNVDljSW1WdVpDQnZaaUJwYm5CMWRGd2lPbHdpSjF3aUlDc2dLSFJvYVhNdWRHVnliV2x1WVd4elgxdHplVzFpYjJ4ZElIeDhJSE41YldKdmJDa2dLeUJjSWlkY0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHRnljMlZGY25KdmNpaGxjbkpUZEhJc0lIdDBaWGgwT2lCMGFHbHpMbXhsZUdWeUxtMWhkR05vTENCMGIydGxiam9nZEdocGN5NTBaWEp0YVc1aGJITmZXM041YldKdmJGMGdmSHdnYzNsdFltOXNMQ0JzYVc1bE9pQjBhR2x6TG14bGVHVnlMbmw1YkdsdVpXNXZMQ0JzYjJNNklIbDViRzlqTENCbGVIQmxZM1JsWkRvZ1pYaHdaV04wWldSOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvWVdOMGFXOXVXekJkSUdsdWMzUmhibU5sYjJZZ1FYSnlZWGtnSmlZZ1lXTjBhVzl1TG14bGJtZDBhQ0ErSURFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSWxCaGNuTmxJRVZ5Y205eU9pQnRkV3gwYVhCc1pTQmhZM1JwYjI1eklIQnZjM05wWW14bElHRjBJSE4wWVhSbE9pQmNJaUFySUhOMFlYUmxJQ3NnWENJc0lIUnZhMlZ1T2lCY0lpQXJJSE41YldKdmJDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYzNkcGRHTm9JQ2hoWTNScGIyNWJNRjBwSUh0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0F4T2x4dUlDQWdJQ0FnSUNBZ0lDQWdjM1JoWTJzdWNIVnphQ2h6ZVcxaWIyd3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RuTjBZV05yTG5CMWMyZ29kR2hwY3k1c1pYaGxjaTU1ZVhSbGVIUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JITjBZV05yTG5CMWMyZ29kR2hwY3k1c1pYaGxjaTU1ZVd4c2IyTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUmhZMnN1Y0hWemFDaGhZM1JwYjI1Yk1WMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MzbHRZbTlzSUQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doY0hKbFJYSnliM0pUZVcxaWIyd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I1ZVd4bGJtY2dQU0IwYUdsekxteGxlR1Z5TG5sNWJHVnVaenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I1ZVhSbGVIUWdQU0IwYUdsekxteGxlR1Z5TG5sNWRHVjRkRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I1ZVd4cGJtVnVieUE5SUhSb2FYTXViR1Y0WlhJdWVYbHNhVzVsYm04N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VYbHNiMk1nUFNCMGFHbHpMbXhsZUdWeUxubDViR3h2WXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jbVZqYjNabGNtbHVaeUErSURBcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsWTI5MlpYSnBibWN0TFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM2x0WW05c0lEMGdjSEpsUlhKeWIzSlRlVzFpYjJ3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NISmxSWEp5YjNKVGVXMWliMndnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJR05oYzJVZ01qcGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGJpQTlJSFJvYVhNdWNISnZaSFZqZEdsdmJuTmZXMkZqZEdsdmJsc3hYVjFiTVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I1ZVhaaGJDNGtJRDBnZG5OMFlXTnJXM1p6ZEdGamF5NXNaVzVuZEdnZ0xTQnNaVzVkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdlWGwyWVd3dVh5UWdQU0I3Wm1seWMzUmZiR2x1WlRvZ2JITjBZV05yVzJ4emRHRmpheTVzWlc1bmRHZ2dMU0FvYkdWdUlIeDhJREVwWFM1bWFYSnpkRjlzYVc1bExDQnNZWE4wWDJ4cGJtVTZJR3h6ZEdGamExdHNjM1JoWTJzdWJHVnVaM1JvSUMwZ01WMHViR0Z6ZEY5c2FXNWxMQ0JtYVhKemRGOWpiMngxYlc0NklHeHpkR0ZqYTF0c2MzUmhZMnN1YkdWdVozUm9JQzBnS0d4bGJpQjhmQ0F4S1YwdVptbHljM1JmWTI5c2RXMXVMQ0JzWVhOMFgyTnZiSFZ0YmpvZ2JITjBZV05yVzJ4emRHRmpheTVzWlc1bmRHZ2dMU0F4WFM1c1lYTjBYMk52YkhWdGJuMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jbUZ1WjJWektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlWGwyWVd3dVh5UXVjbUZ1WjJVZ1BTQmJiSE4wWVdOclcyeHpkR0ZqYXk1c1pXNW5kR2dnTFNBb2JHVnVJSHg4SURFcFhTNXlZVzVuWlZzd1hTd2diSE4wWVdOclcyeHpkR0ZqYXk1c1pXNW5kR2dnTFNBeFhTNXlZVzVuWlZzeFhWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5SUQwZ2RHaHBjeTV3WlhKbWIzSnRRV04wYVc5dUxtTmhiR3dvZVhsMllXd3NJSGw1ZEdWNGRDd2dlWGxzWlc1bkxDQjVlV3hwYm1WdWJ5d2dkR2hwY3k1NWVTd2dZV04wYVc5dVd6RmRMQ0IyYzNSaFkyc3NJR3h6ZEdGamF5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlISWdJVDA5SUZ3aWRXNWtaV1pwYm1Wa1hDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjanRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHNaVzRwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRHRmpheUE5SUhOMFlXTnJMbk5zYVdObEtEQXNJQzB4SUNvZ2JHVnVJQ29nTWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RuTjBZV05ySUQwZ2RuTjBZV05yTG5Oc2FXTmxLREFzSUMweElDb2diR1Z1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2MzUmhZMnNnUFNCc2MzUmhZMnN1YzJ4cFkyVW9NQ3dnTFRFZ0tpQnNaVzRwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUmhZMnN1Y0hWemFDaDBhR2x6TG5CeWIyUjFZM1JwYjI1elgxdGhZM1JwYjI1Yk1WMWRXekJkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFp6ZEdGamF5NXdkWE5vS0hsNWRtRnNMaVFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdiSE4wWVdOckxuQjFjMmdvZVhsMllXd3VYeVFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdibVYzVTNSaGRHVWdQU0IwWVdKc1pWdHpkR0ZqYTF0emRHRmpheTVzWlc1bmRHZ2dMU0F5WFYxYmMzUmhZMnRiYzNSaFkyc3ViR1Z1WjNSb0lDMGdNVjFkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjM1JoWTJzdWNIVnphQ2h1WlhkVGRHRjBaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0F6T2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc1OVhHNTlPMXh1THlvZ1NtbHpiMjRnWjJWdVpYSmhkR1ZrSUd4bGVHVnlJQ292WEc1MllYSWdiR1Y0WlhJZ1BTQW9ablZ1WTNScGIyNG9LWHRjYm5aaGNpQnNaWGhsY2lBOUlDaDdSVTlHT2pFc1hHNXdZWEp6WlVWeWNtOXlPbVoxYm1OMGFXOXVJSEJoY25ObFJYSnliM0lvYzNSeUxDQm9ZWE5vS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxubDVMbkJoY25ObGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTU1ZVM1d1lYSnpaWEl1Y0dGeWMyVkZjbkp2Y2loemRISXNJR2hoYzJncE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLSE4wY2lrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUxGeHVjMlYwU1c1d2RYUTZablZ1WTNScGIyNGdLR2x1Y0hWMEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgybHVjSFYwSUQwZ2FXNXdkWFE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjF2Y21VZ1BTQjBhR2x6TGw5c1pYTnpJRDBnZEdocGN5NWtiMjVsSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVlWGxzYVc1bGJtOGdQU0IwYUdsekxubDViR1Z1WnlBOUlEQTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWVYbDBaWGgwSUQwZ2RHaHBjeTV0WVhSamFHVmtJRDBnZEdocGN5NXRZWFJqYUNBOUlDY25PMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTnZibVJwZEdsdmJsTjBZV05ySUQwZ1d5ZEpUa2xVU1VGTUoxMDdYRzRnSUNBZ0lDQWdJSFJvYVhNdWVYbHNiRzlqSUQwZ2UyWnBjbk4wWDJ4cGJtVTZNU3htYVhKemRGOWpiMngxYlc0Nk1DeHNZWE4wWDJ4cGJtVTZNU3hzWVhOMFgyTnZiSFZ0Ympvd2ZUdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NXlZVzVuWlhNcElIUm9hWE11ZVhsc2JHOWpMbkpoYm1kbElEMGdXekFzTUYwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YjJabWMyVjBJRDBnTUR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUNBZ2ZTeGNibWx1Y0hWME9tWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHTm9JRDBnZEdocGN5NWZhVzV3ZFhSYk1GMDdYRzRnSUNBZ0lDQWdJSFJvYVhNdWVYbDBaWGgwSUNzOUlHTm9PMXh1SUNBZ0lDQWdJQ0IwYUdsekxubDViR1Z1Wnlzck8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG05bVpuTmxkQ3NyTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbTFoZEdOb0lDczlJR05vTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbTFoZEdOb1pXUWdLejBnWTJnN1hHNGdJQ0FnSUNBZ0lIWmhjaUJzYVc1bGN5QTlJR05vTG0xaGRHTm9LQzhvUHpwY1hISmNYRzQvZkZ4Y2Jpa3VLaTluS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLR3hwYm1WektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbmw1YkdsdVpXNXZLeXM3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5sNWJHeHZZeTVzWVhOMFgyeHBibVVyS3p0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWVYbHNiRzlqTG14aGMzUmZZMjlzZFcxdUt5czdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YjNCMGFXOXVjeTV5WVc1blpYTXBJSFJvYVhNdWVYbHNiRzlqTG5KaGJtZGxXekZkS3lzN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmFXNXdkWFFnUFNCMGFHbHpMbDlwYm5CMWRDNXpiR2xqWlNneEtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHTm9PMXh1SUNBZ0lIMHNYRzUxYm5CMWREcG1kVzVqZEdsdmJpQW9ZMmdwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR3hsYmlBOUlHTm9MbXhsYm1kMGFEdGNiaUFnSUNBZ0lDQWdkbUZ5SUd4cGJtVnpJRDBnWTJndWMzQnNhWFFvTHlnL09seGNjbHhjYmo5OFhGeHVLUzluS1R0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TGw5cGJuQjFkQ0E5SUdOb0lDc2dkR2hwY3k1ZmFXNXdkWFE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVlWGwwWlhoMElEMGdkR2hwY3k1NWVYUmxlSFF1YzNWaWMzUnlLREFzSUhSb2FYTXVlWGwwWlhoMExteGxibWQwYUMxc1pXNHRNU2s3WEc0Z0lDQWdJQ0FnSUM4dmRHaHBjeTU1ZVd4bGJtY2dMVDBnYkdWdU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG05bVpuTmxkQ0F0UFNCc1pXNDdYRzRnSUNBZ0lDQWdJSFpoY2lCdmJHUk1hVzVsY3lBOUlIUm9hWE11YldGMFkyZ3VjM0JzYVhRb0x5Zy9PbHhjY2x4Y2JqOThYRnh1S1M5bktUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dFlYUmphQ0E5SUhSb2FYTXViV0YwWTJndWMzVmljM1J5S0RBc0lIUm9hWE11YldGMFkyZ3ViR1Z1WjNSb0xURXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtMWhkR05vWldRZ1BTQjBhR2x6TG0xaGRHTm9aV1F1YzNWaWMzUnlLREFzSUhSb2FYTXViV0YwWTJobFpDNXNaVzVuZEdndE1TazdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHeHBibVZ6TG14bGJtZDBhQzB4S1NCMGFHbHpMbmw1YkdsdVpXNXZJQzA5SUd4cGJtVnpMbXhsYm1kMGFDMHhPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NpQTlJSFJvYVhNdWVYbHNiRzlqTG5KaGJtZGxPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVlWGxzYkc5aklEMGdlMlpwY25OMFgyeHBibVU2SUhSb2FYTXVlWGxzYkc5akxtWnBjbk4wWDJ4cGJtVXNYRzRnSUNBZ0lDQWdJQ0FnYkdGemRGOXNhVzVsT2lCMGFHbHpMbmw1YkdsdVpXNXZLekVzWEc0Z0lDQWdJQ0FnSUNBZ1ptbHljM1JmWTI5c2RXMXVPaUIwYUdsekxubDViR3h2WXk1bWFYSnpkRjlqYjJ4MWJXNHNYRzRnSUNBZ0lDQWdJQ0FnYkdGemRGOWpiMngxYlc0NklHeHBibVZ6SUQ5Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnS0d4cGJtVnpMbXhsYm1kMGFDQTlQVDBnYjJ4a1RHbHVaWE11YkdWdVozUm9JRDhnZEdocGN5NTVlV3hzYjJNdVptbHljM1JmWTI5c2RXMXVJRG9nTUNrZ0t5QnZiR1JNYVc1bGMxdHZiR1JNYVc1bGN5NXNaVzVuZEdnZ0xTQnNhVzVsY3k1c1pXNW5kR2hkTG14bGJtZDBhQ0F0SUd4cGJtVnpXekJkTG14bGJtZDBhRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1NWVXeHNiMk11Wm1seWMzUmZZMjlzZFcxdUlDMGdiR1Z1WEc0Z0lDQWdJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMbkpoYm1kbGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTU1ZVd4c2IyTXVjbUZ1WjJVZ1BTQmJjbHN3WFN3Z2Nsc3dYU0FySUhSb2FYTXVlWGxzWlc1bklDMGdiR1Z1WFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ0lDQjlMRnh1Ylc5eVpUcG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjF2Y21VZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNCOUxGeHViR1Z6Y3pwbWRXNWpkR2x2YmlBb2Jpa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuVnVjSFYwS0hSb2FYTXViV0YwWTJndWMyeHBZMlVvYmlrcE8xeHVJQ0FnSUgwc1hHNXdZWE4wU1c1d2RYUTZablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdjR0Z6ZENBOUlIUm9hWE11YldGMFkyaGxaQzV6ZFdKemRISW9NQ3dnZEdocGN5NXRZWFJqYUdWa0xteGxibWQwYUNBdElIUm9hWE11YldGMFkyZ3ViR1Z1WjNSb0tUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDaHdZWE4wTG14bGJtZDBhQ0ErSURJd0lEOGdKeTR1TGljNkp5Y3BJQ3NnY0dGemRDNXpkV0p6ZEhJb0xUSXdLUzV5WlhCc1lXTmxLQzljWEc0dlp5d2dYQ0pjSWlrN1hHNGdJQ0FnZlN4Y2JuVndZMjl0YVc1blNXNXdkWFE2Wm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYm1WNGRDQTlJSFJvYVhNdWJXRjBZMmc3WEc0Z0lDQWdJQ0FnSUdsbUlDaHVaWGgwTG14bGJtZDBhQ0E4SURJd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCdVpYaDBJQ3M5SUhSb2FYTXVYMmx1Y0hWMExuTjFZbk4wY2lnd0xDQXlNQzF1WlhoMExteGxibWQwYUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDaHVaWGgwTG5OMVluTjBjaWd3TERJd0tTc29ibVY0ZEM1c1pXNW5kR2dnUGlBeU1DQS9JQ2N1TGk0bk9pY25LU2t1Y21Wd2JHRmpaU2d2WEZ4dUwyY3NJRndpWENJcE8xeHVJQ0FnSUgwc1hHNXphRzkzVUc5emFYUnBiMjQ2Wm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnY0hKbElEMGdkR2hwY3k1d1lYTjBTVzV3ZFhRb0tUdGNiaUFnSUNBZ0lDQWdkbUZ5SUdNZ1BTQnVaWGNnUVhKeVlYa29jSEpsTG14bGJtZDBhQ0FySURFcExtcHZhVzRvWENJdFhDSXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjSEpsSUNzZ2RHaHBjeTUxY0dOdmJXbHVaMGx1Y0hWMEtDa2dLeUJjSWx4Y2Jsd2lJQ3NnWXl0Y0lsNWNJanRjYmlBZ0lDQjlMRnh1Ym1WNGREcG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1SdmJtVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMa1ZQUmp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVYMmx1Y0hWMEtTQjBhR2x6TG1SdmJtVWdQU0IwY25WbE8xeHVYRzRnSUNBZ0lDQWdJSFpoY2lCMGIydGxiaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHMWhkR05vTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR1Z0Y0UxaGRHTm9MRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXNWtaWGdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMndzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnNhVzVsY3p0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxsOXRiM0psS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxubDVkR1Y0ZENBOUlDY25PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV0WVhSamFDQTlJQ2NuTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIWmhjaUJ5ZFd4bGN5QTlJSFJvYVhNdVgyTjFjbkpsYm5SU2RXeGxjeWdwTzF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcFBUQTdhU0E4SUhKMWJHVnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwWlcxd1RXRjBZMmdnUFNCMGFHbHpMbDlwYm5CMWRDNXRZWFJqYUNoMGFHbHpMbkoxYkdWelczSjFiR1Z6VzJsZFhTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR1Z0Y0UxaGRHTm9JQ1ltSUNnaGJXRjBZMmdnZkh3Z2RHVnRjRTFoZEdOb1d6QmRMbXhsYm1kMGFDQStJRzFoZEdOb1d6QmRMbXhsYm1kMGFDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WVhSamFDQTlJSFJsYlhCTllYUmphRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYm1SbGVDQTlJR2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TG05d2RHbHZibk11Wm14bGVDa2dZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLRzFoZEdOb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc2FXNWxjeUE5SUcxaGRHTm9XekJkTG0xaGRHTm9LQzhvUHpwY1hISmNYRzQvZkZ4Y2Jpa3VLaTluS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoc2FXNWxjeWtnZEdocGN5NTVlV3hwYm1WdWJ5QXJQU0JzYVc1bGN5NXNaVzVuZEdnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxubDViR3h2WXlBOUlIdG1hWEp6ZEY5c2FXNWxPaUIwYUdsekxubDViR3h2WXk1c1lYTjBYMnhwYm1Vc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNZWE4wWDJ4cGJtVTZJSFJvYVhNdWVYbHNhVzVsYm04ck1TeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1pwY25OMFgyTnZiSFZ0YmpvZ2RHaHBjeTU1ZVd4c2IyTXViR0Z6ZEY5amIyeDFiVzRzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1lYTjBYMk52YkhWdGJqb2diR2x1WlhNZ1B5QnNhVzVsYzF0c2FXNWxjeTVzWlc1bmRHZ3RNVjB1YkdWdVozUm9MV3hwYm1WelcyeHBibVZ6TG14bGJtZDBhQzB4WFM1dFlYUmphQ2d2WEZ4eVAxeGNiajh2S1Zzd1hTNXNaVzVuZEdnZ09pQjBhR2x6TG5sNWJHeHZZeTVzWVhOMFgyTnZiSFZ0YmlBcklHMWhkR05vV3pCZExteGxibWQwYUgwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxubDVkR1Y0ZENBclBTQnRZWFJqYUZzd1hUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViV0YwWTJnZ0t6MGdiV0YwWTJoYk1GMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTFoZEdOb1pYTWdQU0J0WVhSamFEdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVlWGxzWlc1bklEMGdkR2hwY3k1NWVYUmxlSFF1YkdWdVozUm9PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWIzQjBhVzl1Y3k1eVlXNW5aWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbmw1Ykd4dll5NXlZVzVuWlNBOUlGdDBhR2x6TG05bVpuTmxkQ3dnZEdocGN5NXZabVp6WlhRZ0t6MGdkR2hwY3k1NWVXeGxibWRkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYlc5eVpTQTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZhVzV3ZFhRZ1BTQjBhR2x6TGw5cGJuQjFkQzV6YkdsalpTaHRZWFJqYUZzd1hTNXNaVzVuZEdncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXRZWFJqYUdWa0lDczlJRzFoZEdOb1d6QmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHOXJaVzRnUFNCMGFHbHpMbkJsY21admNtMUJZM1JwYjI0dVkyRnNiQ2gwYUdsekxDQjBhR2x6TG5sNUxDQjBhR2x6TENCeWRXeGxjMXRwYm1SbGVGMHNkR2hwY3k1amIyNWthWFJwYjI1VGRHRmphMXQwYUdsekxtTnZibVJwZEdsdmJsTjBZV05yTG14bGJtZDBhQzB4WFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVrYjI1bElDWW1JSFJvYVhNdVgybHVjSFYwS1NCMGFHbHpMbVJ2Ym1VZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGIydGxiaWtnY21WMGRYSnVJSFJ2YTJWdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYMmx1Y0hWMElEMDlQU0JjSWx3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NUZUMFk3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV3WVhKelpVVnljbTl5S0NkTVpYaHBZMkZzSUdWeWNtOXlJRzl1SUd4cGJtVWdKeXNvZEdocGN5NTVlV3hwYm1WdWJ5c3hLU3NuTGlCVmJuSmxZMjluYm1sNlpXUWdkR1Y0ZEM1Y1hHNG5LM1JvYVhNdWMyaHZkMUJ2YzJsMGFXOXVLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIdDBaWGgwT2lCY0lsd2lMQ0IwYjJ0bGJqb2diblZzYkN3Z2JHbHVaVG9nZEdocGN5NTVlV3hwYm1WdWIzMHBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYm14bGVEcG1kVzVqZEdsdmJpQnNaWGdnS0NrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnY2lBOUlIUm9hWE11Ym1WNGRDZ3BPMXh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhJZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjanRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbXhsZUNncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibUpsWjJsdU9tWjFibU4wYVc5dUlHSmxaMmx1SUNoamIyNWthWFJwYjI0cElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1amIyNWthWFJwYjI1VGRHRmpheTV3ZFhOb0tHTnZibVJwZEdsdmJpazdYRzRnSUNBZ2ZTeGNibkJ2Y0ZOMFlYUmxPbVoxYm1OMGFXOXVJSEJ2Y0ZOMFlYUmxJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMjl1WkdsMGFXOXVVM1JoWTJzdWNHOXdLQ2s3WEc0Z0lDQWdmU3hjYmw5amRYSnlaVzUwVW5Wc1pYTTZablZ1WTNScGIyNGdYMk4xY25KbGJuUlNkV3hsY3lBb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1OdmJtUnBkR2x2Ym5OYmRHaHBjeTVqYjI1a2FYUnBiMjVUZEdGamExdDBhR2x6TG1OdmJtUnBkR2x2YmxOMFlXTnJMbXhsYm1kMGFDMHhYVjB1Y25Wc1pYTTdYRzRnSUNBZ2ZTeGNiblJ2Y0ZOMFlYUmxPbVoxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMjl1WkdsMGFXOXVVM1JoWTJ0YmRHaHBjeTVqYjI1a2FYUnBiMjVUZEdGamF5NXNaVzVuZEdndE1sMDdYRzRnSUNBZ2ZTeGNibkIxYzJoVGRHRjBaVHBtZFc1amRHbHZiaUJpWldkcGJpQW9ZMjl1WkdsMGFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZbVZuYVc0b1kyOXVaR2wwYVc5dUtUdGNiaUFnSUNCOWZTazdYRzVzWlhobGNpNXZjSFJwYjI1eklEMGdlMzA3WEc1c1pYaGxjaTV3WlhKbWIzSnRRV04wYVc5dUlEMGdablZ1WTNScGIyNGdZVzV2Ym5sdGIzVnpLSGw1TEhsNVh5d2tZWFp2YVdScGJtZGZibUZ0WlY5amIyeHNhWE5wYjI1ekxGbFpYMU5VUVZKVVhHNHBJSHRjYmx4dVhHNW1kVzVqZEdsdmJpQnpkSEpwY0NoemRHRnlkQ3dnWlc1a0tTQjdYRzRnSUhKbGRIVnliaUI1ZVY4dWVYbDBaWGgwSUQwZ2VYbGZMbmw1ZEdWNGRDNXpkV0p6ZEhKcGJtY29jM1JoY25Rc0lIbDVYeTU1ZVd4bGJtY2dMU0JsYm1RZ0t5QnpkR0Z5ZENrN1hHNTlYRzVjYmx4dWRtRnlJRmxaVTFSQlZFVTlXVmxmVTFSQlVsUmNibk4zYVhSamFDZ2tZWFp2YVdScGJtZGZibUZ0WlY5amIyeHNhWE5wYjI1ektTQjdYRzVqWVhObElEQTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtS0hsNVh5NTVlWFJsZUhRdWMyeHBZMlVvTFRJcElEMDlQU0JjSWx4Y1hGeGNYRnhjWENJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZEhKcGNDZ3dMREVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WW1WbmFXNG9YQ0p0ZFZ3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1LSGw1WHk1NWVYUmxlSFF1YzJ4cFkyVW9MVEVwSUQwOVBTQmNJbHhjWEZ4Y0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMGNtbHdLREFzTVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1aVpXZHBiaWhjSW1WdGRWd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbUpsWjJsdUtGd2liWFZjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lvZVhsZkxubDVkR1Y0ZENrZ2NtVjBkWEp1SURFMU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hHNWljbVZoYXp0Y2JtTmhjMlVnTVRweVpYUjFjbTRnTVRVN1hHNWljbVZoYXp0Y2JtTmhjMlVnTWpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3YjNCVGRHRjBaU2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnTVRVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCY2JtSnlaV0ZyTzF4dVkyRnpaU0F6T25Sb2FYTXVZbVZuYVc0b0ozSmhkeWNwT3lCeVpYUjFjbTRnTVRVN1hHNWljbVZoYXp0Y2JtTmhjMlVnTkRwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJ2Y0ZOMFlYUmxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1UyaHZkV3hrSUdKbElIVnphVzVuSUdCMGFHbHpMblJ2Y0ZOMFlYUmxLQ2xnSUdKbGJHOTNMQ0JpZFhRZ2FYUWdZM1Z5Y21WdWRHeDVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnY21WMGRYSnVjeUIwYUdVZ2MyVmpiMjVrSUhSdmNDQnBibk4wWldGa0lHOW1JSFJvWlNCbWFYSnpkQ0IwYjNBdUlFOXdaVzVsWkNCaGJseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR2x6YzNWbElHRmliM1YwSUdsMElHRjBJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzk2WVdGamFDOXFhWE52Ymk5cGMzTjFaWE12TWpreFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVkyOXVaR2wwYVc5dVUzUmhZMnRiZEdocGN5NWpiMjVrYVhScGIyNVRkR0ZqYXk1c1pXNW5kR2d0TVYwZ1BUMDlJQ2R5WVhjbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdNVFU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMGNtbHdLRFVzSURrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlDZEZUa1JmVWtGWFgwSk1UME5MSnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCY2JtSnlaV0ZyTzF4dVkyRnpaU0ExT2lCeVpYUjFjbTRnTVRVN0lGeHVZbkpsWVdzN1hHNWpZWE5sSURZNlhHNGdJSFJvYVhNdWNHOXdVM1JoZEdVb0tUdGNiaUFnY21WMGRYSnVJREUwTzF4dVhHNWljbVZoYXp0Y2JtTmhjMlVnTnpweVpYUjFjbTRnTmpVN1hHNWljbVZoYXp0Y2JtTmhjMlVnT0RweVpYUjFjbTRnTmpnN1hHNWljbVZoYXp0Y2JtTmhjMlVnT1RvZ2NtVjBkWEp1SURFNU95QmNibUp5WldGck8xeHVZMkZ6WlNBeE1EcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CdmNGTjBZWFJsS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVpWldkcGJpZ25jbUYzSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SURJek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hHNWljbVZoYXp0Y2JtTmhjMlVnTVRFNmNtVjBkWEp1SURVMU8xeHVZbkpsWVdzN1hHNWpZWE5sSURFeU9uSmxkSFZ5YmlBMk1EdGNibUp5WldGck8xeHVZMkZ6WlNBeE16cHlaWFIxY200Z01qazdYRzVpY21WaGF6dGNibU5oYzJVZ01UUTZjbVYwZFhKdUlEUTNPMXh1WW5KbFlXczdYRzVqWVhObElERTFPblJvYVhNdWNHOXdVM1JoZEdVb0tUc2djbVYwZFhKdUlEUTBPMXh1WW5KbFlXczdYRzVqWVhObElERTJPblJvYVhNdWNHOXdVM1JoZEdVb0tUc2djbVYwZFhKdUlEUTBPMXh1WW5KbFlXczdYRzVqWVhObElERTNPbkpsZEhWeWJpQXpORHRjYm1KeVpXRnJPMXh1WTJGelpTQXhPRHB5WlhSMWNtNGdNems3WEc1aWNtVmhhenRjYm1OaGMyVWdNVGs2Y21WMGRYSnVJRFV4TzF4dVluSmxZV3M3WEc1allYTmxJREl3T25KbGRIVnliaUEwT0R0Y2JtSnlaV0ZyTzF4dVkyRnpaU0F5TVRwY2JpQWdkR2hwY3k1MWJuQjFkQ2g1ZVY4dWVYbDBaWGgwS1R0Y2JpQWdkR2hwY3k1d2IzQlRkR0YwWlNncE8xeHVJQ0IwYUdsekxtSmxaMmx1S0NkamIyMG5LVHRjYmx4dVluSmxZV3M3WEc1allYTmxJREl5T2x4dUlDQjBhR2x6TG5CdmNGTjBZWFJsS0NrN1hHNGdJSEpsZEhWeWJpQXhORHRjYmx4dVluSmxZV3M3WEc1allYTmxJREl6T25KbGRIVnliaUEwT0R0Y2JtSnlaV0ZyTzF4dVkyRnpaU0F5TkRweVpYUjFjbTRnTnpNN1hHNWljbVZoYXp0Y2JtTmhjMlVnTWpVNmNtVjBkWEp1SURjeU8xeHVZbkpsWVdzN1hHNWpZWE5sSURJMk9uSmxkSFZ5YmlBM01qdGNibUp5WldGck8xeHVZMkZ6WlNBeU56cHlaWFIxY200Z09EYzdYRzVpY21WaGF6dGNibU5oYzJVZ01qZzZMeThnYVdkdWIzSmxJSGRvYVhSbGMzQmhZMlZjYm1KeVpXRnJPMXh1WTJGelpTQXlPVHAwYUdsekxuQnZjRk4wWVhSbEtDazdJSEpsZEhWeWJpQTFORHRjYm1KeVpXRnJPMXh1WTJGelpTQXpNRHAwYUdsekxuQnZjRk4wWVhSbEtDazdJSEpsZEhWeWJpQXpNenRjYm1KeVpXRnJPMXh1WTJGelpTQXpNVHA1ZVY4dWVYbDBaWGgwSUQwZ2MzUnlhWEFvTVN3eUtTNXlaWEJzWVdObEtDOWNYRnhjWENJdlp5d25YQ0luS1RzZ2NtVjBkWEp1SURnd08xeHVZbkpsWVdzN1hHNWpZWE5sSURNeU9ubDVYeTU1ZVhSbGVIUWdQU0J6ZEhKcGNDZ3hMRElwTG5KbGNHeGhZMlVvTDF4Y1hGd25MMmNzWENJblhDSXBPeUJ5WlhSMWNtNGdPREE3WEc1aWNtVmhhenRjYm1OaGMyVWdNek02Y21WMGRYSnVJRGcxTzF4dVluSmxZV3M3WEc1allYTmxJRE0wT25KbGRIVnliaUE0TWp0Y2JtSnlaV0ZyTzF4dVkyRnpaU0F6TlRweVpYUjFjbTRnT0RJN1hHNWljbVZoYXp0Y2JtTmhjMlVnTXpZNmNtVjBkWEp1SURnek8xeHVZbkpsWVdzN1hHNWpZWE5sSURNM09uSmxkSFZ5YmlBNE5EdGNibUp5WldGck8xeHVZMkZ6WlNBek9EcHlaWFIxY200Z09ERTdYRzVpY21WaGF6dGNibU5oYzJVZ016azZjbVYwZFhKdUlEYzFPMXh1WW5KbFlXczdYRzVqWVhObElEUXdPbkpsZEhWeWJpQTNOenRjYm1KeVpXRnJPMXh1WTJGelpTQTBNVHB5WlhSMWNtNGdOekk3WEc1aWNtVmhhenRjYm1OaGMyVWdOREk2ZVhsZkxubDVkR1Y0ZENBOUlIbDVYeTU1ZVhSbGVIUXVjbVZ3YkdGalpTZ3ZYRnhjWENoYlhGeGNYRnhjWFYwcEwyY3NKeVF4SnlrN0lISmxkSFZ5YmlBM01qdGNibUp5WldGck8xeHVZMkZ6WlNBME16cHlaWFIxY200Z0owbE9Wa0ZNU1VRbk8xeHVZbkpsWVdzN1hHNWpZWE5sSURRME9uSmxkSFZ5YmlBMU8xeHVZbkpsWVdzN1hHNTlYRzU5TzF4dWJHVjRaWEl1Y25Wc1pYTWdQU0JiTDE0b1B6cGJYbHhjZURBd1hTby9LRDg5S0Z4Y2UxeGNleWtwS1M4c0wxNG9QenBiWGx4Y2VEQXdYU3NwTHl3dlhpZy9PbHRlWEZ4NE1EQmRleklzZlQ4b1B6MG9YRng3WEZ4N2ZGeGNYRnhjWEh0Y1hIdDhYRnhjWEZ4Y1hGeGNYSHRjWEh0OEpDa3BLUzhzTDE0b1B6cGNYSHRjWEh0Y1hIdGNYSHNvUHoxYlhpOWRLU2t2TEM5ZUtEODZYRng3WEZ4N1hGeDdYRng3WEZ3dlcxNWNYSE1oWENJakpTMHNYRnd1WEZ3dk95MCtRRnhjV3kxY1hGNWdYRng3TFg1ZEt5Zy9QVnM5ZlZ4Y2MxeGNMeTVkS1Z4Y2ZWeGNmVnhjZlZ4Y2ZTa3ZMQzllS0Q4NlcxNWNYSGd3TUYwclB5Zy9QU2hjWEh0Y1hIdGNYSHRjWEhzcEtTa3ZMQzllS0Q4NlcxeGNjMXhjVTEwcVB5MHRLSDRwUDF4Y2ZWeGNmU2t2TEM5ZUtEODZYRndvS1M4c0wxNG9QenBjWENrcEx5d3ZYaWcvT2x4Y2UxeGNlMXhjZTF4Y2V5a3ZMQzllS0Q4NlhGeDlYRng5WEZ4OVhGeDlLUzhzTDE0b1B6cGNYSHRjWEhzb2Zpay9QaWt2TEM5ZUtEODZYRng3WEZ4N0tINHBQeU0rS1M4c0wxNG9QenBjWEh0Y1hIc29maWsvSTF4Y0tqOHBMeXd2WGlnL09seGNlMXhjZXloK0tUOWNYQzhwTHl3dlhpZy9PbHhjZTF4Y2V5aCtLVDljWEY1Y1hITXFLSDRwUDF4Y2ZWeGNmU2t2TEM5ZUtEODZYRng3WEZ4N0tINHBQMXhjY3lwbGJITmxYRnh6S2loK0tUOWNYSDFjWEgwcEx5d3ZYaWcvT2x4Y2UxeGNleWgrS1Q5Y1hGNHBMeXd2WGlnL09seGNlMXhjZXloK0tUOWNYSE1xWld4elpWeGNZaWt2TEM5ZUtEODZYRng3WEZ4N0tINHBQMXhjZXlrdkxDOWVLRDg2WEZ4N1hGeDdLSDRwUHlZcEx5d3ZYaWcvT2x4Y2UxeGNleWgrS1Q4aExTMHBMeXd2WGlnL09seGNlMXhjZXloK0tUOGhXMXhjYzF4Y1UxMHFQMXhjZlZ4Y2ZTa3ZMQzllS0Q4NlhGeDdYRng3S0g0cFAxeGNLajhwTHl3dlhpZy9PajBwTHl3dlhpZy9PbHhjTGx4Y0xpa3ZMQzllS0Q4NlhGd3VLRDg5S0ZzOWZuMWNYSE5jWEM4dUtYeGRLU2twTHl3dlhpZy9PbHRjWEM4dVhTa3ZMQzllS0Q4NlhGeHpLeWt2TEM5ZUtEODZYRng5S0g0cFAxeGNmVnhjZlNrdkxDOWVLRDg2S0g0cFAxeGNmVnhjZlNrdkxDOWVLRDg2WENJb1hGeGNYRnRjSWwxOFcxNWNJbDBwS2x3aUtTOHNMMTRvUHpvbktGeGNYRnhiSjExOFcxNG5YU2txSnlrdkxDOWVLRDg2UUNrdkxDOWVLRDg2ZEhKMVpTZy9QU2hiZm4xY1hITXBYU2twS1M4c0wxNG9QenBtWVd4elpTZy9QU2hiZm4xY1hITXBYU2twS1M4c0wxNG9QenAxYm1SbFptbHVaV1FvUHowb1czNTlYRnh6S1YwcEtTa3ZMQzllS0Q4NmJuVnNiQ2cvUFNoYmZuMWNYSE1wWFNrcEtTOHNMMTRvUHpvdFAxc3dMVGxkS3lnL09seGNMbHN3TFRsZEt5ay9LRDg5S0Z0K2ZWeGNjeWxkS1NrcEx5d3ZYaWcvT21GelhGeHpLMXhjZkNrdkxDOWVLRDg2WEZ4OEtTOHNMMTRvUHpvb1cxNWNYSE1oWENJakpTMHNYRnd1WEZ3dk95MCtRRnhjV3kxY1hGNWdYRng3TFg1ZEt5Zy9QU2hiUFg1OVhGeHpYRnd2TGlsOFhTa3BLU2t2TEM5ZUtEODZYRnhiS0Z4Y1hGeGNYRjE4VzE1Y1hGMWRLU3BjWEYwcEx5d3ZYaWcvT2k0cEx5d3ZYaWcvT2lRcEwxMDdYRzVzWlhobGNpNWpiMjVrYVhScGIyNXpJRDBnZTF3aWJYVmNJanA3WENKeWRXeGxjMXdpT2xzM0xEZ3NPU3d4TUN3eE1Td3hNaXd4TXl3eE5Dd3hOU3d4Tml3eE55d3hPQ3d4T1N3eU1Dd3lNU3d5TWl3eU15d3lOQ3d5TlN3eU5pd3lOeXd5T0N3eU9Td3pNQ3d6TVN3ek1pd3pNeXd6TkN3ek5Td3pOaXd6Tnl3ek9Dd3pPU3cwTUN3ME1TdzBNaXcwTXl3ME5GMHNYQ0pwYm1Oc2RYTnBkbVZjSWpwbVlXeHpaWDBzWENKbGJYVmNJanA3WENKeWRXeGxjMXdpT2xzeVhTeGNJbWx1WTJ4MWMybDJaVndpT21aaGJITmxmU3hjSW1OdmJWd2lPbnRjSW5KMWJHVnpYQ0k2V3paZExGd2lhVzVqYkhWemFYWmxYQ0k2Wm1Gc2MyVjlMRndpY21GM1hDSTZlMXdpY25Wc1pYTmNJanBiTXl3MExEVmRMRndpYVc1amJIVnphWFpsWENJNlptRnNjMlY5TEZ3aVNVNUpWRWxCVEZ3aU9udGNJbkoxYkdWelhDSTZXekFzTVN3ME5GMHNYQ0pwYm1Oc2RYTnBkbVZjSWpwMGNuVmxmWDA3WEc1eVpYUjFjbTRnYkdWNFpYSTdmU2tvS1Z4dWNHRnljMlZ5TG14bGVHVnlJRDBnYkdWNFpYSTdYRzVtZFc1amRHbHZiaUJRWVhKelpYSWdLQ2tnZXlCMGFHbHpMbmw1SUQwZ2UzMDdJSDFRWVhKelpYSXVjSEp2ZEc5MGVYQmxJRDBnY0dGeWMyVnlPM0JoY25ObGNpNVFZWEp6WlhJZ1BTQlFZWEp6WlhJN1hHNXlaWFIxY200Z2JtVjNJRkJoY25ObGNqdGNibjBwS0NrN1pYaHdiM0owSUdSbFptRjFiSFFnYUdGdVpHeGxZbUZ5Y3p0Y2JpSmRmUT09XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG4vLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfZXhjZXB0aW9uID0gcmVxdWlyZSgnLi4vZXhjZXB0aW9uJyk7XG5cbnZhciBfZXhjZXB0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4Y2VwdGlvbik7XG5cbmZ1bmN0aW9uIFZpc2l0b3IoKSB7XG4gIHRoaXMucGFyZW50cyA9IFtdO1xufVxuXG5WaXNpdG9yLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFZpc2l0b3IsXG4gIG11dGF0aW5nOiBmYWxzZSxcblxuICAvLyBWaXNpdHMgYSBnaXZlbiB2YWx1ZS4gSWYgbXV0YXRpbmcsIHdpbGwgcmVwbGFjZSB0aGUgdmFsdWUgaWYgbmVjZXNzYXJ5LlxuICBhY2NlcHRLZXk6IGZ1bmN0aW9uIGFjY2VwdEtleShub2RlLCBuYW1lKSB7XG4gICAgdmFyIHZhbHVlID0gdGhpcy5hY2NlcHQobm9kZVtuYW1lXSk7XG4gICAgaWYgKHRoaXMubXV0YXRpbmcpIHtcbiAgICAgIC8vIEhhY2t5IHNhbml0eSBjaGVjazogVGhpcyBtYXkgaGF2ZSBhIGZldyBmYWxzZSBwb3NpdGl2ZXMgZm9yIHR5cGUgZm9yIHRoZSBoZWxwZXJcbiAgICAgIC8vIG1ldGhvZHMgYnV0IHdpbGwgZ2VuZXJhbGx5IGRvIHRoZSByaWdodCB0aGluZyB3aXRob3V0IGEgbG90IG9mIG92ZXJoZWFkLlxuICAgICAgaWYgKHZhbHVlICYmICFWaXNpdG9yLnByb3RvdHlwZVt2YWx1ZS50eXBlXSkge1xuICAgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnVW5leHBlY3RlZCBub2RlIHR5cGUgXCInICsgdmFsdWUudHlwZSArICdcIiBmb3VuZCB3aGVuIGFjY2VwdGluZyAnICsgbmFtZSArICcgb24gJyArIG5vZGUudHlwZSk7XG4gICAgICB9XG4gICAgICBub2RlW25hbWVdID0gdmFsdWU7XG4gICAgfVxuICB9LFxuXG4gIC8vIFBlcmZvcm1zIGFuIGFjY2VwdCBvcGVyYXRpb24gd2l0aCBhZGRlZCBzYW5pdHkgY2hlY2sgdG8gZW5zdXJlXG4gIC8vIHJlcXVpcmVkIGtleXMgYXJlIG5vdCByZW1vdmVkLlxuICBhY2NlcHRSZXF1aXJlZDogZnVuY3Rpb24gYWNjZXB0UmVxdWlyZWQobm9kZSwgbmFtZSkge1xuICAgIHRoaXMuYWNjZXB0S2V5KG5vZGUsIG5hbWUpO1xuXG4gICAgaWYgKCFub2RlW25hbWVdKSB7XG4gICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXShub2RlLnR5cGUgKyAnIHJlcXVpcmVzICcgKyBuYW1lKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gVHJhdmVyc2VzIGEgZ2l2ZW4gYXJyYXkuIElmIG11dGF0aW5nLCBlbXB0eSByZXNwbnNlcyB3aWxsIGJlIHJlbW92ZWRcbiAgLy8gZm9yIGNoaWxkIGVsZW1lbnRzLlxuICBhY2NlcHRBcnJheTogZnVuY3Rpb24gYWNjZXB0QXJyYXkoYXJyYXkpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdGhpcy5hY2NlcHRLZXkoYXJyYXksIGkpO1xuXG4gICAgICBpZiAoIWFycmF5W2ldKSB7XG4gICAgICAgIGFycmF5LnNwbGljZShpLCAxKTtcbiAgICAgICAgaS0tO1xuICAgICAgICBsLS07XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGFjY2VwdDogZnVuY3Rpb24gYWNjZXB0KG9iamVjdCkge1xuICAgIGlmICghb2JqZWN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IFNhbml0eSBjb2RlICovXG4gICAgaWYgKCF0aGlzW29iamVjdC50eXBlXSkge1xuICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1Vua25vd24gdHlwZTogJyArIG9iamVjdC50eXBlLCBvYmplY3QpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmN1cnJlbnQpIHtcbiAgICAgIHRoaXMucGFyZW50cy51bnNoaWZ0KHRoaXMuY3VycmVudCk7XG4gICAgfVxuICAgIHRoaXMuY3VycmVudCA9IG9iamVjdDtcblxuICAgIHZhciByZXQgPSB0aGlzW29iamVjdC50eXBlXShvYmplY3QpO1xuXG4gICAgdGhpcy5jdXJyZW50ID0gdGhpcy5wYXJlbnRzLnNoaWZ0KCk7XG5cbiAgICBpZiAoIXRoaXMubXV0YXRpbmcgfHwgcmV0KSB7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH0gZWxzZSBpZiAocmV0ICE9PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG4gIH0sXG5cbiAgUHJvZ3JhbTogZnVuY3Rpb24gUHJvZ3JhbShwcm9ncmFtKSB7XG4gICAgdGhpcy5hY2NlcHRBcnJheShwcm9ncmFtLmJvZHkpO1xuICB9LFxuXG4gIE11c3RhY2hlU3RhdGVtZW50OiB2aXNpdFN1YkV4cHJlc3Npb24sXG4gIERlY29yYXRvcjogdmlzaXRTdWJFeHByZXNzaW9uLFxuXG4gIEJsb2NrU3RhdGVtZW50OiB2aXNpdEJsb2NrLFxuICBEZWNvcmF0b3JCbG9jazogdmlzaXRCbG9jayxcblxuICBQYXJ0aWFsU3RhdGVtZW50OiB2aXNpdFBhcnRpYWwsXG4gIFBhcnRpYWxCbG9ja1N0YXRlbWVudDogZnVuY3Rpb24gUGFydGlhbEJsb2NrU3RhdGVtZW50KHBhcnRpYWwpIHtcbiAgICB2aXNpdFBhcnRpYWwuY2FsbCh0aGlzLCBwYXJ0aWFsKTtcblxuICAgIHRoaXMuYWNjZXB0S2V5KHBhcnRpYWwsICdwcm9ncmFtJyk7XG4gIH0sXG5cbiAgQ29udGVudFN0YXRlbWVudDogZnVuY3Rpb24gQ29udGVudFN0YXRlbWVudCgpIC8qIGNvbnRlbnQgKi97fSxcbiAgQ29tbWVudFN0YXRlbWVudDogZnVuY3Rpb24gQ29tbWVudFN0YXRlbWVudCgpIC8qIGNvbW1lbnQgKi97fSxcblxuICBTdWJFeHByZXNzaW9uOiB2aXNpdFN1YkV4cHJlc3Npb24sXG5cbiAgUGF0aEV4cHJlc3Npb246IGZ1bmN0aW9uIFBhdGhFeHByZXNzaW9uKCkgLyogcGF0aCAqL3t9LFxuXG4gIFN0cmluZ0xpdGVyYWw6IGZ1bmN0aW9uIFN0cmluZ0xpdGVyYWwoKSAvKiBzdHJpbmcgKi97fSxcbiAgTnVtYmVyTGl0ZXJhbDogZnVuY3Rpb24gTnVtYmVyTGl0ZXJhbCgpIC8qIG51bWJlciAqL3t9LFxuICBCb29sZWFuTGl0ZXJhbDogZnVuY3Rpb24gQm9vbGVhbkxpdGVyYWwoKSAvKiBib29sICove30sXG4gIFVuZGVmaW5lZExpdGVyYWw6IGZ1bmN0aW9uIFVuZGVmaW5lZExpdGVyYWwoKSAvKiBsaXRlcmFsICove30sXG4gIE51bGxMaXRlcmFsOiBmdW5jdGlvbiBOdWxsTGl0ZXJhbCgpIC8qIGxpdGVyYWwgKi97fSxcblxuICBIYXNoOiBmdW5jdGlvbiBIYXNoKGhhc2gpIHtcbiAgICB0aGlzLmFjY2VwdEFycmF5KGhhc2gucGFpcnMpO1xuICB9LFxuICBIYXNoUGFpcjogZnVuY3Rpb24gSGFzaFBhaXIocGFpcikge1xuICAgIHRoaXMuYWNjZXB0UmVxdWlyZWQocGFpciwgJ3ZhbHVlJyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHZpc2l0U3ViRXhwcmVzc2lvbihtdXN0YWNoZSkge1xuICB0aGlzLmFjY2VwdFJlcXVpcmVkKG11c3RhY2hlLCAncGF0aCcpO1xuICB0aGlzLmFjY2VwdEFycmF5KG11c3RhY2hlLnBhcmFtcyk7XG4gIHRoaXMuYWNjZXB0S2V5KG11c3RhY2hlLCAnaGFzaCcpO1xufVxuZnVuY3Rpb24gdmlzaXRCbG9jayhibG9jaykge1xuICB2aXNpdFN1YkV4cHJlc3Npb24uY2FsbCh0aGlzLCBibG9jayk7XG5cbiAgdGhpcy5hY2NlcHRLZXkoYmxvY2ssICdwcm9ncmFtJyk7XG4gIHRoaXMuYWNjZXB0S2V5KGJsb2NrLCAnaW52ZXJzZScpO1xufVxuZnVuY3Rpb24gdmlzaXRQYXJ0aWFsKHBhcnRpYWwpIHtcbiAgdGhpcy5hY2NlcHRSZXF1aXJlZChwYXJ0aWFsLCAnbmFtZScpO1xuICB0aGlzLmFjY2VwdEFycmF5KHBhcnRpYWwucGFyYW1zKTtcbiAgdGhpcy5hY2NlcHRLZXkocGFydGlhbCwgJ2hhc2gnKTtcbn1cblxuZXhwb3J0c1snZGVmYXVsdCddID0gVmlzaXRvcjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDJOdmJYQnBiR1Z5TDNacGMybDBiM0l1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenQ1UWtGQmMwSXNZMEZCWXpzN096dEJRVVZ3UXl4VFFVRlRMRTlCUVU4c1IwRkJSenRCUVVOcVFpeE5RVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRVZCUVVVc1EwRkJRenREUVVOdVFqczdRVUZGUkN4UFFVRlBMRU5CUVVNc1UwRkJVeXhIUVVGSE8wRkJRMnhDTEdGQlFWY3NSVUZCUlN4UFFVRlBPMEZCUTNCQ0xGVkJRVkVzUlVGQlJTeExRVUZMT3pzN1FVRkhaaXhYUVVGVExFVkJRVVVzYlVKQlFWTXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSVHRCUVVNNVFpeFJRVUZKTEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTNCRExGRkJRVWtzU1VGQlNTeERRVUZETEZGQlFWRXNSVUZCUlRzN08wRkJSMnBDTEZWQlFVa3NTMEZCU3l4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExGTkJRVk1zUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVN1FVRkRNME1zWTBGQlRTd3lRa0ZEU2l4M1FrRkJkMElzUjBGRGRFSXNTMEZCU3l4RFFVRkRMRWxCUVVrc1IwRkRWaXg1UWtGQmVVSXNSMEZEZWtJc1NVRkJTU3hIUVVOS0xFMUJRVTBzUjBGRFRpeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVTmFMRU5CUVVNN1QwRkRTRHRCUVVORUxGVkJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNN1MwRkRjRUk3UjBGRFJqczdPenRCUVVsRUxHZENRVUZqTEVWQlFVVXNkMEpCUVZNc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJUdEJRVU51UXl4UlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXpzN1FVRkZNMElzVVVGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSVHRCUVVObUxGbEJRVTBzTWtKQlFXTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhaUVVGWkxFZEJRVWNzU1VGQlNTeERRVUZETEVOQlFVTTdTMEZEZEVRN1IwRkRSanM3T3p0QlFVbEVMR0ZCUVZjc1JVRkJSU3h4UWtGQlV5eExRVUZMTEVWQlFVVTdRVUZETTBJc1UwRkJTeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRCUVVNMVF5eFZRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6czdRVUZGZWtJc1ZVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlR0QlFVTmlMR0ZCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTI1Q0xGTkJRVU1zUlVGQlJTeERRVUZETzBGQlEwb3NVMEZCUXl4RlFVRkZMRU5CUVVNN1QwRkRURHRMUVVOR08wZEJRMFk3TzBGQlJVUXNVVUZCVFN4RlFVRkZMR2RDUVVGVExFMUJRVTBzUlVGQlJUdEJRVU4yUWl4UlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRk8wRkJRMWdzWVVGQlR6dExRVU5TT3pzN1FVRkhSQ3hSUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSVHRCUVVOMFFpeFpRVUZOTERKQ1FVRmpMR2RDUVVGblFpeEhRVUZITEUxQlFVMHNRMEZCUXl4SlFVRkpMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU03UzBGRE4wUTdPMEZCUlVRc1VVRkJTU3hKUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTzBGQlEyaENMRlZCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenRMUVVOd1F6dEJRVU5FTEZGQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1RVRkJUU3hEUVVGRE96dEJRVVYwUWl4UlFVRkpMRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE96dEJRVVZ3UXl4UlFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNN08wRkJSWEJETEZGQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hKUVVGSkxFZEJRVWNzUlVGQlJUdEJRVU42UWl4aFFVRlBMRWRCUVVjc1EwRkJRenRMUVVOYUxFMUJRVTBzU1VGQlNTeEhRVUZITEV0QlFVc3NTMEZCU3l4RlFVRkZPMEZCUTNoQ0xHRkJRVThzVFVGQlRTeERRVUZETzB0QlEyWTdSMEZEUmpzN1FVRkZSQ3hUUVVGUExFVkJRVVVzYVVKQlFWTXNUMEZCVHl4RlFVRkZPMEZCUTNwQ0xGRkJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wZEJRMmhET3p0QlFVVkVMRzFDUVVGcFFpeEZRVUZGTEd0Q1FVRnJRanRCUVVOeVF5eFhRVUZUTEVWQlFVVXNhMEpCUVd0Q096dEJRVVUzUWl4blFrRkJZeXhGUVVGRkxGVkJRVlU3UVVGRE1VSXNaMEpCUVdNc1JVRkJSU3hWUVVGVk96dEJRVVV4UWl4clFrRkJaMElzUlVGQlJTeFpRVUZaTzBGQlF6bENMSFZDUVVGeFFpeEZRVUZGTEN0Q1FVRlRMRTlCUVU4c1JVRkJSVHRCUVVOMlF5eG5Ra0ZCV1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTTdPMEZCUldwRExGRkJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNUMEZCVHl4RlFVRkZMRk5CUVZNc1EwRkJReXhEUVVGRE8wZEJRM0JET3p0QlFVVkVMR3RDUVVGblFpeEZRVUZGTEhsRFFVRjNRaXhGUVVGRk8wRkJRelZETEd0Q1FVRm5RaXhGUVVGRkxIbERRVUYzUWl4RlFVRkZPenRCUVVVMVF5eGxRVUZoTEVWQlFVVXNhMEpCUVd0Q096dEJRVVZxUXl4blFrRkJZeXhGUVVGRkxHOURRVUZ4UWl4RlFVRkZPenRCUVVWMlF5eGxRVUZoTEVWQlFVVXNjVU5CUVhWQ0xFVkJRVVU3UVVGRGVFTXNaVUZCWVN4RlFVRkZMSEZEUVVGMVFpeEZRVUZGTzBGQlEzaERMR2RDUVVGakxFVkJRVVVzYjBOQlFYRkNMRVZCUVVVN1FVRkRka01zYTBKQlFXZENMRVZCUVVVc2VVTkJRWGRDTEVWQlFVVTdRVUZETlVNc1lVRkJWeXhGUVVGRkxHOURRVUYzUWl4RlFVRkZPenRCUVVWMlF5eE5RVUZKTEVWQlFVVXNZMEZCVXl4SlFVRkpMRVZCUVVVN1FVRkRia0lzVVVGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03UjBGRE9VSTdRVUZEUkN4VlFVRlJMRVZCUVVVc2EwSkJRVk1zU1VGQlNTeEZRVUZGTzBGQlEzWkNMRkZCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zU1VGQlNTeEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRPMGRCUTNCRE8wTkJRMFlzUTBGQlF6czdRVUZGUml4VFFVRlRMR3RDUVVGclFpeERRVUZETEZGQlFWRXNSVUZCUlR0QlFVTndReXhOUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEZGQlFWRXNSVUZCUlN4TlFVRk5MRU5CUVVNc1EwRkJRenRCUVVOMFF5eE5RVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dEJRVU5zUXl4TlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExGRkJRVkVzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUXp0RFFVTnNRenRCUVVORUxGTkJRVk1zVlVGQlZTeERRVUZETEV0QlFVc3NSVUZCUlR0QlFVTjZRaXh2UWtGQmEwSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZET3p0QlFVVnlReXhOUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEV0QlFVc3NSVUZCUlN4VFFVRlRMRU5CUVVNc1EwRkJRenRCUVVOcVF5eE5RVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRXRCUVVzc1JVRkJSU3hUUVVGVExFTkJRVU1zUTBGQlF6dERRVU5zUXp0QlFVTkVMRk5CUVZNc1dVRkJXU3hEUVVGRExFOUJRVThzUlVGQlJUdEJRVU0zUWl4TlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFOUJRVThzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUXp0QlFVTnlReXhOUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEU5QlFVOHNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRCUVVOcVF5eE5RVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTlCUVU4c1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF6dERRVU5xUXpzN2NVSkJSV01zVDBGQlR5SXNJbVpwYkdVaU9pSjJhWE5wZEc5eUxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVcxd2IzSjBJRVY0WTJWd2RHbHZiaUJtY205dElDY3VMaTlsZUdObGNIUnBiMjRuTzF4dVhHNW1kVzVqZEdsdmJpQldhWE5wZEc5eUtDa2dlMXh1SUNCMGFHbHpMbkJoY21WdWRITWdQU0JiWFR0Y2JuMWNibHh1Vm1semFYUnZjaTV3Y205MGIzUjVjR1VnUFNCN1hHNGdJR052Ym5OMGNuVmpkRzl5T2lCV2FYTnBkRzl5TEZ4dUlDQnRkWFJoZEdsdVp6b2dabUZzYzJVc1hHNWNiaUFnTHk4Z1ZtbHphWFJ6SUdFZ1oybDJaVzRnZG1Gc2RXVXVJRWxtSUcxMWRHRjBhVzVuTENCM2FXeHNJSEpsY0d4aFkyVWdkR2hsSUhaaGJIVmxJR2xtSUc1bFkyVnpjMkZ5ZVM1Y2JpQWdZV05qWlhCMFMyVjVPaUJtZFc1amRHbHZiaWh1YjJSbExDQnVZVzFsS1NCN1hHNGdJQ0FnYkdWMElIWmhiSFZsSUQwZ2RHaHBjeTVoWTJObGNIUW9ibTlrWlZ0dVlXMWxYU2s3WEc0Z0lDQWdhV1lnS0hSb2FYTXViWFYwWVhScGJtY3BJSHRjYmlBZ0lDQWdJQzh2SUVoaFkydDVJSE5oYm1sMGVTQmphR1ZqYXpvZ1ZHaHBjeUJ0WVhrZ2FHRjJaU0JoSUdabGR5Qm1ZV3h6WlNCd2IzTnBkR2wyWlhNZ1ptOXlJSFI1Y0dVZ1ptOXlJSFJvWlNCb1pXeHdaWEpjYmlBZ0lDQWdJQzh2SUcxbGRHaHZaSE1nWW5WMElIZHBiR3dnWjJWdVpYSmhiR3g1SUdSdklIUm9aU0J5YVdkb2RDQjBhR2x1WnlCM2FYUm9iM1YwSUdFZ2JHOTBJRzltSUc5MlpYSm9aV0ZrTGx4dUlDQWdJQ0FnYVdZZ0tIWmhiSFZsSUNZbUlDRldhWE5wZEc5eUxuQnliM1J2ZEhsd1pWdDJZV3gxWlM1MGVYQmxYU2tnZTF4dUlDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYaGpaWEIwYVc5dUtGeHVJQ0FnSUNBZ0lDQWdJQ2RWYm1WNGNHVmpkR1ZrSUc1dlpHVWdkSGx3WlNCY0lpY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1V1ZEhsd1pTQXJYRzRnSUNBZ0lDQWdJQ0FnSUNBblhDSWdabTkxYm1RZ2QyaGxiaUJoWTJObGNIUnBibWNnSnlBclhHNGdJQ0FnSUNBZ0lDQWdJQ0J1WVcxbElDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNjZ2IyNGdKeUFyWEc0Z0lDQWdJQ0FnSUNBZ0lDQnViMlJsTG5SNWNHVmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJRzV2WkdWYmJtRnRaVjBnUFNCMllXeDFaVHRjYmlBZ0lDQjlYRzRnSUgwc1hHNWNiaUFnTHk4Z1VHVnlabTl5YlhNZ1lXNGdZV05qWlhCMElHOXdaWEpoZEdsdmJpQjNhWFJvSUdGa1pHVmtJSE5oYm1sMGVTQmphR1ZqYXlCMGJ5Qmxibk4xY21WY2JpQWdMeThnY21WeGRXbHlaV1FnYTJWNWN5QmhjbVVnYm05MElISmxiVzkyWldRdVhHNGdJR0ZqWTJWd2RGSmxjWFZwY21Wa09pQm1kVzVqZEdsdmJpaHViMlJsTENCdVlXMWxLU0I3WEc0Z0lDQWdkR2hwY3k1aFkyTmxjSFJMWlhrb2JtOWtaU3dnYm1GdFpTazdYRzVjYmlBZ0lDQnBaaUFvSVc1dlpHVmJibUZ0WlYwcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZlR05sY0hScGIyNG9ibTlrWlM1MGVYQmxJQ3NnSnlCeVpYRjFhWEpsY3lBbklDc2dibUZ0WlNrN1hHNGdJQ0FnZlZ4dUlDQjlMRnh1WEc0Z0lDOHZJRlJ5WVhabGNuTmxjeUJoSUdkcGRtVnVJR0Z5Y21GNUxpQkpaaUJ0ZFhSaGRHbHVaeXdnWlcxd2RIa2djbVZ6Y0c1elpYTWdkMmxzYkNCaVpTQnlaVzF2ZG1Wa1hHNGdJQzh2SUdadmNpQmphR2xzWkNCbGJHVnRaVzUwY3k1Y2JpQWdZV05qWlhCMFFYSnlZWGs2SUdaMWJtTjBhVzl1S0dGeWNtRjVLU0I3WEc0Z0lDQWdabTl5SUNoc1pYUWdhU0E5SURBc0lHd2dQU0JoY25KaGVTNXNaVzVuZEdnN0lHa2dQQ0JzT3lCcEt5c3BJSHRjYmlBZ0lDQWdJSFJvYVhNdVlXTmpaWEIwUzJWNUtHRnljbUY1TENCcEtUdGNibHh1SUNBZ0lDQWdhV1lnS0NGaGNuSmhlVnRwWFNrZ2UxeHVJQ0FnSUNBZ0lDQmhjbkpoZVM1emNHeHBZMlVvYVN3Z01TazdYRzRnSUNBZ0lDQWdJR2t0TFR0Y2JpQWdJQ0FnSUNBZ2JDMHRPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlN4Y2JseHVJQ0JoWTJObGNIUTZJR1oxYm1OMGFXOXVLRzlpYW1WamRDa2dlMXh1SUNBZ0lHbG1JQ2doYjJKcVpXTjBLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHNWxlSFE2SUZOaGJtbDBlU0JqYjJSbElDb3ZYRzRnSUNBZ2FXWWdLQ0YwYUdselcyOWlhbVZqZEM1MGVYQmxYU2tnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWNFkyVndkR2x2YmlnblZXNXJibTkzYmlCMGVYQmxPaUFuSUNzZ2IySnFaV04wTG5SNWNHVXNJRzlpYW1WamRDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSFJvYVhNdVkzVnljbVZ1ZENrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV3WVhKbGJuUnpMblZ1YzJocFpuUW9kR2hwY3k1amRYSnlaVzUwS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdkR2hwY3k1amRYSnlaVzUwSUQwZ2IySnFaV04wTzF4dVhHNGdJQ0FnYkdWMElISmxkQ0E5SUhSb2FYTmJiMkpxWldOMExuUjVjR1ZkS0c5aWFtVmpkQ2s3WEc1Y2JpQWdJQ0IwYUdsekxtTjFjbkpsYm5RZ1BTQjBhR2x6TG5CaGNtVnVkSE11YzJocFpuUW9LVHRjYmx4dUlDQWdJR2xtSUNnaGRHaHBjeTV0ZFhSaGRHbHVaeUI4ZkNCeVpYUXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnlaWFE3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2h5WlhRZ0lUMDlJR1poYkhObEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2IySnFaV04wTzF4dUlDQWdJSDFjYmlBZ2ZTeGNibHh1SUNCUWNtOW5jbUZ0T2lCbWRXNWpkR2x2Ymlod2NtOW5jbUZ0S1NCN1hHNGdJQ0FnZEdocGN5NWhZMk5sY0hSQmNuSmhlU2h3Y205bmNtRnRMbUp2WkhrcE8xeHVJQ0I5TEZ4dVhHNGdJRTExYzNSaFkyaGxVM1JoZEdWdFpXNTBPaUIyYVhOcGRGTjFZa1Y0Y0hKbGMzTnBiMjRzWEc0Z0lFUmxZMjl5WVhSdmNqb2dkbWx6YVhSVGRXSkZlSEJ5WlhOemFXOXVMRnh1WEc0Z0lFSnNiMk5yVTNSaGRHVnRaVzUwT2lCMmFYTnBkRUpzYjJOckxGeHVJQ0JFWldOdmNtRjBiM0pDYkc5amF6b2dkbWx6YVhSQ2JHOWpheXhjYmx4dUlDQlFZWEowYVdGc1UzUmhkR1Z0Wlc1ME9pQjJhWE5wZEZCaGNuUnBZV3dzWEc0Z0lGQmhjblJwWVd4Q2JHOWphMU4wWVhSbGJXVnVkRG9nWm5WdVkzUnBiMjRvY0dGeWRHbGhiQ2tnZTF4dUlDQWdJSFpwYzJsMFVHRnlkR2xoYkM1allXeHNLSFJvYVhNc0lIQmhjblJwWVd3cE8xeHVYRzRnSUNBZ2RHaHBjeTVoWTJObGNIUkxaWGtvY0dGeWRHbGhiQ3dnSjNCeWIyZHlZVzBuS1R0Y2JpQWdmU3hjYmx4dUlDQkRiMjUwWlc1MFUzUmhkR1Z0Wlc1ME9pQm1kVzVqZEdsdmJpZ3ZLaUJqYjI1MFpXNTBJQ292S1NCN2ZTeGNiaUFnUTI5dGJXVnVkRk4wWVhSbGJXVnVkRG9nWm5WdVkzUnBiMjRvTHlvZ1kyOXRiV1Z1ZENBcUx5a2dlMzBzWEc1Y2JpQWdVM1ZpUlhod2NtVnpjMmx2YmpvZ2RtbHphWFJUZFdKRmVIQnlaWE56YVc5dUxGeHVYRzRnSUZCaGRHaEZlSEJ5WlhOemFXOXVPaUJtZFc1amRHbHZiaWd2S2lCd1lYUm9JQ292S1NCN2ZTeGNibHh1SUNCVGRISnBibWRNYVhSbGNtRnNPaUJtZFc1amRHbHZiaWd2S2lCemRISnBibWNnS2k4cElIdDlMRnh1SUNCT2RXMWlaWEpNYVhSbGNtRnNPaUJtZFc1amRHbHZiaWd2S2lCdWRXMWlaWElnS2k4cElIdDlMRnh1SUNCQ2IyOXNaV0Z1VEdsMFpYSmhiRG9nWm5WdVkzUnBiMjRvTHlvZ1ltOXZiQ0FxTHlrZ2UzMHNYRzRnSUZWdVpHVm1hVzVsWkV4cGRHVnlZV3c2SUdaMWJtTjBhVzl1S0M4cUlHeHBkR1Z5WVd3Z0tpOHBJSHQ5TEZ4dUlDQk9kV3hzVEdsMFpYSmhiRG9nWm5WdVkzUnBiMjRvTHlvZ2JHbDBaWEpoYkNBcUx5a2dlMzBzWEc1Y2JpQWdTR0Z6YURvZ1puVnVZM1JwYjI0b2FHRnphQ2tnZTF4dUlDQWdJSFJvYVhNdVlXTmpaWEIwUVhKeVlYa29hR0Z6YUM1d1lXbHljeWs3WEc0Z0lIMHNYRzRnSUVoaGMyaFFZV2x5T2lCbWRXNWpkR2x2Ymlod1lXbHlLU0I3WEc0Z0lDQWdkR2hwY3k1aFkyTmxjSFJTWlhGMWFYSmxaQ2h3WVdseUxDQW5kbUZzZFdVbktUdGNiaUFnZlZ4dWZUdGNibHh1Wm5WdVkzUnBiMjRnZG1semFYUlRkV0pGZUhCeVpYTnphVzl1S0cxMWMzUmhZMmhsS1NCN1hHNGdJSFJvYVhNdVlXTmpaWEIwVW1WeGRXbHlaV1FvYlhWemRHRmphR1VzSUNkd1lYUm9KeWs3WEc0Z0lIUm9hWE11WVdOalpYQjBRWEp5WVhrb2JYVnpkR0ZqYUdVdWNHRnlZVzF6S1R0Y2JpQWdkR2hwY3k1aFkyTmxjSFJMWlhrb2JYVnpkR0ZqYUdVc0lDZG9ZWE5vSnlrN1hHNTlYRzVtZFc1amRHbHZiaUIyYVhOcGRFSnNiMk5yS0dKc2IyTnJLU0I3WEc0Z0lIWnBjMmwwVTNWaVJYaHdjbVZ6YzJsdmJpNWpZV3hzS0hSb2FYTXNJR0pzYjJOcktUdGNibHh1SUNCMGFHbHpMbUZqWTJWd2RFdGxlU2hpYkc5amF5d2dKM0J5YjJkeVlXMG5LVHRjYmlBZ2RHaHBjeTVoWTJObGNIUkxaWGtvWW14dlkyc3NJQ2RwYm5abGNuTmxKeWs3WEc1OVhHNW1kVzVqZEdsdmJpQjJhWE5wZEZCaGNuUnBZV3dvY0dGeWRHbGhiQ2tnZTF4dUlDQjBhR2x6TG1GalkyVndkRkpsY1hWcGNtVmtLSEJoY25ScFlXd3NJQ2R1WVcxbEp5azdYRzRnSUhSb2FYTXVZV05qWlhCMFFYSnlZWGtvY0dGeWRHbGhiQzV3WVhKaGJYTXBPMXh1SUNCMGFHbHpMbUZqWTJWd2RFdGxlU2h3WVhKMGFXRnNMQ0FuYUdGemFDY3BPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCV2FYTnBkRzl5TzF4dUlsMTlcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF92aXNpdG9yID0gcmVxdWlyZSgnLi92aXNpdG9yJyk7XG5cbnZhciBfdmlzaXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92aXNpdG9yKTtcblxuZnVuY3Rpb24gV2hpdGVzcGFjZUNvbnRyb2woKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMF07XG5cbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbn1cbldoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZSA9IG5ldyBfdmlzaXRvcjJbJ2RlZmF1bHQnXSgpO1xuXG5XaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuUHJvZ3JhbSA9IGZ1bmN0aW9uIChwcm9ncmFtKSB7XG4gIHZhciBkb1N0YW5kYWxvbmUgPSAhdGhpcy5vcHRpb25zLmlnbm9yZVN0YW5kYWxvbmU7XG5cbiAgdmFyIGlzUm9vdCA9ICF0aGlzLmlzUm9vdFNlZW47XG4gIHRoaXMuaXNSb290U2VlbiA9IHRydWU7XG5cbiAgdmFyIGJvZHkgPSBwcm9ncmFtLmJvZHk7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gYm9keS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgY3VycmVudCA9IGJvZHlbaV0sXG4gICAgICAgIHN0cmlwID0gdGhpcy5hY2NlcHQoY3VycmVudCk7XG5cbiAgICBpZiAoIXN0cmlwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgX2lzUHJldldoaXRlc3BhY2UgPSBpc1ByZXZXaGl0ZXNwYWNlKGJvZHksIGksIGlzUm9vdCksXG4gICAgICAgIF9pc05leHRXaGl0ZXNwYWNlID0gaXNOZXh0V2hpdGVzcGFjZShib2R5LCBpLCBpc1Jvb3QpLFxuICAgICAgICBvcGVuU3RhbmRhbG9uZSA9IHN0cmlwLm9wZW5TdGFuZGFsb25lICYmIF9pc1ByZXZXaGl0ZXNwYWNlLFxuICAgICAgICBjbG9zZVN0YW5kYWxvbmUgPSBzdHJpcC5jbG9zZVN0YW5kYWxvbmUgJiYgX2lzTmV4dFdoaXRlc3BhY2UsXG4gICAgICAgIGlubGluZVN0YW5kYWxvbmUgPSBzdHJpcC5pbmxpbmVTdGFuZGFsb25lICYmIF9pc1ByZXZXaGl0ZXNwYWNlICYmIF9pc05leHRXaGl0ZXNwYWNlO1xuXG4gICAgaWYgKHN0cmlwLmNsb3NlKSB7XG4gICAgICBvbWl0UmlnaHQoYm9keSwgaSwgdHJ1ZSk7XG4gICAgfVxuICAgIGlmIChzdHJpcC5vcGVuKSB7XG4gICAgICBvbWl0TGVmdChib2R5LCBpLCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAoZG9TdGFuZGFsb25lICYmIGlubGluZVN0YW5kYWxvbmUpIHtcbiAgICAgIG9taXRSaWdodChib2R5LCBpKTtcblxuICAgICAgaWYgKG9taXRMZWZ0KGJvZHksIGkpKSB7XG4gICAgICAgIC8vIElmIHdlIGFyZSBvbiBhIHN0YW5kYWxvbmUgbm9kZSwgc2F2ZSB0aGUgaW5kZW50IGluZm8gZm9yIHBhcnRpYWxzXG4gICAgICAgIGlmIChjdXJyZW50LnR5cGUgPT09ICdQYXJ0aWFsU3RhdGVtZW50Jykge1xuICAgICAgICAgIC8vIFB1bGwgb3V0IHRoZSB3aGl0ZXNwYWNlIGZyb20gdGhlIGZpbmFsIGxpbmVcbiAgICAgICAgICBjdXJyZW50LmluZGVudCA9IC8oWyBcXHRdKyQpLy5leGVjKGJvZHlbaSAtIDFdLm9yaWdpbmFsKVsxXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZG9TdGFuZGFsb25lICYmIG9wZW5TdGFuZGFsb25lKSB7XG4gICAgICBvbWl0UmlnaHQoKGN1cnJlbnQucHJvZ3JhbSB8fCBjdXJyZW50LmludmVyc2UpLmJvZHkpO1xuXG4gICAgICAvLyBTdHJpcCBvdXQgdGhlIHByZXZpb3VzIGNvbnRlbnQgbm9kZSBpZiBpdCdzIHdoaXRlc3BhY2Ugb25seVxuICAgICAgb21pdExlZnQoYm9keSwgaSk7XG4gICAgfVxuICAgIGlmIChkb1N0YW5kYWxvbmUgJiYgY2xvc2VTdGFuZGFsb25lKSB7XG4gICAgICAvLyBBbHdheXMgc3RyaXAgdGhlIG5leHQgbm9kZVxuICAgICAgb21pdFJpZ2h0KGJvZHksIGkpO1xuXG4gICAgICBvbWl0TGVmdCgoY3VycmVudC5pbnZlcnNlIHx8IGN1cnJlbnQucHJvZ3JhbSkuYm9keSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHByb2dyYW07XG59O1xuXG5XaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuQmxvY2tTdGF0ZW1lbnQgPSBXaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuRGVjb3JhdG9yQmxvY2sgPSBXaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuUGFydGlhbEJsb2NrU3RhdGVtZW50ID0gZnVuY3Rpb24gKGJsb2NrKSB7XG4gIHRoaXMuYWNjZXB0KGJsb2NrLnByb2dyYW0pO1xuICB0aGlzLmFjY2VwdChibG9jay5pbnZlcnNlKTtcblxuICAvLyBGaW5kIHRoZSBpbnZlcnNlIHByb2dyYW0gdGhhdCBpcyBpbnZvbGVkIHdpdGggd2hpdGVzcGFjZSBzdHJpcHBpbmcuXG4gIHZhciBwcm9ncmFtID0gYmxvY2sucHJvZ3JhbSB8fCBibG9jay5pbnZlcnNlLFxuICAgICAgaW52ZXJzZSA9IGJsb2NrLnByb2dyYW0gJiYgYmxvY2suaW52ZXJzZSxcbiAgICAgIGZpcnN0SW52ZXJzZSA9IGludmVyc2UsXG4gICAgICBsYXN0SW52ZXJzZSA9IGludmVyc2U7XG5cbiAgaWYgKGludmVyc2UgJiYgaW52ZXJzZS5jaGFpbmVkKSB7XG4gICAgZmlyc3RJbnZlcnNlID0gaW52ZXJzZS5ib2R5WzBdLnByb2dyYW07XG5cbiAgICAvLyBXYWxrIHRoZSBpbnZlcnNlIGNoYWluIHRvIGZpbmQgdGhlIGxhc3QgaW52ZXJzZSB0aGF0IGlzIGFjdHVhbGx5IGluIHRoZSBjaGFpbi5cbiAgICB3aGlsZSAobGFzdEludmVyc2UuY2hhaW5lZCkge1xuICAgICAgbGFzdEludmVyc2UgPSBsYXN0SW52ZXJzZS5ib2R5W2xhc3RJbnZlcnNlLmJvZHkubGVuZ3RoIC0gMV0ucHJvZ3JhbTtcbiAgICB9XG4gIH1cblxuICB2YXIgc3RyaXAgPSB7XG4gICAgb3BlbjogYmxvY2sub3BlblN0cmlwLm9wZW4sXG4gICAgY2xvc2U6IGJsb2NrLmNsb3NlU3RyaXAuY2xvc2UsXG5cbiAgICAvLyBEZXRlcm1pbmUgdGhlIHN0YW5kYWxvbmUgY2FuZGlhY3kuIEJhc2ljYWxseSBmbGFnIG91ciBjb250ZW50IGFzIGJlaW5nIHBvc3NpYmx5IHN0YW5kYWxvbmVcbiAgICAvLyBzbyBvdXIgcGFyZW50IGNhbiBkZXRlcm1pbmUgaWYgd2UgYWN0dWFsbHkgYXJlIHN0YW5kYWxvbmVcbiAgICBvcGVuU3RhbmRhbG9uZTogaXNOZXh0V2hpdGVzcGFjZShwcm9ncmFtLmJvZHkpLFxuICAgIGNsb3NlU3RhbmRhbG9uZTogaXNQcmV2V2hpdGVzcGFjZSgoZmlyc3RJbnZlcnNlIHx8IHByb2dyYW0pLmJvZHkpXG4gIH07XG5cbiAgaWYgKGJsb2NrLm9wZW5TdHJpcC5jbG9zZSkge1xuICAgIG9taXRSaWdodChwcm9ncmFtLmJvZHksIG51bGwsIHRydWUpO1xuICB9XG5cbiAgaWYgKGludmVyc2UpIHtcbiAgICB2YXIgaW52ZXJzZVN0cmlwID0gYmxvY2suaW52ZXJzZVN0cmlwO1xuXG4gICAgaWYgKGludmVyc2VTdHJpcC5vcGVuKSB7XG4gICAgICBvbWl0TGVmdChwcm9ncmFtLmJvZHksIG51bGwsIHRydWUpO1xuICAgIH1cblxuICAgIGlmIChpbnZlcnNlU3RyaXAuY2xvc2UpIHtcbiAgICAgIG9taXRSaWdodChmaXJzdEludmVyc2UuYm9keSwgbnVsbCwgdHJ1ZSk7XG4gICAgfVxuICAgIGlmIChibG9jay5jbG9zZVN0cmlwLm9wZW4pIHtcbiAgICAgIG9taXRMZWZ0KGxhc3RJbnZlcnNlLmJvZHksIG51bGwsIHRydWUpO1xuICAgIH1cblxuICAgIC8vIEZpbmQgc3RhbmRhbG9uZSBlbHNlIHN0YXRtZW50c1xuICAgIGlmICghdGhpcy5vcHRpb25zLmlnbm9yZVN0YW5kYWxvbmUgJiYgaXNQcmV2V2hpdGVzcGFjZShwcm9ncmFtLmJvZHkpICYmIGlzTmV4dFdoaXRlc3BhY2UoZmlyc3RJbnZlcnNlLmJvZHkpKSB7XG4gICAgICBvbWl0TGVmdChwcm9ncmFtLmJvZHkpO1xuICAgICAgb21pdFJpZ2h0KGZpcnN0SW52ZXJzZS5ib2R5KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoYmxvY2suY2xvc2VTdHJpcC5vcGVuKSB7XG4gICAgb21pdExlZnQocHJvZ3JhbS5ib2R5LCBudWxsLCB0cnVlKTtcbiAgfVxuXG4gIHJldHVybiBzdHJpcDtcbn07XG5cbldoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZS5EZWNvcmF0b3IgPSBXaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuTXVzdGFjaGVTdGF0ZW1lbnQgPSBmdW5jdGlvbiAobXVzdGFjaGUpIHtcbiAgcmV0dXJuIG11c3RhY2hlLnN0cmlwO1xufTtcblxuV2hpdGVzcGFjZUNvbnRyb2wucHJvdG90eXBlLlBhcnRpYWxTdGF0ZW1lbnQgPSBXaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuQ29tbWVudFN0YXRlbWVudCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHZhciBzdHJpcCA9IG5vZGUuc3RyaXAgfHwge307XG4gIHJldHVybiB7XG4gICAgaW5saW5lU3RhbmRhbG9uZTogdHJ1ZSxcbiAgICBvcGVuOiBzdHJpcC5vcGVuLFxuICAgIGNsb3NlOiBzdHJpcC5jbG9zZVxuICB9O1xufTtcblxuZnVuY3Rpb24gaXNQcmV2V2hpdGVzcGFjZShib2R5LCBpLCBpc1Jvb3QpIHtcbiAgaWYgKGkgPT09IHVuZGVmaW5lZCkge1xuICAgIGkgPSBib2R5Lmxlbmd0aDtcbiAgfVxuXG4gIC8vIE5vZGVzIHRoYXQgZW5kIHdpdGggbmV3bGluZXMgYXJlIGNvbnNpZGVyZWQgd2hpdGVzcGFjZSAoYnV0IGFyZSBzcGVjaWFsXG4gIC8vIGNhc2VkIGZvciBzdHJpcCBvcGVyYXRpb25zKVxuICB2YXIgcHJldiA9IGJvZHlbaSAtIDFdLFxuICAgICAgc2libGluZyA9IGJvZHlbaSAtIDJdO1xuICBpZiAoIXByZXYpIHtcbiAgICByZXR1cm4gaXNSb290O1xuICB9XG5cbiAgaWYgKHByZXYudHlwZSA9PT0gJ0NvbnRlbnRTdGF0ZW1lbnQnKSB7XG4gICAgcmV0dXJuIChzaWJsaW5nIHx8ICFpc1Jvb3QgPyAvXFxyP1xcblxccyo/JC8gOiAvKF58XFxyP1xcbilcXHMqPyQvKS50ZXN0KHByZXYub3JpZ2luYWwpO1xuICB9XG59XG5mdW5jdGlvbiBpc05leHRXaGl0ZXNwYWNlKGJvZHksIGksIGlzUm9vdCkge1xuICBpZiAoaSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaSA9IC0xO1xuICB9XG5cbiAgdmFyIG5leHQgPSBib2R5W2kgKyAxXSxcbiAgICAgIHNpYmxpbmcgPSBib2R5W2kgKyAyXTtcbiAgaWYgKCFuZXh0KSB7XG4gICAgcmV0dXJuIGlzUm9vdDtcbiAgfVxuXG4gIGlmIChuZXh0LnR5cGUgPT09ICdDb250ZW50U3RhdGVtZW50Jykge1xuICAgIHJldHVybiAoc2libGluZyB8fCAhaXNSb290ID8gL15cXHMqP1xccj9cXG4vIDogL15cXHMqPyhcXHI/XFxufCQpLykudGVzdChuZXh0Lm9yaWdpbmFsKTtcbiAgfVxufVxuXG4vLyBNYXJrcyB0aGUgbm9kZSB0byB0aGUgcmlnaHQgb2YgdGhlIHBvc2l0aW9uIGFzIG9taXR0ZWQuXG4vLyBJLmUuIHt7Zm9vfX0nICcgd2lsbCBtYXJrIHRoZSAnICcgbm9kZSBhcyBvbWl0dGVkLlxuLy9cbi8vIElmIGkgaXMgdW5kZWZpbmVkLCB0aGVuIHRoZSBmaXJzdCBjaGlsZCB3aWxsIGJlIG1hcmtlZCBhcyBzdWNoLlxuLy9cbi8vIElmIG11bGl0cGxlIGlzIHRydXRoeSB0aGVuIGFsbCB3aGl0ZXNwYWNlIHdpbGwgYmUgc3RyaXBwZWQgb3V0IHVudGlsIG5vbi13aGl0ZXNwYWNlXG4vLyBjb250ZW50IGlzIG1ldC5cbmZ1bmN0aW9uIG9taXRSaWdodChib2R5LCBpLCBtdWx0aXBsZSkge1xuICB2YXIgY3VycmVudCA9IGJvZHlbaSA9PSBudWxsID8gMCA6IGkgKyAxXTtcbiAgaWYgKCFjdXJyZW50IHx8IGN1cnJlbnQudHlwZSAhPT0gJ0NvbnRlbnRTdGF0ZW1lbnQnIHx8ICFtdWx0aXBsZSAmJiBjdXJyZW50LnJpZ2h0U3RyaXBwZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgb3JpZ2luYWwgPSBjdXJyZW50LnZhbHVlO1xuICBjdXJyZW50LnZhbHVlID0gY3VycmVudC52YWx1ZS5yZXBsYWNlKG11bHRpcGxlID8gL15cXHMrLyA6IC9eWyBcXHRdKlxccj9cXG4/LywgJycpO1xuICBjdXJyZW50LnJpZ2h0U3RyaXBwZWQgPSBjdXJyZW50LnZhbHVlICE9PSBvcmlnaW5hbDtcbn1cblxuLy8gTWFya3MgdGhlIG5vZGUgdG8gdGhlIGxlZnQgb2YgdGhlIHBvc2l0aW9uIGFzIG9taXR0ZWQuXG4vLyBJLmUuICcgJ3t7Zm9vfX0gd2lsbCBtYXJrIHRoZSAnICcgbm9kZSBhcyBvbWl0dGVkLlxuLy9cbi8vIElmIGkgaXMgdW5kZWZpbmVkIHRoZW4gdGhlIGxhc3QgY2hpbGQgd2lsbCBiZSBtYXJrZWQgYXMgc3VjaC5cbi8vXG4vLyBJZiBtdWxpdHBsZSBpcyB0cnV0aHkgdGhlbiBhbGwgd2hpdGVzcGFjZSB3aWxsIGJlIHN0cmlwcGVkIG91dCB1bnRpbCBub24td2hpdGVzcGFjZVxuLy8gY29udGVudCBpcyBtZXQuXG5mdW5jdGlvbiBvbWl0TGVmdChib2R5LCBpLCBtdWx0aXBsZSkge1xuICB2YXIgY3VycmVudCA9IGJvZHlbaSA9PSBudWxsID8gYm9keS5sZW5ndGggLSAxIDogaSAtIDFdO1xuICBpZiAoIWN1cnJlbnQgfHwgY3VycmVudC50eXBlICE9PSAnQ29udGVudFN0YXRlbWVudCcgfHwgIW11bHRpcGxlICYmIGN1cnJlbnQubGVmdFN0cmlwcGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gV2Ugb21pdCB0aGUgbGFzdCBub2RlIGlmIGl0J3Mgd2hpdGVzcGFjZSBvbmx5IGFuZCBub3QgcHJlY2VkZWQgYnkgYSBub24tY29udGVudCBub2RlLlxuICB2YXIgb3JpZ2luYWwgPSBjdXJyZW50LnZhbHVlO1xuICBjdXJyZW50LnZhbHVlID0gY3VycmVudC52YWx1ZS5yZXBsYWNlKG11bHRpcGxlID8gL1xccyskLyA6IC9bIFxcdF0rJC8sICcnKTtcbiAgY3VycmVudC5sZWZ0U3RyaXBwZWQgPSBjdXJyZW50LnZhbHVlICE9PSBvcmlnaW5hbDtcbiAgcmV0dXJuIGN1cnJlbnQubGVmdFN0cmlwcGVkO1xufVxuXG5leHBvcnRzWydkZWZhdWx0J10gPSBXaGl0ZXNwYWNlQ29udHJvbDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDJOdmJYQnBiR1Z5TDNkb2FYUmxjM0JoWTJVdFkyOXVkSEp2YkM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3TzNWQ1FVRnZRaXhYUVVGWE96czdPMEZCUlM5Q0xGTkJRVk1zYVVKQlFXbENMRWRCUVdVN1RVRkJaQ3hQUVVGUExIbEVRVUZITEVWQlFVVTdPMEZCUTNKRExFMUJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NUMEZCVHl4RFFVRkRPME5CUTNoQ08wRkJRMFFzYVVKQlFXbENMRU5CUVVNc1UwRkJVeXhIUVVGSExEQkNRVUZoTEVOQlFVTTdPMEZCUlRWRExHbENRVUZwUWl4RFFVRkRMRk5CUVZNc1EwRkJReXhQUVVGUExFZEJRVWNzVlVGQlV5eFBRVUZQTEVWQlFVVTdRVUZEZEVRc1RVRkJUU3haUVVGWkxFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMR2RDUVVGblFpeERRVUZET3p0QlFVVndSQ3hOUVVGSkxFMUJRVTBzUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNN1FVRkRPVUlzVFVGQlNTeERRVUZETEZWQlFWVXNSMEZCUnl4SlFVRkpMRU5CUVVNN08wRkJSWFpDTEUxQlFVa3NTVUZCU1N4SFFVRkhMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU03UVVGRGVFSXNUMEZCU3l4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlR0QlFVTXpReXhSUVVGSkxFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTI1Q0xFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE96dEJRVVV2UWl4UlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRk8wRkJRMVlzWlVGQlV6dExRVU5XT3p0QlFVVkVMRkZCUVVrc2FVSkJRV2xDTEVkQlFVY3NaMEpCUVdkQ0xFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTXNSVUZCUlN4TlFVRk5MRU5CUVVNN1VVRkRka1FzYVVKQlFXbENMRWRCUVVjc1owSkJRV2RDTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNc1JVRkJSU3hOUVVGTkxFTkJRVU03VVVGRGNrUXNZMEZCWXl4SFFVRkhMRXRCUVVzc1EwRkJReXhqUVVGakxFbEJRVWtzYVVKQlFXbENPMUZCUXpGRUxHVkJRV1VzUjBGQlJ5eExRVUZMTEVOQlFVTXNaVUZCWlN4SlFVRkpMR2xDUVVGcFFqdFJRVU0xUkN4blFrRkJaMElzUjBGRFpDeExRVUZMTEVOQlFVTXNaMEpCUVdkQ0xFbEJRVWtzYVVKQlFXbENMRWxCUVVrc2FVSkJRV2xDTEVOQlFVTTdPMEZCUlhKRkxGRkJRVWtzUzBGQlN5eERRVUZETEV0QlFVc3NSVUZCUlR0QlFVTm1MR1ZCUVZNc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMHRCUXpGQ08wRkJRMFFzVVVGQlNTeExRVUZMTEVOQlFVTXNTVUZCU1N4RlFVRkZPMEZCUTJRc1kwRkJVU3hEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1MwRkRla0k3TzBGQlJVUXNVVUZCU1N4WlFVRlpMRWxCUVVrc1owSkJRV2RDTEVWQlFVVTdRVUZEY0VNc1pVRkJVeXhEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXpzN1FVRkZia0lzVlVGQlNTeFJRVUZSTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNc1EwRkJReXhGUVVGRk96dEJRVVZ5UWl4WlFVRkpMRTlCUVU4c1EwRkJReXhKUVVGSkxFdEJRVXNzYTBKQlFXdENMRVZCUVVVN08wRkJSWFpETEdsQ1FVRlBMRU5CUVVNc1RVRkJUU3hIUVVGSExGZEJRVmNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRUUVVNMVJEdFBRVU5HTzB0QlEwWTdRVUZEUkN4UlFVRkpMRmxCUVZrc1NVRkJTU3hqUVVGakxFVkJRVVU3UVVGRGJFTXNaVUZCVXl4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExFOUJRVThzU1VGQlNTeFBRVUZQTEVOQlFVTXNUMEZCVHl4RFFVRkJMRU5CUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03T3p0QlFVZHlSQ3hqUVVGUkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMHRCUTI1Q08wRkJRMFFzVVVGQlNTeFpRVUZaTEVsQlFVa3NaVUZCWlN4RlFVRkZPenRCUVVWdVF5eGxRVUZUTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE96dEJRVVZ1UWl4alFVRlJMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU1zVDBGQlR5eEpRVUZKTEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVFc1EwRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF6dExRVU55UkR0SFFVTkdPenRCUVVWRUxGTkJRVThzVDBGQlR5eERRVUZETzBOQlEyaENMRU5CUVVNN08wRkJSVVlzYVVKQlFXbENMRU5CUVVNc1UwRkJVeXhEUVVGRExHTkJRV01zUjBGQlJ5eHBRa0ZCYVVJc1EwRkJReXhUUVVGVExFTkJRVU1zWTBGQll5eEhRVUZITEdsQ1FVRnBRaXhEUVVGRExGTkJRVk1zUTBGQlF5eHhRa0ZCY1VJc1IwRkJSeXhWUVVNMVNTeExRVUZMTEVWQlEwdzdRVUZEUVN4TlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0QlFVTXpRaXhOUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenM3TzBGQlJ6TkNMRTFCUVVrc1QwRkJUeXhIUVVGSExFdEJRVXNzUTBGQlF5eFBRVUZQTEVsQlFVa3NTMEZCU3l4RFFVRkRMRTlCUVU4N1RVRkRNVU1zVDBGQlR5eEhRVUZITEV0QlFVc3NRMEZCUXl4UFFVRlBMRWxCUVVrc1MwRkJTeXhEUVVGRExFOUJRVTg3VFVGRGVFTXNXVUZCV1N4SFFVRkhMRTlCUVU4N1RVRkRkRUlzVjBGQlZ5eEhRVUZITEU5QlFVOHNRMEZCUXpzN1FVRkZlRUlzVFVGQlNTeFBRVUZQTEVsQlFVa3NUMEZCVHl4RFFVRkRMRTlCUVU4c1JVRkJSVHRCUVVNNVFpeG5Ra0ZCV1N4SFFVRkhMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRPenM3UVVGSGRrTXNWMEZCVHl4WFFVRlhMRU5CUVVNc1QwRkJUeXhGUVVGRk8wRkJRekZDTEdsQ1FVRlhMRWRCUVVjc1YwRkJWeXhEUVVGRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTTdTMEZEY2tVN1IwRkRSanM3UVVGRlJDeE5RVUZKTEV0QlFVc3NSMEZCUnp0QlFVTldMRkZCUVVrc1JVRkJSU3hMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVazdRVUZETVVJc1UwRkJTeXhGUVVGRkxFdEJRVXNzUTBGQlF5eFZRVUZWTEVOQlFVTXNTMEZCU3pzN096dEJRVWszUWl4clFrRkJZeXhGUVVGRkxHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU03UVVGRE9VTXNiVUpCUVdVc1JVRkJSU3huUWtGQlowSXNRMEZCUXl4RFFVRkRMRmxCUVZrc1NVRkJTU3hQUVVGUExFTkJRVUVzUTBGQlJTeEpRVUZKTEVOQlFVTTdSMEZEYkVVc1EwRkJRenM3UVVGRlJpeE5RVUZKTEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1MwRkJTeXhGUVVGRk8wRkJRM3BDTEdGQlFWTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0SFFVTnlRenM3UVVGRlJDeE5RVUZKTEU5QlFVOHNSVUZCUlR0QlFVTllMRkZCUVVrc1dVRkJXU3hIUVVGSExFdEJRVXNzUTBGQlF5eFpRVUZaTEVOQlFVTTdPMEZCUlhSRExGRkJRVWtzV1VGQldTeERRVUZETEVsQlFVa3NSVUZCUlR0QlFVTnlRaXhqUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03UzBGRGNFTTdPMEZCUlVRc1VVRkJTU3haUVVGWkxFTkJRVU1zUzBGQlN5eEZRVUZGTzBGQlEzUkNMR1ZCUVZNc1EwRkJReXhaUVVGWkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenRMUVVNeFF6dEJRVU5FTEZGQlFVa3NTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJReXhKUVVGSkxFVkJRVVU3UVVGRGVrSXNZMEZCVVN4RFFVRkRMRmRCUVZjc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMHRCUTNoRE96czdRVUZIUkN4UlFVTkZMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eG5Ra0ZCWjBJc1NVRkRPVUlzWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVU01UWl4blFrRkJaMElzUTBGQlF5eFpRVUZaTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUTI1RE8wRkJRMEVzWTBGQlVTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRCUVVOMlFpeGxRVUZUTEVOQlFVTXNXVUZCV1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wdEJRemxDTzBkQlEwWXNUVUZCVFN4SlFVRkpMRXRCUVVzc1EwRkJReXhWUVVGVkxFTkJRVU1zU1VGQlNTeEZRVUZGTzBGQlEyaERMRmxCUVZFc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenRIUVVOd1F6czdRVUZGUkN4VFFVRlBMRXRCUVVzc1EwRkJRenREUVVOa0xFTkJRVU03TzBGQlJVWXNhVUpCUVdsQ0xFTkJRVU1zVTBGQlV5eERRVUZETEZOQlFWTXNSMEZCUnl4cFFrRkJhVUlzUTBGQlF5eFRRVUZUTEVOQlFVTXNhVUpCUVdsQ0xFZEJRVWNzVlVGRGRFWXNVVUZCVVN4RlFVTlNPMEZCUTBFc1UwRkJUeXhSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETzBOQlEzWkNMRU5CUVVNN08wRkJSVVlzYVVKQlFXbENMRU5CUVVNc1UwRkJVeXhEUVVGRExHZENRVUZuUWl4SFFVRkhMR2xDUVVGcFFpeERRVUZETEZOQlFWTXNRMEZCUXl4blFrRkJaMElzUjBGQlJ5eFZRVU0xUml4SlFVRkpMRVZCUTBvN08wRkJSVUVzVFVGQlNTeExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1NVRkJTU3hGUVVGRkxFTkJRVU03UVVGRE4wSXNVMEZCVHp0QlFVTk1MRzlDUVVGblFpeEZRVUZGTEVsQlFVazdRVUZEZEVJc1VVRkJTU3hGUVVGRkxFdEJRVXNzUTBGQlF5eEpRVUZKTzBGQlEyaENMRk5CUVVzc1JVRkJSU3hMUVVGTExFTkJRVU1zUzBGQlN6dEhRVU51UWl4RFFVRkRPME5CUTBnc1EwRkJRenM3UVVGRlJpeFRRVUZUTEdkQ1FVRm5RaXhEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETEVWQlFVVXNUVUZCVFN4RlFVRkZPMEZCUTNwRExFMUJRVWtzUTBGQlF5eExRVUZMTEZOQlFWTXNSVUZCUlR0QlFVTnVRaXhMUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXp0SFFVTnFRanM3T3p0QlFVbEVMRTFCUVVrc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMDFCUTNCQ0xFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRM2hDTEUxQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVN1FVRkRWQ3hYUVVGUExFMUJRVTBzUTBGQlF6dEhRVU5tT3p0QlFVVkVMRTFCUVVrc1NVRkJTU3hEUVVGRExFbEJRVWtzUzBGQlN5eHJRa0ZCYTBJc1JVRkJSVHRCUVVOd1F5eFhRVUZQTEVOQlFVTXNUMEZCVHl4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExGbEJRVmtzUjBGQlJ5eG5Ra0ZCWjBJc1EwRkJRU3hEUVVGRkxFbEJRVWtzUTBGRGFFVXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkRaQ3hEUVVGRE8wZEJRMGc3UTBGRFJqdEJRVU5FTEZOQlFWTXNaMEpCUVdkQ0xFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTXNSVUZCUlN4TlFVRk5MRVZCUVVVN1FVRkRla01zVFVGQlNTeERRVUZETEV0QlFVc3NVMEZCVXl4RlFVRkZPMEZCUTI1Q0xFdEJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0SFFVTlNPenRCUVVWRUxFMUJRVWtzU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wMUJRM0JDTEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETzBGQlEzaENMRTFCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVU3UVVGRFZDeFhRVUZQTEUxQlFVMHNRMEZCUXp0SFFVTm1PenRCUVVWRUxFMUJRVWtzU1VGQlNTeERRVUZETEVsQlFVa3NTMEZCU3l4clFrRkJhMElzUlVGQlJUdEJRVU53UXl4WFFVRlBMRU5CUVVNc1QwRkJUeXhKUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEZsQlFWa3NSMEZCUnl4blFrRkJaMElzUTBGQlFTeERRVUZGTEVsQlFVa3NRMEZEYUVVc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGRFpDeERRVUZETzBkQlEwZzdRMEZEUmpzN096czdPenM3TzBGQlUwUXNVMEZCVXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU1zUlVGQlJTeFJRVUZSTEVWQlFVVTdRVUZEY0VNc1RVRkJTU3hQUVVGUExFZEJRVWNzU1VGQlNTeERRVUZETEVOQlFVTXNTVUZCU1N4SlFVRkpMRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTXhReXhOUVVORkxFTkJRVU1zVDBGQlR5eEpRVU5TTEU5QlFVOHNRMEZCUXl4SlFVRkpMRXRCUVVzc2EwSkJRV3RDTEVsQlEyeERMRU5CUVVNc1VVRkJVU3hKUVVGSkxFOUJRVThzUTBGQlF5eGhRVUZoTEVGQlFVTXNSVUZEY0VNN1FVRkRRU3hYUVVGUE8wZEJRMUk3TzBGQlJVUXNUVUZCU1N4UlFVRlJMRWRCUVVjc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF6dEJRVU0zUWl4VFFVRlBMRU5CUVVNc1MwRkJTeXhIUVVGSExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVTnVReXhSUVVGUkxFZEJRVWNzVFVGQlRTeEhRVUZITEdWQlFXVXNSVUZEYmtNc1JVRkJSU3hEUVVOSUxFTkJRVU03UVVGRFJpeFRRVUZQTEVOQlFVTXNZVUZCWVN4SFFVRkhMRTlCUVU4c1EwRkJReXhMUVVGTExFdEJRVXNzVVVGQlVTeERRVUZETzBOQlEzQkVPenM3T3pzN096czdRVUZUUkN4VFFVRlRMRkZCUVZFc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF5eEZRVUZGTEZGQlFWRXNSVUZCUlR0QlFVTnVReXhOUVVGSkxFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVTXNRMEZCUXl4SlFVRkpMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRGVFUXNUVUZEUlN4RFFVRkRMRTlCUVU4c1NVRkRVaXhQUVVGUExFTkJRVU1zU1VGQlNTeExRVUZMTEd0Q1FVRnJRaXhKUVVOc1F5eERRVUZETEZGQlFWRXNTVUZCU1N4UFFVRlBMRU5CUVVNc1dVRkJXU3hCUVVGRExFVkJRMjVETzBGQlEwRXNWMEZCVHp0SFFVTlNPenM3UVVGSFJDeE5RVUZKTEZGQlFWRXNSMEZCUnl4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRE8wRkJRemRDTEZOQlFVOHNRMEZCUXl4TFFVRkxMRWRCUVVjc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNVVUZCVVN4SFFVRkhMRTFCUVUwc1IwRkJSeXhUUVVGVExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTTdRVUZEZWtVc1UwRkJUeXhEUVVGRExGbEJRVmtzUjBGQlJ5eFBRVUZQTEVOQlFVTXNTMEZCU3l4TFFVRkxMRkZCUVZFc1EwRkJRenRCUVVOc1JDeFRRVUZQTEU5QlFVOHNRMEZCUXl4WlFVRlpMRU5CUVVNN1EwRkROMEk3TzNGQ1FVVmpMR2xDUVVGcFFpSXNJbVpwYkdVaU9pSjNhR2wwWlhOd1lXTmxMV052Ym5SeWIyd3Vhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnVm1semFYUnZjaUJtY205dElDY3VMM1pwYzJsMGIzSW5PMXh1WEc1bWRXNWpkR2x2YmlCWGFHbDBaWE53WVdObFEyOXVkSEp2YkNodmNIUnBiMjV6SUQwZ2UzMHBJSHRjYmlBZ2RHaHBjeTV2Y0hScGIyNXpJRDBnYjNCMGFXOXVjenRjYm4xY2JsZG9hWFJsYzNCaFkyVkRiMjUwY205c0xuQnliM1J2ZEhsd1pTQTlJRzVsZHlCV2FYTnBkRzl5S0NrN1hHNWNibGRvYVhSbGMzQmhZMlZEYjI1MGNtOXNMbkJ5YjNSdmRIbHdaUzVRY205bmNtRnRJRDBnWm5WdVkzUnBiMjRvY0hKdlozSmhiU2tnZTF4dUlDQmpiMjV6ZENCa2IxTjBZVzVrWVd4dmJtVWdQU0FoZEdocGN5NXZjSFJwYjI1ekxtbG5ibTl5WlZOMFlXNWtZV3h2Ym1VN1hHNWNiaUFnYkdWMElHbHpVbTl2ZENBOUlDRjBhR2x6TG1selVtOXZkRk5sWlc0N1hHNGdJSFJvYVhNdWFYTlNiMjkwVTJWbGJpQTlJSFJ5ZFdVN1hHNWNiaUFnYkdWMElHSnZaSGtnUFNCd2NtOW5jbUZ0TG1KdlpIazdYRzRnSUdadmNpQW9iR1YwSUdrZ1BTQXdMQ0JzSUQwZ1ltOWtlUzVzWlc1bmRHZzdJR2tnUENCc095QnBLeXNwSUh0Y2JpQWdJQ0JzWlhRZ1kzVnljbVZ1ZENBOUlHSnZaSGxiYVYwc1hHNGdJQ0FnSUNCemRISnBjQ0E5SUhSb2FYTXVZV05qWlhCMEtHTjFjbkpsYm5RcE8xeHVYRzRnSUNBZ2FXWWdLQ0Z6ZEhKcGNDa2dlMXh1SUNBZ0lDQWdZMjl1ZEdsdWRXVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2JHVjBJRjlwYzFCeVpYWlhhR2wwWlhOd1lXTmxJRDBnYVhOUWNtVjJWMmhwZEdWemNHRmpaU2hpYjJSNUxDQnBMQ0JwYzFKdmIzUXBMRnh1SUNBZ0lDQWdYMmx6VG1WNGRGZG9hWFJsYzNCaFkyVWdQU0JwYzA1bGVIUlhhR2wwWlhOd1lXTmxLR0p2Wkhrc0lHa3NJR2x6VW05dmRDa3NYRzRnSUNBZ0lDQnZjR1Z1VTNSaGJtUmhiRzl1WlNBOUlITjBjbWx3TG05d1pXNVRkR0Z1WkdGc2IyNWxJQ1ltSUY5cGMxQnlaWFpYYUdsMFpYTndZV05sTEZ4dUlDQWdJQ0FnWTJ4dmMyVlRkR0Z1WkdGc2IyNWxJRDBnYzNSeWFYQXVZMnh2YzJWVGRHRnVaR0ZzYjI1bElDWW1JRjlwYzA1bGVIUlhhR2wwWlhOd1lXTmxMRnh1SUNBZ0lDQWdhVzVzYVc1bFUzUmhibVJoYkc5dVpTQTlYRzRnSUNBZ0lDQWdJSE4wY21sd0xtbHViR2x1WlZOMFlXNWtZV3h2Ym1VZ0ppWWdYMmx6VUhKbGRsZG9hWFJsYzNCaFkyVWdKaVlnWDJselRtVjRkRmRvYVhSbGMzQmhZMlU3WEc1Y2JpQWdJQ0JwWmlBb2MzUnlhWEF1WTJ4dmMyVXBJSHRjYmlBZ0lDQWdJRzl0YVhSU2FXZG9kQ2hpYjJSNUxDQnBMQ0IwY25WbEtUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tITjBjbWx3TG05d1pXNHBJSHRjYmlBZ0lDQWdJRzl0YVhSTVpXWjBLR0p2Wkhrc0lHa3NJSFJ5ZFdVcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaGtiMU4wWVc1a1lXeHZibVVnSmlZZ2FXNXNhVzVsVTNSaGJtUmhiRzl1WlNrZ2UxeHVJQ0FnSUNBZ2IyMXBkRkpwWjJoMEtHSnZaSGtzSUdrcE8xeHVYRzRnSUNBZ0lDQnBaaUFvYjIxcGRFeGxablFvWW05a2VTd2dhU2twSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdTV1lnZDJVZ1lYSmxJRzl1SUdFZ2MzUmhibVJoYkc5dVpTQnViMlJsTENCellYWmxJSFJvWlNCcGJtUmxiblFnYVc1bWJ5Qm1iM0lnY0dGeWRHbGhiSE5jYmlBZ0lDQWdJQ0FnYVdZZ0tHTjFjbkpsYm5RdWRIbHdaU0E5UFQwZ0oxQmhjblJwWVd4VGRHRjBaVzFsYm5RbktTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1VIVnNiQ0J2ZFhRZ2RHaGxJSGRvYVhSbGMzQmhZMlVnWm5KdmJTQjBhR1VnWm1sdVlXd2diR2x1WlZ4dUlDQWdJQ0FnSUNBZ0lHTjFjbkpsYm5RdWFXNWtaVzUwSUQwZ0x5aGJJRnhjZEYwckpDa3ZMbVY0WldNb1ltOWtlVnRwSUMwZ01WMHViM0pwWjJsdVlXd3BXekZkTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoa2IxTjBZVzVrWVd4dmJtVWdKaVlnYjNCbGJsTjBZVzVrWVd4dmJtVXBJSHRjYmlBZ0lDQWdJRzl0YVhSU2FXZG9kQ2dvWTNWeWNtVnVkQzV3Y205bmNtRnRJSHg4SUdOMWNuSmxiblF1YVc1MlpYSnpaU2t1WW05a2VTazdYRzVjYmlBZ0lDQWdJQzh2SUZOMGNtbHdJRzkxZENCMGFHVWdjSEpsZG1sdmRYTWdZMjl1ZEdWdWRDQnViMlJsSUdsbUlHbDBKM01nZDJocGRHVnpjR0ZqWlNCdmJteDVYRzRnSUNBZ0lDQnZiV2wwVEdWbWRDaGliMlI1TENCcEtUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tHUnZVM1JoYm1SaGJHOXVaU0FtSmlCamJHOXpaVk4wWVc1a1lXeHZibVVwSUh0Y2JpQWdJQ0FnSUM4dklFRnNkMkY1Y3lCemRISnBjQ0IwYUdVZ2JtVjRkQ0J1YjJSbFhHNGdJQ0FnSUNCdmJXbDBVbWxuYUhRb1ltOWtlU3dnYVNrN1hHNWNiaUFnSUNBZ0lHOXRhWFJNWldaMEtDaGpkWEp5Wlc1MExtbHVkbVZ5YzJVZ2ZId2dZM1Z5Y21WdWRDNXdjbTluY21GdEtTNWliMlI1S1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnY0hKdlozSmhiVHRjYm4wN1hHNWNibGRvYVhSbGMzQmhZMlZEYjI1MGNtOXNMbkJ5YjNSdmRIbHdaUzVDYkc5amExTjBZWFJsYldWdWRDQTlJRmRvYVhSbGMzQmhZMlZEYjI1MGNtOXNMbkJ5YjNSdmRIbHdaUzVFWldOdmNtRjBiM0pDYkc5amF5QTlJRmRvYVhSbGMzQmhZMlZEYjI1MGNtOXNMbkJ5YjNSdmRIbHdaUzVRWVhKMGFXRnNRbXh2WTJ0VGRHRjBaVzFsYm5RZ1BTQm1kVzVqZEdsdmJpaGNiaUFnWW14dlkydGNiaWtnZTF4dUlDQjBhR2x6TG1GalkyVndkQ2hpYkc5amF5NXdjbTluY21GdEtUdGNiaUFnZEdocGN5NWhZMk5sY0hRb1lteHZZMnN1YVc1MlpYSnpaU2s3WEc1Y2JpQWdMeThnUm1sdVpDQjBhR1VnYVc1MlpYSnpaU0J3Y205bmNtRnRJSFJvWVhRZ2FYTWdhVzUyYjJ4bFpDQjNhWFJvSUhkb2FYUmxjM0JoWTJVZ2MzUnlhWEJ3YVc1bkxseHVJQ0JzWlhRZ2NISnZaM0poYlNBOUlHSnNiMk5yTG5CeWIyZHlZVzBnZkh3Z1lteHZZMnN1YVc1MlpYSnpaU3hjYmlBZ0lDQnBiblpsY25ObElEMGdZbXh2WTJzdWNISnZaM0poYlNBbUppQmliRzlqYXk1cGJuWmxjbk5sTEZ4dUlDQWdJR1pwY25OMFNXNTJaWEp6WlNBOUlHbHVkbVZ5YzJVc1hHNGdJQ0FnYkdGemRFbHVkbVZ5YzJVZ1BTQnBiblpsY25ObE8xeHVYRzRnSUdsbUlDaHBiblpsY25ObElDWW1JR2x1ZG1WeWMyVXVZMmhoYVc1bFpDa2dlMXh1SUNBZ0lHWnBjbk4wU1c1MlpYSnpaU0E5SUdsdWRtVnljMlV1WW05a2VWc3dYUzV3Y205bmNtRnRPMXh1WEc0Z0lDQWdMeThnVjJGc2F5QjBhR1VnYVc1MlpYSnpaU0JqYUdGcGJpQjBieUJtYVc1a0lIUm9aU0JzWVhOMElHbHVkbVZ5YzJVZ2RHaGhkQ0JwY3lCaFkzUjFZV3hzZVNCcGJpQjBhR1VnWTJoaGFXNHVYRzRnSUNBZ2QyaHBiR1VnS0d4aGMzUkpiblpsY25ObExtTm9ZV2x1WldRcElIdGNiaUFnSUNBZ0lHeGhjM1JKYm5abGNuTmxJRDBnYkdGemRFbHVkbVZ5YzJVdVltOWtlVnRzWVhOMFNXNTJaWEp6WlM1aWIyUjVMbXhsYm1kMGFDQXRJREZkTG5CeWIyZHlZVzA3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnYkdWMElITjBjbWx3SUQwZ2UxeHVJQ0FnSUc5d1pXNDZJR0pzYjJOckxtOXdaVzVUZEhKcGNDNXZjR1Z1TEZ4dUlDQWdJR05zYjNObE9pQmliRzlqYXk1amJHOXpaVk4wY21sd0xtTnNiM05sTEZ4dVhHNGdJQ0FnTHk4Z1JHVjBaWEp0YVc1bElIUm9aU0J6ZEdGdVpHRnNiMjVsSUdOaGJtUnBZV041TGlCQ1lYTnBZMkZzYkhrZ1pteGhaeUJ2ZFhJZ1kyOXVkR1Z1ZENCaGN5QmlaV2x1WnlCd2IzTnphV0pzZVNCemRHRnVaR0ZzYjI1bFhHNGdJQ0FnTHk4Z2MyOGdiM1Z5SUhCaGNtVnVkQ0JqWVc0Z1pHVjBaWEp0YVc1bElHbG1JSGRsSUdGamRIVmhiR3g1SUdGeVpTQnpkR0Z1WkdGc2IyNWxYRzRnSUNBZ2IzQmxibE4wWVc1a1lXeHZibVU2SUdselRtVjRkRmRvYVhSbGMzQmhZMlVvY0hKdlozSmhiUzVpYjJSNUtTeGNiaUFnSUNCamJHOXpaVk4wWVc1a1lXeHZibVU2SUdselVISmxkbGRvYVhSbGMzQmhZMlVvS0dacGNuTjBTVzUyWlhKelpTQjhmQ0J3Y205bmNtRnRLUzVpYjJSNUtWeHVJQ0I5TzF4dVhHNGdJR2xtSUNoaWJHOWpheTV2Y0dWdVUzUnlhWEF1WTJ4dmMyVXBJSHRjYmlBZ0lDQnZiV2wwVW1sbmFIUW9jSEp2WjNKaGJTNWliMlI1TENCdWRXeHNMQ0IwY25WbEtUdGNiaUFnZlZ4dVhHNGdJR2xtSUNocGJuWmxjbk5sS1NCN1hHNGdJQ0FnYkdWMElHbHVkbVZ5YzJWVGRISnBjQ0E5SUdKc2IyTnJMbWx1ZG1WeWMyVlRkSEpwY0R0Y2JseHVJQ0FnSUdsbUlDaHBiblpsY25ObFUzUnlhWEF1YjNCbGJpa2dlMXh1SUNBZ0lDQWdiMjFwZEV4bFpuUW9jSEp2WjNKaGJTNWliMlI1TENCdWRXeHNMQ0IwY25WbEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9hVzUyWlhKelpWTjBjbWx3TG1Oc2IzTmxLU0I3WEc0Z0lDQWdJQ0J2YldsMFVtbG5hSFFvWm1seWMzUkpiblpsY25ObExtSnZaSGtzSUc1MWJHd3NJSFJ5ZFdVcE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb1lteHZZMnN1WTJ4dmMyVlRkSEpwY0M1dmNHVnVLU0I3WEc0Z0lDQWdJQ0J2YldsMFRHVm1kQ2hzWVhOMFNXNTJaWEp6WlM1aWIyUjVMQ0J1ZFd4c0xDQjBjblZsS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCR2FXNWtJSE4wWVc1a1lXeHZibVVnWld4elpTQnpkR0YwYldWdWRITmNiaUFnSUNCcFppQW9YRzRnSUNBZ0lDQWhkR2hwY3k1dmNIUnBiMjV6TG1sbmJtOXlaVk4wWVc1a1lXeHZibVVnSmlaY2JpQWdJQ0FnSUdselVISmxkbGRvYVhSbGMzQmhZMlVvY0hKdlozSmhiUzVpYjJSNUtTQW1KbHh1SUNBZ0lDQWdhWE5PWlhoMFYyaHBkR1Z6Y0dGalpTaG1hWEp6ZEVsdWRtVnljMlV1WW05a2VTbGNiaUFnSUNBcElIdGNiaUFnSUNBZ0lHOXRhWFJNWldaMEtIQnliMmR5WVcwdVltOWtlU2s3WEc0Z0lDQWdJQ0J2YldsMFVtbG5hSFFvWm1seWMzUkpiblpsY25ObExtSnZaSGtwTzF4dUlDQWdJSDFjYmlBZ2ZTQmxiSE5sSUdsbUlDaGliRzlqYXk1amJHOXpaVk4wY21sd0xtOXdaVzRwSUh0Y2JpQWdJQ0J2YldsMFRHVm1kQ2h3Y205bmNtRnRMbUp2Wkhrc0lHNTFiR3dzSUhSeWRXVXBPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJSE4wY21sd08xeHVmVHRjYmx4dVYyaHBkR1Z6Y0dGalpVTnZiblJ5YjJ3dWNISnZkRzkwZVhCbExrUmxZMjl5WVhSdmNpQTlJRmRvYVhSbGMzQmhZMlZEYjI1MGNtOXNMbkJ5YjNSdmRIbHdaUzVOZFhOMFlXTm9aVk4wWVhSbGJXVnVkQ0E5SUdaMWJtTjBhVzl1S0Z4dUlDQnRkWE4wWVdOb1pWeHVLU0I3WEc0Z0lISmxkSFZ5YmlCdGRYTjBZV05vWlM1emRISnBjRHRjYm4wN1hHNWNibGRvYVhSbGMzQmhZMlZEYjI1MGNtOXNMbkJ5YjNSdmRIbHdaUzVRWVhKMGFXRnNVM1JoZEdWdFpXNTBJRDBnVjJocGRHVnpjR0ZqWlVOdmJuUnliMnd1Y0hKdmRHOTBlWEJsTGtOdmJXMWxiblJUZEdGMFpXMWxiblFnUFNCbWRXNWpkR2x2YmloY2JpQWdibTlrWlZ4dUtTQjdYRzRnSUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCdVpYaDBJQ292WEc0Z0lHeGxkQ0J6ZEhKcGNDQTlJRzV2WkdVdWMzUnlhWEFnZkh3Z2UzMDdYRzRnSUhKbGRIVnliaUI3WEc0Z0lDQWdhVzVzYVc1bFUzUmhibVJoYkc5dVpUb2dkSEoxWlN4Y2JpQWdJQ0J2Y0dWdU9pQnpkSEpwY0M1dmNHVnVMRnh1SUNBZ0lHTnNiM05sT2lCemRISnBjQzVqYkc5elpWeHVJQ0I5TzF4dWZUdGNibHh1Wm5WdVkzUnBiMjRnYVhOUWNtVjJWMmhwZEdWemNHRmpaU2hpYjJSNUxDQnBMQ0JwYzFKdmIzUXBJSHRjYmlBZ2FXWWdLR2tnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lHa2dQU0JpYjJSNUxteGxibWQwYUR0Y2JpQWdmVnh1WEc0Z0lDOHZJRTV2WkdWeklIUm9ZWFFnWlc1a0lIZHBkR2dnYm1WM2JHbHVaWE1nWVhKbElHTnZibk5wWkdWeVpXUWdkMmhwZEdWemNHRmpaU0FvWW5WMElHRnlaU0J6Y0dWamFXRnNYRzRnSUM4dklHTmhjMlZrSUdadmNpQnpkSEpwY0NCdmNHVnlZWFJwYjI1ektWeHVJQ0JzWlhRZ2NISmxkaUE5SUdKdlpIbGJhU0F0SURGZExGeHVJQ0FnSUhOcFlteHBibWNnUFNCaWIyUjVXMmtnTFNBeVhUdGNiaUFnYVdZZ0tDRndjbVYyS1NCN1hHNGdJQ0FnY21WMGRYSnVJR2x6VW05dmREdGNiaUFnZlZ4dVhHNGdJR2xtSUNod2NtVjJMblI1Y0dVZ1BUMDlJQ2REYjI1MFpXNTBVM1JoZEdWdFpXNTBKeWtnZTF4dUlDQWdJSEpsZEhWeWJpQW9jMmxpYkdsdVp5QjhmQ0FoYVhOU2IyOTBJRDhnTDF4Y2NqOWNYRzVjWEhNcVB5UXZJRG9nTHloZWZGeGNjajljWEc0cFhGeHpLajhrTHlrdWRHVnpkQ2hjYmlBZ0lDQWdJSEJ5WlhZdWIzSnBaMmx1WVd4Y2JpQWdJQ0FwTzF4dUlDQjlYRzU5WEc1bWRXNWpkR2x2YmlCcGMwNWxlSFJYYUdsMFpYTndZV05sS0dKdlpIa3NJR2tzSUdselVtOXZkQ2tnZTF4dUlDQnBaaUFvYVNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdhU0E5SUMweE8xeHVJQ0I5WEc1Y2JpQWdiR1YwSUc1bGVIUWdQU0JpYjJSNVcya2dLeUF4WFN4Y2JpQWdJQ0J6YVdKc2FXNW5JRDBnWW05a2VWdHBJQ3NnTWwwN1hHNGdJR2xtSUNnaGJtVjRkQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQnBjMUp2YjNRN1hHNGdJSDFjYmx4dUlDQnBaaUFvYm1WNGRDNTBlWEJsSUQwOVBTQW5RMjl1ZEdWdWRGTjBZWFJsYldWdWRDY3BJSHRjYmlBZ0lDQnlaWFIxY200Z0tITnBZbXhwYm1jZ2ZId2dJV2x6VW05dmRDQS9JQzllWEZ4ektqOWNYSEkvWEZ4dUx5QTZJQzllWEZ4ektqOG9YRnh5UDF4Y2Jud2tLUzhwTG5SbGMzUW9YRzRnSUNBZ0lDQnVaWGgwTG05eWFXZHBibUZzWEc0Z0lDQWdLVHRjYmlBZ2ZWeHVmVnh1WEc0dkx5Qk5ZWEpyY3lCMGFHVWdibTlrWlNCMGJ5QjBhR1VnY21sbmFIUWdiMllnZEdobElIQnZjMmwwYVc5dUlHRnpJRzl0YVhSMFpXUXVYRzR2THlCSkxtVXVJSHQ3Wm05dmZYMG5JQ2NnZDJsc2JDQnRZWEpySUhSb1pTQW5JQ2NnYm05a1pTQmhjeUJ2YldsMGRHVmtMbHh1THk5Y2JpOHZJRWxtSUdrZ2FYTWdkVzVrWldacGJtVmtMQ0IwYUdWdUlIUm9aU0JtYVhKemRDQmphR2xzWkNCM2FXeHNJR0psSUcxaGNtdGxaQ0JoY3lCemRXTm9MbHh1THk5Y2JpOHZJRWxtSUcxMWJHbDBjR3hsSUdseklIUnlkWFJvZVNCMGFHVnVJR0ZzYkNCM2FHbDBaWE53WVdObElIZHBiR3dnWW1VZ2MzUnlhWEJ3WldRZ2IzVjBJSFZ1ZEdsc0lHNXZiaTEzYUdsMFpYTndZV05sWEc0dkx5QmpiMjUwWlc1MElHbHpJRzFsZEM1Y2JtWjFibU4wYVc5dUlHOXRhWFJTYVdkb2RDaGliMlI1TENCcExDQnRkV3gwYVhCc1pTa2dlMXh1SUNCc1pYUWdZM1Z5Y21WdWRDQTlJR0p2WkhsYmFTQTlQU0J1ZFd4c0lEOGdNQ0E2SUdrZ0t5QXhYVHRjYmlBZ2FXWWdLRnh1SUNBZ0lDRmpkWEp5Wlc1MElIeDhYRzRnSUNBZ1kzVnljbVZ1ZEM1MGVYQmxJQ0U5UFNBblEyOXVkR1Z1ZEZOMFlYUmxiV1Z1ZENjZ2ZIeGNiaUFnSUNBb0lXMTFiSFJwY0d4bElDWW1JR04xY25KbGJuUXVjbWxuYUhSVGRISnBjSEJsWkNsY2JpQWdLU0I3WEc0Z0lDQWdjbVYwZFhKdU8xeHVJQ0I5WEc1Y2JpQWdiR1YwSUc5eWFXZHBibUZzSUQwZ1kzVnljbVZ1ZEM1MllXeDFaVHRjYmlBZ1kzVnljbVZ1ZEM1MllXeDFaU0E5SUdOMWNuSmxiblF1ZG1Gc2RXVXVjbVZ3YkdGalpTaGNiaUFnSUNCdGRXeDBhWEJzWlNBL0lDOWVYRnh6S3k4Z09pQXZYbHNnWEZ4MFhTcGNYSEkvWEZ4dVB5OHNYRzRnSUNBZ0p5ZGNiaUFnS1R0Y2JpQWdZM1Z5Y21WdWRDNXlhV2RvZEZOMGNtbHdjR1ZrSUQwZ1kzVnljbVZ1ZEM1MllXeDFaU0FoUFQwZ2IzSnBaMmx1WVd3N1hHNTlYRzVjYmk4dklFMWhjbXR6SUhSb1pTQnViMlJsSUhSdklIUm9aU0JzWldaMElHOW1JSFJvWlNCd2IzTnBkR2x2YmlCaGN5QnZiV2wwZEdWa0xseHVMeThnU1M1bExpQW5JQ2Q3ZTJadmIzMTlJSGRwYkd3Z2JXRnlheUIwYUdVZ0p5QW5JRzV2WkdVZ1lYTWdiMjFwZEhSbFpDNWNiaTh2WEc0dkx5QkpaaUJwSUdseklIVnVaR1ZtYVc1bFpDQjBhR1Z1SUhSb1pTQnNZWE4wSUdOb2FXeGtJSGRwYkd3Z1ltVWdiV0Z5YTJWa0lHRnpJSE4xWTJndVhHNHZMMXh1THk4Z1NXWWdiWFZzYVhSd2JHVWdhWE1nZEhKMWRHaDVJSFJvWlc0Z1lXeHNJSGRvYVhSbGMzQmhZMlVnZDJsc2JDQmlaU0J6ZEhKcGNIQmxaQ0J2ZFhRZ2RXNTBhV3dnYm05dUxYZG9hWFJsYzNCaFkyVmNiaTh2SUdOdmJuUmxiblFnYVhNZ2JXVjBMbHh1Wm5WdVkzUnBiMjRnYjIxcGRFeGxablFvWW05a2VTd2dhU3dnYlhWc2RHbHdiR1VwSUh0Y2JpQWdiR1YwSUdOMWNuSmxiblFnUFNCaWIyUjVXMmtnUFQwZ2JuVnNiQ0EvSUdKdlpIa3ViR1Z1WjNSb0lDMGdNU0E2SUdrZ0xTQXhYVHRjYmlBZ2FXWWdLRnh1SUNBZ0lDRmpkWEp5Wlc1MElIeDhYRzRnSUNBZ1kzVnljbVZ1ZEM1MGVYQmxJQ0U5UFNBblEyOXVkR1Z1ZEZOMFlYUmxiV1Z1ZENjZ2ZIeGNiaUFnSUNBb0lXMTFiSFJwY0d4bElDWW1JR04xY25KbGJuUXViR1ZtZEZOMGNtbHdjR1ZrS1Z4dUlDQXBJSHRjYmlBZ0lDQnlaWFIxY200N1hHNGdJSDFjYmx4dUlDQXZMeUJYWlNCdmJXbDBJSFJvWlNCc1lYTjBJRzV2WkdVZ2FXWWdhWFFuY3lCM2FHbDBaWE53WVdObElHOXViSGtnWVc1a0lHNXZkQ0J3Y21WalpXUmxaQ0JpZVNCaElHNXZiaTFqYjI1MFpXNTBJRzV2WkdVdVhHNGdJR3hsZENCdmNtbG5hVzVoYkNBOUlHTjFjbkpsYm5RdWRtRnNkV1U3WEc0Z0lHTjFjbkpsYm5RdWRtRnNkV1VnUFNCamRYSnlaVzUwTG5aaGJIVmxMbkpsY0d4aFkyVW9iWFZzZEdsd2JHVWdQeUF2WEZ4ekt5UXZJRG9nTDFzZ1hGeDBYU3NrTHl3Z0p5Y3BPMXh1SUNCamRYSnlaVzUwTG14bFpuUlRkSEpwY0hCbFpDQTlJR04xY25KbGJuUXVkbUZzZFdVZ0lUMDlJRzl5YVdkcGJtRnNPMXh1SUNCeVpYUjFjbTRnWTNWeWNtVnVkQzVzWldaMFUzUnlhWEJ3WldRN1hHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRmRvYVhSbGMzQmhZMlZEYjI1MGNtOXNPMXh1SWwxOVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5yZWdpc3RlckRlZmF1bHREZWNvcmF0b3JzID0gcmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9ycztcbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF9kZWNvcmF0b3JzSW5saW5lID0gcmVxdWlyZSgnLi9kZWNvcmF0b3JzL2lubGluZScpO1xuXG52YXIgX2RlY29yYXRvcnNJbmxpbmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVjb3JhdG9yc0lubGluZSk7XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnMoaW5zdGFuY2UpIHtcbiAgX2RlY29yYXRvcnNJbmxpbmUyWydkZWZhdWx0J10oaW5zdGFuY2UpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMMlJsWTI5eVlYUnZjbk11YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3WjBOQlFUSkNMSEZDUVVGeFFqczdPenRCUVVWNlF5eFRRVUZUTEhsQ1FVRjVRaXhEUVVGRExGRkJRVkVzUlVGQlJUdEJRVU5zUkN4blEwRkJaU3hSUVVGUkxFTkJRVU1zUTBGQlF6dERRVU14UWlJc0ltWnBiR1VpT2lKa1pXTnZjbUYwYjNKekxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVcxd2IzSjBJSEpsWjJsemRHVnlTVzVzYVc1bElHWnliMjBnSnk0dlpHVmpiM0poZEc5eWN5OXBibXhwYm1Vbk8xeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdjbVZuYVhOMFpYSkVaV1poZFd4MFJHVmpiM0poZEc5eWN5aHBibk4wWVc1alpTa2dlMXh1SUNCeVpXZHBjM1JsY2tsdWJHbHVaU2hwYm5OMFlXNWpaU2s3WEc1OVhHNGlYWDA9XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJEZWNvcmF0b3IoJ2lubGluZScsIGZ1bmN0aW9uIChmbiwgcHJvcHMsIGNvbnRhaW5lciwgb3B0aW9ucykge1xuICAgIHZhciByZXQgPSBmbjtcbiAgICBpZiAoIXByb3BzLnBhcnRpYWxzKSB7XG4gICAgICBwcm9wcy5wYXJ0aWFscyA9IHt9O1xuICAgICAgcmV0ID0gZnVuY3Rpb24gKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IHBhcnRpYWxzIHN0YWNrIGZyYW1lIHByaW9yIHRvIGV4ZWMuXG4gICAgICAgIHZhciBvcmlnaW5hbCA9IGNvbnRhaW5lci5wYXJ0aWFscztcbiAgICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gX3V0aWxzLmV4dGVuZCh7fSwgb3JpZ2luYWwsIHByb3BzLnBhcnRpYWxzKTtcbiAgICAgICAgdmFyIHJldCA9IGZuKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBvcmlnaW5hbDtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcHJvcHMucGFydGlhbHNbb3B0aW9ucy5hcmdzWzBdXSA9IG9wdGlvbnMuZm47XG5cbiAgICByZXR1cm4gcmV0O1xuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDJSbFkyOXlZWFJ2Y25NdmFXNXNhVzVsTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdjVUpCUVhWQ0xGVkJRVlU3TzNGQ1FVVnNRaXhWUVVGVExGRkJRVkVzUlVGQlJUdEJRVU5vUXl4VlFVRlJMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNVVUZCVVN4RlFVRkZMRlZCUVZNc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeFRRVUZUTEVWQlFVVXNUMEZCVHl4RlFVRkZPMEZCUXpORkxGRkJRVWtzUjBGQlJ5eEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTmlMRkZCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeEZRVUZGTzBGQlEyNUNMRmRCUVVzc1EwRkJReXhSUVVGUkxFZEJRVWNzUlVGQlJTeERRVUZETzBGQlEzQkNMRk5CUVVjc1IwRkJSeXhWUVVGVExFOUJRVThzUlVGQlJTeFBRVUZQTEVWQlFVVTdPMEZCUlM5Q0xGbEJRVWtzVVVGQlVTeEhRVUZITEZOQlFWTXNRMEZCUXl4UlFVRlJMRU5CUVVNN1FVRkRiRU1zYVVKQlFWTXNRMEZCUXl4UlFVRlJMRWRCUVVjc1kwRkJUeXhGUVVGRkxFVkJRVVVzVVVGQlVTeEZRVUZGTEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRCUVVNeFJDeFpRVUZKTEVkQlFVY3NSMEZCUnl4RlFVRkZMRU5CUVVNc1QwRkJUeXhGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZETzBGQlF5OUNMR2xDUVVGVExFTkJRVU1zVVVGQlVTeEhRVUZITEZGQlFWRXNRMEZCUXp0QlFVTTVRaXhsUVVGUExFZEJRVWNzUTBGQlF6dFBRVU5hTEVOQlFVTTdTMEZEU0RzN1FVRkZSQ3hUUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eFBRVUZQTEVOQlFVTXNSVUZCUlN4RFFVRkRPenRCUVVVM1F5eFhRVUZQTEVkQlFVY3NRMEZCUXp0SFFVTmFMRU5CUVVNc1EwRkJRenREUVVOS0lpd2labWxzWlNJNkltbHViR2x1WlM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQjdJR1Y0ZEdWdVpDQjlJR1p5YjIwZ0p5NHVMM1YwYVd4ekp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdablZ1WTNScGIyNG9hVzV6ZEdGdVkyVXBJSHRjYmlBZ2FXNXpkR0Z1WTJVdWNtVm5hWE4wWlhKRVpXTnZjbUYwYjNJb0oybHViR2x1WlNjc0lHWjFibU4wYVc5dUtHWnVMQ0J3Y205d2N5d2dZMjl1ZEdGcGJtVnlMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lDQWdiR1YwSUhKbGRDQTlJR1p1TzF4dUlDQWdJR2xtSUNnaGNISnZjSE11Y0dGeWRHbGhiSE1wSUh0Y2JpQWdJQ0FnSUhCeWIzQnpMbkJoY25ScFlXeHpJRDBnZTMwN1hHNGdJQ0FnSUNCeVpYUWdQU0JtZFc1amRHbHZiaWhqYjI1MFpYaDBMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lDQWdJQ0FnSUM4dklFTnlaV0YwWlNCaElHNWxkeUJ3WVhKMGFXRnNjeUJ6ZEdGamF5Qm1jbUZ0WlNCd2NtbHZjaUIwYnlCbGVHVmpMbHh1SUNBZ0lDQWdJQ0JzWlhRZ2IzSnBaMmx1WVd3Z1BTQmpiMjUwWVdsdVpYSXVjR0Z5ZEdsaGJITTdYRzRnSUNBZ0lDQWdJR052Ym5SaGFXNWxjaTV3WVhKMGFXRnNjeUE5SUdWNGRHVnVaQ2g3ZlN3Z2IzSnBaMmx1WVd3c0lIQnliM0J6TG5CaGNuUnBZV3h6S1R0Y2JpQWdJQ0FnSUNBZ2JHVjBJSEpsZENBOUlHWnVLR052Ym5SbGVIUXNJRzl3ZEdsdmJuTXBPMXh1SUNBZ0lDQWdJQ0JqYjI1MFlXbHVaWEl1Y0dGeWRHbGhiSE1nUFNCdmNtbG5hVzVoYkR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGREdGNiaUFnSUNBZ0lIMDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NISnZjSE11Y0dGeWRHbGhiSE5iYjNCMGFXOXVjeTVoY21keld6QmRYU0E5SUc5d2RHbHZibk11Wm00N1hHNWNiaUFnSUNCeVpYUjFjbTRnY21WME8xeHVJQ0I5S1R0Y2JuMWNiaUpkZlE9PVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIGVycm9yUHJvcHMgPSBbJ2Rlc2NyaXB0aW9uJywgJ2ZpbGVOYW1lJywgJ2xpbmVOdW1iZXInLCAnZW5kTGluZU51bWJlcicsICdtZXNzYWdlJywgJ25hbWUnLCAnbnVtYmVyJywgJ3N0YWNrJ107XG5cbmZ1bmN0aW9uIEV4Y2VwdGlvbihtZXNzYWdlLCBub2RlKSB7XG4gIHZhciBsb2MgPSBub2RlICYmIG5vZGUubG9jLFxuICAgICAgbGluZSA9IHVuZGVmaW5lZCxcbiAgICAgIGVuZExpbmVOdW1iZXIgPSB1bmRlZmluZWQsXG4gICAgICBjb2x1bW4gPSB1bmRlZmluZWQsXG4gICAgICBlbmRDb2x1bW4gPSB1bmRlZmluZWQ7XG5cbiAgaWYgKGxvYykge1xuICAgIGxpbmUgPSBsb2Muc3RhcnQubGluZTtcbiAgICBlbmRMaW5lTnVtYmVyID0gbG9jLmVuZC5saW5lO1xuICAgIGNvbHVtbiA9IGxvYy5zdGFydC5jb2x1bW47XG4gICAgZW5kQ29sdW1uID0gbG9jLmVuZC5jb2x1bW47XG5cbiAgICBtZXNzYWdlICs9ICcgLSAnICsgbGluZSArICc6JyArIGNvbHVtbjtcbiAgfVxuXG4gIHZhciB0bXAgPSBFcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBtZXNzYWdlKTtcblxuICAvLyBVbmZvcnR1bmF0ZWx5IGVycm9ycyBhcmUgbm90IGVudW1lcmFibGUgaW4gQ2hyb21lIChhdCBsZWFzdCksIHNvIGBmb3IgcHJvcCBpbiB0bXBgIGRvZXNuJ3Qgd29yay5cbiAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgZXJyb3JQcm9wcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgdGhpc1tlcnJvclByb3BzW2lkeF1dID0gdG1wW2Vycm9yUHJvcHNbaWR4XV07XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBFeGNlcHRpb24pO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBpZiAobG9jKSB7XG4gICAgICB0aGlzLmxpbmVOdW1iZXIgPSBsaW5lO1xuICAgICAgdGhpcy5lbmRMaW5lTnVtYmVyID0gZW5kTGluZU51bWJlcjtcblxuICAgICAgLy8gV29yayBhcm91bmQgaXNzdWUgdW5kZXIgc2FmYXJpIHdoZXJlIHdlIGNhbid0IGRpcmVjdGx5IHNldCB0aGUgY29sdW1uIHZhbHVlXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2NvbHVtbicsIHtcbiAgICAgICAgICB2YWx1ZTogY29sdW1uLFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnZW5kQ29sdW1uJywge1xuICAgICAgICAgIHZhbHVlOiBlbmRDb2x1bW4sXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY29sdW1uID0gY29sdW1uO1xuICAgICAgICB0aGlzLmVuZENvbHVtbiA9IGVuZENvbHVtbjtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKG5vcCkge1xuICAgIC8qIElnbm9yZSBpZiB0aGUgYnJvd3NlciBpcyB2ZXJ5IHBhcnRpY3VsYXIgKi9cbiAgfVxufVxuXG5FeGNlcHRpb24ucHJvdG90eXBlID0gbmV3IEVycm9yKCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IEV4Y2VwdGlvbjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMMlY0WTJWd2RHbHZiaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN1FVRkJRU3hKUVVGTkxGVkJRVlVzUjBGQlJ5eERRVU5xUWl4aFFVRmhMRVZCUTJJc1ZVRkJWU3hGUVVOV0xGbEJRVmtzUlVGRFdpeGxRVUZsTEVWQlEyWXNVMEZCVXl4RlFVTlVMRTFCUVUwc1JVRkRUaXhSUVVGUkxFVkJRMUlzVDBGQlR5eERRVU5TTEVOQlFVTTdPMEZCUlVZc1UwRkJVeXhUUVVGVExFTkJRVU1zVDBGQlR5eEZRVUZGTEVsQlFVa3NSVUZCUlR0QlFVTm9ReXhOUVVGSkxFZEJRVWNzUjBGQlJ5eEpRVUZKTEVsQlFVa3NTVUZCU1N4RFFVRkRMRWRCUVVjN1RVRkRlRUlzU1VGQlNTeFpRVUZCTzAxQlEwb3NZVUZCWVN4WlFVRkJPMDFCUTJJc1RVRkJUU3haUVVGQk8wMUJRMDRzVTBGQlV5eFpRVUZCTEVOQlFVTTdPMEZCUlZvc1RVRkJTU3hIUVVGSExFVkJRVVU3UVVGRFVDeFJRVUZKTEVkQlFVY3NSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU03UVVGRGRFSXNhVUpCUVdFc1IwRkJSeXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXp0QlFVTTNRaXhWUVVGTkxFZEJRVWNzUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNN1FVRkRNVUlzWVVGQlV5eEhRVUZITEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRE96dEJRVVV6UWl4WFFVRlBMRWxCUVVrc1MwRkJTeXhIUVVGSExFbEJRVWtzUjBGQlJ5eEhRVUZITEVkQlFVY3NUVUZCVFN4RFFVRkRPMGRCUTNoRE96dEJRVVZFTEUxQlFVa3NSMEZCUnl4SFFVRkhMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU03T3p0QlFVY3hSQ3hQUVVGTExFbEJRVWtzUjBGQlJ5eEhRVUZITEVOQlFVTXNSVUZCUlN4SFFVRkhMRWRCUVVjc1ZVRkJWU3hEUVVGRExFMUJRVTBzUlVGQlJTeEhRVUZITEVWQlFVVXNSVUZCUlR0QlFVTm9SQ3hSUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1IwRkJSeXhEUVVGRExGVkJRVlVzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMGRCUXpsRE96czdRVUZIUkN4TlFVRkpMRXRCUVVzc1EwRkJReXhwUWtGQmFVSXNSVUZCUlR0QlFVTXpRaXhUUVVGTExFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1NVRkJTU3hGUVVGRkxGTkJRVk1zUTBGQlF5eERRVUZETzBkQlF6RkRPenRCUVVWRUxFMUJRVWs3UVVGRFJpeFJRVUZKTEVkQlFVY3NSVUZCUlR0QlFVTlFMRlZCUVVrc1EwRkJReXhWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZETzBGQlEzWkNMRlZCUVVrc1EwRkJReXhoUVVGaExFZEJRVWNzWVVGQllTeERRVUZET3pzN08wRkJTVzVETEZWQlFVa3NUVUZCVFN4RFFVRkRMR05CUVdNc1JVRkJSVHRCUVVONlFpeGpRVUZOTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hSUVVGUkxFVkJRVVU3UVVGRGNFTXNaVUZCU3l4RlFVRkZMRTFCUVUwN1FVRkRZaXh2UWtGQlZTeEZRVUZGTEVsQlFVazdVMEZEYWtJc1EwRkJReXhEUVVGRE8wRkJRMGdzWTBGQlRTeERRVUZETEdOQlFXTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1YwRkJWeXhGUVVGRk8wRkJRM1pETEdWQlFVc3NSVUZCUlN4VFFVRlRPMEZCUTJoQ0xHOUNRVUZWTEVWQlFVVXNTVUZCU1R0VFFVTnFRaXhEUVVGRExFTkJRVU03VDBGRFNpeE5RVUZOTzBGQlEwd3NXVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhOUVVGTkxFTkJRVU03UVVGRGNrSXNXVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhUUVVGVExFTkJRVU03VDBGRE5VSTdTMEZEUmp0SFFVTkdMRU5CUVVNc1QwRkJUeXhIUVVGSExFVkJRVVU3TzBkQlJXSTdRMEZEUmpzN1FVRkZSQ3hUUVVGVExFTkJRVU1zVTBGQlV5eEhRVUZITEVsQlFVa3NTMEZCU3l4RlFVRkZMRU5CUVVNN08zRkNRVVZ1UWl4VFFVRlRJaXdpWm1sc1pTSTZJbVY0WTJWd2RHbHZiaTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltTnZibk4wSUdWeWNtOXlVSEp2Y0hNZ1BTQmJYRzRnSUNka1pYTmpjbWx3ZEdsdmJpY3NYRzRnSUNkbWFXeGxUbUZ0WlNjc1hHNGdJQ2RzYVc1bFRuVnRZbVZ5Snl4Y2JpQWdKMlZ1WkV4cGJtVk9kVzFpWlhJbkxGeHVJQ0FuYldWemMyRm5aU2NzWEc0Z0lDZHVZVzFsSnl4Y2JpQWdKMjUxYldKbGNpY3NYRzRnSUNkemRHRmpheWRjYmwwN1hHNWNibVoxYm1OMGFXOXVJRVY0WTJWd2RHbHZiaWh0WlhOellXZGxMQ0J1YjJSbEtTQjdYRzRnSUd4bGRDQnNiMk1nUFNCdWIyUmxJQ1ltSUc1dlpHVXViRzlqTEZ4dUlDQWdJR3hwYm1Vc1hHNGdJQ0FnWlc1a1RHbHVaVTUxYldKbGNpeGNiaUFnSUNCamIyeDFiVzRzWEc0Z0lDQWdaVzVrUTI5c2RXMXVPMXh1WEc0Z0lHbG1JQ2hzYjJNcElIdGNiaUFnSUNCc2FXNWxJRDBnYkc5akxuTjBZWEowTG14cGJtVTdYRzRnSUNBZ1pXNWtUR2x1WlU1MWJXSmxjaUE5SUd4dll5NWxibVF1YkdsdVpUdGNiaUFnSUNCamIyeDFiVzRnUFNCc2IyTXVjM1JoY25RdVkyOXNkVzF1TzF4dUlDQWdJR1Z1WkVOdmJIVnRiaUE5SUd4dll5NWxibVF1WTI5c2RXMXVPMXh1WEc0Z0lDQWdiV1Z6YzJGblpTQXJQU0FuSUMwZ0p5QXJJR3hwYm1VZ0t5QW5PaWNnS3lCamIyeDFiVzQ3WEc0Z0lIMWNibHh1SUNCc1pYUWdkRzF3SUQwZ1JYSnliM0l1Y0hKdmRHOTBlWEJsTG1OdmJuTjBjblZqZEc5eUxtTmhiR3dvZEdocGN5d2diV1Z6YzJGblpTazdYRzVjYmlBZ0x5OGdWVzVtYjNKMGRXNWhkR1ZzZVNCbGNuSnZjbk1nWVhKbElHNXZkQ0JsYm5WdFpYSmhZbXhsSUdsdUlFTm9jbTl0WlNBb1lYUWdiR1ZoYzNRcExDQnpieUJnWm05eUlIQnliM0FnYVc0Z2RHMXdZQ0JrYjJWemJpZDBJSGR2Y21zdVhHNGdJR1p2Y2lBb2JHVjBJR2xrZUNBOUlEQTdJR2xrZUNBOElHVnljbTl5VUhKdmNITXViR1Z1WjNSb095QnBaSGdyS3lrZ2UxeHVJQ0FnSUhSb2FYTmJaWEp5YjNKUWNtOXdjMXRwWkhoZFhTQTlJSFJ0Y0Z0bGNuSnZjbEJ5YjNCelcybGtlRjFkTzF4dUlDQjlYRzVjYmlBZ0x5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHVnNjMlVnS2k5Y2JpQWdhV1lnS0VWeWNtOXlMbU5oY0hSMWNtVlRkR0ZqYTFSeVlXTmxLU0I3WEc0Z0lDQWdSWEp5YjNJdVkyRndkSFZ5WlZOMFlXTnJWSEpoWTJVb2RHaHBjeXdnUlhoalpYQjBhVzl1S1R0Y2JpQWdmVnh1WEc0Z0lIUnllU0I3WEc0Z0lDQWdhV1lnS0d4dll5a2dlMXh1SUNBZ0lDQWdkR2hwY3k1c2FXNWxUblZ0WW1WeUlEMGdiR2x1WlR0Y2JpQWdJQ0FnSUhSb2FYTXVaVzVrVEdsdVpVNTFiV0psY2lBOUlHVnVaRXhwYm1WT2RXMWlaWEk3WEc1Y2JpQWdJQ0FnSUM4dklGZHZjbXNnWVhKdmRXNWtJR2x6YzNWbElIVnVaR1Z5SUhOaFptRnlhU0IzYUdWeVpTQjNaU0JqWVc0bmRDQmthWEpsWTNSc2VTQnpaWFFnZEdobElHTnZiSFZ0YmlCMllXeDFaVnh1SUNBZ0lDQWdMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJRzVsZUhRZ0tpOWNiaUFnSUNBZ0lHbG1JQ2hQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrcElIdGNiaUFnSUNBZ0lDQWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0hSb2FYTXNJQ2RqYjJ4MWJXNG5MQ0I3WEc0Z0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUdOdmJIVnRiaXhjYmlBZ0lDQWdJQ0FnSUNCbGJuVnRaWEpoWW14bE9pQjBjblZsWEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvZEdocGN5d2dKMlZ1WkVOdmJIVnRiaWNzSUh0Y2JpQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1pXNWtRMjlzZFcxdUxGeHVJQ0FnSUNBZ0lDQWdJR1Z1ZFcxbGNtRmliR1U2SUhSeWRXVmNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTnZiSFZ0YmlBOUlHTnZiSFZ0Ymp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsYm1SRGIyeDFiVzRnUFNCbGJtUkRiMngxYlc0N1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlJR05oZEdOb0lDaHViM0FwSUh0Y2JpQWdJQ0F2S2lCSloyNXZjbVVnYVdZZ2RHaGxJR0p5YjNkelpYSWdhWE1nZG1WeWVTQndZWEowYVdOMWJHRnlJQ292WEc0Z0lIMWNibjFjYmx4dVJYaGpaWEIwYVc5dUxuQnliM1J2ZEhsd1pTQTlJRzVsZHlCRmNuSnZjaWdwTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCRmVHTmxjSFJwYjI0N1hHNGlYWDA9XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLnJlZ2lzdGVyRGVmYXVsdEhlbHBlcnMgPSByZWdpc3RlckRlZmF1bHRIZWxwZXJzO1xuZXhwb3J0cy5tb3ZlSGVscGVyVG9Ib29rcyA9IG1vdmVIZWxwZXJUb0hvb2tzO1xuLy8gaXN0YW5idWwgaWdub3JlIG5leHRcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX2hlbHBlcnNCbG9ja0hlbHBlck1pc3NpbmcgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmxvY2staGVscGVyLW1pc3NpbmcnKTtcblxudmFyIF9oZWxwZXJzQmxvY2tIZWxwZXJNaXNzaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hlbHBlcnNCbG9ja0hlbHBlck1pc3NpbmcpO1xuXG52YXIgX2hlbHBlcnNFYWNoID0gcmVxdWlyZSgnLi9oZWxwZXJzL2VhY2gnKTtcblxudmFyIF9oZWxwZXJzRWFjaDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oZWxwZXJzRWFjaCk7XG5cbnZhciBfaGVscGVyc0hlbHBlck1pc3NpbmcgPSByZXF1aXJlKCcuL2hlbHBlcnMvaGVscGVyLW1pc3NpbmcnKTtcblxudmFyIF9oZWxwZXJzSGVscGVyTWlzc2luZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oZWxwZXJzSGVscGVyTWlzc2luZyk7XG5cbnZhciBfaGVscGVyc0lmID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lmJyk7XG5cbnZhciBfaGVscGVyc0lmMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hlbHBlcnNJZik7XG5cbnZhciBfaGVscGVyc0xvZyA9IHJlcXVpcmUoJy4vaGVscGVycy9sb2cnKTtcblxudmFyIF9oZWxwZXJzTG9nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hlbHBlcnNMb2cpO1xuXG52YXIgX2hlbHBlcnNMb29rdXAgPSByZXF1aXJlKCcuL2hlbHBlcnMvbG9va3VwJyk7XG5cbnZhciBfaGVscGVyc0xvb2t1cDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oZWxwZXJzTG9va3VwKTtcblxudmFyIF9oZWxwZXJzV2l0aCA9IHJlcXVpcmUoJy4vaGVscGVycy93aXRoJyk7XG5cbnZhciBfaGVscGVyc1dpdGgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGVscGVyc1dpdGgpO1xuXG5mdW5jdGlvbiByZWdpc3RlckRlZmF1bHRIZWxwZXJzKGluc3RhbmNlKSB7XG4gIF9oZWxwZXJzQmxvY2tIZWxwZXJNaXNzaW5nMlsnZGVmYXVsdCddKGluc3RhbmNlKTtcbiAgX2hlbHBlcnNFYWNoMlsnZGVmYXVsdCddKGluc3RhbmNlKTtcbiAgX2hlbHBlcnNIZWxwZXJNaXNzaW5nMlsnZGVmYXVsdCddKGluc3RhbmNlKTtcbiAgX2hlbHBlcnNJZjJbJ2RlZmF1bHQnXShpbnN0YW5jZSk7XG4gIF9oZWxwZXJzTG9nMlsnZGVmYXVsdCddKGluc3RhbmNlKTtcbiAgX2hlbHBlcnNMb29rdXAyWydkZWZhdWx0J10oaW5zdGFuY2UpO1xuICBfaGVscGVyc1dpdGgyWydkZWZhdWx0J10oaW5zdGFuY2UpO1xufVxuXG5mdW5jdGlvbiBtb3ZlSGVscGVyVG9Ib29rcyhpbnN0YW5jZSwgaGVscGVyTmFtZSwga2VlcEhlbHBlcikge1xuICBpZiAoaW5zdGFuY2UuaGVscGVyc1toZWxwZXJOYW1lXSkge1xuICAgIGluc3RhbmNlLmhvb2tzW2hlbHBlck5hbWVdID0gaW5zdGFuY2UuaGVscGVyc1toZWxwZXJOYW1lXTtcbiAgICBpZiAoIWtlZXBIZWxwZXIpIHtcbiAgICAgIGRlbGV0ZSBpbnN0YW5jZS5oZWxwZXJzW2hlbHBlck5hbWVdO1xuICAgIH1cbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMMmhsYkhCbGNuTXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPM2xEUVVGMVF5eG5RMEZCWjBNN096czdNa0pCUXpsRExHZENRVUZuUWpzN096dHZRMEZEVUN3d1FrRkJNRUk3T3pzN2VVSkJRM0pETEdOQlFXTTdPenM3TUVKQlEySXNaVUZCWlRzN096czJRa0ZEV2l4clFrRkJhMEk3T3pzN01rSkJRM0JDTEdkQ1FVRm5RanM3T3p0QlFVVnNReXhUUVVGVExITkNRVUZ6UWl4RFFVRkRMRkZCUVZFc1JVRkJSVHRCUVVNdlF5eDVRMEZCTWtJc1VVRkJVU3hEUVVGRExFTkJRVU03UVVGRGNrTXNNa0pCUVdFc1VVRkJVU3hEUVVGRExFTkJRVU03UVVGRGRrSXNiME5CUVhOQ0xGRkJRVkVzUTBGQlF5eERRVUZETzBGQlEyaERMSGxDUVVGWExGRkJRVkVzUTBGQlF5eERRVUZETzBGQlEzSkNMREJDUVVGWkxGRkJRVkVzUTBGQlF5eERRVUZETzBGQlEzUkNMRFpDUVVGbExGRkJRVkVzUTBGQlF5eERRVUZETzBGQlEzcENMREpDUVVGaExGRkJRVkVzUTBGQlF5eERRVUZETzBOQlEzaENPenRCUVVWTkxGTkJRVk1zYVVKQlFXbENMRU5CUVVNc1VVRkJVU3hGUVVGRkxGVkJRVlVzUlVGQlJTeFZRVUZWTEVWQlFVVTdRVUZEYkVVc1RVRkJTU3hSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFWVXNRMEZCUXl4RlFVRkZPMEZCUTJoRExGbEJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWRCUVVjc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0QlFVTXhSQ3hSUVVGSkxFTkJRVU1zVlVGQlZTeEZRVUZGTzBGQlEyWXNZVUZCVHl4UlFVRlJMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzB0QlEzSkRPMGRCUTBZN1EwRkRSaUlzSW1acGJHVWlPaUpvWld4d1pYSnpMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUhKbFoybHpkR1Z5UW14dlkydElaV3h3WlhKTmFYTnphVzVuSUdaeWIyMGdKeTR2YUdWc2NHVnljeTlpYkc5amF5MW9aV3h3WlhJdGJXbHpjMmx1WnljN1hHNXBiWEJ2Y25RZ2NtVm5hWE4wWlhKRllXTm9JR1p5YjIwZ0p5NHZhR1ZzY0dWeWN5OWxZV05vSnp0Y2JtbHRjRzl5ZENCeVpXZHBjM1JsY2tobGJIQmxjazFwYzNOcGJtY2dabkp2YlNBbkxpOW9aV3h3WlhKekwyaGxiSEJsY2kxdGFYTnphVzVuSnp0Y2JtbHRjRzl5ZENCeVpXZHBjM1JsY2tsbUlHWnliMjBnSnk0dmFHVnNjR1Z5Y3k5cFppYzdYRzVwYlhCdmNuUWdjbVZuYVhOMFpYSk1iMmNnWm5KdmJTQW5MaTlvWld4d1pYSnpMMnh2WnljN1hHNXBiWEJ2Y25RZ2NtVm5hWE4wWlhKTWIyOXJkWEFnWm5KdmJTQW5MaTlvWld4d1pYSnpMMnh2YjJ0MWNDYzdYRzVwYlhCdmNuUWdjbVZuYVhOMFpYSlhhWFJvSUdaeWIyMGdKeTR2YUdWc2NHVnljeTkzYVhSb0p6dGNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJSEpsWjJsemRHVnlSR1ZtWVhWc2RFaGxiSEJsY25Nb2FXNXpkR0Z1WTJVcElIdGNiaUFnY21WbmFYTjBaWEpDYkc5amEwaGxiSEJsY2sxcGMzTnBibWNvYVc1emRHRnVZMlVwTzF4dUlDQnlaV2RwYzNSbGNrVmhZMmdvYVc1emRHRnVZMlVwTzF4dUlDQnlaV2RwYzNSbGNraGxiSEJsY2sxcGMzTnBibWNvYVc1emRHRnVZMlVwTzF4dUlDQnlaV2RwYzNSbGNrbG1LR2x1YzNSaGJtTmxLVHRjYmlBZ2NtVm5hWE4wWlhKTWIyY29hVzV6ZEdGdVkyVXBPMXh1SUNCeVpXZHBjM1JsY2t4dmIydDFjQ2hwYm5OMFlXNWpaU2s3WEc0Z0lISmxaMmx6ZEdWeVYybDBhQ2hwYm5OMFlXNWpaU2s3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnRiM1psU0dWc2NHVnlWRzlJYjI5cmN5aHBibk4wWVc1alpTd2dhR1ZzY0dWeVRtRnRaU3dnYTJWbGNFaGxiSEJsY2lrZ2UxeHVJQ0JwWmlBb2FXNXpkR0Z1WTJVdWFHVnNjR1Z5YzF0b1pXeHdaWEpPWVcxbFhTa2dlMXh1SUNBZ0lHbHVjM1JoYm1ObExtaHZiMnR6VzJobGJIQmxjazVoYldWZElEMGdhVzV6ZEdGdVkyVXVhR1ZzY0dWeWMxdG9aV3h3WlhKT1lXMWxYVHRjYmlBZ0lDQnBaaUFvSVd0bFpYQklaV3h3WlhJcElIdGNiaUFnSUNBZ0lHUmxiR1YwWlNCcGJuTjBZVzVqWlM1b1pXeHdaWEp6VzJobGJIQmxjazVoYldWZE8xeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dUlsMTlcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignYmxvY2tIZWxwZXJNaXNzaW5nJywgZnVuY3Rpb24gKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICB2YXIgaW52ZXJzZSA9IG9wdGlvbnMuaW52ZXJzZSxcbiAgICAgICAgZm4gPSBvcHRpb25zLmZuO1xuXG4gICAgaWYgKGNvbnRleHQgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBmbih0aGlzKTtcbiAgICB9IGVsc2UgaWYgKGNvbnRleHQgPT09IGZhbHNlIHx8IGNvbnRleHQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGludmVyc2UodGhpcyk7XG4gICAgfSBlbHNlIGlmIChfdXRpbHMuaXNBcnJheShjb250ZXh0KSkge1xuICAgICAgaWYgKGNvbnRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAob3B0aW9ucy5pZHMpIHtcbiAgICAgICAgICBvcHRpb25zLmlkcyA9IFtvcHRpb25zLm5hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLmhlbHBlcnMuZWFjaChjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIHZhciBkYXRhID0gX3V0aWxzLmNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgICAgIGRhdGEuY29udGV4dFBhdGggPSBfdXRpbHMuYXBwZW5kQ29udGV4dFBhdGgob3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoLCBvcHRpb25zLm5hbWUpO1xuICAgICAgICBvcHRpb25zID0geyBkYXRhOiBkYXRhIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmbihjb250ZXh0LCBvcHRpb25zKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMMmhsYkhCbGNuTXZZbXh2WTJzdGFHVnNjR1Z5TFcxcGMzTnBibWN1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096dHhRa0ZCZDBRc1ZVRkJWVHM3Y1VKQlJXNUVMRlZCUVZNc1VVRkJVU3hGUVVGRk8wRkJRMmhETEZWQlFWRXNRMEZCUXl4alFVRmpMRU5CUVVNc2IwSkJRVzlDTEVWQlFVVXNWVUZCVXl4UFFVRlBMRVZCUVVVc1QwRkJUeXhGUVVGRk8wRkJRM1pGTEZGQlFVa3NUMEZCVHl4SFFVRkhMRTlCUVU4c1EwRkJReXhQUVVGUE8xRkJRek5DTEVWQlFVVXNSMEZCUnl4UFFVRlBMRU5CUVVNc1JVRkJSU3hEUVVGRE96dEJRVVZzUWl4UlFVRkpMRTlCUVU4c1MwRkJTeXhKUVVGSkxFVkJRVVU3UVVGRGNFSXNZVUZCVHl4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UzBGRGFrSXNUVUZCVFN4SlFVRkpMRTlCUVU4c1MwRkJTeXhMUVVGTExFbEJRVWtzVDBGQlR5eEpRVUZKTEVsQlFVa3NSVUZCUlR0QlFVTXZReXhoUVVGUExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0TFFVTjBRaXhOUVVGTkxFbEJRVWtzWlVGQlVTeFBRVUZQTEVOQlFVTXNSVUZCUlR0QlFVTXpRaXhWUVVGSkxFOUJRVThzUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4RlFVRkZPMEZCUTNSQ0xGbEJRVWtzVDBGQlR5eERRVUZETEVkQlFVY3NSVUZCUlR0QlFVTm1MR2xDUVVGUExFTkJRVU1zUjBGQlJ5eEhRVUZITEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xTkJRemxDT3p0QlFVVkVMR1ZCUVU4c1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRE8wOUJRMmhFTEUxQlFVMDdRVUZEVEN4bFFVRlBMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFBRVU4wUWp0TFFVTkdMRTFCUVUwN1FVRkRUQ3hWUVVGSkxFOUJRVThzUTBGQlF5eEpRVUZKTEVsQlFVa3NUMEZCVHl4RFFVRkRMRWRCUVVjc1JVRkJSVHRCUVVNdlFpeFpRVUZKTEVsQlFVa3NSMEZCUnl4dFFrRkJXU3hQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdRVUZEY2tNc1dVRkJTU3hEUVVGRExGZEJRVmNzUjBGQlJ5eDVRa0ZEYWtJc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVWQlEzaENMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRMklzUTBGQlF6dEJRVU5HTEdWQlFVOHNSMEZCUnl4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzUTBGQlF6dFBRVU14UWpzN1FVRkZSQ3hoUVVGUExFVkJRVVVzUTBGQlF5eFBRVUZQTEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVNN1MwRkROMEk3UjBGRFJpeERRVUZETEVOQlFVTTdRMEZEU2lJc0ltWnBiR1VpT2lKaWJHOWpheTFvWld4d1pYSXRiV2x6YzJsdVp5NXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0I3SUdGd2NHVnVaRU52Ym5SbGVIUlFZWFJvTENCamNtVmhkR1ZHY21GdFpTd2dhWE5CY25KaGVTQjlJR1p5YjIwZ0p5NHVMM1YwYVd4ekp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdablZ1WTNScGIyNG9hVzV6ZEdGdVkyVXBJSHRjYmlBZ2FXNXpkR0Z1WTJVdWNtVm5hWE4wWlhKSVpXeHdaWElvSjJKc2IyTnJTR1ZzY0dWeVRXbHpjMmx1Wnljc0lHWjFibU4wYVc5dUtHTnZiblJsZUhRc0lHOXdkR2x2Ym5NcElIdGNiaUFnSUNCc1pYUWdhVzUyWlhKelpTQTlJRzl3ZEdsdmJuTXVhVzUyWlhKelpTeGNiaUFnSUNBZ0lHWnVJRDBnYjNCMGFXOXVjeTVtYmp0Y2JseHVJQ0FnSUdsbUlDaGpiMjUwWlhoMElEMDlQU0IwY25WbEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1ptNG9kR2hwY3lrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoamIyNTBaWGgwSUQwOVBTQm1ZV3h6WlNCOGZDQmpiMjUwWlhoMElEMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCcGJuWmxjbk5sS0hSb2FYTXBPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9hWE5CY25KaGVTaGpiMjUwWlhoMEtTa2dlMXh1SUNBZ0lDQWdhV1lnS0dOdmJuUmxlSFF1YkdWdVozUm9JRDRnTUNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTVwWkhNcElIdGNiaUFnSUNBZ0lDQWdJQ0J2Y0hScGIyNXpMbWxrY3lBOUlGdHZjSFJwYjI1ekxtNWhiV1ZkTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHbHVjM1JoYm1ObExtaGxiSEJsY25NdVpXRmphQ2hqYjI1MFpYaDBMQ0J2Y0hScGIyNXpLVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnBiblpsY25ObEtIUm9hWE1wTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTVrWVhSaElDWW1JRzl3ZEdsdmJuTXVhV1J6S1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JrWVhSaElEMGdZM0psWVhSbFJuSmhiV1VvYjNCMGFXOXVjeTVrWVhSaEtUdGNiaUFnSUNBZ0lDQWdaR0YwWVM1amIyNTBaWGgwVUdGMGFDQTlJR0Z3Y0dWdVpFTnZiblJsZUhSUVlYUm9LRnh1SUNBZ0lDQWdJQ0FnSUc5d2RHbHZibk11WkdGMFlTNWpiMjUwWlhoMFVHRjBhQ3hjYmlBZ0lDQWdJQ0FnSUNCdmNIUnBiMjV6TG01aGJXVmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnYjNCMGFXOXVjeUE5SUhzZ1pHRjBZVG9nWkdGMFlTQjlPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabTRvWTI5dWRHVjRkQ3dnYjNCMGFXOXVjeWs3WEc0Z0lDQWdmVnh1SUNCOUtUdGNibjFjYmlKZGZRPT1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbnZhciBfZXhjZXB0aW9uID0gcmVxdWlyZSgnLi4vZXhjZXB0aW9uJyk7XG5cbnZhciBfZXhjZXB0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4Y2VwdGlvbik7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignZWFjaCcsIGZ1bmN0aW9uIChjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnTXVzdCBwYXNzIGl0ZXJhdG9yIHRvICNlYWNoJyk7XG4gICAgfVxuXG4gICAgdmFyIGZuID0gb3B0aW9ucy5mbixcbiAgICAgICAgaW52ZXJzZSA9IG9wdGlvbnMuaW52ZXJzZSxcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIHJldCA9ICcnLFxuICAgICAgICBkYXRhID0gdW5kZWZpbmVkLFxuICAgICAgICBjb250ZXh0UGF0aCA9IHVuZGVmaW5lZDtcblxuICAgIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5pZHMpIHtcbiAgICAgIGNvbnRleHRQYXRoID0gX3V0aWxzLmFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5pZHNbMF0pICsgJy4nO1xuICAgIH1cblxuICAgIGlmIChfdXRpbHMuaXNGdW5jdGlvbihjb250ZXh0KSkge1xuICAgICAgY29udGV4dCA9IGNvbnRleHQuY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5kYXRhKSB7XG4gICAgICBkYXRhID0gX3V0aWxzLmNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXhlY0l0ZXJhdGlvbihmaWVsZCwgaW5kZXgsIGxhc3QpIHtcbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIGRhdGEua2V5ID0gZmllbGQ7XG4gICAgICAgIGRhdGEuaW5kZXggPSBpbmRleDtcbiAgICAgICAgZGF0YS5maXJzdCA9IGluZGV4ID09PSAwO1xuICAgICAgICBkYXRhLmxhc3QgPSAhIWxhc3Q7XG5cbiAgICAgICAgaWYgKGNvbnRleHRQYXRoKSB7XG4gICAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IGNvbnRleHRQYXRoICsgZmllbGQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0ID0gcmV0ICsgZm4oY29udGV4dFtmaWVsZF0sIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgYmxvY2tQYXJhbXM6IF91dGlscy5ibG9ja1BhcmFtcyhbY29udGV4dFtmaWVsZF0sIGZpZWxkXSwgW2NvbnRleHRQYXRoICsgZmllbGQsIG51bGxdKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAoX3V0aWxzLmlzQXJyYXkoY29udGV4dCkpIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IGNvbnRleHQubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgICAgaWYgKGkgaW4gY29udGV4dCkge1xuICAgICAgICAgICAgZXhlY0l0ZXJhdGlvbihpLCBpLCBpID09PSBjb250ZXh0Lmxlbmd0aCAtIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIGNvbnRleHRbU3ltYm9sLml0ZXJhdG9yXSkge1xuICAgICAgICB2YXIgbmV3Q29udGV4dCA9IFtdO1xuICAgICAgICB2YXIgaXRlcmF0b3IgPSBjb250ZXh0W1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICAgICAgZm9yICh2YXIgaXQgPSBpdGVyYXRvci5uZXh0KCk7ICFpdC5kb25lOyBpdCA9IGl0ZXJhdG9yLm5leHQoKSkge1xuICAgICAgICAgIG5ld0NvbnRleHQucHVzaChpdC52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29udGV4dCA9IG5ld0NvbnRleHQ7XG4gICAgICAgIGZvciAodmFyIGogPSBjb250ZXh0Lmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgICAgIGV4ZWNJdGVyYXRpb24oaSwgaSwgaSA9PT0gY29udGV4dC5sZW5ndGggLSAxKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgcHJpb3JLZXkgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBPYmplY3Qua2V5cyhjb250ZXh0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIC8vIFdlJ3JlIHJ1bm5pbmcgdGhlIGl0ZXJhdGlvbnMgb25lIHN0ZXAgb3V0IG9mIHN5bmMgc28gd2UgY2FuIGRldGVjdFxuICAgICAgICAgICAgLy8gdGhlIGxhc3QgaXRlcmF0aW9uIHdpdGhvdXQgaGF2ZSB0byBzY2FuIHRoZSBvYmplY3QgdHdpY2UgYW5kIGNyZWF0ZVxuICAgICAgICAgICAgLy8gYW4gaXRlcm1lZGlhdGUga2V5cyBhcnJheS5cbiAgICAgICAgICAgIGlmIChwcmlvcktleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGV4ZWNJdGVyYXRpb24ocHJpb3JLZXksIGkgLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByaW9yS2V5ID0ga2V5O1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmIChwcmlvcktleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBleGVjSXRlcmF0aW9uKHByaW9yS2V5LCBpIC0gMSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpID09PSAwKSB7XG4gICAgICByZXQgPSBpbnZlcnNlKHRoaXMpO1xuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMMmhsYkhCbGNuTXZaV0ZqYUM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3TzNGQ1FVMVBMRlZCUVZVN08zbENRVU5MTEdOQlFXTTdPenM3Y1VKQlJYSkNMRlZCUVZNc1VVRkJVU3hGUVVGRk8wRkJRMmhETEZWQlFWRXNRMEZCUXl4alFVRmpMRU5CUVVNc1RVRkJUU3hGUVVGRkxGVkJRVk1zVDBGQlR5eEZRVUZGTEU5QlFVOHNSVUZCUlR0QlFVTjZSQ3hSUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTzBGQlExb3NXVUZCVFN3eVFrRkJZeXcyUWtGQk5rSXNRMEZCUXl4RFFVRkRPMHRCUTNCRU96dEJRVVZFTEZGQlFVa3NSVUZCUlN4SFFVRkhMRTlCUVU4c1EwRkJReXhGUVVGRk8xRkJRMnBDTEU5QlFVOHNSMEZCUnl4UFFVRlBMRU5CUVVNc1QwRkJUenRSUVVONlFpeERRVUZETEVkQlFVY3NRMEZCUXp0UlFVTk1MRWRCUVVjc1IwRkJSeXhGUVVGRk8xRkJRMUlzU1VGQlNTeFpRVUZCTzFGQlEwb3NWMEZCVnl4WlFVRkJMRU5CUVVNN08wRkJSV1FzVVVGQlNTeFBRVUZQTEVOQlFVTXNTVUZCU1N4SlFVRkpMRTlCUVU4c1EwRkJReXhIUVVGSExFVkJRVVU3UVVGREwwSXNhVUpCUVZjc1IwRkRWQ3g1UWtGQmEwSXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFVkJRVVVzVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFZEJRVWNzUTBGQlF6dExRVU55UlRzN1FVRkZSQ3hSUVVGSkxHdENRVUZYTEU5QlFVOHNRMEZCUXl4RlFVRkZPMEZCUTNaQ0xHRkJRVThzUjBGQlJ5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wdEJRemxDT3p0QlFVVkVMRkZCUVVrc1QwRkJUeXhEUVVGRExFbEJRVWtzUlVGQlJUdEJRVU5vUWl4VlFVRkpMRWRCUVVjc2JVSkJRVmtzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMHRCUTJ4RE96dEJRVVZFTEdGQlFWTXNZVUZCWVN4RFFVRkRMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzU1VGQlNTeEZRVUZGTzBGQlEzcERMRlZCUVVrc1NVRkJTU3hGUVVGRk8wRkJRMUlzV1VGQlNTeERRVUZETEVkQlFVY3NSMEZCUnl4TFFVRkxMRU5CUVVNN1FVRkRha0lzV1VGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNN1FVRkRia0lzV1VGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4TFFVRkxMRXRCUVVzc1EwRkJReXhEUVVGRE8wRkJRM3BDTEZsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF6czdRVUZGYmtJc1dVRkJTU3hYUVVGWExFVkJRVVU3UVVGRFppeGpRVUZKTEVOQlFVTXNWMEZCVnl4SFFVRkhMRmRCUVZjc1IwRkJSeXhMUVVGTExFTkJRVU03VTBGRGVFTTdUMEZEUmpzN1FVRkZSQ3hUUVVGSExFZEJRMFFzUjBGQlJ5eEhRVU5JTEVWQlFVVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExFVkJRVVU3UVVGRGFrSXNXVUZCU1N4RlFVRkZMRWxCUVVrN1FVRkRWaXh0UWtGQlZ5eEZRVUZGTEcxQ1FVTllMRU5CUVVNc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RlFVTjJRaXhEUVVGRExGZEJRVmNzUjBGQlJ5eExRVUZMTEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUXpWQ08wOUJRMFlzUTBGQlF5eERRVUZETzB0QlEwNDdPMEZCUlVRc1VVRkJTU3hQUVVGUExFbEJRVWtzVDBGQlR5eFBRVUZQTEV0QlFVc3NVVUZCVVN4RlFVRkZPMEZCUXpGRExGVkJRVWtzWlVGQlVTeFBRVUZQTEVOQlFVTXNSVUZCUlR0QlFVTndRaXhoUVVGTExFbEJRVWtzUTBGQlF5eEhRVUZITEU5QlFVOHNRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlR0QlFVTjJReXhqUVVGSkxFTkJRVU1zU1VGQlNTeFBRVUZQTEVWQlFVVTdRVUZEYUVJc2VVSkJRV0VzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1MwRkJTeXhQUVVGUExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMWRCUXk5RE8xTkJRMFk3VDBGRFJpeE5RVUZOTEVsQlFVa3NUMEZCVHl4TlFVRk5MRXRCUVVzc1ZVRkJWU3hKUVVGSkxFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRVZCUVVVN1FVRkRia1VzV1VGQlRTeFZRVUZWTEVkQlFVY3NSVUZCUlN4RFFVRkRPMEZCUTNSQ0xGbEJRVTBzVVVGQlVTeEhRVUZITEU5QlFVOHNRMEZCUXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFVkJRVVVzUTBGQlF6dEJRVU0xUXl4aFFVRkxMRWxCUVVrc1JVRkJSU3hIUVVGSExGRkJRVkVzUTBGQlF5eEpRVUZKTEVWQlFVVXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhKUVVGSkxFVkJRVVVzUlVGQlJTeEhRVUZITEZGQlFWRXNRMEZCUXl4SlFVRkpMRVZCUVVVc1JVRkJSVHRCUVVNM1JDeHZRa0ZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdVMEZETTBJN1FVRkRSQ3hsUVVGUExFZEJRVWNzVlVGQlZTeERRVUZETzBGQlEzSkNMR0ZCUVVzc1NVRkJTU3hEUVVGRExFZEJRVWNzVDBGQlR5eERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeEZRVUZGTzBGQlEzWkRMSFZDUVVGaExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRXRCUVVzc1QwRkJUeXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0VFFVTXZRenRQUVVOR0xFMUJRVTA3TzBGQlEwd3NZMEZCU1N4UlFVRlJMRmxCUVVFc1EwRkJRenM3UVVGRllpeG5Ra0ZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCUVN4SFFVRkhMRVZCUVVrN096czdRVUZKYkVNc1owSkJRVWtzVVVGQlVTeExRVUZMTEZOQlFWTXNSVUZCUlR0QlFVTXhRaXd5UWtGQllTeERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU03WVVGRGFFTTdRVUZEUkN4dlFrRkJVU3hIUVVGSExFZEJRVWNzUTBGQlF6dEJRVU5tTEdGQlFVTXNSVUZCUlN4RFFVRkRPMWRCUTB3c1EwRkJReXhEUVVGRE8wRkJRMGdzWTBGQlNTeFJRVUZSTEV0QlFVc3NVMEZCVXl4RlFVRkZPMEZCUXpGQ0xIbENRVUZoTEVOQlFVTXNVVUZCVVN4RlFVRkZMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdWMEZEZEVNN08wOUJRMFk3UzBGRFJqczdRVUZGUkN4UlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFVkJRVVU3UVVGRFdDeFRRVUZITEVkQlFVY3NUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wdEJRM0pDT3p0QlFVVkVMRmRCUVU4c1IwRkJSeXhEUVVGRE8wZEJRMW9zUTBGQlF5eERRVUZETzBOQlEwb2lMQ0ptYVd4bElqb2laV0ZqYUM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQjdYRzRnSUdGd2NHVnVaRU52Ym5SbGVIUlFZWFJvTEZ4dUlDQmliRzlqYTFCaGNtRnRjeXhjYmlBZ1kzSmxZWFJsUm5KaGJXVXNYRzRnSUdselFYSnlZWGtzWEc0Z0lHbHpSblZ1WTNScGIyNWNibjBnWm5KdmJTQW5MaTR2ZFhScGJITW5PMXh1YVcxd2IzSjBJRVY0WTJWd2RHbHZiaUJtY205dElDY3VMaTlsZUdObGNIUnBiMjRuTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCbWRXNWpkR2x2YmlocGJuTjBZVzVqWlNrZ2UxeHVJQ0JwYm5OMFlXNWpaUzV5WldkcGMzUmxja2hsYkhCbGNpZ25aV0ZqYUNjc0lHWjFibU4wYVc5dUtHTnZiblJsZUhRc0lHOXdkR2x2Ym5NcElIdGNiaUFnSUNCcFppQW9JVzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGZUdObGNIUnBiMjRvSjAxMWMzUWdjR0Z6Y3lCcGRHVnlZWFJ2Y2lCMGJ5QWpaV0ZqYUNjcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUd4bGRDQm1iaUE5SUc5d2RHbHZibk11Wm00c1hHNGdJQ0FnSUNCcGJuWmxjbk5sSUQwZ2IzQjBhVzl1Y3k1cGJuWmxjbk5sTEZ4dUlDQWdJQ0FnYVNBOUlEQXNYRzRnSUNBZ0lDQnlaWFFnUFNBbkp5eGNiaUFnSUNBZ0lHUmhkR0VzWEc0Z0lDQWdJQ0JqYjI1MFpYaDBVR0YwYUR0Y2JseHVJQ0FnSUdsbUlDaHZjSFJwYjI1ekxtUmhkR0VnSmlZZ2IzQjBhVzl1Y3k1cFpITXBJSHRjYmlBZ0lDQWdJR052Ym5SbGVIUlFZWFJvSUQxY2JpQWdJQ0FnSUNBZ1lYQndaVzVrUTI5dWRHVjRkRkJoZEdnb2IzQjBhVzl1Y3k1a1lYUmhMbU52Ym5SbGVIUlFZWFJvTENCdmNIUnBiMjV6TG1sa2Mxc3dYU2tnS3lBbkxpYzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLR2x6Um5WdVkzUnBiMjRvWTI5dWRHVjRkQ2twSUh0Y2JpQWdJQ0FnSUdOdmJuUmxlSFFnUFNCamIyNTBaWGgwTG1OaGJHd29kR2hwY3lrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHOXdkR2x2Ym5NdVpHRjBZU2tnZTF4dUlDQWdJQ0FnWkdGMFlTQTlJR055WldGMFpVWnlZVzFsS0c5d2RHbHZibk11WkdGMFlTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1puVnVZM1JwYjI0Z1pYaGxZMGwwWlhKaGRHbHZiaWhtYVdWc1pDd2dhVzVrWlhnc0lHeGhjM1FwSUh0Y2JpQWdJQ0FnSUdsbUlDaGtZWFJoS1NCN1hHNGdJQ0FnSUNBZ0lHUmhkR0V1YTJWNUlEMGdabWxsYkdRN1hHNGdJQ0FnSUNBZ0lHUmhkR0V1YVc1a1pYZ2dQU0JwYm1SbGVEdGNiaUFnSUNBZ0lDQWdaR0YwWVM1bWFYSnpkQ0E5SUdsdVpHVjRJRDA5UFNBd08xeHVJQ0FnSUNBZ0lDQmtZWFJoTG14aGMzUWdQU0FoSVd4aGMzUTdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHTnZiblJsZUhSUVlYUm9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ1pHRjBZUzVqYjI1MFpYaDBVR0YwYUNBOUlHTnZiblJsZUhSUVlYUm9JQ3NnWm1sbGJHUTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnY21WMElEMWNiaUFnSUNBZ0lDQWdjbVYwSUN0Y2JpQWdJQ0FnSUNBZ1ptNG9ZMjl1ZEdWNGRGdG1hV1ZzWkYwc0lIdGNiaUFnSUNBZ0lDQWdJQ0JrWVhSaE9pQmtZWFJoTEZ4dUlDQWdJQ0FnSUNBZ0lHSnNiMk5yVUdGeVlXMXpPaUJpYkc5amExQmhjbUZ0Y3loY2JpQWdJQ0FnSUNBZ0lDQWdJRnRqYjI1MFpYaDBXMlpwWld4a1hTd2dabWxsYkdSZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnVzJOdmJuUmxlSFJRWVhSb0lDc2dabWxsYkdRc0lHNTFiR3hkWEc0Z0lDQWdJQ0FnSUNBZ0tWeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvWTI5dWRHVjRkQ0FtSmlCMGVYQmxiMllnWTI5dWRHVjRkQ0E5UFQwZ0oyOWlhbVZqZENjcElIdGNiaUFnSUNBZ0lHbG1JQ2hwYzBGeWNtRjVLR052Ym5SbGVIUXBLU0I3WEc0Z0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdvZ1BTQmpiMjUwWlhoMExteGxibWQwYURzZ2FTQThJR283SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHBJR2x1SUdOdmJuUmxlSFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1Y0WldOSmRHVnlZWFJwYjI0b2FTd2dhU3dnYVNBOVBUMGdZMjl1ZEdWNGRDNXNaVzVuZEdnZ0xTQXhLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9kSGx3Wlc5bUlGTjViV0p2YkNBOVBUMGdKMloxYm1OMGFXOXVKeUFtSmlCamIyNTBaWGgwVzFONWJXSnZiQzVwZEdWeVlYUnZjbDBwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYm1WM1EyOXVkR1Y0ZENBOUlGdGRPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnBkR1Z5WVhSdmNpQTlJR052Ym5SbGVIUmJVM2x0WW05c0xtbDBaWEpoZEc5eVhTZ3BPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwZENBOUlHbDBaWEpoZEc5eUxtNWxlSFFvS1RzZ0lXbDBMbVJ2Ym1VN0lHbDBJRDBnYVhSbGNtRjBiM0l1Ym1WNGRDZ3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2JtVjNRMjl1ZEdWNGRDNXdkWE5vS0dsMExuWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmpiMjUwWlhoMElEMGdibVYzUTI5dWRHVjRkRHRjYmlBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYWlBOUlHTnZiblJsZUhRdWJHVnVaM1JvT3lCcElEd2dhanNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnWlhobFkwbDBaWEpoZEdsdmJpaHBMQ0JwTENCcElEMDlQU0JqYjI1MFpYaDBMbXhsYm1kMGFDQXRJREVwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCc1pYUWdjSEpwYjNKTFpYazdYRzVjYmlBZ0lDQWdJQ0FnVDJKcVpXTjBMbXRsZVhNb1kyOXVkR1Y0ZENrdVptOXlSV0ZqYUNoclpYa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZJRmRsSjNKbElISjFibTVwYm1jZ2RHaGxJR2wwWlhKaGRHbHZibk1nYjI1bElITjBaWEFnYjNWMElHOW1JSE41Ym1NZ2MyOGdkMlVnWTJGdUlHUmxkR1ZqZEZ4dUlDQWdJQ0FnSUNBZ0lDOHZJSFJvWlNCc1lYTjBJR2wwWlhKaGRHbHZiaUIzYVhSb2IzVjBJR2hoZG1VZ2RHOGdjMk5oYmlCMGFHVWdiMkpxWldOMElIUjNhV05sSUdGdVpDQmpjbVZoZEdWY2JpQWdJQ0FnSUNBZ0lDQXZMeUJoYmlCcGRHVnliV1ZrYVdGMFpTQnJaWGx6SUdGeWNtRjVMbHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHdjbWx2Y2t0bGVTQWhQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsZUdWalNYUmxjbUYwYVc5dUtIQnlhVzl5UzJWNUxDQnBJQzBnTVNrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUhCeWFXOXlTMlY1SUQwZ2EyVjVPMXh1SUNBZ0lDQWdJQ0FnSUdrckt6dGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaHdjbWx2Y2t0bGVTQWhQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdaWGhsWTBsMFpYSmhkR2x2Ymlod2NtbHZja3RsZVN3Z2FTQXRJREVzSUhSeWRXVXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0drZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUhKbGRDQTlJR2x1ZG1WeWMyVW9kR2hwY3lrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJSEpsZER0Y2JpQWdmU2s3WEc1OVhHNGlYWDA9XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG4vLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfZXhjZXB0aW9uID0gcmVxdWlyZSgnLi4vZXhjZXB0aW9uJyk7XG5cbnZhciBfZXhjZXB0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4Y2VwdGlvbik7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignaGVscGVyTWlzc2luZycsIGZ1bmN0aW9uICgpIC8qIFthcmdzLCBdb3B0aW9ucyAqL3tcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgLy8gQSBtaXNzaW5nIGZpZWxkIGluIGEge3tmb299fSBjb25zdHJ1Y3QuXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTb21lb25lIGlzIGFjdHVhbGx5IHRyeWluZyB0byBjYWxsIHNvbWV0aGluZywgYmxvdyB1cC5cbiAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdNaXNzaW5nIGhlbHBlcjogXCInICsgYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXS5uYW1lICsgJ1wiJyk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDJobGJIQmxjbk12YUdWc2NHVnlMVzFwYzNOcGJtY3Vhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096dDVRa0ZCYzBJc1kwRkJZenM3T3p0eFFrRkZja0lzVlVGQlV5eFJRVUZSTEVWQlFVVTdRVUZEYUVNc1ZVRkJVU3hEUVVGRExHTkJRV01zUTBGQlF5eGxRVUZsTEVWQlFVVXNhVU5CUVdkRE8wRkJRM1pGTEZGQlFVa3NVMEZCVXl4RFFVRkRMRTFCUVUwc1MwRkJTeXhEUVVGRExFVkJRVVU3TzBGQlJURkNMR0ZCUVU4c1UwRkJVeXhEUVVGRE8wdEJRMnhDTEUxQlFVMDdPMEZCUlV3c1dVRkJUU3d5UWtGRFNpeHRRa0ZCYlVJc1IwRkJSeXhUUVVGVExFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFZEJRVWNzUjBGQlJ5eERRVU5xUlN4RFFVRkRPMHRCUTBnN1IwRkRSaXhEUVVGRExFTkJRVU03UTBGRFNpSXNJbVpwYkdVaU9pSm9aV3h3WlhJdGJXbHpjMmx1Wnk1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQkZlR05sY0hScGIyNGdabkp2YlNBbkxpNHZaWGhqWlhCMGFXOXVKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRvYVc1emRHRnVZMlVwSUh0Y2JpQWdhVzV6ZEdGdVkyVXVjbVZuYVhOMFpYSklaV3h3WlhJb0oyaGxiSEJsY2sxcGMzTnBibWNuTENCbWRXNWpkR2x2YmlndktpQmJZWEpuY3l3Z1hXOXdkR2x2Ym5NZ0tpOHBJSHRjYmlBZ0lDQnBaaUFvWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0E5UFQwZ01Ta2dlMXh1SUNBZ0lDQWdMeThnUVNCdGFYTnphVzVuSUdacFpXeGtJR2x1SUdFZ2UzdG1iMjk5ZlNCamIyNXpkSEoxWTNRdVhHNGdJQ0FnSUNCeVpYUjFjbTRnZFc1a1pXWnBibVZrTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQXZMeUJUYjIxbGIyNWxJR2x6SUdGamRIVmhiR3g1SUhSeWVXbHVaeUIwYnlCallXeHNJSE52YldWMGFHbHVaeXdnWW14dmR5QjFjQzVjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGZUdObGNIUnBiMjRvWEc0Z0lDQWdJQ0FnSUNkTmFYTnphVzVuSUdobGJIQmxjam9nWENJbklDc2dZWEpuZFcxbGJuUnpXMkZ5WjNWdFpXNTBjeTVzWlc1bmRHZ2dMU0F4WFM1dVlXMWxJQ3NnSjF3aUoxeHVJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNGdJSDBwTzF4dWZWeHVJbDE5XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG4vLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG52YXIgX2V4Y2VwdGlvbiA9IHJlcXVpcmUoJy4uL2V4Y2VwdGlvbicpO1xuXG52YXIgX2V4Y2VwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGNlcHRpb24pO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2lmJywgZnVuY3Rpb24gKGNvbmRpdGlvbmFsLCBvcHRpb25zKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT0gMikge1xuICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJyNpZiByZXF1aXJlcyBleGFjdGx5IG9uZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgICBpZiAoX3V0aWxzLmlzRnVuY3Rpb24oY29uZGl0aW9uYWwpKSB7XG4gICAgICBjb25kaXRpb25hbCA9IGNvbmRpdGlvbmFsLmNhbGwodGhpcyk7XG4gICAgfVxuXG4gICAgLy8gRGVmYXVsdCBiZWhhdmlvciBpcyB0byByZW5kZXIgdGhlIHBvc2l0aXZlIHBhdGggaWYgdGhlIHZhbHVlIGlzIHRydXRoeSBhbmQgbm90IGVtcHR5LlxuICAgIC8vIFRoZSBgaW5jbHVkZVplcm9gIG9wdGlvbiBtYXkgYmUgc2V0IHRvIHRyZWF0IHRoZSBjb25kdGlvbmFsIGFzIHB1cmVseSBub3QgZW1wdHkgYmFzZWQgb24gdGhlXG4gICAgLy8gYmVoYXZpb3Igb2YgaXNFbXB0eS4gRWZmZWN0aXZlbHkgdGhpcyBkZXRlcm1pbmVzIGlmIDAgaXMgaGFuZGxlZCBieSB0aGUgcG9zaXRpdmUgcGF0aCBvciBuZWdhdGl2ZS5cbiAgICBpZiAoIW9wdGlvbnMuaGFzaC5pbmNsdWRlWmVybyAmJiAhY29uZGl0aW9uYWwgfHwgX3V0aWxzLmlzRW1wdHkoY29uZGl0aW9uYWwpKSB7XG4gICAgICByZXR1cm4gb3B0aW9ucy5pbnZlcnNlKHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb3B0aW9ucy5mbih0aGlzKTtcbiAgICB9XG4gIH0pO1xuXG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCd1bmxlc3MnLCBmdW5jdGlvbiAoY29uZGl0aW9uYWwsIG9wdGlvbnMpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPSAyKSB7XG4gICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnI3VubGVzcyByZXF1aXJlcyBleGFjdGx5IG9uZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgICByZXR1cm4gaW5zdGFuY2UuaGVscGVyc1snaWYnXS5jYWxsKHRoaXMsIGNvbmRpdGlvbmFsLCB7XG4gICAgICBmbjogb3B0aW9ucy5pbnZlcnNlLFxuICAgICAgaW52ZXJzZTogb3B0aW9ucy5mbixcbiAgICAgIGhhc2g6IG9wdGlvbnMuaGFzaFxuICAgIH0pO1xuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDJobGJIQmxjbk12YVdZdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3p0eFFrRkJiME1zVlVGQlZUczdlVUpCUTNoQ0xHTkJRV003T3pzN2NVSkJSWEpDTEZWQlFWTXNVVUZCVVN4RlFVRkZPMEZCUTJoRExGVkJRVkVzUTBGQlF5eGpRVUZqTEVOQlFVTXNTVUZCU1N4RlFVRkZMRlZCUVZNc1YwRkJWeXhGUVVGRkxFOUJRVThzUlVGQlJUdEJRVU16UkN4UlFVRkpMRk5CUVZNc1EwRkJReXhOUVVGTkxFbEJRVWtzUTBGQlF5eEZRVUZGTzBGQlEzcENMRmxCUVUwc01rSkJRV01zYlVOQlFXMURMRU5CUVVNc1EwRkJRenRMUVVNeFJEdEJRVU5FTEZGQlFVa3NhMEpCUVZjc1YwRkJWeXhEUVVGRExFVkJRVVU3UVVGRE0wSXNhVUpCUVZjc1IwRkJSeXhYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMHRCUTNSRE96czdPenRCUVV0RUxGRkJRVWtzUVVGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhKUVVGSkxFTkJRVU1zVjBGQlZ5eEpRVUZMTEdWQlFWRXNWMEZCVnl4RFFVRkRMRVZCUVVVN1FVRkRka1VzWVVGQlR5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wdEJRemxDTEUxQlFVMDdRVUZEVEN4aFFVRlBMRTlCUVU4c1EwRkJReXhGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdTMEZEZWtJN1IwRkRSaXhEUVVGRExFTkJRVU03TzBGQlJVZ3NWVUZCVVN4RFFVRkRMR05CUVdNc1EwRkJReXhSUVVGUkxFVkJRVVVzVlVGQlV5eFhRVUZYTEVWQlFVVXNUMEZCVHl4RlFVRkZPMEZCUXk5RUxGRkJRVWtzVTBGQlV5eERRVUZETEUxQlFVMHNTVUZCU1N4RFFVRkRMRVZCUVVVN1FVRkRla0lzV1VGQlRTd3lRa0ZCWXl4MVEwRkJkVU1zUTBGQlF5eERRVUZETzB0QlF6bEVPMEZCUTBRc1YwRkJUeXhSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzVjBGQlZ5eEZRVUZGTzBGQlEzQkVMRkZCUVVVc1JVRkJSU3hQUVVGUExFTkJRVU1zVDBGQlR6dEJRVU51UWl4aFFVRlBMRVZCUVVVc1QwRkJUeXhEUVVGRExFVkJRVVU3UVVGRGJrSXNWVUZCU1N4RlFVRkZMRTlCUVU4c1EwRkJReXhKUVVGSk8wdEJRMjVDTEVOQlFVTXNRMEZCUXp0SFFVTktMRU5CUVVNc1EwRkJRenREUVVOS0lpd2labWxzWlNJNkltbG1MbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUhzZ2FYTkZiWEIwZVN3Z2FYTkdkVzVqZEdsdmJpQjlJR1p5YjIwZ0p5NHVMM1YwYVd4ekp6dGNibWx0Y0c5eWRDQkZlR05sY0hScGIyNGdabkp2YlNBbkxpNHZaWGhqWlhCMGFXOXVKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRvYVc1emRHRnVZMlVwSUh0Y2JpQWdhVzV6ZEdGdVkyVXVjbVZuYVhOMFpYSklaV3h3WlhJb0oybG1KeXdnWm5WdVkzUnBiMjRvWTI5dVpHbDBhVzl1WVd3c0lHOXdkR2x2Ym5NcElIdGNiaUFnSUNCcFppQW9ZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQWhQU0F5S1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYaGpaWEIwYVc5dUtDY2phV1lnY21WeGRXbHlaWE1nWlhoaFkzUnNlU0J2Ym1VZ1lYSm5kVzFsYm5RbktUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tHbHpSblZ1WTNScGIyNG9ZMjl1WkdsMGFXOXVZV3dwS1NCN1hHNGdJQ0FnSUNCamIyNWthWFJwYjI1aGJDQTlJR052Ym1ScGRHbHZibUZzTG1OaGJHd29kR2hwY3lrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1JHVm1ZWFZzZENCaVpXaGhkbWx2Y2lCcGN5QjBieUJ5Wlc1a1pYSWdkR2hsSUhCdmMybDBhWFpsSUhCaGRHZ2dhV1lnZEdobElIWmhiSFZsSUdseklIUnlkWFJvZVNCaGJtUWdibTkwSUdWdGNIUjVMbHh1SUNBZ0lDOHZJRlJvWlNCZ2FXNWpiSFZrWlZwbGNtOWdJRzl3ZEdsdmJpQnRZWGtnWW1VZ2MyVjBJSFJ2SUhSeVpXRjBJSFJvWlNCamIyNWtkR2x2Ym1Gc0lHRnpJSEIxY21Wc2VTQnViM1FnWlcxd2RIa2dZbUZ6WldRZ2IyNGdkR2hsWEc0Z0lDQWdMeThnWW1Wb1lYWnBiM0lnYjJZZ2FYTkZiWEIwZVM0Z1JXWm1aV04wYVhabGJIa2dkR2hwY3lCa1pYUmxjbTFwYm1WeklHbG1JREFnYVhNZ2FHRnVaR3hsWkNCaWVTQjBhR1VnY0c5emFYUnBkbVVnY0dGMGFDQnZjaUJ1WldkaGRHbDJaUzVjYmlBZ0lDQnBaaUFvS0NGdmNIUnBiMjV6TG1oaGMyZ3VhVzVqYkhWa1pWcGxjbThnSmlZZ0lXTnZibVJwZEdsdmJtRnNLU0I4ZkNCcGMwVnRjSFI1S0dOdmJtUnBkR2x2Ym1Gc0tTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHOXdkR2x2Ym5NdWFXNTJaWEp6WlNoMGFHbHpLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUc5d2RHbHZibk11Wm00b2RHaHBjeWs3WEc0Z0lDQWdmVnh1SUNCOUtUdGNibHh1SUNCcGJuTjBZVzVqWlM1eVpXZHBjM1JsY2tobGJIQmxjaWduZFc1c1pYTnpKeXdnWm5WdVkzUnBiMjRvWTI5dVpHbDBhVzl1WVd3c0lHOXdkR2x2Ym5NcElIdGNiaUFnSUNCcFppQW9ZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQWhQU0F5S1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYaGpaWEIwYVc5dUtDY2pkVzVzWlhOeklISmxjWFZwY21WeklHVjRZV04wYkhrZ2IyNWxJR0Z5WjNWdFpXNTBKeWs3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCcGJuTjBZVzVqWlM1b1pXeHdaWEp6V3lkcFppZGRMbU5oYkd3b2RHaHBjeXdnWTI5dVpHbDBhVzl1WVd3c0lIdGNiaUFnSUNBZ0lHWnVPaUJ2Y0hScGIyNXpMbWx1ZG1WeWMyVXNYRzRnSUNBZ0lDQnBiblpsY25ObE9pQnZjSFJwYjI1ekxtWnVMRnh1SUNBZ0lDQWdhR0Z6YURvZ2IzQjBhVzl1Y3k1b1lYTm9YRzRnSUNBZ2ZTazdYRzRnSUgwcE8xeHVmVnh1SWwxOVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2xvZycsIGZ1bmN0aW9uICgpIC8qIG1lc3NhZ2UsIG9wdGlvbnMgKi97XG4gICAgdmFyIGFyZ3MgPSBbdW5kZWZpbmVkXSxcbiAgICAgICAgb3B0aW9ucyA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICB9XG5cbiAgICB2YXIgbGV2ZWwgPSAxO1xuICAgIGlmIChvcHRpb25zLmhhc2gubGV2ZWwgIT0gbnVsbCkge1xuICAgICAgbGV2ZWwgPSBvcHRpb25zLmhhc2gubGV2ZWw7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5kYXRhLmxldmVsICE9IG51bGwpIHtcbiAgICAgIGxldmVsID0gb3B0aW9ucy5kYXRhLmxldmVsO1xuICAgIH1cbiAgICBhcmdzWzBdID0gbGV2ZWw7XG5cbiAgICBpbnN0YW5jZS5sb2cuYXBwbHkoaW5zdGFuY2UsIGFyZ3MpO1xuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDJobGJIQmxjbk12Ykc5bkxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3Y1VKQlFXVXNWVUZCVXl4UlFVRlJMRVZCUVVVN1FVRkRhRU1zVlVGQlVTeERRVUZETEdOQlFXTXNRMEZCUXl4TFFVRkxMRVZCUVVVc2EwTkJRV2xETzBGQlF6bEVMRkZCUVVrc1NVRkJTU3hIUVVGSExFTkJRVU1zVTBGQlV5eERRVUZETzFGQlEzQkNMRTlCUVU4c1IwRkJSeXhUUVVGVExFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVNMVF5eFRRVUZMTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzVTBGQlV5eERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVU3UVVGRE4wTXNWVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0TFFVTjZRanM3UVVGRlJDeFJRVUZKTEV0QlFVc3NSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRaQ3hSUVVGSkxFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4SlFVRkpMRWxCUVVrc1JVRkJSVHRCUVVNNVFpeFhRVUZMTEVkQlFVY3NUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU03UzBGRE5VSXNUVUZCVFN4SlFVRkpMRTlCUVU4c1EwRkJReXhKUVVGSkxFbEJRVWtzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRWxCUVVrc1NVRkJTU3hGUVVGRk8wRkJRM0pFTEZkQlFVc3NSMEZCUnl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF6dExRVU0xUWp0QlFVTkVMRkZCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eExRVUZMTEVOQlFVTTdPMEZCUldoQ0xGbEJRVkVzUTBGQlF5eEhRVUZITEUxQlFVRXNRMEZCV2l4UlFVRlJMRVZCUVZFc1NVRkJTU3hEUVVGRExFTkJRVU03UjBGRGRrSXNRMEZCUXl4RFFVRkRPME5CUTBvaUxDSm1hV3hsSWpvaWJHOW5MbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRvYVc1emRHRnVZMlVwSUh0Y2JpQWdhVzV6ZEdGdVkyVXVjbVZuYVhOMFpYSklaV3h3WlhJb0oyeHZaeWNzSUdaMWJtTjBhVzl1S0M4cUlHMWxjM05oWjJVc0lHOXdkR2x2Ym5NZ0tpOHBJSHRjYmlBZ0lDQnNaWFFnWVhKbmN5QTlJRnQxYm1SbFptbHVaV1JkTEZ4dUlDQWdJQ0FnYjNCMGFXOXVjeUE5SUdGeVozVnRaVzUwYzF0aGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUMwZ01WMDdYRzRnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQmhjbWQxYldWdWRITXViR1Z1WjNSb0lDMGdNVHNnYVNzcktTQjdYRzRnSUNBZ0lDQmhjbWR6TG5CMWMyZ29ZWEpuZFcxbGJuUnpXMmxkS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JzWlhRZ2JHVjJaV3dnUFNBeE8xeHVJQ0FnSUdsbUlDaHZjSFJwYjI1ekxtaGhjMmd1YkdWMlpXd2dJVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdiR1YyWld3Z1BTQnZjSFJwYjI1ekxtaGhjMmd1YkdWMlpXdzdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaHZjSFJwYjI1ekxtUmhkR0VnSmlZZ2IzQjBhVzl1Y3k1a1lYUmhMbXhsZG1Wc0lDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lHeGxkbVZzSUQwZ2IzQjBhVzl1Y3k1a1lYUmhMbXhsZG1Wc08xeHVJQ0FnSUgxY2JpQWdJQ0JoY21keld6QmRJRDBnYkdWMlpXdzdYRzVjYmlBZ0lDQnBibk4wWVc1alpTNXNiMmNvTGk0dVlYSm5jeWs3WEc0Z0lIMHBPMXh1ZlZ4dUlsMTlcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdsb29rdXAnLCBmdW5jdGlvbiAob2JqLCBmaWVsZCwgb3B0aW9ucykge1xuICAgIGlmICghb2JqKSB7XG4gICAgICAvLyBOb3RlIGZvciA1LjA6IENoYW5nZSB0byBcIm9iaiA9PSBudWxsXCIgaW4gNS4wXG4gICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgICByZXR1cm4gb3B0aW9ucy5sb29rdXBQcm9wZXJ0eShvYmosIGZpZWxkKTtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwyaGxiSEJsY25NdmJHOXZhM1Z3TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdjVUpCUVdVc1ZVRkJVeXhSUVVGUkxFVkJRVVU3UVVGRGFFTXNWVUZCVVN4RFFVRkRMR05CUVdNc1EwRkJReXhSUVVGUkxFVkJRVVVzVlVGQlV5eEhRVUZITEVWQlFVVXNTMEZCU3l4RlFVRkZMRTlCUVU4c1JVRkJSVHRCUVVNNVJDeFJRVUZKTEVOQlFVTXNSMEZCUnl4RlFVRkZPenRCUVVWU0xHRkJRVThzUjBGQlJ5eERRVUZETzB0QlExbzdRVUZEUkN4WFFVRlBMRTlCUVU4c1EwRkJReXhqUVVGakxFTkJRVU1zUjBGQlJ5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMGRCUXpORExFTkJRVU1zUTBGQlF6dERRVU5LSWl3aVptbHNaU0k2SW14dmIydDFjQzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1S0dsdWMzUmhibU5sS1NCN1hHNGdJR2x1YzNSaGJtTmxMbkpsWjJsemRHVnlTR1ZzY0dWeUtDZHNiMjlyZFhBbkxDQm1kVzVqZEdsdmJpaHZZbW9zSUdacFpXeGtMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lDQWdhV1lnS0NGdlltb3BJSHRjYmlBZ0lDQWdJQzh2SUU1dmRHVWdabTl5SURVdU1Eb2dRMmhoYm1kbElIUnZJRndpYjJKcUlEMDlJRzUxYkd4Y0lpQnBiaUExTGpCY2JpQWdJQ0FnSUhKbGRIVnliaUJ2WW1vN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnZjSFJwYjI1ekxteHZiMnQxY0ZCeWIzQmxjblI1S0c5aWFpd2dabWxsYkdRcE8xeHVJQ0I5S1R0Y2JuMWNiaUpkZlE9PVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuLy8gaXN0YW5idWwgaWdub3JlIG5leHRcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxudmFyIF9leGNlcHRpb24gPSByZXF1aXJlKCcuLi9leGNlcHRpb24nKTtcblxudmFyIF9leGNlcHRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhjZXB0aW9uKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCd3aXRoJywgZnVuY3Rpb24gKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPSAyKSB7XG4gICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnI3dpdGggcmVxdWlyZXMgZXhhY3RseSBvbmUgYXJndW1lbnQnKTtcbiAgICB9XG4gICAgaWYgKF91dGlscy5pc0Z1bmN0aW9uKGNvbnRleHQpKSB7XG4gICAgICBjb250ZXh0ID0gY29udGV4dC5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIHZhciBmbiA9IG9wdGlvbnMuZm47XG5cbiAgICBpZiAoIV91dGlscy5pc0VtcHR5KGNvbnRleHQpKSB7XG4gICAgICB2YXIgZGF0YSA9IG9wdGlvbnMuZGF0YTtcbiAgICAgIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5pZHMpIHtcbiAgICAgICAgZGF0YSA9IF91dGlscy5jcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgICAgICBkYXRhLmNvbnRleHRQYXRoID0gX3V0aWxzLmFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5pZHNbMF0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm4oY29udGV4dCwge1xuICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICBibG9ja1BhcmFtczogX3V0aWxzLmJsb2NrUGFyYW1zKFtjb250ZXh0XSwgW2RhdGEgJiYgZGF0YS5jb250ZXh0UGF0aF0pXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9wdGlvbnMuaW52ZXJzZSh0aGlzKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMMmhsYkhCbGNuTXZkMmwwYUM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3TzNGQ1FVMVBMRlZCUVZVN08zbENRVU5MTEdOQlFXTTdPenM3Y1VKQlJYSkNMRlZCUVZNc1VVRkJVU3hGUVVGRk8wRkJRMmhETEZWQlFWRXNRMEZCUXl4alFVRmpMRU5CUVVNc1RVRkJUU3hGUVVGRkxGVkJRVk1zVDBGQlR5eEZRVUZGTEU5QlFVOHNSVUZCUlR0QlFVTjZSQ3hSUVVGSkxGTkJRVk1zUTBGQlF5eE5RVUZOTEVsQlFVa3NRMEZCUXl4RlFVRkZPMEZCUTNwQ0xGbEJRVTBzTWtKQlFXTXNjVU5CUVhGRExFTkJRVU1zUTBGQlF6dExRVU0xUkR0QlFVTkVMRkZCUVVrc2EwSkJRVmNzVDBGQlR5eERRVUZETEVWQlFVVTdRVUZEZGtJc1lVRkJUeXhIUVVGSExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1MwRkRPVUk3TzBGQlJVUXNVVUZCU1N4RlFVRkZMRWRCUVVjc1QwRkJUeXhEUVVGRExFVkJRVVVzUTBGQlF6czdRVUZGY0VJc1VVRkJTU3hEUVVGRExHVkJRVkVzVDBGQlR5eERRVUZETEVWQlFVVTdRVUZEY2tJc1ZVRkJTU3hKUVVGSkxFZEJRVWNzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXp0QlFVTjRRaXhWUVVGSkxFOUJRVThzUTBGQlF5eEpRVUZKTEVsQlFVa3NUMEZCVHl4RFFVRkRMRWRCUVVjc1JVRkJSVHRCUVVNdlFpeFpRVUZKTEVkQlFVY3NiVUpCUVZrc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBGQlEycERMRmxCUVVrc1EwRkJReXhYUVVGWExFZEJRVWNzZVVKQlEycENMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eEZRVU40UWl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVU5tTEVOQlFVTTdUMEZEU0RzN1FVRkZSQ3hoUVVGUExFVkJRVVVzUTBGQlF5eFBRVUZQTEVWQlFVVTdRVUZEYWtJc1dVRkJTU3hGUVVGRkxFbEJRVWs3UVVGRFZpeHRRa0ZCVnl4RlFVRkZMRzFDUVVGWkxFTkJRVU1zVDBGQlR5eERRVUZETEVWQlFVVXNRMEZCUXl4SlFVRkpMRWxCUVVrc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETzA5QlEyaEZMRU5CUVVNc1EwRkJRenRMUVVOS0xFMUJRVTA3UVVGRFRDeGhRVUZQTEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UzBGRE9VSTdSMEZEUml4RFFVRkRMRU5CUVVNN1EwRkRTaUlzSW1acGJHVWlPaUozYVhSb0xtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVcxd2IzSjBJSHRjYmlBZ1lYQndaVzVrUTI5dWRHVjRkRkJoZEdnc1hHNGdJR0pzYjJOclVHRnlZVzF6TEZ4dUlDQmpjbVZoZEdWR2NtRnRaU3hjYmlBZ2FYTkZiWEIwZVN4Y2JpQWdhWE5HZFc1amRHbHZibHh1ZlNCbWNtOXRJQ2N1TGk5MWRHbHNjeWM3WEc1cGJYQnZjblFnUlhoalpYQjBhVzl1SUdaeWIyMGdKeTR1TDJWNFkyVndkR2x2YmljN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHWjFibU4wYVc5dUtHbHVjM1JoYm1ObEtTQjdYRzRnSUdsdWMzUmhibU5sTG5KbFoybHpkR1Z5U0dWc2NHVnlLQ2QzYVhSb0p5d2dablZ1WTNScGIyNG9ZMjl1ZEdWNGRDd2diM0IwYVc5dWN5a2dlMXh1SUNBZ0lHbG1JQ2hoY21kMWJXVnVkSE11YkdWdVozUm9JQ0U5SURJcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZlR05sY0hScGIyNG9KeU4zYVhSb0lISmxjWFZwY21WeklHVjRZV04wYkhrZ2IyNWxJR0Z5WjNWdFpXNTBKeWs3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2hwYzBaMWJtTjBhVzl1S0dOdmJuUmxlSFFwS1NCN1hHNGdJQ0FnSUNCamIyNTBaWGgwSUQwZ1kyOXVkR1Y0ZEM1allXeHNLSFJvYVhNcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUd4bGRDQm1iaUE5SUc5d2RHbHZibk11Wm00N1hHNWNiaUFnSUNCcFppQW9JV2x6Ulcxd2RIa29ZMjl1ZEdWNGRDa3BJSHRjYmlBZ0lDQWdJR3hsZENCa1lYUmhJRDBnYjNCMGFXOXVjeTVrWVhSaE8xeHVJQ0FnSUNBZ2FXWWdLRzl3ZEdsdmJuTXVaR0YwWVNBbUppQnZjSFJwYjI1ekxtbGtjeWtnZTF4dUlDQWdJQ0FnSUNCa1lYUmhJRDBnWTNKbFlYUmxSbkpoYldVb2IzQjBhVzl1Y3k1a1lYUmhLVHRjYmlBZ0lDQWdJQ0FnWkdGMFlTNWpiMjUwWlhoMFVHRjBhQ0E5SUdGd2NHVnVaRU52Ym5SbGVIUlFZWFJvS0Z4dUlDQWdJQ0FnSUNBZ0lHOXdkR2x2Ym5NdVpHRjBZUzVqYjI1MFpYaDBVR0YwYUN4Y2JpQWdJQ0FnSUNBZ0lDQnZjSFJwYjI1ekxtbGtjMXN3WFZ4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnlaWFIxY200Z1ptNG9ZMjl1ZEdWNGRDd2dlMXh1SUNBZ0lDQWdJQ0JrWVhSaE9pQmtZWFJoTEZ4dUlDQWdJQ0FnSUNCaWJHOWphMUJoY21GdGN6b2dZbXh2WTJ0UVlYSmhiWE1vVzJOdmJuUmxlSFJkTENCYlpHRjBZU0FtSmlCa1lYUmhMbU52Ym5SbGVIUlFZWFJvWFNsY2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdiM0IwYVc5dWN5NXBiblpsY25ObEtIUm9hWE1wTzF4dUlDQWdJSDFjYmlBZ2ZTazdYRzU5WEc0aVhYMD1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuY3JlYXRlTmV3TG9va3VwT2JqZWN0ID0gY3JlYXRlTmV3TG9va3VwT2JqZWN0O1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgb2JqZWN0IHdpdGggXCJudWxsXCItcHJvdG90eXBlIHRvIGF2b2lkIHRydXRoeSByZXN1bHRzIG9uIHByb3RvdHlwZSBwcm9wZXJ0aWVzLlxuICogVGhlIHJlc3VsdGluZyBvYmplY3QgY2FuIGJlIHVzZWQgd2l0aCBcIm9iamVjdFtwcm9wZXJ0eV1cIiB0byBjaGVjayBpZiBhIHByb3BlcnR5IGV4aXN0c1xuICogQHBhcmFtIHsuLi5vYmplY3R9IHNvdXJjZXMgYSB2YXJhcmdzIHBhcmFtZXRlciBvZiBzb3VyY2Ugb2JqZWN0cyB0aGF0IHdpbGwgYmUgbWVyZ2VkXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZU5ld0xvb2t1cE9iamVjdCgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHNvdXJjZXMgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBzb3VyY2VzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIF91dGlscy5leHRlbmQuYXBwbHkodW5kZWZpbmVkLCBbT2JqZWN0LmNyZWF0ZShudWxsKV0uY29uY2F0KHNvdXJjZXMpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwybHVkR1Z5Ym1Gc0wyTnlaV0YwWlMxdVpYY3RiRzl2YTNWd0xXOWlhbVZqZEM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdPenR4UWtGQmRVSXNWVUZCVlRzN096czdPenM3TzBGQlVURkNMRk5CUVZNc2NVSkJRWEZDTEVkQlFXRTdiME5CUVZRc1QwRkJUenRCUVVGUUxGZEJRVTg3T3p0QlFVTTVReXhUUVVGUExHZERRVUZQTEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVXNzVDBGQlR5eEZRVUZETEVOQlFVTTdRMEZEYUVRaUxDSm1hV3hsSWpvaVkzSmxZWFJsTFc1bGR5MXNiMjlyZFhBdGIySnFaV04wTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElIc2daWGgwWlc1a0lIMGdabkp2YlNBbkxpNHZkWFJwYkhNbk8xeHVYRzR2S2lwY2JpQXFJRU55WldGMFpTQmhJRzVsZHlCdlltcGxZM1FnZDJsMGFDQmNJbTUxYkd4Y0lpMXdjbTkwYjNSNWNHVWdkRzhnWVhadmFXUWdkSEoxZEdoNUlISmxjM1ZzZEhNZ2IyNGdjSEp2ZEc5MGVYQmxJSEJ5YjNCbGNuUnBaWE11WEc0Z0tpQlVhR1VnY21WemRXeDBhVzVuSUc5aWFtVmpkQ0JqWVc0Z1ltVWdkWE5sWkNCM2FYUm9JRndpYjJKcVpXTjBXM0J5YjNCbGNuUjVYVndpSUhSdklHTm9aV05ySUdsbUlHRWdjSEp2Y0dWeWRIa2daWGhwYzNSelhHNGdLaUJBY0dGeVlXMGdleTR1TG05aWFtVmpkSDBnYzI5MWNtTmxjeUJoSUhaaGNtRnlaM01nY0dGeVlXMWxkR1Z5SUc5bUlITnZkWEpqWlNCdlltcGxZM1J6SUhSb1lYUWdkMmxzYkNCaVpTQnRaWEpuWldSY2JpQXFJRUJ5WlhSMWNtNXpJSHR2WW1wbFkzUjlYRzRnS2k5Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCamNtVmhkR1ZPWlhkTWIyOXJkWEJQWW1wbFkzUW9MaTR1YzI5MWNtTmxjeWtnZTF4dUlDQnlaWFIxY200Z1pYaDBaVzVrS0U5aWFtVmpkQzVqY21WaGRHVW9iblZzYkNrc0lDNHVMbk52ZFhKalpYTXBPMXh1ZlZ4dUlsMTlcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuY3JlYXRlUHJvdG9BY2Nlc3NDb250cm9sID0gY3JlYXRlUHJvdG9BY2Nlc3NDb250cm9sO1xuZXhwb3J0cy5yZXN1bHRJc0FsbG93ZWQgPSByZXN1bHRJc0FsbG93ZWQ7XG5leHBvcnRzLnJlc2V0TG9nZ2VkUHJvcGVydGllcyA9IHJlc2V0TG9nZ2VkUHJvcGVydGllcztcbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF9jcmVhdGVOZXdMb29rdXBPYmplY3QgPSByZXF1aXJlKCcuL2NyZWF0ZS1uZXctbG9va3VwLW9iamVjdCcpO1xuXG52YXIgX2xvZ2dlciA9IHJlcXVpcmUoJy4uL2xvZ2dlcicpO1xuXG52YXIgX2xvZ2dlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb2dnZXIpO1xuXG52YXIgbG9nZ2VkUHJvcGVydGllcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbmZ1bmN0aW9uIGNyZWF0ZVByb3RvQWNjZXNzQ29udHJvbChydW50aW1lT3B0aW9ucykge1xuICB2YXIgZGVmYXVsdE1ldGhvZFdoaXRlTGlzdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGRlZmF1bHRNZXRob2RXaGl0ZUxpc3RbJ2NvbnN0cnVjdG9yJ10gPSBmYWxzZTtcbiAgZGVmYXVsdE1ldGhvZFdoaXRlTGlzdFsnX19kZWZpbmVHZXR0ZXJfXyddID0gZmFsc2U7XG4gIGRlZmF1bHRNZXRob2RXaGl0ZUxpc3RbJ19fZGVmaW5lU2V0dGVyX18nXSA9IGZhbHNlO1xuICBkZWZhdWx0TWV0aG9kV2hpdGVMaXN0WydfX2xvb2t1cEdldHRlcl9fJ10gPSBmYWxzZTtcblxuICB2YXIgZGVmYXVsdFByb3BlcnR5V2hpdGVMaXN0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvXG4gIGRlZmF1bHRQcm9wZXJ0eVdoaXRlTGlzdFsnX19wcm90b19fJ10gPSBmYWxzZTtcblxuICByZXR1cm4ge1xuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIHdoaXRlbGlzdDogX2NyZWF0ZU5ld0xvb2t1cE9iamVjdC5jcmVhdGVOZXdMb29rdXBPYmplY3QoZGVmYXVsdFByb3BlcnR5V2hpdGVMaXN0LCBydW50aW1lT3B0aW9ucy5hbGxvd2VkUHJvdG9Qcm9wZXJ0aWVzKSxcbiAgICAgIGRlZmF1bHRWYWx1ZTogcnVudGltZU9wdGlvbnMuYWxsb3dQcm90b1Byb3BlcnRpZXNCeURlZmF1bHRcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgIHdoaXRlbGlzdDogX2NyZWF0ZU5ld0xvb2t1cE9iamVjdC5jcmVhdGVOZXdMb29rdXBPYmplY3QoZGVmYXVsdE1ldGhvZFdoaXRlTGlzdCwgcnVudGltZU9wdGlvbnMuYWxsb3dlZFByb3RvTWV0aG9kcyksXG4gICAgICBkZWZhdWx0VmFsdWU6IHJ1bnRpbWVPcHRpb25zLmFsbG93UHJvdG9NZXRob2RzQnlEZWZhdWx0XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiByZXN1bHRJc0FsbG93ZWQocmVzdWx0LCBwcm90b0FjY2Vzc0NvbnRyb2wsIHByb3BlcnR5TmFtZSkge1xuICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBjaGVja1doaXRlTGlzdChwcm90b0FjY2Vzc0NvbnRyb2wubWV0aG9kcywgcHJvcGVydHlOYW1lKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY2hlY2tXaGl0ZUxpc3QocHJvdG9BY2Nlc3NDb250cm9sLnByb3BlcnRpZXMsIHByb3BlcnR5TmFtZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tXaGl0ZUxpc3QocHJvdG9BY2Nlc3NDb250cm9sRm9yVHlwZSwgcHJvcGVydHlOYW1lKSB7XG4gIGlmIChwcm90b0FjY2Vzc0NvbnRyb2xGb3JUeXBlLndoaXRlbGlzdFtwcm9wZXJ0eU5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcHJvdG9BY2Nlc3NDb250cm9sRm9yVHlwZS53aGl0ZWxpc3RbcHJvcGVydHlOYW1lXSA9PT0gdHJ1ZTtcbiAgfVxuICBpZiAocHJvdG9BY2Nlc3NDb250cm9sRm9yVHlwZS5kZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBwcm90b0FjY2Vzc0NvbnRyb2xGb3JUeXBlLmRlZmF1bHRWYWx1ZTtcbiAgfVxuICBsb2dVbmV4cGVjZWRQcm9wZXJ0eUFjY2Vzc09uY2UocHJvcGVydHlOYW1lKTtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBsb2dVbmV4cGVjZWRQcm9wZXJ0eUFjY2Vzc09uY2UocHJvcGVydHlOYW1lKSB7XG4gIGlmIChsb2dnZWRQcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV0gIT09IHRydWUpIHtcbiAgICBsb2dnZWRQcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV0gPSB0cnVlO1xuICAgIF9sb2dnZXIyWydkZWZhdWx0J10ubG9nKCdlcnJvcicsICdIYW5kbGViYXJzOiBBY2Nlc3MgaGFzIGJlZW4gZGVuaWVkIHRvIHJlc29sdmUgdGhlIHByb3BlcnR5IFwiJyArIHByb3BlcnR5TmFtZSArICdcIiBiZWNhdXNlIGl0IGlzIG5vdCBhbiBcIm93biBwcm9wZXJ0eVwiIG9mIGl0cyBwYXJlbnQuXFxuJyArICdZb3UgY2FuIGFkZCBhIHJ1bnRpbWUgb3B0aW9uIHRvIGRpc2FibGUgdGhlIGNoZWNrIG9yIHRoaXMgd2FybmluZzpcXG4nICsgJ1NlZSBodHRwczovL2hhbmRsZWJhcnNqcy5jb20vYXBpLXJlZmVyZW5jZS9ydW50aW1lLW9wdGlvbnMuaHRtbCNvcHRpb25zLXRvLWNvbnRyb2wtcHJvdG90eXBlLWFjY2VzcyBmb3IgZGV0YWlscycpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc2V0TG9nZ2VkUHJvcGVydGllcygpIHtcbiAgT2JqZWN0LmtleXMobG9nZ2VkUHJvcGVydGllcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcGVydHlOYW1lKSB7XG4gICAgZGVsZXRlIGxvZ2dlZFByb3BlcnRpZXNbcHJvcGVydHlOYW1lXTtcbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMMmx1ZEdWeWJtRnNMM0J5YjNSdkxXRmpZMlZ6Y3k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3T3pzN08zRkRRVUZ6UXl3MFFrRkJORUk3TzNOQ1FVTXZReXhYUVVGWE96czdPMEZCUlRsQ0xFbEJRVTBzWjBKQlFXZENMRWRCUVVjc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXpzN1FVRkZkRU1zVTBGQlV5eDNRa0ZCZDBJc1EwRkJReXhqUVVGakxFVkJRVVU3UVVGRGRrUXNUVUZCU1N4elFrRkJjMElzUjBGQlJ5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRMnBFTEhkQ1FVRnpRaXhEUVVGRExHRkJRV0VzUTBGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXp0QlFVTTVReXgzUWtGQmMwSXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXp0QlFVTnVSQ3gzUWtGQmMwSXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXp0QlFVTnVSQ3gzUWtGQmMwSXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXpzN1FVRkZia1FzVFVGQlNTeDNRa0ZCZDBJc1IwRkJSeXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPenRCUVVWdVJDd3dRa0ZCZDBJc1EwRkJReXhYUVVGWExFTkJRVU1zUjBGQlJ5eExRVUZMTEVOQlFVTTdPMEZCUlRsRExGTkJRVTg3UVVGRFRDeGpRVUZWTEVWQlFVVTdRVUZEVml4bFFVRlRMRVZCUVVVc05rTkJRMVFzZDBKQlFYZENMRVZCUTNoQ0xHTkJRV01zUTBGQlF5eHpRa0ZCYzBJc1EwRkRkRU03UVVGRFJDeHJRa0ZCV1N4RlFVRkZMR05CUVdNc1EwRkJReXcyUWtGQk5rSTdTMEZETTBRN1FVRkRSQ3hYUVVGUExFVkJRVVU3UVVGRFVDeGxRVUZUTEVWQlFVVXNOa05CUTFRc2MwSkJRWE5DTEVWQlEzUkNMR05CUVdNc1EwRkJReXh0UWtGQmJVSXNRMEZEYmtNN1FVRkRSQ3hyUWtGQldTeEZRVUZGTEdOQlFXTXNRMEZCUXl3d1FrRkJNRUk3UzBGRGVFUTdSMEZEUml4RFFVRkRPME5CUTBnN08wRkJSVTBzVTBGQlV5eGxRVUZsTEVOQlFVTXNUVUZCVFN4RlFVRkZMR3RDUVVGclFpeEZRVUZGTEZsQlFWa3NSVUZCUlR0QlFVTjRSU3hOUVVGSkxFOUJRVThzVFVGQlRTeExRVUZMTEZWQlFWVXNSVUZCUlR0QlFVTm9ReXhYUVVGUExHTkJRV01zUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhQUVVGUExFVkJRVVVzV1VGQldTeERRVUZETEVOQlFVTTdSMEZEYWtVc1RVRkJUVHRCUVVOTUxGZEJRVThzWTBGQll5eERRVUZETEd0Q1FVRnJRaXhEUVVGRExGVkJRVlVzUlVGQlJTeFpRVUZaTEVOQlFVTXNRMEZCUXp0SFFVTndSVHREUVVOR096dEJRVVZFTEZOQlFWTXNZMEZCWXl4RFFVRkRMSGxDUVVGNVFpeEZRVUZGTEZsQlFWa3NSVUZCUlR0QlFVTXZSQ3hOUVVGSkxIbENRVUY1UWl4RFFVRkRMRk5CUVZNc1EwRkJReXhaUVVGWkxFTkJRVU1zUzBGQlN5eFRRVUZUTEVWQlFVVTdRVUZEYmtVc1YwRkJUeXg1UWtGQmVVSXNRMEZCUXl4VFFVRlRMRU5CUVVNc1dVRkJXU3hEUVVGRExFdEJRVXNzU1VGQlNTeERRVUZETzBkQlEyNUZPMEZCUTBRc1RVRkJTU3g1UWtGQmVVSXNRMEZCUXl4WlFVRlpMRXRCUVVzc1UwRkJVeXhGUVVGRk8wRkJRM2hFTEZkQlFVOHNlVUpCUVhsQ0xFTkJRVU1zV1VGQldTeERRVUZETzBkQlF5OURPMEZCUTBRc1owTkJRVGhDTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNN1FVRkROME1zVTBGQlR5eExRVUZMTEVOQlFVTTdRMEZEWkRzN1FVRkZSQ3hUUVVGVExEaENRVUU0UWl4RFFVRkRMRmxCUVZrc1JVRkJSVHRCUVVOd1JDeE5RVUZKTEdkQ1FVRm5RaXhEUVVGRExGbEJRVmtzUTBGQlF5eExRVUZMTEVsQlFVa3NSVUZCUlR0QlFVTXpReXh2UWtGQlowSXNRMEZCUXl4WlFVRlpMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU03UVVGRGRFTXNkMEpCUVU4c1IwRkJSeXhEUVVOU0xFOUJRVThzUlVGRFVDeHBSVUZCSzBRc1dVRkJXU3h2U1VGRFNDeHZTRUZETWtNc1EwRkRjRWdzUTBGQlF6dEhRVU5JTzBOQlEwWTdPMEZCUlUwc1UwRkJVeXh4UWtGQmNVSXNSMEZCUnp0QlFVTjBReXhSUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVRXNXVUZCV1N4RlFVRkpPMEZCUTNCRUxGZEJRVThzWjBKQlFXZENMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU03UjBGRGRrTXNRMEZCUXl4RFFVRkRPME5CUTBvaUxDSm1hV3hsSWpvaWNISnZkRzh0WVdOalpYTnpMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUhzZ1kzSmxZWFJsVG1WM1RHOXZhM1Z3VDJKcVpXTjBJSDBnWm5KdmJTQW5MaTlqY21WaGRHVXRibVYzTFd4dmIydDFjQzF2WW1wbFkzUW5PMXh1YVcxd2IzSjBJR3h2WjJkbGNpQm1jbTl0SUNjdUxpOXNiMmRuWlhJbk8xeHVYRzVqYjI1emRDQnNiMmRuWldSUWNtOXdaWEowYVdWeklEMGdUMkpxWldOMExtTnlaV0YwWlNodWRXeHNLVHRjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdOeVpXRjBaVkJ5YjNSdlFXTmpaWE56UTI5dWRISnZiQ2h5ZFc1MGFXMWxUM0IwYVc5dWN5a2dlMXh1SUNCc1pYUWdaR1ZtWVhWc2RFMWxkR2h2WkZkb2FYUmxUR2x6ZENBOUlFOWlhbVZqZEM1amNtVmhkR1VvYm5Wc2JDazdYRzRnSUdSbFptRjFiSFJOWlhSb2IyUlhhR2wwWlV4cGMzUmJKMk52Ym5OMGNuVmpkRzl5SjEwZ1BTQm1ZV3h6WlR0Y2JpQWdaR1ZtWVhWc2RFMWxkR2h2WkZkb2FYUmxUR2x6ZEZzblgxOWtaV1pwYm1WSFpYUjBaWEpmWHlkZElEMGdabUZzYzJVN1hHNGdJR1JsWm1GMWJIUk5aWFJvYjJSWGFHbDBaVXhwYzNSYkoxOWZaR1ZtYVc1bFUyVjBkR1Z5WDE4blhTQTlJR1poYkhObE8xeHVJQ0JrWldaaGRXeDBUV1YwYUc5a1YyaHBkR1ZNYVhOMFd5ZGZYMnh2YjJ0MWNFZGxkSFJsY2w5ZkoxMGdQU0JtWVd4elpUdGNibHh1SUNCc1pYUWdaR1ZtWVhWc2RGQnliM0JsY25SNVYyaHBkR1ZNYVhOMElEMGdUMkpxWldOMExtTnlaV0YwWlNodWRXeHNLVHRjYmlBZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElHNXZMWEJ5YjNSdlhHNGdJR1JsWm1GMWJIUlFjbTl3WlhKMGVWZG9hWFJsVEdsemRGc25YMTl3Y205MGIxOWZKMTBnUFNCbVlXeHpaVHRjYmx4dUlDQnlaWFIxY200Z2UxeHVJQ0FnSUhCeWIzQmxjblJwWlhNNklIdGNiaUFnSUNBZ0lIZG9hWFJsYkdsemREb2dZM0psWVhSbFRtVjNURzl2YTNWd1QySnFaV04wS0Z4dUlDQWdJQ0FnSUNCa1pXWmhkV3gwVUhKdmNHVnlkSGxYYUdsMFpVeHBjM1FzWEc0Z0lDQWdJQ0FnSUhKMWJuUnBiV1ZQY0hScGIyNXpMbUZzYkc5M1pXUlFjbTkwYjFCeWIzQmxjblJwWlhOY2JpQWdJQ0FnSUNrc1hHNGdJQ0FnSUNCa1pXWmhkV3gwVm1Gc2RXVTZJSEoxYm5ScGJXVlBjSFJwYjI1ekxtRnNiRzkzVUhKdmRHOVFjbTl3WlhKMGFXVnpRbmxFWldaaGRXeDBYRzRnSUNBZ2ZTeGNiaUFnSUNCdFpYUm9iMlJ6T2lCN1hHNGdJQ0FnSUNCM2FHbDBaV3hwYzNRNklHTnlaV0YwWlU1bGQweHZiMnQxY0U5aWFtVmpkQ2hjYmlBZ0lDQWdJQ0FnWkdWbVlYVnNkRTFsZEdodlpGZG9hWFJsVEdsemRDeGNiaUFnSUNBZ0lDQWdjblZ1ZEdsdFpVOXdkR2x2Ym5NdVlXeHNiM2RsWkZCeWIzUnZUV1YwYUc5a2MxeHVJQ0FnSUNBZ0tTeGNiaUFnSUNBZ0lHUmxabUYxYkhSV1lXeDFaVG9nY25WdWRHbHRaVTl3ZEdsdmJuTXVZV3hzYjNkUWNtOTBiMDFsZEdodlpITkNlVVJsWm1GMWJIUmNiaUFnSUNCOVhHNGdJSDA3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnlaWE4xYkhSSmMwRnNiRzkzWldRb2NtVnpkV3gwTENCd2NtOTBiMEZqWTJWemMwTnZiblJ5YjJ3c0lIQnliM0JsY25SNVRtRnRaU2tnZTF4dUlDQnBaaUFvZEhsd1pXOW1JSEpsYzNWc2RDQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJqYUdWamExZG9hWFJsVEdsemRDaHdjbTkwYjBGalkyVnpjME52Ym5SeWIyd3ViV1YwYUc5a2N5d2djSEp2Y0dWeWRIbE9ZVzFsS1R0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNCeVpYUjFjbTRnWTJobFkydFhhR2wwWlV4cGMzUW9jSEp2ZEc5QlkyTmxjM05EYjI1MGNtOXNMbkJ5YjNCbGNuUnBaWE1zSUhCeWIzQmxjblI1VG1GdFpTazdYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnWTJobFkydFhhR2wwWlV4cGMzUW9jSEp2ZEc5QlkyTmxjM05EYjI1MGNtOXNSbTl5Vkhsd1pTd2djSEp2Y0dWeWRIbE9ZVzFsS1NCN1hHNGdJR2xtSUNod2NtOTBiMEZqWTJWemMwTnZiblJ5YjJ4R2IzSlVlWEJsTG5kb2FYUmxiR2x6ZEZ0d2NtOXdaWEowZVU1aGJXVmRJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNCeVpYUjFjbTRnY0hKdmRHOUJZMk5sYzNORGIyNTBjbTlzUm05eVZIbHdaUzUzYUdsMFpXeHBjM1JiY0hKdmNHVnlkSGxPWVcxbFhTQTlQVDBnZEhKMVpUdGNiaUFnZlZ4dUlDQnBaaUFvY0hKdmRHOUJZMk5sYzNORGIyNTBjbTlzUm05eVZIbHdaUzVrWldaaGRXeDBWbUZzZFdVZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQndjbTkwYjBGalkyVnpjME52Ym5SeWIyeEdiM0pVZVhCbExtUmxabUYxYkhSV1lXeDFaVHRjYmlBZ2ZWeHVJQ0JzYjJkVmJtVjRjR1ZqWldSUWNtOXdaWEowZVVGalkyVnpjMDl1WTJVb2NISnZjR1Z5ZEhsT1lXMWxLVHRjYmlBZ2NtVjBkWEp1SUdaaGJITmxPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnNiMmRWYm1WNGNHVmpaV1JRY205d1pYSjBlVUZqWTJWemMwOXVZMlVvY0hKdmNHVnlkSGxPWVcxbEtTQjdYRzRnSUdsbUlDaHNiMmRuWldSUWNtOXdaWEowYVdWelczQnliM0JsY25SNVRtRnRaVjBnSVQwOUlIUnlkV1VwSUh0Y2JpQWdJQ0JzYjJkblpXUlFjbTl3WlhKMGFXVnpXM0J5YjNCbGNuUjVUbUZ0WlYwZ1BTQjBjblZsTzF4dUlDQWdJR3h2WjJkbGNpNXNiMmNvWEc0Z0lDQWdJQ0FuWlhKeWIzSW5MRnh1SUNBZ0lDQWdZRWhoYm1Sc1pXSmhjbk02SUVGalkyVnpjeUJvWVhNZ1ltVmxiaUJrWlc1cFpXUWdkRzhnY21WemIyeDJaU0IwYUdVZ2NISnZjR1Z5ZEhrZ1hDSWtlM0J5YjNCbGNuUjVUbUZ0WlgxY0lpQmlaV05oZFhObElHbDBJR2x6SUc1dmRDQmhiaUJjSW05M2JpQndjbTl3WlhKMGVWd2lJRzltSUdsMGN5QndZWEpsYm5RdVhGeHVZQ0FyWEc0Z0lDQWdJQ0FnSUdCWmIzVWdZMkZ1SUdGa1pDQmhJSEoxYm5ScGJXVWdiM0IwYVc5dUlIUnZJR1JwYzJGaWJHVWdkR2hsSUdOb1pXTnJJRzl5SUhSb2FYTWdkMkZ5Ym1sdVp6cGNYRzVnSUN0Y2JpQWdJQ0FnSUNBZ1lGTmxaU0JvZEhSd2N6b3ZMMmhoYm1Sc1pXSmhjbk5xY3k1amIyMHZZWEJwTFhKbFptVnlaVzVqWlM5eWRXNTBhVzFsTFc5d2RHbHZibk11YUhSdGJDTnZjSFJwYjI1ekxYUnZMV052Ym5SeWIyd3RjSEp2ZEc5MGVYQmxMV0ZqWTJWemN5Qm1iM0lnWkdWMFlXbHNjMkJjYmlBZ0lDQXBPMXh1SUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJ5WlhObGRFeHZaMmRsWkZCeWIzQmxjblJwWlhNb0tTQjdYRzRnSUU5aWFtVmpkQzVyWlhsektHeHZaMmRsWkZCeWIzQmxjblJwWlhNcExtWnZja1ZoWTJnb2NISnZjR1Z5ZEhsT1lXMWxJRDArSUh0Y2JpQWdJQ0JrWld4bGRHVWdiRzluWjJWa1VISnZjR1Z5ZEdsbGMxdHdjbTl3WlhKMGVVNWhiV1ZkTzF4dUlDQjlLVHRjYm4xY2JpSmRmUT09XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLndyYXBIZWxwZXIgPSB3cmFwSGVscGVyO1xuXG5mdW5jdGlvbiB3cmFwSGVscGVyKGhlbHBlciwgdHJhbnNmb3JtT3B0aW9uc0ZuKSB7XG4gIGlmICh0eXBlb2YgaGVscGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gVGhpcyBzaG91bGQgbm90IGhhcHBlbiwgYnV0IGFwcGFyZW50bHkgaXQgZG9lcyBpbiBodHRwczovL2dpdGh1Yi5jb20vd3ljYXRzL2hhbmRsZWJhcnMuanMvaXNzdWVzLzE2MzlcbiAgICAvLyBXZSB0cnkgdG8gbWFrZSB0aGUgd3JhcHBlciBsZWFzdC1pbnZhc2l2ZSBieSBub3Qgd3JhcHBpbmcgaXQsIGlmIHRoZSBoZWxwZXIgaXMgbm90IGEgZnVuY3Rpb24uXG4gICAgcmV0dXJuIGhlbHBlcjtcbiAgfVxuICB2YXIgd3JhcHBlciA9IGZ1bmN0aW9uIHdyYXBwZXIoKSAvKiBkeW5hbWljIGFyZ3VtZW50cyAqL3tcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV07XG4gICAgYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXSA9IHRyYW5zZm9ybU9wdGlvbnNGbihvcHRpb25zKTtcbiAgICByZXR1cm4gaGVscGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG4gIHJldHVybiB3cmFwcGVyO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDJsdWRHVnlibUZzTDNkeVlYQklaV3h3WlhJdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenM3UVVGQlR5eFRRVUZUTEZWQlFWVXNRMEZCUXl4TlFVRk5MRVZCUVVVc2EwSkJRV3RDTEVWQlFVVTdRVUZEY2tRc1RVRkJTU3hQUVVGUExFMUJRVTBzUzBGQlN5eFZRVUZWTEVWQlFVVTdPenRCUVVkb1F5eFhRVUZQTEUxQlFVMHNRMEZCUXp0SFFVTm1PMEZCUTBRc1RVRkJTU3hQUVVGUExFZEJRVWNzVTBGQlZpeFBRVUZQTERCQ1FVRnhRenRCUVVNNVF5eFJRVUZOTEU5QlFVOHNSMEZCUnl4VFFVRlRMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTm9SQ3hoUVVGVExFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVNc1IwRkJSeXhyUWtGQmEwSXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenRCUVVNNVJDeFhRVUZQTEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hGUVVGRkxGTkJRVk1zUTBGQlF5eERRVUZETzBkQlEzUkRMRU5CUVVNN1FVRkRSaXhUUVVGUExFOUJRVThzUTBGQlF6dERRVU5vUWlJc0ltWnBiR1VpT2lKM2NtRndTR1ZzY0dWeUxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpWlhod2IzSjBJR1oxYm1OMGFXOXVJSGR5WVhCSVpXeHdaWElvYUdWc2NHVnlMQ0IwY21GdWMyWnZjbTFQY0hScGIyNXpSbTRwSUh0Y2JpQWdhV1lnS0hSNWNHVnZaaUJvWld4d1pYSWdJVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBdkx5QlVhR2x6SUhOb2IzVnNaQ0J1YjNRZ2FHRndjR1Z1TENCaWRYUWdZWEJ3WVhKbGJuUnNlU0JwZENCa2IyVnpJR2x1SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5M2VXTmhkSE12YUdGdVpHeGxZbUZ5Y3k1cWN5OXBjM04xWlhNdk1UWXpPVnh1SUNBZ0lDOHZJRmRsSUhSeWVTQjBieUJ0WVd0bElIUm9aU0IzY21Gd2NHVnlJR3hsWVhOMExXbHVkbUZ6YVhabElHSjVJRzV2ZENCM2NtRndjR2x1WnlCcGRDd2dhV1lnZEdobElHaGxiSEJsY2lCcGN5QnViM1FnWVNCbWRXNWpkR2x2Ymk1Y2JpQWdJQ0J5WlhSMWNtNGdhR1ZzY0dWeU8xeHVJQ0I5WEc0Z0lHeGxkQ0IzY21Gd2NHVnlJRDBnWm5WdVkzUnBiMjRvTHlvZ1pIbHVZVzFwWXlCaGNtZDFiV1Z1ZEhNZ0tpOHBJSHRjYmlBZ0lDQmpiMjV6ZENCdmNIUnBiMjV6SUQwZ1lYSm5kVzFsYm5SelcyRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ0xTQXhYVHRjYmlBZ0lDQmhjbWQxYldWdWRITmJZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQXRJREZkSUQwZ2RISmhibk5tYjNKdFQzQjBhVzl1YzBadUtHOXdkR2x2Ym5NcE8xeHVJQ0FnSUhKbGRIVnliaUJvWld4d1pYSXVZWEJ3Ykhrb2RHaHBjeXdnWVhKbmRXMWxiblJ6S1R0Y2JpQWdmVHRjYmlBZ2NtVjBkWEp1SUhkeVlYQndaWEk3WEc1OVhHNGlYWDA9XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciBsb2dnZXIgPSB7XG4gIG1ldGhvZE1hcDogWydkZWJ1ZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InXSxcbiAgbGV2ZWw6ICdpbmZvJyxcblxuICAvLyBNYXBzIGEgZ2l2ZW4gbGV2ZWwgdmFsdWUgdG8gdGhlIGBtZXRob2RNYXBgIGluZGV4ZXMgYWJvdmUuXG4gIGxvb2t1cExldmVsOiBmdW5jdGlvbiBsb29rdXBMZXZlbChsZXZlbCkge1xuICAgIGlmICh0eXBlb2YgbGV2ZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YXIgbGV2ZWxNYXAgPSBfdXRpbHMuaW5kZXhPZihsb2dnZXIubWV0aG9kTWFwLCBsZXZlbC50b0xvd2VyQ2FzZSgpKTtcbiAgICAgIGlmIChsZXZlbE1hcCA+PSAwKSB7XG4gICAgICAgIGxldmVsID0gbGV2ZWxNYXA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXZlbCA9IHBhcnNlSW50KGxldmVsLCAxMCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGxldmVsO1xuICB9LFxuXG4gIC8vIENhbiBiZSBvdmVycmlkZGVuIGluIHRoZSBob3N0IGVudmlyb25tZW50XG4gIGxvZzogZnVuY3Rpb24gbG9nKGxldmVsKSB7XG4gICAgbGV2ZWwgPSBsb2dnZXIubG9va3VwTGV2ZWwobGV2ZWwpO1xuXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBsb2dnZXIubG9va3VwTGV2ZWwobG9nZ2VyLmxldmVsKSA8PSBsZXZlbCkge1xuICAgICAgdmFyIG1ldGhvZCA9IGxvZ2dlci5tZXRob2RNYXBbbGV2ZWxdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGlmICghY29uc29sZVttZXRob2RdKSB7XG4gICAgICAgIG1ldGhvZCA9ICdsb2cnO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWVzc2FnZSA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgbWVzc2FnZVtfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIGNvbnNvbGVbbWV0aG9kXS5hcHBseShjb25zb2xlLCBtZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgfVxuICB9XG59O1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBsb2dnZXI7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDJ4dloyZGxjaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN08zRkNRVUYzUWl4VFFVRlRPenRCUVVWcVF5eEpRVUZKTEUxQlFVMHNSMEZCUnp0QlFVTllMRmRCUVZNc1JVRkJSU3hEUVVGRExFOUJRVThzUlVGQlJTeE5RVUZOTEVWQlFVVXNUVUZCVFN4RlFVRkZMRTlCUVU4c1EwRkJRenRCUVVNM1F5eFBRVUZMTEVWQlFVVXNUVUZCVFRzN08wRkJSMklzWVVGQlZ5eEZRVUZGTEhGQ1FVRlRMRXRCUVVzc1JVRkJSVHRCUVVNelFpeFJRVUZKTEU5QlFVOHNTMEZCU3l4TFFVRkxMRkZCUVZFc1JVRkJSVHRCUVVNM1FpeFZRVUZKTEZGQlFWRXNSMEZCUnl4bFFVRlJMRTFCUVUwc1EwRkJReXhUUVVGVExFVkJRVVVzUzBGQlN5eERRVUZETEZkQlFWY3NSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkRPVVFzVlVGQlNTeFJRVUZSTEVsQlFVa3NRMEZCUXl4RlFVRkZPMEZCUTJwQ0xHRkJRVXNzUjBGQlJ5eFJRVUZSTEVOQlFVTTdUMEZEYkVJc1RVRkJUVHRCUVVOTUxHRkJRVXNzUjBGQlJ5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRE8wOUJRemRDTzB0QlEwWTdPMEZCUlVRc1YwRkJUeXhMUVVGTExFTkJRVU03UjBGRFpEczdPMEZCUjBRc1MwRkJSeXhGUVVGRkxHRkJRVk1zUzBGQlN5eEZRVUZqTzBGQlF5OUNMRk5CUVVzc1IwRkJSeXhOUVVGTkxFTkJRVU1zVjBGQlZ5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPenRCUVVWc1F5eFJRVU5GTEU5QlFVOHNUMEZCVHl4TFFVRkxMRmRCUVZjc1NVRkRPVUlzVFVGQlRTeERRVUZETEZkQlFWY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUzBGQlN5eEZRVU42UXp0QlFVTkJMRlZCUVVrc1RVRkJUU3hIUVVGSExFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN08wRkJSWEpETEZWQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRExFVkJRVVU3UVVGRGNFSXNZMEZCVFN4SFFVRkhMRXRCUVVzc1EwRkJRenRQUVVOb1FqczdkME5CV0cxQ0xFOUJRVTg3UVVGQlVDeGxRVUZQT3pzN1FVRlpNMElzWVVGQlR5eERRVUZETEUxQlFVMHNUMEZCUXl4RFFVRm1MRTlCUVU4c1JVRkJXU3hQUVVGUExFTkJRVU1zUTBGQlF6dExRVU0zUWp0SFFVTkdPME5CUTBZc1EwRkJRenM3Y1VKQlJXRXNUVUZCVFNJc0ltWnBiR1VpT2lKc2IyZG5aWEl1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ2V5QnBibVJsZUU5bUlIMGdabkp2YlNBbkxpOTFkR2xzY3ljN1hHNWNibXhsZENCc2IyZG5aWElnUFNCN1hHNGdJRzFsZEdodlpFMWhjRG9nV3lka1pXSjFaeWNzSUNkcGJtWnZKeXdnSjNkaGNtNG5MQ0FuWlhKeWIzSW5YU3hjYmlBZ2JHVjJaV3c2SUNkcGJtWnZKeXhjYmx4dUlDQXZMeUJOWVhCeklHRWdaMmwyWlc0Z2JHVjJaV3dnZG1Gc2RXVWdkRzhnZEdobElHQnRaWFJvYjJSTllYQmdJR2x1WkdWNFpYTWdZV0p2ZG1VdVhHNGdJR3h2YjJ0MWNFeGxkbVZzT2lCbWRXNWpkR2x2Ymloc1pYWmxiQ2tnZTF4dUlDQWdJR2xtSUNoMGVYQmxiMllnYkdWMlpXd2dQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNCc1pYUWdiR1YyWld4TllYQWdQU0JwYm1SbGVFOW1LR3h2WjJkbGNpNXRaWFJvYjJSTllYQXNJR3hsZG1Wc0xuUnZURzkzWlhKRFlYTmxLQ2twTzF4dUlDQWdJQ0FnYVdZZ0tHeGxkbVZzVFdGd0lENDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ2JHVjJaV3dnUFNCc1pYWmxiRTFoY0R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUd4bGRtVnNJRDBnY0dGeWMyVkpiblFvYkdWMlpXd3NJREV3S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdiR1YyWld3N1hHNGdJSDBzWEc1Y2JpQWdMeThnUTJGdUlHSmxJRzkyWlhKeWFXUmtaVzRnYVc0Z2RHaGxJR2h2YzNRZ1pXNTJhWEp2Ym0xbGJuUmNiaUFnYkc5bk9pQm1kVzVqZEdsdmJpaHNaWFpsYkN3Z0xpNHViV1Z6YzJGblpTa2dlMXh1SUNBZ0lHeGxkbVZzSUQwZ2JHOW5aMlZ5TG14dmIydDFjRXhsZG1Wc0tHeGxkbVZzS1R0Y2JseHVJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lIUjVjR1Z2WmlCamIyNXpiMnhsSUNFOVBTQW5kVzVrWldacGJtVmtKeUFtSmx4dUlDQWdJQ0FnYkc5bloyVnlMbXh2YjJ0MWNFeGxkbVZzS0d4dloyZGxjaTVzWlhabGJDa2dQRDBnYkdWMlpXeGNiaUFnSUNBcElIdGNiaUFnSUNBZ0lHeGxkQ0J0WlhSb2IyUWdQU0JzYjJkblpYSXViV1YwYUc5a1RXRndXMnhsZG1Wc1hUdGNiaUFnSUNBZ0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQnVieTFqYjI1emIyeGxYRzRnSUNBZ0lDQnBaaUFvSVdOdmJuTnZiR1ZiYldWMGFHOWtYU2tnZTF4dUlDQWdJQ0FnSUNCdFpYUm9iMlFnUFNBbmJHOW5KenRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR052Ym5OdmJHVmJiV1YwYUc5a1hTZ3VMaTV0WlhOellXZGxLVHNnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0YkdsdVpTQnVieTFqYjI1emIyeGxYRzRnSUNBZ2ZWeHVJQ0I5WEc1OU8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQnNiMmRuWlhJN1hHNGlYWDA9XG4iLCIvKiBnbG9iYWwgZ2xvYmFsVGhpcyAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoSGFuZGxlYmFycykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAvLyBodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvZ2xvYmFsdGhpc1xuICAoZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybjtcbiAgICBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lR2V0dGVyX18oJ19fbWFnaWNfXycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0pO1xuICAgIF9fbWFnaWNfXy5nbG9iYWxUaGlzID0gX19tYWdpY19fOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4gICAgZGVsZXRlIE9iamVjdC5wcm90b3R5cGUuX19tYWdpY19fO1xuICB9KSgpO1xuXG4gIHZhciAkSGFuZGxlYmFycyA9IGdsb2JhbFRoaXMuSGFuZGxlYmFycztcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBIYW5kbGViYXJzLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGdsb2JhbFRoaXMuSGFuZGxlYmFycyA9PT0gSGFuZGxlYmFycykge1xuICAgICAgZ2xvYmFsVGhpcy5IYW5kbGViYXJzID0gJEhhbmRsZWJhcnM7XG4gICAgfVxuICAgIHJldHVybiBIYW5kbGViYXJzO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwyNXZMV052Ym1ac2FXTjBMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN08zRkNRVU5sTEZWQlFWTXNWVUZCVlN4RlFVRkZPenM3UVVGSGJFTXNSMEZCUXl4WlFVRlhPMEZCUTFZc1VVRkJTU3hQUVVGUExGVkJRVlVzUzBGQlN5eFJRVUZSTEVWQlFVVXNUMEZCVHp0QlFVTXpReXhWUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExGZEJRVmNzUlVGQlJTeFpRVUZYTzBGQlEzaEVMR0ZCUVU4c1NVRkJTU3hEUVVGRE8wdEJRMklzUTBGQlF5eERRVUZETzBGQlEwZ3NZVUZCVXl4RFFVRkRMRlZCUVZVc1IwRkJSeXhUUVVGVExFTkJRVU03UVVGRGFrTXNWMEZCVHl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExGTkJRVk1zUTBGQlF6dEhRVU51UXl4RFFVRkJMRVZCUVVjc1EwRkJRenM3UVVGRlRDeE5RVUZOTEZkQlFWY3NSMEZCUnl4VlFVRlZMRU5CUVVNc1ZVRkJWU3hEUVVGRE96czdRVUZITVVNc1dVRkJWU3hEUVVGRExGVkJRVlVzUjBGQlJ5eFpRVUZYTzBGQlEycERMRkZCUVVrc1ZVRkJWU3hEUVVGRExGVkJRVlVzUzBGQlN5eFZRVUZWTEVWQlFVVTdRVUZEZUVNc1owSkJRVlVzUTBGQlF5eFZRVUZWTEVkQlFVY3NWMEZCVnl4RFFVRkRPMHRCUTNKRE8wRkJRMFFzVjBGQlR5eFZRVUZWTEVOQlFVTTdSMEZEYmtJc1EwRkJRenREUVVOSUlpd2labWxzWlNJNkltNXZMV052Ym1ac2FXTjBMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b2daMnh2WW1Gc0lHZHNiMkpoYkZSb2FYTWdLaTljYm1WNGNHOXlkQ0JrWldaaGRXeDBJR1oxYm1OMGFXOXVLRWhoYm1Sc1pXSmhjbk1wSUh0Y2JpQWdMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJRzVsZUhRZ0tpOWNiaUFnTHk4Z2FIUjBjSE02THk5dFlYUm9hV0Z6WW5sdVpXNXpMbUpsTDI1dmRHVnpMMmRzYjJKaGJIUm9hWE5jYmlBZ0tHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdaMnh2WW1Gc1ZHaHBjeUE5UFQwZ0oyOWlhbVZqZENjcElISmxkSFZ5Ymp0Y2JpQWdJQ0JQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbDlmWkdWbWFXNWxSMlYwZEdWeVgxOG9KMTlmYldGbmFXTmZYeWNzSUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUNBZ2ZTazdYRzRnSUNBZ1gxOXRZV2RwWTE5ZkxtZHNiMkpoYkZSb2FYTWdQU0JmWDIxaFoybGpYMTg3SUM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFd4cGJtVWdibTh0ZFc1a1pXWmNiaUFnSUNCa1pXeGxkR1VnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVmWDIxaFoybGpYMTg3WEc0Z0lIMHBLQ2s3WEc1Y2JpQWdZMjl1YzNRZ0pFaGhibVJzWldKaGNuTWdQU0JuYkc5aVlXeFVhR2x6TGtoaGJtUnNaV0poY25NN1hHNWNiaUFnTHlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUc1bGVIUWdLaTljYmlBZ1NHRnVaR3hsWW1GeWN5NXViME52Ym1ac2FXTjBJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnYVdZZ0tHZHNiMkpoYkZSb2FYTXVTR0Z1Wkd4bFltRnljeUE5UFQwZ1NHRnVaR3hsWW1GeWN5a2dlMXh1SUNBZ0lDQWdaMnh2WW1Gc1ZHaHBjeTVJWVc1a2JHVmlZWEp6SUQwZ0pFaGhibVJzWldKaGNuTTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJJWVc1a2JHVmlZWEp6TzF4dUlDQjlPMXh1ZlZ4dUlsMTlcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuY2hlY2tSZXZpc2lvbiA9IGNoZWNrUmV2aXNpb247XG5leHBvcnRzLnRlbXBsYXRlID0gdGVtcGxhdGU7XG5leHBvcnRzLndyYXBQcm9ncmFtID0gd3JhcFByb2dyYW07XG5leHBvcnRzLnJlc29sdmVQYXJ0aWFsID0gcmVzb2x2ZVBhcnRpYWw7XG5leHBvcnRzLmludm9rZVBhcnRpYWwgPSBpbnZva2VQYXJ0aWFsO1xuZXhwb3J0cy5ub29wID0gbm9vcDtcbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuLy8gaXN0YW5idWwgaWdub3JlIG5leHRcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09ialsnZGVmYXVsdCddID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxudmFyIFV0aWxzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX3V0aWxzKTtcblxudmFyIF9leGNlcHRpb24gPSByZXF1aXJlKCcuL2V4Y2VwdGlvbicpO1xuXG52YXIgX2V4Y2VwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGNlcHRpb24pO1xuXG52YXIgX2Jhc2UgPSByZXF1aXJlKCcuL2Jhc2UnKTtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZSgnLi9oZWxwZXJzJyk7XG5cbnZhciBfaW50ZXJuYWxXcmFwSGVscGVyID0gcmVxdWlyZSgnLi9pbnRlcm5hbC93cmFwSGVscGVyJyk7XG5cbnZhciBfaW50ZXJuYWxQcm90b0FjY2VzcyA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvcHJvdG8tYWNjZXNzJyk7XG5cbmZ1bmN0aW9uIGNoZWNrUmV2aXNpb24oY29tcGlsZXJJbmZvKSB7XG4gIHZhciBjb21waWxlclJldmlzaW9uID0gY29tcGlsZXJJbmZvICYmIGNvbXBpbGVySW5mb1swXSB8fCAxLFxuICAgICAgY3VycmVudFJldmlzaW9uID0gX2Jhc2UuQ09NUElMRVJfUkVWSVNJT047XG5cbiAgaWYgKGNvbXBpbGVyUmV2aXNpb24gPj0gX2Jhc2UuTEFTVF9DT01QQVRJQkxFX0NPTVBJTEVSX1JFVklTSU9OICYmIGNvbXBpbGVyUmV2aXNpb24gPD0gX2Jhc2UuQ09NUElMRVJfUkVWSVNJT04pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoY29tcGlsZXJSZXZpc2lvbiA8IF9iYXNlLkxBU1RfQ09NUEFUSUJMRV9DT01QSUxFUl9SRVZJU0lPTikge1xuICAgIHZhciBydW50aW1lVmVyc2lvbnMgPSBfYmFzZS5SRVZJU0lPTl9DSEFOR0VTW2N1cnJlbnRSZXZpc2lvbl0sXG4gICAgICAgIGNvbXBpbGVyVmVyc2lvbnMgPSBfYmFzZS5SRVZJU0lPTl9DSEFOR0VTW2NvbXBpbGVyUmV2aXNpb25dO1xuICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdUZW1wbGF0ZSB3YXMgcHJlY29tcGlsZWQgd2l0aCBhbiBvbGRlciB2ZXJzaW9uIG9mIEhhbmRsZWJhcnMgdGhhbiB0aGUgY3VycmVudCBydW50aW1lLiAnICsgJ1BsZWFzZSB1cGRhdGUgeW91ciBwcmVjb21waWxlciB0byBhIG5ld2VyIHZlcnNpb24gKCcgKyBydW50aW1lVmVyc2lvbnMgKyAnKSBvciBkb3duZ3JhZGUgeW91ciBydW50aW1lIHRvIGFuIG9sZGVyIHZlcnNpb24gKCcgKyBjb21waWxlclZlcnNpb25zICsgJykuJyk7XG4gIH0gZWxzZSB7XG4gICAgLy8gVXNlIHRoZSBlbWJlZGRlZCB2ZXJzaW9uIGluZm8gc2luY2UgdGhlIHJ1bnRpbWUgZG9lc24ndCBrbm93IGFib3V0IHRoaXMgcmV2aXNpb24geWV0XG4gICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1RlbXBsYXRlIHdhcyBwcmVjb21waWxlZCB3aXRoIGEgbmV3ZXIgdmVyc2lvbiBvZiBIYW5kbGViYXJzIHRoYW4gdGhlIGN1cnJlbnQgcnVudGltZS4gJyArICdQbGVhc2UgdXBkYXRlIHlvdXIgcnVudGltZSB0byBhIG5ld2VyIHZlcnNpb24gKCcgKyBjb21waWxlckluZm9bMV0gKyAnKS4nKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0ZW1wbGF0ZSh0ZW1wbGF0ZVNwZWMsIGVudikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBpZiAoIWVudikge1xuICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdObyBlbnZpcm9ubWVudCBwYXNzZWQgdG8gdGVtcGxhdGUnKTtcbiAgfVxuICBpZiAoIXRlbXBsYXRlU3BlYyB8fCAhdGVtcGxhdGVTcGVjLm1haW4pIHtcbiAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnVW5rbm93biB0ZW1wbGF0ZSBvYmplY3Q6ICcgKyB0eXBlb2YgdGVtcGxhdGVTcGVjKTtcbiAgfVxuXG4gIHRlbXBsYXRlU3BlYy5tYWluLmRlY29yYXRvciA9IHRlbXBsYXRlU3BlYy5tYWluX2Q7XG5cbiAgLy8gTm90ZTogVXNpbmcgZW52LlZNIHJlZmVyZW5jZXMgcmF0aGVyIHRoYW4gbG9jYWwgdmFyIHJlZmVyZW5jZXMgdGhyb3VnaG91dCB0aGlzIHNlY3Rpb24gdG8gYWxsb3dcbiAgLy8gZm9yIGV4dGVybmFsIHVzZXJzIHRvIG92ZXJyaWRlIHRoZXNlIGFzIHBzZXVkby1zdXBwb3J0ZWQgQVBJcy5cbiAgZW52LlZNLmNoZWNrUmV2aXNpb24odGVtcGxhdGVTcGVjLmNvbXBpbGVyKTtcblxuICAvLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSBmb3IgcHJlY29tcGlsZWQgdGVtcGxhdGVzIHdpdGggY29tcGlsZXItdmVyc2lvbiA3ICg8NC4zLjApXG4gIHZhciB0ZW1wbGF0ZVdhc1ByZWNvbXBpbGVkV2l0aENvbXBpbGVyVjcgPSB0ZW1wbGF0ZVNwZWMuY29tcGlsZXIgJiYgdGVtcGxhdGVTcGVjLmNvbXBpbGVyWzBdID09PSA3O1xuXG4gIGZ1bmN0aW9uIGludm9rZVBhcnRpYWxXcmFwcGVyKHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgICBjb250ZXh0ID0gVXRpbHMuZXh0ZW5kKHt9LCBjb250ZXh0LCBvcHRpb25zLmhhc2gpO1xuICAgICAgaWYgKG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIG9wdGlvbnMuaWRzWzBdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcGFydGlhbCA9IGVudi5WTS5yZXNvbHZlUGFydGlhbC5jYWxsKHRoaXMsIHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpO1xuXG4gICAgdmFyIGV4dGVuZGVkT3B0aW9ucyA9IFV0aWxzLmV4dGVuZCh7fSwgb3B0aW9ucywge1xuICAgICAgaG9va3M6IHRoaXMuaG9va3MsXG4gICAgICBwcm90b0FjY2Vzc0NvbnRyb2w6IHRoaXMucHJvdG9BY2Nlc3NDb250cm9sXG4gICAgfSk7XG5cbiAgICB2YXIgcmVzdWx0ID0gZW52LlZNLmludm9rZVBhcnRpYWwuY2FsbCh0aGlzLCBwYXJ0aWFsLCBjb250ZXh0LCBleHRlbmRlZE9wdGlvbnMpO1xuXG4gICAgaWYgKHJlc3VsdCA9PSBudWxsICYmIGVudi5jb21waWxlKSB7XG4gICAgICBvcHRpb25zLnBhcnRpYWxzW29wdGlvbnMubmFtZV0gPSBlbnYuY29tcGlsZShwYXJ0aWFsLCB0ZW1wbGF0ZVNwZWMuY29tcGlsZXJPcHRpb25zLCBlbnYpO1xuICAgICAgcmVzdWx0ID0gb3B0aW9ucy5wYXJ0aWFsc1tvcHRpb25zLm5hbWVdKGNvbnRleHQsIGV4dGVuZGVkT3B0aW9ucyk7XG4gICAgfVxuICAgIGlmIChyZXN1bHQgIT0gbnVsbCkge1xuICAgICAgaWYgKG9wdGlvbnMuaW5kZW50KSB7XG4gICAgICAgIHZhciBsaW5lcyA9IHJlc3VsdC5zcGxpdCgnXFxuJyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbGluZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgaWYgKCFsaW5lc1tpXSAmJiBpICsgMSA9PT0gbCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGluZXNbaV0gPSBvcHRpb25zLmluZGVudCArIGxpbmVzW2ldO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9IGxpbmVzLmpvaW4oJ1xcbicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1RoZSBwYXJ0aWFsICcgKyBvcHRpb25zLm5hbWUgKyAnIGNvdWxkIG5vdCBiZSBjb21waWxlZCB3aGVuIHJ1bm5pbmcgaW4gcnVudGltZS1vbmx5IG1vZGUnKTtcbiAgICB9XG4gIH1cblxuICAvLyBKdXN0IGFkZCB3YXRlclxuICB2YXIgY29udGFpbmVyID0ge1xuICAgIHN0cmljdDogZnVuY3Rpb24gc3RyaWN0KG9iaiwgbmFtZSwgbG9jKSB7XG4gICAgICBpZiAoIW9iaiB8fCAhKG5hbWUgaW4gb2JqKSkge1xuICAgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnXCInICsgbmFtZSArICdcIiBub3QgZGVmaW5lZCBpbiAnICsgb2JqLCB7XG4gICAgICAgICAgbG9jOiBsb2NcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGFpbmVyLmxvb2t1cFByb3BlcnR5KG9iaiwgbmFtZSk7XG4gICAgfSxcbiAgICBsb29rdXBQcm9wZXJ0eTogZnVuY3Rpb24gbG9va3VwUHJvcGVydHkocGFyZW50LCBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBwYXJlbnRbcHJvcGVydHlOYW1lXTtcbiAgICAgIGlmIChyZXN1bHQgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwYXJlbnQsIHByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgaWYgKF9pbnRlcm5hbFByb3RvQWNjZXNzLnJlc3VsdElzQWxsb3dlZChyZXN1bHQsIGNvbnRhaW5lci5wcm90b0FjY2Vzc0NvbnRyb2wsIHByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSxcbiAgICBsb29rdXA6IGZ1bmN0aW9uIGxvb2t1cChkZXB0aHMsIG5hbWUpIHtcbiAgICAgIHZhciBsZW4gPSBkZXB0aHMubGVuZ3RoO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gZGVwdGhzW2ldICYmIGNvbnRhaW5lci5sb29rdXBQcm9wZXJ0eShkZXB0aHNbaV0sIG5hbWUpO1xuICAgICAgICBpZiAocmVzdWx0ICE9IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZGVwdGhzW2ldW25hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBsYW1iZGE6IGZ1bmN0aW9uIGxhbWJkYShjdXJyZW50LCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gdHlwZW9mIGN1cnJlbnQgPT09ICdmdW5jdGlvbicgPyBjdXJyZW50LmNhbGwoY29udGV4dCkgOiBjdXJyZW50O1xuICAgIH0sXG5cbiAgICBlc2NhcGVFeHByZXNzaW9uOiBVdGlscy5lc2NhcGVFeHByZXNzaW9uLFxuICAgIGludm9rZVBhcnRpYWw6IGludm9rZVBhcnRpYWxXcmFwcGVyLFxuXG4gICAgZm46IGZ1bmN0aW9uIGZuKGkpIHtcbiAgICAgIHZhciByZXQgPSB0ZW1wbGF0ZVNwZWNbaV07XG4gICAgICByZXQuZGVjb3JhdG9yID0gdGVtcGxhdGVTcGVjW2kgKyAnX2QnXTtcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfSxcblxuICAgIHByb2dyYW1zOiBbXSxcbiAgICBwcm9ncmFtOiBmdW5jdGlvbiBwcm9ncmFtKGksIGRhdGEsIGRlY2xhcmVkQmxvY2tQYXJhbXMsIGJsb2NrUGFyYW1zLCBkZXB0aHMpIHtcbiAgICAgIHZhciBwcm9ncmFtV3JhcHBlciA9IHRoaXMucHJvZ3JhbXNbaV0sXG4gICAgICAgICAgZm4gPSB0aGlzLmZuKGkpO1xuICAgICAgaWYgKGRhdGEgfHwgZGVwdGhzIHx8IGJsb2NrUGFyYW1zIHx8IGRlY2xhcmVkQmxvY2tQYXJhbXMpIHtcbiAgICAgICAgcHJvZ3JhbVdyYXBwZXIgPSB3cmFwUHJvZ3JhbSh0aGlzLCBpLCBmbiwgZGF0YSwgZGVjbGFyZWRCbG9ja1BhcmFtcywgYmxvY2tQYXJhbXMsIGRlcHRocyk7XG4gICAgICB9IGVsc2UgaWYgKCFwcm9ncmFtV3JhcHBlcikge1xuICAgICAgICBwcm9ncmFtV3JhcHBlciA9IHRoaXMucHJvZ3JhbXNbaV0gPSB3cmFwUHJvZ3JhbSh0aGlzLCBpLCBmbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvZ3JhbVdyYXBwZXI7XG4gICAgfSxcblxuICAgIGRhdGE6IGZ1bmN0aW9uIGRhdGEodmFsdWUsIGRlcHRoKSB7XG4gICAgICB3aGlsZSAodmFsdWUgJiYgZGVwdGgtLSkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLl9wYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBtZXJnZUlmTmVlZGVkOiBmdW5jdGlvbiBtZXJnZUlmTmVlZGVkKHBhcmFtLCBjb21tb24pIHtcbiAgICAgIHZhciBvYmogPSBwYXJhbSB8fCBjb21tb247XG5cbiAgICAgIGlmIChwYXJhbSAmJiBjb21tb24gJiYgcGFyYW0gIT09IGNvbW1vbikge1xuICAgICAgICBvYmogPSBVdGlscy5leHRlbmQoe30sIGNvbW1vbiwgcGFyYW0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG4gICAgLy8gQW4gZW1wdHkgb2JqZWN0IHRvIHVzZSBhcyByZXBsYWNlbWVudCBmb3IgbnVsbC1jb250ZXh0c1xuICAgIG51bGxDb250ZXh0OiBPYmplY3Quc2VhbCh7fSksXG5cbiAgICBub29wOiBlbnYuVk0ubm9vcCxcbiAgICBjb21waWxlckluZm86IHRlbXBsYXRlU3BlYy5jb21waWxlclxuICB9O1xuXG4gIGZ1bmN0aW9uIHJldChjb250ZXh0KSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1sxXTtcblxuICAgIHZhciBkYXRhID0gb3B0aW9ucy5kYXRhO1xuXG4gICAgcmV0Ll9zZXR1cChvcHRpb25zKTtcbiAgICBpZiAoIW9wdGlvbnMucGFydGlhbCAmJiB0ZW1wbGF0ZVNwZWMudXNlRGF0YSkge1xuICAgICAgZGF0YSA9IGluaXREYXRhKGNvbnRleHQsIGRhdGEpO1xuICAgIH1cbiAgICB2YXIgZGVwdGhzID0gdW5kZWZpbmVkLFxuICAgICAgICBibG9ja1BhcmFtcyA9IHRlbXBsYXRlU3BlYy51c2VCbG9ja1BhcmFtcyA/IFtdIDogdW5kZWZpbmVkO1xuICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlRGVwdGhzKSB7XG4gICAgICBpZiAob3B0aW9ucy5kZXB0aHMpIHtcbiAgICAgICAgZGVwdGhzID0gY29udGV4dCAhPSBvcHRpb25zLmRlcHRoc1swXSA/IFtjb250ZXh0XS5jb25jYXQob3B0aW9ucy5kZXB0aHMpIDogb3B0aW9ucy5kZXB0aHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZXB0aHMgPSBbY29udGV4dF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFpbihjb250ZXh0IC8qLCBvcHRpb25zKi8pIHtcbiAgICAgIHJldHVybiAnJyArIHRlbXBsYXRlU3BlYy5tYWluKGNvbnRhaW5lciwgY29udGV4dCwgY29udGFpbmVyLmhlbHBlcnMsIGNvbnRhaW5lci5wYXJ0aWFscywgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocyk7XG4gICAgfVxuXG4gICAgbWFpbiA9IGV4ZWN1dGVEZWNvcmF0b3JzKHRlbXBsYXRlU3BlYy5tYWluLCBtYWluLCBjb250YWluZXIsIG9wdGlvbnMuZGVwdGhzIHx8IFtdLCBkYXRhLCBibG9ja1BhcmFtcyk7XG4gICAgcmV0dXJuIG1haW4oY29udGV4dCwgb3B0aW9ucyk7XG4gIH1cblxuICByZXQuaXNUb3AgPSB0cnVlO1xuXG4gIHJldC5fc2V0dXAgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucy5wYXJ0aWFsKSB7XG4gICAgICB2YXIgbWVyZ2VkSGVscGVycyA9IFV0aWxzLmV4dGVuZCh7fSwgZW52LmhlbHBlcnMsIG9wdGlvbnMuaGVscGVycyk7XG4gICAgICB3cmFwSGVscGVyc1RvUGFzc0xvb2t1cFByb3BlcnR5KG1lcmdlZEhlbHBlcnMsIGNvbnRhaW5lcik7XG4gICAgICBjb250YWluZXIuaGVscGVycyA9IG1lcmdlZEhlbHBlcnM7XG5cbiAgICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlUGFydGlhbCkge1xuICAgICAgICAvLyBVc2UgbWVyZ2VJZk5lZWRlZCBoZXJlIHRvIHByZXZlbnQgY29tcGlsaW5nIGdsb2JhbCBwYXJ0aWFscyBtdWx0aXBsZSB0aW1lc1xuICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBjb250YWluZXIubWVyZ2VJZk5lZWRlZChvcHRpb25zLnBhcnRpYWxzLCBlbnYucGFydGlhbHMpO1xuICAgICAgfVxuICAgICAgaWYgKHRlbXBsYXRlU3BlYy51c2VQYXJ0aWFsIHx8IHRlbXBsYXRlU3BlYy51c2VEZWNvcmF0b3JzKSB7XG4gICAgICAgIGNvbnRhaW5lci5kZWNvcmF0b3JzID0gVXRpbHMuZXh0ZW5kKHt9LCBlbnYuZGVjb3JhdG9ycywgb3B0aW9ucy5kZWNvcmF0b3JzKTtcbiAgICAgIH1cblxuICAgICAgY29udGFpbmVyLmhvb2tzID0ge307XG4gICAgICBjb250YWluZXIucHJvdG9BY2Nlc3NDb250cm9sID0gX2ludGVybmFsUHJvdG9BY2Nlc3MuY3JlYXRlUHJvdG9BY2Nlc3NDb250cm9sKG9wdGlvbnMpO1xuXG4gICAgICB2YXIga2VlcEhlbHBlckluSGVscGVycyA9IG9wdGlvbnMuYWxsb3dDYWxsc1RvSGVscGVyTWlzc2luZyB8fCB0ZW1wbGF0ZVdhc1ByZWNvbXBpbGVkV2l0aENvbXBpbGVyVjc7XG4gICAgICBfaGVscGVycy5tb3ZlSGVscGVyVG9Ib29rcyhjb250YWluZXIsICdoZWxwZXJNaXNzaW5nJywga2VlcEhlbHBlckluSGVscGVycyk7XG4gICAgICBfaGVscGVycy5tb3ZlSGVscGVyVG9Ib29rcyhjb250YWluZXIsICdibG9ja0hlbHBlck1pc3NpbmcnLCBrZWVwSGVscGVySW5IZWxwZXJzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGFpbmVyLnByb3RvQWNjZXNzQ29udHJvbCA9IG9wdGlvbnMucHJvdG9BY2Nlc3NDb250cm9sOyAvLyBpbnRlcm5hbCBvcHRpb25cbiAgICAgIGNvbnRhaW5lci5oZWxwZXJzID0gb3B0aW9ucy5oZWxwZXJzO1xuICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gb3B0aW9ucy5wYXJ0aWFscztcbiAgICAgIGNvbnRhaW5lci5kZWNvcmF0b3JzID0gb3B0aW9ucy5kZWNvcmF0b3JzO1xuICAgICAgY29udGFpbmVyLmhvb2tzID0gb3B0aW9ucy5ob29rcztcbiAgICB9XG4gIH07XG5cbiAgcmV0Ll9jaGlsZCA9IGZ1bmN0aW9uIChpLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKSB7XG4gICAgaWYgKHRlbXBsYXRlU3BlYy51c2VCbG9ja1BhcmFtcyAmJiAhYmxvY2tQYXJhbXMpIHtcbiAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdtdXN0IHBhc3MgYmxvY2sgcGFyYW1zJyk7XG4gICAgfVxuICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlRGVwdGhzICYmICFkZXB0aHMpIHtcbiAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdtdXN0IHBhc3MgcGFyZW50IGRlcHRocycpO1xuICAgIH1cblxuICAgIHJldHVybiB3cmFwUHJvZ3JhbShjb250YWluZXIsIGksIHRlbXBsYXRlU3BlY1tpXSwgZGF0YSwgMCwgYmxvY2tQYXJhbXMsIGRlcHRocyk7XG4gIH07XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIHdyYXBQcm9ncmFtKGNvbnRhaW5lciwgaSwgZm4sIGRhdGEsIGRlY2xhcmVkQmxvY2tQYXJhbXMsIGJsb2NrUGFyYW1zLCBkZXB0aHMpIHtcbiAgZnVuY3Rpb24gcHJvZyhjb250ZXh0KSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1sxXTtcblxuICAgIHZhciBjdXJyZW50RGVwdGhzID0gZGVwdGhzO1xuICAgIGlmIChkZXB0aHMgJiYgY29udGV4dCAhPSBkZXB0aHNbMF0gJiYgIShjb250ZXh0ID09PSBjb250YWluZXIubnVsbENvbnRleHQgJiYgZGVwdGhzWzBdID09PSBudWxsKSkge1xuICAgICAgY3VycmVudERlcHRocyA9IFtjb250ZXh0XS5jb25jYXQoZGVwdGhzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZm4oY29udGFpbmVyLCBjb250ZXh0LCBjb250YWluZXIuaGVscGVycywgY29udGFpbmVyLnBhcnRpYWxzLCBvcHRpb25zLmRhdGEgfHwgZGF0YSwgYmxvY2tQYXJhbXMgJiYgW29wdGlvbnMuYmxvY2tQYXJhbXNdLmNvbmNhdChibG9ja1BhcmFtcyksIGN1cnJlbnREZXB0aHMpO1xuICB9XG5cbiAgcHJvZyA9IGV4ZWN1dGVEZWNvcmF0b3JzKGZuLCBwcm9nLCBjb250YWluZXIsIGRlcHRocywgZGF0YSwgYmxvY2tQYXJhbXMpO1xuXG4gIHByb2cucHJvZ3JhbSA9IGk7XG4gIHByb2cuZGVwdGggPSBkZXB0aHMgPyBkZXB0aHMubGVuZ3RoIDogMDtcbiAgcHJvZy5ibG9ja1BhcmFtcyA9IGRlY2xhcmVkQmxvY2tQYXJhbXMgfHwgMDtcbiAgcmV0dXJuIHByb2c7XG59XG5cbi8qKlxuICogVGhpcyBpcyBjdXJyZW50bHkgcGFydCBvZiB0aGUgb2ZmaWNpYWwgQVBJLCB0aGVyZWZvcmUgaW1wbGVtZW50YXRpb24gZGV0YWlscyBzaG91bGQgbm90IGJlIGNoYW5nZWQuXG4gKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVBhcnRpYWwocGFydGlhbCwgY29udGV4dCwgb3B0aW9ucykge1xuICBpZiAoIXBhcnRpYWwpIHtcbiAgICBpZiAob3B0aW9ucy5uYW1lID09PSAnQHBhcnRpYWwtYmxvY2snKSB7XG4gICAgICBwYXJ0aWFsID0gb3B0aW9ucy5kYXRhWydwYXJ0aWFsLWJsb2NrJ107XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnRpYWwgPSBvcHRpb25zLnBhcnRpYWxzW29wdGlvbnMubmFtZV07XG4gICAgfVxuICB9IGVsc2UgaWYgKCFwYXJ0aWFsLmNhbGwgJiYgIW9wdGlvbnMubmFtZSkge1xuICAgIC8vIFRoaXMgaXMgYSBkeW5hbWljIHBhcnRpYWwgdGhhdCByZXR1cm5lZCBhIHN0cmluZ1xuICAgIG9wdGlvbnMubmFtZSA9IHBhcnRpYWw7XG4gICAgcGFydGlhbCA9IG9wdGlvbnMucGFydGlhbHNbcGFydGlhbF07XG4gIH1cbiAgcmV0dXJuIHBhcnRpYWw7XG59XG5cbmZ1bmN0aW9uIGludm9rZVBhcnRpYWwocGFydGlhbCwgY29udGV4dCwgb3B0aW9ucykge1xuICAvLyBVc2UgdGhlIGN1cnJlbnQgY2xvc3VyZSBjb250ZXh0IHRvIHNhdmUgdGhlIHBhcnRpYWwtYmxvY2sgaWYgdGhpcyBwYXJ0aWFsXG4gIHZhciBjdXJyZW50UGFydGlhbEJsb2NrID0gb3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuZGF0YVsncGFydGlhbC1ibG9jayddO1xuICBvcHRpb25zLnBhcnRpYWwgPSB0cnVlO1xuICBpZiAob3B0aW9ucy5pZHMpIHtcbiAgICBvcHRpb25zLmRhdGEuY29udGV4dFBhdGggPSBvcHRpb25zLmlkc1swXSB8fCBvcHRpb25zLmRhdGEuY29udGV4dFBhdGg7XG4gIH1cblxuICB2YXIgcGFydGlhbEJsb2NrID0gdW5kZWZpbmVkO1xuICBpZiAob3B0aW9ucy5mbiAmJiBvcHRpb25zLmZuICE9PSBub29wKSB7XG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgIG9wdGlvbnMuZGF0YSA9IF9iYXNlLmNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgICAvLyBXcmFwcGVyIGZ1bmN0aW9uIHRvIGdldCBhY2Nlc3MgdG8gY3VycmVudFBhcnRpYWxCbG9jayBmcm9tIHRoZSBjbG9zdXJlXG4gICAgICB2YXIgZm4gPSBvcHRpb25zLmZuO1xuICAgICAgcGFydGlhbEJsb2NrID0gb3B0aW9ucy5kYXRhWydwYXJ0aWFsLWJsb2NrJ10gPSBmdW5jdGlvbiBwYXJ0aWFsQmxvY2tXcmFwcGVyKGNvbnRleHQpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1sxXTtcblxuICAgICAgICAvLyBSZXN0b3JlIHRoZSBwYXJ0aWFsLWJsb2NrIGZyb20gdGhlIGNsb3N1cmUgZm9yIHRoZSBleGVjdXRpb24gb2YgdGhlIGJsb2NrXG4gICAgICAgIC8vIGkuZS4gdGhlIHBhcnQgaW5zaWRlIHRoZSBibG9jayBvZiB0aGUgcGFydGlhbCBjYWxsLlxuICAgICAgICBvcHRpb25zLmRhdGEgPSBfYmFzZS5jcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgICAgICBvcHRpb25zLmRhdGFbJ3BhcnRpYWwtYmxvY2snXSA9IGN1cnJlbnRQYXJ0aWFsQmxvY2s7XG4gICAgICAgIHJldHVybiBmbihjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgIH07XG4gICAgICBpZiAoZm4ucGFydGlhbHMpIHtcbiAgICAgICAgb3B0aW9ucy5wYXJ0aWFscyA9IFV0aWxzLmV4dGVuZCh7fSwgb3B0aW9ucy5wYXJ0aWFscywgZm4ucGFydGlhbHMpO1xuICAgICAgfVxuICAgIH0pKCk7XG4gIH1cblxuICBpZiAocGFydGlhbCA9PT0gdW5kZWZpbmVkICYmIHBhcnRpYWxCbG9jaykge1xuICAgIHBhcnRpYWwgPSBwYXJ0aWFsQmxvY2s7XG4gIH1cblxuICBpZiAocGFydGlhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1RoZSBwYXJ0aWFsICcgKyBvcHRpb25zLm5hbWUgKyAnIGNvdWxkIG5vdCBiZSBmb3VuZCcpO1xuICB9IGVsc2UgaWYgKHBhcnRpYWwgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgIHJldHVybiBwYXJ0aWFsKGNvbnRleHQsIG9wdGlvbnMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7XG4gIHJldHVybiAnJztcbn1cblxuZnVuY3Rpb24gaW5pdERhdGEoY29udGV4dCwgZGF0YSkge1xuICBpZiAoIWRhdGEgfHwgISgncm9vdCcgaW4gZGF0YSkpIHtcbiAgICBkYXRhID0gZGF0YSA/IF9iYXNlLmNyZWF0ZUZyYW1lKGRhdGEpIDoge307XG4gICAgZGF0YS5yb290ID0gY29udGV4dDtcbiAgfVxuICByZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZXhlY3V0ZURlY29yYXRvcnMoZm4sIHByb2csIGNvbnRhaW5lciwgZGVwdGhzLCBkYXRhLCBibG9ja1BhcmFtcykge1xuICBpZiAoZm4uZGVjb3JhdG9yKSB7XG4gICAgdmFyIHByb3BzID0ge307XG4gICAgcHJvZyA9IGZuLmRlY29yYXRvcihwcm9nLCBwcm9wcywgY29udGFpbmVyLCBkZXB0aHMgJiYgZGVwdGhzWzBdLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKTtcbiAgICBVdGlscy5leHRlbmQocHJvZywgcHJvcHMpO1xuICB9XG4gIHJldHVybiBwcm9nO1xufVxuXG5mdW5jdGlvbiB3cmFwSGVscGVyc1RvUGFzc0xvb2t1cFByb3BlcnR5KG1lcmdlZEhlbHBlcnMsIGNvbnRhaW5lcikge1xuICBPYmplY3Qua2V5cyhtZXJnZWRIZWxwZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChoZWxwZXJOYW1lKSB7XG4gICAgdmFyIGhlbHBlciA9IG1lcmdlZEhlbHBlcnNbaGVscGVyTmFtZV07XG4gICAgbWVyZ2VkSGVscGVyc1toZWxwZXJOYW1lXSA9IHBhc3NMb29rdXBQcm9wZXJ0eU9wdGlvbihoZWxwZXIsIGNvbnRhaW5lcik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwYXNzTG9va3VwUHJvcGVydHlPcHRpb24oaGVscGVyLCBjb250YWluZXIpIHtcbiAgdmFyIGxvb2t1cFByb3BlcnR5ID0gY29udGFpbmVyLmxvb2t1cFByb3BlcnR5O1xuICByZXR1cm4gX2ludGVybmFsV3JhcEhlbHBlci53cmFwSGVscGVyKGhlbHBlciwgZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gVXRpbHMuZXh0ZW5kKHsgbG9va3VwUHJvcGVydHk6IGxvb2t1cFByb3BlcnR5IH0sIG9wdGlvbnMpO1xuICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDNKMWJuUnBiV1V1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3pzN096czdPenM3Y1VKQlFYVkNMRk5CUVZNN08wbEJRWEJDTEV0QlFVczdPM2xDUVVOTExHRkJRV0U3T3pzN2IwSkJUVFZDTEZGQlFWRTdPM1ZDUVVOdFFpeFhRVUZYT3p0clEwRkRiRUlzZFVKQlFYVkNPenR0UTBGSk0wTXNlVUpCUVhsQ096dEJRVVY2UWl4VFFVRlRMR0ZCUVdFc1EwRkJReXhaUVVGWkxFVkJRVVU3UVVGRE1VTXNUVUZCVFN4blFrRkJaMElzUjBGQlJ5eEJRVUZETEZsQlFWa3NTVUZCU1N4WlFVRlpMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVXNzUTBGQlF6dE5RVU0zUkN4bFFVRmxMREJDUVVGdlFpeERRVUZET3p0QlFVVjBReXhOUVVORkxHZENRVUZuUWl3eVEwRkJjVU1zU1VGRGNrUXNaMEpCUVdkQ0xESkNRVUZ4UWl4RlFVTnlRenRCUVVOQkxGZEJRVTg3UjBGRFVqczdRVUZGUkN4TlFVRkpMR2RDUVVGblFpd3dRMEZCYjBNc1JVRkJSVHRCUVVONFJDeFJRVUZOTEdWQlFXVXNSMEZCUnl4MVFrRkJhVUlzWlVGQlpTeERRVUZETzFGQlEzWkVMR2RDUVVGblFpeEhRVUZITEhWQ1FVRnBRaXhuUWtGQlowSXNRMEZCUXl4RFFVRkRPMEZCUTNoRUxGVkJRVTBzTWtKQlEwb3NlVVpCUVhsR0xFZEJRM1pHTEhGRVFVRnhSQ3hIUVVOeVJDeGxRVUZsTEVkQlEyWXNiVVJCUVcxRUxFZEJRMjVFTEdkQ1FVRm5RaXhIUVVOb1FpeEpRVUZKTEVOQlExQXNRMEZCUXp0SFFVTklMRTFCUVUwN08wRkJSVXdzVlVGQlRTd3lRa0ZEU2l4M1JrRkJkMFlzUjBGRGRFWXNhVVJCUVdsRUxFZEJRMnBFTEZsQlFWa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkRaaXhKUVVGSkxFTkJRMUFzUTBGQlF6dEhRVU5JTzBOQlEwWTdPMEZCUlUwc1UwRkJVeXhSUVVGUkxFTkJRVU1zV1VGQldTeEZRVUZGTEVkQlFVY3NSVUZCUlRzN1FVRkZNVU1zVFVGQlNTeERRVUZETEVkQlFVY3NSVUZCUlR0QlFVTlNMRlZCUVUwc01rSkJRV01zYlVOQlFXMURMRU5CUVVNc1EwRkJRenRIUVVNeFJEdEJRVU5FTEUxQlFVa3NRMEZCUXl4WlFVRlpMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zU1VGQlNTeEZRVUZGTzBGQlEzWkRMRlZCUVUwc01rSkJRV01zTWtKQlFUSkNMRWRCUVVjc1QwRkJUeXhaUVVGWkxFTkJRVU1zUTBGQlF6dEhRVU40UlRzN1FVRkZSQ3hqUVVGWkxFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNSMEZCUnl4WlFVRlpMRU5CUVVNc1RVRkJUU3hEUVVGRE96czdPMEZCU1d4RUxFdEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNZVUZCWVN4RFFVRkRMRmxCUVZrc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6czdPMEZCUnpWRExFMUJRVTBzYjBOQlFXOURMRWRCUTNoRExGbEJRVmtzUTBGQlF5eFJRVUZSTEVsQlFVa3NXVUZCV1N4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdPMEZCUlRGRUxGZEJRVk1zYjBKQlFXOUNMRU5CUVVNc1QwRkJUeXhGUVVGRkxFOUJRVThzUlVGQlJTeFBRVUZQTEVWQlFVVTdRVUZEZGtRc1VVRkJTU3hQUVVGUExFTkJRVU1zU1VGQlNTeEZRVUZGTzBGQlEyaENMR0ZCUVU4c1IwRkJSeXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETEVWQlFVVXNSVUZCUlN4UFFVRlBMRVZCUVVVc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBGQlEyeEVMRlZCUVVrc1QwRkJUeXhEUVVGRExFZEJRVWNzUlVGQlJUdEJRVU5tTEdWQlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETzA5QlEzWkNPMHRCUTBZN1FVRkRSQ3hYUVVGUExFZEJRVWNzUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4alFVRmpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeFBRVUZQTEVWQlFVVXNUMEZCVHl4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRE96dEJRVVYwUlN4UlFVRkpMR1ZCUVdVc1IwRkJSeXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETEVWQlFVVXNSVUZCUlN4UFFVRlBMRVZCUVVVN1FVRkRPVU1zVjBGQlN5eEZRVUZGTEVsQlFVa3NRMEZCUXl4TFFVRkxPMEZCUTJwQ0xIZENRVUZyUWl4RlFVRkZMRWxCUVVrc1EwRkJReXhyUWtGQmEwSTdTMEZETlVNc1EwRkJReXhEUVVGRE96dEJRVVZJTEZGQlFVa3NUVUZCVFN4SFFVRkhMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zWVVGQllTeERRVUZETEVsQlFVa3NRMEZEY0VNc1NVRkJTU3hGUVVOS0xFOUJRVThzUlVGRFVDeFBRVUZQTEVWQlExQXNaVUZCWlN4RFFVTm9RaXhEUVVGRE96dEJRVVZHTEZGQlFVa3NUVUZCVFN4SlFVRkpMRWxCUVVrc1NVRkJTU3hIUVVGSExFTkJRVU1zVDBGQlR5eEZRVUZGTzBGQlEycERMR0ZCUVU4c1EwRkJReXhSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRWRCUVVjc1EwRkJReXhQUVVGUExFTkJRekZETEU5QlFVOHNSVUZEVUN4WlFVRlpMRU5CUVVNc1pVRkJaU3hGUVVNMVFpeEhRVUZITEVOQlEwb3NRMEZCUXp0QlFVTkdMRmxCUVUwc1IwRkJSeXhQUVVGUExFTkJRVU1zVVVGQlVTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhQUVVGUExFVkJRVVVzWlVGQlpTeERRVUZETEVOQlFVTTdTMEZEYmtVN1FVRkRSQ3hSUVVGSkxFMUJRVTBzU1VGQlNTeEpRVUZKTEVWQlFVVTdRVUZEYkVJc1ZVRkJTU3hQUVVGUExFTkJRVU1zVFVGQlRTeEZRVUZGTzBGQlEyeENMRmxCUVVrc1MwRkJTeXhIUVVGSExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRMMElzWVVGQlN5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFdEJRVXNzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUdEJRVU0xUXl4alFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhGUVVGRk8wRkJRelZDTEd0Q1FVRk5PMWRCUTFBN08wRkJSVVFzWlVGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRTlCUVU4c1EwRkJReXhOUVVGTkxFZEJRVWNzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMU5CUTNSRE8wRkJRMFFzWTBGQlRTeEhRVUZITEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03VDBGRE0wSTdRVUZEUkN4aFFVRlBMRTFCUVUwc1EwRkJRenRMUVVObUxFMUJRVTA3UVVGRFRDeFpRVUZOTERKQ1FVTktMR05CUVdNc1IwRkRXaXhQUVVGUExFTkJRVU1zU1VGQlNTeEhRVU5hTERCRVFVRXdSQ3hEUVVNM1JDeERRVUZETzB0QlEwZzdSMEZEUmpzN08wRkJSMFFzVFVGQlNTeFRRVUZUTEVkQlFVYzdRVUZEWkN4VlFVRk5MRVZCUVVVc1owSkJRVk1zUjBGQlJ5eEZRVUZGTEVsQlFVa3NSVUZCUlN4SFFVRkhMRVZCUVVVN1FVRkRMMElzVlVGQlNTeERRVUZETEVkQlFVY3NTVUZCU1N4RlFVRkZMRWxCUVVrc1NVRkJTU3hIUVVGSExFTkJRVUVzUVVGQlF5eEZRVUZGTzBGQlF6RkNMR05CUVUwc01rSkJRV01zUjBGQlJ5eEhRVUZITEVsQlFVa3NSMEZCUnl4dFFrRkJiVUlzUjBGQlJ5eEhRVUZITEVWQlFVVTdRVUZETVVRc1lVRkJSeXhGUVVGRkxFZEJRVWM3VTBGRFZDeERRVUZETEVOQlFVTTdUMEZEU2p0QlFVTkVMR0ZCUVU4c1UwRkJVeXhEUVVGRExHTkJRV01zUTBGQlF5eEhRVUZITEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1MwRkROVU03UVVGRFJDeHJRa0ZCWXl4RlFVRkZMSGRDUVVGVExFMUJRVTBzUlVGQlJTeFpRVUZaTEVWQlFVVTdRVUZETjBNc1ZVRkJTU3hOUVVGTkxFZEJRVWNzVFVGQlRTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRPMEZCUTJ4RExGVkJRVWtzVFVGQlRTeEpRVUZKTEVsQlFVa3NSVUZCUlR0QlFVTnNRaXhsUVVGUExFMUJRVTBzUTBGQlF6dFBRVU5tTzBGQlEwUXNWVUZCU1N4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRmxCUVZrc1EwRkJReXhGUVVGRk8wRkJRemxFTEdWQlFVOHNUVUZCVFN4RFFVRkRPMDlCUTJZN08wRkJSVVFzVlVGQlNTeHhRMEZCWjBJc1RVRkJUU3hGUVVGRkxGTkJRVk1zUTBGQlF5eHJRa0ZCYTBJc1JVRkJSU3haUVVGWkxFTkJRVU1zUlVGQlJUdEJRVU4yUlN4bFFVRlBMRTFCUVUwc1EwRkJRenRQUVVObU8wRkJRMFFzWVVGQlR5eFRRVUZUTEVOQlFVTTdTMEZEYkVJN1FVRkRSQ3hWUVVGTkxFVkJRVVVzWjBKQlFWTXNUVUZCVFN4RlFVRkZMRWxCUVVrc1JVRkJSVHRCUVVNM1FpeFZRVUZOTEVkQlFVY3NSMEZCUnl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRE8wRkJRekZDTEZkQlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eEhRVUZITEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVN1FVRkROVUlzV1VGQlNTeE5RVUZOTEVkQlFVY3NUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxGTkJRVk1zUTBGQlF5eGpRVUZqTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzBGQlEzQkZMRmxCUVVrc1RVRkJUU3hKUVVGSkxFbEJRVWtzUlVGQlJUdEJRVU5zUWl4cFFrRkJUeXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1UwRkRlRUk3VDBGRFJqdExRVU5HTzBGQlEwUXNWVUZCVFN4RlFVRkZMR2RDUVVGVExFOUJRVThzUlVGQlJTeFBRVUZQTEVWQlFVVTdRVUZEYWtNc1lVRkJUeXhQUVVGUExFOUJRVThzUzBGQlN5eFZRVUZWTEVkQlFVY3NUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUjBGQlJ5eFBRVUZQTEVOQlFVTTdTMEZEZUVVN08wRkJSVVFzYjBKQlFXZENMRVZCUVVVc1MwRkJTeXhEUVVGRExHZENRVUZuUWp0QlFVTjRReXhwUWtGQllTeEZRVUZGTEc5Q1FVRnZRanM3UVVGRmJrTXNUVUZCUlN4RlFVRkZMRmxCUVZNc1EwRkJReXhGUVVGRk8wRkJRMlFzVlVGQlNTeEhRVUZITEVkQlFVY3NXVUZCV1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRekZDTEZOQlFVY3NRMEZCUXl4VFFVRlRMRWRCUVVjc1dVRkJXU3hEUVVGRExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNRMEZCUXp0QlFVTjJReXhoUVVGUExFZEJRVWNzUTBGQlF6dExRVU5hT3p0QlFVVkVMRmxCUVZFc1JVRkJSU3hGUVVGRk8wRkJRMW9zVjBGQlR5eEZRVUZGTEdsQ1FVRlRMRU5CUVVNc1JVRkJSU3hKUVVGSkxFVkJRVVVzYlVKQlFXMUNMRVZCUVVVc1YwRkJWeXhGUVVGRkxFMUJRVTBzUlVGQlJUdEJRVU51UlN4VlFVRkpMR05CUVdNc1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXp0VlFVTnVReXhGUVVGRkxFZEJRVWNzU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOc1FpeFZRVUZKTEVsQlFVa3NTVUZCU1N4TlFVRk5MRWxCUVVrc1YwRkJWeXhKUVVGSkxHMUNRVUZ0UWl4RlFVRkZPMEZCUTNoRUxITkNRVUZqTEVkQlFVY3NWMEZCVnl4RFFVTXhRaXhKUVVGSkxFVkJRMG9zUTBGQlF5eEZRVU5FTEVWQlFVVXNSVUZEUml4SlFVRkpMRVZCUTBvc2JVSkJRVzFDTEVWQlEyNUNMRmRCUVZjc1JVRkRXQ3hOUVVGTkxFTkJRMUFzUTBGQlF6dFBRVU5JTEUxQlFVMHNTVUZCU1N4RFFVRkRMR05CUVdNc1JVRkJSVHRCUVVNeFFpeHpRa0ZCWXl4SFFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NWMEZCVnl4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTTdUMEZET1VRN1FVRkRSQ3hoUVVGUExHTkJRV01zUTBGQlF6dExRVU4yUWpzN1FVRkZSQ3hSUVVGSkxFVkJRVVVzWTBGQlV5eExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZPMEZCUXpOQ0xHRkJRVThzUzBGQlN5eEpRVUZKTEV0QlFVc3NSVUZCUlN4RlFVRkZPMEZCUTNaQ0xHRkJRVXNzUjBGQlJ5eExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRPMDlCUTNaQ08wRkJRMFFzWVVGQlR5eExRVUZMTEVOQlFVTTdTMEZEWkR0QlFVTkVMR2xDUVVGaExFVkJRVVVzZFVKQlFWTXNTMEZCU3l4RlFVRkZMRTFCUVUwc1JVRkJSVHRCUVVOeVF5eFZRVUZKTEVkQlFVY3NSMEZCUnl4TFFVRkxMRWxCUVVrc1RVRkJUU3hEUVVGRE96dEJRVVV4UWl4VlFVRkpMRXRCUVVzc1NVRkJTU3hOUVVGTkxFbEJRVWtzUzBGQlN5eExRVUZMTEUxQlFVMHNSVUZCUlR0QlFVTjJReXhYUVVGSExFZEJRVWNzUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4RlFVRkZMRVZCUVVVc1RVRkJUU3hGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzA5QlEzWkRPenRCUVVWRUxHRkJRVThzUjBGQlJ5eERRVUZETzB0QlExbzdPMEZCUlVRc1pVRkJWeXhGUVVGRkxFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRPenRCUVVVMVFpeFJRVUZKTEVWQlFVVXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhKUVVGSk8wRkJRMnBDTEdkQ1FVRlpMRVZCUVVVc1dVRkJXU3hEUVVGRExGRkJRVkU3UjBGRGNFTXNRMEZCUXpzN1FVRkZSaXhYUVVGVExFZEJRVWNzUTBGQlF5eFBRVUZQTEVWQlFXZENPMUZCUVdRc1QwRkJUeXg1UkVGQlJ5eEZRVUZGT3p0QlFVTm9ReXhSUVVGSkxFbEJRVWtzUjBGQlJ5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRPenRCUVVWNFFpeFBRVUZITEVOQlFVTXNUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8wRkJRM0JDTEZGQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1QwRkJUeXhKUVVGSkxGbEJRVmtzUTBGQlF5eFBRVUZQTEVWQlFVVTdRVUZETlVNc1ZVRkJTU3hIUVVGSExGRkJRVkVzUTBGQlF5eFBRVUZQTEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1MwRkRhRU03UVVGRFJDeFJRVUZKTEUxQlFVMHNXVUZCUVR0UlFVTlNMRmRCUVZjc1IwRkJSeXhaUVVGWkxFTkJRVU1zWTBGQll5eEhRVUZITEVWQlFVVXNSMEZCUnl4VFFVRlRMRU5CUVVNN1FVRkROMFFzVVVGQlNTeFpRVUZaTEVOQlFVTXNVMEZCVXl4RlFVRkZPMEZCUXpGQ0xGVkJRVWtzVDBGQlR5eERRVUZETEUxQlFVMHNSVUZCUlR0QlFVTnNRaXhqUVVGTkxFZEJRMG9zVDBGQlR5eEpRVUZKTEU5QlFVOHNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRM2hDTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZEYUVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF6dFBRVU4wUWl4TlFVRk5PMEZCUTB3c1kwRkJUU3hIUVVGSExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdUMEZEY0VJN1MwRkRSanM3UVVGRlJDeGhRVUZUTEVsQlFVa3NRMEZCUXl4UFFVRlBMR2RDUVVGblFqdEJRVU51UXl4aFFVTkZMRVZCUVVVc1IwRkRSaXhaUVVGWkxFTkJRVU1zU1VGQlNTeERRVU5tTEZOQlFWTXNSVUZEVkN4UFFVRlBMRVZCUTFBc1UwRkJVeXhEUVVGRExFOUJRVThzUlVGRGFrSXNVMEZCVXl4RFFVRkRMRkZCUVZFc1JVRkRiRUlzU1VGQlNTeEZRVU5LTEZkQlFWY3NSVUZEV0N4TlFVRk5MRU5CUTFBc1EwRkRSRHRMUVVOSU96dEJRVVZFTEZGQlFVa3NSMEZCUnl4cFFrRkJhVUlzUTBGRGRFSXNXVUZCV1N4RFFVRkRMRWxCUVVrc1JVRkRha0lzU1VGQlNTeEZRVU5LTEZOQlFWTXNSVUZEVkN4UFFVRlBMRU5CUVVNc1RVRkJUU3hKUVVGSkxFVkJRVVVzUlVGRGNFSXNTVUZCU1N4RlFVTktMRmRCUVZjc1EwRkRXaXhEUVVGRE8wRkJRMFlzVjBGQlR5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRE8wZEJReTlDT3p0QlFVVkVMRXRCUVVjc1EwRkJReXhMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZET3p0QlFVVnFRaXhMUVVGSExFTkJRVU1zVFVGQlRTeEhRVUZITEZWQlFWTXNUMEZCVHl4RlFVRkZPMEZCUXpkQ0xGRkJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RlFVRkZPMEZCUTNCQ0xGVkJRVWtzWVVGQllTeEhRVUZITEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1JVRkJSU3hGUVVGRkxFZEJRVWNzUTBGQlF5eFBRVUZQTEVWQlFVVXNUMEZCVHl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8wRkJRMjVGTEhGRFFVRXJRaXhEUVVGRExHRkJRV0VzUlVGQlJTeFRRVUZUTEVOQlFVTXNRMEZCUXp0QlFVTXhSQ3hsUVVGVExFTkJRVU1zVDBGQlR5eEhRVUZITEdGQlFXRXNRMEZCUXpzN1FVRkZiRU1zVlVGQlNTeFpRVUZaTEVOQlFVTXNWVUZCVlN4RlFVRkZPenRCUVVVelFpeHBRa0ZCVXl4RFFVRkRMRkZCUVZFc1IwRkJSeXhUUVVGVExFTkJRVU1zWVVGQllTeERRVU14UXl4UFFVRlBMRU5CUVVNc1VVRkJVU3hGUVVOb1FpeEhRVUZITEVOQlFVTXNVVUZCVVN4RFFVTmlMRU5CUVVNN1QwRkRTRHRCUVVORUxGVkJRVWtzV1VGQldTeERRVUZETEZWQlFWVXNTVUZCU1N4WlFVRlpMRU5CUVVNc1lVRkJZU3hGUVVGRk8wRkJRM3BFTEdsQ1FVRlRMRU5CUVVNc1ZVRkJWU3hIUVVGSExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlEycERMRVZCUVVVc1JVRkRSaXhIUVVGSExFTkJRVU1zVlVGQlZTeEZRVU5rTEU5QlFVOHNRMEZCUXl4VlFVRlZMRU5CUTI1Q0xFTkJRVU03VDBGRFNEczdRVUZGUkN4bFFVRlRMRU5CUVVNc1MwRkJTeXhIUVVGSExFVkJRVVVzUTBGQlF6dEJRVU55UWl4bFFVRlRMRU5CUVVNc2EwSkJRV3RDTEVkQlFVY3NPRU5CUVhsQ0xFOUJRVThzUTBGQlF5eERRVUZET3p0QlFVVnFSU3hWUVVGSkxHMUNRVUZ0UWl4SFFVTnlRaXhQUVVGUExFTkJRVU1zZVVKQlFYbENMRWxCUTJwRExHOURRVUZ2UXl4RFFVRkRPMEZCUTNaRExHbERRVUZyUWl4VFFVRlRMRVZCUVVVc1pVRkJaU3hGUVVGRkxHMUNRVUZ0UWl4RFFVRkRMRU5CUVVNN1FVRkRia1VzYVVOQlFXdENMRk5CUVZNc1JVRkJSU3h2UWtGQmIwSXNSVUZCUlN4dFFrRkJiVUlzUTBGQlF5eERRVUZETzB0QlEzcEZMRTFCUVUwN1FVRkRUQ3hsUVVGVExFTkJRVU1zYTBKQlFXdENMRWRCUVVjc1QwRkJUeXhEUVVGRExHdENRVUZyUWl4RFFVRkRPMEZCUXpGRUxHVkJRVk1zUTBGQlF5eFBRVUZQTEVkQlFVY3NUMEZCVHl4RFFVRkRMRTlCUVU4c1EwRkJRenRCUVVOd1F5eGxRVUZUTEVOQlFVTXNVVUZCVVN4SFFVRkhMRTlCUVU4c1EwRkJReXhSUVVGUkxFTkJRVU03UVVGRGRFTXNaVUZCVXl4RFFVRkRMRlZCUVZVc1IwRkJSeXhQUVVGUExFTkJRVU1zVlVGQlZTeERRVUZETzBGQlF6RkRMR1ZCUVZNc1EwRkJReXhMUVVGTExFZEJRVWNzVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXp0TFFVTnFRenRIUVVOR0xFTkJRVU03TzBGQlJVWXNTMEZCUnl4RFFVRkRMRTFCUVUwc1IwRkJSeXhWUVVGVExFTkJRVU1zUlVGQlJTeEpRVUZKTEVWQlFVVXNWMEZCVnl4RlFVRkZMRTFCUVUwc1JVRkJSVHRCUVVOc1JDeFJRVUZKTEZsQlFWa3NRMEZCUXl4alFVRmpMRWxCUVVrc1EwRkJReXhYUVVGWExFVkJRVVU3UVVGREwwTXNXVUZCVFN3eVFrRkJZeXgzUWtGQmQwSXNRMEZCUXl4RFFVRkRPMHRCUXk5RE8wRkJRMFFzVVVGQlNTeFpRVUZaTEVOQlFVTXNVMEZCVXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRk8wRkJRM0pETEZsQlFVMHNNa0pCUVdNc2VVSkJRWGxDTEVOQlFVTXNRMEZCUXp0TFFVTm9SRHM3UVVGRlJDeFhRVUZQTEZkQlFWY3NRMEZEYUVJc1UwRkJVeXhGUVVOVUxFTkJRVU1zUlVGRFJDeFpRVUZaTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUTJZc1NVRkJTU3hGUVVOS0xFTkJRVU1zUlVGRFJDeFhRVUZYTEVWQlExZ3NUVUZCVFN4RFFVTlFMRU5CUVVNN1IwRkRTQ3hEUVVGRE8wRkJRMFlzVTBGQlR5eEhRVUZITEVOQlFVTTdRMEZEV2pzN1FVRkZUU3hUUVVGVExGZEJRVmNzUTBGRGVrSXNVMEZCVXl4RlFVTlVMRU5CUVVNc1JVRkRSQ3hGUVVGRkxFVkJRMFlzU1VGQlNTeEZRVU5LTEcxQ1FVRnRRaXhGUVVOdVFpeFhRVUZYTEVWQlExZ3NUVUZCVFN4RlFVTk9PMEZCUTBFc1YwRkJVeXhKUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZuUWp0UlFVRmtMRTlCUVU4c2VVUkJRVWNzUlVGQlJUczdRVUZEYWtNc1VVRkJTU3hoUVVGaExFZEJRVWNzVFVGQlRTeERRVUZETzBGQlF6TkNMRkZCUTBVc1RVRkJUU3hKUVVOT0xFOUJRVThzU1VGQlNTeE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUTNCQ0xFVkJRVVVzVDBGQlR5eExRVUZMTEZOQlFWTXNRMEZCUXl4WFFVRlhMRWxCUVVrc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEVsQlFVa3NRMEZCUVN4QlFVRkRMRVZCUXpGRU8wRkJRMEVzYlVKQlFXRXNSMEZCUnl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0TFFVTXhRenM3UVVGRlJDeFhRVUZQTEVWQlFVVXNRMEZEVUN4VFFVRlRMRVZCUTFRc1QwRkJUeXhGUVVOUUxGTkJRVk1zUTBGQlF5eFBRVUZQTEVWQlEycENMRk5CUVZNc1EwRkJReXhSUVVGUkxFVkJRMnhDTEU5QlFVOHNRMEZCUXl4SlFVRkpMRWxCUVVrc1NVRkJTU3hGUVVOd1FpeFhRVUZYTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEZkQlFWY3NRMEZCUXl4RlFVTjRSQ3hoUVVGaExFTkJRMlFzUTBGQlF6dEhRVU5JT3p0QlFVVkVMRTFCUVVrc1IwRkJSeXhwUWtGQmFVSXNRMEZCUXl4RlFVRkZMRVZCUVVVc1NVRkJTU3hGUVVGRkxGTkJRVk1zUlVGQlJTeE5RVUZOTEVWQlFVVXNTVUZCU1N4RlFVRkZMRmRCUVZjc1EwRkJReXhEUVVGRE96dEJRVVY2UlN4TlFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU5xUWl4TlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExFMUJRVTBzUjBGQlJ5eE5RVUZOTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVONFF5eE5RVUZKTEVOQlFVTXNWMEZCVnl4SFFVRkhMRzFDUVVGdFFpeEpRVUZKTEVOQlFVTXNRMEZCUXp0QlFVTTFReXhUUVVGUExFbEJRVWtzUTBGQlF6dERRVU5pT3pzN096czdRVUZMVFN4VFFVRlRMR05CUVdNc1EwRkJReXhQUVVGUExFVkJRVVVzVDBGQlR5eEZRVUZGTEU5QlFVOHNSVUZCUlR0QlFVTjRSQ3hOUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTzBGQlExb3NVVUZCU1N4UFFVRlBMRU5CUVVNc1NVRkJTU3hMUVVGTExHZENRVUZuUWl4RlFVRkZPMEZCUTNKRExHRkJRVThzUjBGQlJ5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJReXhEUVVGRE8wdEJRM3BETEUxQlFVMDdRVUZEVEN4aFFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGRExGRkJRVkVzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1MwRkRNVU03UjBGRFJpeE5RVUZOTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NSVUZCUlRzN1FVRkZla01zVjBGQlR5eERRVUZETEVsQlFVa3NSMEZCUnl4UFFVRlBMRU5CUVVNN1FVRkRka0lzVjBGQlR5eEhRVUZITEU5QlFVOHNRMEZCUXl4UlFVRlJMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03UjBGRGNrTTdRVUZEUkN4VFFVRlBMRTlCUVU4c1EwRkJRenREUVVOb1FqczdRVUZGVFN4VFFVRlRMR0ZCUVdFc1EwRkJReXhQUVVGUExFVkJRVVVzVDBGQlR5eEZRVUZGTEU5QlFVOHNSVUZCUlRzN1FVRkZka1FzVFVGQlRTeHRRa0ZCYlVJc1IwRkJSeXhQUVVGUExFTkJRVU1zU1VGQlNTeEpRVUZKTEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExFTkJRVU03UVVGRE1VVXNVMEZCVHl4RFFVRkRMRTlCUVU4c1IwRkJSeXhKUVVGSkxFTkJRVU03UVVGRGRrSXNUVUZCU1N4UFFVRlBMRU5CUVVNc1IwRkJSeXhGUVVGRk8wRkJRMllzVjBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRWRCUVVjc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF6dEhRVU4yUlRzN1FVRkZSQ3hOUVVGSkxGbEJRVmtzV1VGQlFTeERRVUZETzBGQlEycENMRTFCUVVrc1QwRkJUeXhEUVVGRExFVkJRVVVzU1VGQlNTeFBRVUZQTEVOQlFVTXNSVUZCUlN4TFFVRkxMRWxCUVVrc1JVRkJSVHM3UVVGRGNrTXNZVUZCVHl4RFFVRkRMRWxCUVVrc1IwRkJSeXhyUWtGQldTeFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN08wRkJSWHBETEZWQlFVa3NSVUZCUlN4SFFVRkhMRTlCUVU4c1EwRkJReXhGUVVGRkxFTkJRVU03UVVGRGNFSXNhMEpCUVZrc1IwRkJSeXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4SFFVRkhMRk5CUVZNc2JVSkJRVzFDTEVOQlEzcEZMRTlCUVU4c1JVRkZVRHRaUVVSQkxFOUJRVThzZVVSQlFVY3NSVUZCUlRzN096dEJRVWxhTEdWQlFVOHNRMEZCUXl4SlFVRkpMRWRCUVVjc2EwSkJRVmtzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMEZCUTNwRExHVkJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRWRCUVVjc2JVSkJRVzFDTEVOQlFVTTdRVUZEY0VRc1pVRkJUeXhGUVVGRkxFTkJRVU1zVDBGQlR5eEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRPMDlCUXpkQ0xFTkJRVU03UVVGRFJpeFZRVUZKTEVWQlFVVXNRMEZCUXl4UlFVRlJMRVZCUVVVN1FVRkRaaXhsUVVGUExFTkJRVU1zVVVGQlVTeEhRVUZITEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1JVRkJSU3hGUVVGRkxFOUJRVThzUTBGQlF5eFJRVUZSTEVWQlFVVXNSVUZCUlN4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wOUJRM0JGT3p0SFFVTkdPenRCUVVWRUxFMUJRVWtzVDBGQlR5eExRVUZMTEZOQlFWTXNTVUZCU1N4WlFVRlpMRVZCUVVVN1FVRkRla01zVjBGQlR5eEhRVUZITEZsQlFWa3NRMEZCUXp0SFFVTjRRanM3UVVGRlJDeE5RVUZKTEU5QlFVOHNTMEZCU3l4VFFVRlRMRVZCUVVVN1FVRkRla0lzVlVGQlRTd3lRa0ZCWXl4alFVRmpMRWRCUVVjc1QwRkJUeXhEUVVGRExFbEJRVWtzUjBGQlJ5eHhRa0ZCY1VJc1EwRkJReXhEUVVGRE8wZEJRelZGTEUxQlFVMHNTVUZCU1N4UFFVRlBMRmxCUVZrc1VVRkJVU3hGUVVGRk8wRkJRM1JETEZkQlFVOHNUMEZCVHl4RFFVRkRMRTlCUVU4c1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlF6dEhRVU5zUXp0RFFVTkdPenRCUVVWTkxGTkJRVk1zU1VGQlNTeEhRVUZITzBGQlEzSkNMRk5CUVU4c1JVRkJSU3hEUVVGRE8wTkJRMWc3TzBGQlJVUXNVMEZCVXl4UlFVRlJMRU5CUVVNc1QwRkJUeXhGUVVGRkxFbEJRVWtzUlVGQlJUdEJRVU12UWl4TlFVRkpMRU5CUVVNc1NVRkJTU3hKUVVGSkxFVkJRVVVzVFVGQlRTeEpRVUZKTEVsQlFVa3NRMEZCUVN4QlFVRkRMRVZCUVVVN1FVRkRPVUlzVVVGQlNTeEhRVUZITEVsQlFVa3NSMEZCUnl4clFrRkJXU3hKUVVGSkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTTdRVUZEY2tNc1VVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eFBRVUZQTEVOQlFVTTdSMEZEY2tJN1FVRkRSQ3hUUVVGUExFbEJRVWtzUTBGQlF6dERRVU5pT3p0QlFVVkVMRk5CUVZNc2FVSkJRV2xDTEVOQlFVTXNSVUZCUlN4RlFVRkZMRWxCUVVrc1JVRkJSU3hUUVVGVExFVkJRVVVzVFVGQlRTeEZRVUZGTEVsQlFVa3NSVUZCUlN4WFFVRlhMRVZCUVVVN1FVRkRla1VzVFVGQlNTeEZRVUZGTEVOQlFVTXNVMEZCVXl4RlFVRkZPMEZCUTJoQ0xGRkJRVWtzUzBGQlN5eEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTm1MRkZCUVVrc1IwRkJSeXhGUVVGRkxFTkJRVU1zVTBGQlV5eERRVU5xUWl4SlFVRkpMRVZCUTBvc1MwRkJTeXhGUVVOTUxGTkJRVk1zUlVGRFZDeE5RVUZOTEVsQlFVa3NUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVOdVFpeEpRVUZKTEVWQlEwb3NWMEZCVnl4RlFVTllMRTFCUVUwc1EwRkRVQ3hEUVVGRE8wRkJRMFlzVTBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03UjBGRE0wSTdRVUZEUkN4VFFVRlBMRWxCUVVrc1EwRkJRenREUVVOaU96dEJRVVZFTEZOQlFWTXNLMEpCUVN0Q0xFTkJRVU1zWVVGQllTeEZRVUZGTEZOQlFWTXNSVUZCUlR0QlFVTnFSU3hSUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGQkxGVkJRVlVzUlVGQlNUdEJRVU12UXl4UlFVRkpMRTFCUVUwc1IwRkJSeXhoUVVGaExFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdRVUZEZGtNc2FVSkJRV0VzUTBGQlF5eFZRVUZWTEVOQlFVTXNSMEZCUnl4M1FrRkJkMElzUTBGQlF5eE5RVUZOTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNN1IwRkRla1VzUTBGQlF5eERRVUZETzBOQlEwbzdPMEZCUlVRc1UwRkJVeXgzUWtGQmQwSXNRMEZCUXl4TlFVRk5MRVZCUVVVc1UwRkJVeXhGUVVGRk8wRkJRMjVFTEUxQlFVMHNZMEZCWXl4SFFVRkhMRk5CUVZNc1EwRkJReXhqUVVGakxFTkJRVU03UVVGRGFFUXNVMEZCVHl3clFrRkJWeXhOUVVGTkxFVkJRVVVzVlVGQlFTeFBRVUZQTEVWQlFVazdRVUZEYmtNc1YwRkJUeXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETEVWQlFVVXNZMEZCWXl4RlFVRmtMR05CUVdNc1JVRkJSU3hGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZETzBkQlEyeEVMRU5CUVVNc1EwRkJRenREUVVOS0lpd2labWxzWlNJNkluSjFiblJwYldVdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdLaUJoY3lCVmRHbHNjeUJtY205dElDY3VMM1YwYVd4ekp6dGNibWx0Y0c5eWRDQkZlR05sY0hScGIyNGdabkp2YlNBbkxpOWxlR05sY0hScGIyNG5PMXh1YVcxd2IzSjBJSHRjYmlBZ1EwOU5VRWxNUlZKZlVrVldTVk5KVDA0c1hHNGdJR055WldGMFpVWnlZVzFsTEZ4dUlDQk1RVk5VWDBOUFRWQkJWRWxDVEVWZlEwOU5VRWxNUlZKZlVrVldTVk5KVDA0c1hHNGdJRkpGVmtsVFNVOU9YME5JUVU1SFJWTmNibjBnWm5KdmJTQW5MaTlpWVhObEp6dGNibWx0Y0c5eWRDQjdJRzF2ZG1WSVpXeHdaWEpVYjBodmIydHpJSDBnWm5KdmJTQW5MaTlvWld4d1pYSnpKenRjYm1sdGNHOXlkQ0I3SUhkeVlYQklaV3h3WlhJZ2ZTQm1jbTl0SUNjdUwybHVkR1Z5Ym1Gc0wzZHlZWEJJWld4d1pYSW5PMXh1YVcxd2IzSjBJSHRjYmlBZ1kzSmxZWFJsVUhKdmRHOUJZMk5sYzNORGIyNTBjbTlzTEZ4dUlDQnlaWE4xYkhSSmMwRnNiRzkzWldSY2JuMGdabkp2YlNBbkxpOXBiblJsY201aGJDOXdjbTkwYnkxaFkyTmxjM01uTzF4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1kyaGxZMnRTWlhacGMybHZiaWhqYjIxd2FXeGxja2x1Wm04cElIdGNiaUFnWTI5dWMzUWdZMjl0Y0dsc1pYSlNaWFpwYzJsdmJpQTlJQ2hqYjIxd2FXeGxja2x1Wm04Z0ppWWdZMjl0Y0dsc1pYSkpibVp2V3pCZEtTQjhmQ0F4TEZ4dUlDQWdJR04xY25KbGJuUlNaWFpwYzJsdmJpQTlJRU5QVFZCSlRFVlNYMUpGVmtsVFNVOU9PMXh1WEc0Z0lHbG1JQ2hjYmlBZ0lDQmpiMjF3YVd4bGNsSmxkbWx6YVc5dUlENDlJRXhCVTFSZlEwOU5VRUZVU1VKTVJWOURUMDFRU1V4RlVsOVNSVlpKVTBsUFRpQW1KbHh1SUNBZ0lHTnZiWEJwYkdWeVVtVjJhWE5wYjI0Z1BEMGdRMDlOVUVsTVJWSmZVa1ZXU1ZOSlQwNWNiaUFnS1NCN1hHNGdJQ0FnY21WMGRYSnVPMXh1SUNCOVhHNWNiaUFnYVdZZ0tHTnZiWEJwYkdWeVVtVjJhWE5wYjI0Z1BDQk1RVk5VWDBOUFRWQkJWRWxDVEVWZlEwOU5VRWxNUlZKZlVrVldTVk5KVDA0cElIdGNiaUFnSUNCamIyNXpkQ0J5ZFc1MGFXMWxWbVZ5YzJsdmJuTWdQU0JTUlZaSlUwbFBUbDlEU0VGT1IwVlRXMk4xY25KbGJuUlNaWFpwYzJsdmJsMHNYRzRnSUNBZ0lDQmpiMjF3YVd4bGNsWmxjbk5wYjI1eklEMGdVa1ZXU1ZOSlQwNWZRMGhCVGtkRlUxdGpiMjF3YVd4bGNsSmxkbWx6YVc5dVhUdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYaGpaWEIwYVc5dUtGeHVJQ0FnSUNBZ0oxUmxiWEJzWVhSbElIZGhjeUJ3Y21WamIyMXdhV3hsWkNCM2FYUm9JR0Z1SUc5c1pHVnlJSFpsY25OcGIyNGdiMllnU0dGdVpHeGxZbUZ5Y3lCMGFHRnVJSFJvWlNCamRYSnlaVzUwSUhKMWJuUnBiV1V1SUNjZ0sxeHVJQ0FnSUNBZ0lDQW5VR3hsWVhObElIVndaR0YwWlNCNWIzVnlJSEJ5WldOdmJYQnBiR1Z5SUhSdklHRWdibVYzWlhJZ2RtVnljMmx2YmlBb0p5QXJYRzRnSUNBZ0lDQWdJSEoxYm5ScGJXVldaWEp6YVc5dWN5QXJYRzRnSUNBZ0lDQWdJQ2NwSUc5eUlHUnZkMjVuY21Ga1pTQjViM1Z5SUhKMWJuUnBiV1VnZEc4Z1lXNGdiMnhrWlhJZ2RtVnljMmx2YmlBb0p5QXJYRzRnSUNBZ0lDQWdJR052YlhCcGJHVnlWbVZ5YzJsdmJuTWdLMXh1SUNBZ0lDQWdJQ0FuS1M0blhHNGdJQ0FnS1R0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNBdkx5QlZjMlVnZEdobElHVnRZbVZrWkdWa0lIWmxjbk5wYjI0Z2FXNW1ieUJ6YVc1alpTQjBhR1VnY25WdWRHbHRaU0JrYjJWemJpZDBJR3R1YjNjZ1lXSnZkWFFnZEdocGN5QnlaWFpwYzJsdmJpQjVaWFJjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWGhqWlhCMGFXOXVLRnh1SUNBZ0lDQWdKMVJsYlhCc1lYUmxJSGRoY3lCd2NtVmpiMjF3YVd4bFpDQjNhWFJvSUdFZ2JtVjNaWElnZG1WeWMybHZiaUJ2WmlCSVlXNWtiR1ZpWVhKeklIUm9ZVzRnZEdobElHTjFjbkpsYm5RZ2NuVnVkR2x0WlM0Z0p5QXJYRzRnSUNBZ0lDQWdJQ2RRYkdWaGMyVWdkWEJrWVhSbElIbHZkWElnY25WdWRHbHRaU0IwYnlCaElHNWxkMlZ5SUhabGNuTnBiMjRnS0NjZ0sxeHVJQ0FnSUNBZ0lDQmpiMjF3YVd4bGNrbHVabTliTVYwZ0sxeHVJQ0FnSUNBZ0lDQW5LUzRuWEc0Z0lDQWdLVHRjYmlBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnZEdWdGNHeGhkR1VvZEdWdGNHeGhkR1ZUY0dWakxDQmxibllwSUh0Y2JpQWdMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJRzVsZUhRZ0tpOWNiaUFnYVdZZ0tDRmxibllwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhoalpYQjBhVzl1S0NkT2J5QmxiblpwY205dWJXVnVkQ0J3WVhOelpXUWdkRzhnZEdWdGNHeGhkR1VuS1R0Y2JpQWdmVnh1SUNCcFppQW9JWFJsYlhCc1lYUmxVM0JsWXlCOGZDQWhkR1Z0Y0d4aGRHVlRjR1ZqTG0xaGFXNHBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWGhqWlhCMGFXOXVLQ2RWYm10dWIzZHVJSFJsYlhCc1lYUmxJRzlpYW1WamREb2dKeUFySUhSNWNHVnZaaUIwWlcxd2JHRjBaVk53WldNcE8xeHVJQ0I5WEc1Y2JpQWdkR1Z0Y0d4aGRHVlRjR1ZqTG0xaGFXNHVaR1ZqYjNKaGRHOXlJRDBnZEdWdGNHeGhkR1ZUY0dWakxtMWhhVzVmWkR0Y2JseHVJQ0F2THlCT2IzUmxPaUJWYzJsdVp5Qmxibll1VmswZ2NtVm1aWEpsYm1ObGN5QnlZWFJvWlhJZ2RHaGhiaUJzYjJOaGJDQjJZWElnY21WbVpYSmxibU5sY3lCMGFISnZkV2RvYjNWMElIUm9hWE1nYzJWamRHbHZiaUIwYnlCaGJHeHZkMXh1SUNBdkx5Qm1iM0lnWlhoMFpYSnVZV3dnZFhObGNuTWdkRzhnYjNabGNuSnBaR1VnZEdobGMyVWdZWE1nY0hObGRXUnZMWE4xY0hCdmNuUmxaQ0JCVUVsekxseHVJQ0JsYm5ZdVZrMHVZMmhsWTJ0U1pYWnBjMmx2YmloMFpXMXdiR0YwWlZOd1pXTXVZMjl0Y0dsc1pYSXBPMXh1WEc0Z0lDOHZJR0poWTJ0M1lYSmtjeUJqYjIxd1lYUnBZbWxzYVhSNUlHWnZjaUJ3Y21WamIyMXdhV3hsWkNCMFpXMXdiR0YwWlhNZ2QybDBhQ0JqYjIxd2FXeGxjaTEyWlhKemFXOXVJRGNnS0R3MExqTXVNQ2xjYmlBZ1kyOXVjM1FnZEdWdGNHeGhkR1ZYWVhOUWNtVmpiMjF3YVd4bFpGZHBkR2hEYjIxd2FXeGxjbFkzSUQxY2JpQWdJQ0IwWlcxd2JHRjBaVk53WldNdVkyOXRjR2xzWlhJZ0ppWWdkR1Z0Y0d4aGRHVlRjR1ZqTG1OdmJYQnBiR1Z5V3pCZElEMDlQU0EzTzF4dVhHNGdJR1oxYm1OMGFXOXVJR2x1ZG05clpWQmhjblJwWVd4WGNtRndjR1Z5S0hCaGNuUnBZV3dzSUdOdmJuUmxlSFFzSUc5d2RHbHZibk1wSUh0Y2JpQWdJQ0JwWmlBb2IzQjBhVzl1Y3k1b1lYTm9LU0I3WEc0Z0lDQWdJQ0JqYjI1MFpYaDBJRDBnVlhScGJITXVaWGgwWlc1a0tIdDlMQ0JqYjI1MFpYaDBMQ0J2Y0hScGIyNXpMbWhoYzJncE8xeHVJQ0FnSUNBZ2FXWWdLRzl3ZEdsdmJuTXVhV1J6S1NCN1hHNGdJQ0FnSUNBZ0lHOXdkR2x2Ym5NdWFXUnpXekJkSUQwZ2RISjFaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NHRnlkR2xoYkNBOUlHVnVkaTVXVFM1eVpYTnZiSFpsVUdGeWRHbGhiQzVqWVd4c0tIUm9hWE1zSUhCaGNuUnBZV3dzSUdOdmJuUmxlSFFzSUc5d2RHbHZibk1wTzF4dVhHNGdJQ0FnYkdWMElHVjRkR1Z1WkdWa1QzQjBhVzl1Y3lBOUlGVjBhV3h6TG1WNGRHVnVaQ2g3ZlN3Z2IzQjBhVzl1Y3l3Z2UxeHVJQ0FnSUNBZ2FHOXZhM002SUhSb2FYTXVhRzl2YTNNc1hHNGdJQ0FnSUNCd2NtOTBiMEZqWTJWemMwTnZiblJ5YjJ3NklIUm9hWE11Y0hKdmRHOUJZMk5sYzNORGIyNTBjbTlzWEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0JzWlhRZ2NtVnpkV3gwSUQwZ1pXNTJMbFpOTG1sdWRtOXJaVkJoY25ScFlXd3VZMkZzYkNoY2JpQWdJQ0FnSUhSb2FYTXNYRzRnSUNBZ0lDQndZWEowYVdGc0xGeHVJQ0FnSUNBZ1kyOXVkR1Y0ZEN4Y2JpQWdJQ0FnSUdWNGRHVnVaR1ZrVDNCMGFXOXVjMXh1SUNBZ0lDazdYRzVjYmlBZ0lDQnBaaUFvY21WemRXeDBJRDA5SUc1MWJHd2dKaVlnWlc1MkxtTnZiWEJwYkdVcElIdGNiaUFnSUNBZ0lHOXdkR2x2Ym5NdWNHRnlkR2xoYkhOYmIzQjBhVzl1Y3k1dVlXMWxYU0E5SUdWdWRpNWpiMjF3YVd4bEtGeHVJQ0FnSUNBZ0lDQndZWEowYVdGc0xGeHVJQ0FnSUNBZ0lDQjBaVzF3YkdGMFpWTndaV011WTI5dGNHbHNaWEpQY0hScGIyNXpMRnh1SUNBZ0lDQWdJQ0JsYm5aY2JpQWdJQ0FnSUNrN1hHNGdJQ0FnSUNCeVpYTjFiSFFnUFNCdmNIUnBiMjV6TG5CaGNuUnBZV3h6VzI5d2RHbHZibk11Ym1GdFpWMG9ZMjl1ZEdWNGRDd2daWGgwWlc1a1pXUlBjSFJwYjI1ektUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tISmxjM1ZzZENBaFBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNCcFppQW9iM0IwYVc5dWN5NXBibVJsYm5RcElIdGNiaUFnSUNBZ0lDQWdiR1YwSUd4cGJtVnpJRDBnY21WemRXeDBMbk53YkdsMEtDZGNYRzRuS1R0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREFzSUd3Z1BTQnNhVzVsY3k1c1pXNW5kR2c3SUdrZ1BDQnNPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb0lXeHBibVZ6VzJsZElDWW1JR2tnS3lBeElEMDlQU0JzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQnNhVzVsYzF0cFhTQTlJRzl3ZEdsdmJuTXVhVzVrWlc1MElDc2diR2x1WlhOYmFWMDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WemRXeDBJRDBnYkdsdVpYTXVhbTlwYmlnblhGeHVKeWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhoalpYQjBhVzl1S0Z4dUlDQWdJQ0FnSUNBblZHaGxJSEJoY25ScFlXd2dKeUFyWEc0Z0lDQWdJQ0FnSUNBZ2IzQjBhVzl1Y3k1dVlXMWxJQ3RjYmlBZ0lDQWdJQ0FnSUNBbklHTnZkV3hrSUc1dmRDQmlaU0JqYjIxd2FXeGxaQ0IzYUdWdUlISjFibTVwYm1jZ2FXNGdjblZ1ZEdsdFpTMXZibXg1SUcxdlpHVW5YRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJQzh2SUVwMWMzUWdZV1JrSUhkaGRHVnlYRzRnSUd4bGRDQmpiMjUwWVdsdVpYSWdQU0I3WEc0Z0lDQWdjM1J5YVdOME9pQm1kVzVqZEdsdmJpaHZZbW9zSUc1aGJXVXNJR3h2WXlrZ2UxeHVJQ0FnSUNBZ2FXWWdLQ0Z2WW1vZ2ZId2dJU2h1WVcxbElHbHVJRzlpYWlrcElIdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVY0WTJWd2RHbHZiaWduWENJbklDc2dibUZ0WlNBcklDZGNJaUJ1YjNRZ1pHVm1hVzVsWkNCcGJpQW5JQ3NnYjJKcUxDQjdYRzRnSUNBZ0lDQWdJQ0FnYkc5ak9pQnNiMk5jYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnWTI5dWRHRnBibVZ5TG14dmIydDFjRkJ5YjNCbGNuUjVLRzlpYWl3Z2JtRnRaU2s3WEc0Z0lDQWdmU3hjYmlBZ0lDQnNiMjlyZFhCUWNtOXdaWEowZVRvZ1puVnVZM1JwYjI0b2NHRnlaVzUwTENCd2NtOXdaWEowZVU1aGJXVXBJSHRjYmlBZ0lDQWdJR3hsZENCeVpYTjFiSFFnUFNCd1lYSmxiblJiY0hKdmNHVnlkSGxPWVcxbFhUdGNiaUFnSUNBZ0lHbG1JQ2h5WlhOMWJIUWdQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2FXWWdLRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2h3WVhKbGJuUXNJSEJ5YjNCbGNuUjVUbUZ0WlNrcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLSEpsYzNWc2RFbHpRV3hzYjNkbFpDaHlaWE4xYkhRc0lHTnZiblJoYVc1bGNpNXdjbTkwYjBGalkyVnpjME52Ym5SeWIyd3NJSEJ5YjNCbGNuUjVUbUZ0WlNrcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUIxYm1SbFptbHVaV1E3WEc0Z0lDQWdmU3hjYmlBZ0lDQnNiMjlyZFhBNklHWjFibU4wYVc5dUtHUmxjSFJvY3l3Z2JtRnRaU2tnZTF4dUlDQWdJQ0FnWTI5dWMzUWdiR1Z1SUQwZ1pHVndkR2h6TG14bGJtZDBhRHRjYmlBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnYkdWdU95QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJSEpsYzNWc2RDQTlJR1JsY0hSb2MxdHBYU0FtSmlCamIyNTBZV2x1WlhJdWJHOXZhM1Z3VUhKdmNHVnlkSGtvWkdWd2RHaHpXMmxkTENCdVlXMWxLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tISmxjM1ZzZENBaFBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHUmxjSFJvYzF0cFhWdHVZVzFsWFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNGdJQ0FnYkdGdFltUmhPaUJtZFc1amRHbHZiaWhqZFhKeVpXNTBMQ0JqYjI1MFpYaDBLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlHTjFjbkpsYm5RZ1BUMDlJQ2RtZFc1amRHbHZiaWNnUHlCamRYSnlaVzUwTG1OaGJHd29ZMjl1ZEdWNGRDa2dPaUJqZFhKeVpXNTBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQmxjMk5oY0dWRmVIQnlaWE56YVc5dU9pQlZkR2xzY3k1bGMyTmhjR1ZGZUhCeVpYTnphVzl1TEZ4dUlDQWdJR2x1ZG05clpWQmhjblJwWVd3NklHbHVkbTlyWlZCaGNuUnBZV3hYY21Gd2NHVnlMRnh1WEc0Z0lDQWdabTQ2SUdaMWJtTjBhVzl1S0drcElIdGNiaUFnSUNBZ0lHeGxkQ0J5WlhRZ1BTQjBaVzF3YkdGMFpWTndaV05iYVYwN1hHNGdJQ0FnSUNCeVpYUXVaR1ZqYjNKaGRHOXlJRDBnZEdWdGNHeGhkR1ZUY0dWalcya2dLeUFuWDJRblhUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCeVpYUTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lIQnliMmR5WVcxek9pQmJYU3hjYmlBZ0lDQndjbTluY21GdE9pQm1kVzVqZEdsdmJpaHBMQ0JrWVhSaExDQmtaV05zWVhKbFpFSnNiMk5yVUdGeVlXMXpMQ0JpYkc5amExQmhjbUZ0Y3l3Z1pHVndkR2h6S1NCN1hHNGdJQ0FnSUNCc1pYUWdjSEp2WjNKaGJWZHlZWEJ3WlhJZ1BTQjBhR2x6TG5CeWIyZHlZVzF6VzJsZExGeHVJQ0FnSUNBZ0lDQm1iaUE5SUhSb2FYTXVabTRvYVNrN1hHNGdJQ0FnSUNCcFppQW9aR0YwWVNCOGZDQmtaWEIwYUhNZ2ZId2dZbXh2WTJ0UVlYSmhiWE1nZkh3Z1pHVmpiR0Z5WldSQ2JHOWphMUJoY21GdGN5a2dlMXh1SUNBZ0lDQWdJQ0J3Y205bmNtRnRWM0poY0hCbGNpQTlJSGR5WVhCUWNtOW5jbUZ0S0Z4dUlDQWdJQ0FnSUNBZ0lIUm9hWE1zWEc0Z0lDQWdJQ0FnSUNBZ2FTeGNiaUFnSUNBZ0lDQWdJQ0JtYml4Y2JpQWdJQ0FnSUNBZ0lDQmtZWFJoTEZ4dUlDQWdJQ0FnSUNBZ0lHUmxZMnhoY21Wa1FteHZZMnRRWVhKaGJYTXNYRzRnSUNBZ0lDQWdJQ0FnWW14dlkydFFZWEpoYlhNc1hHNGdJQ0FnSUNBZ0lDQWdaR1Z3ZEdoelhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLQ0Z3Y205bmNtRnRWM0poY0hCbGNpa2dlMXh1SUNBZ0lDQWdJQ0J3Y205bmNtRnRWM0poY0hCbGNpQTlJSFJvYVhNdWNISnZaM0poYlhOYmFWMGdQU0IzY21Gd1VISnZaM0poYlNoMGFHbHpMQ0JwTENCbWJpazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnlaWFIxY200Z2NISnZaM0poYlZkeVlYQndaWEk3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJR1JoZEdFNklHWjFibU4wYVc5dUtIWmhiSFZsTENCa1pYQjBhQ2tnZTF4dUlDQWdJQ0FnZDJocGJHVWdLSFpoYkhWbElDWW1JR1JsY0hSb0xTMHBJSHRjYmlBZ0lDQWdJQ0FnZG1Gc2RXVWdQU0IyWVd4MVpTNWZjR0Z5Wlc1ME8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2NtVjBkWEp1SUhaaGJIVmxPMXh1SUNBZ0lIMHNYRzRnSUNBZ2JXVnlaMlZKWms1bFpXUmxaRG9nWm5WdVkzUnBiMjRvY0dGeVlXMHNJR052YlcxdmJpa2dlMXh1SUNBZ0lDQWdiR1YwSUc5aWFpQTlJSEJoY21GdElIeDhJR052YlcxdmJqdGNibHh1SUNBZ0lDQWdhV1lnS0hCaGNtRnRJQ1ltSUdOdmJXMXZiaUFtSmlCd1lYSmhiU0FoUFQwZ1kyOXRiVzl1S1NCN1hHNGdJQ0FnSUNBZ0lHOWlhaUE5SUZWMGFXeHpMbVY0ZEdWdVpDaDdmU3dnWTI5dGJXOXVMQ0J3WVhKaGJTazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQnZZbW83WEc0Z0lDQWdmU3hjYmlBZ0lDQXZMeUJCYmlCbGJYQjBlU0J2WW1wbFkzUWdkRzhnZFhObElHRnpJSEpsY0d4aFkyVnRaVzUwSUdadmNpQnVkV3hzTFdOdmJuUmxlSFJ6WEc0Z0lDQWdiblZzYkVOdmJuUmxlSFE2SUU5aWFtVmpkQzV6WldGc0tIdDlLU3hjYmx4dUlDQWdJRzV2YjNBNklHVnVkaTVXVFM1dWIyOXdMRnh1SUNBZ0lHTnZiWEJwYkdWeVNXNW1iem9nZEdWdGNHeGhkR1ZUY0dWakxtTnZiWEJwYkdWeVhHNGdJSDA3WEc1Y2JpQWdablZ1WTNScGIyNGdjbVYwS0dOdmJuUmxlSFFzSUc5d2RHbHZibk1nUFNCN2ZTa2dlMXh1SUNBZ0lHeGxkQ0JrWVhSaElEMGdiM0IwYVc5dWN5NWtZWFJoTzF4dVhHNGdJQ0FnY21WMExsOXpaWFIxY0NodmNIUnBiMjV6S1R0Y2JpQWdJQ0JwWmlBb0lXOXdkR2x2Ym5NdWNHRnlkR2xoYkNBbUppQjBaVzF3YkdGMFpWTndaV011ZFhObFJHRjBZU2tnZTF4dUlDQWdJQ0FnWkdGMFlTQTlJR2x1YVhSRVlYUmhLR052Ym5SbGVIUXNJR1JoZEdFcE8xeHVJQ0FnSUgxY2JpQWdJQ0JzWlhRZ1pHVndkR2h6TEZ4dUlDQWdJQ0FnWW14dlkydFFZWEpoYlhNZ1BTQjBaVzF3YkdGMFpWTndaV011ZFhObFFteHZZMnRRWVhKaGJYTWdQeUJiWFNBNklIVnVaR1ZtYVc1bFpEdGNiaUFnSUNCcFppQW9kR1Z0Y0d4aGRHVlRjR1ZqTG5WelpVUmxjSFJvY3lrZ2UxeHVJQ0FnSUNBZ2FXWWdLRzl3ZEdsdmJuTXVaR1Z3ZEdoektTQjdYRzRnSUNBZ0lDQWdJR1JsY0hSb2N5QTlYRzRnSUNBZ0lDQWdJQ0FnWTI5dWRHVjRkQ0FoUFNCdmNIUnBiMjV6TG1SbGNIUm9jMXN3WFZ4dUlDQWdJQ0FnSUNBZ0lDQWdQeUJiWTI5dWRHVjRkRjB1WTI5dVkyRjBLRzl3ZEdsdmJuTXVaR1Z3ZEdoektWeHVJQ0FnSUNBZ0lDQWdJQ0FnT2lCdmNIUnBiMjV6TG1SbGNIUm9jenRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJR1JsY0hSb2N5QTlJRnRqYjI1MFpYaDBYVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQm1kVzVqZEdsdmJpQnRZV2x1S0dOdmJuUmxlSFFnTHlvc0lHOXdkR2x2Ym5NcUx5a2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlDaGNiaUFnSUNBZ0lDQWdKeWNnSzF4dUlDQWdJQ0FnSUNCMFpXMXdiR0YwWlZOd1pXTXViV0ZwYmloY2JpQWdJQ0FnSUNBZ0lDQmpiMjUwWVdsdVpYSXNYRzRnSUNBZ0lDQWdJQ0FnWTI5dWRHVjRkQ3hjYmlBZ0lDQWdJQ0FnSUNCamIyNTBZV2x1WlhJdWFHVnNjR1Z5Y3l4Y2JpQWdJQ0FnSUNBZ0lDQmpiMjUwWVdsdVpYSXVjR0Z5ZEdsaGJITXNYRzRnSUNBZ0lDQWdJQ0FnWkdGMFlTeGNiaUFnSUNBZ0lDQWdJQ0JpYkc5amExQmhjbUZ0Y3l4Y2JpQWdJQ0FnSUNBZ0lDQmtaWEIwYUhOY2JpQWdJQ0FnSUNBZ0tWeHVJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCdFlXbHVJRDBnWlhobFkzVjBaVVJsWTI5eVlYUnZjbk1vWEc0Z0lDQWdJQ0IwWlcxd2JHRjBaVk53WldNdWJXRnBiaXhjYmlBZ0lDQWdJRzFoYVc0c1hHNGdJQ0FnSUNCamIyNTBZV2x1WlhJc1hHNGdJQ0FnSUNCdmNIUnBiMjV6TG1SbGNIUm9jeUI4ZkNCYlhTeGNiaUFnSUNBZ0lHUmhkR0VzWEc0Z0lDQWdJQ0JpYkc5amExQmhjbUZ0YzF4dUlDQWdJQ2s3WEc0Z0lDQWdjbVYwZFhKdUlHMWhhVzRvWTI5dWRHVjRkQ3dnYjNCMGFXOXVjeWs3WEc0Z0lIMWNibHh1SUNCeVpYUXVhWE5VYjNBZ1BTQjBjblZsTzF4dVhHNGdJSEpsZEM1ZmMyVjBkWEFnUFNCbWRXNWpkR2x2YmlodmNIUnBiMjV6S1NCN1hHNGdJQ0FnYVdZZ0tDRnZjSFJwYjI1ekxuQmhjblJwWVd3cElIdGNiaUFnSUNBZ0lHeGxkQ0J0WlhKblpXUklaV3h3WlhKeklEMGdWWFJwYkhNdVpYaDBaVzVrS0h0OUxDQmxibll1YUdWc2NHVnljeXdnYjNCMGFXOXVjeTVvWld4d1pYSnpLVHRjYmlBZ0lDQWdJSGR5WVhCSVpXeHdaWEp6Vkc5UVlYTnpURzl2YTNWd1VISnZjR1Z5ZEhrb2JXVnlaMlZrU0dWc2NHVnljeXdnWTI5dWRHRnBibVZ5S1R0Y2JpQWdJQ0FnSUdOdmJuUmhhVzVsY2k1b1pXeHdaWEp6SUQwZ2JXVnlaMlZrU0dWc2NHVnljenRjYmx4dUlDQWdJQ0FnYVdZZ0tIUmxiWEJzWVhSbFUzQmxZeTUxYzJWUVlYSjBhV0ZzS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRlZ6WlNCdFpYSm5aVWxtVG1WbFpHVmtJR2hsY21VZ2RHOGdjSEpsZG1WdWRDQmpiMjF3YVd4cGJtY2daMnh2WW1Gc0lIQmhjblJwWVd4eklHMTFiSFJwY0d4bElIUnBiV1Z6WEc0Z0lDQWdJQ0FnSUdOdmJuUmhhVzVsY2k1d1lYSjBhV0ZzY3lBOUlHTnZiblJoYVc1bGNpNXRaWEpuWlVsbVRtVmxaR1ZrS0Z4dUlDQWdJQ0FnSUNBZ0lHOXdkR2x2Ym5NdWNHRnlkR2xoYkhNc1hHNGdJQ0FnSUNBZ0lDQWdaVzUyTG5CaGNuUnBZV3h6WEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcFppQW9kR1Z0Y0d4aGRHVlRjR1ZqTG5WelpWQmhjblJwWVd3Z2ZId2dkR1Z0Y0d4aGRHVlRjR1ZqTG5WelpVUmxZMjl5WVhSdmNuTXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWRHRnBibVZ5TG1SbFkyOXlZWFJ2Y25NZ1BTQlZkR2xzY3k1bGVIUmxibVFvWEc0Z0lDQWdJQ0FnSUNBZ2UzMHNYRzRnSUNBZ0lDQWdJQ0FnWlc1MkxtUmxZMjl5WVhSdmNuTXNYRzRnSUNBZ0lDQWdJQ0FnYjNCMGFXOXVjeTVrWldOdmNtRjBiM0p6WEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHTnZiblJoYVc1bGNpNW9iMjlyY3lBOUlIdDlPMXh1SUNBZ0lDQWdZMjl1ZEdGcGJtVnlMbkJ5YjNSdlFXTmpaWE56UTI5dWRISnZiQ0E5SUdOeVpXRjBaVkJ5YjNSdlFXTmpaWE56UTI5dWRISnZiQ2h2Y0hScGIyNXpLVHRjYmx4dUlDQWdJQ0FnYkdWMElHdGxaWEJJWld4d1pYSkpia2hsYkhCbGNuTWdQVnh1SUNBZ0lDQWdJQ0J2Y0hScGIyNXpMbUZzYkc5M1EyRnNiSE5VYjBobGJIQmxjazFwYzNOcGJtY2dmSHhjYmlBZ0lDQWdJQ0FnZEdWdGNHeGhkR1ZYWVhOUWNtVmpiMjF3YVd4bFpGZHBkR2hEYjIxd2FXeGxjbFkzTzF4dUlDQWdJQ0FnYlc5MlpVaGxiSEJsY2xSdlNHOXZhM01vWTI5dWRHRnBibVZ5TENBbmFHVnNjR1Z5VFdsemMybHVaeWNzSUd0bFpYQklaV3h3WlhKSmJraGxiSEJsY25NcE8xeHVJQ0FnSUNBZ2JXOTJaVWhsYkhCbGNsUnZTRzl2YTNNb1kyOXVkR0ZwYm1WeUxDQW5ZbXh2WTJ0SVpXeHdaWEpOYVhOemFXNW5KeXdnYTJWbGNFaGxiSEJsY2tsdVNHVnNjR1Z5Y3lrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR052Ym5SaGFXNWxjaTV3Y205MGIwRmpZMlZ6YzBOdmJuUnliMndnUFNCdmNIUnBiMjV6TG5CeWIzUnZRV05qWlhOelEyOXVkSEp2YkRzZ0x5OGdhVzUwWlhKdVlXd2diM0IwYVc5dVhHNGdJQ0FnSUNCamIyNTBZV2x1WlhJdWFHVnNjR1Z5Y3lBOUlHOXdkR2x2Ym5NdWFHVnNjR1Z5Y3p0Y2JpQWdJQ0FnSUdOdmJuUmhhVzVsY2k1d1lYSjBhV0ZzY3lBOUlHOXdkR2x2Ym5NdWNHRnlkR2xoYkhNN1hHNGdJQ0FnSUNCamIyNTBZV2x1WlhJdVpHVmpiM0poZEc5eWN5QTlJRzl3ZEdsdmJuTXVaR1ZqYjNKaGRHOXljenRjYmlBZ0lDQWdJR052Ym5SaGFXNWxjaTVvYjI5cmN5QTlJRzl3ZEdsdmJuTXVhRzl2YTNNN1hHNGdJQ0FnZlZ4dUlDQjlPMXh1WEc0Z0lISmxkQzVmWTJocGJHUWdQU0JtZFc1amRHbHZiaWhwTENCa1lYUmhMQ0JpYkc5amExQmhjbUZ0Y3l3Z1pHVndkR2h6S1NCN1hHNGdJQ0FnYVdZZ0tIUmxiWEJzWVhSbFUzQmxZeTUxYzJWQ2JHOWphMUJoY21GdGN5QW1KaUFoWW14dlkydFFZWEpoYlhNcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZlR05sY0hScGIyNG9KMjExYzNRZ2NHRnpjeUJpYkc5amF5QndZWEpoYlhNbktUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIUmxiWEJzWVhSbFUzQmxZeTUxYzJWRVpYQjBhSE1nSmlZZ0lXUmxjSFJvY3lrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVjRZMlZ3ZEdsdmJpZ25iWFZ6ZENCd1lYTnpJSEJoY21WdWRDQmtaWEIwYUhNbktUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnZDNKaGNGQnliMmR5WVcwb1hHNGdJQ0FnSUNCamIyNTBZV2x1WlhJc1hHNGdJQ0FnSUNCcExGeHVJQ0FnSUNBZ2RHVnRjR3hoZEdWVGNHVmpXMmxkTEZ4dUlDQWdJQ0FnWkdGMFlTeGNiaUFnSUNBZ0lEQXNYRzRnSUNBZ0lDQmliRzlqYTFCaGNtRnRjeXhjYmlBZ0lDQWdJR1JsY0hSb2MxeHVJQ0FnSUNrN1hHNGdJSDA3WEc0Z0lISmxkSFZ5YmlCeVpYUTdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCM2NtRndVSEp2WjNKaGJTaGNiaUFnWTI5dWRHRnBibVZ5TEZ4dUlDQnBMRnh1SUNCbWJpeGNiaUFnWkdGMFlTeGNiaUFnWkdWamJHRnlaV1JDYkc5amExQmhjbUZ0Y3l4Y2JpQWdZbXh2WTJ0UVlYSmhiWE1zWEc0Z0lHUmxjSFJvYzF4dUtTQjdYRzRnSUdaMWJtTjBhVzl1SUhCeWIyY29ZMjl1ZEdWNGRDd2diM0IwYVc5dWN5QTlJSHQ5S1NCN1hHNGdJQ0FnYkdWMElHTjFjbkpsYm5SRVpYQjBhSE1nUFNCa1pYQjBhSE03WEc0Z0lDQWdhV1lnS0Z4dUlDQWdJQ0FnWkdWd2RHaHpJQ1ltWEc0Z0lDQWdJQ0JqYjI1MFpYaDBJQ0U5SUdSbGNIUm9jMXN3WFNBbUpseHVJQ0FnSUNBZ0lTaGpiMjUwWlhoMElEMDlQU0JqYjI1MFlXbHVaWEl1Ym5Wc2JFTnZiblJsZUhRZ0ppWWdaR1Z3ZEdoeld6QmRJRDA5UFNCdWRXeHNLVnh1SUNBZ0lDa2dlMXh1SUNBZ0lDQWdZM1Z5Y21WdWRFUmxjSFJvY3lBOUlGdGpiMjUwWlhoMFhTNWpiMjVqWVhRb1pHVndkR2h6S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdabTRvWEc0Z0lDQWdJQ0JqYjI1MFlXbHVaWElzWEc0Z0lDQWdJQ0JqYjI1MFpYaDBMRnh1SUNBZ0lDQWdZMjl1ZEdGcGJtVnlMbWhsYkhCbGNuTXNYRzRnSUNBZ0lDQmpiMjUwWVdsdVpYSXVjR0Z5ZEdsaGJITXNYRzRnSUNBZ0lDQnZjSFJwYjI1ekxtUmhkR0VnZkh3Z1pHRjBZU3hjYmlBZ0lDQWdJR0pzYjJOclVHRnlZVzF6SUNZbUlGdHZjSFJwYjI1ekxtSnNiMk5yVUdGeVlXMXpYUzVqYjI1allYUW9ZbXh2WTJ0UVlYSmhiWE1wTEZ4dUlDQWdJQ0FnWTNWeWNtVnVkRVJsY0hSb2MxeHVJQ0FnSUNrN1hHNGdJSDFjYmx4dUlDQndjbTluSUQwZ1pYaGxZM1YwWlVSbFkyOXlZWFJ2Y25Nb1ptNHNJSEJ5YjJjc0lHTnZiblJoYVc1bGNpd2daR1Z3ZEdoekxDQmtZWFJoTENCaWJHOWphMUJoY21GdGN5azdYRzVjYmlBZ2NISnZaeTV3Y205bmNtRnRJRDBnYVR0Y2JpQWdjSEp2Wnk1a1pYQjBhQ0E5SUdSbGNIUm9jeUEvSUdSbGNIUm9jeTVzWlc1bmRHZ2dPaUF3TzF4dUlDQndjbTluTG1Kc2IyTnJVR0Z5WVcxeklEMGdaR1ZqYkdGeVpXUkNiRzlqYTFCaGNtRnRjeUI4ZkNBd08xeHVJQ0J5WlhSMWNtNGdjSEp2Wnp0Y2JuMWNibHh1THlvcVhHNGdLaUJVYUdseklHbHpJR04xY25KbGJuUnNlU0J3WVhKMElHOW1JSFJvWlNCdlptWnBZMmxoYkNCQlVFa3NJSFJvWlhKbFptOXlaU0JwYlhCc1pXMWxiblJoZEdsdmJpQmtaWFJoYVd4eklITm9iM1ZzWkNCdWIzUWdZbVVnWTJoaGJtZGxaQzVjYmlBcUwxeHVaWGh3YjNKMElHWjFibU4wYVc5dUlISmxjMjlzZG1WUVlYSjBhV0ZzS0hCaGNuUnBZV3dzSUdOdmJuUmxlSFFzSUc5d2RHbHZibk1wSUh0Y2JpQWdhV1lnS0NGd1lYSjBhV0ZzS1NCN1hHNGdJQ0FnYVdZZ0tHOXdkR2x2Ym5NdWJtRnRaU0E5UFQwZ0owQndZWEowYVdGc0xXSnNiMk5ySnlrZ2UxeHVJQ0FnSUNBZ2NHRnlkR2xoYkNBOUlHOXdkR2x2Ym5NdVpHRjBZVnNuY0dGeWRHbGhiQzFpYkc5amF5ZGRPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCd1lYSjBhV0ZzSUQwZ2IzQjBhVzl1Y3k1d1lYSjBhV0ZzYzF0dmNIUnBiMjV6TG01aGJXVmRPMXh1SUNBZ0lIMWNiaUFnZlNCbGJITmxJR2xtSUNnaGNHRnlkR2xoYkM1allXeHNJQ1ltSUNGdmNIUnBiMjV6TG01aGJXVXBJSHRjYmlBZ0lDQXZMeUJVYUdseklHbHpJR0VnWkhsdVlXMXBZeUJ3WVhKMGFXRnNJSFJvWVhRZ2NtVjBkWEp1WldRZ1lTQnpkSEpwYm1kY2JpQWdJQ0J2Y0hScGIyNXpMbTVoYldVZ1BTQndZWEowYVdGc08xeHVJQ0FnSUhCaGNuUnBZV3dnUFNCdmNIUnBiMjV6TG5CaGNuUnBZV3h6VzNCaGNuUnBZV3hkTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJ3WVhKMGFXRnNPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2FXNTJiMnRsVUdGeWRHbGhiQ2h3WVhKMGFXRnNMQ0JqYjI1MFpYaDBMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lDOHZJRlZ6WlNCMGFHVWdZM1Z5Y21WdWRDQmpiRzl6ZFhKbElHTnZiblJsZUhRZ2RHOGdjMkYyWlNCMGFHVWdjR0Z5ZEdsaGJDMWliRzlqYXlCcFppQjBhR2x6SUhCaGNuUnBZV3hjYmlBZ1kyOXVjM1FnWTNWeWNtVnVkRkJoY25ScFlXeENiRzlqYXlBOUlHOXdkR2x2Ym5NdVpHRjBZU0FtSmlCdmNIUnBiMjV6TG1SaGRHRmJKM0JoY25ScFlXd3RZbXh2WTJzblhUdGNiaUFnYjNCMGFXOXVjeTV3WVhKMGFXRnNJRDBnZEhKMVpUdGNiaUFnYVdZZ0tHOXdkR2x2Ym5NdWFXUnpLU0I3WEc0Z0lDQWdiM0IwYVc5dWN5NWtZWFJoTG1OdmJuUmxlSFJRWVhSb0lEMGdiM0IwYVc5dWN5NXBaSE5iTUYwZ2ZId2diM0IwYVc5dWN5NWtZWFJoTG1OdmJuUmxlSFJRWVhSb08xeHVJQ0I5WEc1Y2JpQWdiR1YwSUhCaGNuUnBZV3hDYkc5amF6dGNiaUFnYVdZZ0tHOXdkR2x2Ym5NdVptNGdKaVlnYjNCMGFXOXVjeTVtYmlBaFBUMGdibTl2Y0NrZ2UxeHVJQ0FnSUc5d2RHbHZibk11WkdGMFlTQTlJR055WldGMFpVWnlZVzFsS0c5d2RHbHZibk11WkdGMFlTazdYRzRnSUNBZ0x5OGdWM0poY0hCbGNpQm1kVzVqZEdsdmJpQjBieUJuWlhRZ1lXTmpaWE56SUhSdklHTjFjbkpsYm5SUVlYSjBhV0ZzUW14dlkyc2dabkp2YlNCMGFHVWdZMnh2YzNWeVpWeHVJQ0FnSUd4bGRDQm1iaUE5SUc5d2RHbHZibk11Wm00N1hHNGdJQ0FnY0dGeWRHbGhiRUpzYjJOcklEMGdiM0IwYVc5dWN5NWtZWFJoV3lkd1lYSjBhV0ZzTFdKc2IyTnJKMTBnUFNCbWRXNWpkR2x2YmlCd1lYSjBhV0ZzUW14dlkydFhjbUZ3Y0dWeUtGeHVJQ0FnSUNBZ1kyOXVkR1Y0ZEN4Y2JpQWdJQ0FnSUc5d2RHbHZibk1nUFNCN2ZWeHVJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ0x5OGdVbVZ6ZEc5eVpTQjBhR1VnY0dGeWRHbGhiQzFpYkc5amF5Qm1jbTl0SUhSb1pTQmpiRzl6ZFhKbElHWnZjaUIwYUdVZ1pYaGxZM1YwYVc5dUlHOW1JSFJvWlNCaWJHOWphMXh1SUNBZ0lDQWdMeThnYVM1bExpQjBhR1VnY0dGeWRDQnBibk5wWkdVZ2RHaGxJR0pzYjJOcklHOW1JSFJvWlNCd1lYSjBhV0ZzSUdOaGJHd3VYRzRnSUNBZ0lDQnZjSFJwYjI1ekxtUmhkR0VnUFNCamNtVmhkR1ZHY21GdFpTaHZjSFJwYjI1ekxtUmhkR0VwTzF4dUlDQWdJQ0FnYjNCMGFXOXVjeTVrWVhSaFd5ZHdZWEowYVdGc0xXSnNiMk5ySjEwZ1BTQmpkWEp5Wlc1MFVHRnlkR2xoYkVKc2IyTnJPMXh1SUNBZ0lDQWdjbVYwZFhKdUlHWnVLR052Ym5SbGVIUXNJRzl3ZEdsdmJuTXBPMXh1SUNBZ0lIMDdYRzRnSUNBZ2FXWWdLR1p1TG5CaGNuUnBZV3h6S1NCN1hHNGdJQ0FnSUNCdmNIUnBiMjV6TG5CaGNuUnBZV3h6SUQwZ1ZYUnBiSE11WlhoMFpXNWtLSHQ5TENCdmNIUnBiMjV6TG5CaGNuUnBZV3h6TENCbWJpNXdZWEowYVdGc2N5azdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdhV1lnS0hCaGNuUnBZV3dnUFQwOUlIVnVaR1ZtYVc1bFpDQW1KaUJ3WVhKMGFXRnNRbXh2WTJzcElIdGNiaUFnSUNCd1lYSjBhV0ZzSUQwZ2NHRnlkR2xoYkVKc2IyTnJPMXh1SUNCOVhHNWNiaUFnYVdZZ0tIQmhjblJwWVd3Z1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGZUdObGNIUnBiMjRvSjFSb1pTQndZWEowYVdGc0lDY2dLeUJ2Y0hScGIyNXpMbTVoYldVZ0t5QW5JR052ZFd4a0lHNXZkQ0JpWlNCbWIzVnVaQ2NwTzF4dUlDQjlJR1ZzYzJVZ2FXWWdLSEJoY25ScFlXd2dhVzV6ZEdGdVkyVnZaaUJHZFc1amRHbHZiaWtnZTF4dUlDQWdJSEpsZEhWeWJpQndZWEowYVdGc0tHTnZiblJsZUhRc0lHOXdkR2x2Ym5NcE8xeHVJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnViMjl3S0NrZ2UxeHVJQ0J5WlhSMWNtNGdKeWM3WEc1OVhHNWNibVoxYm1OMGFXOXVJR2x1YVhSRVlYUmhLR052Ym5SbGVIUXNJR1JoZEdFcElIdGNiaUFnYVdZZ0tDRmtZWFJoSUh4OElDRW9KM0p2YjNRbklHbHVJR1JoZEdFcEtTQjdYRzRnSUNBZ1pHRjBZU0E5SUdSaGRHRWdQeUJqY21WaGRHVkdjbUZ0WlNoa1lYUmhLU0E2SUh0OU8xeHVJQ0FnSUdSaGRHRXVjbTl2ZENBOUlHTnZiblJsZUhRN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUdSaGRHRTdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHVjRaV04xZEdWRVpXTnZjbUYwYjNKektHWnVMQ0J3Y205bkxDQmpiMjUwWVdsdVpYSXNJR1JsY0hSb2N5d2daR0YwWVN3Z1lteHZZMnRRWVhKaGJYTXBJSHRjYmlBZ2FXWWdLR1p1TG1SbFkyOXlZWFJ2Y2lrZ2UxeHVJQ0FnSUd4bGRDQndjbTl3Y3lBOUlIdDlPMXh1SUNBZ0lIQnliMmNnUFNCbWJpNWtaV052Y21GMGIzSW9YRzRnSUNBZ0lDQndjbTluTEZ4dUlDQWdJQ0FnY0hKdmNITXNYRzRnSUNBZ0lDQmpiMjUwWVdsdVpYSXNYRzRnSUNBZ0lDQmtaWEIwYUhNZ0ppWWdaR1Z3ZEdoeld6QmRMRnh1SUNBZ0lDQWdaR0YwWVN4Y2JpQWdJQ0FnSUdKc2IyTnJVR0Z5WVcxekxGeHVJQ0FnSUNBZ1pHVndkR2h6WEc0Z0lDQWdLVHRjYmlBZ0lDQlZkR2xzY3k1bGVIUmxibVFvY0hKdlp5d2djSEp2Y0hNcE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCd2NtOW5PMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQjNjbUZ3U0dWc2NHVnljMVJ2VUdGemMweHZiMnQxY0ZCeWIzQmxjblI1S0cxbGNtZGxaRWhsYkhCbGNuTXNJR052Ym5SaGFXNWxjaWtnZTF4dUlDQlBZbXBsWTNRdWEyVjVjeWh0WlhKblpXUklaV3h3WlhKektTNW1iM0pGWVdOb0tHaGxiSEJsY2s1aGJXVWdQVDRnZTF4dUlDQWdJR3hsZENCb1pXeHdaWElnUFNCdFpYSm5aV1JJWld4d1pYSnpXMmhsYkhCbGNrNWhiV1ZkTzF4dUlDQWdJRzFsY21kbFpFaGxiSEJsY25OYmFHVnNjR1Z5VG1GdFpWMGdQU0J3WVhOelRHOXZhM1Z3VUhKdmNHVnlkSGxQY0hScGIyNG9hR1ZzY0dWeUxDQmpiMjUwWVdsdVpYSXBPMXh1SUNCOUtUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2NHRnpjMHh2YjJ0MWNGQnliM0JsY25SNVQzQjBhVzl1S0dobGJIQmxjaXdnWTI5dWRHRnBibVZ5S1NCN1hHNGdJR052Ym5OMElHeHZiMnQxY0ZCeWIzQmxjblI1SUQwZ1kyOXVkR0ZwYm1WeUxteHZiMnQxY0ZCeWIzQmxjblI1TzF4dUlDQnlaWFIxY200Z2QzSmhjRWhsYkhCbGNpaG9aV3h3WlhJc0lHOXdkR2x2Ym5NZ1BUNGdlMXh1SUNBZ0lISmxkSFZ5YmlCVmRHbHNjeTVsZUhSbGJtUW9leUJzYjI5cmRYQlFjbTl3WlhKMGVTQjlMQ0J2Y0hScGIyNXpLVHRjYmlBZ2ZTazdYRzU5WEc0aVhYMD1cbiIsIi8vIEJ1aWxkIG91dCBvdXIgYmFzaWMgU2FmZVN0cmluZyB0eXBlXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5mdW5jdGlvbiBTYWZlU3RyaW5nKHN0cmluZykge1xuICB0aGlzLnN0cmluZyA9IHN0cmluZztcbn1cblxuU2FmZVN0cmluZy5wcm90b3R5cGUudG9TdHJpbmcgPSBTYWZlU3RyaW5nLnByb3RvdHlwZS50b0hUTUwgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAnJyArIHRoaXMuc3RyaW5nO1xufTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gU2FmZVN0cmluZztcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMM05oWm1VdGMzUnlhVzVuTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdRVUZEUVN4VFFVRlRMRlZCUVZVc1EwRkJReXhOUVVGTkxFVkJRVVU3UVVGRE1VSXNUVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhOUVVGTkxFTkJRVU03UTBGRGRFSTdPMEZCUlVRc1ZVRkJWU3hEUVVGRExGTkJRVk1zUTBGQlF5eFJRVUZSTEVkQlFVY3NWVUZCVlN4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFZEJRVWNzV1VGQlZ6dEJRVU4yUlN4VFFVRlBMRVZCUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETzBOQlEzcENMRU5CUVVNN08zRkNRVVZoTEZWQlFWVWlMQ0ptYVd4bElqb2ljMkZtWlMxemRISnBibWN1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZMeUJDZFdsc1pDQnZkWFFnYjNWeUlHSmhjMmxqSUZOaFptVlRkSEpwYm1jZ2RIbHdaVnh1Wm5WdVkzUnBiMjRnVTJGbVpWTjBjbWx1WnloemRISnBibWNwSUh0Y2JpQWdkR2hwY3k1emRISnBibWNnUFNCemRISnBibWM3WEc1OVhHNWNibE5oWm1WVGRISnBibWN1Y0hKdmRHOTBlWEJsTG5SdlUzUnlhVzVuSUQwZ1UyRm1aVk4wY21sdVp5NXdjbTkwYjNSNWNHVXVkRzlJVkUxTUlEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lISmxkSFZ5YmlBbkp5QXJJSFJvYVhNdWMzUnlhVzVuTzF4dWZUdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdVMkZtWlZOMGNtbHVaenRjYmlKZGZRPT1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZXh0ZW5kID0gZXh0ZW5kO1xuZXhwb3J0cy5pbmRleE9mID0gaW5kZXhPZjtcbmV4cG9ydHMuZXNjYXBlRXhwcmVzc2lvbiA9IGVzY2FwZUV4cHJlc3Npb247XG5leHBvcnRzLmlzRW1wdHkgPSBpc0VtcHR5O1xuZXhwb3J0cy5jcmVhdGVGcmFtZSA9IGNyZWF0ZUZyYW1lO1xuZXhwb3J0cy5ibG9ja1BhcmFtcyA9IGJsb2NrUGFyYW1zO1xuZXhwb3J0cy5hcHBlbmRDb250ZXh0UGF0aCA9IGFwcGVuZENvbnRleHRQYXRoO1xudmFyIGVzY2FwZSA9IHtcbiAgJyYnOiAnJmFtcDsnLFxuICAnPCc6ICcmbHQ7JyxcbiAgJz4nOiAnJmd0OycsXG4gICdcIic6ICcmcXVvdDsnLFxuICBcIidcIjogJyYjeDI3OycsXG4gICdgJzogJyYjeDYwOycsXG4gICc9JzogJyYjeDNEOydcbn07XG5cbnZhciBiYWRDaGFycyA9IC9bJjw+XCInYD1dL2csXG4gICAgcG9zc2libGUgPSAvWyY8PlwiJ2A9XS87XG5cbmZ1bmN0aW9uIGVzY2FwZUNoYXIoY2hyKSB7XG4gIHJldHVybiBlc2NhcGVbY2hyXTtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kKG9iaiAvKiAsIC4uLnNvdXJjZSAqLykge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGZvciAodmFyIGtleSBpbiBhcmd1bWVudHNbaV0pIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYXJndW1lbnRzW2ldLCBrZXkpKSB7XG4gICAgICAgIG9ialtrZXldID0gYXJndW1lbnRzW2ldW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZXhwb3J0cy50b1N0cmluZyA9IHRvU3RyaW5nO1xuLy8gU291cmNlZCBmcm9tIGxvZGFzaFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Jlc3RpZWpzL2xvZGFzaC9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dFxuLyogZXNsaW50LWRpc2FibGUgZnVuYy1zdHlsZSAqL1xudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG59O1xuLy8gZmFsbGJhY2sgZm9yIG9sZGVyIHZlcnNpb25zIG9mIENocm9tZSBhbmQgU2FmYXJpXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuaWYgKGlzRnVuY3Rpb24oL3gvKSkge1xuICBleHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbiAgfTtcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbi8qIGVzbGludC1lbmFibGUgZnVuYy1zdHlsZSAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyA/IHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBBcnJheV0nIDogZmFsc2U7XG59O1xuXG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuLy8gT2xkZXIgSUUgdmVyc2lvbnMgZG8gbm90IGRpcmVjdGx5IHN1cHBvcnQgaW5kZXhPZiBzbyB3ZSBtdXN0IGltcGxlbWVudCBvdXIgb3duLCBzYWRseS5cblxuZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGFycmF5W2ldID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gZXNjYXBlRXhwcmVzc2lvbihzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgZXNjYXBlIFNhZmVTdHJpbmdzLCBzaW5jZSB0aGV5J3JlIGFscmVhZHkgc2FmZVxuICAgIGlmIChzdHJpbmcgJiYgc3RyaW5nLnRvSFRNTCkge1xuICAgICAgcmV0dXJuIHN0cmluZy50b0hUTUwoKTtcbiAgICB9IGVsc2UgaWYgKHN0cmluZyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfSBlbHNlIGlmICghc3RyaW5nKSB7XG4gICAgICByZXR1cm4gc3RyaW5nICsgJyc7XG4gICAgfVxuXG4gICAgLy8gRm9yY2UgYSBzdHJpbmcgY29udmVyc2lvbiBhcyB0aGlzIHdpbGwgYmUgZG9uZSBieSB0aGUgYXBwZW5kIHJlZ2FyZGxlc3MgYW5kXG4gICAgLy8gdGhlIHJlZ2V4IHRlc3Qgd2lsbCBkbyB0aGlzIHRyYW5zcGFyZW50bHkgYmVoaW5kIHRoZSBzY2VuZXMsIGNhdXNpbmcgaXNzdWVzIGlmXG4gICAgLy8gYW4gb2JqZWN0J3MgdG8gc3RyaW5nIGhhcyBlc2NhcGVkIGNoYXJhY3RlcnMgaW4gaXQuXG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmc7XG4gIH1cblxuICBpZiAoIXBvc3NpYmxlLnRlc3Qoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH1cbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKGJhZENoYXJzLCBlc2NhcGVDaGFyKTtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkge1xuICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZyYW1lKG9iamVjdCkge1xuICB2YXIgZnJhbWUgPSBleHRlbmQoe30sIG9iamVjdCk7XG4gIGZyYW1lLl9wYXJlbnQgPSBvYmplY3Q7XG4gIHJldHVybiBmcmFtZTtcbn1cblxuZnVuY3Rpb24gYmxvY2tQYXJhbXMocGFyYW1zLCBpZHMpIHtcbiAgcGFyYW1zLnBhdGggPSBpZHM7XG4gIHJldHVybiBwYXJhbXM7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZENvbnRleHRQYXRoKGNvbnRleHRQYXRoLCBpZCkge1xuICByZXR1cm4gKGNvbnRleHRQYXRoID8gY29udGV4dFBhdGggKyAnLicgOiAnJykgKyBpZDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDNWMGFXeHpMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPenM3UVVGQlFTeEpRVUZOTEUxQlFVMHNSMEZCUnp0QlFVTmlMRXRCUVVjc1JVRkJSU3hQUVVGUE8wRkJRMW9zUzBGQlJ5eEZRVUZGTEUxQlFVMDdRVUZEV0N4TFFVRkhMRVZCUVVVc1RVRkJUVHRCUVVOWUxFdEJRVWNzUlVGQlJTeFJRVUZSTzBGQlEySXNTMEZCUnl4RlFVRkZMRkZCUVZFN1FVRkRZaXhMUVVGSExFVkJRVVVzVVVGQlVUdEJRVU5pTEV0QlFVY3NSVUZCUlN4UlFVRlJPME5CUTJRc1EwRkJRenM3UVVGRlJpeEpRVUZOTEZGQlFWRXNSMEZCUnl4WlFVRlpPMGxCUXpOQ0xGRkJRVkVzUjBGQlJ5eFhRVUZYTEVOQlFVTTdPMEZCUlhwQ0xGTkJRVk1zVlVGQlZTeERRVUZETEVkQlFVY3NSVUZCUlR0QlFVTjJRaXhUUVVGUExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0RFFVTndRanM3UVVGRlRTeFRRVUZUTEUxQlFVMHNRMEZCUXl4SFFVRkhMRzlDUVVGdlFqdEJRVU0xUXl4UFFVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NVMEZCVXl4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUdEJRVU42UXl4VFFVRkxMRWxCUVVrc1IwRkJSeXhKUVVGSkxGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlR0QlFVTTFRaXhWUVVGSkxFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNSMEZCUnl4RFFVRkRMRVZCUVVVN1FVRkRNMFFzVjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0UFFVTTVRanRMUVVOR08wZEJRMFk3TzBGQlJVUXNVMEZCVHl4SFFVRkhMRU5CUVVNN1EwRkRXanM3UVVGRlRTeEpRVUZKTEZGQlFWRXNSMEZCUnl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExGRkJRVkVzUTBGQlF6czdPenM3TzBGQlMyaEVMRWxCUVVrc1ZVRkJWU3hIUVVGSExHOUNRVUZUTEV0QlFVc3NSVUZCUlR0QlFVTXZRaXhUUVVGUExFOUJRVThzUzBGQlN5eExRVUZMTEZWQlFWVXNRMEZCUXp0RFFVTndReXhEUVVGRE96czdRVUZIUml4SlFVRkpMRlZCUVZVc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJUdEJRVU51UWl4VlFVOVBMRlZCUVZVc1IwRlFha0lzVlVGQlZTeEhRVUZITEZWQlFWTXNTMEZCU3l4RlFVRkZPMEZCUXpOQ0xGZEJRMFVzVDBGQlR5eExRVUZMTEV0QlFVc3NWVUZCVlN4SlFVTXpRaXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRzFDUVVGdFFpeERRVU0xUXp0SFFVTklMRU5CUVVNN1EwRkRTRHRSUVVOUkxGVkJRVlVzUjBGQlZpeFZRVUZWT3pzN096dEJRVWxhTEVsQlFVMHNUMEZCVHl4SFFVTnNRaXhMUVVGTExFTkJRVU1zVDBGQlR5eEpRVU5pTEZWQlFWTXNTMEZCU3l4RlFVRkZPMEZCUTJRc1UwRkJUeXhMUVVGTExFbEJRVWtzVDBGQlR5eExRVUZMTEV0QlFVc3NVVUZCVVN4SFFVTnlReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMR2RDUVVGblFpeEhRVU42UXl4TFFVRkxMRU5CUVVNN1EwRkRXQ3hEUVVGRE96czdPenRCUVVkSExGTkJRVk1zVDBGQlR5eERRVUZETEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVN1FVRkRjRU1zVDBGQlN5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1IwRkJSeXhIUVVGSExFdEJRVXNzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4SFFVRkhMRWRCUVVjc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUdEJRVU5vUkN4UlFVRkpMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN5eExRVUZMTEVWQlFVVTdRVUZEZEVJc1lVRkJUeXhEUVVGRExFTkJRVU03UzBGRFZqdEhRVU5HTzBGQlEwUXNVMEZCVHl4RFFVRkRMRU5CUVVNc1EwRkJRenREUVVOWU96dEJRVVZOTEZOQlFWTXNaMEpCUVdkQ0xFTkJRVU1zVFVGQlRTeEZRVUZGTzBGQlEzWkRMRTFCUVVrc1QwRkJUeXhOUVVGTkxFdEJRVXNzVVVGQlVTeEZRVUZGT3p0QlFVVTVRaXhSUVVGSkxFMUJRVTBzU1VGQlNTeE5RVUZOTEVOQlFVTXNUVUZCVFN4RlFVRkZPMEZCUXpOQ0xHRkJRVThzVFVGQlRTeERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRPMHRCUTNoQ0xFMUJRVTBzU1VGQlNTeE5RVUZOTEVsQlFVa3NTVUZCU1N4RlFVRkZPMEZCUTNwQ0xHRkJRVThzUlVGQlJTeERRVUZETzB0QlExZ3NUVUZCVFN4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRk8wRkJRMnhDTEdGQlFVOHNUVUZCVFN4SFFVRkhMRVZCUVVVc1EwRkJRenRMUVVOd1FqczdPenM3UVVGTFJDeFZRVUZOTEVkQlFVY3NSVUZCUlN4SFFVRkhMRTFCUVUwc1EwRkJRenRIUVVOMFFqczdRVUZGUkN4TlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlR0QlFVTXhRaXhYUVVGUExFMUJRVTBzUTBGQlF6dEhRVU5tTzBGQlEwUXNVMEZCVHl4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExGRkJRVkVzUlVGQlJTeFZRVUZWTEVOQlFVTXNRMEZCUXp0RFFVTTNRenM3UVVGRlRTeFRRVUZUTEU5QlFVOHNRMEZCUXl4TFFVRkxMRVZCUVVVN1FVRkROMElzVFVGQlNTeERRVUZETEV0QlFVc3NTVUZCU1N4TFFVRkxMRXRCUVVzc1EwRkJReXhGUVVGRk8wRkJRM3BDTEZkQlFVOHNTVUZCU1N4RFFVRkRPMGRCUTJJc1RVRkJUU3hKUVVGSkxFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4TFFVRkxMRU5CUVVNc1RVRkJUU3hMUVVGTExFTkJRVU1zUlVGQlJUdEJRVU12UXl4WFFVRlBMRWxCUVVrc1EwRkJRenRIUVVOaUxFMUJRVTA3UVVGRFRDeFhRVUZQTEV0QlFVc3NRMEZCUXp0SFFVTmtPME5CUTBZN08wRkJSVTBzVTBGQlV5eFhRVUZYTEVOQlFVTXNUVUZCVFN4RlFVRkZPMEZCUTJ4RExFMUJRVWtzUzBGQlN5eEhRVUZITEUxQlFVMHNRMEZCUXl4RlFVRkZMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU03UVVGREwwSXNUMEZCU3l4RFFVRkRMRTlCUVU4c1IwRkJSeXhOUVVGTkxFTkJRVU03UVVGRGRrSXNVMEZCVHl4TFFVRkxMRU5CUVVNN1EwRkRaRHM3UVVGRlRTeFRRVUZUTEZkQlFWY3NRMEZCUXl4TlFVRk5MRVZCUVVVc1IwRkJSeXhGUVVGRk8wRkJRM1pETEZGQlFVMHNRMEZCUXl4SlFVRkpMRWRCUVVjc1IwRkJSeXhEUVVGRE8wRkJRMnhDTEZOQlFVOHNUVUZCVFN4RFFVRkRPME5CUTJZN08wRkJSVTBzVTBGQlV5eHBRa0ZCYVVJc1EwRkJReXhYUVVGWExFVkJRVVVzUlVGQlJTeEZRVUZGTzBGQlEycEVMRk5CUVU4c1EwRkJReXhYUVVGWExFZEJRVWNzVjBGQlZ5eEhRVUZITEVkQlFVY3NSMEZCUnl4RlFVRkZMRU5CUVVFc1IwRkJTU3hGUVVGRkxFTkJRVU03UTBGRGNFUWlMQ0ptYVd4bElqb2lkWFJwYkhNdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpqYjI1emRDQmxjMk5oY0dVZ1BTQjdYRzRnSUNjbUp6b2dKeVpoYlhBN0p5eGNiaUFnSnp3bk9pQW5KbXgwT3ljc1hHNGdJQ2MrSnpvZ0p5Wm5kRHNuTEZ4dUlDQW5YQ0luT2lBbkpuRjFiM1E3Snl4Y2JpQWdYQ0luWENJNklDY21JM2d5TnpzbkxGeHVJQ0FuWUNjNklDY21JM2cyTURzbkxGeHVJQ0FuUFNjNklDY21JM2d6UkRzblhHNTlPMXh1WEc1amIyNXpkQ0JpWVdSRGFHRnljeUE5SUM5YkpqdytYQ0luWUQxZEwyY3NYRzRnSUhCdmMzTnBZbXhsSUQwZ0wxc21QRDVjSWlkZ1BWMHZPMXh1WEc1bWRXNWpkR2x2YmlCbGMyTmhjR1ZEYUdGeUtHTm9jaWtnZTF4dUlDQnlaWFIxY200Z1pYTmpZWEJsVzJOb2NsMDdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCbGVIUmxibVFvYjJKcUlDOHFJQ3dnTGk0dWMyOTFjbU5sSUNvdktTQjdYRzRnSUdadmNpQW9iR1YwSUdrZ1BTQXhPeUJwSUR3Z1lYSm5kVzFsYm5SekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdabTl5SUNoc1pYUWdhMlY1SUdsdUlHRnlaM1Z0Wlc1MGMxdHBYU2tnZTF4dUlDQWdJQ0FnYVdZZ0tFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaGhjbWQxYldWdWRITmJhVjBzSUd0bGVTa3BJSHRjYmlBZ0lDQWdJQ0FnYjJKcVcydGxlVjBnUFNCaGNtZDFiV1Z1ZEhOYmFWMWJhMlY1WFR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnYjJKcU8xeHVmVnh1WEc1bGVIQnZjblFnYkdWMElIUnZVM1J5YVc1bklEMGdUMkpxWldOMExuQnliM1J2ZEhsd1pTNTBiMU4wY21sdVp6dGNibHh1THk4Z1UyOTFjbU5sWkNCbWNtOXRJR3h2WkdGemFGeHVMeThnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDJKbGMzUnBaV3B6TDJ4dlpHRnphQzlpYkc5aUwyMWhjM1JsY2k5TVNVTkZUbE5GTG5SNGRGeHVMeW9nWlhOc2FXNTBMV1JwYzJGaWJHVWdablZ1WXkxemRIbHNaU0FxTDF4dWJHVjBJR2x6Um5WdVkzUnBiMjRnUFNCbWRXNWpkR2x2YmloMllXeDFaU2tnZTF4dUlDQnlaWFIxY200Z2RIbHdaVzltSUhaaGJIVmxJRDA5UFNBblpuVnVZM1JwYjI0bk8xeHVmVHRjYmk4dklHWmhiR3hpWVdOcklHWnZjaUJ2YkdSbGNpQjJaWEp6YVc5dWN5QnZaaUJEYUhKdmJXVWdZVzVrSUZOaFptRnlhVnh1THlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUc1bGVIUWdLaTljYm1sbUlDaHBjMFoxYm1OMGFXOXVLQzk0THlrcElIdGNiaUFnYVhOR2RXNWpkR2x2YmlBOUlHWjFibU4wYVc5dUtIWmhiSFZsS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ2hjYmlBZ0lDQWdJSFI1Y0dWdlppQjJZV3gxWlNBOVBUMGdKMloxYm1OMGFXOXVKeUFtSmx4dUlDQWdJQ0FnZEc5VGRISnBibWN1WTJGc2JDaDJZV3gxWlNrZ1BUMDlJQ2RiYjJKcVpXTjBJRVoxYm1OMGFXOXVYU2RjYmlBZ0lDQXBPMXh1SUNCOU8xeHVmVnh1Wlhod2IzSjBJSHNnYVhOR2RXNWpkR2x2YmlCOU8xeHVMeW9nWlhOc2FXNTBMV1Z1WVdKc1pTQm1kVzVqTFhOMGVXeGxJQ292WEc1Y2JpOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnVaWGgwSUNvdlhHNWxlSEJ2Y25RZ1kyOXVjM1FnYVhOQmNuSmhlU0E5WEc0Z0lFRnljbUY1TG1selFYSnlZWGtnZkh4Y2JpQWdablZ1WTNScGIyNG9kbUZzZFdVcElIdGNiaUFnSUNCeVpYUjFjbTRnZG1Gc2RXVWdKaVlnZEhsd1pXOW1JSFpoYkhWbElEMDlQU0FuYjJKcVpXTjBKMXh1SUNBZ0lDQWdQeUIwYjFOMGNtbHVaeTVqWVd4c0tIWmhiSFZsS1NBOVBUMGdKMXR2WW1wbFkzUWdRWEp5WVhsZEoxeHVJQ0FnSUNBZ09pQm1ZV3h6WlR0Y2JpQWdmVHRjYmx4dUx5OGdUMnhrWlhJZ1NVVWdkbVZ5YzJsdmJuTWdaRzhnYm05MElHUnBjbVZqZEd4NUlITjFjSEJ2Y25RZ2FXNWtaWGhQWmlCemJ5QjNaU0J0ZFhOMElHbHRjR3hsYldWdWRDQnZkWElnYjNkdUxDQnpZV1JzZVM1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCcGJtUmxlRTltS0dGeWNtRjVMQ0IyWVd4MVpTa2dlMXh1SUNCbWIzSWdLR3hsZENCcElEMGdNQ3dnYkdWdUlEMGdZWEp5WVhrdWJHVnVaM1JvT3lCcElEd2diR1Z1T3lCcEt5c3BJSHRjYmlBZ0lDQnBaaUFvWVhKeVlYbGJhVjBnUFQwOUlIWmhiSFZsS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYVR0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnY21WMGRYSnVJQzB4TzF4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaWE5qWVhCbFJYaHdjbVZ6YzJsdmJpaHpkSEpwYm1jcElIdGNiaUFnYVdZZ0tIUjVjR1Z2WmlCemRISnBibWNnSVQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ0x5OGdaRzl1SjNRZ1pYTmpZWEJsSUZOaFptVlRkSEpwYm1kekxDQnphVzVqWlNCMGFHVjVKM0psSUdGc2NtVmhaSGtnYzJGbVpWeHVJQ0FnSUdsbUlDaHpkSEpwYm1jZ0ppWWdjM1J5YVc1bkxuUnZTRlJOVENrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhOMGNtbHVaeTUwYjBoVVRVd29LVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLSE4wY21sdVp5QTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z0p5YzdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDZ2hjM1J5YVc1bktTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2MzUnlhVzVuSUNzZ0p5YzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdSbTl5WTJVZ1lTQnpkSEpwYm1jZ1kyOXVkbVZ5YzJsdmJpQmhjeUIwYUdseklIZHBiR3dnWW1VZ1pHOXVaU0JpZVNCMGFHVWdZWEJ3Wlc1a0lISmxaMkZ5Wkd4bGMzTWdZVzVrWEc0Z0lDQWdMeThnZEdobElISmxaMlY0SUhSbGMzUWdkMmxzYkNCa2J5QjBhR2x6SUhSeVlXNXpjR0Z5Wlc1MGJIa2dZbVZvYVc1a0lIUm9aU0J6WTJWdVpYTXNJR05oZFhOcGJtY2dhWE56ZFdWeklHbG1YRzRnSUNBZ0x5OGdZVzRnYjJKcVpXTjBKM01nZEc4Z2MzUnlhVzVuSUdoaGN5QmxjMk5oY0dWa0lHTm9ZWEpoWTNSbGNuTWdhVzRnYVhRdVhHNGdJQ0FnYzNSeWFXNW5JRDBnSnljZ0t5QnpkSEpwYm1jN1hHNGdJSDFjYmx4dUlDQnBaaUFvSVhCdmMzTnBZbXhsTG5SbGMzUW9jM1J5YVc1bktTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCemRISnBibWM3WEc0Z0lIMWNiaUFnY21WMGRYSnVJSE4wY21sdVp5NXlaWEJzWVdObEtHSmhaRU5vWVhKekxDQmxjMk5oY0dWRGFHRnlLVHRjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHbHpSVzF3ZEhrb2RtRnNkV1VwSUh0Y2JpQWdhV1lnS0NGMllXeDFaU0FtSmlCMllXeDFaU0FoUFQwZ01Da2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNCOUlHVnNjMlVnYVdZZ0tHbHpRWEp5WVhrb2RtRnNkV1VwSUNZbUlIWmhiSFZsTG14bGJtZDBhQ0E5UFQwZ01Da2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1kzSmxZWFJsUm5KaGJXVW9iMkpxWldOMEtTQjdYRzRnSUd4bGRDQm1jbUZ0WlNBOUlHVjRkR1Z1WkNoN2ZTd2diMkpxWldOMEtUdGNiaUFnWm5KaGJXVXVYM0JoY21WdWRDQTlJRzlpYW1WamREdGNiaUFnY21WMGRYSnVJR1p5WVcxbE8xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWW14dlkydFFZWEpoYlhNb2NHRnlZVzF6TENCcFpITXBJSHRjYmlBZ2NHRnlZVzF6TG5CaGRHZ2dQU0JwWkhNN1hHNGdJSEpsZEhWeWJpQndZWEpoYlhNN1hHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJoY0hCbGJtUkRiMjUwWlhoMFVHRjBhQ2hqYjI1MFpYaDBVR0YwYUN3Z2FXUXBJSHRjYmlBZ2NtVjBkWEp1SUNoamIyNTBaWGgwVUdGMGFDQS9JR052Ym5SbGVIUlFZWFJvSUNzZ0p5NG5JRG9nSnljcElDc2dhV1E3WEc1OVhHNGlYWDA9XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQHBhcmFtIHR5cGVNYXAgW09iamVjdF0gTWFwIG9mIE1JTUUgdHlwZSAtPiBBcnJheVtleHRlbnNpb25zXVxuICogQHBhcmFtIC4uLlxuICovXG5mdW5jdGlvbiBNaW1lKCkge1xuICB0aGlzLl90eXBlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHRoaXMuX2V4dGVuc2lvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdGhpcy5kZWZpbmUoYXJndW1lbnRzW2ldKTtcbiAgfVxuXG4gIHRoaXMuZGVmaW5lID0gdGhpcy5kZWZpbmUuYmluZCh0aGlzKTtcbiAgdGhpcy5nZXRUeXBlID0gdGhpcy5nZXRUeXBlLmJpbmQodGhpcyk7XG4gIHRoaXMuZ2V0RXh0ZW5zaW9uID0gdGhpcy5nZXRFeHRlbnNpb24uYmluZCh0aGlzKTtcbn1cblxuLyoqXG4gKiBEZWZpbmUgbWltZXR5cGUgLT4gZXh0ZW5zaW9uIG1hcHBpbmdzLiAgRWFjaCBrZXkgaXMgYSBtaW1lLXR5cGUgdGhhdCBtYXBzXG4gKiB0byBhbiBhcnJheSBvZiBleHRlbnNpb25zIGFzc29jaWF0ZWQgd2l0aCB0aGUgdHlwZS4gIFRoZSBmaXJzdCBleHRlbnNpb24gaXNcbiAqIHVzZWQgYXMgdGhlIGRlZmF1bHQgZXh0ZW5zaW9uIGZvciB0aGUgdHlwZS5cbiAqXG4gKiBlLmcuIG1pbWUuZGVmaW5lKHsnYXVkaW8vb2dnJywgWydvZ2EnLCAnb2dnJywgJ3NweCddfSk7XG4gKlxuICogSWYgYSB0eXBlIGRlY2xhcmVzIGFuIGV4dGVuc2lvbiB0aGF0IGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCwgYW4gZXJyb3Igd2lsbFxuICogYmUgdGhyb3duLiAgVG8gc3VwcHJlc3MgdGhpcyBlcnJvciBhbmQgZm9yY2UgdGhlIGV4dGVuc2lvbiB0byBiZSBhc3NvY2lhdGVkXG4gKiB3aXRoIHRoZSBuZXcgdHlwZSwgcGFzcyBgZm9yY2VgPXRydWUuICBBbHRlcm5hdGl2ZWx5LCB5b3UgbWF5IHByZWZpeCB0aGVcbiAqIGV4dGVuc2lvbiB3aXRoIFwiKlwiIHRvIG1hcCB0aGUgdHlwZSB0byBleHRlbnNpb24sIHdpdGhvdXQgbWFwcGluZyB0aGVcbiAqIGV4dGVuc2lvbiB0byB0aGUgdHlwZS5cbiAqXG4gKiBlLmcuIG1pbWUuZGVmaW5lKHsnYXVkaW8vd2F2JywgWyd3YXYnXX0sIHsnYXVkaW8veC13YXYnLCBbJyp3YXYnXX0pO1xuICpcbiAqXG4gKiBAcGFyYW0gbWFwIChPYmplY3QpIHR5cGUgZGVmaW5pdGlvbnNcbiAqIEBwYXJhbSBmb3JjZSAoQm9vbGVhbikgaWYgdHJ1ZSwgZm9yY2Ugb3ZlcnJpZGluZyBvZiBleGlzdGluZyBkZWZpbml0aW9uc1xuICovXG5NaW1lLnByb3RvdHlwZS5kZWZpbmUgPSBmdW5jdGlvbih0eXBlTWFwLCBmb3JjZSkge1xuICBmb3IgKGxldCB0eXBlIGluIHR5cGVNYXApIHtcbiAgICBsZXQgZXh0ZW5zaW9ucyA9IHR5cGVNYXBbdHlwZV0ubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiB0LnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG4gICAgdHlwZSA9IHR5cGUudG9Mb3dlckNhc2UoKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXh0ZW5zaW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZXh0ID0gZXh0ZW5zaW9uc1tpXTtcblxuICAgICAgLy8gJyonIHByZWZpeCA9IG5vdCB0aGUgcHJlZmVycmVkIHR5cGUgZm9yIHRoaXMgZXh0ZW5zaW9uLiAgU28gZml4dXAgdGhlXG4gICAgICAvLyBleHRlbnNpb24sIGFuZCBza2lwIGl0LlxuICAgICAgaWYgKGV4dFswXSA9PT0gJyonKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWZvcmNlICYmIChleHQgaW4gdGhpcy5fdHlwZXMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnQXR0ZW1wdCB0byBjaGFuZ2UgbWFwcGluZyBmb3IgXCInICsgZXh0ICtcbiAgICAgICAgICAnXCIgZXh0ZW5zaW9uIGZyb20gXCInICsgdGhpcy5fdHlwZXNbZXh0XSArICdcIiB0byBcIicgKyB0eXBlICtcbiAgICAgICAgICAnXCIuIFBhc3MgYGZvcmNlPXRydWVgIHRvIGFsbG93IHRoaXMsIG90aGVyd2lzZSByZW1vdmUgXCInICsgZXh0ICtcbiAgICAgICAgICAnXCIgZnJvbSB0aGUgbGlzdCBvZiBleHRlbnNpb25zIGZvciBcIicgKyB0eXBlICsgJ1wiLidcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fdHlwZXNbZXh0XSA9IHR5cGU7XG4gICAgfVxuXG4gICAgLy8gVXNlIGZpcnN0IGV4dGVuc2lvbiBhcyBkZWZhdWx0XG4gICAgaWYgKGZvcmNlIHx8ICF0aGlzLl9leHRlbnNpb25zW3R5cGVdKSB7XG4gICAgICBjb25zdCBleHQgPSBleHRlbnNpb25zWzBdO1xuICAgICAgdGhpcy5fZXh0ZW5zaW9uc1t0eXBlXSA9IChleHRbMF0gIT09ICcqJykgPyBleHQgOiBleHQuc3Vic3RyKDEpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBMb29rdXAgYSBtaW1lIHR5cGUgYmFzZWQgb24gZXh0ZW5zaW9uXG4gKi9cbk1pbWUucHJvdG90eXBlLmdldFR5cGUgPSBmdW5jdGlvbihwYXRoKSB7XG4gIHBhdGggPSBTdHJpbmcocGF0aCk7XG4gIGxldCBsYXN0ID0gcGF0aC5yZXBsYWNlKC9eLipbL1xcXFxdLywgJycpLnRvTG93ZXJDYXNlKCk7XG4gIGxldCBleHQgPSBsYXN0LnJlcGxhY2UoL14uKlxcLi8sICcnKS50b0xvd2VyQ2FzZSgpO1xuXG4gIGxldCBoYXNQYXRoID0gbGFzdC5sZW5ndGggPCBwYXRoLmxlbmd0aDtcbiAgbGV0IGhhc0RvdCA9IGV4dC5sZW5ndGggPCBsYXN0Lmxlbmd0aCAtIDE7XG5cbiAgcmV0dXJuIChoYXNEb3QgfHwgIWhhc1BhdGgpICYmIHRoaXMuX3R5cGVzW2V4dF0gfHwgbnVsbDtcbn07XG5cbi8qKlxuICogUmV0dXJuIGZpbGUgZXh0ZW5zaW9uIGFzc29jaWF0ZWQgd2l0aCBhIG1pbWUgdHlwZVxuICovXG5NaW1lLnByb3RvdHlwZS5nZXRFeHRlbnNpb24gPSBmdW5jdGlvbih0eXBlKSB7XG4gIHR5cGUgPSAvXlxccyooW147XFxzXSopLy50ZXN0KHR5cGUpICYmIFJlZ0V4cC4kMTtcbiAgcmV0dXJuIHR5cGUgJiYgdGhpcy5fZXh0ZW5zaW9uc1t0eXBlLnRvTG93ZXJDYXNlKCldIHx8IG51bGw7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1pbWU7XG4iLCIndXNlIHN0cmljdCc7XG5cbmxldCBNaW1lID0gcmVxdWlyZSgnLi9NaW1lJyk7XG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBNaW1lKHJlcXVpcmUoJy4vdHlwZXMvc3RhbmRhcmQnKSwgcmVxdWlyZSgnLi90eXBlcy9vdGhlcicpKTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1wiYXBwbGljYXRpb24vcHJzLmN3d1wiOltcImN3d1wiXSxcImFwcGxpY2F0aW9uL3ZuZC4xMDAwbWluZHMuZGVjaXNpb24tbW9kZWwreG1sXCI6W1wiMWttXCJdLFwiYXBwbGljYXRpb24vdm5kLjNncHAucGljLWJ3LWxhcmdlXCI6W1wicGxiXCJdLFwiYXBwbGljYXRpb24vdm5kLjNncHAucGljLWJ3LXNtYWxsXCI6W1wicHNiXCJdLFwiYXBwbGljYXRpb24vdm5kLjNncHAucGljLWJ3LXZhclwiOltcInB2YlwiXSxcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwMi50Y2FwXCI6W1widGNhcFwiXSxcImFwcGxpY2F0aW9uL3ZuZC4zbS5wb3N0LWl0LW5vdGVzXCI6W1wicHduXCJdLFwiYXBwbGljYXRpb24vdm5kLmFjY3BhYy5zaW1wbHkuYXNvXCI6W1wiYXNvXCJdLFwiYXBwbGljYXRpb24vdm5kLmFjY3BhYy5zaW1wbHkuaW1wXCI6W1wiaW1wXCJdLFwiYXBwbGljYXRpb24vdm5kLmFjdWNvYm9sXCI6W1wiYWN1XCJdLFwiYXBwbGljYXRpb24vdm5kLmFjdWNvcnBcIjpbXCJhdGNcIixcImFjdXRjXCJdLFwiYXBwbGljYXRpb24vdm5kLmFkb2JlLmFpci1hcHBsaWNhdGlvbi1pbnN0YWxsZXItcGFja2FnZSt6aXBcIjpbXCJhaXJcIl0sXCJhcHBsaWNhdGlvbi92bmQuYWRvYmUuZm9ybXNjZW50cmFsLmZjZHRcIjpbXCJmY2R0XCJdLFwiYXBwbGljYXRpb24vdm5kLmFkb2JlLmZ4cFwiOltcImZ4cFwiLFwiZnhwbFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5hZG9iZS54ZHAreG1sXCI6W1wieGRwXCJdLFwiYXBwbGljYXRpb24vdm5kLmFkb2JlLnhmZGZcIjpbXCJ4ZmRmXCJdLFwiYXBwbGljYXRpb24vdm5kLmFoZWFkLnNwYWNlXCI6W1wiYWhlYWRcIl0sXCJhcHBsaWNhdGlvbi92bmQuYWlyemlwLmZpbGVzZWN1cmUuYXpmXCI6W1wiYXpmXCJdLFwiYXBwbGljYXRpb24vdm5kLmFpcnppcC5maWxlc2VjdXJlLmF6c1wiOltcImF6c1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5hbWF6b24uZWJvb2tcIjpbXCJhendcIl0sXCJhcHBsaWNhdGlvbi92bmQuYW1lcmljYW5keW5hbWljcy5hY2NcIjpbXCJhY2NcIl0sXCJhcHBsaWNhdGlvbi92bmQuYW1pZ2EuYW1pXCI6W1wiYW1pXCJdLFwiYXBwbGljYXRpb24vdm5kLmFuZHJvaWQucGFja2FnZS1hcmNoaXZlXCI6W1wiYXBrXCJdLFwiYXBwbGljYXRpb24vdm5kLmFuc2VyLXdlYi1jZXJ0aWZpY2F0ZS1pc3N1ZS1pbml0aWF0aW9uXCI6W1wiY2lpXCJdLFwiYXBwbGljYXRpb24vdm5kLmFuc2VyLXdlYi1mdW5kcy10cmFuc2Zlci1pbml0aWF0aW9uXCI6W1wiZnRpXCJdLFwiYXBwbGljYXRpb24vdm5kLmFudGl4LmdhbWUtY29tcG9uZW50XCI6W1wiYXR4XCJdLFwiYXBwbGljYXRpb24vdm5kLmFwcGxlLmluc3RhbGxlcit4bWxcIjpbXCJtcGtnXCJdLFwiYXBwbGljYXRpb24vdm5kLmFwcGxlLmtleW5vdGVcIjpbXCJrZXlcIl0sXCJhcHBsaWNhdGlvbi92bmQuYXBwbGUubXBlZ3VybFwiOltcIm0zdThcIl0sXCJhcHBsaWNhdGlvbi92bmQuYXBwbGUubnVtYmVyc1wiOltcIm51bWJlcnNcIl0sXCJhcHBsaWNhdGlvbi92bmQuYXBwbGUucGFnZXNcIjpbXCJwYWdlc1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5hcHBsZS5wa3Bhc3NcIjpbXCJwa3Bhc3NcIl0sXCJhcHBsaWNhdGlvbi92bmQuYXJpc3RhbmV0d29ya3Muc3dpXCI6W1wic3dpXCJdLFwiYXBwbGljYXRpb24vdm5kLmFzdHJhZWEtc29mdHdhcmUuaW90YVwiOltcImlvdGFcIl0sXCJhcHBsaWNhdGlvbi92bmQuYXVkaW9ncmFwaFwiOltcImFlcFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5iYWxzYW1pcS5ibW1sK3htbFwiOltcImJtbWxcIl0sXCJhcHBsaWNhdGlvbi92bmQuYmx1ZWljZS5tdWx0aXBhc3NcIjpbXCJtcG1cIl0sXCJhcHBsaWNhdGlvbi92bmQuYm1pXCI6W1wiYm1pXCJdLFwiYXBwbGljYXRpb24vdm5kLmJ1c2luZXNzb2JqZWN0c1wiOltcInJlcFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5jaGVtZHJhdyt4bWxcIjpbXCJjZHhtbFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5jaGlwbnV0cy5rYXJhb2tlLW1tZFwiOltcIm1tZFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5jaW5kZXJlbGxhXCI6W1wiY2R5XCJdLFwiYXBwbGljYXRpb24vdm5kLmNpdGF0aW9uc3R5bGVzLnN0eWxlK3htbFwiOltcImNzbFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5jbGF5bW9yZVwiOltcImNsYVwiXSxcImFwcGxpY2F0aW9uL3ZuZC5jbG9hbnRvLnJwOVwiOltcInJwOVwiXSxcImFwcGxpY2F0aW9uL3ZuZC5jbG9uay5jNGdyb3VwXCI6W1wiYzRnXCIsXCJjNGRcIixcImM0ZlwiLFwiYzRwXCIsXCJjNHVcIl0sXCJhcHBsaWNhdGlvbi92bmQuY2x1ZXRydXN0LmNhcnRvbW9iaWxlLWNvbmZpZ1wiOltcImMxMWFtY1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5jbHVldHJ1c3QuY2FydG9tb2JpbGUtY29uZmlnLXBrZ1wiOltcImMxMWFtelwiXSxcImFwcGxpY2F0aW9uL3ZuZC5jb21tb25zcGFjZVwiOltcImNzcFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5jb250YWN0LmNtc2dcIjpbXCJjZGJjbXNnXCJdLFwiYXBwbGljYXRpb24vdm5kLmNvc21vY2FsbGVyXCI6W1wiY21jXCJdLFwiYXBwbGljYXRpb24vdm5kLmNyaWNrLmNsaWNrZXJcIjpbXCJjbGt4XCJdLFwiYXBwbGljYXRpb24vdm5kLmNyaWNrLmNsaWNrZXIua2V5Ym9hcmRcIjpbXCJjbGtrXCJdLFwiYXBwbGljYXRpb24vdm5kLmNyaWNrLmNsaWNrZXIucGFsZXR0ZVwiOltcImNsa3BcIl0sXCJhcHBsaWNhdGlvbi92bmQuY3JpY2suY2xpY2tlci50ZW1wbGF0ZVwiOltcImNsa3RcIl0sXCJhcHBsaWNhdGlvbi92bmQuY3JpY2suY2xpY2tlci53b3JkYmFua1wiOltcImNsa3dcIl0sXCJhcHBsaWNhdGlvbi92bmQuY3JpdGljYWx0b29scy53YnMreG1sXCI6W1wid2JzXCJdLFwiYXBwbGljYXRpb24vdm5kLmN0Yy1wb3NtbFwiOltcInBtbFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5jdXBzLXBwZFwiOltcInBwZFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5jdXJsLmNhclwiOltcImNhclwiXSxcImFwcGxpY2F0aW9uL3ZuZC5jdXJsLnBjdXJsXCI6W1wicGN1cmxcIl0sXCJhcHBsaWNhdGlvbi92bmQuZGFydFwiOltcImRhcnRcIl0sXCJhcHBsaWNhdGlvbi92bmQuZGF0YS12aXNpb24ucmR6XCI6W1wicmR6XCJdLFwiYXBwbGljYXRpb24vdm5kLmRiZlwiOltcImRiZlwiXSxcImFwcGxpY2F0aW9uL3ZuZC5kZWNlLmRhdGFcIjpbXCJ1dmZcIixcInV2dmZcIixcInV2ZFwiLFwidXZ2ZFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5kZWNlLnR0bWwreG1sXCI6W1widXZ0XCIsXCJ1dnZ0XCJdLFwiYXBwbGljYXRpb24vdm5kLmRlY2UudW5zcGVjaWZpZWRcIjpbXCJ1dnhcIixcInV2dnhcIl0sXCJhcHBsaWNhdGlvbi92bmQuZGVjZS56aXBcIjpbXCJ1dnpcIixcInV2dnpcIl0sXCJhcHBsaWNhdGlvbi92bmQuZGVub3ZvLmZjc2VsYXlvdXQtbGlua1wiOltcImZlX2xhdW5jaFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5kbmFcIjpbXCJkbmFcIl0sXCJhcHBsaWNhdGlvbi92bmQuZG9sYnkubWxwXCI6W1wibWxwXCJdLFwiYXBwbGljYXRpb24vdm5kLmRwZ3JhcGhcIjpbXCJkcGdcIl0sXCJhcHBsaWNhdGlvbi92bmQuZHJlYW1mYWN0b3J5XCI6W1wiZGZhY1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5kcy1rZXlwb2ludFwiOltcImtweHhcIl0sXCJhcHBsaWNhdGlvbi92bmQuZHZiLmFpdFwiOltcImFpdFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5kdmIuc2VydmljZVwiOltcInN2Y1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5keW5hZ2VvXCI6W1wiZ2VvXCJdLFwiYXBwbGljYXRpb24vdm5kLmVjb3dpbi5jaGFydFwiOltcIm1hZ1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5lbmxpdmVuXCI6W1wibm1sXCJdLFwiYXBwbGljYXRpb24vdm5kLmVwc29uLmVzZlwiOltcImVzZlwiXSxcImFwcGxpY2F0aW9uL3ZuZC5lcHNvbi5tc2ZcIjpbXCJtc2ZcIl0sXCJhcHBsaWNhdGlvbi92bmQuZXBzb24ucXVpY2thbmltZVwiOltcInFhbVwiXSxcImFwcGxpY2F0aW9uL3ZuZC5lcHNvbi5zYWx0XCI6W1wic2x0XCJdLFwiYXBwbGljYXRpb24vdm5kLmVwc29uLnNzZlwiOltcInNzZlwiXSxcImFwcGxpY2F0aW9uL3ZuZC5lc3ppZ25vMyt4bWxcIjpbXCJlczNcIixcImV0M1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5lenBpeC1hbGJ1bVwiOltcImV6MlwiXSxcImFwcGxpY2F0aW9uL3ZuZC5lenBpeC1wYWNrYWdlXCI6W1wiZXozXCJdLFwiYXBwbGljYXRpb24vdm5kLmZkZlwiOltcImZkZlwiXSxcImFwcGxpY2F0aW9uL3ZuZC5mZHNuLm1zZWVkXCI6W1wibXNlZWRcIl0sXCJhcHBsaWNhdGlvbi92bmQuZmRzbi5zZWVkXCI6W1wic2VlZFwiLFwiZGF0YWxlc3NcIl0sXCJhcHBsaWNhdGlvbi92bmQuZmxvZ3JhcGhpdFwiOltcImdwaFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5mbHV4dGltZS5jbGlwXCI6W1wiZnRjXCJdLFwiYXBwbGljYXRpb24vdm5kLmZyYW1lbWFrZXJcIjpbXCJmbVwiLFwiZnJhbWVcIixcIm1ha2VyXCIsXCJib29rXCJdLFwiYXBwbGljYXRpb24vdm5kLmZyb2dhbnMuZm5jXCI6W1wiZm5jXCJdLFwiYXBwbGljYXRpb24vdm5kLmZyb2dhbnMubHRmXCI6W1wibHRmXCJdLFwiYXBwbGljYXRpb24vdm5kLmZzYy53ZWJsYXVuY2hcIjpbXCJmc2NcIl0sXCJhcHBsaWNhdGlvbi92bmQuZnVqaXRzdS5vYXN5c1wiOltcIm9hc1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5mdWppdHN1Lm9hc3lzMlwiOltcIm9hMlwiXSxcImFwcGxpY2F0aW9uL3ZuZC5mdWppdHN1Lm9hc3lzM1wiOltcIm9hM1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5mdWppdHN1Lm9hc3lzZ3BcIjpbXCJmZzVcIl0sXCJhcHBsaWNhdGlvbi92bmQuZnVqaXRzdS5vYXN5c3Byc1wiOltcImJoMlwiXSxcImFwcGxpY2F0aW9uL3ZuZC5mdWppeGVyb3guZGRkXCI6W1wiZGRkXCJdLFwiYXBwbGljYXRpb24vdm5kLmZ1aml4ZXJveC5kb2N1d29ya3NcIjpbXCJ4ZHdcIl0sXCJhcHBsaWNhdGlvbi92bmQuZnVqaXhlcm94LmRvY3V3b3Jrcy5iaW5kZXJcIjpbXCJ4YmRcIl0sXCJhcHBsaWNhdGlvbi92bmQuZnV6enlzaGVldFwiOltcImZ6c1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5nZW5vbWF0aXgudHV4ZWRvXCI6W1widHhkXCJdLFwiYXBwbGljYXRpb24vdm5kLmdlb2dlYnJhLmZpbGVcIjpbXCJnZ2JcIl0sXCJhcHBsaWNhdGlvbi92bmQuZ2VvZ2VicmEudG9vbFwiOltcImdndFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5nZW9tZXRyeS1leHBsb3JlclwiOltcImdleFwiLFwiZ3JlXCJdLFwiYXBwbGljYXRpb24vdm5kLmdlb25leHRcIjpbXCJneHRcIl0sXCJhcHBsaWNhdGlvbi92bmQuZ2VvcGxhblwiOltcImcyd1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5nZW9zcGFjZVwiOltcImczd1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5nbXhcIjpbXCJnbXhcIl0sXCJhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMuZG9jdW1lbnRcIjpbXCJnZG9jXCJdLFwiYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLnByZXNlbnRhdGlvblwiOltcImdzbGlkZXNcIl0sXCJhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMuc3ByZWFkc2hlZXRcIjpbXCJnc2hlZXRcIl0sXCJhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWVhcnRoLmttbCt4bWxcIjpbXCJrbWxcIl0sXCJhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWVhcnRoLmttelwiOltcImttelwiXSxcImFwcGxpY2F0aW9uL3ZuZC5ncmFmZXFcIjpbXCJncWZcIixcImdxc1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5ncm9vdmUtYWNjb3VudFwiOltcImdhY1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5ncm9vdmUtaGVscFwiOltcImdoZlwiXSxcImFwcGxpY2F0aW9uL3ZuZC5ncm9vdmUtaWRlbnRpdHktbWVzc2FnZVwiOltcImdpbVwiXSxcImFwcGxpY2F0aW9uL3ZuZC5ncm9vdmUtaW5qZWN0b3JcIjpbXCJncnZcIl0sXCJhcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLXRvb2wtbWVzc2FnZVwiOltcImd0bVwiXSxcImFwcGxpY2F0aW9uL3ZuZC5ncm9vdmUtdG9vbC10ZW1wbGF0ZVwiOltcInRwbFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5ncm9vdmUtdmNhcmRcIjpbXCJ2Y2dcIl0sXCJhcHBsaWNhdGlvbi92bmQuaGFsK3htbFwiOltcImhhbFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5oYW5kaGVsZC1lbnRlcnRhaW5tZW50K3htbFwiOltcInptbVwiXSxcImFwcGxpY2F0aW9uL3ZuZC5oYmNpXCI6W1wiaGJjaVwiXSxcImFwcGxpY2F0aW9uL3ZuZC5oaGUubGVzc29uLXBsYXllclwiOltcImxlc1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5ocC1ocGdsXCI6W1wiaHBnbFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5ocC1ocGlkXCI6W1wiaHBpZFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5ocC1ocHNcIjpbXCJocHNcIl0sXCJhcHBsaWNhdGlvbi92bmQuaHAtamx5dFwiOltcImpsdFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5ocC1wY2xcIjpbXCJwY2xcIl0sXCJhcHBsaWNhdGlvbi92bmQuaHAtcGNseGxcIjpbXCJwY2x4bFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5oeWRyb3N0YXRpeC5zb2YtZGF0YVwiOltcInNmZC1oZHN0eFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5pYm0ubWluaXBheVwiOltcIm1weVwiXSxcImFwcGxpY2F0aW9uL3ZuZC5pYm0ubW9kY2FwXCI6W1wiYWZwXCIsXCJsaXN0YWZwXCIsXCJsaXN0MzgyMFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5pYm0ucmlnaHRzLW1hbmFnZW1lbnRcIjpbXCJpcm1cIl0sXCJhcHBsaWNhdGlvbi92bmQuaWJtLnNlY3VyZS1jb250YWluZXJcIjpbXCJzY1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5pY2Nwcm9maWxlXCI6W1wiaWNjXCIsXCJpY21cIl0sXCJhcHBsaWNhdGlvbi92bmQuaWdsb2FkZXJcIjpbXCJpZ2xcIl0sXCJhcHBsaWNhdGlvbi92bmQuaW1tZXJ2aXNpb24taXZwXCI6W1wiaXZwXCJdLFwiYXBwbGljYXRpb24vdm5kLmltbWVydmlzaW9uLWl2dVwiOltcIml2dVwiXSxcImFwcGxpY2F0aW9uL3ZuZC5pbnNvcnMuaWdtXCI6W1wiaWdtXCJdLFwiYXBwbGljYXRpb24vdm5kLmludGVyY29uLmZvcm1uZXRcIjpbXCJ4cHdcIixcInhweFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5pbnRlcmdlb1wiOltcImkyZ1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5pbnR1LnFib1wiOltcInFib1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5pbnR1LnFmeFwiOltcInFmeFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5pcHVucGx1Z2dlZC5yY3Byb2ZpbGVcIjpbXCJyY3Byb2ZpbGVcIl0sXCJhcHBsaWNhdGlvbi92bmQuaXJlcG9zaXRvcnkucGFja2FnZSt4bWxcIjpbXCJpcnBcIl0sXCJhcHBsaWNhdGlvbi92bmQuaXMteHByXCI6W1wieHByXCJdLFwiYXBwbGljYXRpb24vdm5kLmlzYWMuZmNzXCI6W1wiZmNzXCJdLFwiYXBwbGljYXRpb24vdm5kLmphbVwiOltcImphbVwiXSxcImFwcGxpY2F0aW9uL3ZuZC5qY3AuamF2YW1lLm1pZGxldC1ybXNcIjpbXCJybXNcIl0sXCJhcHBsaWNhdGlvbi92bmQuamlzcFwiOltcImppc3BcIl0sXCJhcHBsaWNhdGlvbi92bmQuam9vc3Quam9kYS1hcmNoaXZlXCI6W1wiam9kYVwiXSxcImFwcGxpY2F0aW9uL3ZuZC5rYWhvb3R6XCI6W1wia3R6XCIsXCJrdHJcIl0sXCJhcHBsaWNhdGlvbi92bmQua2RlLmthcmJvblwiOltcImthcmJvblwiXSxcImFwcGxpY2F0aW9uL3ZuZC5rZGUua2NoYXJ0XCI6W1wiY2hydFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5rZGUua2Zvcm11bGFcIjpbXCJrZm9cIl0sXCJhcHBsaWNhdGlvbi92bmQua2RlLmtpdmlvXCI6W1wiZmx3XCJdLFwiYXBwbGljYXRpb24vdm5kLmtkZS5rb250b3VyXCI6W1wia29uXCJdLFwiYXBwbGljYXRpb24vdm5kLmtkZS5rcHJlc2VudGVyXCI6W1wia3ByXCIsXCJrcHRcIl0sXCJhcHBsaWNhdGlvbi92bmQua2RlLmtzcHJlYWRcIjpbXCJrc3BcIl0sXCJhcHBsaWNhdGlvbi92bmQua2RlLmt3b3JkXCI6W1wia3dkXCIsXCJrd3RcIl0sXCJhcHBsaWNhdGlvbi92bmQua2VuYW1lYWFwcFwiOltcImh0a2VcIl0sXCJhcHBsaWNhdGlvbi92bmQua2lkc3BpcmF0aW9uXCI6W1wia2lhXCJdLFwiYXBwbGljYXRpb24vdm5kLmtpbmFyXCI6W1wia25lXCIsXCJrbnBcIl0sXCJhcHBsaWNhdGlvbi92bmQua29hblwiOltcInNrcFwiLFwic2tkXCIsXCJza3RcIixcInNrbVwiXSxcImFwcGxpY2F0aW9uL3ZuZC5rb2Rhay1kZXNjcmlwdG9yXCI6W1wic3NlXCJdLFwiYXBwbGljYXRpb24vdm5kLmxhcy5sYXMreG1sXCI6W1wibGFzeG1sXCJdLFwiYXBwbGljYXRpb24vdm5kLmxsYW1hZ3JhcGhpY3MubGlmZS1iYWxhbmNlLmRlc2t0b3BcIjpbXCJsYmRcIl0sXCJhcHBsaWNhdGlvbi92bmQubGxhbWFncmFwaGljcy5saWZlLWJhbGFuY2UuZXhjaGFuZ2UreG1sXCI6W1wibGJlXCJdLFwiYXBwbGljYXRpb24vdm5kLmxvdHVzLTEtMi0zXCI6W1wiMTIzXCJdLFwiYXBwbGljYXRpb24vdm5kLmxvdHVzLWFwcHJvYWNoXCI6W1wiYXByXCJdLFwiYXBwbGljYXRpb24vdm5kLmxvdHVzLWZyZWVsYW5jZVwiOltcInByZVwiXSxcImFwcGxpY2F0aW9uL3ZuZC5sb3R1cy1ub3Rlc1wiOltcIm5zZlwiXSxcImFwcGxpY2F0aW9uL3ZuZC5sb3R1cy1vcmdhbml6ZXJcIjpbXCJvcmdcIl0sXCJhcHBsaWNhdGlvbi92bmQubG90dXMtc2NyZWVuY2FtXCI6W1wic2NtXCJdLFwiYXBwbGljYXRpb24vdm5kLmxvdHVzLXdvcmRwcm9cIjpbXCJsd3BcIl0sXCJhcHBsaWNhdGlvbi92bmQubWFjcG9ydHMucG9ydHBrZ1wiOltcInBvcnRwa2dcIl0sXCJhcHBsaWNhdGlvbi92bmQubWFwYm94LXZlY3Rvci10aWxlXCI6W1wibXZ0XCJdLFwiYXBwbGljYXRpb24vdm5kLm1jZFwiOltcIm1jZFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5tZWRjYWxjZGF0YVwiOltcIm1jMVwiXSxcImFwcGxpY2F0aW9uL3ZuZC5tZWRpYXN0YXRpb24uY2RrZXlcIjpbXCJjZGtleVwiXSxcImFwcGxpY2F0aW9uL3ZuZC5tZmVyXCI6W1wibXdmXCJdLFwiYXBwbGljYXRpb24vdm5kLm1mbXBcIjpbXCJtZm1cIl0sXCJhcHBsaWNhdGlvbi92bmQubWljcm9ncmFmeC5mbG9cIjpbXCJmbG9cIl0sXCJhcHBsaWNhdGlvbi92bmQubWljcm9ncmFmeC5pZ3hcIjpbXCJpZ3hcIl0sXCJhcHBsaWNhdGlvbi92bmQubWlmXCI6W1wibWlmXCJdLFwiYXBwbGljYXRpb24vdm5kLm1vYml1cy5kYWZcIjpbXCJkYWZcIl0sXCJhcHBsaWNhdGlvbi92bmQubW9iaXVzLmRpc1wiOltcImRpc1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5tb2JpdXMubWJrXCI6W1wibWJrXCJdLFwiYXBwbGljYXRpb24vdm5kLm1vYml1cy5tcXlcIjpbXCJtcXlcIl0sXCJhcHBsaWNhdGlvbi92bmQubW9iaXVzLm1zbFwiOltcIm1zbFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5tb2JpdXMucGxjXCI6W1wicGxjXCJdLFwiYXBwbGljYXRpb24vdm5kLm1vYml1cy50eGZcIjpbXCJ0eGZcIl0sXCJhcHBsaWNhdGlvbi92bmQubW9waHVuLmFwcGxpY2F0aW9uXCI6W1wibXBuXCJdLFwiYXBwbGljYXRpb24vdm5kLm1vcGh1bi5jZXJ0aWZpY2F0ZVwiOltcIm1wY1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5tb3ppbGxhLnh1bCt4bWxcIjpbXCJ4dWxcIl0sXCJhcHBsaWNhdGlvbi92bmQubXMtYXJ0Z2FscnlcIjpbXCJjaWxcIl0sXCJhcHBsaWNhdGlvbi92bmQubXMtY2FiLWNvbXByZXNzZWRcIjpbXCJjYWJcIl0sXCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWxcIjpbXCJ4bHNcIixcInhsbVwiLFwieGxhXCIsXCJ4bGNcIixcInhsdFwiLFwieGx3XCJdLFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLmFkZGluLm1hY3JvZW5hYmxlZC4xMlwiOltcInhsYW1cIl0sXCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuc2hlZXQuYmluYXJ5Lm1hY3JvZW5hYmxlZC4xMlwiOltcInhsc2JcIl0sXCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuc2hlZXQubWFjcm9lbmFibGVkLjEyXCI6W1wieGxzbVwiXSxcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC50ZW1wbGF0ZS5tYWNyb2VuYWJsZWQuMTJcIjpbXCJ4bHRtXCJdLFwiYXBwbGljYXRpb24vdm5kLm1zLWZvbnRvYmplY3RcIjpbXCJlb3RcIl0sXCJhcHBsaWNhdGlvbi92bmQubXMtaHRtbGhlbHBcIjpbXCJjaG1cIl0sXCJhcHBsaWNhdGlvbi92bmQubXMtaW1zXCI6W1wiaW1zXCJdLFwiYXBwbGljYXRpb24vdm5kLm1zLWxybVwiOltcImxybVwiXSxcImFwcGxpY2F0aW9uL3ZuZC5tcy1vZmZpY2V0aGVtZVwiOltcInRobXhcIl0sXCJhcHBsaWNhdGlvbi92bmQubXMtb3V0bG9va1wiOltcIm1zZ1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5tcy1wa2kuc2VjY2F0XCI6W1wiY2F0XCJdLFwiYXBwbGljYXRpb24vdm5kLm1zLXBraS5zdGxcIjpbXCIqc3RsXCJdLFwiYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnRcIjpbXCJwcHRcIixcInBwc1wiLFwicG90XCJdLFwiYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnQuYWRkaW4ubWFjcm9lbmFibGVkLjEyXCI6W1wicHBhbVwiXSxcImFwcGxpY2F0aW9uL3ZuZC5tcy1wb3dlcnBvaW50LnByZXNlbnRhdGlvbi5tYWNyb2VuYWJsZWQuMTJcIjpbXCJwcHRtXCJdLFwiYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnQuc2xpZGUubWFjcm9lbmFibGVkLjEyXCI6W1wic2xkbVwiXSxcImFwcGxpY2F0aW9uL3ZuZC5tcy1wb3dlcnBvaW50LnNsaWRlc2hvdy5tYWNyb2VuYWJsZWQuMTJcIjpbXCJwcHNtXCJdLFwiYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnQudGVtcGxhdGUubWFjcm9lbmFibGVkLjEyXCI6W1wicG90bVwiXSxcImFwcGxpY2F0aW9uL3ZuZC5tcy1wcm9qZWN0XCI6W1wibXBwXCIsXCJtcHRcIl0sXCJhcHBsaWNhdGlvbi92bmQubXMtd29yZC5kb2N1bWVudC5tYWNyb2VuYWJsZWQuMTJcIjpbXCJkb2NtXCJdLFwiYXBwbGljYXRpb24vdm5kLm1zLXdvcmQudGVtcGxhdGUubWFjcm9lbmFibGVkLjEyXCI6W1wiZG90bVwiXSxcImFwcGxpY2F0aW9uL3ZuZC5tcy13b3Jrc1wiOltcIndwc1wiLFwid2tzXCIsXCJ3Y21cIixcIndkYlwiXSxcImFwcGxpY2F0aW9uL3ZuZC5tcy13cGxcIjpbXCJ3cGxcIl0sXCJhcHBsaWNhdGlvbi92bmQubXMteHBzZG9jdW1lbnRcIjpbXCJ4cHNcIl0sXCJhcHBsaWNhdGlvbi92bmQubXNlcVwiOltcIm1zZXFcIl0sXCJhcHBsaWNhdGlvbi92bmQubXVzaWNpYW5cIjpbXCJtdXNcIl0sXCJhcHBsaWNhdGlvbi92bmQubXV2ZWUuc3R5bGVcIjpbXCJtc3R5XCJdLFwiYXBwbGljYXRpb24vdm5kLm15bmZjXCI6W1widGFnbGV0XCJdLFwiYXBwbGljYXRpb24vdm5kLm5ldXJvbGFuZ3VhZ2Uubmx1XCI6W1wibmx1XCJdLFwiYXBwbGljYXRpb24vdm5kLm5pdGZcIjpbXCJudGZcIixcIm5pdGZcIl0sXCJhcHBsaWNhdGlvbi92bmQubm9ibGVuZXQtZGlyZWN0b3J5XCI6W1wibm5kXCJdLFwiYXBwbGljYXRpb24vdm5kLm5vYmxlbmV0LXNlYWxlclwiOltcIm5uc1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5ub2JsZW5ldC13ZWJcIjpbXCJubndcIl0sXCJhcHBsaWNhdGlvbi92bmQubm9raWEubi1nYWdlLmFjK3htbFwiOltcIiphY1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5ub2tpYS5uLWdhZ2UuZGF0YVwiOltcIm5nZGF0XCJdLFwiYXBwbGljYXRpb24vdm5kLm5va2lhLm4tZ2FnZS5zeW1iaWFuLmluc3RhbGxcIjpbXCJuLWdhZ2VcIl0sXCJhcHBsaWNhdGlvbi92bmQubm9raWEucmFkaW8tcHJlc2V0XCI6W1wicnBzdFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5ub2tpYS5yYWRpby1wcmVzZXRzXCI6W1wicnBzc1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5ub3ZhZGlnbS5lZG1cIjpbXCJlZG1cIl0sXCJhcHBsaWNhdGlvbi92bmQubm92YWRpZ20uZWR4XCI6W1wiZWR4XCJdLFwiYXBwbGljYXRpb24vdm5kLm5vdmFkaWdtLmV4dFwiOltcImV4dFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuY2hhcnRcIjpbXCJvZGNcIl0sXCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LmNoYXJ0LXRlbXBsYXRlXCI6W1wib3RjXCJdLFwiYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5kYXRhYmFzZVwiOltcIm9kYlwiXSxcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuZm9ybXVsYVwiOltcIm9kZlwiXSxcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuZm9ybXVsYS10ZW1wbGF0ZVwiOltcIm9kZnRcIl0sXCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LmdyYXBoaWNzXCI6W1wib2RnXCJdLFwiYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5ncmFwaGljcy10ZW1wbGF0ZVwiOltcIm90Z1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuaW1hZ2VcIjpbXCJvZGlcIl0sXCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LmltYWdlLXRlbXBsYXRlXCI6W1wib3RpXCJdLFwiYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5wcmVzZW50YXRpb25cIjpbXCJvZHBcIl0sXCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnByZXNlbnRhdGlvbi10ZW1wbGF0ZVwiOltcIm90cFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuc3ByZWFkc2hlZXRcIjpbXCJvZHNcIl0sXCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnNwcmVhZHNoZWV0LXRlbXBsYXRlXCI6W1wib3RzXCJdLFwiYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC50ZXh0XCI6W1wib2R0XCJdLFwiYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC50ZXh0LW1hc3RlclwiOltcIm9kbVwiXSxcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQudGV4dC10ZW1wbGF0ZVwiOltcIm90dFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQudGV4dC13ZWJcIjpbXCJvdGhcIl0sXCJhcHBsaWNhdGlvbi92bmQub2xwYy1zdWdhclwiOltcInhvXCJdLFwiYXBwbGljYXRpb24vdm5kLm9tYS5kZDIreG1sXCI6W1wiZGQyXCJdLFwiYXBwbGljYXRpb24vdm5kLm9wZW5ibG94LmdhbWUreG1sXCI6W1wib2JneFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5vcGVub2ZmaWNlb3JnLmV4dGVuc2lvblwiOltcIm94dFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5vcGVuc3RyZWV0bWFwLmRhdGEreG1sXCI6W1wib3NtXCJdLFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnByZXNlbnRhdGlvblwiOltcInBwdHhcIl0sXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwuc2xpZGVcIjpbXCJzbGR4XCJdLFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnNsaWRlc2hvd1wiOltcInBwc3hcIl0sXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwudGVtcGxhdGVcIjpbXCJwb3R4XCJdLFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuc2hlZXRcIjpbXCJ4bHN4XCJdLFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwudGVtcGxhdGVcIjpbXCJ4bHR4XCJdLFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZG9jdW1lbnRcIjpbXCJkb2N4XCJdLFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwudGVtcGxhdGVcIjpbXCJkb3R4XCJdLFwiYXBwbGljYXRpb24vdm5kLm9zZ2VvLm1hcGd1aWRlLnBhY2thZ2VcIjpbXCJtZ3BcIl0sXCJhcHBsaWNhdGlvbi92bmQub3NnaS5kcFwiOltcImRwXCJdLFwiYXBwbGljYXRpb24vdm5kLm9zZ2kuc3Vic3lzdGVtXCI6W1wiZXNhXCJdLFwiYXBwbGljYXRpb24vdm5kLnBhbG1cIjpbXCJwZGJcIixcInBxYVwiLFwib3ByY1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5wYXdhYWZpbGVcIjpbXCJwYXdcIl0sXCJhcHBsaWNhdGlvbi92bmQucGcuZm9ybWF0XCI6W1wic3RyXCJdLFwiYXBwbGljYXRpb24vdm5kLnBnLm9zYXNsaVwiOltcImVpNlwiXSxcImFwcGxpY2F0aW9uL3ZuZC5waWNzZWxcIjpbXCJlZmlmXCJdLFwiYXBwbGljYXRpb24vdm5kLnBtaS53aWRnZXRcIjpbXCJ3Z1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5wb2NrZXRsZWFyblwiOltcInBsZlwiXSxcImFwcGxpY2F0aW9uL3ZuZC5wb3dlcmJ1aWxkZXI2XCI6W1wicGJkXCJdLFwiYXBwbGljYXRpb24vdm5kLnByZXZpZXdzeXN0ZW1zLmJveFwiOltcImJveFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5wcm90ZXVzLm1hZ2F6aW5lXCI6W1wibWd6XCJdLFwiYXBwbGljYXRpb24vdm5kLnB1Ymxpc2hhcmUtZGVsdGEtdHJlZVwiOltcInFwc1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5wdmkucHRpZDFcIjpbXCJwdGlkXCJdLFwiYXBwbGljYXRpb24vdm5kLnF1YXJrLnF1YXJreHByZXNzXCI6W1wicXhkXCIsXCJxeHRcIixcInF3ZFwiLFwicXd0XCIsXCJxeGxcIixcInF4YlwiXSxcImFwcGxpY2F0aW9uL3ZuZC5yYXJcIjpbXCJyYXJcIl0sXCJhcHBsaWNhdGlvbi92bmQucmVhbHZuYy5iZWRcIjpbXCJiZWRcIl0sXCJhcHBsaWNhdGlvbi92bmQucmVjb3JkYXJlLm11c2ljeG1sXCI6W1wibXhsXCJdLFwiYXBwbGljYXRpb24vdm5kLnJlY29yZGFyZS5tdXNpY3htbCt4bWxcIjpbXCJtdXNpY3htbFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5yaWcuY3J5cHRvbm90ZVwiOltcImNyeXB0b25vdGVcIl0sXCJhcHBsaWNhdGlvbi92bmQucmltLmNvZFwiOltcImNvZFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5ybi1yZWFsbWVkaWFcIjpbXCJybVwiXSxcImFwcGxpY2F0aW9uL3ZuZC5ybi1yZWFsbWVkaWEtdmJyXCI6W1wicm12YlwiXSxcImFwcGxpY2F0aW9uL3ZuZC5yb3V0ZTY2Lmxpbms2Nit4bWxcIjpbXCJsaW5rNjZcIl0sXCJhcHBsaWNhdGlvbi92bmQuc2FpbGluZ3RyYWNrZXIudHJhY2tcIjpbXCJzdFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5zZWVtYWlsXCI6W1wic2VlXCJdLFwiYXBwbGljYXRpb24vdm5kLnNlbWFcIjpbXCJzZW1hXCJdLFwiYXBwbGljYXRpb24vdm5kLnNlbWRcIjpbXCJzZW1kXCJdLFwiYXBwbGljYXRpb24vdm5kLnNlbWZcIjpbXCJzZW1mXCJdLFwiYXBwbGljYXRpb24vdm5kLnNoYW5hLmluZm9ybWVkLmZvcm1kYXRhXCI6W1wiaWZtXCJdLFwiYXBwbGljYXRpb24vdm5kLnNoYW5hLmluZm9ybWVkLmZvcm10ZW1wbGF0ZVwiOltcIml0cFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5zaGFuYS5pbmZvcm1lZC5pbnRlcmNoYW5nZVwiOltcImlpZlwiXSxcImFwcGxpY2F0aW9uL3ZuZC5zaGFuYS5pbmZvcm1lZC5wYWNrYWdlXCI6W1wiaXBrXCJdLFwiYXBwbGljYXRpb24vdm5kLnNpbXRlY2gtbWluZG1hcHBlclwiOltcInR3ZFwiLFwidHdkc1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5zbWFmXCI6W1wibW1mXCJdLFwiYXBwbGljYXRpb24vdm5kLnNtYXJ0LnRlYWNoZXJcIjpbXCJ0ZWFjaGVyXCJdLFwiYXBwbGljYXRpb24vdm5kLnNvZnR3YXJlNjAyLmZpbGxlci5mb3JtK3htbFwiOltcImZvXCJdLFwiYXBwbGljYXRpb24vdm5kLnNvbGVudC5zZGttK3htbFwiOltcInNka21cIixcInNka2RcIl0sXCJhcHBsaWNhdGlvbi92bmQuc3BvdGZpcmUuZHhwXCI6W1wiZHhwXCJdLFwiYXBwbGljYXRpb24vdm5kLnNwb3RmaXJlLnNmc1wiOltcInNmc1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5zdGFyZGl2aXNpb24uY2FsY1wiOltcInNkY1wiXSxcImFwcGxpY2F0aW9uL3ZuZC5zdGFyZGl2aXNpb24uZHJhd1wiOltcInNkYVwiXSxcImFwcGxpY2F0aW9uL3ZuZC5zdGFyZGl2aXNpb24uaW1wcmVzc1wiOltcInNkZFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5zdGFyZGl2aXNpb24ubWF0aFwiOltcInNtZlwiXSxcImFwcGxpY2F0aW9uL3ZuZC5zdGFyZGl2aXNpb24ud3JpdGVyXCI6W1wic2R3XCIsXCJ2b3JcIl0sXCJhcHBsaWNhdGlvbi92bmQuc3RhcmRpdmlzaW9uLndyaXRlci1nbG9iYWxcIjpbXCJzZ2xcIl0sXCJhcHBsaWNhdGlvbi92bmQuc3RlcG1hbmlhLnBhY2thZ2VcIjpbXCJzbXppcFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5zdGVwbWFuaWEuc3RlcGNoYXJ0XCI6W1wic21cIl0sXCJhcHBsaWNhdGlvbi92bmQuc3VuLndhZGwreG1sXCI6W1wid2FkbFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5zdW4ueG1sLmNhbGNcIjpbXCJzeGNcIl0sXCJhcHBsaWNhdGlvbi92bmQuc3VuLnhtbC5jYWxjLnRlbXBsYXRlXCI6W1wic3RjXCJdLFwiYXBwbGljYXRpb24vdm5kLnN1bi54bWwuZHJhd1wiOltcInN4ZFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5zdW4ueG1sLmRyYXcudGVtcGxhdGVcIjpbXCJzdGRcIl0sXCJhcHBsaWNhdGlvbi92bmQuc3VuLnhtbC5pbXByZXNzXCI6W1wic3hpXCJdLFwiYXBwbGljYXRpb24vdm5kLnN1bi54bWwuaW1wcmVzcy50ZW1wbGF0ZVwiOltcInN0aVwiXSxcImFwcGxpY2F0aW9uL3ZuZC5zdW4ueG1sLm1hdGhcIjpbXCJzeG1cIl0sXCJhcHBsaWNhdGlvbi92bmQuc3VuLnhtbC53cml0ZXJcIjpbXCJzeHdcIl0sXCJhcHBsaWNhdGlvbi92bmQuc3VuLnhtbC53cml0ZXIuZ2xvYmFsXCI6W1wic3hnXCJdLFwiYXBwbGljYXRpb24vdm5kLnN1bi54bWwud3JpdGVyLnRlbXBsYXRlXCI6W1wic3R3XCJdLFwiYXBwbGljYXRpb24vdm5kLnN1cy1jYWxlbmRhclwiOltcInN1c1wiLFwic3VzcFwiXSxcImFwcGxpY2F0aW9uL3ZuZC5zdmRcIjpbXCJzdmRcIl0sXCJhcHBsaWNhdGlvbi92bmQuc3ltYmlhbi5pbnN0YWxsXCI6W1wic2lzXCIsXCJzaXN4XCJdLFwiYXBwbGljYXRpb24vdm5kLnN5bmNtbCt4bWxcIjpbXCJ4c21cIl0sXCJhcHBsaWNhdGlvbi92bmQuc3luY21sLmRtK3dieG1sXCI6W1wiYmRtXCJdLFwiYXBwbGljYXRpb24vdm5kLnN5bmNtbC5kbSt4bWxcIjpbXCJ4ZG1cIl0sXCJhcHBsaWNhdGlvbi92bmQuc3luY21sLmRtZGRmK3htbFwiOltcImRkZlwiXSxcImFwcGxpY2F0aW9uL3ZuZC50YW8uaW50ZW50LW1vZHVsZS1hcmNoaXZlXCI6W1widGFvXCJdLFwiYXBwbGljYXRpb24vdm5kLnRjcGR1bXAucGNhcFwiOltcInBjYXBcIixcImNhcFwiLFwiZG1wXCJdLFwiYXBwbGljYXRpb24vdm5kLnRtb2JpbGUtbGl2ZXR2XCI6W1widG1vXCJdLFwiYXBwbGljYXRpb24vdm5kLnRyaWQudHB0XCI6W1widHB0XCJdLFwiYXBwbGljYXRpb24vdm5kLnRyaXNjYXBlLm14c1wiOltcIm14c1wiXSxcImFwcGxpY2F0aW9uL3ZuZC50cnVlYXBwXCI6W1widHJhXCJdLFwiYXBwbGljYXRpb24vdm5kLnVmZGxcIjpbXCJ1ZmRcIixcInVmZGxcIl0sXCJhcHBsaWNhdGlvbi92bmQudWlxLnRoZW1lXCI6W1widXR6XCJdLFwiYXBwbGljYXRpb24vdm5kLnVtYWppblwiOltcInVtalwiXSxcImFwcGxpY2F0aW9uL3ZuZC51bml0eVwiOltcInVuaXR5d2ViXCJdLFwiYXBwbGljYXRpb24vdm5kLnVvbWwreG1sXCI6W1widW9tbFwiXSxcImFwcGxpY2F0aW9uL3ZuZC52Y3hcIjpbXCJ2Y3hcIl0sXCJhcHBsaWNhdGlvbi92bmQudmlzaW9cIjpbXCJ2c2RcIixcInZzdFwiLFwidnNzXCIsXCJ2c3dcIl0sXCJhcHBsaWNhdGlvbi92bmQudmlzaW9uYXJ5XCI6W1widmlzXCJdLFwiYXBwbGljYXRpb24vdm5kLnZzZlwiOltcInZzZlwiXSxcImFwcGxpY2F0aW9uL3ZuZC53YXAud2J4bWxcIjpbXCJ3YnhtbFwiXSxcImFwcGxpY2F0aW9uL3ZuZC53YXAud21sY1wiOltcIndtbGNcIl0sXCJhcHBsaWNhdGlvbi92bmQud2FwLndtbHNjcmlwdGNcIjpbXCJ3bWxzY1wiXSxcImFwcGxpY2F0aW9uL3ZuZC53ZWJ0dXJib1wiOltcInd0YlwiXSxcImFwcGxpY2F0aW9uL3ZuZC53b2xmcmFtLnBsYXllclwiOltcIm5icFwiXSxcImFwcGxpY2F0aW9uL3ZuZC53b3JkcGVyZmVjdFwiOltcIndwZFwiXSxcImFwcGxpY2F0aW9uL3ZuZC53cWRcIjpbXCJ3cWRcIl0sXCJhcHBsaWNhdGlvbi92bmQud3Quc3RmXCI6W1wic3RmXCJdLFwiYXBwbGljYXRpb24vdm5kLnhhcmFcIjpbXCJ4YXJcIl0sXCJhcHBsaWNhdGlvbi92bmQueGZkbFwiOltcInhmZGxcIl0sXCJhcHBsaWNhdGlvbi92bmQueWFtYWhhLmh2LWRpY1wiOltcImh2ZFwiXSxcImFwcGxpY2F0aW9uL3ZuZC55YW1haGEuaHYtc2NyaXB0XCI6W1wiaHZzXCJdLFwiYXBwbGljYXRpb24vdm5kLnlhbWFoYS5odi12b2ljZVwiOltcImh2cFwiXSxcImFwcGxpY2F0aW9uL3ZuZC55YW1haGEub3BlbnNjb3JlZm9ybWF0XCI6W1wib3NmXCJdLFwiYXBwbGljYXRpb24vdm5kLnlhbWFoYS5vcGVuc2NvcmVmb3JtYXQub3NmcHZnK3htbFwiOltcIm9zZnB2Z1wiXSxcImFwcGxpY2F0aW9uL3ZuZC55YW1haGEuc21hZi1hdWRpb1wiOltcInNhZlwiXSxcImFwcGxpY2F0aW9uL3ZuZC55YW1haGEuc21hZi1waHJhc2VcIjpbXCJzcGZcIl0sXCJhcHBsaWNhdGlvbi92bmQueWVsbG93cml2ZXItY3VzdG9tLW1lbnVcIjpbXCJjbXBcIl0sXCJhcHBsaWNhdGlvbi92bmQuenVsXCI6W1wiemlyXCIsXCJ6aXJ6XCJdLFwiYXBwbGljYXRpb24vdm5kLnp6YXp6LmRlY2sreG1sXCI6W1wiemF6XCJdLFwiYXBwbGljYXRpb24veC03ei1jb21wcmVzc2VkXCI6W1wiN3pcIl0sXCJhcHBsaWNhdGlvbi94LWFiaXdvcmRcIjpbXCJhYndcIl0sXCJhcHBsaWNhdGlvbi94LWFjZS1jb21wcmVzc2VkXCI6W1wiYWNlXCJdLFwiYXBwbGljYXRpb24veC1hcHBsZS1kaXNraW1hZ2VcIjpbXCIqZG1nXCJdLFwiYXBwbGljYXRpb24veC1hcmpcIjpbXCJhcmpcIl0sXCJhcHBsaWNhdGlvbi94LWF1dGhvcndhcmUtYmluXCI6W1wiYWFiXCIsXCJ4MzJcIixcInUzMlwiLFwidm94XCJdLFwiYXBwbGljYXRpb24veC1hdXRob3J3YXJlLW1hcFwiOltcImFhbVwiXSxcImFwcGxpY2F0aW9uL3gtYXV0aG9yd2FyZS1zZWdcIjpbXCJhYXNcIl0sXCJhcHBsaWNhdGlvbi94LWJjcGlvXCI6W1wiYmNwaW9cIl0sXCJhcHBsaWNhdGlvbi94LWJkb2NcIjpbXCIqYmRvY1wiXSxcImFwcGxpY2F0aW9uL3gtYml0dG9ycmVudFwiOltcInRvcnJlbnRcIl0sXCJhcHBsaWNhdGlvbi94LWJsb3JiXCI6W1wiYmxiXCIsXCJibG9yYlwiXSxcImFwcGxpY2F0aW9uL3gtYnppcFwiOltcImJ6XCJdLFwiYXBwbGljYXRpb24veC1iemlwMlwiOltcImJ6MlwiLFwiYm96XCJdLFwiYXBwbGljYXRpb24veC1jYnJcIjpbXCJjYnJcIixcImNiYVwiLFwiY2J0XCIsXCJjYnpcIixcImNiN1wiXSxcImFwcGxpY2F0aW9uL3gtY2RsaW5rXCI6W1widmNkXCJdLFwiYXBwbGljYXRpb24veC1jZnMtY29tcHJlc3NlZFwiOltcImNmc1wiXSxcImFwcGxpY2F0aW9uL3gtY2hhdFwiOltcImNoYXRcIl0sXCJhcHBsaWNhdGlvbi94LWNoZXNzLXBnblwiOltcInBnblwiXSxcImFwcGxpY2F0aW9uL3gtY2hyb21lLWV4dGVuc2lvblwiOltcImNyeFwiXSxcImFwcGxpY2F0aW9uL3gtY29jb2FcIjpbXCJjY29cIl0sXCJhcHBsaWNhdGlvbi94LWNvbmZlcmVuY2VcIjpbXCJuc2NcIl0sXCJhcHBsaWNhdGlvbi94LWNwaW9cIjpbXCJjcGlvXCJdLFwiYXBwbGljYXRpb24veC1jc2hcIjpbXCJjc2hcIl0sXCJhcHBsaWNhdGlvbi94LWRlYmlhbi1wYWNrYWdlXCI6W1wiKmRlYlwiLFwidWRlYlwiXSxcImFwcGxpY2F0aW9uL3gtZGdjLWNvbXByZXNzZWRcIjpbXCJkZ2NcIl0sXCJhcHBsaWNhdGlvbi94LWRpcmVjdG9yXCI6W1wiZGlyXCIsXCJkY3JcIixcImR4clwiLFwiY3N0XCIsXCJjY3RcIixcImN4dFwiLFwidzNkXCIsXCJmZ2RcIixcInN3YVwiXSxcImFwcGxpY2F0aW9uL3gtZG9vbVwiOltcIndhZFwiXSxcImFwcGxpY2F0aW9uL3gtZHRibmN4K3htbFwiOltcIm5jeFwiXSxcImFwcGxpY2F0aW9uL3gtZHRib29rK3htbFwiOltcImR0YlwiXSxcImFwcGxpY2F0aW9uL3gtZHRicmVzb3VyY2UreG1sXCI6W1wicmVzXCJdLFwiYXBwbGljYXRpb24veC1kdmlcIjpbXCJkdmlcIl0sXCJhcHBsaWNhdGlvbi94LWVudm95XCI6W1wiZXZ5XCJdLFwiYXBwbGljYXRpb24veC1ldmFcIjpbXCJldmFcIl0sXCJhcHBsaWNhdGlvbi94LWZvbnQtYmRmXCI6W1wiYmRmXCJdLFwiYXBwbGljYXRpb24veC1mb250LWdob3N0c2NyaXB0XCI6W1wiZ3NmXCJdLFwiYXBwbGljYXRpb24veC1mb250LWxpbnV4LXBzZlwiOltcInBzZlwiXSxcImFwcGxpY2F0aW9uL3gtZm9udC1wY2ZcIjpbXCJwY2ZcIl0sXCJhcHBsaWNhdGlvbi94LWZvbnQtc25mXCI6W1wic25mXCJdLFwiYXBwbGljYXRpb24veC1mb250LXR5cGUxXCI6W1wicGZhXCIsXCJwZmJcIixcInBmbVwiLFwiYWZtXCJdLFwiYXBwbGljYXRpb24veC1mcmVlYXJjXCI6W1wiYXJjXCJdLFwiYXBwbGljYXRpb24veC1mdXR1cmVzcGxhc2hcIjpbXCJzcGxcIl0sXCJhcHBsaWNhdGlvbi94LWdjYS1jb21wcmVzc2VkXCI6W1wiZ2NhXCJdLFwiYXBwbGljYXRpb24veC1nbHVseFwiOltcInVseFwiXSxcImFwcGxpY2F0aW9uL3gtZ251bWVyaWNcIjpbXCJnbnVtZXJpY1wiXSxcImFwcGxpY2F0aW9uL3gtZ3JhbXBzLXhtbFwiOltcImdyYW1wc1wiXSxcImFwcGxpY2F0aW9uL3gtZ3RhclwiOltcImd0YXJcIl0sXCJhcHBsaWNhdGlvbi94LWhkZlwiOltcImhkZlwiXSxcImFwcGxpY2F0aW9uL3gtaHR0cGQtcGhwXCI6W1wicGhwXCJdLFwiYXBwbGljYXRpb24veC1pbnN0YWxsLWluc3RydWN0aW9uc1wiOltcImluc3RhbGxcIl0sXCJhcHBsaWNhdGlvbi94LWlzbzk2NjAtaW1hZ2VcIjpbXCIqaXNvXCJdLFwiYXBwbGljYXRpb24veC1pd29yay1rZXlub3RlLXNmZmtleVwiOltcIiprZXlcIl0sXCJhcHBsaWNhdGlvbi94LWl3b3JrLW51bWJlcnMtc2ZmbnVtYmVyc1wiOltcIipudW1iZXJzXCJdLFwiYXBwbGljYXRpb24veC1pd29yay1wYWdlcy1zZmZwYWdlc1wiOltcIipwYWdlc1wiXSxcImFwcGxpY2F0aW9uL3gtamF2YS1hcmNoaXZlLWRpZmZcIjpbXCJqYXJkaWZmXCJdLFwiYXBwbGljYXRpb24veC1qYXZhLWpubHAtZmlsZVwiOltcImpubHBcIl0sXCJhcHBsaWNhdGlvbi94LWtlZXBhc3MyXCI6W1wia2RieFwiXSxcImFwcGxpY2F0aW9uL3gtbGF0ZXhcIjpbXCJsYXRleFwiXSxcImFwcGxpY2F0aW9uL3gtbHVhLWJ5dGVjb2RlXCI6W1wibHVhY1wiXSxcImFwcGxpY2F0aW9uL3gtbHpoLWNvbXByZXNzZWRcIjpbXCJsemhcIixcImxoYVwiXSxcImFwcGxpY2F0aW9uL3gtbWFrZXNlbGZcIjpbXCJydW5cIl0sXCJhcHBsaWNhdGlvbi94LW1pZVwiOltcIm1pZVwiXSxcImFwcGxpY2F0aW9uL3gtbW9iaXBvY2tldC1lYm9va1wiOltcInByY1wiLFwibW9iaVwiXSxcImFwcGxpY2F0aW9uL3gtbXMtYXBwbGljYXRpb25cIjpbXCJhcHBsaWNhdGlvblwiXSxcImFwcGxpY2F0aW9uL3gtbXMtc2hvcnRjdXRcIjpbXCJsbmtcIl0sXCJhcHBsaWNhdGlvbi94LW1zLXdtZFwiOltcIndtZFwiXSxcImFwcGxpY2F0aW9uL3gtbXMtd216XCI6W1wid216XCJdLFwiYXBwbGljYXRpb24veC1tcy14YmFwXCI6W1wieGJhcFwiXSxcImFwcGxpY2F0aW9uL3gtbXNhY2Nlc3NcIjpbXCJtZGJcIl0sXCJhcHBsaWNhdGlvbi94LW1zYmluZGVyXCI6W1wib2JkXCJdLFwiYXBwbGljYXRpb24veC1tc2NhcmRmaWxlXCI6W1wiY3JkXCJdLFwiYXBwbGljYXRpb24veC1tc2NsaXBcIjpbXCJjbHBcIl0sXCJhcHBsaWNhdGlvbi94LW1zZG9zLXByb2dyYW1cIjpbXCIqZXhlXCJdLFwiYXBwbGljYXRpb24veC1tc2Rvd25sb2FkXCI6W1wiKmV4ZVwiLFwiKmRsbFwiLFwiY29tXCIsXCJiYXRcIixcIiptc2lcIl0sXCJhcHBsaWNhdGlvbi94LW1zbWVkaWF2aWV3XCI6W1wibXZiXCIsXCJtMTNcIixcIm0xNFwiXSxcImFwcGxpY2F0aW9uL3gtbXNtZXRhZmlsZVwiOltcIip3bWZcIixcIip3bXpcIixcIiplbWZcIixcImVtelwiXSxcImFwcGxpY2F0aW9uL3gtbXNtb25leVwiOltcIm1ueVwiXSxcImFwcGxpY2F0aW9uL3gtbXNwdWJsaXNoZXJcIjpbXCJwdWJcIl0sXCJhcHBsaWNhdGlvbi94LW1zc2NoZWR1bGVcIjpbXCJzY2RcIl0sXCJhcHBsaWNhdGlvbi94LW1zdGVybWluYWxcIjpbXCJ0cm1cIl0sXCJhcHBsaWNhdGlvbi94LW1zd3JpdGVcIjpbXCJ3cmlcIl0sXCJhcHBsaWNhdGlvbi94LW5ldGNkZlwiOltcIm5jXCIsXCJjZGZcIl0sXCJhcHBsaWNhdGlvbi94LW5zLXByb3h5LWF1dG9jb25maWdcIjpbXCJwYWNcIl0sXCJhcHBsaWNhdGlvbi94LW56YlwiOltcIm56YlwiXSxcImFwcGxpY2F0aW9uL3gtcGVybFwiOltcInBsXCIsXCJwbVwiXSxcImFwcGxpY2F0aW9uL3gtcGlsb3RcIjpbXCIqcHJjXCIsXCIqcGRiXCJdLFwiYXBwbGljYXRpb24veC1wa2NzMTJcIjpbXCJwMTJcIixcInBmeFwiXSxcImFwcGxpY2F0aW9uL3gtcGtjczctY2VydGlmaWNhdGVzXCI6W1wicDdiXCIsXCJzcGNcIl0sXCJhcHBsaWNhdGlvbi94LXBrY3M3LWNlcnRyZXFyZXNwXCI6W1wicDdyXCJdLFwiYXBwbGljYXRpb24veC1yYXItY29tcHJlc3NlZFwiOltcIipyYXJcIl0sXCJhcHBsaWNhdGlvbi94LXJlZGhhdC1wYWNrYWdlLW1hbmFnZXJcIjpbXCJycG1cIl0sXCJhcHBsaWNhdGlvbi94LXJlc2VhcmNoLWluZm8tc3lzdGVtc1wiOltcInJpc1wiXSxcImFwcGxpY2F0aW9uL3gtc2VhXCI6W1wic2VhXCJdLFwiYXBwbGljYXRpb24veC1zaFwiOltcInNoXCJdLFwiYXBwbGljYXRpb24veC1zaGFyXCI6W1wic2hhclwiXSxcImFwcGxpY2F0aW9uL3gtc2hvY2t3YXZlLWZsYXNoXCI6W1wic3dmXCJdLFwiYXBwbGljYXRpb24veC1zaWx2ZXJsaWdodC1hcHBcIjpbXCJ4YXBcIl0sXCJhcHBsaWNhdGlvbi94LXNxbFwiOltcInNxbFwiXSxcImFwcGxpY2F0aW9uL3gtc3R1ZmZpdFwiOltcInNpdFwiXSxcImFwcGxpY2F0aW9uL3gtc3R1ZmZpdHhcIjpbXCJzaXR4XCJdLFwiYXBwbGljYXRpb24veC1zdWJyaXBcIjpbXCJzcnRcIl0sXCJhcHBsaWNhdGlvbi94LXN2NGNwaW9cIjpbXCJzdjRjcGlvXCJdLFwiYXBwbGljYXRpb24veC1zdjRjcmNcIjpbXCJzdjRjcmNcIl0sXCJhcHBsaWNhdGlvbi94LXQzdm0taW1hZ2VcIjpbXCJ0M1wiXSxcImFwcGxpY2F0aW9uL3gtdGFkc1wiOltcImdhbVwiXSxcImFwcGxpY2F0aW9uL3gtdGFyXCI6W1widGFyXCJdLFwiYXBwbGljYXRpb24veC10Y2xcIjpbXCJ0Y2xcIixcInRrXCJdLFwiYXBwbGljYXRpb24veC10ZXhcIjpbXCJ0ZXhcIl0sXCJhcHBsaWNhdGlvbi94LXRleC10Zm1cIjpbXCJ0Zm1cIl0sXCJhcHBsaWNhdGlvbi94LXRleGluZm9cIjpbXCJ0ZXhpbmZvXCIsXCJ0ZXhpXCJdLFwiYXBwbGljYXRpb24veC10Z2lmXCI6W1wiKm9ialwiXSxcImFwcGxpY2F0aW9uL3gtdXN0YXJcIjpbXCJ1c3RhclwiXSxcImFwcGxpY2F0aW9uL3gtdmlydHVhbGJveC1oZGRcIjpbXCJoZGRcIl0sXCJhcHBsaWNhdGlvbi94LXZpcnR1YWxib3gtb3ZhXCI6W1wib3ZhXCJdLFwiYXBwbGljYXRpb24veC12aXJ0dWFsYm94LW92ZlwiOltcIm92ZlwiXSxcImFwcGxpY2F0aW9uL3gtdmlydHVhbGJveC12Ym94XCI6W1widmJveFwiXSxcImFwcGxpY2F0aW9uL3gtdmlydHVhbGJveC12Ym94LWV4dHBhY2tcIjpbXCJ2Ym94LWV4dHBhY2tcIl0sXCJhcHBsaWNhdGlvbi94LXZpcnR1YWxib3gtdmRpXCI6W1widmRpXCJdLFwiYXBwbGljYXRpb24veC12aXJ0dWFsYm94LXZoZFwiOltcInZoZFwiXSxcImFwcGxpY2F0aW9uL3gtdmlydHVhbGJveC12bWRrXCI6W1widm1ka1wiXSxcImFwcGxpY2F0aW9uL3gtd2Fpcy1zb3VyY2VcIjpbXCJzcmNcIl0sXCJhcHBsaWNhdGlvbi94LXdlYi1hcHAtbWFuaWZlc3QranNvblwiOltcIndlYmFwcFwiXSxcImFwcGxpY2F0aW9uL3gteDUwOS1jYS1jZXJ0XCI6W1wiZGVyXCIsXCJjcnRcIixcInBlbVwiXSxcImFwcGxpY2F0aW9uL3gteGZpZ1wiOltcImZpZ1wiXSxcImFwcGxpY2F0aW9uL3gteGxpZmYreG1sXCI6W1wiKnhsZlwiXSxcImFwcGxpY2F0aW9uL3gteHBpbnN0YWxsXCI6W1wieHBpXCJdLFwiYXBwbGljYXRpb24veC14elwiOltcInh6XCJdLFwiYXBwbGljYXRpb24veC16bWFjaGluZVwiOltcInoxXCIsXCJ6MlwiLFwiejNcIixcIno0XCIsXCJ6NVwiLFwiejZcIixcIno3XCIsXCJ6OFwiXSxcImF1ZGlvL3ZuZC5kZWNlLmF1ZGlvXCI6W1widXZhXCIsXCJ1dnZhXCJdLFwiYXVkaW8vdm5kLmRpZ2l0YWwtd2luZHNcIjpbXCJlb2xcIl0sXCJhdWRpby92bmQuZHJhXCI6W1wiZHJhXCJdLFwiYXVkaW8vdm5kLmR0c1wiOltcImR0c1wiXSxcImF1ZGlvL3ZuZC5kdHMuaGRcIjpbXCJkdHNoZFwiXSxcImF1ZGlvL3ZuZC5sdWNlbnQudm9pY2VcIjpbXCJsdnBcIl0sXCJhdWRpby92bmQubXMtcGxheXJlYWR5Lm1lZGlhLnB5YVwiOltcInB5YVwiXSxcImF1ZGlvL3ZuZC5udWVyYS5lY2VscDQ4MDBcIjpbXCJlY2VscDQ4MDBcIl0sXCJhdWRpby92bmQubnVlcmEuZWNlbHA3NDcwXCI6W1wiZWNlbHA3NDcwXCJdLFwiYXVkaW8vdm5kLm51ZXJhLmVjZWxwOTYwMFwiOltcImVjZWxwOTYwMFwiXSxcImF1ZGlvL3ZuZC5yaXBcIjpbXCJyaXBcIl0sXCJhdWRpby94LWFhY1wiOltcImFhY1wiXSxcImF1ZGlvL3gtYWlmZlwiOltcImFpZlwiLFwiYWlmZlwiLFwiYWlmY1wiXSxcImF1ZGlvL3gtY2FmXCI6W1wiY2FmXCJdLFwiYXVkaW8veC1mbGFjXCI6W1wiZmxhY1wiXSxcImF1ZGlvL3gtbTRhXCI6W1wiKm00YVwiXSxcImF1ZGlvL3gtbWF0cm9za2FcIjpbXCJta2FcIl0sXCJhdWRpby94LW1wZWd1cmxcIjpbXCJtM3VcIl0sXCJhdWRpby94LW1zLXdheFwiOltcIndheFwiXSxcImF1ZGlvL3gtbXMtd21hXCI6W1wid21hXCJdLFwiYXVkaW8veC1wbi1yZWFsYXVkaW9cIjpbXCJyYW1cIixcInJhXCJdLFwiYXVkaW8veC1wbi1yZWFsYXVkaW8tcGx1Z2luXCI6W1wicm1wXCJdLFwiYXVkaW8veC1yZWFsYXVkaW9cIjpbXCIqcmFcIl0sXCJhdWRpby94LXdhdlwiOltcIip3YXZcIl0sXCJjaGVtaWNhbC94LWNkeFwiOltcImNkeFwiXSxcImNoZW1pY2FsL3gtY2lmXCI6W1wiY2lmXCJdLFwiY2hlbWljYWwveC1jbWRmXCI6W1wiY21kZlwiXSxcImNoZW1pY2FsL3gtY21sXCI6W1wiY21sXCJdLFwiY2hlbWljYWwveC1jc21sXCI6W1wiY3NtbFwiXSxcImNoZW1pY2FsL3gteHl6XCI6W1wieHl6XCJdLFwiaW1hZ2UvcHJzLmJ0aWZcIjpbXCJidGlmXCJdLFwiaW1hZ2UvcHJzLnB0aVwiOltcInB0aVwiXSxcImltYWdlL3ZuZC5hZG9iZS5waG90b3Nob3BcIjpbXCJwc2RcIl0sXCJpbWFnZS92bmQuYWlyemlwLmFjY2VsZXJhdG9yLmF6dlwiOltcImF6dlwiXSxcImltYWdlL3ZuZC5kZWNlLmdyYXBoaWNcIjpbXCJ1dmlcIixcInV2dmlcIixcInV2Z1wiLFwidXZ2Z1wiXSxcImltYWdlL3ZuZC5kanZ1XCI6W1wiZGp2dVwiLFwiZGp2XCJdLFwiaW1hZ2Uvdm5kLmR2Yi5zdWJ0aXRsZVwiOltcIipzdWJcIl0sXCJpbWFnZS92bmQuZHdnXCI6W1wiZHdnXCJdLFwiaW1hZ2Uvdm5kLmR4ZlwiOltcImR4ZlwiXSxcImltYWdlL3ZuZC5mYXN0Ymlkc2hlZXRcIjpbXCJmYnNcIl0sXCJpbWFnZS92bmQuZnB4XCI6W1wiZnB4XCJdLFwiaW1hZ2Uvdm5kLmZzdFwiOltcImZzdFwiXSxcImltYWdlL3ZuZC5mdWppeGVyb3guZWRtaWNzLW1tclwiOltcIm1tclwiXSxcImltYWdlL3ZuZC5mdWppeGVyb3guZWRtaWNzLXJsY1wiOltcInJsY1wiXSxcImltYWdlL3ZuZC5taWNyb3NvZnQuaWNvblwiOltcImljb1wiXSxcImltYWdlL3ZuZC5tcy1kZHNcIjpbXCJkZHNcIl0sXCJpbWFnZS92bmQubXMtbW9kaVwiOltcIm1kaVwiXSxcImltYWdlL3ZuZC5tcy1waG90b1wiOltcIndkcFwiXSxcImltYWdlL3ZuZC5uZXQtZnB4XCI6W1wibnB4XCJdLFwiaW1hZ2Uvdm5kLnBjby5iMTZcIjpbXCJiMTZcIl0sXCJpbWFnZS92bmQudGVuY2VudC50YXBcIjpbXCJ0YXBcIl0sXCJpbWFnZS92bmQudmFsdmUuc291cmNlLnRleHR1cmVcIjpbXCJ2dGZcIl0sXCJpbWFnZS92bmQud2FwLndibXBcIjpbXCJ3Ym1wXCJdLFwiaW1hZ2Uvdm5kLnhpZmZcIjpbXCJ4aWZcIl0sXCJpbWFnZS92bmQuemJydXNoLnBjeFwiOltcInBjeFwiXSxcImltYWdlL3gtM2RzXCI6W1wiM2RzXCJdLFwiaW1hZ2UveC1jbXUtcmFzdGVyXCI6W1wicmFzXCJdLFwiaW1hZ2UveC1jbXhcIjpbXCJjbXhcIl0sXCJpbWFnZS94LWZyZWVoYW5kXCI6W1wiZmhcIixcImZoY1wiLFwiZmg0XCIsXCJmaDVcIixcImZoN1wiXSxcImltYWdlL3gtaWNvblwiOltcIippY29cIl0sXCJpbWFnZS94LWpuZ1wiOltcImpuZ1wiXSxcImltYWdlL3gtbXJzaWQtaW1hZ2VcIjpbXCJzaWRcIl0sXCJpbWFnZS94LW1zLWJtcFwiOltcIipibXBcIl0sXCJpbWFnZS94LXBjeFwiOltcIipwY3hcIl0sXCJpbWFnZS94LXBpY3RcIjpbXCJwaWNcIixcInBjdFwiXSxcImltYWdlL3gtcG9ydGFibGUtYW55bWFwXCI6W1wicG5tXCJdLFwiaW1hZ2UveC1wb3J0YWJsZS1iaXRtYXBcIjpbXCJwYm1cIl0sXCJpbWFnZS94LXBvcnRhYmxlLWdyYXltYXBcIjpbXCJwZ21cIl0sXCJpbWFnZS94LXBvcnRhYmxlLXBpeG1hcFwiOltcInBwbVwiXSxcImltYWdlL3gtcmdiXCI6W1wicmdiXCJdLFwiaW1hZ2UveC10Z2FcIjpbXCJ0Z2FcIl0sXCJpbWFnZS94LXhiaXRtYXBcIjpbXCJ4Ym1cIl0sXCJpbWFnZS94LXhwaXhtYXBcIjpbXCJ4cG1cIl0sXCJpbWFnZS94LXh3aW5kb3dkdW1wXCI6W1wieHdkXCJdLFwibWVzc2FnZS92bmQud2ZhLndzY1wiOltcIndzY1wiXSxcIm1vZGVsL3ZuZC5jb2xsYWRhK3htbFwiOltcImRhZVwiXSxcIm1vZGVsL3ZuZC5kd2ZcIjpbXCJkd2ZcIl0sXCJtb2RlbC92bmQuZ2RsXCI6W1wiZ2RsXCJdLFwibW9kZWwvdm5kLmd0d1wiOltcImd0d1wiXSxcIm1vZGVsL3ZuZC5tdHNcIjpbXCJtdHNcIl0sXCJtb2RlbC92bmQub3BlbmdleFwiOltcIm9nZXhcIl0sXCJtb2RlbC92bmQucGFyYXNvbGlkLnRyYW5zbWl0LmJpbmFyeVwiOltcInhfYlwiXSxcIm1vZGVsL3ZuZC5wYXJhc29saWQudHJhbnNtaXQudGV4dFwiOltcInhfdFwiXSxcIm1vZGVsL3ZuZC5zYXAudmRzXCI6W1widmRzXCJdLFwibW9kZWwvdm5kLnVzZHoremlwXCI6W1widXNkelwiXSxcIm1vZGVsL3ZuZC52YWx2ZS5zb3VyY2UuY29tcGlsZWQtbWFwXCI6W1wiYnNwXCJdLFwibW9kZWwvdm5kLnZ0dVwiOltcInZ0dVwiXSxcInRleHQvcHJzLmxpbmVzLnRhZ1wiOltcImRzY1wiXSxcInRleHQvdm5kLmN1cmxcIjpbXCJjdXJsXCJdLFwidGV4dC92bmQuY3VybC5kY3VybFwiOltcImRjdXJsXCJdLFwidGV4dC92bmQuY3VybC5tY3VybFwiOltcIm1jdXJsXCJdLFwidGV4dC92bmQuY3VybC5zY3VybFwiOltcInNjdXJsXCJdLFwidGV4dC92bmQuZHZiLnN1YnRpdGxlXCI6W1wic3ViXCJdLFwidGV4dC92bmQuZmx5XCI6W1wiZmx5XCJdLFwidGV4dC92bmQuZm1pLmZsZXhzdG9yXCI6W1wiZmx4XCJdLFwidGV4dC92bmQuZ3JhcGh2aXpcIjpbXCJndlwiXSxcInRleHQvdm5kLmluM2QuM2RtbFwiOltcIjNkbWxcIl0sXCJ0ZXh0L3ZuZC5pbjNkLnNwb3RcIjpbXCJzcG90XCJdLFwidGV4dC92bmQuc3VuLmoybWUuYXBwLWRlc2NyaXB0b3JcIjpbXCJqYWRcIl0sXCJ0ZXh0L3ZuZC53YXAud21sXCI6W1wid21sXCJdLFwidGV4dC92bmQud2FwLndtbHNjcmlwdFwiOltcIndtbHNcIl0sXCJ0ZXh0L3gtYXNtXCI6W1wic1wiLFwiYXNtXCJdLFwidGV4dC94LWNcIjpbXCJjXCIsXCJjY1wiLFwiY3h4XCIsXCJjcHBcIixcImhcIixcImhoXCIsXCJkaWNcIl0sXCJ0ZXh0L3gtY29tcG9uZW50XCI6W1wiaHRjXCJdLFwidGV4dC94LWZvcnRyYW5cIjpbXCJmXCIsXCJmb3JcIixcImY3N1wiLFwiZjkwXCJdLFwidGV4dC94LWhhbmRsZWJhcnMtdGVtcGxhdGVcIjpbXCJoYnNcIl0sXCJ0ZXh0L3gtamF2YS1zb3VyY2VcIjpbXCJqYXZhXCJdLFwidGV4dC94LWx1YVwiOltcImx1YVwiXSxcInRleHQveC1tYXJrZG93blwiOltcIm1rZFwiXSxcInRleHQveC1uZm9cIjpbXCJuZm9cIl0sXCJ0ZXh0L3gtb3BtbFwiOltcIm9wbWxcIl0sXCJ0ZXh0L3gtb3JnXCI6W1wiKm9yZ1wiXSxcInRleHQveC1wYXNjYWxcIjpbXCJwXCIsXCJwYXNcIl0sXCJ0ZXh0L3gtcHJvY2Vzc2luZ1wiOltcInBkZVwiXSxcInRleHQveC1zYXNzXCI6W1wic2Fzc1wiXSxcInRleHQveC1zY3NzXCI6W1wic2Nzc1wiXSxcInRleHQveC1zZXRleHRcIjpbXCJldHhcIl0sXCJ0ZXh0L3gtc2Z2XCI6W1wic2Z2XCJdLFwidGV4dC94LXN1c2UteW1wXCI6W1wieW1wXCJdLFwidGV4dC94LXV1ZW5jb2RlXCI6W1widXVcIl0sXCJ0ZXh0L3gtdmNhbGVuZGFyXCI6W1widmNzXCJdLFwidGV4dC94LXZjYXJkXCI6W1widmNmXCJdLFwidmlkZW8vdm5kLmRlY2UuaGRcIjpbXCJ1dmhcIixcInV2dmhcIl0sXCJ2aWRlby92bmQuZGVjZS5tb2JpbGVcIjpbXCJ1dm1cIixcInV2dm1cIl0sXCJ2aWRlby92bmQuZGVjZS5wZFwiOltcInV2cFwiLFwidXZ2cFwiXSxcInZpZGVvL3ZuZC5kZWNlLnNkXCI6W1widXZzXCIsXCJ1dnZzXCJdLFwidmlkZW8vdm5kLmRlY2UudmlkZW9cIjpbXCJ1dnZcIixcInV2dnZcIl0sXCJ2aWRlby92bmQuZHZiLmZpbGVcIjpbXCJkdmJcIl0sXCJ2aWRlby92bmQuZnZ0XCI6W1wiZnZ0XCJdLFwidmlkZW8vdm5kLm1wZWd1cmxcIjpbXCJteHVcIixcIm00dVwiXSxcInZpZGVvL3ZuZC5tcy1wbGF5cmVhZHkubWVkaWEucHl2XCI6W1wicHl2XCJdLFwidmlkZW8vdm5kLnV2dnUubXA0XCI6W1widXZ1XCIsXCJ1dnZ1XCJdLFwidmlkZW8vdm5kLnZpdm9cIjpbXCJ2aXZcIl0sXCJ2aWRlby94LWY0dlwiOltcImY0dlwiXSxcInZpZGVvL3gtZmxpXCI6W1wiZmxpXCJdLFwidmlkZW8veC1mbHZcIjpbXCJmbHZcIl0sXCJ2aWRlby94LW00dlwiOltcIm00dlwiXSxcInZpZGVvL3gtbWF0cm9za2FcIjpbXCJta3ZcIixcIm1rM2RcIixcIm1rc1wiXSxcInZpZGVvL3gtbW5nXCI6W1wibW5nXCJdLFwidmlkZW8veC1tcy1hc2ZcIjpbXCJhc2ZcIixcImFzeFwiXSxcInZpZGVvL3gtbXMtdm9iXCI6W1widm9iXCJdLFwidmlkZW8veC1tcy13bVwiOltcIndtXCJdLFwidmlkZW8veC1tcy13bXZcIjpbXCJ3bXZcIl0sXCJ2aWRlby94LW1zLXdteFwiOltcIndteFwiXSxcInZpZGVvL3gtbXMtd3Z4XCI6W1wid3Z4XCJdLFwidmlkZW8veC1tc3ZpZGVvXCI6W1wiYXZpXCJdLFwidmlkZW8veC1zZ2ktbW92aWVcIjpbXCJtb3ZpZVwiXSxcInZpZGVvL3gtc212XCI6W1wic212XCJdLFwieC1jb25mZXJlbmNlL3gtY29vbHRhbGtcIjpbXCJpY2VcIl19OyIsIm1vZHVsZS5leHBvcnRzID0ge1wiYXBwbGljYXRpb24vYW5kcmV3LWluc2V0XCI6W1wiZXpcIl0sXCJhcHBsaWNhdGlvbi9hcHBsaXh3YXJlXCI6W1wiYXdcIl0sXCJhcHBsaWNhdGlvbi9hdG9tK3htbFwiOltcImF0b21cIl0sXCJhcHBsaWNhdGlvbi9hdG9tY2F0K3htbFwiOltcImF0b21jYXRcIl0sXCJhcHBsaWNhdGlvbi9hdG9tZGVsZXRlZCt4bWxcIjpbXCJhdG9tZGVsZXRlZFwiXSxcImFwcGxpY2F0aW9uL2F0b21zdmMreG1sXCI6W1wiYXRvbXN2Y1wiXSxcImFwcGxpY2F0aW9uL2F0c2MtZHdkK3htbFwiOltcImR3ZFwiXSxcImFwcGxpY2F0aW9uL2F0c2MtaGVsZCt4bWxcIjpbXCJoZWxkXCJdLFwiYXBwbGljYXRpb24vYXRzYy1yc2F0K3htbFwiOltcInJzYXRcIl0sXCJhcHBsaWNhdGlvbi9iZG9jXCI6W1wiYmRvY1wiXSxcImFwcGxpY2F0aW9uL2NhbGVuZGFyK3htbFwiOltcInhjc1wiXSxcImFwcGxpY2F0aW9uL2NjeG1sK3htbFwiOltcImNjeG1sXCJdLFwiYXBwbGljYXRpb24vY2RmeCt4bWxcIjpbXCJjZGZ4XCJdLFwiYXBwbGljYXRpb24vY2RtaS1jYXBhYmlsaXR5XCI6W1wiY2RtaWFcIl0sXCJhcHBsaWNhdGlvbi9jZG1pLWNvbnRhaW5lclwiOltcImNkbWljXCJdLFwiYXBwbGljYXRpb24vY2RtaS1kb21haW5cIjpbXCJjZG1pZFwiXSxcImFwcGxpY2F0aW9uL2NkbWktb2JqZWN0XCI6W1wiY2RtaW9cIl0sXCJhcHBsaWNhdGlvbi9jZG1pLXF1ZXVlXCI6W1wiY2RtaXFcIl0sXCJhcHBsaWNhdGlvbi9jdS1zZWVtZVwiOltcImN1XCJdLFwiYXBwbGljYXRpb24vZGFzaCt4bWxcIjpbXCJtcGRcIl0sXCJhcHBsaWNhdGlvbi9kYXZtb3VudCt4bWxcIjpbXCJkYXZtb3VudFwiXSxcImFwcGxpY2F0aW9uL2RvY2Jvb2sreG1sXCI6W1wiZGJrXCJdLFwiYXBwbGljYXRpb24vZHNzYytkZXJcIjpbXCJkc3NjXCJdLFwiYXBwbGljYXRpb24vZHNzYyt4bWxcIjpbXCJ4ZHNzY1wiXSxcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHRcIjpbXCJlc1wiLFwiZWNtYVwiXSxcImFwcGxpY2F0aW9uL2VtbWEreG1sXCI6W1wiZW1tYVwiXSxcImFwcGxpY2F0aW9uL2Vtb3Rpb25tbCt4bWxcIjpbXCJlbW90aW9ubWxcIl0sXCJhcHBsaWNhdGlvbi9lcHViK3ppcFwiOltcImVwdWJcIl0sXCJhcHBsaWNhdGlvbi9leGlcIjpbXCJleGlcIl0sXCJhcHBsaWNhdGlvbi9leHByZXNzXCI6W1wiZXhwXCJdLFwiYXBwbGljYXRpb24vZmR0K3htbFwiOltcImZkdFwiXSxcImFwcGxpY2F0aW9uL2ZvbnQtdGRwZnJcIjpbXCJwZnJcIl0sXCJhcHBsaWNhdGlvbi9nZW8ranNvblwiOltcImdlb2pzb25cIl0sXCJhcHBsaWNhdGlvbi9nbWwreG1sXCI6W1wiZ21sXCJdLFwiYXBwbGljYXRpb24vZ3B4K3htbFwiOltcImdweFwiXSxcImFwcGxpY2F0aW9uL2d4ZlwiOltcImd4ZlwiXSxcImFwcGxpY2F0aW9uL2d6aXBcIjpbXCJnelwiXSxcImFwcGxpY2F0aW9uL2hqc29uXCI6W1wiaGpzb25cIl0sXCJhcHBsaWNhdGlvbi9oeXBlcnN0dWRpb1wiOltcInN0a1wiXSxcImFwcGxpY2F0aW9uL2lua21sK3htbFwiOltcImlua1wiLFwiaW5rbWxcIl0sXCJhcHBsaWNhdGlvbi9pcGZpeFwiOltcImlwZml4XCJdLFwiYXBwbGljYXRpb24vaXRzK3htbFwiOltcIml0c1wiXSxcImFwcGxpY2F0aW9uL2phdmEtYXJjaGl2ZVwiOltcImphclwiLFwid2FyXCIsXCJlYXJcIl0sXCJhcHBsaWNhdGlvbi9qYXZhLXNlcmlhbGl6ZWQtb2JqZWN0XCI6W1wic2VyXCJdLFwiYXBwbGljYXRpb24vamF2YS12bVwiOltcImNsYXNzXCJdLFwiYXBwbGljYXRpb24vamF2YXNjcmlwdFwiOltcImpzXCIsXCJtanNcIl0sXCJhcHBsaWNhdGlvbi9qc29uXCI6W1wianNvblwiLFwibWFwXCJdLFwiYXBwbGljYXRpb24vanNvbjVcIjpbXCJqc29uNVwiXSxcImFwcGxpY2F0aW9uL2pzb25tbCtqc29uXCI6W1wianNvbm1sXCJdLFwiYXBwbGljYXRpb24vbGQranNvblwiOltcImpzb25sZFwiXSxcImFwcGxpY2F0aW9uL2xncit4bWxcIjpbXCJsZ3JcIl0sXCJhcHBsaWNhdGlvbi9sb3N0K3htbFwiOltcImxvc3R4bWxcIl0sXCJhcHBsaWNhdGlvbi9tYWMtYmluaGV4NDBcIjpbXCJocXhcIl0sXCJhcHBsaWNhdGlvbi9tYWMtY29tcGFjdHByb1wiOltcImNwdFwiXSxcImFwcGxpY2F0aW9uL21hZHMreG1sXCI6W1wibWFkc1wiXSxcImFwcGxpY2F0aW9uL21hbmlmZXN0K2pzb25cIjpbXCJ3ZWJtYW5pZmVzdFwiXSxcImFwcGxpY2F0aW9uL21hcmNcIjpbXCJtcmNcIl0sXCJhcHBsaWNhdGlvbi9tYXJjeG1sK3htbFwiOltcIm1yY3hcIl0sXCJhcHBsaWNhdGlvbi9tYXRoZW1hdGljYVwiOltcIm1hXCIsXCJuYlwiLFwibWJcIl0sXCJhcHBsaWNhdGlvbi9tYXRobWwreG1sXCI6W1wibWF0aG1sXCJdLFwiYXBwbGljYXRpb24vbWJveFwiOltcIm1ib3hcIl0sXCJhcHBsaWNhdGlvbi9tZWRpYXNlcnZlcmNvbnRyb2wreG1sXCI6W1wibXNjbWxcIl0sXCJhcHBsaWNhdGlvbi9tZXRhbGluayt4bWxcIjpbXCJtZXRhbGlua1wiXSxcImFwcGxpY2F0aW9uL21ldGFsaW5rNCt4bWxcIjpbXCJtZXRhNFwiXSxcImFwcGxpY2F0aW9uL21ldHMreG1sXCI6W1wibWV0c1wiXSxcImFwcGxpY2F0aW9uL21tdC1hZWkreG1sXCI6W1wibWFlaVwiXSxcImFwcGxpY2F0aW9uL21tdC11c2QreG1sXCI6W1wibXVzZFwiXSxcImFwcGxpY2F0aW9uL21vZHMreG1sXCI6W1wibW9kc1wiXSxcImFwcGxpY2F0aW9uL21wMjFcIjpbXCJtMjFcIixcIm1wMjFcIl0sXCJhcHBsaWNhdGlvbi9tcDRcIjpbXCJtcDRzXCIsXCJtNHBcIl0sXCJhcHBsaWNhdGlvbi9tc3dvcmRcIjpbXCJkb2NcIixcImRvdFwiXSxcImFwcGxpY2F0aW9uL214ZlwiOltcIm14ZlwiXSxcImFwcGxpY2F0aW9uL24tcXVhZHNcIjpbXCJucVwiXSxcImFwcGxpY2F0aW9uL24tdHJpcGxlc1wiOltcIm50XCJdLFwiYXBwbGljYXRpb24vbm9kZVwiOltcImNqc1wiXSxcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiOltcImJpblwiLFwiZG1zXCIsXCJscmZcIixcIm1hclwiLFwic29cIixcImRpc3RcIixcImRpc3R6XCIsXCJwa2dcIixcImJwa1wiLFwiZHVtcFwiLFwiZWxjXCIsXCJkZXBsb3lcIixcImV4ZVwiLFwiZGxsXCIsXCJkZWJcIixcImRtZ1wiLFwiaXNvXCIsXCJpbWdcIixcIm1zaVwiLFwibXNwXCIsXCJtc21cIixcImJ1ZmZlclwiXSxcImFwcGxpY2F0aW9uL29kYVwiOltcIm9kYVwiXSxcImFwcGxpY2F0aW9uL29lYnBzLXBhY2thZ2UreG1sXCI6W1wib3BmXCJdLFwiYXBwbGljYXRpb24vb2dnXCI6W1wib2d4XCJdLFwiYXBwbGljYXRpb24vb21kb2MreG1sXCI6W1wib21kb2NcIl0sXCJhcHBsaWNhdGlvbi9vbmVub3RlXCI6W1wib25ldG9jXCIsXCJvbmV0b2MyXCIsXCJvbmV0bXBcIixcIm9uZXBrZ1wiXSxcImFwcGxpY2F0aW9uL294cHNcIjpbXCJveHBzXCJdLFwiYXBwbGljYXRpb24vcDJwLW92ZXJsYXkreG1sXCI6W1wicmVsb1wiXSxcImFwcGxpY2F0aW9uL3BhdGNoLW9wcy1lcnJvcit4bWxcIjpbXCJ4ZXJcIl0sXCJhcHBsaWNhdGlvbi9wZGZcIjpbXCJwZGZcIl0sXCJhcHBsaWNhdGlvbi9wZ3AtZW5jcnlwdGVkXCI6W1wicGdwXCJdLFwiYXBwbGljYXRpb24vcGdwLXNpZ25hdHVyZVwiOltcImFzY1wiLFwic2lnXCJdLFwiYXBwbGljYXRpb24vcGljcy1ydWxlc1wiOltcInByZlwiXSxcImFwcGxpY2F0aW9uL3BrY3MxMFwiOltcInAxMFwiXSxcImFwcGxpY2F0aW9uL3BrY3M3LW1pbWVcIjpbXCJwN21cIixcInA3Y1wiXSxcImFwcGxpY2F0aW9uL3BrY3M3LXNpZ25hdHVyZVwiOltcInA3c1wiXSxcImFwcGxpY2F0aW9uL3BrY3M4XCI6W1wicDhcIl0sXCJhcHBsaWNhdGlvbi9wa2l4LWF0dHItY2VydFwiOltcImFjXCJdLFwiYXBwbGljYXRpb24vcGtpeC1jZXJ0XCI6W1wiY2VyXCJdLFwiYXBwbGljYXRpb24vcGtpeC1jcmxcIjpbXCJjcmxcIl0sXCJhcHBsaWNhdGlvbi9wa2l4LXBraXBhdGhcIjpbXCJwa2lwYXRoXCJdLFwiYXBwbGljYXRpb24vcGtpeGNtcFwiOltcInBraVwiXSxcImFwcGxpY2F0aW9uL3Bscyt4bWxcIjpbXCJwbHNcIl0sXCJhcHBsaWNhdGlvbi9wb3N0c2NyaXB0XCI6W1wiYWlcIixcImVwc1wiLFwicHNcIl0sXCJhcHBsaWNhdGlvbi9wcm92ZW5hbmNlK3htbFwiOltcInByb3Z4XCJdLFwiYXBwbGljYXRpb24vcHNrYyt4bWxcIjpbXCJwc2tjeG1sXCJdLFwiYXBwbGljYXRpb24vcmFtbCt5YW1sXCI6W1wicmFtbFwiXSxcImFwcGxpY2F0aW9uL3JkZit4bWxcIjpbXCJyZGZcIixcIm93bFwiXSxcImFwcGxpY2F0aW9uL3JlZ2luZm8reG1sXCI6W1wicmlmXCJdLFwiYXBwbGljYXRpb24vcmVsYXgtbmctY29tcGFjdC1zeW50YXhcIjpbXCJybmNcIl0sXCJhcHBsaWNhdGlvbi9yZXNvdXJjZS1saXN0cyt4bWxcIjpbXCJybFwiXSxcImFwcGxpY2F0aW9uL3Jlc291cmNlLWxpc3RzLWRpZmYreG1sXCI6W1wicmxkXCJdLFwiYXBwbGljYXRpb24vcmxzLXNlcnZpY2VzK3htbFwiOltcInJzXCJdLFwiYXBwbGljYXRpb24vcm91dGUtYXBkK3htbFwiOltcInJhcGRcIl0sXCJhcHBsaWNhdGlvbi9yb3V0ZS1zLXRzaWQreG1sXCI6W1wic2xzXCJdLFwiYXBwbGljYXRpb24vcm91dGUtdXNkK3htbFwiOltcInJ1c2RcIl0sXCJhcHBsaWNhdGlvbi9ycGtpLWdob3N0YnVzdGVyc1wiOltcImdiclwiXSxcImFwcGxpY2F0aW9uL3Jwa2ktbWFuaWZlc3RcIjpbXCJtZnRcIl0sXCJhcHBsaWNhdGlvbi9ycGtpLXJvYVwiOltcInJvYVwiXSxcImFwcGxpY2F0aW9uL3JzZCt4bWxcIjpbXCJyc2RcIl0sXCJhcHBsaWNhdGlvbi9yc3MreG1sXCI6W1wicnNzXCJdLFwiYXBwbGljYXRpb24vcnRmXCI6W1wicnRmXCJdLFwiYXBwbGljYXRpb24vc2JtbCt4bWxcIjpbXCJzYm1sXCJdLFwiYXBwbGljYXRpb24vc2N2cC1jdi1yZXF1ZXN0XCI6W1wic2NxXCJdLFwiYXBwbGljYXRpb24vc2N2cC1jdi1yZXNwb25zZVwiOltcInNjc1wiXSxcImFwcGxpY2F0aW9uL3NjdnAtdnAtcmVxdWVzdFwiOltcInNwcVwiXSxcImFwcGxpY2F0aW9uL3NjdnAtdnAtcmVzcG9uc2VcIjpbXCJzcHBcIl0sXCJhcHBsaWNhdGlvbi9zZHBcIjpbXCJzZHBcIl0sXCJhcHBsaWNhdGlvbi9zZW5tbCt4bWxcIjpbXCJzZW5tbHhcIl0sXCJhcHBsaWNhdGlvbi9zZW5zbWwreG1sXCI6W1wic2Vuc21seFwiXSxcImFwcGxpY2F0aW9uL3NldC1wYXltZW50LWluaXRpYXRpb25cIjpbXCJzZXRwYXlcIl0sXCJhcHBsaWNhdGlvbi9zZXQtcmVnaXN0cmF0aW9uLWluaXRpYXRpb25cIjpbXCJzZXRyZWdcIl0sXCJhcHBsaWNhdGlvbi9zaGYreG1sXCI6W1wic2hmXCJdLFwiYXBwbGljYXRpb24vc2lldmVcIjpbXCJzaXZcIixcInNpZXZlXCJdLFwiYXBwbGljYXRpb24vc21pbCt4bWxcIjpbXCJzbWlcIixcInNtaWxcIl0sXCJhcHBsaWNhdGlvbi9zcGFycWwtcXVlcnlcIjpbXCJycVwiXSxcImFwcGxpY2F0aW9uL3NwYXJxbC1yZXN1bHRzK3htbFwiOltcInNyeFwiXSxcImFwcGxpY2F0aW9uL3NyZ3NcIjpbXCJncmFtXCJdLFwiYXBwbGljYXRpb24vc3Jncyt4bWxcIjpbXCJncnhtbFwiXSxcImFwcGxpY2F0aW9uL3NydSt4bWxcIjpbXCJzcnVcIl0sXCJhcHBsaWNhdGlvbi9zc2RsK3htbFwiOltcInNzZGxcIl0sXCJhcHBsaWNhdGlvbi9zc21sK3htbFwiOltcInNzbWxcIl0sXCJhcHBsaWNhdGlvbi9zd2lkK3htbFwiOltcInN3aWR0YWdcIl0sXCJhcHBsaWNhdGlvbi90ZWkreG1sXCI6W1widGVpXCIsXCJ0ZWljb3JwdXNcIl0sXCJhcHBsaWNhdGlvbi90aHJhdWQreG1sXCI6W1widGZpXCJdLFwiYXBwbGljYXRpb24vdGltZXN0YW1wZWQtZGF0YVwiOltcInRzZFwiXSxcImFwcGxpY2F0aW9uL3RvbWxcIjpbXCJ0b21sXCJdLFwiYXBwbGljYXRpb24vdHJpZ1wiOltcInRyaWdcIl0sXCJhcHBsaWNhdGlvbi90dG1sK3htbFwiOltcInR0bWxcIl0sXCJhcHBsaWNhdGlvbi91Ympzb25cIjpbXCJ1YmpcIl0sXCJhcHBsaWNhdGlvbi91cmMtcmVzc2hlZXQreG1sXCI6W1wicnNoZWV0XCJdLFwiYXBwbGljYXRpb24vdXJjLXRhcmdldGRlc2MreG1sXCI6W1widGRcIl0sXCJhcHBsaWNhdGlvbi92b2ljZXhtbCt4bWxcIjpbXCJ2eG1sXCJdLFwiYXBwbGljYXRpb24vd2FzbVwiOltcIndhc21cIl0sXCJhcHBsaWNhdGlvbi93aWRnZXRcIjpbXCJ3Z3RcIl0sXCJhcHBsaWNhdGlvbi93aW5obHBcIjpbXCJobHBcIl0sXCJhcHBsaWNhdGlvbi93c2RsK3htbFwiOltcIndzZGxcIl0sXCJhcHBsaWNhdGlvbi93c3BvbGljeSt4bWxcIjpbXCJ3c3BvbGljeVwiXSxcImFwcGxpY2F0aW9uL3hhbWwreG1sXCI6W1wieGFtbFwiXSxcImFwcGxpY2F0aW9uL3hjYXAtYXR0K3htbFwiOltcInhhdlwiXSxcImFwcGxpY2F0aW9uL3hjYXAtY2Fwcyt4bWxcIjpbXCJ4Y2FcIl0sXCJhcHBsaWNhdGlvbi94Y2FwLWRpZmYreG1sXCI6W1wieGRmXCJdLFwiYXBwbGljYXRpb24veGNhcC1lbCt4bWxcIjpbXCJ4ZWxcIl0sXCJhcHBsaWNhdGlvbi94Y2FwLW5zK3htbFwiOltcInhuc1wiXSxcImFwcGxpY2F0aW9uL3hlbmMreG1sXCI6W1wieGVuY1wiXSxcImFwcGxpY2F0aW9uL3hodG1sK3htbFwiOltcInhodG1sXCIsXCJ4aHRcIl0sXCJhcHBsaWNhdGlvbi94bGlmZit4bWxcIjpbXCJ4bGZcIl0sXCJhcHBsaWNhdGlvbi94bWxcIjpbXCJ4bWxcIixcInhzbFwiLFwieHNkXCIsXCJybmdcIl0sXCJhcHBsaWNhdGlvbi94bWwtZHRkXCI6W1wiZHRkXCJdLFwiYXBwbGljYXRpb24veG9wK3htbFwiOltcInhvcFwiXSxcImFwcGxpY2F0aW9uL3hwcm9jK3htbFwiOltcInhwbFwiXSxcImFwcGxpY2F0aW9uL3hzbHQreG1sXCI6W1wiKnhzbFwiLFwieHNsdFwiXSxcImFwcGxpY2F0aW9uL3hzcGYreG1sXCI6W1wieHNwZlwiXSxcImFwcGxpY2F0aW9uL3h2K3htbFwiOltcIm14bWxcIixcInhodm1sXCIsXCJ4dm1sXCIsXCJ4dm1cIl0sXCJhcHBsaWNhdGlvbi95YW5nXCI6W1wieWFuZ1wiXSxcImFwcGxpY2F0aW9uL3lpbit4bWxcIjpbXCJ5aW5cIl0sXCJhcHBsaWNhdGlvbi96aXBcIjpbXCJ6aXBcIl0sXCJhdWRpby8zZ3BwXCI6W1wiKjNncHBcIl0sXCJhdWRpby9hZHBjbVwiOltcImFkcFwiXSxcImF1ZGlvL2FtclwiOltcImFtclwiXSxcImF1ZGlvL2Jhc2ljXCI6W1wiYXVcIixcInNuZFwiXSxcImF1ZGlvL21pZGlcIjpbXCJtaWRcIixcIm1pZGlcIixcImthclwiLFwicm1pXCJdLFwiYXVkaW8vbW9iaWxlLXhtZlwiOltcIm14bWZcIl0sXCJhdWRpby9tcDNcIjpbXCIqbXAzXCJdLFwiYXVkaW8vbXA0XCI6W1wibTRhXCIsXCJtcDRhXCJdLFwiYXVkaW8vbXBlZ1wiOltcIm1wZ2FcIixcIm1wMlwiLFwibXAyYVwiLFwibXAzXCIsXCJtMmFcIixcIm0zYVwiXSxcImF1ZGlvL29nZ1wiOltcIm9nYVwiLFwib2dnXCIsXCJzcHhcIixcIm9wdXNcIl0sXCJhdWRpby9zM21cIjpbXCJzM21cIl0sXCJhdWRpby9zaWxrXCI6W1wic2lsXCJdLFwiYXVkaW8vd2F2XCI6W1wid2F2XCJdLFwiYXVkaW8vd2F2ZVwiOltcIip3YXZcIl0sXCJhdWRpby93ZWJtXCI6W1wid2ViYVwiXSxcImF1ZGlvL3htXCI6W1wieG1cIl0sXCJmb250L2NvbGxlY3Rpb25cIjpbXCJ0dGNcIl0sXCJmb250L290ZlwiOltcIm90ZlwiXSxcImZvbnQvdHRmXCI6W1widHRmXCJdLFwiZm9udC93b2ZmXCI6W1wid29mZlwiXSxcImZvbnQvd29mZjJcIjpbXCJ3b2ZmMlwiXSxcImltYWdlL2FjZXNcIjpbXCJleHJcIl0sXCJpbWFnZS9hcG5nXCI6W1wiYXBuZ1wiXSxcImltYWdlL2F2aWZcIjpbXCJhdmlmXCJdLFwiaW1hZ2UvYm1wXCI6W1wiYm1wXCJdLFwiaW1hZ2UvY2dtXCI6W1wiY2dtXCJdLFwiaW1hZ2UvZGljb20tcmxlXCI6W1wiZHJsZVwiXSxcImltYWdlL2VtZlwiOltcImVtZlwiXSxcImltYWdlL2ZpdHNcIjpbXCJmaXRzXCJdLFwiaW1hZ2UvZzNmYXhcIjpbXCJnM1wiXSxcImltYWdlL2dpZlwiOltcImdpZlwiXSxcImltYWdlL2hlaWNcIjpbXCJoZWljXCJdLFwiaW1hZ2UvaGVpYy1zZXF1ZW5jZVwiOltcImhlaWNzXCJdLFwiaW1hZ2UvaGVpZlwiOltcImhlaWZcIl0sXCJpbWFnZS9oZWlmLXNlcXVlbmNlXCI6W1wiaGVpZnNcIl0sXCJpbWFnZS9oZWoya1wiOltcImhlajJcIl0sXCJpbWFnZS9oc2oyXCI6W1wiaHNqMlwiXSxcImltYWdlL2llZlwiOltcImllZlwiXSxcImltYWdlL2psc1wiOltcImpsc1wiXSxcImltYWdlL2pwMlwiOltcImpwMlwiLFwianBnMlwiXSxcImltYWdlL2pwZWdcIjpbXCJqcGVnXCIsXCJqcGdcIixcImpwZVwiXSxcImltYWdlL2pwaFwiOltcImpwaFwiXSxcImltYWdlL2pwaGNcIjpbXCJqaGNcIl0sXCJpbWFnZS9qcG1cIjpbXCJqcG1cIl0sXCJpbWFnZS9qcHhcIjpbXCJqcHhcIixcImpwZlwiXSxcImltYWdlL2p4clwiOltcImp4clwiXSxcImltYWdlL2p4cmFcIjpbXCJqeHJhXCJdLFwiaW1hZ2Uvanhyc1wiOltcImp4cnNcIl0sXCJpbWFnZS9qeHNcIjpbXCJqeHNcIl0sXCJpbWFnZS9qeHNjXCI6W1wianhzY1wiXSxcImltYWdlL2p4c2lcIjpbXCJqeHNpXCJdLFwiaW1hZ2Uvanhzc1wiOltcImp4c3NcIl0sXCJpbWFnZS9rdHhcIjpbXCJrdHhcIl0sXCJpbWFnZS9rdHgyXCI6W1wia3R4MlwiXSxcImltYWdlL3BuZ1wiOltcInBuZ1wiXSxcImltYWdlL3NnaVwiOltcInNnaVwiXSxcImltYWdlL3N2Zyt4bWxcIjpbXCJzdmdcIixcInN2Z3pcIl0sXCJpbWFnZS90MzhcIjpbXCJ0MzhcIl0sXCJpbWFnZS90aWZmXCI6W1widGlmXCIsXCJ0aWZmXCJdLFwiaW1hZ2UvdGlmZi1meFwiOltcInRmeFwiXSxcImltYWdlL3dlYnBcIjpbXCJ3ZWJwXCJdLFwiaW1hZ2Uvd21mXCI6W1wid21mXCJdLFwibWVzc2FnZS9kaXNwb3NpdGlvbi1ub3RpZmljYXRpb25cIjpbXCJkaXNwb3NpdGlvbi1ub3RpZmljYXRpb25cIl0sXCJtZXNzYWdlL2dsb2JhbFwiOltcInU4bXNnXCJdLFwibWVzc2FnZS9nbG9iYWwtZGVsaXZlcnktc3RhdHVzXCI6W1widThkc25cIl0sXCJtZXNzYWdlL2dsb2JhbC1kaXNwb3NpdGlvbi1ub3RpZmljYXRpb25cIjpbXCJ1OG1kblwiXSxcIm1lc3NhZ2UvZ2xvYmFsLWhlYWRlcnNcIjpbXCJ1OGhkclwiXSxcIm1lc3NhZ2UvcmZjODIyXCI6W1wiZW1sXCIsXCJtaW1lXCJdLFwibW9kZWwvM21mXCI6W1wiM21mXCJdLFwibW9kZWwvZ2x0Zitqc29uXCI6W1wiZ2x0ZlwiXSxcIm1vZGVsL2dsdGYtYmluYXJ5XCI6W1wiZ2xiXCJdLFwibW9kZWwvaWdlc1wiOltcImlnc1wiLFwiaWdlc1wiXSxcIm1vZGVsL21lc2hcIjpbXCJtc2hcIixcIm1lc2hcIixcInNpbG9cIl0sXCJtb2RlbC9tdGxcIjpbXCJtdGxcIl0sXCJtb2RlbC9vYmpcIjpbXCJvYmpcIl0sXCJtb2RlbC9zdGVwK3htbFwiOltcInN0cHhcIl0sXCJtb2RlbC9zdGVwK3ppcFwiOltcInN0cHpcIl0sXCJtb2RlbC9zdGVwLXhtbCt6aXBcIjpbXCJzdHB4elwiXSxcIm1vZGVsL3N0bFwiOltcInN0bFwiXSxcIm1vZGVsL3ZybWxcIjpbXCJ3cmxcIixcInZybWxcIl0sXCJtb2RlbC94M2QrYmluYXJ5XCI6W1wiKngzZGJcIixcIngzZGJ6XCJdLFwibW9kZWwveDNkK2Zhc3RpbmZvc2V0XCI6W1wieDNkYlwiXSxcIm1vZGVsL3gzZCt2cm1sXCI6W1wiKngzZHZcIixcIngzZHZ6XCJdLFwibW9kZWwveDNkK3htbFwiOltcIngzZFwiLFwieDNkelwiXSxcIm1vZGVsL3gzZC12cm1sXCI6W1wieDNkdlwiXSxcInRleHQvY2FjaGUtbWFuaWZlc3RcIjpbXCJhcHBjYWNoZVwiLFwibWFuaWZlc3RcIl0sXCJ0ZXh0L2NhbGVuZGFyXCI6W1wiaWNzXCIsXCJpZmJcIl0sXCJ0ZXh0L2NvZmZlZXNjcmlwdFwiOltcImNvZmZlZVwiLFwibGl0Y29mZmVlXCJdLFwidGV4dC9jc3NcIjpbXCJjc3NcIl0sXCJ0ZXh0L2NzdlwiOltcImNzdlwiXSxcInRleHQvaHRtbFwiOltcImh0bWxcIixcImh0bVwiLFwic2h0bWxcIl0sXCJ0ZXh0L2phZGVcIjpbXCJqYWRlXCJdLFwidGV4dC9qc3hcIjpbXCJqc3hcIl0sXCJ0ZXh0L2xlc3NcIjpbXCJsZXNzXCJdLFwidGV4dC9tYXJrZG93blwiOltcIm1hcmtkb3duXCIsXCJtZFwiXSxcInRleHQvbWF0aG1sXCI6W1wibW1sXCJdLFwidGV4dC9tZHhcIjpbXCJtZHhcIl0sXCJ0ZXh0L24zXCI6W1wibjNcIl0sXCJ0ZXh0L3BsYWluXCI6W1widHh0XCIsXCJ0ZXh0XCIsXCJjb25mXCIsXCJkZWZcIixcImxpc3RcIixcImxvZ1wiLFwiaW5cIixcImluaVwiXSxcInRleHQvcmljaHRleHRcIjpbXCJydHhcIl0sXCJ0ZXh0L3J0ZlwiOltcIipydGZcIl0sXCJ0ZXh0L3NnbWxcIjpbXCJzZ21sXCIsXCJzZ21cIl0sXCJ0ZXh0L3NoZXhcIjpbXCJzaGV4XCJdLFwidGV4dC9zbGltXCI6W1wic2xpbVwiLFwic2xtXCJdLFwidGV4dC9zcGR4XCI6W1wic3BkeFwiXSxcInRleHQvc3R5bHVzXCI6W1wic3R5bHVzXCIsXCJzdHlsXCJdLFwidGV4dC90YWItc2VwYXJhdGVkLXZhbHVlc1wiOltcInRzdlwiXSxcInRleHQvdHJvZmZcIjpbXCJ0XCIsXCJ0clwiLFwicm9mZlwiLFwibWFuXCIsXCJtZVwiLFwibXNcIl0sXCJ0ZXh0L3R1cnRsZVwiOltcInR0bFwiXSxcInRleHQvdXJpLWxpc3RcIjpbXCJ1cmlcIixcInVyaXNcIixcInVybHNcIl0sXCJ0ZXh0L3ZjYXJkXCI6W1widmNhcmRcIl0sXCJ0ZXh0L3Z0dFwiOltcInZ0dFwiXSxcInRleHQveG1sXCI6W1wiKnhtbFwiXSxcInRleHQveWFtbFwiOltcInlhbWxcIixcInltbFwiXSxcInZpZGVvLzNncHBcIjpbXCIzZ3BcIixcIjNncHBcIl0sXCJ2aWRlby8zZ3BwMlwiOltcIjNnMlwiXSxcInZpZGVvL2gyNjFcIjpbXCJoMjYxXCJdLFwidmlkZW8vaDI2M1wiOltcImgyNjNcIl0sXCJ2aWRlby9oMjY0XCI6W1wiaDI2NFwiXSxcInZpZGVvL2lzby5zZWdtZW50XCI6W1wibTRzXCJdLFwidmlkZW8vanBlZ1wiOltcImpwZ3ZcIl0sXCJ2aWRlby9qcG1cIjpbXCIqanBtXCIsXCJqcGdtXCJdLFwidmlkZW8vbWoyXCI6W1wibWoyXCIsXCJtanAyXCJdLFwidmlkZW8vbXAydFwiOltcInRzXCJdLFwidmlkZW8vbXA0XCI6W1wibXA0XCIsXCJtcDR2XCIsXCJtcGc0XCJdLFwidmlkZW8vbXBlZ1wiOltcIm1wZWdcIixcIm1wZ1wiLFwibXBlXCIsXCJtMXZcIixcIm0ydlwiXSxcInZpZGVvL29nZ1wiOltcIm9ndlwiXSxcInZpZGVvL3F1aWNrdGltZVwiOltcInF0XCIsXCJtb3ZcIl0sXCJ2aWRlby93ZWJtXCI6W1wid2VibVwiXX07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307IiwiOy8qISBzaG93ZG93biB2IDIuMS4wIC0gMjEtMDQtMjAyMiAqL1xyXG4oZnVuY3Rpb24oKXtcclxuLyoqXG4gKiBDcmVhdGVkIGJ5IFRpdmllIG9uIDEzLTA3LTIwMTUuXG4gKi9cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdE9wdHMgKHNpbXBsZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICAgIG9taXRFeHRyYVdMSW5Db2RlQmxvY2tzOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdPbWl0IHRoZSBkZWZhdWx0IGV4dHJhIHdoaXRlbGluZSBhZGRlZCB0byBjb2RlIGJsb2NrcycsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIG5vSGVhZGVySWQ6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ1R1cm4gb24vb2ZmIGdlbmVyYXRlZCBoZWFkZXIgaWQnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBwcmVmaXhIZWFkZXJJZDoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnQWRkIGEgcHJlZml4IHRvIHRoZSBnZW5lcmF0ZWQgaGVhZGVyIGlkcy4gUGFzc2luZyBhIHN0cmluZyB3aWxsIHByZWZpeCB0aGF0IHN0cmluZyB0byB0aGUgaGVhZGVyIGlkLiBTZXR0aW5nIHRvIHRydWUgd2lsbCBhZGQgYSBnZW5lcmljIFxcJ3NlY3Rpb24tXFwnIHByZWZpeCcsXG4gICAgICB0eXBlOiAnc3RyaW5nJ1xuICAgIH0sXG4gICAgcmF3UHJlZml4SGVhZGVySWQ6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ1NldHRpbmcgdGhpcyBvcHRpb24gdG8gdHJ1ZSB3aWxsIHByZXZlbnQgc2hvd2Rvd24gZnJvbSBtb2RpZnlpbmcgdGhlIHByZWZpeC4gVGhpcyBtaWdodCByZXN1bHQgaW4gbWFsZm9ybWVkIElEcyAoaWYsIGZvciBpbnN0YW5jZSwgdGhlIFwiIGNoYXIgaXMgdXNlZCBpbiB0aGUgcHJlZml4KScsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIGdoQ29tcGF0aWJsZUhlYWRlcklkOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdHZW5lcmF0ZSBoZWFkZXIgaWRzIGNvbXBhdGlibGUgd2l0aCBnaXRodWIgc3R5bGUgKHNwYWNlcyBhcmUgcmVwbGFjZWQgd2l0aCBkYXNoZXMsIGEgYnVuY2ggb2Ygbm9uIGFscGhhbnVtZXJpYyBjaGFycyBhcmUgcmVtb3ZlZCknLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICByYXdIZWFkZXJJZDoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnUmVtb3ZlIG9ubHkgc3BhY2VzLCBcXCcgYW5kIFwiIGZyb20gZ2VuZXJhdGVkIGhlYWRlciBpZHMgKGluY2x1ZGluZyBwcmVmaXhlcyksIHJlcGxhY2luZyB0aGVtIHdpdGggZGFzaGVzICgtKS4gV0FSTklORzogVGhpcyBtaWdodCByZXN1bHQgaW4gbWFsZm9ybWVkIGlkcycsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIGhlYWRlckxldmVsU3RhcnQ6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ1RoZSBoZWFkZXIgYmxvY2tzIGxldmVsIHN0YXJ0JyxcbiAgICAgIHR5cGU6ICdpbnRlZ2VyJ1xuICAgIH0sXG4gICAgcGFyc2VJbWdEaW1lbnNpb25zOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdUdXJuIG9uL29mZiBpbWFnZSBkaW1lbnNpb24gcGFyc2luZycsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIHNpbXBsaWZpZWRBdXRvTGluazoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnVHVybiBvbi9vZmYgR0ZNIGF1dG9saW5rIHN0eWxlJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgZXhjbHVkZVRyYWlsaW5nUHVuY3R1YXRpb25Gcm9tVVJMczoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnRXhjbHVkZXMgdHJhaWxpbmcgcHVuY3R1YXRpb24gZnJvbSBsaW5rcyBnZW5lcmF0ZWQgd2l0aCBhdXRvTGlua2luZycsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIGxpdGVyYWxNaWRXb3JkVW5kZXJzY29yZXM6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ1BhcnNlIG1pZHdvcmQgdW5kZXJzY29yZXMgYXMgbGl0ZXJhbCB1bmRlcnNjb3JlcycsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIGxpdGVyYWxNaWRXb3JkQXN0ZXJpc2tzOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdQYXJzZSBtaWR3b3JkIGFzdGVyaXNrcyBhcyBsaXRlcmFsIGFzdGVyaXNrcycsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIHN0cmlrZXRocm91Z2g6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ1R1cm4gb24vb2ZmIHN0cmlrZXRocm91Z2ggc3VwcG9ydCcsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIHRhYmxlczoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnVHVybiBvbi9vZmYgdGFibGVzIHN1cHBvcnQnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICB0YWJsZXNIZWFkZXJJZDoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnQWRkIGFuIGlkIHRvIHRhYmxlIGhlYWRlcnMnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBnaENvZGVCbG9ja3M6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogdHJ1ZSxcbiAgICAgIGRlc2NyaWJlOiAnVHVybiBvbi9vZmYgR0ZNIGZlbmNlZCBjb2RlIGJsb2NrcyBzdXBwb3J0JyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgdGFza2xpc3RzOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdUdXJuIG9uL29mZiBHRk0gdGFza2xpc3Qgc3VwcG9ydCcsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIHNtb290aExpdmVQcmV2aWV3OiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdQcmV2ZW50cyB3ZWlyZCBlZmZlY3RzIGluIGxpdmUgcHJldmlld3MgZHVlIHRvIGluY29tcGxldGUgaW5wdXQnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBzbWFydEluZGVudGF0aW9uRml4OiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdUcmllcyB0byBzbWFydGx5IGZpeCBpbmRlbnRhdGlvbiBpbiBlczYgc3RyaW5ncycsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIGRpc2FibGVGb3JjZWQ0U3BhY2VzSW5kZW50ZWRTdWJsaXN0czoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnRGlzYWJsZXMgdGhlIHJlcXVpcmVtZW50IG9mIGluZGVudGluZyBuZXN0ZWQgc3VibGlzdHMgYnkgNCBzcGFjZXMnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBzaW1wbGVMaW5lQnJlYWtzOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdQYXJzZXMgc2ltcGxlIGxpbmUgYnJlYWtzIGFzIDxicj4gKEdGTSBTdHlsZSknLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICByZXF1aXJlU3BhY2VCZWZvcmVIZWFkaW5nVGV4dDoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnTWFrZXMgYWRkaW5nIGEgc3BhY2UgYmV0d2VlbiBgI2AgYW5kIHRoZSBoZWFkZXIgdGV4dCBtYW5kYXRvcnkgKEdGTSBTdHlsZSknLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBnaE1lbnRpb25zOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdFbmFibGVzIGdpdGh1YiBAbWVudGlvbnMnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICBnaE1lbnRpb25zTGluazoge1xuICAgICAgZGVmYXVsdFZhbHVlOiAnaHR0cHM6Ly9naXRodWIuY29tL3t1fScsXG4gICAgICBkZXNjcmliZTogJ0NoYW5nZXMgdGhlIGxpbmsgZ2VuZXJhdGVkIGJ5IEBtZW50aW9ucy4gT25seSBhcHBsaWVzIGlmIGdoTWVudGlvbnMgb3B0aW9uIGlzIGVuYWJsZWQuJyxcbiAgICAgIHR5cGU6ICdzdHJpbmcnXG4gICAgfSxcbiAgICBlbmNvZGVFbWFpbHM6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogdHJ1ZSxcbiAgICAgIGRlc2NyaWJlOiAnRW5jb2RlIGUtbWFpbCBhZGRyZXNzZXMgdGhyb3VnaCB0aGUgdXNlIG9mIENoYXJhY3RlciBFbnRpdGllcywgdHJhbnNmb3JtaW5nIEFTQ0lJIGUtbWFpbCBhZGRyZXNzZXMgaW50byBpdHMgZXF1aXZhbGVudCBkZWNpbWFsIGVudGl0aWVzJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgb3BlbkxpbmtzSW5OZXdXaW5kb3c6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ09wZW4gYWxsIGxpbmtzIGluIG5ldyB3aW5kb3dzJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgYmFja3NsYXNoRXNjYXBlc0hUTUxUYWdzOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdTdXBwb3J0IGZvciBIVE1MIFRhZyBlc2NhcGluZy4gZXg6IFxcPGRpdj5mb29cXDwvZGl2PicsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIGVtb2ppOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdFbmFibGUgZW1vamkgc3VwcG9ydC4gRXg6IGB0aGlzIGlzIGEgOnNtaWxlOiBlbW9qaWAnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSxcbiAgICB1bmRlcmxpbmU6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICBkZXNjcmliZTogJ0VuYWJsZSBzdXBwb3J0IGZvciB1bmRlcmxpbmUuIFN5bnRheCBpcyBkb3VibGUgb3IgdHJpcGxlIHVuZGVyc2NvcmVzOiBgX191bmRlcmxpbmUgd29yZF9fYC4gV2l0aCB0aGlzIG9wdGlvbiBlbmFibGVkLCB1bmRlcnNjb3JlcyBubyBsb25nZXIgcGFyc2VzIGludG8gYDxlbT5gIGFuZCBgPHN0cm9uZz5gJyxcbiAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgIH0sXG4gICAgZWxsaXBzaXM6IHtcbiAgICAgIGRlZmF1bHRWYWx1ZTogdHJ1ZSxcbiAgICAgIGRlc2NyaWJlOiAnUmVwbGFjZXMgdGhyZWUgZG90cyB3aXRoIHRoZSBlbGxpcHNpcyB1bmljb2RlIGNoYXJhY3RlcicsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIGNvbXBsZXRlSFRNTERvY3VtZW50OiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdPdXRwdXRzIGEgY29tcGxldGUgaHRtbCBkb2N1bWVudCwgaW5jbHVkaW5nIGA8aHRtbD5gLCBgPGhlYWQ+YCBhbmQgYDxib2R5PmAgdGFncycsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIG1ldGFkYXRhOiB7XG4gICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgZGVzY3JpYmU6ICdFbmFibGUgc3VwcG9ydCBmb3IgZG9jdW1lbnQgbWV0YWRhdGEgKGRlZmluZWQgYXQgdGhlIHRvcCBvZiB0aGUgZG9jdW1lbnQgYmV0d2VlbiBgwqvCq8KrYCBhbmQgYMK7wrvCu2Agb3IgYmV0d2VlbiBgLS0tYCBhbmQgYC0tLWApLicsXG4gICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICB9LFxuICAgIHNwbGl0QWRqYWNlbnRCbG9ja3F1b3Rlczoge1xuICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgIGRlc2NyaWJlOiAnU3BsaXQgYWRqYWNlbnQgYmxvY2txdW90ZSBibG9ja3MnLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfVxuICB9O1xuICBpZiAoc2ltcGxlID09PSBmYWxzZSkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGRlZmF1bHRPcHRpb25zKSk7XG4gIH1cbiAgdmFyIHJldCA9IHt9O1xuICBmb3IgKHZhciBvcHQgaW4gZGVmYXVsdE9wdGlvbnMpIHtcbiAgICBpZiAoZGVmYXVsdE9wdGlvbnMuaGFzT3duUHJvcGVydHkob3B0KSkge1xuICAgICAgcmV0W29wdF0gPSBkZWZhdWx0T3B0aW9uc1tvcHRdLmRlZmF1bHRWYWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gYWxsT3B0aW9uc09uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgb3B0aW9ucyA9IGdldERlZmF1bHRPcHRzKHRydWUpLFxuICAgICAgcmV0ID0ge307XG4gIGZvciAodmFyIG9wdCBpbiBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkob3B0KSkge1xuICAgICAgcmV0W29wdF0gPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXHJcbi8qKlxuICogQ3JlYXRlZCBieSBUaXZpZSBvbiAwNi0wMS0yMDE1LlxuICovXG5cbi8vIFByaXZhdGUgcHJvcGVydGllc1xudmFyIHNob3dkb3duID0ge30sXG4gICAgcGFyc2VycyA9IHt9LFxuICAgIGV4dGVuc2lvbnMgPSB7fSxcbiAgICBnbG9iYWxPcHRpb25zID0gZ2V0RGVmYXVsdE9wdHModHJ1ZSksXG4gICAgc2V0Rmxhdm9yID0gJ3ZhbmlsbGEnLFxuICAgIGZsYXZvciA9IHtcbiAgICAgIGdpdGh1Yjoge1xuICAgICAgICBvbWl0RXh0cmFXTEluQ29kZUJsb2NrczogICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIHNpbXBsaWZpZWRBdXRvTGluazogICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgZXhjbHVkZVRyYWlsaW5nUHVuY3R1YXRpb25Gcm9tVVJMczogICB0cnVlLFxuICAgICAgICBsaXRlcmFsTWlkV29yZFVuZGVyc2NvcmVzOiAgICAgICAgICAgIHRydWUsXG4gICAgICAgIHN0cmlrZXRocm91Z2g6ICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgdGFibGVzOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICB0YWJsZXNIZWFkZXJJZDogICAgICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIGdoQ29kZUJsb2NrczogICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgdGFza2xpc3RzOiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICBkaXNhYmxlRm9yY2VkNFNwYWNlc0luZGVudGVkU3VibGlzdHM6IHRydWUsXG4gICAgICAgIHNpbXBsZUxpbmVCcmVha3M6ICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgcmVxdWlyZVNwYWNlQmVmb3JlSGVhZGluZ1RleHQ6ICAgICAgICB0cnVlLFxuICAgICAgICBnaENvbXBhdGlibGVIZWFkZXJJZDogICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIGdoTWVudGlvbnM6ICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgYmFja3NsYXNoRXNjYXBlc0hUTUxUYWdzOiAgICAgICAgICAgICB0cnVlLFxuICAgICAgICBlbW9qaTogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIHNwbGl0QWRqYWNlbnRCbG9ja3F1b3RlczogICAgICAgICAgICAgdHJ1ZVxuICAgICAgfSxcbiAgICAgIG9yaWdpbmFsOiB7XG4gICAgICAgIG5vSGVhZGVySWQ6ICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgZ2hDb2RlQmxvY2tzOiAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgfSxcbiAgICAgIGdob3N0OiB7XG4gICAgICAgIG9taXRFeHRyYVdMSW5Db2RlQmxvY2tzOiAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgcGFyc2VJbWdEaW1lbnNpb25zOiAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICBzaW1wbGlmaWVkQXV0b0xpbms6ICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIGV4Y2x1ZGVUcmFpbGluZ1B1bmN0dWF0aW9uRnJvbVVSTHM6ICAgdHJ1ZSxcbiAgICAgICAgbGl0ZXJhbE1pZFdvcmRVbmRlcnNjb3JlczogICAgICAgICAgICB0cnVlLFxuICAgICAgICBzdHJpa2V0aHJvdWdoOiAgICAgICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIHRhYmxlczogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgdGFibGVzSGVhZGVySWQ6ICAgICAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICBnaENvZGVCbG9ja3M6ICAgICAgICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIHRhc2tsaXN0czogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgc21vb3RoTGl2ZVByZXZpZXc6ICAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICBzaW1wbGVMaW5lQnJlYWtzOiAgICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIHJlcXVpcmVTcGFjZUJlZm9yZUhlYWRpbmdUZXh0OiAgICAgICAgdHJ1ZSxcbiAgICAgICAgZ2hNZW50aW9uczogICAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgZW5jb2RlRW1haWxzOiAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlXG4gICAgICB9LFxuICAgICAgdmFuaWxsYTogZ2V0RGVmYXVsdE9wdHModHJ1ZSksXG4gICAgICBhbGxPbjogYWxsT3B0aW9uc09uKClcbiAgICB9O1xuXG4vKipcbiAqIGhlbHBlciBuYW1lc3BhY2VcbiAqIEB0eXBlIHt7fX1cbiAqL1xuc2hvd2Rvd24uaGVscGVyID0ge307XG5cbi8qKlxuICogVE9ETyBMRUdBQ1kgU1VQUE9SVCBDT0RFXG4gKiBAdHlwZSB7e319XG4gKi9cbnNob3dkb3duLmV4dGVuc2lvbnMgPSB7fTtcblxuLyoqXG4gKiBTZXQgYSBnbG9iYWwgb3B0aW9uXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKiBAcGFyYW0geyp9IHZhbHVlXG4gKiBAcmV0dXJucyB7c2hvd2Rvd259XG4gKi9cbnNob3dkb3duLnNldE9wdGlvbiA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgZ2xvYmFsT3B0aW9uc1trZXldID0gdmFsdWU7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBHZXQgYSBnbG9iYWwgb3B0aW9uXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuc2hvd2Rvd24uZ2V0T3B0aW9uID0gZnVuY3Rpb24gKGtleSkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBnbG9iYWxPcHRpb25zW2tleV07XG59O1xuXG4vKipcbiAqIEdldCB0aGUgZ2xvYmFsIG9wdGlvbnNcbiAqIEBzdGF0aWNcbiAqIEByZXR1cm5zIHt7fX1cbiAqL1xuc2hvd2Rvd24uZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gZ2xvYmFsT3B0aW9ucztcbn07XG5cbi8qKlxuICogUmVzZXQgZ2xvYmFsIG9wdGlvbnMgdG8gdGhlIGRlZmF1bHQgdmFsdWVzXG4gKiBAc3RhdGljXG4gKi9cbnNob3dkb3duLnJlc2V0T3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBnbG9iYWxPcHRpb25zID0gZ2V0RGVmYXVsdE9wdHModHJ1ZSk7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgZmxhdm9yIHNob3dkb3duIHNob3VsZCB1c2UgYXMgZGVmYXVsdFxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqL1xuc2hvd2Rvd24uc2V0Rmxhdm9yID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAoIWZsYXZvci5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgIHRocm93IEVycm9yKG5hbWUgKyAnIGZsYXZvciB3YXMgbm90IGZvdW5kJyk7XG4gIH1cbiAgc2hvd2Rvd24ucmVzZXRPcHRpb25zKCk7XG4gIHZhciBwcmVzZXQgPSBmbGF2b3JbbmFtZV07XG4gIHNldEZsYXZvciA9IG5hbWU7XG4gIGZvciAodmFyIG9wdGlvbiBpbiBwcmVzZXQpIHtcbiAgICBpZiAocHJlc2V0Lmhhc093blByb3BlcnR5KG9wdGlvbikpIHtcbiAgICAgIGdsb2JhbE9wdGlvbnNbb3B0aW9uXSA9IHByZXNldFtvcHRpb25dO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBHZXQgdGhlIGN1cnJlbnRseSBzZXQgZmxhdm9yXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5zaG93ZG93bi5nZXRGbGF2b3IgPSBmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHNldEZsYXZvcjtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBvcHRpb25zIG9mIGEgc3BlY2lmaWVkIGZsYXZvci4gUmV0dXJucyB1bmRlZmluZWQgaWYgdGhlIGZsYXZvciB3YXMgbm90IGZvdW5kXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBmbGF2b3JcbiAqIEByZXR1cm5zIHt7fXx1bmRlZmluZWR9XG4gKi9cbnNob3dkb3duLmdldEZsYXZvck9wdGlvbnMgPSBmdW5jdGlvbiAobmFtZSkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmIChmbGF2b3IuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICByZXR1cm4gZmxhdm9yW25hbWVdO1xuICB9XG59O1xuXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCBvcHRpb25zXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtzaW1wbGU9dHJ1ZV1cbiAqIEByZXR1cm5zIHt7fX1cbiAqL1xuc2hvd2Rvd24uZ2V0RGVmYXVsdE9wdGlvbnMgPSBmdW5jdGlvbiAoc2ltcGxlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIGdldERlZmF1bHRPcHRzKHNpbXBsZSk7XG59O1xuXG4vKipcbiAqIEdldCBvciBzZXQgYSBzdWJQYXJzZXJcbiAqXG4gKiBzdWJQYXJzZXIobmFtZSkgICAgICAgLSBHZXQgYSByZWdpc3RlcmVkIHN1YlBhcnNlclxuICogc3ViUGFyc2VyKG5hbWUsIGZ1bmMpIC0gUmVnaXN0ZXIgYSBzdWJQYXJzZXJcbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbZnVuY11cbiAqIEByZXR1cm5zIHsqfVxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIgPSBmdW5jdGlvbiAobmFtZSwgZnVuYykge1xuICAndXNlIHN0cmljdCc7XG4gIGlmIChzaG93ZG93bi5oZWxwZXIuaXNTdHJpbmcobmFtZSkpIHtcbiAgICBpZiAodHlwZW9mIGZ1bmMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBwYXJzZXJzW25hbWVdID0gZnVuYztcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHBhcnNlcnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlcnNbbmFtZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBFcnJvcignU3ViUGFyc2VyIG5hbWVkICcgKyBuYW1lICsgJyBub3QgcmVnaXN0ZXJlZCEnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogR2V0cyBvciByZWdpc3RlcnMgYW4gZXh0ZW5zaW9uXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtvYmplY3R8b2JqZWN0W118ZnVuY3Rpb249fSBleHRcbiAqIEByZXR1cm5zIHsqfVxuICovXG5zaG93ZG93bi5leHRlbnNpb24gPSBmdW5jdGlvbiAobmFtZSwgZXh0KSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoIXNob3dkb3duLmhlbHBlci5pc1N0cmluZyhuYW1lKSkge1xuICAgIHRocm93IEVycm9yKCdFeHRlbnNpb24gXFwnbmFtZVxcJyBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gIH1cblxuICBuYW1lID0gc2hvd2Rvd24uaGVscGVyLnN0ZEV4dE5hbWUobmFtZSk7XG5cbiAgLy8gR2V0dGVyXG4gIGlmIChzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoZXh0KSkge1xuICAgIGlmICghZXh0ZW5zaW9ucy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0V4dGVuc2lvbiBuYW1lZCAnICsgbmFtZSArICcgaXMgbm90IHJlZ2lzdGVyZWQhJyk7XG4gICAgfVxuICAgIHJldHVybiBleHRlbnNpb25zW25hbWVdO1xuXG4gICAgLy8gU2V0dGVyXG4gIH0gZWxzZSB7XG4gICAgLy8gRXhwYW5kIGV4dGVuc2lvbiBpZiBpdCdzIHdyYXBwZWQgaW4gYSBmdW5jdGlvblxuICAgIGlmICh0eXBlb2YgZXh0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBleHQgPSBleHQoKTtcbiAgICB9XG5cbiAgICAvLyBFbnN1cmUgZXh0ZW5zaW9uIGlzIGFuIGFycmF5XG4gICAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNBcnJheShleHQpKSB7XG4gICAgICBleHQgPSBbZXh0XTtcbiAgICB9XG5cbiAgICB2YXIgdmFsaWRFeHRlbnNpb24gPSB2YWxpZGF0ZShleHQsIG5hbWUpO1xuXG4gICAgaWYgKHZhbGlkRXh0ZW5zaW9uLnZhbGlkKSB7XG4gICAgICBleHRlbnNpb25zW25hbWVdID0gZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBFcnJvcih2YWxpZEV4dGVuc2lvbi5lcnJvcik7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEdldHMgYWxsIGV4dGVuc2lvbnMgcmVnaXN0ZXJlZFxuICogQHJldHVybnMge3t9fVxuICovXG5zaG93ZG93bi5nZXRBbGxFeHRlbnNpb25zID0gZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiBleHRlbnNpb25zO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gZXh0ZW5zaW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICovXG5zaG93ZG93bi5yZW1vdmVFeHRlbnNpb24gPSBmdW5jdGlvbiAobmFtZSkge1xuICAndXNlIHN0cmljdCc7XG4gIGRlbGV0ZSBleHRlbnNpb25zW25hbWVdO1xufTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBleHRlbnNpb25zXG4gKi9cbnNob3dkb3duLnJlc2V0RXh0ZW5zaW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBleHRlbnNpb25zID0ge307XG59O1xuXG4vKipcbiAqIFZhbGlkYXRlIGV4dGVuc2lvblxuICogQHBhcmFtIHthcnJheX0gZXh0ZW5zaW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHJldHVybnMge3t2YWxpZDogYm9vbGVhbiwgZXJyb3I6IHN0cmluZ319XG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlIChleHRlbnNpb24sIG5hbWUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBlcnJNc2cgPSAobmFtZSkgPyAnRXJyb3IgaW4gJyArIG5hbWUgKyAnIGV4dGVuc2lvbi0+JyA6ICdFcnJvciBpbiB1bm5hbWVkIGV4dGVuc2lvbicsXG4gICAgICByZXQgPSB7XG4gICAgICAgIHZhbGlkOiB0cnVlLFxuICAgICAgICBlcnJvcjogJydcbiAgICAgIH07XG5cbiAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNBcnJheShleHRlbnNpb24pKSB7XG4gICAgZXh0ZW5zaW9uID0gW2V4dGVuc2lvbl07XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGV4dGVuc2lvbi5sZW5ndGg7ICsraSkge1xuICAgIHZhciBiYXNlTXNnID0gZXJyTXNnICsgJyBzdWItZXh0ZW5zaW9uICcgKyBpICsgJzogJyxcbiAgICAgICAgZXh0ID0gZXh0ZW5zaW9uW2ldO1xuICAgIGlmICh0eXBlb2YgZXh0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgcmV0LnZhbGlkID0gZmFsc2U7XG4gICAgICByZXQuZXJyb3IgPSBiYXNlTXNnICsgJ211c3QgYmUgYW4gb2JqZWN0LCBidXQgJyArIHR5cGVvZiBleHQgKyAnIGdpdmVuJztcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNTdHJpbmcoZXh0LnR5cGUpKSB7XG4gICAgICByZXQudmFsaWQgPSBmYWxzZTtcbiAgICAgIHJldC5lcnJvciA9IGJhc2VNc2cgKyAncHJvcGVydHkgXCJ0eXBlXCIgbXVzdCBiZSBhIHN0cmluZywgYnV0ICcgKyB0eXBlb2YgZXh0LnR5cGUgKyAnIGdpdmVuJztcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgdmFyIHR5cGUgPSBleHQudHlwZSA9IGV4dC50eXBlLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAvLyBub3JtYWxpemUgZXh0ZW5zaW9uIHR5cGVcbiAgICBpZiAodHlwZSA9PT0gJ2xhbmd1YWdlJykge1xuICAgICAgdHlwZSA9IGV4dC50eXBlID0gJ2xhbmcnO1xuICAgIH1cblxuICAgIGlmICh0eXBlID09PSAnaHRtbCcpIHtcbiAgICAgIHR5cGUgPSBleHQudHlwZSA9ICdvdXRwdXQnO1xuICAgIH1cblxuICAgIGlmICh0eXBlICE9PSAnbGFuZycgJiYgdHlwZSAhPT0gJ291dHB1dCcgJiYgdHlwZSAhPT0gJ2xpc3RlbmVyJykge1xuICAgICAgcmV0LnZhbGlkID0gZmFsc2U7XG4gICAgICByZXQuZXJyb3IgPSBiYXNlTXNnICsgJ3R5cGUgJyArIHR5cGUgKyAnIGlzIG5vdCByZWNvZ25pemVkLiBWYWxpZCB2YWx1ZXM6IFwibGFuZy9sYW5ndWFnZVwiLCBcIm91dHB1dC9odG1sXCIgb3IgXCJsaXN0ZW5lclwiJztcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgaWYgKHR5cGUgPT09ICdsaXN0ZW5lcicpIHtcbiAgICAgIGlmIChzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoZXh0Lmxpc3RlbmVycykpIHtcbiAgICAgICAgcmV0LnZhbGlkID0gZmFsc2U7XG4gICAgICAgIHJldC5lcnJvciA9IGJhc2VNc2cgKyAnLiBFeHRlbnNpb25zIG9mIHR5cGUgXCJsaXN0ZW5lclwiIG11c3QgaGF2ZSBhIHByb3BlcnR5IGNhbGxlZCBcImxpc3RlbmVyc1wiJztcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHNob3dkb3duLmhlbHBlci5pc1VuZGVmaW5lZChleHQuZmlsdGVyKSAmJiBzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoZXh0LnJlZ2V4KSkge1xuICAgICAgICByZXQudmFsaWQgPSBmYWxzZTtcbiAgICAgICAgcmV0LmVycm9yID0gYmFzZU1zZyArIHR5cGUgKyAnIGV4dGVuc2lvbnMgbXVzdCBkZWZpbmUgZWl0aGVyIGEgXCJyZWdleFwiIHByb3BlcnR5IG9yIGEgXCJmaWx0ZXJcIiBtZXRob2QnO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChleHQubGlzdGVuZXJzKSB7XG4gICAgICBpZiAodHlwZW9mIGV4dC5saXN0ZW5lcnMgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldC52YWxpZCA9IGZhbHNlO1xuICAgICAgICByZXQuZXJyb3IgPSBiYXNlTXNnICsgJ1wibGlzdGVuZXJzXCIgcHJvcGVydHkgbXVzdCBiZSBhbiBvYmplY3QgYnV0ICcgKyB0eXBlb2YgZXh0Lmxpc3RlbmVycyArICcgZ2l2ZW4nO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgbG4gaW4gZXh0Lmxpc3RlbmVycykge1xuICAgICAgICBpZiAoZXh0Lmxpc3RlbmVycy5oYXNPd25Qcm9wZXJ0eShsbikpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGV4dC5saXN0ZW5lcnNbbG5dICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXQudmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldC5lcnJvciA9IGJhc2VNc2cgKyAnXCJsaXN0ZW5lcnNcIiBwcm9wZXJ0eSBtdXN0IGJlIGFuIGhhc2ggb2YgW2V2ZW50IG5hbWVdOiBbY2FsbGJhY2tdLiBsaXN0ZW5lcnMuJyArIGxuICtcbiAgICAgICAgICAgICAgJyBtdXN0IGJlIGEgZnVuY3Rpb24gYnV0ICcgKyB0eXBlb2YgZXh0Lmxpc3RlbmVyc1tsbl0gKyAnIGdpdmVuJztcbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGV4dC5maWx0ZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgZXh0LmZpbHRlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXQudmFsaWQgPSBmYWxzZTtcbiAgICAgICAgcmV0LmVycm9yID0gYmFzZU1zZyArICdcImZpbHRlclwiIG11c3QgYmUgYSBmdW5jdGlvbiwgYnV0ICcgKyB0eXBlb2YgZXh0LmZpbHRlciArICcgZ2l2ZW4nO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZXh0LnJlZ2V4KSB7XG4gICAgICBpZiAoc2hvd2Rvd24uaGVscGVyLmlzU3RyaW5nKGV4dC5yZWdleCkpIHtcbiAgICAgICAgZXh0LnJlZ2V4ID0gbmV3IFJlZ0V4cChleHQucmVnZXgsICdnJyk7XG4gICAgICB9XG4gICAgICBpZiAoIShleHQucmVnZXggaW5zdGFuY2VvZiBSZWdFeHApKSB7XG4gICAgICAgIHJldC52YWxpZCA9IGZhbHNlO1xuICAgICAgICByZXQuZXJyb3IgPSBiYXNlTXNnICsgJ1wicmVnZXhcIiBwcm9wZXJ0eSBtdXN0IGVpdGhlciBiZSBhIHN0cmluZyBvciBhIFJlZ0V4cCBvYmplY3QsIGJ1dCAnICsgdHlwZW9mIGV4dC5yZWdleCArICcgZ2l2ZW4nO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgICAgaWYgKHNob3dkb3duLmhlbHBlci5pc1VuZGVmaW5lZChleHQucmVwbGFjZSkpIHtcbiAgICAgICAgcmV0LnZhbGlkID0gZmFsc2U7XG4gICAgICAgIHJldC5lcnJvciA9IGJhc2VNc2cgKyAnXCJyZWdleFwiIGV4dGVuc2lvbnMgbXVzdCBpbXBsZW1lbnQgYSByZXBsYWNlIHN0cmluZyBvciBmdW5jdGlvbic7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbi8qKlxuICogVmFsaWRhdGUgZXh0ZW5zaW9uXG4gKiBAcGFyYW0ge29iamVjdH0gZXh0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuc2hvd2Rvd24udmFsaWRhdGVFeHRlbnNpb24gPSBmdW5jdGlvbiAoZXh0KSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgdmFsaWRhdGVFeHRlbnNpb24gPSB2YWxpZGF0ZShleHQsIG51bGwpO1xuICBpZiAoIXZhbGlkYXRlRXh0ZW5zaW9uLnZhbGlkKSB7XG4gICAgY29uc29sZS53YXJuKHZhbGlkYXRlRXh0ZW5zaW9uLmVycm9yKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuXHJcbi8qKlxuICogc2hvd2Rvd25qcyBoZWxwZXIgZnVuY3Rpb25zXG4gKi9cblxuaWYgKCFzaG93ZG93bi5oYXNPd25Qcm9wZXJ0eSgnaGVscGVyJykpIHtcbiAgc2hvd2Rvd24uaGVscGVyID0ge307XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFyIGlzIHN0cmluZ1xuICogQHN0YXRpY1xuICogQHBhcmFtIHtzdHJpbmd9IGFcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5zaG93ZG93bi5oZWxwZXIuaXNTdHJpbmcgPSBmdW5jdGlvbiAoYSkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiAodHlwZW9mIGEgPT09ICdzdHJpbmcnIHx8IGEgaW5zdGFuY2VvZiBTdHJpbmcpO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiB2YXIgaXMgYSBmdW5jdGlvblxuICogQHN0YXRpY1xuICogQHBhcmFtIHsqfSBhXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuc2hvd2Rvd24uaGVscGVyLmlzRnVuY3Rpb24gPSBmdW5jdGlvbiAoYSkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBnZXRUeXBlID0ge307XG4gIHJldHVybiBhICYmIGdldFR5cGUudG9TdHJpbmcuY2FsbChhKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn07XG5cbi8qKlxuICogaXNBcnJheSBoZWxwZXIgZnVuY3Rpb25cbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSB7Kn0gYVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbnNob3dkb3duLmhlbHBlci5pc0FycmF5ID0gZnVuY3Rpb24gKGEpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShhKTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLCBlbHNlIGBmYWxzZWAuXG4gKi9cbnNob3dkb3duLmhlbHBlci5pc1VuZGVmaW5lZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAndXNlIHN0cmljdCc7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnO1xufTtcblxuLyoqXG4gKiBGb3JFYWNoIGhlbHBlciBmdW5jdGlvblxuICogSXRlcmF0ZXMgb3ZlciBBcnJheXMgYW5kIE9iamVjdHMgKG93biBwcm9wZXJ0aWVzIG9ubHkpXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0geyp9IG9ialxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgQWNjZXB0cyAzIHBhcmFtczogMS4gdmFsdWUsIDIuIGtleSwgMy4gdGhlIG9yaWdpbmFsIGFycmF5L29iamVjdFxuICovXG5zaG93ZG93bi5oZWxwZXIuZm9yRWFjaCA9IGZ1bmN0aW9uIChvYmosIGNhbGxiYWNrKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gY2hlY2sgaWYgb2JqIGlzIGRlZmluZWRcbiAgaWYgKHNob3dkb3duLmhlbHBlci5pc1VuZGVmaW5lZChvYmopKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdvYmogcGFyYW0gaXMgcmVxdWlyZWQnKTtcbiAgfVxuXG4gIGlmIChzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoY2FsbGJhY2spKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYWxsYmFjayBwYXJhbSBpcyByZXF1aXJlZCcpO1xuICB9XG5cbiAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NhbGxiYWNrIHBhcmFtIG11c3QgYmUgYSBmdW5jdGlvbi9jbG9zdXJlJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iai5mb3JFYWNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb2JqLmZvckVhY2goY2FsbGJhY2spO1xuICB9IGVsc2UgaWYgKHNob3dkb3duLmhlbHBlci5pc0FycmF5KG9iaikpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgY2FsbGJhY2sob2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgKG9iaikgPT09ICdvYmplY3QnKSB7XG4gICAgZm9yICh2YXIgcHJvcCBpbiBvYmopIHtcbiAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgY2FsbGJhY2sob2JqW3Byb3BdLCBwcm9wLCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ29iaiBkb2VzIG5vdCBzZWVtIHRvIGJlIGFuIGFycmF5IG9yIGFuIGl0ZXJhYmxlIG9iamVjdCcpO1xuICB9XG59O1xuXG4vKipcbiAqIFN0YW5kYXJkaWRpemUgZXh0ZW5zaW9uIG5hbWVcbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSB7c3RyaW5nfSBzIGV4dGVuc2lvbiBuYW1lXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5zaG93ZG93bi5oZWxwZXIuc3RkRXh0TmFtZSA9IGZ1bmN0aW9uIChzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgcmV0dXJuIHMucmVwbGFjZSgvW18/KitcXC9cXFxcLl4tXS9nLCAnJykucmVwbGFjZSgvXFxzL2csICcnKS50b0xvd2VyQ2FzZSgpO1xufTtcblxuZnVuY3Rpb24gZXNjYXBlQ2hhcmFjdGVyc0NhbGxiYWNrICh3aG9sZU1hdGNoLCBtMSkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBjaGFyQ29kZVRvRXNjYXBlID0gbTEuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuICfCqEUnICsgY2hhckNvZGVUb0VzY2FwZSArICdFJztcbn1cblxuLyoqXG4gKiBDYWxsYmFjayB1c2VkIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIHdoZW4gcGFzc2luZyB0aHJvdWdoIFN0cmluZy5yZXBsYWNlXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge3N0cmluZ30gd2hvbGVNYXRjaFxuICogQHBhcmFtIHtzdHJpbmd9IG0xXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5zaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVyc0NhbGxiYWNrID0gZXNjYXBlQ2hhcmFjdGVyc0NhbGxiYWNrO1xuXG4vKipcbiAqIEVzY2FwZSBjaGFyYWN0ZXJzIGluIGEgc3RyaW5nXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICogQHBhcmFtIHtzdHJpbmd9IGNoYXJzVG9Fc2NhcGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYWZ0ZXJCYWNrc2xhc2hcbiAqIEByZXR1cm5zIHtYTUx8c3RyaW5nfHZvaWR8Kn1cbiAqL1xuc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnMgPSBmdW5jdGlvbiAodGV4dCwgY2hhcnNUb0VzY2FwZSwgYWZ0ZXJCYWNrc2xhc2gpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAvLyBGaXJzdCB3ZSBoYXZlIHRvIGVzY2FwZSB0aGUgZXNjYXBlIGNoYXJhY3RlcnMgc28gdGhhdFxuICAvLyB3ZSBjYW4gYnVpbGQgYSBjaGFyYWN0ZXIgY2xhc3Mgb3V0IG9mIHRoZW1cbiAgdmFyIHJlZ2V4U3RyaW5nID0gJyhbJyArIGNoYXJzVG9Fc2NhcGUucmVwbGFjZSgvKFtcXFtcXF1cXFxcXSkvZywgJ1xcXFwkMScpICsgJ10pJztcblxuICBpZiAoYWZ0ZXJCYWNrc2xhc2gpIHtcbiAgICByZWdleFN0cmluZyA9ICdcXFxcXFxcXCcgKyByZWdleFN0cmluZztcbiAgfVxuXG4gIHZhciByZWdleCA9IG5ldyBSZWdFeHAocmVnZXhTdHJpbmcsICdnJyk7XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UocmVnZXgsIGVzY2FwZUNoYXJhY3RlcnNDYWxsYmFjayk7XG5cbiAgcmV0dXJuIHRleHQ7XG59O1xuXG4vKipcbiAqIFVuZXNjYXBlIEhUTUwgZW50aXRpZXNcbiAqIEBwYXJhbSB0eHRcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbnNob3dkb3duLmhlbHBlci51bmVzY2FwZUhUTUxFbnRpdGllcyA9IGZ1bmN0aW9uICh0eHQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHJldHVybiB0eHRcbiAgICAucmVwbGFjZSgvJnF1b3Q7L2csICdcIicpXG4gICAgLnJlcGxhY2UoLyZsdDsvZywgJzwnKVxuICAgIC5yZXBsYWNlKC8mZ3Q7L2csICc+JylcbiAgICAucmVwbGFjZSgvJmFtcDsvZywgJyYnKTtcbn07XG5cbnZhciByZ3hGaW5kTWF0Y2hQb3MgPSBmdW5jdGlvbiAoc3RyLCBsZWZ0LCByaWdodCwgZmxhZ3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgZiA9IGZsYWdzIHx8ICcnLFxuICAgICAgZyA9IGYuaW5kZXhPZignZycpID4gLTEsXG4gICAgICB4ID0gbmV3IFJlZ0V4cChsZWZ0ICsgJ3wnICsgcmlnaHQsICdnJyArIGYucmVwbGFjZSgvZy9nLCAnJykpLFxuICAgICAgbCA9IG5ldyBSZWdFeHAobGVmdCwgZi5yZXBsYWNlKC9nL2csICcnKSksXG4gICAgICBwb3MgPSBbXSxcbiAgICAgIHQsIHMsIG0sIHN0YXJ0LCBlbmQ7XG5cbiAgZG8ge1xuICAgIHQgPSAwO1xuICAgIHdoaWxlICgobSA9IHguZXhlYyhzdHIpKSkge1xuICAgICAgaWYgKGwudGVzdChtWzBdKSkge1xuICAgICAgICBpZiAoISh0KyspKSB7XG4gICAgICAgICAgcyA9IHgubGFzdEluZGV4O1xuICAgICAgICAgIHN0YXJ0ID0gcyAtIG1bMF0ubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHQpIHtcbiAgICAgICAgaWYgKCEtLXQpIHtcbiAgICAgICAgICBlbmQgPSBtLmluZGV4ICsgbVswXS5sZW5ndGg7XG4gICAgICAgICAgdmFyIG9iaiA9IHtcbiAgICAgICAgICAgIGxlZnQ6IHtzdGFydDogc3RhcnQsIGVuZDogc30sXG4gICAgICAgICAgICBtYXRjaDoge3N0YXJ0OiBzLCBlbmQ6IG0uaW5kZXh9LFxuICAgICAgICAgICAgcmlnaHQ6IHtzdGFydDogbS5pbmRleCwgZW5kOiBlbmR9LFxuICAgICAgICAgICAgd2hvbGVNYXRjaDoge3N0YXJ0OiBzdGFydCwgZW5kOiBlbmR9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBwb3MucHVzaChvYmopO1xuICAgICAgICAgIGlmICghZykge1xuICAgICAgICAgICAgcmV0dXJuIHBvcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gd2hpbGUgKHQgJiYgKHgubGFzdEluZGV4ID0gcykpO1xuXG4gIHJldHVybiBwb3M7XG59O1xuXG4vKipcbiAqIG1hdGNoUmVjdXJzaXZlUmVnRXhwXG4gKlxuICogKGMpIDIwMDcgU3RldmVuIExldml0aGFuIDxzdGV2ZW5sZXZpdGhhbi5jb20+XG4gKiBNSVQgTGljZW5zZVxuICpcbiAqIEFjY2VwdHMgYSBzdHJpbmcgdG8gc2VhcmNoLCBhIGxlZnQgYW5kIHJpZ2h0IGZvcm1hdCBkZWxpbWl0ZXJcbiAqIGFzIHJlZ2V4IHBhdHRlcm5zLCBhbmQgb3B0aW9uYWwgcmVnZXggZmxhZ3MuIFJldHVybnMgYW4gYXJyYXlcbiAqIG9mIG1hdGNoZXMsIGFsbG93aW5nIG5lc3RlZCBpbnN0YW5jZXMgb2YgbGVmdC9yaWdodCBkZWxpbWl0ZXJzLlxuICogVXNlIHRoZSBcImdcIiBmbGFnIHRvIHJldHVybiBhbGwgbWF0Y2hlcywgb3RoZXJ3aXNlIG9ubHkgdGhlXG4gKiBmaXJzdCBpcyByZXR1cm5lZC4gQmUgY2FyZWZ1bCB0byBlbnN1cmUgdGhhdCB0aGUgbGVmdCBhbmRcbiAqIHJpZ2h0IGZvcm1hdCBkZWxpbWl0ZXJzIHByb2R1Y2UgbXV0dWFsbHkgZXhjbHVzaXZlIG1hdGNoZXMuXG4gKiBCYWNrcmVmZXJlbmNlcyBhcmUgbm90IHN1cHBvcnRlZCB3aXRoaW4gdGhlIHJpZ2h0IGRlbGltaXRlclxuICogZHVlIHRvIGhvdyBpdCBpcyBpbnRlcm5hbGx5IGNvbWJpbmVkIHdpdGggdGhlIGxlZnQgZGVsaW1pdGVyLlxuICogV2hlbiBtYXRjaGluZyBzdHJpbmdzIHdob3NlIGZvcm1hdCBkZWxpbWl0ZXJzIGFyZSB1bmJhbGFuY2VkXG4gKiB0byB0aGUgbGVmdCBvciByaWdodCwgdGhlIG91dHB1dCBpcyBpbnRlbnRpb25hbGx5IGFzIGFcbiAqIGNvbnZlbnRpb25hbCByZWdleCBsaWJyYXJ5IHdpdGggcmVjdXJzaW9uIHN1cHBvcnQgd291bGRcbiAqIHByb2R1Y2UsIGUuZy4gXCI8PHg+XCIgYW5kIFwiPHg+PlwiIGJvdGggcHJvZHVjZSBbXCJ4XCJdIHdoZW4gdXNpbmdcbiAqIFwiPFwiIGFuZCBcIj5cIiBhcyB0aGUgZGVsaW1pdGVycyAoYm90aCBzdHJpbmdzIGNvbnRhaW4gYSBzaW5nbGUsXG4gKiBiYWxhbmNlZCBpbnN0YW5jZSBvZiBcIjx4PlwiKS5cbiAqXG4gKiBleGFtcGxlczpcbiAqIG1hdGNoUmVjdXJzaXZlUmVnRXhwKFwidGVzdFwiLCBcIlxcXFwoXCIsIFwiXFxcXClcIilcbiAqIHJldHVybnM6IFtdXG4gKiBtYXRjaFJlY3Vyc2l2ZVJlZ0V4cChcIjx0PDxlPj48cz4+dDw+XCIsIFwiPFwiLCBcIj5cIiwgXCJnXCIpXG4gKiByZXR1cm5zOiBbXCJ0PDxlPj48cz5cIiwgXCJcIl1cbiAqIG1hdGNoUmVjdXJzaXZlUmVnRXhwKFwiPGRpdiBpZD1cXFwieFxcXCI+dGVzdDwvZGl2PlwiLCBcIjxkaXZcXFxcYltePl0qPlwiLCBcIjwvZGl2PlwiLCBcImdpXCIpXG4gKiByZXR1cm5zOiBbXCJ0ZXN0XCJdXG4gKi9cbnNob3dkb3duLmhlbHBlci5tYXRjaFJlY3Vyc2l2ZVJlZ0V4cCA9IGZ1bmN0aW9uIChzdHIsIGxlZnQsIHJpZ2h0LCBmbGFncykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIG1hdGNoUG9zID0gcmd4RmluZE1hdGNoUG9zIChzdHIsIGxlZnQsIHJpZ2h0LCBmbGFncyksXG4gICAgICByZXN1bHRzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXRjaFBvcy5sZW5ndGg7ICsraSkge1xuICAgIHJlc3VsdHMucHVzaChbXG4gICAgICBzdHIuc2xpY2UobWF0Y2hQb3NbaV0ud2hvbGVNYXRjaC5zdGFydCwgbWF0Y2hQb3NbaV0ud2hvbGVNYXRjaC5lbmQpLFxuICAgICAgc3RyLnNsaWNlKG1hdGNoUG9zW2ldLm1hdGNoLnN0YXJ0LCBtYXRjaFBvc1tpXS5tYXRjaC5lbmQpLFxuICAgICAgc3RyLnNsaWNlKG1hdGNoUG9zW2ldLmxlZnQuc3RhcnQsIG1hdGNoUG9zW2ldLmxlZnQuZW5kKSxcbiAgICAgIHN0ci5zbGljZShtYXRjaFBvc1tpXS5yaWdodC5zdGFydCwgbWF0Y2hQb3NbaV0ucmlnaHQuZW5kKVxuICAgIF0pO1xuICB9XG4gIHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb259IHJlcGxhY2VtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gbGVmdFxuICogQHBhcmFtIHtzdHJpbmd9IHJpZ2h0XG4gKiBAcGFyYW0ge3N0cmluZ30gZmxhZ3NcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbnNob3dkb3duLmhlbHBlci5yZXBsYWNlUmVjdXJzaXZlUmVnRXhwID0gZnVuY3Rpb24gKHN0ciwgcmVwbGFjZW1lbnQsIGxlZnQsIHJpZ2h0LCBmbGFncykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNGdW5jdGlvbihyZXBsYWNlbWVudCkpIHtcbiAgICB2YXIgcmVwU3RyID0gcmVwbGFjZW1lbnQ7XG4gICAgcmVwbGFjZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVwU3RyO1xuICAgIH07XG4gIH1cblxuICB2YXIgbWF0Y2hQb3MgPSByZ3hGaW5kTWF0Y2hQb3Moc3RyLCBsZWZ0LCByaWdodCwgZmxhZ3MpLFxuICAgICAgZmluYWxTdHIgPSBzdHIsXG4gICAgICBsbmcgPSBtYXRjaFBvcy5sZW5ndGg7XG5cbiAgaWYgKGxuZyA+IDApIHtcbiAgICB2YXIgYml0cyA9IFtdO1xuICAgIGlmIChtYXRjaFBvc1swXS53aG9sZU1hdGNoLnN0YXJ0ICE9PSAwKSB7XG4gICAgICBiaXRzLnB1c2goc3RyLnNsaWNlKDAsIG1hdGNoUG9zWzBdLndob2xlTWF0Y2guc3RhcnQpKTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsbmc7ICsraSkge1xuICAgICAgYml0cy5wdXNoKFxuICAgICAgICByZXBsYWNlbWVudChcbiAgICAgICAgICBzdHIuc2xpY2UobWF0Y2hQb3NbaV0ud2hvbGVNYXRjaC5zdGFydCwgbWF0Y2hQb3NbaV0ud2hvbGVNYXRjaC5lbmQpLFxuICAgICAgICAgIHN0ci5zbGljZShtYXRjaFBvc1tpXS5tYXRjaC5zdGFydCwgbWF0Y2hQb3NbaV0ubWF0Y2guZW5kKSxcbiAgICAgICAgICBzdHIuc2xpY2UobWF0Y2hQb3NbaV0ubGVmdC5zdGFydCwgbWF0Y2hQb3NbaV0ubGVmdC5lbmQpLFxuICAgICAgICAgIHN0ci5zbGljZShtYXRjaFBvc1tpXS5yaWdodC5zdGFydCwgbWF0Y2hQb3NbaV0ucmlnaHQuZW5kKVxuICAgICAgICApXG4gICAgICApO1xuICAgICAgaWYgKGkgPCBsbmcgLSAxKSB7XG4gICAgICAgIGJpdHMucHVzaChzdHIuc2xpY2UobWF0Y2hQb3NbaV0ud2hvbGVNYXRjaC5lbmQsIG1hdGNoUG9zW2kgKyAxXS53aG9sZU1hdGNoLnN0YXJ0KSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChtYXRjaFBvc1tsbmcgLSAxXS53aG9sZU1hdGNoLmVuZCA8IHN0ci5sZW5ndGgpIHtcbiAgICAgIGJpdHMucHVzaChzdHIuc2xpY2UobWF0Y2hQb3NbbG5nIC0gMV0ud2hvbGVNYXRjaC5lbmQpKTtcbiAgICB9XG4gICAgZmluYWxTdHIgPSBiaXRzLmpvaW4oJycpO1xuICB9XG4gIHJldHVybiBmaW5hbFN0cjtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgaW5kZXggd2l0aGluIHRoZSBwYXNzZWQgU3RyaW5nIG9iamVjdCBvZiB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiB0aGUgc3BlY2lmaWVkIHJlZ2V4LFxuICogc3RhcnRpbmcgdGhlIHNlYXJjaCBhdCBmcm9tSW5kZXguIFJldHVybnMgLTEgaWYgdGhlIHZhbHVlIGlzIG5vdCBmb3VuZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIHN0cmluZyB0byBzZWFyY2hcbiAqIEBwYXJhbSB7UmVnRXhwfSByZWdleCBSZWd1bGFyIGV4cHJlc3Npb24gdG8gc2VhcmNoXG4gKiBAcGFyYW0ge2ludH0gW2Zyb21JbmRleCA9IDBdIEluZGV4IHRvIHN0YXJ0IHRoZSBzZWFyY2hcbiAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gKiBAdGhyb3dzIEludmFsaWRBcmd1bWVudEVycm9yXG4gKi9cbnNob3dkb3duLmhlbHBlci5yZWdleEluZGV4T2YgPSBmdW5jdGlvbiAoc3RyLCByZWdleCwgZnJvbUluZGV4KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNTdHJpbmcoc3RyKSkge1xuICAgIHRocm93ICdJbnZhbGlkQXJndW1lbnRFcnJvcjogZmlyc3QgcGFyYW1ldGVyIG9mIHNob3dkb3duLmhlbHBlci5yZWdleEluZGV4T2YgZnVuY3Rpb24gbXVzdCBiZSBhIHN0cmluZyc7XG4gIH1cbiAgaWYgKHJlZ2V4IGluc3RhbmNlb2YgUmVnRXhwID09PSBmYWxzZSkge1xuICAgIHRocm93ICdJbnZhbGlkQXJndW1lbnRFcnJvcjogc2Vjb25kIHBhcmFtZXRlciBvZiBzaG93ZG93bi5oZWxwZXIucmVnZXhJbmRleE9mIGZ1bmN0aW9uIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgUmVnRXhwJztcbiAgfVxuICB2YXIgaW5kZXhPZiA9IHN0ci5zdWJzdHJpbmcoZnJvbUluZGV4IHx8IDApLnNlYXJjaChyZWdleCk7XG4gIHJldHVybiAoaW5kZXhPZiA+PSAwKSA/IChpbmRleE9mICsgKGZyb21JbmRleCB8fCAwKSkgOiBpbmRleE9mO1xufTtcblxuLyoqXG4gKiBTcGxpdHMgdGhlIHBhc3NlZCBzdHJpbmcgb2JqZWN0IGF0IHRoZSBkZWZpbmVkIGluZGV4LCBhbmQgcmV0dXJucyBhbiBhcnJheSBjb21wb3NlZCBvZiB0aGUgdHdvIHN1YnN0cmluZ3NcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgc3RyaW5nIHRvIHNwbGl0XG4gKiBAcGFyYW0ge2ludH0gaW5kZXggaW5kZXggdG8gc3BsaXQgc3RyaW5nIGF0XG4gKiBAcmV0dXJucyB7W3N0cmluZyxzdHJpbmddfVxuICogQHRocm93cyBJbnZhbGlkQXJndW1lbnRFcnJvclxuICovXG5zaG93ZG93bi5oZWxwZXIuc3BsaXRBdEluZGV4ID0gZnVuY3Rpb24gKHN0ciwgaW5kZXgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAoIXNob3dkb3duLmhlbHBlci5pc1N0cmluZyhzdHIpKSB7XG4gICAgdGhyb3cgJ0ludmFsaWRBcmd1bWVudEVycm9yOiBmaXJzdCBwYXJhbWV0ZXIgb2Ygc2hvd2Rvd24uaGVscGVyLnJlZ2V4SW5kZXhPZiBmdW5jdGlvbiBtdXN0IGJlIGEgc3RyaW5nJztcbiAgfVxuICByZXR1cm4gW3N0ci5zdWJzdHJpbmcoMCwgaW5kZXgpLCBzdHIuc3Vic3RyaW5nKGluZGV4KV07XG59O1xuXG4vKipcbiAqIE9iZnVzY2F0ZSBhbiBlLW1haWwgYWRkcmVzcyB0aHJvdWdoIHRoZSB1c2Ugb2YgQ2hhcmFjdGVyIEVudGl0aWVzLFxuICogdHJhbnNmb3JtaW5nIEFTQ0lJIGNoYXJhY3RlcnMgaW50byB0aGVpciBlcXVpdmFsZW50IGRlY2ltYWwgb3IgaGV4IGVudGl0aWVzLlxuICpcbiAqIFNpbmNlIGl0IGhhcyBhIHJhbmRvbSBjb21wb25lbnQsIHN1YnNlcXVlbnQgY2FsbHMgdG8gdGhpcyBmdW5jdGlvbiBwcm9kdWNlIGRpZmZlcmVudCByZXN1bHRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1haWxcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbnNob3dkb3duLmhlbHBlci5lbmNvZGVFbWFpbEFkZHJlc3MgPSBmdW5jdGlvbiAobWFpbCkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBlbmNvZGUgPSBbXG4gICAgZnVuY3Rpb24gKGNoKSB7XG4gICAgICByZXR1cm4gJyYjJyArIGNoLmNoYXJDb2RlQXQoMCkgKyAnOyc7XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoY2gpIHtcbiAgICAgIHJldHVybiAnJiN4JyArIGNoLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpICsgJzsnO1xuICAgIH0sXG4gICAgZnVuY3Rpb24gKGNoKSB7XG4gICAgICByZXR1cm4gY2g7XG4gICAgfVxuICBdO1xuXG4gIG1haWwgPSBtYWlsLnJlcGxhY2UoLy4vZywgZnVuY3Rpb24gKGNoKSB7XG4gICAgaWYgKGNoID09PSAnQCcpIHtcbiAgICAgIC8vIHRoaXMgKm11c3QqIGJlIGVuY29kZWQuIEkgaW5zaXN0LlxuICAgICAgY2ggPSBlbmNvZGVbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMildKGNoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHIgPSBNYXRoLnJhbmRvbSgpO1xuICAgICAgLy8gcm91Z2hseSAxMCUgcmF3LCA0NSUgaGV4LCA0NSUgZGVjXG4gICAgICBjaCA9IChcbiAgICAgICAgciA+IDAuOSA/IGVuY29kZVsyXShjaCkgOiByID4gMC40NSA/IGVuY29kZVsxXShjaCkgOiBlbmNvZGVbMF0oY2gpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gY2g7XG4gIH0pO1xuXG4gIHJldHVybiBtYWlsO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHN0clxuICogQHBhcmFtIHRhcmdldExlbmd0aFxuICogQHBhcmFtIHBhZFN0cmluZ1xuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuc2hvd2Rvd24uaGVscGVyLnBhZEVuZCA9IGZ1bmN0aW9uIHBhZEVuZCAoc3RyLCB0YXJnZXRMZW5ndGgsIHBhZFN0cmluZykge1xuICAndXNlIHN0cmljdCc7XG4gIC8qanNoaW50IGJpdHdpc2U6IGZhbHNlKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHNwYWNlLWluZml4LW9wc1xuICB0YXJnZXRMZW5ndGggPSB0YXJnZXRMZW5ndGg+PjA7IC8vZmxvb3IgaWYgbnVtYmVyIG9yIGNvbnZlcnQgbm9uLW51bWJlciB0byAwO1xuICAvKmpzaGludCBiaXR3aXNlOiB0cnVlKi9cbiAgcGFkU3RyaW5nID0gU3RyaW5nKHBhZFN0cmluZyB8fCAnICcpO1xuICBpZiAoc3RyLmxlbmd0aCA+IHRhcmdldExlbmd0aCkge1xuICAgIHJldHVybiBTdHJpbmcoc3RyKTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXRMZW5ndGggPSB0YXJnZXRMZW5ndGggLSBzdHIubGVuZ3RoO1xuICAgIGlmICh0YXJnZXRMZW5ndGggPiBwYWRTdHJpbmcubGVuZ3RoKSB7XG4gICAgICBwYWRTdHJpbmcgKz0gcGFkU3RyaW5nLnJlcGVhdCh0YXJnZXRMZW5ndGggLyBwYWRTdHJpbmcubGVuZ3RoKTsgLy9hcHBlbmQgdG8gb3JpZ2luYWwgdG8gZW5zdXJlIHdlIGFyZSBsb25nZXIgdGhhbiBuZWVkZWRcbiAgICB9XG4gICAgcmV0dXJuIFN0cmluZyhzdHIpICsgcGFkU3RyaW5nLnNsaWNlKDAsdGFyZ2V0TGVuZ3RoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBQT0xZRklMTFNcbiAqL1xuLy8gdXNlIHRoaXMgaW5zdGVhZCBvZiBidWlsdGluIGlzIHVuZGVmaW5lZCBmb3IgSUU4IGNvbXBhdGliaWxpdHlcbmlmICh0eXBlb2YgKGNvbnNvbGUpID09PSAndW5kZWZpbmVkJykge1xuICBjb25zb2xlID0ge1xuICAgIHdhcm46IGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIGFsZXJ0KG1zZyk7XG4gICAgfSxcbiAgICBsb2c6IGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIGFsZXJ0KG1zZyk7XG4gICAgfSxcbiAgICBlcnJvcjogZnVuY3Rpb24gKG1zZykge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgdGhyb3cgbXNnO1xuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBDb21tb24gcmVnZXhlcy5cbiAqIFdlIGRlY2xhcmUgc29tZSBjb21tb24gcmVnZXhlcyB0byBpbXByb3ZlIHBlcmZvcm1hbmNlXG4gKi9cbnNob3dkb3duLmhlbHBlci5yZWdleGVzID0ge1xuICBhc3Rlcmlza0Rhc2hBbmRDb2xvbjogLyhbKl86fl0pL2dcbn07XG5cbi8qKlxuICogRU1PSklTIExJU1RcbiAqL1xuc2hvd2Rvd24uaGVscGVyLmVtb2ppcyA9IHtcbiAgJysxJzonXFx1ZDgzZFxcdWRjNGQnLFxuICAnLTEnOidcXHVkODNkXFx1ZGM0ZScsXG4gICcxMDAnOidcXHVkODNkXFx1ZGNhZicsXG4gICcxMjM0JzonXFx1ZDgzZFxcdWRkMjInLFxuICAnMXN0X3BsYWNlX21lZGFsJzonXFx1ZDgzZVxcdWRkNDcnLFxuICAnMm5kX3BsYWNlX21lZGFsJzonXFx1ZDgzZVxcdWRkNDgnLFxuICAnM3JkX3BsYWNlX21lZGFsJzonXFx1ZDgzZVxcdWRkNDknLFxuICAnOGJhbGwnOidcXHVkODNjXFx1ZGZiMScsXG4gICdhJzonXFx1ZDgzY1xcdWRkNzBcXHVmZTBmJyxcbiAgJ2FiJzonXFx1ZDgzY1xcdWRkOGUnLFxuICAnYWJjJzonXFx1ZDgzZFxcdWRkMjQnLFxuICAnYWJjZCc6J1xcdWQ4M2RcXHVkZDIxJyxcbiAgJ2FjY2VwdCc6J1xcdWQ4M2NcXHVkZTUxJyxcbiAgJ2FlcmlhbF90cmFtd2F5JzonXFx1ZDgzZFxcdWRlYTEnLFxuICAnYWlycGxhbmUnOidcXHUyNzA4XFx1ZmUwZicsXG4gICdhbGFybV9jbG9jayc6J1xcdTIzZjAnLFxuICAnYWxlbWJpYyc6J1xcdTI2OTdcXHVmZTBmJyxcbiAgJ2FsaWVuJzonXFx1ZDgzZFxcdWRjN2QnLFxuICAnYW1idWxhbmNlJzonXFx1ZDgzZFxcdWRlOTEnLFxuICAnYW1waG9yYSc6J1xcdWQ4M2NcXHVkZmZhJyxcbiAgJ2FuY2hvcic6J1xcdTI2OTNcXHVmZTBmJyxcbiAgJ2FuZ2VsJzonXFx1ZDgzZFxcdWRjN2MnLFxuICAnYW5nZXInOidcXHVkODNkXFx1ZGNhMicsXG4gICdhbmdyeSc6J1xcdWQ4M2RcXHVkZTIwJyxcbiAgJ2FuZ3Vpc2hlZCc6J1xcdWQ4M2RcXHVkZTI3JyxcbiAgJ2FudCc6J1xcdWQ4M2RcXHVkYzFjJyxcbiAgJ2FwcGxlJzonXFx1ZDgzY1xcdWRmNGUnLFxuICAnYXF1YXJpdXMnOidcXHUyNjUyXFx1ZmUwZicsXG4gICdhcmllcyc6J1xcdTI2NDhcXHVmZTBmJyxcbiAgJ2Fycm93X2JhY2t3YXJkJzonXFx1MjVjMFxcdWZlMGYnLFxuICAnYXJyb3dfZG91YmxlX2Rvd24nOidcXHUyM2VjJyxcbiAgJ2Fycm93X2RvdWJsZV91cCc6J1xcdTIzZWInLFxuICAnYXJyb3dfZG93bic6J1xcdTJiMDdcXHVmZTBmJyxcbiAgJ2Fycm93X2Rvd25fc21hbGwnOidcXHVkODNkXFx1ZGQzZCcsXG4gICdhcnJvd19mb3J3YXJkJzonXFx1MjViNlxcdWZlMGYnLFxuICAnYXJyb3dfaGVhZGluZ19kb3duJzonXFx1MjkzNVxcdWZlMGYnLFxuICAnYXJyb3dfaGVhZGluZ191cCc6J1xcdTI5MzRcXHVmZTBmJyxcbiAgJ2Fycm93X2xlZnQnOidcXHUyYjA1XFx1ZmUwZicsXG4gICdhcnJvd19sb3dlcl9sZWZ0JzonXFx1MjE5OVxcdWZlMGYnLFxuICAnYXJyb3dfbG93ZXJfcmlnaHQnOidcXHUyMTk4XFx1ZmUwZicsXG4gICdhcnJvd19yaWdodCc6J1xcdTI3YTFcXHVmZTBmJyxcbiAgJ2Fycm93X3JpZ2h0X2hvb2snOidcXHUyMWFhXFx1ZmUwZicsXG4gICdhcnJvd191cCc6J1xcdTJiMDZcXHVmZTBmJyxcbiAgJ2Fycm93X3VwX2Rvd24nOidcXHUyMTk1XFx1ZmUwZicsXG4gICdhcnJvd191cF9zbWFsbCc6J1xcdWQ4M2RcXHVkZDNjJyxcbiAgJ2Fycm93X3VwcGVyX2xlZnQnOidcXHUyMTk2XFx1ZmUwZicsXG4gICdhcnJvd191cHBlcl9yaWdodCc6J1xcdTIxOTdcXHVmZTBmJyxcbiAgJ2Fycm93c19jbG9ja3dpc2UnOidcXHVkODNkXFx1ZGQwMycsXG4gICdhcnJvd3NfY291bnRlcmNsb2Nrd2lzZSc6J1xcdWQ4M2RcXHVkZDA0JyxcbiAgJ2FydCc6J1xcdWQ4M2NcXHVkZmE4JyxcbiAgJ2FydGljdWxhdGVkX2xvcnJ5JzonXFx1ZDgzZFxcdWRlOWInLFxuICAnYXJ0aWZpY2lhbF9zYXRlbGxpdGUnOidcXHVkODNkXFx1ZGVmMCcsXG4gICdhc3RvbmlzaGVkJzonXFx1ZDgzZFxcdWRlMzInLFxuICAnYXRobGV0aWNfc2hvZSc6J1xcdWQ4M2RcXHVkYzVmJyxcbiAgJ2F0bSc6J1xcdWQ4M2NcXHVkZmU3JyxcbiAgJ2F0b21fc3ltYm9sJzonXFx1MjY5YlxcdWZlMGYnLFxuICAnYXZvY2Fkbyc6J1xcdWQ4M2VcXHVkZDUxJyxcbiAgJ2InOidcXHVkODNjXFx1ZGQ3MVxcdWZlMGYnLFxuICAnYmFieSc6J1xcdWQ4M2RcXHVkYzc2JyxcbiAgJ2JhYnlfYm90dGxlJzonXFx1ZDgzY1xcdWRmN2MnLFxuICAnYmFieV9jaGljayc6J1xcdWQ4M2RcXHVkYzI0JyxcbiAgJ2JhYnlfc3ltYm9sJzonXFx1ZDgzZFxcdWRlYmMnLFxuICAnYmFjayc6J1xcdWQ4M2RcXHVkZDE5JyxcbiAgJ2JhY29uJzonXFx1ZDgzZVxcdWRkNTMnLFxuICAnYmFkbWludG9uJzonXFx1ZDgzY1xcdWRmZjgnLFxuICAnYmFnZ2FnZV9jbGFpbSc6J1xcdWQ4M2RcXHVkZWM0JyxcbiAgJ2JhZ3VldHRlX2JyZWFkJzonXFx1ZDgzZVxcdWRkNTYnLFxuICAnYmFsYW5jZV9zY2FsZSc6J1xcdTI2OTZcXHVmZTBmJyxcbiAgJ2JhbGxvb24nOidcXHVkODNjXFx1ZGY4OCcsXG4gICdiYWxsb3RfYm94JzonXFx1ZDgzZFxcdWRkZjMnLFxuICAnYmFsbG90X2JveF93aXRoX2NoZWNrJzonXFx1MjYxMVxcdWZlMGYnLFxuICAnYmFtYm9vJzonXFx1ZDgzY1xcdWRmOGQnLFxuICAnYmFuYW5hJzonXFx1ZDgzY1xcdWRmNGMnLFxuICAnYmFuZ2JhbmcnOidcXHUyMDNjXFx1ZmUwZicsXG4gICdiYW5rJzonXFx1ZDgzY1xcdWRmZTYnLFxuICAnYmFyX2NoYXJ0JzonXFx1ZDgzZFxcdWRjY2EnLFxuICAnYmFyYmVyJzonXFx1ZDgzZFxcdWRjODgnLFxuICAnYmFzZWJhbGwnOidcXHUyNmJlXFx1ZmUwZicsXG4gICdiYXNrZXRiYWxsJzonXFx1ZDgzY1xcdWRmYzAnLFxuICAnYmFza2V0YmFsbF9tYW4nOidcXHUyNmY5XFx1ZmUwZicsXG4gICdiYXNrZXRiYWxsX3dvbWFuJzonXFx1MjZmOVxcdWZlMGYmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ2JhdCc6J1xcdWQ4M2VcXHVkZDg3JyxcbiAgJ2JhdGgnOidcXHVkODNkXFx1ZGVjMCcsXG4gICdiYXRodHViJzonXFx1ZDgzZFxcdWRlYzEnLFxuICAnYmF0dGVyeSc6J1xcdWQ4M2RcXHVkZDBiJyxcbiAgJ2JlYWNoX3VtYnJlbGxhJzonXFx1ZDgzY1xcdWRmZDYnLFxuICAnYmVhcic6J1xcdWQ4M2RcXHVkYzNiJyxcbiAgJ2JlZCc6J1xcdWQ4M2RcXHVkZWNmJyxcbiAgJ2JlZSc6J1xcdWQ4M2RcXHVkYzFkJyxcbiAgJ2JlZXInOidcXHVkODNjXFx1ZGY3YScsXG4gICdiZWVycyc6J1xcdWQ4M2NcXHVkZjdiJyxcbiAgJ2JlZXRsZSc6J1xcdWQ4M2RcXHVkYzFlJyxcbiAgJ2JlZ2lubmVyJzonXFx1ZDgzZFxcdWRkMzAnLFxuICAnYmVsbCc6J1xcdWQ4M2RcXHVkZDE0JyxcbiAgJ2JlbGxob3BfYmVsbCc6J1xcdWQ4M2RcXHVkZWNlJyxcbiAgJ2JlbnRvJzonXFx1ZDgzY1xcdWRmNzEnLFxuICAnYmlraW5nX21hbic6J1xcdWQ4M2RcXHVkZWI0JyxcbiAgJ2Jpa2UnOidcXHVkODNkXFx1ZGViMicsXG4gICdiaWtpbmdfd29tYW4nOidcXHVkODNkXFx1ZGViNCZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnYmlraW5pJzonXFx1ZDgzZFxcdWRjNTknLFxuICAnYmlvaGF6YXJkJzonXFx1MjYyM1xcdWZlMGYnLFxuICAnYmlyZCc6J1xcdWQ4M2RcXHVkYzI2JyxcbiAgJ2JpcnRoZGF5JzonXFx1ZDgzY1xcdWRmODInLFxuICAnYmxhY2tfY2lyY2xlJzonXFx1MjZhYlxcdWZlMGYnLFxuICAnYmxhY2tfZmxhZyc6J1xcdWQ4M2NcXHVkZmY0JyxcbiAgJ2JsYWNrX2hlYXJ0JzonXFx1ZDgzZFxcdWRkYTQnLFxuICAnYmxhY2tfam9rZXInOidcXHVkODNjXFx1ZGNjZicsXG4gICdibGFja19sYXJnZV9zcXVhcmUnOidcXHUyYjFiXFx1ZmUwZicsXG4gICdibGFja19tZWRpdW1fc21hbGxfc3F1YXJlJzonXFx1MjVmZVxcdWZlMGYnLFxuICAnYmxhY2tfbWVkaXVtX3NxdWFyZSc6J1xcdTI1ZmNcXHVmZTBmJyxcbiAgJ2JsYWNrX25pYic6J1xcdTI3MTJcXHVmZTBmJyxcbiAgJ2JsYWNrX3NtYWxsX3NxdWFyZSc6J1xcdTI1YWFcXHVmZTBmJyxcbiAgJ2JsYWNrX3NxdWFyZV9idXR0b24nOidcXHVkODNkXFx1ZGQzMicsXG4gICdibG9uZGVfbWFuJzonXFx1ZDgzZFxcdWRjNzEnLFxuICAnYmxvbmRlX3dvbWFuJzonXFx1ZDgzZFxcdWRjNzEmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ2Jsb3Nzb20nOidcXHVkODNjXFx1ZGYzYycsXG4gICdibG93ZmlzaCc6J1xcdWQ4M2RcXHVkYzIxJyxcbiAgJ2JsdWVfYm9vayc6J1xcdWQ4M2RcXHVkY2Q4JyxcbiAgJ2JsdWVfY2FyJzonXFx1ZDgzZFxcdWRlOTknLFxuICAnYmx1ZV9oZWFydCc6J1xcdWQ4M2RcXHVkYzk5JyxcbiAgJ2JsdXNoJzonXFx1ZDgzZFxcdWRlMGEnLFxuICAnYm9hcic6J1xcdWQ4M2RcXHVkYzE3JyxcbiAgJ2JvYXQnOidcXHUyNmY1XFx1ZmUwZicsXG4gICdib21iJzonXFx1ZDgzZFxcdWRjYTMnLFxuICAnYm9vayc6J1xcdWQ4M2RcXHVkY2Q2JyxcbiAgJ2Jvb2ttYXJrJzonXFx1ZDgzZFxcdWRkMTYnLFxuICAnYm9va21hcmtfdGFicyc6J1xcdWQ4M2RcXHVkY2QxJyxcbiAgJ2Jvb2tzJzonXFx1ZDgzZFxcdWRjZGEnLFxuICAnYm9vbSc6J1xcdWQ4M2RcXHVkY2E1JyxcbiAgJ2Jvb3QnOidcXHVkODNkXFx1ZGM2MicsXG4gICdib3VxdWV0JzonXFx1ZDgzZFxcdWRjOTAnLFxuICAnYm93aW5nX21hbic6J1xcdWQ4M2RcXHVkZTQ3JyxcbiAgJ2Jvd19hbmRfYXJyb3cnOidcXHVkODNjXFx1ZGZmOScsXG4gICdib3dpbmdfd29tYW4nOidcXHVkODNkXFx1ZGU0NyZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnYm93bGluZyc6J1xcdWQ4M2NcXHVkZmIzJyxcbiAgJ2JveGluZ19nbG92ZSc6J1xcdWQ4M2VcXHVkZDRhJyxcbiAgJ2JveSc6J1xcdWQ4M2RcXHVkYzY2JyxcbiAgJ2JyZWFkJzonXFx1ZDgzY1xcdWRmNWUnLFxuICAnYnJpZGVfd2l0aF92ZWlsJzonXFx1ZDgzZFxcdWRjNzAnLFxuICAnYnJpZGdlX2F0X25pZ2h0JzonXFx1ZDgzY1xcdWRmMDknLFxuICAnYnJpZWZjYXNlJzonXFx1ZDgzZFxcdWRjYmMnLFxuICAnYnJva2VuX2hlYXJ0JzonXFx1ZDgzZFxcdWRjOTQnLFxuICAnYnVnJzonXFx1ZDgzZFxcdWRjMWInLFxuICAnYnVpbGRpbmdfY29uc3RydWN0aW9uJzonXFx1ZDgzY1xcdWRmZDcnLFxuICAnYnVsYic6J1xcdWQ4M2RcXHVkY2ExJyxcbiAgJ2J1bGxldHRyYWluX2Zyb250JzonXFx1ZDgzZFxcdWRlODUnLFxuICAnYnVsbGV0dHJhaW5fc2lkZSc6J1xcdWQ4M2RcXHVkZTg0JyxcbiAgJ2J1cnJpdG8nOidcXHVkODNjXFx1ZGYyZicsXG4gICdidXMnOidcXHVkODNkXFx1ZGU4YycsXG4gICdidXNpbmVzc19zdWl0X2xldml0YXRpbmcnOidcXHVkODNkXFx1ZGQ3NCcsXG4gICdidXNzdG9wJzonXFx1ZDgzZFxcdWRlOGYnLFxuICAnYnVzdF9pbl9zaWxob3VldHRlJzonXFx1ZDgzZFxcdWRjNjQnLFxuICAnYnVzdHNfaW5fc2lsaG91ZXR0ZSc6J1xcdWQ4M2RcXHVkYzY1JyxcbiAgJ2J1dHRlcmZseSc6J1xcdWQ4M2VcXHVkZDhiJyxcbiAgJ2NhY3R1cyc6J1xcdWQ4M2NcXHVkZjM1JyxcbiAgJ2Nha2UnOidcXHVkODNjXFx1ZGY3MCcsXG4gICdjYWxlbmRhcic6J1xcdWQ4M2RcXHVkY2M2JyxcbiAgJ2NhbGxfbWVfaGFuZCc6J1xcdWQ4M2VcXHVkZDE5JyxcbiAgJ2NhbGxpbmcnOidcXHVkODNkXFx1ZGNmMicsXG4gICdjYW1lbCc6J1xcdWQ4M2RcXHVkYzJiJyxcbiAgJ2NhbWVyYSc6J1xcdWQ4M2RcXHVkY2Y3JyxcbiAgJ2NhbWVyYV9mbGFzaCc6J1xcdWQ4M2RcXHVkY2Y4JyxcbiAgJ2NhbXBpbmcnOidcXHVkODNjXFx1ZGZkNScsXG4gICdjYW5jZXInOidcXHUyNjRiXFx1ZmUwZicsXG4gICdjYW5kbGUnOidcXHVkODNkXFx1ZGQ2ZicsXG4gICdjYW5keSc6J1xcdWQ4M2NcXHVkZjZjJyxcbiAgJ2Nhbm9lJzonXFx1ZDgzZFxcdWRlZjYnLFxuICAnY2FwaXRhbF9hYmNkJzonXFx1ZDgzZFxcdWRkMjAnLFxuICAnY2Fwcmljb3JuJzonXFx1MjY1MVxcdWZlMGYnLFxuICAnY2FyJzonXFx1ZDgzZFxcdWRlOTcnLFxuICAnY2FyZF9maWxlX2JveCc6J1xcdWQ4M2RcXHVkZGMzJyxcbiAgJ2NhcmRfaW5kZXgnOidcXHVkODNkXFx1ZGNjNycsXG4gICdjYXJkX2luZGV4X2RpdmlkZXJzJzonXFx1ZDgzZFxcdWRkYzInLFxuICAnY2Fyb3VzZWxfaG9yc2UnOidcXHVkODNjXFx1ZGZhMCcsXG4gICdjYXJyb3QnOidcXHVkODNlXFx1ZGQ1NScsXG4gICdjYXQnOidcXHVkODNkXFx1ZGMzMScsXG4gICdjYXQyJzonXFx1ZDgzZFxcdWRjMDgnLFxuICAnY2QnOidcXHVkODNkXFx1ZGNiZicsXG4gICdjaGFpbnMnOidcXHUyNmQzJyxcbiAgJ2NoYW1wYWduZSc6J1xcdWQ4M2NcXHVkZjdlJyxcbiAgJ2NoYXJ0JzonXFx1ZDgzZFxcdWRjYjknLFxuICAnY2hhcnRfd2l0aF9kb3dud2FyZHNfdHJlbmQnOidcXHVkODNkXFx1ZGNjOScsXG4gICdjaGFydF93aXRoX3Vwd2FyZHNfdHJlbmQnOidcXHVkODNkXFx1ZGNjOCcsXG4gICdjaGVja2VyZWRfZmxhZyc6J1xcdWQ4M2NcXHVkZmMxJyxcbiAgJ2NoZWVzZSc6J1xcdWQ4M2VcXHVkZGMwJyxcbiAgJ2NoZXJyaWVzJzonXFx1ZDgzY1xcdWRmNTInLFxuICAnY2hlcnJ5X2Jsb3Nzb20nOidcXHVkODNjXFx1ZGYzOCcsXG4gICdjaGVzdG51dCc6J1xcdWQ4M2NcXHVkZjMwJyxcbiAgJ2NoaWNrZW4nOidcXHVkODNkXFx1ZGMxNCcsXG4gICdjaGlsZHJlbl9jcm9zc2luZyc6J1xcdWQ4M2RcXHVkZWI4JyxcbiAgJ2NoaXBtdW5rJzonXFx1ZDgzZFxcdWRjM2YnLFxuICAnY2hvY29sYXRlX2Jhcic6J1xcdWQ4M2NcXHVkZjZiJyxcbiAgJ2NocmlzdG1hc190cmVlJzonXFx1ZDgzY1xcdWRmODQnLFxuICAnY2h1cmNoJzonXFx1MjZlYVxcdWZlMGYnLFxuICAnY2luZW1hJzonXFx1ZDgzY1xcdWRmYTYnLFxuICAnY2lyY3VzX3RlbnQnOidcXHVkODNjXFx1ZGZhYScsXG4gICdjaXR5X3N1bnJpc2UnOidcXHVkODNjXFx1ZGYwNycsXG4gICdjaXR5X3N1bnNldCc6J1xcdWQ4M2NcXHVkZjA2JyxcbiAgJ2NpdHlzY2FwZSc6J1xcdWQ4M2NcXHVkZmQ5JyxcbiAgJ2NsJzonXFx1ZDgzY1xcdWRkOTEnLFxuICAnY2xhbXAnOidcXHVkODNkXFx1ZGRkYycsXG4gICdjbGFwJzonXFx1ZDgzZFxcdWRjNGYnLFxuICAnY2xhcHBlcic6J1xcdWQ4M2NcXHVkZmFjJyxcbiAgJ2NsYXNzaWNhbF9idWlsZGluZyc6J1xcdWQ4M2NcXHVkZmRiJyxcbiAgJ2NsaW5raW5nX2dsYXNzZXMnOidcXHVkODNlXFx1ZGQ0MicsXG4gICdjbGlwYm9hcmQnOidcXHVkODNkXFx1ZGNjYicsXG4gICdjbG9jazEnOidcXHVkODNkXFx1ZGQ1MCcsXG4gICdjbG9jazEwJzonXFx1ZDgzZFxcdWRkNTknLFxuICAnY2xvY2sxMDMwJzonXFx1ZDgzZFxcdWRkNjUnLFxuICAnY2xvY2sxMSc6J1xcdWQ4M2RcXHVkZDVhJyxcbiAgJ2Nsb2NrMTEzMCc6J1xcdWQ4M2RcXHVkZDY2JyxcbiAgJ2Nsb2NrMTInOidcXHVkODNkXFx1ZGQ1YicsXG4gICdjbG9jazEyMzAnOidcXHVkODNkXFx1ZGQ2NycsXG4gICdjbG9jazEzMCc6J1xcdWQ4M2RcXHVkZDVjJyxcbiAgJ2Nsb2NrMic6J1xcdWQ4M2RcXHVkZDUxJyxcbiAgJ2Nsb2NrMjMwJzonXFx1ZDgzZFxcdWRkNWQnLFxuICAnY2xvY2szJzonXFx1ZDgzZFxcdWRkNTInLFxuICAnY2xvY2szMzAnOidcXHVkODNkXFx1ZGQ1ZScsXG4gICdjbG9jazQnOidcXHVkODNkXFx1ZGQ1MycsXG4gICdjbG9jazQzMCc6J1xcdWQ4M2RcXHVkZDVmJyxcbiAgJ2Nsb2NrNSc6J1xcdWQ4M2RcXHVkZDU0JyxcbiAgJ2Nsb2NrNTMwJzonXFx1ZDgzZFxcdWRkNjAnLFxuICAnY2xvY2s2JzonXFx1ZDgzZFxcdWRkNTUnLFxuICAnY2xvY2s2MzAnOidcXHVkODNkXFx1ZGQ2MScsXG4gICdjbG9jazcnOidcXHVkODNkXFx1ZGQ1NicsXG4gICdjbG9jazczMCc6J1xcdWQ4M2RcXHVkZDYyJyxcbiAgJ2Nsb2NrOCc6J1xcdWQ4M2RcXHVkZDU3JyxcbiAgJ2Nsb2NrODMwJzonXFx1ZDgzZFxcdWRkNjMnLFxuICAnY2xvY2s5JzonXFx1ZDgzZFxcdWRkNTgnLFxuICAnY2xvY2s5MzAnOidcXHVkODNkXFx1ZGQ2NCcsXG4gICdjbG9zZWRfYm9vayc6J1xcdWQ4M2RcXHVkY2Q1JyxcbiAgJ2Nsb3NlZF9sb2NrX3dpdGhfa2V5JzonXFx1ZDgzZFxcdWRkMTAnLFxuICAnY2xvc2VkX3VtYnJlbGxhJzonXFx1ZDgzY1xcdWRmMDInLFxuICAnY2xvdWQnOidcXHUyNjAxXFx1ZmUwZicsXG4gICdjbG91ZF93aXRoX2xpZ2h0bmluZyc6J1xcdWQ4M2NcXHVkZjI5JyxcbiAgJ2Nsb3VkX3dpdGhfbGlnaHRuaW5nX2FuZF9yYWluJzonXFx1MjZjOCcsXG4gICdjbG91ZF93aXRoX3JhaW4nOidcXHVkODNjXFx1ZGYyNycsXG4gICdjbG91ZF93aXRoX3Nub3cnOidcXHVkODNjXFx1ZGYyOCcsXG4gICdjbG93bl9mYWNlJzonXFx1ZDgzZVxcdWRkMjEnLFxuICAnY2x1YnMnOidcXHUyNjYzXFx1ZmUwZicsXG4gICdjb2NrdGFpbCc6J1xcdWQ4M2NcXHVkZjc4JyxcbiAgJ2NvZmZlZSc6J1xcdTI2MTVcXHVmZTBmJyxcbiAgJ2NvZmZpbic6J1xcdTI2YjBcXHVmZTBmJyxcbiAgJ2NvbGRfc3dlYXQnOidcXHVkODNkXFx1ZGUzMCcsXG4gICdjb21ldCc6J1xcdTI2MDRcXHVmZTBmJyxcbiAgJ2NvbXB1dGVyJzonXFx1ZDgzZFxcdWRjYmInLFxuICAnY29tcHV0ZXJfbW91c2UnOidcXHVkODNkXFx1ZGRiMScsXG4gICdjb25mZXR0aV9iYWxsJzonXFx1ZDgzY1xcdWRmOGEnLFxuICAnY29uZm91bmRlZCc6J1xcdWQ4M2RcXHVkZTE2JyxcbiAgJ2NvbmZ1c2VkJzonXFx1ZDgzZFxcdWRlMTUnLFxuICAnY29uZ3JhdHVsYXRpb25zJzonXFx1MzI5N1xcdWZlMGYnLFxuICAnY29uc3RydWN0aW9uJzonXFx1ZDgzZFxcdWRlYTcnLFxuICAnY29uc3RydWN0aW9uX3dvcmtlcl9tYW4nOidcXHVkODNkXFx1ZGM3NycsXG4gICdjb25zdHJ1Y3Rpb25fd29ya2VyX3dvbWFuJzonXFx1ZDgzZFxcdWRjNzcmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ2NvbnRyb2xfa25vYnMnOidcXHVkODNjXFx1ZGY5YicsXG4gICdjb252ZW5pZW5jZV9zdG9yZSc6J1xcdWQ4M2NcXHVkZmVhJyxcbiAgJ2Nvb2tpZSc6J1xcdWQ4M2NcXHVkZjZhJyxcbiAgJ2Nvb2wnOidcXHVkODNjXFx1ZGQ5MicsXG4gICdwb2xpY2VtYW4nOidcXHVkODNkXFx1ZGM2ZScsXG4gICdjb3B5cmlnaHQnOidcXHUwMGE5XFx1ZmUwZicsXG4gICdjb3JuJzonXFx1ZDgzY1xcdWRmM2QnLFxuICAnY291Y2hfYW5kX2xhbXAnOidcXHVkODNkXFx1ZGVjYicsXG4gICdjb3VwbGUnOidcXHVkODNkXFx1ZGM2YicsXG4gICdjb3VwbGVfd2l0aF9oZWFydF93b21hbl9tYW4nOidcXHVkODNkXFx1ZGM5MScsXG4gICdjb3VwbGVfd2l0aF9oZWFydF9tYW5fbWFuJzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdTI3NjRcXHVmZTBmJnp3ajtcXHVkODNkXFx1ZGM2OCcsXG4gICdjb3VwbGVfd2l0aF9oZWFydF93b21hbl93b21hbic6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHUyNzY0XFx1ZmUwZiZ6d2o7XFx1ZDgzZFxcdWRjNjknLFxuICAnY291cGxla2lzc19tYW5fbWFuJzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdTI3NjRcXHVmZTBmJnp3ajtcXHVkODNkXFx1ZGM4YiZ6d2o7XFx1ZDgzZFxcdWRjNjgnLFxuICAnY291cGxla2lzc19tYW5fd29tYW4nOidcXHVkODNkXFx1ZGM4ZicsXG4gICdjb3VwbGVraXNzX3dvbWFuX3dvbWFuJzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdTI3NjRcXHVmZTBmJnp3ajtcXHVkODNkXFx1ZGM4YiZ6d2o7XFx1ZDgzZFxcdWRjNjknLFxuICAnY293JzonXFx1ZDgzZFxcdWRjMmUnLFxuICAnY293Mic6J1xcdWQ4M2RcXHVkYzA0JyxcbiAgJ2Nvd2JveV9oYXRfZmFjZSc6J1xcdWQ4M2VcXHVkZDIwJyxcbiAgJ2NyYWInOidcXHVkODNlXFx1ZGQ4MCcsXG4gICdjcmF5b24nOidcXHVkODNkXFx1ZGQ4ZCcsXG4gICdjcmVkaXRfY2FyZCc6J1xcdWQ4M2RcXHVkY2IzJyxcbiAgJ2NyZXNjZW50X21vb24nOidcXHVkODNjXFx1ZGYxOScsXG4gICdjcmlja2V0JzonXFx1ZDgzY1xcdWRmY2YnLFxuICAnY3JvY29kaWxlJzonXFx1ZDgzZFxcdWRjMGEnLFxuICAnY3JvaXNzYW50JzonXFx1ZDgzZVxcdWRkNTAnLFxuICAnY3Jvc3NlZF9maW5nZXJzJzonXFx1ZDgzZVxcdWRkMWUnLFxuICAnY3Jvc3NlZF9mbGFncyc6J1xcdWQ4M2NcXHVkZjhjJyxcbiAgJ2Nyb3NzZWRfc3dvcmRzJzonXFx1MjY5NFxcdWZlMGYnLFxuICAnY3Jvd24nOidcXHVkODNkXFx1ZGM1MScsXG4gICdjcnknOidcXHVkODNkXFx1ZGUyMicsXG4gICdjcnlpbmdfY2F0X2ZhY2UnOidcXHVkODNkXFx1ZGUzZicsXG4gICdjcnlzdGFsX2JhbGwnOidcXHVkODNkXFx1ZGQyZScsXG4gICdjdWN1bWJlcic6J1xcdWQ4M2VcXHVkZDUyJyxcbiAgJ2N1cGlkJzonXFx1ZDgzZFxcdWRjOTgnLFxuICAnY3VybHlfbG9vcCc6J1xcdTI3YjAnLFxuICAnY3VycmVuY3lfZXhjaGFuZ2UnOidcXHVkODNkXFx1ZGNiMScsXG4gICdjdXJyeSc6J1xcdWQ4M2NcXHVkZjViJyxcbiAgJ2N1c3RhcmQnOidcXHVkODNjXFx1ZGY2ZScsXG4gICdjdXN0b21zJzonXFx1ZDgzZFxcdWRlYzMnLFxuICAnY3ljbG9uZSc6J1xcdWQ4M2NcXHVkZjAwJyxcbiAgJ2RhZ2dlcic6J1xcdWQ4M2RcXHVkZGUxJyxcbiAgJ2RhbmNlcic6J1xcdWQ4M2RcXHVkYzgzJyxcbiAgJ2RhbmNpbmdfd29tZW4nOidcXHVkODNkXFx1ZGM2ZicsXG4gICdkYW5jaW5nX21lbic6J1xcdWQ4M2RcXHVkYzZmJnp3ajtcXHUyNjQyXFx1ZmUwZicsXG4gICdkYW5nbyc6J1xcdWQ4M2NcXHVkZjYxJyxcbiAgJ2Rhcmtfc3VuZ2xhc3Nlcyc6J1xcdWQ4M2RcXHVkZDc2JyxcbiAgJ2RhcnQnOidcXHVkODNjXFx1ZGZhZicsXG4gICdkYXNoJzonXFx1ZDgzZFxcdWRjYTgnLFxuICAnZGF0ZSc6J1xcdWQ4M2RcXHVkY2M1JyxcbiAgJ2RlY2lkdW91c190cmVlJzonXFx1ZDgzY1xcdWRmMzMnLFxuICAnZGVlcic6J1xcdWQ4M2VcXHVkZDhjJyxcbiAgJ2RlcGFydG1lbnRfc3RvcmUnOidcXHVkODNjXFx1ZGZlYycsXG4gICdkZXJlbGljdF9ob3VzZSc6J1xcdWQ4M2NcXHVkZmRhJyxcbiAgJ2Rlc2VydCc6J1xcdWQ4M2NcXHVkZmRjJyxcbiAgJ2Rlc2VydF9pc2xhbmQnOidcXHVkODNjXFx1ZGZkZCcsXG4gICdkZXNrdG9wX2NvbXB1dGVyJzonXFx1ZDgzZFxcdWRkYTUnLFxuICAnbWFsZV9kZXRlY3RpdmUnOidcXHVkODNkXFx1ZGQ3NVxcdWZlMGYnLFxuICAnZGlhbW9uZF9zaGFwZV93aXRoX2FfZG90X2luc2lkZSc6J1xcdWQ4M2RcXHVkY2EwJyxcbiAgJ2RpYW1vbmRzJzonXFx1MjY2NlxcdWZlMGYnLFxuICAnZGlzYXBwb2ludGVkJzonXFx1ZDgzZFxcdWRlMWUnLFxuICAnZGlzYXBwb2ludGVkX3JlbGlldmVkJzonXFx1ZDgzZFxcdWRlMjUnLFxuICAnZGl6enknOidcXHVkODNkXFx1ZGNhYicsXG4gICdkaXp6eV9mYWNlJzonXFx1ZDgzZFxcdWRlMzUnLFxuICAnZG9fbm90X2xpdHRlcic6J1xcdWQ4M2RcXHVkZWFmJyxcbiAgJ2RvZyc6J1xcdWQ4M2RcXHVkYzM2JyxcbiAgJ2RvZzInOidcXHVkODNkXFx1ZGMxNScsXG4gICdkb2xsYXInOidcXHVkODNkXFx1ZGNiNScsXG4gICdkb2xscyc6J1xcdWQ4M2NcXHVkZjhlJyxcbiAgJ2RvbHBoaW4nOidcXHVkODNkXFx1ZGMyYycsXG4gICdkb29yJzonXFx1ZDgzZFxcdWRlYWEnLFxuICAnZG91Z2hudXQnOidcXHVkODNjXFx1ZGY2OScsXG4gICdkb3ZlJzonXFx1ZDgzZFxcdWRkNGEnLFxuICAnZHJhZ29uJzonXFx1ZDgzZFxcdWRjMDknLFxuICAnZHJhZ29uX2ZhY2UnOidcXHVkODNkXFx1ZGMzMicsXG4gICdkcmVzcyc6J1xcdWQ4M2RcXHVkYzU3JyxcbiAgJ2Ryb21lZGFyeV9jYW1lbCc6J1xcdWQ4M2RcXHVkYzJhJyxcbiAgJ2Ryb29saW5nX2ZhY2UnOidcXHVkODNlXFx1ZGQyNCcsXG4gICdkcm9wbGV0JzonXFx1ZDgzZFxcdWRjYTcnLFxuICAnZHJ1bSc6J1xcdWQ4M2VcXHVkZDQxJyxcbiAgJ2R1Y2snOidcXHVkODNlXFx1ZGQ4NicsXG4gICdkdmQnOidcXHVkODNkXFx1ZGNjMCcsXG4gICdlLW1haWwnOidcXHVkODNkXFx1ZGNlNycsXG4gICdlYWdsZSc6J1xcdWQ4M2VcXHVkZDg1JyxcbiAgJ2Vhcic6J1xcdWQ4M2RcXHVkYzQyJyxcbiAgJ2Vhcl9vZl9yaWNlJzonXFx1ZDgzY1xcdWRmM2UnLFxuICAnZWFydGhfYWZyaWNhJzonXFx1ZDgzY1xcdWRmMGQnLFxuICAnZWFydGhfYW1lcmljYXMnOidcXHVkODNjXFx1ZGYwZScsXG4gICdlYXJ0aF9hc2lhJzonXFx1ZDgzY1xcdWRmMGYnLFxuICAnZWdnJzonXFx1ZDgzZVxcdWRkNWEnLFxuICAnZWdncGxhbnQnOidcXHVkODNjXFx1ZGY0NicsXG4gICdlaWdodF9wb2ludGVkX2JsYWNrX3N0YXInOidcXHUyNzM0XFx1ZmUwZicsXG4gICdlaWdodF9zcG9rZWRfYXN0ZXJpc2snOidcXHUyNzMzXFx1ZmUwZicsXG4gICdlbGVjdHJpY19wbHVnJzonXFx1ZDgzZFxcdWRkMGMnLFxuICAnZWxlcGhhbnQnOidcXHVkODNkXFx1ZGMxOCcsXG4gICdlbWFpbCc6J1xcdTI3MDlcXHVmZTBmJyxcbiAgJ2VuZCc6J1xcdWQ4M2RcXHVkZDFhJyxcbiAgJ2VudmVsb3BlX3dpdGhfYXJyb3cnOidcXHVkODNkXFx1ZGNlOScsXG4gICdldXJvJzonXFx1ZDgzZFxcdWRjYjYnLFxuICAnZXVyb3BlYW5fY2FzdGxlJzonXFx1ZDgzY1xcdWRmZjAnLFxuICAnZXVyb3BlYW5fcG9zdF9vZmZpY2UnOidcXHVkODNjXFx1ZGZlNCcsXG4gICdldmVyZ3JlZW5fdHJlZSc6J1xcdWQ4M2NcXHVkZjMyJyxcbiAgJ2V4Y2xhbWF0aW9uJzonXFx1Mjc1N1xcdWZlMGYnLFxuICAnZXhwcmVzc2lvbmxlc3MnOidcXHVkODNkXFx1ZGUxMScsXG4gICdleWUnOidcXHVkODNkXFx1ZGM0MScsXG4gICdleWVfc3BlZWNoX2J1YmJsZSc6J1xcdWQ4M2RcXHVkYzQxJnp3ajtcXHVkODNkXFx1ZGRlOCcsXG4gICdleWVnbGFzc2VzJzonXFx1ZDgzZFxcdWRjNTMnLFxuICAnZXllcyc6J1xcdWQ4M2RcXHVkYzQwJyxcbiAgJ2ZhY2Vfd2l0aF9oZWFkX2JhbmRhZ2UnOidcXHVkODNlXFx1ZGQxNScsXG4gICdmYWNlX3dpdGhfdGhlcm1vbWV0ZXInOidcXHVkODNlXFx1ZGQxMicsXG4gICdmaXN0X29uY29taW5nJzonXFx1ZDgzZFxcdWRjNGEnLFxuICAnZmFjdG9yeSc6J1xcdWQ4M2NcXHVkZmVkJyxcbiAgJ2ZhbGxlbl9sZWFmJzonXFx1ZDgzY1xcdWRmNDInLFxuICAnZmFtaWx5X21hbl93b21hbl9ib3knOidcXHVkODNkXFx1ZGM2YScsXG4gICdmYW1pbHlfbWFuX2JveSc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGM2NicsXG4gICdmYW1pbHlfbWFuX2JveV9ib3knOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRjNjYmendqO1xcdWQ4M2RcXHVkYzY2JyxcbiAgJ2ZhbWlseV9tYW5fZ2lybCc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGM2NycsXG4gICdmYW1pbHlfbWFuX2dpcmxfYm95JzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkYzY3Jnp3ajtcXHVkODNkXFx1ZGM2NicsXG4gICdmYW1pbHlfbWFuX2dpcmxfZ2lybCc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGM2NyZ6d2o7XFx1ZDgzZFxcdWRjNjcnLFxuICAnZmFtaWx5X21hbl9tYW5fYm95JzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGM2NicsXG4gICdmYW1pbHlfbWFuX21hbl9ib3lfYm95JzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGM2NiZ6d2o7XFx1ZDgzZFxcdWRjNjYnLFxuICAnZmFtaWx5X21hbl9tYW5fZ2lybCc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRjNjcnLFxuICAnZmFtaWx5X21hbl9tYW5fZ2lybF9ib3knOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkYzY3Jnp3ajtcXHVkODNkXFx1ZGM2NicsXG4gICdmYW1pbHlfbWFuX21hbl9naXJsX2dpcmwnOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkYzY3Jnp3ajtcXHVkODNkXFx1ZGM2NycsXG4gICdmYW1pbHlfbWFuX3dvbWFuX2JveV9ib3knOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkYzY2Jnp3ajtcXHVkODNkXFx1ZGM2NicsXG4gICdmYW1pbHlfbWFuX3dvbWFuX2dpcmwnOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkYzY3JyxcbiAgJ2ZhbWlseV9tYW5fd29tYW5fZ2lybF9ib3knOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkYzY3Jnp3ajtcXHVkODNkXFx1ZGM2NicsXG4gICdmYW1pbHlfbWFuX3dvbWFuX2dpcmxfZ2lybCc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRjNjcmendqO1xcdWQ4M2RcXHVkYzY3JyxcbiAgJ2ZhbWlseV93b21hbl9ib3knOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRjNjYnLFxuICAnZmFtaWx5X3dvbWFuX2JveV9ib3knOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRjNjYmendqO1xcdWQ4M2RcXHVkYzY2JyxcbiAgJ2ZhbWlseV93b21hbl9naXJsJzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkYzY3JyxcbiAgJ2ZhbWlseV93b21hbl9naXJsX2JveSc6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGM2NyZ6d2o7XFx1ZDgzZFxcdWRjNjYnLFxuICAnZmFtaWx5X3dvbWFuX2dpcmxfZ2lybCc6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGM2NyZ6d2o7XFx1ZDgzZFxcdWRjNjcnLFxuICAnZmFtaWx5X3dvbWFuX3dvbWFuX2JveSc6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRjNjYnLFxuICAnZmFtaWx5X3dvbWFuX3dvbWFuX2JveV9ib3knOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkYzY2Jnp3ajtcXHVkODNkXFx1ZGM2NicsXG4gICdmYW1pbHlfd29tYW5fd29tYW5fZ2lybCc6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRjNjcnLFxuICAnZmFtaWx5X3dvbWFuX3dvbWFuX2dpcmxfYm95JzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGM2NyZ6d2o7XFx1ZDgzZFxcdWRjNjYnLFxuICAnZmFtaWx5X3dvbWFuX3dvbWFuX2dpcmxfZ2lybCc6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRjNjcmendqO1xcdWQ4M2RcXHVkYzY3JyxcbiAgJ2Zhc3RfZm9yd2FyZCc6J1xcdTIzZTknLFxuICAnZmF4JzonXFx1ZDgzZFxcdWRjZTAnLFxuICAnZmVhcmZ1bCc6J1xcdWQ4M2RcXHVkZTI4JyxcbiAgJ2ZlZXQnOidcXHVkODNkXFx1ZGMzZScsXG4gICdmZW1hbGVfZGV0ZWN0aXZlJzonXFx1ZDgzZFxcdWRkNzVcXHVmZTBmJnp3ajtcXHUyNjQwXFx1ZmUwZicsXG4gICdmZXJyaXNfd2hlZWwnOidcXHVkODNjXFx1ZGZhMScsXG4gICdmZXJyeSc6J1xcdTI2ZjQnLFxuICAnZmllbGRfaG9ja2V5JzonXFx1ZDgzY1xcdWRmZDEnLFxuICAnZmlsZV9jYWJpbmV0JzonXFx1ZDgzZFxcdWRkYzQnLFxuICAnZmlsZV9mb2xkZXInOidcXHVkODNkXFx1ZGNjMScsXG4gICdmaWxtX3Byb2plY3Rvcic6J1xcdWQ4M2RcXHVkY2ZkJyxcbiAgJ2ZpbG1fc3RyaXAnOidcXHVkODNjXFx1ZGY5ZScsXG4gICdmaXJlJzonXFx1ZDgzZFxcdWRkMjUnLFxuICAnZmlyZV9lbmdpbmUnOidcXHVkODNkXFx1ZGU5MicsXG4gICdmaXJld29ya3MnOidcXHVkODNjXFx1ZGY4NicsXG4gICdmaXJzdF9xdWFydGVyX21vb24nOidcXHVkODNjXFx1ZGYxMycsXG4gICdmaXJzdF9xdWFydGVyX21vb25fd2l0aF9mYWNlJzonXFx1ZDgzY1xcdWRmMWInLFxuICAnZmlzaCc6J1xcdWQ4M2RcXHVkYzFmJyxcbiAgJ2Zpc2hfY2FrZSc6J1xcdWQ4M2NcXHVkZjY1JyxcbiAgJ2Zpc2hpbmdfcG9sZV9hbmRfZmlzaCc6J1xcdWQ4M2NcXHVkZmEzJyxcbiAgJ2Zpc3RfcmFpc2VkJzonXFx1MjcwYScsXG4gICdmaXN0X2xlZnQnOidcXHVkODNlXFx1ZGQxYicsXG4gICdmaXN0X3JpZ2h0JzonXFx1ZDgzZVxcdWRkMWMnLFxuICAnZmxhZ3MnOidcXHVkODNjXFx1ZGY4ZicsXG4gICdmbGFzaGxpZ2h0JzonXFx1ZDgzZFxcdWRkMjYnLFxuICAnZmxldXJfZGVfbGlzJzonXFx1MjY5Y1xcdWZlMGYnLFxuICAnZmxpZ2h0X2Fycml2YWwnOidcXHVkODNkXFx1ZGVlYycsXG4gICdmbGlnaHRfZGVwYXJ0dXJlJzonXFx1ZDgzZFxcdWRlZWInLFxuICAnZmxvcHB5X2Rpc2snOidcXHVkODNkXFx1ZGNiZScsXG4gICdmbG93ZXJfcGxheWluZ19jYXJkcyc6J1xcdWQ4M2NcXHVkZmI0JyxcbiAgJ2ZsdXNoZWQnOidcXHVkODNkXFx1ZGUzMycsXG4gICdmb2cnOidcXHVkODNjXFx1ZGYyYicsXG4gICdmb2dneSc6J1xcdWQ4M2NcXHVkZjAxJyxcbiAgJ2Zvb3RiYWxsJzonXFx1ZDgzY1xcdWRmYzgnLFxuICAnZm9vdHByaW50cyc6J1xcdWQ4M2RcXHVkYzYzJyxcbiAgJ2ZvcmtfYW5kX2tuaWZlJzonXFx1ZDgzY1xcdWRmNzQnLFxuICAnZm91bnRhaW4nOidcXHUyNmYyXFx1ZmUwZicsXG4gICdmb3VudGFpbl9wZW4nOidcXHVkODNkXFx1ZGQ4YicsXG4gICdmb3VyX2xlYWZfY2xvdmVyJzonXFx1ZDgzY1xcdWRmNDAnLFxuICAnZm94X2ZhY2UnOidcXHVkODNlXFx1ZGQ4YScsXG4gICdmcmFtZWRfcGljdHVyZSc6J1xcdWQ4M2RcXHVkZGJjJyxcbiAgJ2ZyZWUnOidcXHVkODNjXFx1ZGQ5MycsXG4gICdmcmllZF9lZ2cnOidcXHVkODNjXFx1ZGY3MycsXG4gICdmcmllZF9zaHJpbXAnOidcXHVkODNjXFx1ZGY2NCcsXG4gICdmcmllcyc6J1xcdWQ4M2NcXHVkZjVmJyxcbiAgJ2Zyb2cnOidcXHVkODNkXFx1ZGMzOCcsXG4gICdmcm93bmluZyc6J1xcdWQ4M2RcXHVkZTI2JyxcbiAgJ2Zyb3duaW5nX2ZhY2UnOidcXHUyNjM5XFx1ZmUwZicsXG4gICdmcm93bmluZ19tYW4nOidcXHVkODNkXFx1ZGU0ZCZ6d2o7XFx1MjY0MlxcdWZlMGYnLFxuICAnZnJvd25pbmdfd29tYW4nOidcXHVkODNkXFx1ZGU0ZCcsXG4gICdtaWRkbGVfZmluZ2VyJzonXFx1ZDgzZFxcdWRkOTUnLFxuICAnZnVlbHB1bXAnOidcXHUyNmZkXFx1ZmUwZicsXG4gICdmdWxsX21vb24nOidcXHVkODNjXFx1ZGYxNScsXG4gICdmdWxsX21vb25fd2l0aF9mYWNlJzonXFx1ZDgzY1xcdWRmMWQnLFxuICAnZnVuZXJhbF91cm4nOidcXHUyNmIxXFx1ZmUwZicsXG4gICdnYW1lX2RpZSc6J1xcdWQ4M2NcXHVkZmIyJyxcbiAgJ2dlYXInOidcXHUyNjk5XFx1ZmUwZicsXG4gICdnZW0nOidcXHVkODNkXFx1ZGM4ZScsXG4gICdnZW1pbmknOidcXHUyNjRhXFx1ZmUwZicsXG4gICdnaG9zdCc6J1xcdWQ4M2RcXHVkYzdiJyxcbiAgJ2dpZnQnOidcXHVkODNjXFx1ZGY4MScsXG4gICdnaWZ0X2hlYXJ0JzonXFx1ZDgzZFxcdWRjOWQnLFxuICAnZ2lybCc6J1xcdWQ4M2RcXHVkYzY3JyxcbiAgJ2dsb2JlX3dpdGhfbWVyaWRpYW5zJzonXFx1ZDgzY1xcdWRmMTAnLFxuICAnZ29hbF9uZXQnOidcXHVkODNlXFx1ZGQ0NScsXG4gICdnb2F0JzonXFx1ZDgzZFxcdWRjMTAnLFxuICAnZ29sZic6J1xcdTI2ZjNcXHVmZTBmJyxcbiAgJ2dvbGZpbmdfbWFuJzonXFx1ZDgzY1xcdWRmY2NcXHVmZTBmJyxcbiAgJ2dvbGZpbmdfd29tYW4nOidcXHVkODNjXFx1ZGZjY1xcdWZlMGYmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ2dvcmlsbGEnOidcXHVkODNlXFx1ZGQ4ZCcsXG4gICdncmFwZXMnOidcXHVkODNjXFx1ZGY0NycsXG4gICdncmVlbl9hcHBsZSc6J1xcdWQ4M2NcXHVkZjRmJyxcbiAgJ2dyZWVuX2Jvb2snOidcXHVkODNkXFx1ZGNkNycsXG4gICdncmVlbl9oZWFydCc6J1xcdWQ4M2RcXHVkYzlhJyxcbiAgJ2dyZWVuX3NhbGFkJzonXFx1ZDgzZVxcdWRkNTcnLFxuICAnZ3JleV9leGNsYW1hdGlvbic6J1xcdTI3NTUnLFxuICAnZ3JleV9xdWVzdGlvbic6J1xcdTI3NTQnLFxuICAnZ3JpbWFjaW5nJzonXFx1ZDgzZFxcdWRlMmMnLFxuICAnZ3Jpbic6J1xcdWQ4M2RcXHVkZTAxJyxcbiAgJ2dyaW5uaW5nJzonXFx1ZDgzZFxcdWRlMDAnLFxuICAnZ3VhcmRzbWFuJzonXFx1ZDgzZFxcdWRjODInLFxuICAnZ3VhcmRzd29tYW4nOidcXHVkODNkXFx1ZGM4MiZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnZ3VpdGFyJzonXFx1ZDgzY1xcdWRmYjgnLFxuICAnZ3VuJzonXFx1ZDgzZFxcdWRkMmInLFxuICAnaGFpcmN1dF93b21hbic6J1xcdWQ4M2RcXHVkYzg3JyxcbiAgJ2hhaXJjdXRfbWFuJzonXFx1ZDgzZFxcdWRjODcmendqO1xcdTI2NDJcXHVmZTBmJyxcbiAgJ2hhbWJ1cmdlcic6J1xcdWQ4M2NcXHVkZjU0JyxcbiAgJ2hhbW1lcic6J1xcdWQ4M2RcXHVkZDI4JyxcbiAgJ2hhbW1lcl9hbmRfcGljayc6J1xcdTI2OTInLFxuICAnaGFtbWVyX2FuZF93cmVuY2gnOidcXHVkODNkXFx1ZGVlMCcsXG4gICdoYW1zdGVyJzonXFx1ZDgzZFxcdWRjMzknLFxuICAnaGFuZCc6J1xcdTI3MGInLFxuICAnaGFuZGJhZyc6J1xcdWQ4M2RcXHVkYzVjJyxcbiAgJ2hhbmRzaGFrZSc6J1xcdWQ4M2VcXHVkZDFkJyxcbiAgJ2hhbmtleSc6J1xcdWQ4M2RcXHVkY2E5JyxcbiAgJ2hhdGNoZWRfY2hpY2snOidcXHVkODNkXFx1ZGMyNScsXG4gICdoYXRjaGluZ19jaGljayc6J1xcdWQ4M2RcXHVkYzIzJyxcbiAgJ2hlYWRwaG9uZXMnOidcXHVkODNjXFx1ZGZhNycsXG4gICdoZWFyX25vX2V2aWwnOidcXHVkODNkXFx1ZGU0OScsXG4gICdoZWFydCc6J1xcdTI3NjRcXHVmZTBmJyxcbiAgJ2hlYXJ0X2RlY29yYXRpb24nOidcXHVkODNkXFx1ZGM5ZicsXG4gICdoZWFydF9leWVzJzonXFx1ZDgzZFxcdWRlMGQnLFxuICAnaGVhcnRfZXllc19jYXQnOidcXHVkODNkXFx1ZGUzYicsXG4gICdoZWFydGJlYXQnOidcXHVkODNkXFx1ZGM5MycsXG4gICdoZWFydHB1bHNlJzonXFx1ZDgzZFxcdWRjOTcnLFxuICAnaGVhcnRzJzonXFx1MjY2NVxcdWZlMGYnLFxuICAnaGVhdnlfY2hlY2tfbWFyayc6J1xcdTI3MTRcXHVmZTBmJyxcbiAgJ2hlYXZ5X2RpdmlzaW9uX3NpZ24nOidcXHUyNzk3JyxcbiAgJ2hlYXZ5X2RvbGxhcl9zaWduJzonXFx1ZDgzZFxcdWRjYjInLFxuICAnaGVhdnlfaGVhcnRfZXhjbGFtYXRpb24nOidcXHUyNzYzXFx1ZmUwZicsXG4gICdoZWF2eV9taW51c19zaWduJzonXFx1Mjc5NicsXG4gICdoZWF2eV9tdWx0aXBsaWNhdGlvbl94JzonXFx1MjcxNlxcdWZlMGYnLFxuICAnaGVhdnlfcGx1c19zaWduJzonXFx1Mjc5NScsXG4gICdoZWxpY29wdGVyJzonXFx1ZDgzZFxcdWRlODEnLFxuICAnaGVyYic6J1xcdWQ4M2NcXHVkZjNmJyxcbiAgJ2hpYmlzY3VzJzonXFx1ZDgzY1xcdWRmM2EnLFxuICAnaGlnaF9icmlnaHRuZXNzJzonXFx1ZDgzZFxcdWRkMDYnLFxuICAnaGlnaF9oZWVsJzonXFx1ZDgzZFxcdWRjNjAnLFxuICAnaG9jaG8nOidcXHVkODNkXFx1ZGQyYScsXG4gICdob2xlJzonXFx1ZDgzZFxcdWRkNzMnLFxuICAnaG9uZXlfcG90JzonXFx1ZDgzY1xcdWRmNmYnLFxuICAnaG9yc2UnOidcXHVkODNkXFx1ZGMzNCcsXG4gICdob3JzZV9yYWNpbmcnOidcXHVkODNjXFx1ZGZjNycsXG4gICdob3NwaXRhbCc6J1xcdWQ4M2NcXHVkZmU1JyxcbiAgJ2hvdF9wZXBwZXInOidcXHVkODNjXFx1ZGYzNicsXG4gICdob3Rkb2cnOidcXHVkODNjXFx1ZGYyZCcsXG4gICdob3RlbCc6J1xcdWQ4M2NcXHVkZmU4JyxcbiAgJ2hvdHNwcmluZ3MnOidcXHUyNjY4XFx1ZmUwZicsXG4gICdob3VyZ2xhc3MnOidcXHUyMzFiXFx1ZmUwZicsXG4gICdob3VyZ2xhc3NfZmxvd2luZ19zYW5kJzonXFx1MjNmMycsXG4gICdob3VzZSc6J1xcdWQ4M2NcXHVkZmUwJyxcbiAgJ2hvdXNlX3dpdGhfZ2FyZGVuJzonXFx1ZDgzY1xcdWRmZTEnLFxuICAnaG91c2VzJzonXFx1ZDgzY1xcdWRmZDgnLFxuICAnaHVncyc6J1xcdWQ4M2VcXHVkZDE3JyxcbiAgJ2h1c2hlZCc6J1xcdWQ4M2RcXHVkZTJmJyxcbiAgJ2ljZV9jcmVhbSc6J1xcdWQ4M2NcXHVkZjY4JyxcbiAgJ2ljZV9ob2NrZXknOidcXHVkODNjXFx1ZGZkMicsXG4gICdpY2Vfc2thdGUnOidcXHUyNmY4JyxcbiAgJ2ljZWNyZWFtJzonXFx1ZDgzY1xcdWRmNjYnLFxuICAnaWQnOidcXHVkODNjXFx1ZGQ5NCcsXG4gICdpZGVvZ3JhcGhfYWR2YW50YWdlJzonXFx1ZDgzY1xcdWRlNTAnLFxuICAnaW1wJzonXFx1ZDgzZFxcdWRjN2YnLFxuICAnaW5ib3hfdHJheSc6J1xcdWQ4M2RcXHVkY2U1JyxcbiAgJ2luY29taW5nX2VudmVsb3BlJzonXFx1ZDgzZFxcdWRjZTgnLFxuICAndGlwcGluZ19oYW5kX3dvbWFuJzonXFx1ZDgzZFxcdWRjODEnLFxuICAnaW5mb3JtYXRpb25fc291cmNlJzonXFx1MjEzOVxcdWZlMGYnLFxuICAnaW5ub2NlbnQnOidcXHVkODNkXFx1ZGUwNycsXG4gICdpbnRlcnJvYmFuZyc6J1xcdTIwNDlcXHVmZTBmJyxcbiAgJ2lwaG9uZSc6J1xcdWQ4M2RcXHVkY2YxJyxcbiAgJ2l6YWtheWFfbGFudGVybic6J1xcdWQ4M2NcXHVkZmVlJyxcbiAgJ2phY2tfb19sYW50ZXJuJzonXFx1ZDgzY1xcdWRmODMnLFxuICAnamFwYW4nOidcXHVkODNkXFx1ZGRmZScsXG4gICdqYXBhbmVzZV9jYXN0bGUnOidcXHVkODNjXFx1ZGZlZicsXG4gICdqYXBhbmVzZV9nb2JsaW4nOidcXHVkODNkXFx1ZGM3YScsXG4gICdqYXBhbmVzZV9vZ3JlJzonXFx1ZDgzZFxcdWRjNzknLFxuICAnamVhbnMnOidcXHVkODNkXFx1ZGM1NicsXG4gICdqb3knOidcXHVkODNkXFx1ZGUwMicsXG4gICdqb3lfY2F0JzonXFx1ZDgzZFxcdWRlMzknLFxuICAnam95c3RpY2snOidcXHVkODNkXFx1ZGQ3OScsXG4gICdrYWFiYSc6J1xcdWQ4M2RcXHVkZDRiJyxcbiAgJ2tleSc6J1xcdWQ4M2RcXHVkZDExJyxcbiAgJ2tleWJvYXJkJzonXFx1MjMyOFxcdWZlMGYnLFxuICAna2V5Y2FwX3Rlbic6J1xcdWQ4M2RcXHVkZDFmJyxcbiAgJ2tpY2tfc2Nvb3Rlcic6J1xcdWQ4M2RcXHVkZWY0JyxcbiAgJ2tpbW9ubyc6J1xcdWQ4M2RcXHVkYzU4JyxcbiAgJ2tpc3MnOidcXHVkODNkXFx1ZGM4YicsXG4gICdraXNzaW5nJzonXFx1ZDgzZFxcdWRlMTcnLFxuICAna2lzc2luZ19jYXQnOidcXHVkODNkXFx1ZGUzZCcsXG4gICdraXNzaW5nX2Nsb3NlZF9leWVzJzonXFx1ZDgzZFxcdWRlMWEnLFxuICAna2lzc2luZ19oZWFydCc6J1xcdWQ4M2RcXHVkZTE4JyxcbiAgJ2tpc3Npbmdfc21pbGluZ19leWVzJzonXFx1ZDgzZFxcdWRlMTknLFxuICAna2l3aV9mcnVpdCc6J1xcdWQ4M2VcXHVkZDVkJyxcbiAgJ2tvYWxhJzonXFx1ZDgzZFxcdWRjMjgnLFxuICAna29rbyc6J1xcdWQ4M2NcXHVkZTAxJyxcbiAgJ2xhYmVsJzonXFx1ZDgzY1xcdWRmZjcnLFxuICAnbGFyZ2VfYmx1ZV9jaXJjbGUnOidcXHVkODNkXFx1ZGQzNScsXG4gICdsYXJnZV9ibHVlX2RpYW1vbmQnOidcXHVkODNkXFx1ZGQzNycsXG4gICdsYXJnZV9vcmFuZ2VfZGlhbW9uZCc6J1xcdWQ4M2RcXHVkZDM2JyxcbiAgJ2xhc3RfcXVhcnRlcl9tb29uJzonXFx1ZDgzY1xcdWRmMTcnLFxuICAnbGFzdF9xdWFydGVyX21vb25fd2l0aF9mYWNlJzonXFx1ZDgzY1xcdWRmMWMnLFxuICAnbGF0aW5fY3Jvc3MnOidcXHUyNzFkXFx1ZmUwZicsXG4gICdsYXVnaGluZyc6J1xcdWQ4M2RcXHVkZTA2JyxcbiAgJ2xlYXZlcyc6J1xcdWQ4M2NcXHVkZjQzJyxcbiAgJ2xlZGdlcic6J1xcdWQ4M2RcXHVkY2QyJyxcbiAgJ2xlZnRfbHVnZ2FnZSc6J1xcdWQ4M2RcXHVkZWM1JyxcbiAgJ2xlZnRfcmlnaHRfYXJyb3cnOidcXHUyMTk0XFx1ZmUwZicsXG4gICdsZWZ0d2FyZHNfYXJyb3dfd2l0aF9ob29rJzonXFx1MjFhOVxcdWZlMGYnLFxuICAnbGVtb24nOidcXHVkODNjXFx1ZGY0YicsXG4gICdsZW8nOidcXHUyNjRjXFx1ZmUwZicsXG4gICdsZW9wYXJkJzonXFx1ZDgzZFxcdWRjMDYnLFxuICAnbGV2ZWxfc2xpZGVyJzonXFx1ZDgzY1xcdWRmOWEnLFxuICAnbGlicmEnOidcXHUyNjRlXFx1ZmUwZicsXG4gICdsaWdodF9yYWlsJzonXFx1ZDgzZFxcdWRlODgnLFxuICAnbGluayc6J1xcdWQ4M2RcXHVkZDE3JyxcbiAgJ2xpb24nOidcXHVkODNlXFx1ZGQ4MScsXG4gICdsaXBzJzonXFx1ZDgzZFxcdWRjNDQnLFxuICAnbGlwc3RpY2snOidcXHVkODNkXFx1ZGM4NCcsXG4gICdsaXphcmQnOidcXHVkODNlXFx1ZGQ4ZScsXG4gICdsb2NrJzonXFx1ZDgzZFxcdWRkMTInLFxuICAnbG9ja193aXRoX2lua19wZW4nOidcXHVkODNkXFx1ZGQwZicsXG4gICdsb2xsaXBvcCc6J1xcdWQ4M2NcXHVkZjZkJyxcbiAgJ2xvb3AnOidcXHUyN2JmJyxcbiAgJ2xvdWRfc291bmQnOidcXHVkODNkXFx1ZGQwYScsXG4gICdsb3Vkc3BlYWtlcic6J1xcdWQ4M2RcXHVkY2UyJyxcbiAgJ2xvdmVfaG90ZWwnOidcXHVkODNjXFx1ZGZlOScsXG4gICdsb3ZlX2xldHRlcic6J1xcdWQ4M2RcXHVkYzhjJyxcbiAgJ2xvd19icmlnaHRuZXNzJzonXFx1ZDgzZFxcdWRkMDUnLFxuICAnbHlpbmdfZmFjZSc6J1xcdWQ4M2VcXHVkZDI1JyxcbiAgJ20nOidcXHUyNGMyXFx1ZmUwZicsXG4gICdtYWcnOidcXHVkODNkXFx1ZGQwZCcsXG4gICdtYWdfcmlnaHQnOidcXHVkODNkXFx1ZGQwZScsXG4gICdtYWhqb25nJzonXFx1ZDgzY1xcdWRjMDRcXHVmZTBmJyxcbiAgJ21haWxib3gnOidcXHVkODNkXFx1ZGNlYicsXG4gICdtYWlsYm94X2Nsb3NlZCc6J1xcdWQ4M2RcXHVkY2VhJyxcbiAgJ21haWxib3hfd2l0aF9tYWlsJzonXFx1ZDgzZFxcdWRjZWMnLFxuICAnbWFpbGJveF93aXRoX25vX21haWwnOidcXHVkODNkXFx1ZGNlZCcsXG4gICdtYW4nOidcXHVkODNkXFx1ZGM2OCcsXG4gICdtYW5fYXJ0aXN0JzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2NcXHVkZmE4JyxcbiAgJ21hbl9hc3Ryb25hdXQnOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRlODAnLFxuICAnbWFuX2NhcnR3aGVlbGluZyc6J1xcdWQ4M2VcXHVkZDM4Jnp3ajtcXHUyNjQyXFx1ZmUwZicsXG4gICdtYW5fY29vayc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNjXFx1ZGY3MycsXG4gICdtYW5fZGFuY2luZyc6J1xcdWQ4M2RcXHVkZDdhJyxcbiAgJ21hbl9mYWNlcGFsbWluZyc6J1xcdWQ4M2VcXHVkZDI2Jnp3ajtcXHUyNjQyXFx1ZmUwZicsXG4gICdtYW5fZmFjdG9yeV93b3JrZXInOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzY1xcdWRmZWQnLFxuICAnbWFuX2Zhcm1lcic6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHVkODNjXFx1ZGYzZScsXG4gICdtYW5fZmlyZWZpZ2h0ZXInOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRlOTInLFxuICAnbWFuX2hlYWx0aF93b3JrZXInOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1MjY5NVxcdWZlMGYnLFxuICAnbWFuX2luX3R1eGVkbyc6J1xcdWQ4M2VcXHVkZDM1JyxcbiAgJ21hbl9qdWRnZSc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHUyNjk2XFx1ZmUwZicsXG4gICdtYW5fanVnZ2xpbmcnOidcXHVkODNlXFx1ZGQzOSZ6d2o7XFx1MjY0MlxcdWZlMGYnLFxuICAnbWFuX21lY2hhbmljJzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkZDI3JyxcbiAgJ21hbl9vZmZpY2Vfd29ya2VyJzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2RcXHVkY2JjJyxcbiAgJ21hbl9waWxvdCc6J1xcdWQ4M2RcXHVkYzY4Jnp3ajtcXHUyNzA4XFx1ZmUwZicsXG4gICdtYW5fcGxheWluZ19oYW5kYmFsbCc6J1xcdWQ4M2VcXHVkZDNlJnp3ajtcXHUyNjQyXFx1ZmUwZicsXG4gICdtYW5fcGxheWluZ193YXRlcl9wb2xvJzonXFx1ZDgzZVxcdWRkM2QmendqO1xcdTI2NDJcXHVmZTBmJyxcbiAgJ21hbl9zY2llbnRpc3QnOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRkMmMnLFxuICAnbWFuX3NocnVnZ2luZyc6J1xcdWQ4M2VcXHVkZDM3Jnp3ajtcXHUyNjQyXFx1ZmUwZicsXG4gICdtYW5fc2luZ2VyJzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2NcXHVkZmE0JyxcbiAgJ21hbl9zdHVkZW50JzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2NcXHVkZjkzJyxcbiAgJ21hbl90ZWFjaGVyJzonXFx1ZDgzZFxcdWRjNjgmendqO1xcdWQ4M2NcXHVkZmViJyxcbiAgJ21hbl90ZWNobm9sb2dpc3QnOidcXHVkODNkXFx1ZGM2OCZ6d2o7XFx1ZDgzZFxcdWRjYmInLFxuICAnbWFuX3dpdGhfZ3VhX3BpX21hbyc6J1xcdWQ4M2RcXHVkYzcyJyxcbiAgJ21hbl93aXRoX3R1cmJhbic6J1xcdWQ4M2RcXHVkYzczJyxcbiAgJ3RhbmdlcmluZSc6J1xcdWQ4M2NcXHVkZjRhJyxcbiAgJ21hbnNfc2hvZSc6J1xcdWQ4M2RcXHVkYzVlJyxcbiAgJ21hbnRlbHBpZWNlX2Nsb2NrJzonXFx1ZDgzZFxcdWRkNzAnLFxuICAnbWFwbGVfbGVhZic6J1xcdWQ4M2NcXHVkZjQxJyxcbiAgJ21hcnRpYWxfYXJ0c191bmlmb3JtJzonXFx1ZDgzZVxcdWRkNGInLFxuICAnbWFzayc6J1xcdWQ4M2RcXHVkZTM3JyxcbiAgJ21hc3NhZ2Vfd29tYW4nOidcXHVkODNkXFx1ZGM4NicsXG4gICdtYXNzYWdlX21hbic6J1xcdWQ4M2RcXHVkYzg2Jnp3ajtcXHUyNjQyXFx1ZmUwZicsXG4gICdtZWF0X29uX2JvbmUnOidcXHVkODNjXFx1ZGY1NicsXG4gICdtZWRhbF9taWxpdGFyeSc6J1xcdWQ4M2NcXHVkZjk2JyxcbiAgJ21lZGFsX3Nwb3J0cyc6J1xcdWQ4M2NcXHVkZmM1JyxcbiAgJ21lZ2EnOidcXHVkODNkXFx1ZGNlMycsXG4gICdtZWxvbic6J1xcdWQ4M2NcXHVkZjQ4JyxcbiAgJ21lbW8nOidcXHVkODNkXFx1ZGNkZCcsXG4gICdtZW5fd3Jlc3RsaW5nJzonXFx1ZDgzZVxcdWRkM2MmendqO1xcdTI2NDJcXHVmZTBmJyxcbiAgJ21lbm9yYWgnOidcXHVkODNkXFx1ZGQ0ZScsXG4gICdtZW5zJzonXFx1ZDgzZFxcdWRlYjknLFxuICAnbWV0YWwnOidcXHVkODNlXFx1ZGQxOCcsXG4gICdtZXRybyc6J1xcdWQ4M2RcXHVkZTg3JyxcbiAgJ21pY3JvcGhvbmUnOidcXHVkODNjXFx1ZGZhNCcsXG4gICdtaWNyb3Njb3BlJzonXFx1ZDgzZFxcdWRkMmMnLFxuICAnbWlsa19nbGFzcyc6J1xcdWQ4M2VcXHVkZDViJyxcbiAgJ21pbGt5X3dheSc6J1xcdWQ4M2NcXHVkZjBjJyxcbiAgJ21pbmlidXMnOidcXHVkODNkXFx1ZGU5MCcsXG4gICdtaW5pZGlzYyc6J1xcdWQ4M2RcXHVkY2JkJyxcbiAgJ21vYmlsZV9waG9uZV9vZmYnOidcXHVkODNkXFx1ZGNmNCcsXG4gICdtb25leV9tb3V0aF9mYWNlJzonXFx1ZDgzZVxcdWRkMTEnLFxuICAnbW9uZXlfd2l0aF93aW5ncyc6J1xcdWQ4M2RcXHVkY2I4JyxcbiAgJ21vbmV5YmFnJzonXFx1ZDgzZFxcdWRjYjAnLFxuICAnbW9ua2V5JzonXFx1ZDgzZFxcdWRjMTInLFxuICAnbW9ua2V5X2ZhY2UnOidcXHVkODNkXFx1ZGMzNScsXG4gICdtb25vcmFpbCc6J1xcdWQ4M2RcXHVkZTlkJyxcbiAgJ21vb24nOidcXHVkODNjXFx1ZGYxNCcsXG4gICdtb3J0YXJfYm9hcmQnOidcXHVkODNjXFx1ZGY5MycsXG4gICdtb3NxdWUnOidcXHVkODNkXFx1ZGQ0YycsXG4gICdtb3Rvcl9ib2F0JzonXFx1ZDgzZFxcdWRlZTUnLFxuICAnbW90b3Jfc2Nvb3Rlcic6J1xcdWQ4M2RcXHVkZWY1JyxcbiAgJ21vdG9yY3ljbGUnOidcXHVkODNjXFx1ZGZjZCcsXG4gICdtb3RvcndheSc6J1xcdWQ4M2RcXHVkZWUzJyxcbiAgJ21vdW50X2Z1amknOidcXHVkODNkXFx1ZGRmYicsXG4gICdtb3VudGFpbic6J1xcdTI2ZjAnLFxuICAnbW91bnRhaW5fYmlraW5nX21hbic6J1xcdWQ4M2RcXHVkZWI1JyxcbiAgJ21vdW50YWluX2Jpa2luZ193b21hbic6J1xcdWQ4M2RcXHVkZWI1Jnp3ajtcXHUyNjQwXFx1ZmUwZicsXG4gICdtb3VudGFpbl9jYWJsZXdheSc6J1xcdWQ4M2RcXHVkZWEwJyxcbiAgJ21vdW50YWluX3JhaWx3YXknOidcXHVkODNkXFx1ZGU5ZScsXG4gICdtb3VudGFpbl9zbm93JzonXFx1ZDgzY1xcdWRmZDQnLFxuICAnbW91c2UnOidcXHVkODNkXFx1ZGMyZCcsXG4gICdtb3VzZTInOidcXHVkODNkXFx1ZGMwMScsXG4gICdtb3ZpZV9jYW1lcmEnOidcXHVkODNjXFx1ZGZhNScsXG4gICdtb3lhaSc6J1xcdWQ4M2RcXHVkZGZmJyxcbiAgJ21yc19jbGF1cyc6J1xcdWQ4M2VcXHVkZDM2JyxcbiAgJ211c2NsZSc6J1xcdWQ4M2RcXHVkY2FhJyxcbiAgJ211c2hyb29tJzonXFx1ZDgzY1xcdWRmNDQnLFxuICAnbXVzaWNhbF9rZXlib2FyZCc6J1xcdWQ4M2NcXHVkZmI5JyxcbiAgJ211c2ljYWxfbm90ZSc6J1xcdWQ4M2NcXHVkZmI1JyxcbiAgJ211c2ljYWxfc2NvcmUnOidcXHVkODNjXFx1ZGZiYycsXG4gICdtdXRlJzonXFx1ZDgzZFxcdWRkMDcnLFxuICAnbmFpbF9jYXJlJzonXFx1ZDgzZFxcdWRjODUnLFxuICAnbmFtZV9iYWRnZSc6J1xcdWQ4M2RcXHVkY2RiJyxcbiAgJ25hdGlvbmFsX3BhcmsnOidcXHVkODNjXFx1ZGZkZScsXG4gICduYXVzZWF0ZWRfZmFjZSc6J1xcdWQ4M2VcXHVkZDIyJyxcbiAgJ25lY2t0aWUnOidcXHVkODNkXFx1ZGM1NCcsXG4gICduZWdhdGl2ZV9zcXVhcmVkX2Nyb3NzX21hcmsnOidcXHUyNzRlJyxcbiAgJ25lcmRfZmFjZSc6J1xcdWQ4M2VcXHVkZDEzJyxcbiAgJ25ldXRyYWxfZmFjZSc6J1xcdWQ4M2RcXHVkZTEwJyxcbiAgJ25ldyc6J1xcdWQ4M2NcXHVkZDk1JyxcbiAgJ25ld19tb29uJzonXFx1ZDgzY1xcdWRmMTEnLFxuICAnbmV3X21vb25fd2l0aF9mYWNlJzonXFx1ZDgzY1xcdWRmMWEnLFxuICAnbmV3c3BhcGVyJzonXFx1ZDgzZFxcdWRjZjAnLFxuICAnbmV3c3BhcGVyX3JvbGwnOidcXHVkODNkXFx1ZGRkZScsXG4gICduZXh0X3RyYWNrX2J1dHRvbic6J1xcdTIzZWQnLFxuICAnbmcnOidcXHVkODNjXFx1ZGQ5NicsXG4gICdub19nb29kX21hbic6J1xcdWQ4M2RcXHVkZTQ1Jnp3ajtcXHUyNjQyXFx1ZmUwZicsXG4gICdub19nb29kX3dvbWFuJzonXFx1ZDgzZFxcdWRlNDUnLFxuICAnbmlnaHRfd2l0aF9zdGFycyc6J1xcdWQ4M2NcXHVkZjAzJyxcbiAgJ25vX2JlbGwnOidcXHVkODNkXFx1ZGQxNScsXG4gICdub19iaWN5Y2xlcyc6J1xcdWQ4M2RcXHVkZWIzJyxcbiAgJ25vX2VudHJ5JzonXFx1MjZkNFxcdWZlMGYnLFxuICAnbm9fZW50cnlfc2lnbic6J1xcdWQ4M2RcXHVkZWFiJyxcbiAgJ25vX21vYmlsZV9waG9uZXMnOidcXHVkODNkXFx1ZGNmNScsXG4gICdub19tb3V0aCc6J1xcdWQ4M2RcXHVkZTM2JyxcbiAgJ25vX3BlZGVzdHJpYW5zJzonXFx1ZDgzZFxcdWRlYjcnLFxuICAnbm9fc21va2luZyc6J1xcdWQ4M2RcXHVkZWFkJyxcbiAgJ25vbi1wb3RhYmxlX3dhdGVyJzonXFx1ZDgzZFxcdWRlYjEnLFxuICAnbm9zZSc6J1xcdWQ4M2RcXHVkYzQzJyxcbiAgJ25vdGVib29rJzonXFx1ZDgzZFxcdWRjZDMnLFxuICAnbm90ZWJvb2tfd2l0aF9kZWNvcmF0aXZlX2NvdmVyJzonXFx1ZDgzZFxcdWRjZDQnLFxuICAnbm90ZXMnOidcXHVkODNjXFx1ZGZiNicsXG4gICdudXRfYW5kX2JvbHQnOidcXHVkODNkXFx1ZGQyOScsXG4gICdvJzonXFx1MmI1NVxcdWZlMGYnLFxuICAnbzInOidcXHVkODNjXFx1ZGQ3ZVxcdWZlMGYnLFxuICAnb2NlYW4nOidcXHVkODNjXFx1ZGYwYScsXG4gICdvY3RvcHVzJzonXFx1ZDgzZFxcdWRjMTknLFxuICAnb2Rlbic6J1xcdWQ4M2NcXHVkZjYyJyxcbiAgJ29mZmljZSc6J1xcdWQ4M2NcXHVkZmUyJyxcbiAgJ29pbF9kcnVtJzonXFx1ZDgzZFxcdWRlZTInLFxuICAnb2snOidcXHVkODNjXFx1ZGQ5NycsXG4gICdva19oYW5kJzonXFx1ZDgzZFxcdWRjNGMnLFxuICAnb2tfbWFuJzonXFx1ZDgzZFxcdWRlNDYmendqO1xcdTI2NDJcXHVmZTBmJyxcbiAgJ29rX3dvbWFuJzonXFx1ZDgzZFxcdWRlNDYnLFxuICAnb2xkX2tleSc6J1xcdWQ4M2RcXHVkZGRkJyxcbiAgJ29sZGVyX21hbic6J1xcdWQ4M2RcXHVkYzc0JyxcbiAgJ29sZGVyX3dvbWFuJzonXFx1ZDgzZFxcdWRjNzUnLFxuICAnb20nOidcXHVkODNkXFx1ZGQ0OScsXG4gICdvbic6J1xcdWQ4M2RcXHVkZDFiJyxcbiAgJ29uY29taW5nX2F1dG9tb2JpbGUnOidcXHVkODNkXFx1ZGU5OCcsXG4gICdvbmNvbWluZ19idXMnOidcXHVkODNkXFx1ZGU4ZCcsXG4gICdvbmNvbWluZ19wb2xpY2VfY2FyJzonXFx1ZDgzZFxcdWRlOTQnLFxuICAnb25jb21pbmdfdGF4aSc6J1xcdWQ4M2RcXHVkZTk2JyxcbiAgJ29wZW5fZmlsZV9mb2xkZXInOidcXHVkODNkXFx1ZGNjMicsXG4gICdvcGVuX2hhbmRzJzonXFx1ZDgzZFxcdWRjNTAnLFxuICAnb3Blbl9tb3V0aCc6J1xcdWQ4M2RcXHVkZTJlJyxcbiAgJ29wZW5fdW1icmVsbGEnOidcXHUyNjAyXFx1ZmUwZicsXG4gICdvcGhpdWNodXMnOidcXHUyNmNlJyxcbiAgJ29yYW5nZV9ib29rJzonXFx1ZDgzZFxcdWRjZDknLFxuICAnb3J0aG9kb3hfY3Jvc3MnOidcXHUyNjI2XFx1ZmUwZicsXG4gICdvdXRib3hfdHJheSc6J1xcdWQ4M2RcXHVkY2U0JyxcbiAgJ293bCc6J1xcdWQ4M2VcXHVkZDg5JyxcbiAgJ294JzonXFx1ZDgzZFxcdWRjMDInLFxuICAncGFja2FnZSc6J1xcdWQ4M2RcXHVkY2U2JyxcbiAgJ3BhZ2VfZmFjaW5nX3VwJzonXFx1ZDgzZFxcdWRjYzQnLFxuICAncGFnZV93aXRoX2N1cmwnOidcXHVkODNkXFx1ZGNjMycsXG4gICdwYWdlcic6J1xcdWQ4M2RcXHVkY2RmJyxcbiAgJ3BhaW50YnJ1c2gnOidcXHVkODNkXFx1ZGQ4YycsXG4gICdwYWxtX3RyZWUnOidcXHVkODNjXFx1ZGYzNCcsXG4gICdwYW5jYWtlcyc6J1xcdWQ4M2VcXHVkZDVlJyxcbiAgJ3BhbmRhX2ZhY2UnOidcXHVkODNkXFx1ZGMzYycsXG4gICdwYXBlcmNsaXAnOidcXHVkODNkXFx1ZGNjZScsXG4gICdwYXBlcmNsaXBzJzonXFx1ZDgzZFxcdWRkODcnLFxuICAncGFyYXNvbF9vbl9ncm91bmQnOidcXHUyNmYxJyxcbiAgJ3BhcmtpbmcnOidcXHVkODNjXFx1ZGQ3ZlxcdWZlMGYnLFxuICAncGFydF9hbHRlcm5hdGlvbl9tYXJrJzonXFx1MzAzZFxcdWZlMGYnLFxuICAncGFydGx5X3N1bm55JzonXFx1MjZjNVxcdWZlMGYnLFxuICAncGFzc2VuZ2VyX3NoaXAnOidcXHVkODNkXFx1ZGVmMycsXG4gICdwYXNzcG9ydF9jb250cm9sJzonXFx1ZDgzZFxcdWRlYzInLFxuICAncGF1c2VfYnV0dG9uJzonXFx1MjNmOCcsXG4gICdwZWFjZV9zeW1ib2wnOidcXHUyNjJlXFx1ZmUwZicsXG4gICdwZWFjaCc6J1xcdWQ4M2NcXHVkZjUxJyxcbiAgJ3BlYW51dHMnOidcXHVkODNlXFx1ZGQ1YycsXG4gICdwZWFyJzonXFx1ZDgzY1xcdWRmNTAnLFxuICAncGVuJzonXFx1ZDgzZFxcdWRkOGEnLFxuICAncGVuY2lsMic6J1xcdTI3MGZcXHVmZTBmJyxcbiAgJ3Blbmd1aW4nOidcXHVkODNkXFx1ZGMyNycsXG4gICdwZW5zaXZlJzonXFx1ZDgzZFxcdWRlMTQnLFxuICAncGVyZm9ybWluZ19hcnRzJzonXFx1ZDgzY1xcdWRmYWQnLFxuICAncGVyc2V2ZXJlJzonXFx1ZDgzZFxcdWRlMjMnLFxuICAncGVyc29uX2ZlbmNpbmcnOidcXHVkODNlXFx1ZGQzYScsXG4gICdwb3V0aW5nX3dvbWFuJzonXFx1ZDgzZFxcdWRlNGUnLFxuICAncGhvbmUnOidcXHUyNjBlXFx1ZmUwZicsXG4gICdwaWNrJzonXFx1MjZjZicsXG4gICdwaWcnOidcXHVkODNkXFx1ZGMzNycsXG4gICdwaWcyJzonXFx1ZDgzZFxcdWRjMTYnLFxuICAncGlnX25vc2UnOidcXHVkODNkXFx1ZGMzZCcsXG4gICdwaWxsJzonXFx1ZDgzZFxcdWRjOGEnLFxuICAncGluZWFwcGxlJzonXFx1ZDgzY1xcdWRmNGQnLFxuICAncGluZ19wb25nJzonXFx1ZDgzY1xcdWRmZDMnLFxuICAncGlzY2VzJzonXFx1MjY1M1xcdWZlMGYnLFxuICAncGl6emEnOidcXHVkODNjXFx1ZGY1NScsXG4gICdwbGFjZV9vZl93b3JzaGlwJzonXFx1ZDgzZFxcdWRlZDAnLFxuICAncGxhdGVfd2l0aF9jdXRsZXJ5JzonXFx1ZDgzY1xcdWRmN2QnLFxuICAncGxheV9vcl9wYXVzZV9idXR0b24nOidcXHUyM2VmJyxcbiAgJ3BvaW50X2Rvd24nOidcXHVkODNkXFx1ZGM0NycsXG4gICdwb2ludF9sZWZ0JzonXFx1ZDgzZFxcdWRjNDgnLFxuICAncG9pbnRfcmlnaHQnOidcXHVkODNkXFx1ZGM0OScsXG4gICdwb2ludF91cCc6J1xcdTI2MWRcXHVmZTBmJyxcbiAgJ3BvaW50X3VwXzInOidcXHVkODNkXFx1ZGM0NicsXG4gICdwb2xpY2VfY2FyJzonXFx1ZDgzZFxcdWRlOTMnLFxuICAncG9saWNld29tYW4nOidcXHVkODNkXFx1ZGM2ZSZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAncG9vZGxlJzonXFx1ZDgzZFxcdWRjMjknLFxuICAncG9wY29ybic6J1xcdWQ4M2NcXHVkZjdmJyxcbiAgJ3Bvc3Rfb2ZmaWNlJzonXFx1ZDgzY1xcdWRmZTMnLFxuICAncG9zdGFsX2hvcm4nOidcXHVkODNkXFx1ZGNlZicsXG4gICdwb3N0Ym94JzonXFx1ZDgzZFxcdWRjZWUnLFxuICAncG90YWJsZV93YXRlcic6J1xcdWQ4M2RcXHVkZWIwJyxcbiAgJ3BvdGF0byc6J1xcdWQ4M2VcXHVkZDU0JyxcbiAgJ3BvdWNoJzonXFx1ZDgzZFxcdWRjNWQnLFxuICAncG91bHRyeV9sZWcnOidcXHVkODNjXFx1ZGY1NycsXG4gICdwb3VuZCc6J1xcdWQ4M2RcXHVkY2I3JyxcbiAgJ3JhZ2UnOidcXHVkODNkXFx1ZGUyMScsXG4gICdwb3V0aW5nX2NhdCc6J1xcdWQ4M2RcXHVkZTNlJyxcbiAgJ3BvdXRpbmdfbWFuJzonXFx1ZDgzZFxcdWRlNGUmendqO1xcdTI2NDJcXHVmZTBmJyxcbiAgJ3ByYXknOidcXHVkODNkXFx1ZGU0ZicsXG4gICdwcmF5ZXJfYmVhZHMnOidcXHVkODNkXFx1ZGNmZicsXG4gICdwcmVnbmFudF93b21hbic6J1xcdWQ4M2VcXHVkZDMwJyxcbiAgJ3ByZXZpb3VzX3RyYWNrX2J1dHRvbic6J1xcdTIzZWUnLFxuICAncHJpbmNlJzonXFx1ZDgzZVxcdWRkMzQnLFxuICAncHJpbmNlc3MnOidcXHVkODNkXFx1ZGM3OCcsXG4gICdwcmludGVyJzonXFx1ZDgzZFxcdWRkYTgnLFxuICAncHVycGxlX2hlYXJ0JzonXFx1ZDgzZFxcdWRjOWMnLFxuICAncHVyc2UnOidcXHVkODNkXFx1ZGM1YicsXG4gICdwdXNocGluJzonXFx1ZDgzZFxcdWRjY2MnLFxuICAncHV0X2xpdHRlcl9pbl9pdHNfcGxhY2UnOidcXHVkODNkXFx1ZGVhZScsXG4gICdxdWVzdGlvbic6J1xcdTI3NTMnLFxuICAncmFiYml0JzonXFx1ZDgzZFxcdWRjMzAnLFxuICAncmFiYml0Mic6J1xcdWQ4M2RcXHVkYzA3JyxcbiAgJ3JhY2Vob3JzZSc6J1xcdWQ4M2RcXHVkYzBlJyxcbiAgJ3JhY2luZ19jYXInOidcXHVkODNjXFx1ZGZjZScsXG4gICdyYWRpbyc6J1xcdWQ4M2RcXHVkY2ZiJyxcbiAgJ3JhZGlvX2J1dHRvbic6J1xcdWQ4M2RcXHVkZDE4JyxcbiAgJ3JhZGlvYWN0aXZlJzonXFx1MjYyMlxcdWZlMGYnLFxuICAncmFpbHdheV9jYXInOidcXHVkODNkXFx1ZGU4MycsXG4gICdyYWlsd2F5X3RyYWNrJzonXFx1ZDgzZFxcdWRlZTQnLFxuICAncmFpbmJvdyc6J1xcdWQ4M2NcXHVkZjA4JyxcbiAgJ3JhaW5ib3dfZmxhZyc6J1xcdWQ4M2NcXHVkZmYzXFx1ZmUwZiZ6d2o7XFx1ZDgzY1xcdWRmMDgnLFxuICAncmFpc2VkX2JhY2tfb2ZfaGFuZCc6J1xcdWQ4M2VcXHVkZDFhJyxcbiAgJ3JhaXNlZF9oYW5kX3dpdGhfZmluZ2Vyc19zcGxheWVkJzonXFx1ZDgzZFxcdWRkOTAnLFxuICAncmFpc2VkX2hhbmRzJzonXFx1ZDgzZFxcdWRlNGMnLFxuICAncmFpc2luZ19oYW5kX3dvbWFuJzonXFx1ZDgzZFxcdWRlNGInLFxuICAncmFpc2luZ19oYW5kX21hbic6J1xcdWQ4M2RcXHVkZTRiJnp3ajtcXHUyNjQyXFx1ZmUwZicsXG4gICdyYW0nOidcXHVkODNkXFx1ZGMwZicsXG4gICdyYW1lbic6J1xcdWQ4M2NcXHVkZjVjJyxcbiAgJ3JhdCc6J1xcdWQ4M2RcXHVkYzAwJyxcbiAgJ3JlY29yZF9idXR0b24nOidcXHUyM2ZhJyxcbiAgJ3JlY3ljbGUnOidcXHUyNjdiXFx1ZmUwZicsXG4gICdyZWRfY2lyY2xlJzonXFx1ZDgzZFxcdWRkMzQnLFxuICAncmVnaXN0ZXJlZCc6J1xcdTAwYWVcXHVmZTBmJyxcbiAgJ3JlbGF4ZWQnOidcXHUyNjNhXFx1ZmUwZicsXG4gICdyZWxpZXZlZCc6J1xcdWQ4M2RcXHVkZTBjJyxcbiAgJ3JlbWluZGVyX3JpYmJvbic6J1xcdWQ4M2NcXHVkZjk3JyxcbiAgJ3JlcGVhdCc6J1xcdWQ4M2RcXHVkZDAxJyxcbiAgJ3JlcGVhdF9vbmUnOidcXHVkODNkXFx1ZGQwMicsXG4gICdyZXNjdWVfd29ya2VyX2hlbG1ldCc6J1xcdTI2ZDEnLFxuICAncmVzdHJvb20nOidcXHVkODNkXFx1ZGViYicsXG4gICdyZXZvbHZpbmdfaGVhcnRzJzonXFx1ZDgzZFxcdWRjOWUnLFxuICAncmV3aW5kJzonXFx1MjNlYScsXG4gICdyaGlub2Nlcm9zJzonXFx1ZDgzZVxcdWRkOGYnLFxuICAncmliYm9uJzonXFx1ZDgzY1xcdWRmODAnLFxuICAncmljZSc6J1xcdWQ4M2NcXHVkZjVhJyxcbiAgJ3JpY2VfYmFsbCc6J1xcdWQ4M2NcXHVkZjU5JyxcbiAgJ3JpY2VfY3JhY2tlcic6J1xcdWQ4M2NcXHVkZjU4JyxcbiAgJ3JpY2Vfc2NlbmUnOidcXHVkODNjXFx1ZGY5MScsXG4gICdyaWdodF9hbmdlcl9idWJibGUnOidcXHVkODNkXFx1ZGRlZicsXG4gICdyaW5nJzonXFx1ZDgzZFxcdWRjOGQnLFxuICAncm9ib3QnOidcXHVkODNlXFx1ZGQxNicsXG4gICdyb2NrZXQnOidcXHVkODNkXFx1ZGU4MCcsXG4gICdyb2ZsJzonXFx1ZDgzZVxcdWRkMjMnLFxuICAncm9sbF9leWVzJzonXFx1ZDgzZFxcdWRlNDQnLFxuICAncm9sbGVyX2NvYXN0ZXInOidcXHVkODNjXFx1ZGZhMicsXG4gICdyb29zdGVyJzonXFx1ZDgzZFxcdWRjMTMnLFxuICAncm9zZSc6J1xcdWQ4M2NcXHVkZjM5JyxcbiAgJ3Jvc2V0dGUnOidcXHVkODNjXFx1ZGZmNScsXG4gICdyb3RhdGluZ19saWdodCc6J1xcdWQ4M2RcXHVkZWE4JyxcbiAgJ3JvdW5kX3B1c2hwaW4nOidcXHVkODNkXFx1ZGNjZCcsXG4gICdyb3dpbmdfbWFuJzonXFx1ZDgzZFxcdWRlYTMnLFxuICAncm93aW5nX3dvbWFuJzonXFx1ZDgzZFxcdWRlYTMmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ3J1Z2J5X2Zvb3RiYWxsJzonXFx1ZDgzY1xcdWRmYzknLFxuICAncnVubmluZ19tYW4nOidcXHVkODNjXFx1ZGZjMycsXG4gICdydW5uaW5nX3NoaXJ0X3dpdGhfc2FzaCc6J1xcdWQ4M2NcXHVkZmJkJyxcbiAgJ3J1bm5pbmdfd29tYW4nOidcXHVkODNjXFx1ZGZjMyZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnc2EnOidcXHVkODNjXFx1ZGUwMlxcdWZlMGYnLFxuICAnc2FnaXR0YXJpdXMnOidcXHUyNjUwXFx1ZmUwZicsXG4gICdzYWtlJzonXFx1ZDgzY1xcdWRmNzYnLFxuICAnc2FuZGFsJzonXFx1ZDgzZFxcdWRjNjEnLFxuICAnc2FudGEnOidcXHVkODNjXFx1ZGY4NScsXG4gICdzYXRlbGxpdGUnOidcXHVkODNkXFx1ZGNlMScsXG4gICdzYXhvcGhvbmUnOidcXHVkODNjXFx1ZGZiNycsXG4gICdzY2hvb2wnOidcXHVkODNjXFx1ZGZlYicsXG4gICdzY2hvb2xfc2F0Y2hlbCc6J1xcdWQ4M2NcXHVkZjkyJyxcbiAgJ3NjaXNzb3JzJzonXFx1MjcwMlxcdWZlMGYnLFxuICAnc2NvcnBpb24nOidcXHVkODNlXFx1ZGQ4MicsXG4gICdzY29ycGl1cyc6J1xcdTI2NGZcXHVmZTBmJyxcbiAgJ3NjcmVhbSc6J1xcdWQ4M2RcXHVkZTMxJyxcbiAgJ3NjcmVhbV9jYXQnOidcXHVkODNkXFx1ZGU0MCcsXG4gICdzY3JvbGwnOidcXHVkODNkXFx1ZGNkYycsXG4gICdzZWF0JzonXFx1ZDgzZFxcdWRjYmEnLFxuICAnc2VjcmV0JzonXFx1MzI5OVxcdWZlMGYnLFxuICAnc2VlX25vX2V2aWwnOidcXHVkODNkXFx1ZGU0OCcsXG4gICdzZWVkbGluZyc6J1xcdWQ4M2NcXHVkZjMxJyxcbiAgJ3NlbGZpZSc6J1xcdWQ4M2VcXHVkZDMzJyxcbiAgJ3NoYWxsb3dfcGFuX29mX2Zvb2QnOidcXHVkODNlXFx1ZGQ1OCcsXG4gICdzaGFtcm9jayc6J1xcdTI2MThcXHVmZTBmJyxcbiAgJ3NoYXJrJzonXFx1ZDgzZVxcdWRkODgnLFxuICAnc2hhdmVkX2ljZSc6J1xcdWQ4M2NcXHVkZjY3JyxcbiAgJ3NoZWVwJzonXFx1ZDgzZFxcdWRjMTEnLFxuICAnc2hlbGwnOidcXHVkODNkXFx1ZGMxYScsXG4gICdzaGllbGQnOidcXHVkODNkXFx1ZGVlMScsXG4gICdzaGludG9fc2hyaW5lJzonXFx1MjZlOScsXG4gICdzaGlwJzonXFx1ZDgzZFxcdWRlYTInLFxuICAnc2hpcnQnOidcXHVkODNkXFx1ZGM1NScsXG4gICdzaG9wcGluZyc6J1xcdWQ4M2RcXHVkZWNkJyxcbiAgJ3Nob3BwaW5nX2NhcnQnOidcXHVkODNkXFx1ZGVkMicsXG4gICdzaG93ZXInOidcXHVkODNkXFx1ZGViZicsXG4gICdzaHJpbXAnOidcXHVkODNlXFx1ZGQ5MCcsXG4gICdzaWduYWxfc3RyZW5ndGgnOidcXHVkODNkXFx1ZGNmNicsXG4gICdzaXhfcG9pbnRlZF9zdGFyJzonXFx1ZDgzZFxcdWRkMmYnLFxuICAnc2tpJzonXFx1ZDgzY1xcdWRmYmYnLFxuICAnc2tpZXInOidcXHUyNmY3JyxcbiAgJ3NrdWxsJzonXFx1ZDgzZFxcdWRjODAnLFxuICAnc2t1bGxfYW5kX2Nyb3NzYm9uZXMnOidcXHUyNjIwXFx1ZmUwZicsXG4gICdzbGVlcGluZyc6J1xcdWQ4M2RcXHVkZTM0JyxcbiAgJ3NsZWVwaW5nX2JlZCc6J1xcdWQ4M2RcXHVkZWNjJyxcbiAgJ3NsZWVweSc6J1xcdWQ4M2RcXHVkZTJhJyxcbiAgJ3NsaWdodGx5X2Zyb3duaW5nX2ZhY2UnOidcXHVkODNkXFx1ZGU0MScsXG4gICdzbGlnaHRseV9zbWlsaW5nX2ZhY2UnOidcXHVkODNkXFx1ZGU0MicsXG4gICdzbG90X21hY2hpbmUnOidcXHVkODNjXFx1ZGZiMCcsXG4gICdzbWFsbF9haXJwbGFuZSc6J1xcdWQ4M2RcXHVkZWU5JyxcbiAgJ3NtYWxsX2JsdWVfZGlhbW9uZCc6J1xcdWQ4M2RcXHVkZDM5JyxcbiAgJ3NtYWxsX29yYW5nZV9kaWFtb25kJzonXFx1ZDgzZFxcdWRkMzgnLFxuICAnc21hbGxfcmVkX3RyaWFuZ2xlJzonXFx1ZDgzZFxcdWRkM2EnLFxuICAnc21hbGxfcmVkX3RyaWFuZ2xlX2Rvd24nOidcXHVkODNkXFx1ZGQzYicsXG4gICdzbWlsZSc6J1xcdWQ4M2RcXHVkZTA0JyxcbiAgJ3NtaWxlX2NhdCc6J1xcdWQ4M2RcXHVkZTM4JyxcbiAgJ3NtaWxleSc6J1xcdWQ4M2RcXHVkZTAzJyxcbiAgJ3NtaWxleV9jYXQnOidcXHVkODNkXFx1ZGUzYScsXG4gICdzbWlsaW5nX2ltcCc6J1xcdWQ4M2RcXHVkZTA4JyxcbiAgJ3NtaXJrJzonXFx1ZDgzZFxcdWRlMGYnLFxuICAnc21pcmtfY2F0JzonXFx1ZDgzZFxcdWRlM2MnLFxuICAnc21va2luZyc6J1xcdWQ4M2RcXHVkZWFjJyxcbiAgJ3NuYWlsJzonXFx1ZDgzZFxcdWRjMGMnLFxuICAnc25ha2UnOidcXHVkODNkXFx1ZGMwZCcsXG4gICdzbmVlemluZ19mYWNlJzonXFx1ZDgzZVxcdWRkMjcnLFxuICAnc25vd2JvYXJkZXInOidcXHVkODNjXFx1ZGZjMicsXG4gICdzbm93Zmxha2UnOidcXHUyNzQ0XFx1ZmUwZicsXG4gICdzbm93bWFuJzonXFx1MjZjNFxcdWZlMGYnLFxuICAnc25vd21hbl93aXRoX3Nub3cnOidcXHUyNjAzXFx1ZmUwZicsXG4gICdzb2InOidcXHVkODNkXFx1ZGUyZCcsXG4gICdzb2NjZXInOidcXHUyNmJkXFx1ZmUwZicsXG4gICdzb29uJzonXFx1ZDgzZFxcdWRkMWMnLFxuICAnc29zJzonXFx1ZDgzY1xcdWRkOTgnLFxuICAnc291bmQnOidcXHVkODNkXFx1ZGQwOScsXG4gICdzcGFjZV9pbnZhZGVyJzonXFx1ZDgzZFxcdWRjN2UnLFxuICAnc3BhZGVzJzonXFx1MjY2MFxcdWZlMGYnLFxuICAnc3BhZ2hldHRpJzonXFx1ZDgzY1xcdWRmNWQnLFxuICAnc3BhcmtsZSc6J1xcdTI3NDdcXHVmZTBmJyxcbiAgJ3NwYXJrbGVyJzonXFx1ZDgzY1xcdWRmODcnLFxuICAnc3BhcmtsZXMnOidcXHUyNzI4JyxcbiAgJ3NwYXJrbGluZ19oZWFydCc6J1xcdWQ4M2RcXHVkYzk2JyxcbiAgJ3NwZWFrX25vX2V2aWwnOidcXHVkODNkXFx1ZGU0YScsXG4gICdzcGVha2VyJzonXFx1ZDgzZFxcdWRkMDgnLFxuICAnc3BlYWtpbmdfaGVhZCc6J1xcdWQ4M2RcXHVkZGUzJyxcbiAgJ3NwZWVjaF9iYWxsb29uJzonXFx1ZDgzZFxcdWRjYWMnLFxuICAnc3BlZWRib2F0JzonXFx1ZDgzZFxcdWRlYTQnLFxuICAnc3BpZGVyJzonXFx1ZDgzZFxcdWRkNzcnLFxuICAnc3BpZGVyX3dlYic6J1xcdWQ4M2RcXHVkZDc4JyxcbiAgJ3NwaXJhbF9jYWxlbmRhcic6J1xcdWQ4M2RcXHVkZGQzJyxcbiAgJ3NwaXJhbF9ub3RlcGFkJzonXFx1ZDgzZFxcdWRkZDInLFxuICAnc3Bvb24nOidcXHVkODNlXFx1ZGQ0NCcsXG4gICdzcXVpZCc6J1xcdWQ4M2VcXHVkZDkxJyxcbiAgJ3N0YWRpdW0nOidcXHVkODNjXFx1ZGZkZicsXG4gICdzdGFyJzonXFx1MmI1MFxcdWZlMGYnLFxuICAnc3RhcjInOidcXHVkODNjXFx1ZGYxZicsXG4gICdzdGFyX2FuZF9jcmVzY2VudCc6J1xcdTI2MmFcXHVmZTBmJyxcbiAgJ3N0YXJfb2ZfZGF2aWQnOidcXHUyNzIxXFx1ZmUwZicsXG4gICdzdGFycyc6J1xcdWQ4M2NcXHVkZjIwJyxcbiAgJ3N0YXRpb24nOidcXHVkODNkXFx1ZGU4OScsXG4gICdzdGF0dWVfb2ZfbGliZXJ0eSc6J1xcdWQ4M2RcXHVkZGZkJyxcbiAgJ3N0ZWFtX2xvY29tb3RpdmUnOidcXHVkODNkXFx1ZGU4MicsXG4gICdzdGV3JzonXFx1ZDgzY1xcdWRmNzInLFxuICAnc3RvcF9idXR0b24nOidcXHUyM2Y5JyxcbiAgJ3N0b3Bfc2lnbic6J1xcdWQ4M2RcXHVkZWQxJyxcbiAgJ3N0b3B3YXRjaCc6J1xcdTIzZjEnLFxuICAnc3RyYWlnaHRfcnVsZXInOidcXHVkODNkXFx1ZGNjZicsXG4gICdzdHJhd2JlcnJ5JzonXFx1ZDgzY1xcdWRmNTMnLFxuICAnc3R1Y2tfb3V0X3Rvbmd1ZSc6J1xcdWQ4M2RcXHVkZTFiJyxcbiAgJ3N0dWNrX291dF90b25ndWVfY2xvc2VkX2V5ZXMnOidcXHVkODNkXFx1ZGUxZCcsXG4gICdzdHVja19vdXRfdG9uZ3VlX3dpbmtpbmdfZXllJzonXFx1ZDgzZFxcdWRlMWMnLFxuICAnc3R1ZGlvX21pY3JvcGhvbmUnOidcXHVkODNjXFx1ZGY5OScsXG4gICdzdHVmZmVkX2ZsYXRicmVhZCc6J1xcdWQ4M2VcXHVkZDU5JyxcbiAgJ3N1bl9iZWhpbmRfbGFyZ2VfY2xvdWQnOidcXHVkODNjXFx1ZGYyNScsXG4gICdzdW5fYmVoaW5kX3JhaW5fY2xvdWQnOidcXHVkODNjXFx1ZGYyNicsXG4gICdzdW5fYmVoaW5kX3NtYWxsX2Nsb3VkJzonXFx1ZDgzY1xcdWRmMjQnLFxuICAnc3VuX3dpdGhfZmFjZSc6J1xcdWQ4M2NcXHVkZjFlJyxcbiAgJ3N1bmZsb3dlcic6J1xcdWQ4M2NcXHVkZjNiJyxcbiAgJ3N1bmdsYXNzZXMnOidcXHVkODNkXFx1ZGUwZScsXG4gICdzdW5ueSc6J1xcdTI2MDBcXHVmZTBmJyxcbiAgJ3N1bnJpc2UnOidcXHVkODNjXFx1ZGYwNScsXG4gICdzdW5yaXNlX292ZXJfbW91bnRhaW5zJzonXFx1ZDgzY1xcdWRmMDQnLFxuICAnc3VyZmluZ19tYW4nOidcXHVkODNjXFx1ZGZjNCcsXG4gICdzdXJmaW5nX3dvbWFuJzonXFx1ZDgzY1xcdWRmYzQmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ3N1c2hpJzonXFx1ZDgzY1xcdWRmNjMnLFxuICAnc3VzcGVuc2lvbl9yYWlsd2F5JzonXFx1ZDgzZFxcdWRlOWYnLFxuICAnc3dlYXQnOidcXHVkODNkXFx1ZGUxMycsXG4gICdzd2VhdF9kcm9wcyc6J1xcdWQ4M2RcXHVkY2E2JyxcbiAgJ3N3ZWF0X3NtaWxlJzonXFx1ZDgzZFxcdWRlMDUnLFxuICAnc3dlZXRfcG90YXRvJzonXFx1ZDgzY1xcdWRmNjAnLFxuICAnc3dpbW1pbmdfbWFuJzonXFx1ZDgzY1xcdWRmY2EnLFxuICAnc3dpbW1pbmdfd29tYW4nOidcXHVkODNjXFx1ZGZjYSZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnc3ltYm9scyc6J1xcdWQ4M2RcXHVkZDIzJyxcbiAgJ3N5bmFnb2d1ZSc6J1xcdWQ4M2RcXHVkZDRkJyxcbiAgJ3N5cmluZ2UnOidcXHVkODNkXFx1ZGM4OScsXG4gICd0YWNvJzonXFx1ZDgzY1xcdWRmMmUnLFxuICAndGFkYSc6J1xcdWQ4M2NcXHVkZjg5JyxcbiAgJ3RhbmFiYXRhX3RyZWUnOidcXHVkODNjXFx1ZGY4YicsXG4gICd0YXVydXMnOidcXHUyNjQ5XFx1ZmUwZicsXG4gICd0YXhpJzonXFx1ZDgzZFxcdWRlOTUnLFxuICAndGVhJzonXFx1ZDgzY1xcdWRmNzUnLFxuICAndGVsZXBob25lX3JlY2VpdmVyJzonXFx1ZDgzZFxcdWRjZGUnLFxuICAndGVsZXNjb3BlJzonXFx1ZDgzZFxcdWRkMmQnLFxuICAndGVubmlzJzonXFx1ZDgzY1xcdWRmYmUnLFxuICAndGVudCc6J1xcdTI2ZmFcXHVmZTBmJyxcbiAgJ3RoZXJtb21ldGVyJzonXFx1ZDgzY1xcdWRmMjEnLFxuICAndGhpbmtpbmcnOidcXHVkODNlXFx1ZGQxNCcsXG4gICd0aG91Z2h0X2JhbGxvb24nOidcXHVkODNkXFx1ZGNhZCcsXG4gICd0aWNrZXQnOidcXHVkODNjXFx1ZGZhYicsXG4gICd0aWNrZXRzJzonXFx1ZDgzY1xcdWRmOWYnLFxuICAndGlnZXInOidcXHVkODNkXFx1ZGMyZicsXG4gICd0aWdlcjInOidcXHVkODNkXFx1ZGMwNScsXG4gICd0aW1lcl9jbG9jayc6J1xcdTIzZjInLFxuICAndGlwcGluZ19oYW5kX21hbic6J1xcdWQ4M2RcXHVkYzgxJnp3ajtcXHUyNjQyXFx1ZmUwZicsXG4gICd0aXJlZF9mYWNlJzonXFx1ZDgzZFxcdWRlMmInLFxuICAndG0nOidcXHUyMTIyXFx1ZmUwZicsXG4gICd0b2lsZXQnOidcXHVkODNkXFx1ZGViZCcsXG4gICd0b2t5b190b3dlcic6J1xcdWQ4M2RcXHVkZGZjJyxcbiAgJ3RvbWF0byc6J1xcdWQ4M2NcXHVkZjQ1JyxcbiAgJ3Rvbmd1ZSc6J1xcdWQ4M2RcXHVkYzQ1JyxcbiAgJ3RvcCc6J1xcdWQ4M2RcXHVkZDFkJyxcbiAgJ3RvcGhhdCc6J1xcdWQ4M2NcXHVkZmE5JyxcbiAgJ3Rvcm5hZG8nOidcXHVkODNjXFx1ZGYyYScsXG4gICd0cmFja2JhbGwnOidcXHVkODNkXFx1ZGRiMicsXG4gICd0cmFjdG9yJzonXFx1ZDgzZFxcdWRlOWMnLFxuICAndHJhZmZpY19saWdodCc6J1xcdWQ4M2RcXHVkZWE1JyxcbiAgJ3RyYWluJzonXFx1ZDgzZFxcdWRlOGInLFxuICAndHJhaW4yJzonXFx1ZDgzZFxcdWRlODYnLFxuICAndHJhbSc6J1xcdWQ4M2RcXHVkZThhJyxcbiAgJ3RyaWFuZ3VsYXJfZmxhZ19vbl9wb3N0JzonXFx1ZDgzZFxcdWRlYTknLFxuICAndHJpYW5ndWxhcl9ydWxlcic6J1xcdWQ4M2RcXHVkY2QwJyxcbiAgJ3RyaWRlbnQnOidcXHVkODNkXFx1ZGQzMScsXG4gICd0cml1bXBoJzonXFx1ZDgzZFxcdWRlMjQnLFxuICAndHJvbGxleWJ1cyc6J1xcdWQ4M2RcXHVkZThlJyxcbiAgJ3Ryb3BoeSc6J1xcdWQ4M2NcXHVkZmM2JyxcbiAgJ3Ryb3BpY2FsX2RyaW5rJzonXFx1ZDgzY1xcdWRmNzknLFxuICAndHJvcGljYWxfZmlzaCc6J1xcdWQ4M2RcXHVkYzIwJyxcbiAgJ3RydWNrJzonXFx1ZDgzZFxcdWRlOWEnLFxuICAndHJ1bXBldCc6J1xcdWQ4M2NcXHVkZmJhJyxcbiAgJ3R1bGlwJzonXFx1ZDgzY1xcdWRmMzcnLFxuICAndHVtYmxlcl9nbGFzcyc6J1xcdWQ4M2VcXHVkZDQzJyxcbiAgJ3R1cmtleSc6J1xcdWQ4M2VcXHVkZDgzJyxcbiAgJ3R1cnRsZSc6J1xcdWQ4M2RcXHVkYzIyJyxcbiAgJ3R2JzonXFx1ZDgzZFxcdWRjZmEnLFxuICAndHdpc3RlZF9yaWdodHdhcmRzX2Fycm93cyc6J1xcdWQ4M2RcXHVkZDAwJyxcbiAgJ3R3b19oZWFydHMnOidcXHVkODNkXFx1ZGM5NScsXG4gICd0d29fbWVuX2hvbGRpbmdfaGFuZHMnOidcXHVkODNkXFx1ZGM2YycsXG4gICd0d29fd29tZW5faG9sZGluZ19oYW5kcyc6J1xcdWQ4M2RcXHVkYzZkJyxcbiAgJ3U1MjcyJzonXFx1ZDgzY1xcdWRlMzknLFxuICAndTU0MDgnOidcXHVkODNjXFx1ZGUzNCcsXG4gICd1NTViNic6J1xcdWQ4M2NcXHVkZTNhJyxcbiAgJ3U2MzA3JzonXFx1ZDgzY1xcdWRlMmZcXHVmZTBmJyxcbiAgJ3U2NzA4JzonXFx1ZDgzY1xcdWRlMzdcXHVmZTBmJyxcbiAgJ3U2NzA5JzonXFx1ZDgzY1xcdWRlMzYnLFxuICAndTZlODAnOidcXHVkODNjXFx1ZGUzNScsXG4gICd1NzEyMSc6J1xcdWQ4M2NcXHVkZTFhXFx1ZmUwZicsXG4gICd1NzUzMyc6J1xcdWQ4M2NcXHVkZTM4JyxcbiAgJ3U3OTgxJzonXFx1ZDgzY1xcdWRlMzInLFxuICAndTdhN2EnOidcXHVkODNjXFx1ZGUzMycsXG4gICd1bWJyZWxsYSc6J1xcdTI2MTRcXHVmZTBmJyxcbiAgJ3VuYW11c2VkJzonXFx1ZDgzZFxcdWRlMTInLFxuICAndW5kZXJhZ2UnOidcXHVkODNkXFx1ZGQxZScsXG4gICd1bmljb3JuJzonXFx1ZDgzZVxcdWRkODQnLFxuICAndW5sb2NrJzonXFx1ZDgzZFxcdWRkMTMnLFxuICAndXAnOidcXHVkODNjXFx1ZGQ5OScsXG4gICd1cHNpZGVfZG93bl9mYWNlJzonXFx1ZDgzZFxcdWRlNDMnLFxuICAndic6J1xcdTI3MGNcXHVmZTBmJyxcbiAgJ3ZlcnRpY2FsX3RyYWZmaWNfbGlnaHQnOidcXHVkODNkXFx1ZGVhNicsXG4gICd2aHMnOidcXHVkODNkXFx1ZGNmYycsXG4gICd2aWJyYXRpb25fbW9kZSc6J1xcdWQ4M2RcXHVkY2YzJyxcbiAgJ3ZpZGVvX2NhbWVyYSc6J1xcdWQ4M2RcXHVkY2Y5JyxcbiAgJ3ZpZGVvX2dhbWUnOidcXHVkODNjXFx1ZGZhZScsXG4gICd2aW9saW4nOidcXHVkODNjXFx1ZGZiYicsXG4gICd2aXJnbyc6J1xcdTI2NGRcXHVmZTBmJyxcbiAgJ3ZvbGNhbm8nOidcXHVkODNjXFx1ZGYwYicsXG4gICd2b2xsZXliYWxsJzonXFx1ZDgzY1xcdWRmZDAnLFxuICAndnMnOidcXHVkODNjXFx1ZGQ5YScsXG4gICd2dWxjYW5fc2FsdXRlJzonXFx1ZDgzZFxcdWRkOTYnLFxuICAnd2Fsa2luZ19tYW4nOidcXHVkODNkXFx1ZGViNicsXG4gICd3YWxraW5nX3dvbWFuJzonXFx1ZDgzZFxcdWRlYjYmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ3dhbmluZ19jcmVzY2VudF9tb29uJzonXFx1ZDgzY1xcdWRmMTgnLFxuICAnd2FuaW5nX2dpYmJvdXNfbW9vbic6J1xcdWQ4M2NcXHVkZjE2JyxcbiAgJ3dhcm5pbmcnOidcXHUyNmEwXFx1ZmUwZicsXG4gICd3YXN0ZWJhc2tldCc6J1xcdWQ4M2RcXHVkZGQxJyxcbiAgJ3dhdGNoJzonXFx1MjMxYVxcdWZlMGYnLFxuICAnd2F0ZXJfYnVmZmFsbyc6J1xcdWQ4M2RcXHVkYzAzJyxcbiAgJ3dhdGVybWVsb24nOidcXHVkODNjXFx1ZGY0OScsXG4gICd3YXZlJzonXFx1ZDgzZFxcdWRjNGInLFxuICAnd2F2eV9kYXNoJzonXFx1MzAzMFxcdWZlMGYnLFxuICAnd2F4aW5nX2NyZXNjZW50X21vb24nOidcXHVkODNjXFx1ZGYxMicsXG4gICd3Yyc6J1xcdWQ4M2RcXHVkZWJlJyxcbiAgJ3dlYXJ5JzonXFx1ZDgzZFxcdWRlMjknLFxuICAnd2VkZGluZyc6J1xcdWQ4M2RcXHVkYzkyJyxcbiAgJ3dlaWdodF9saWZ0aW5nX21hbic6J1xcdWQ4M2NcXHVkZmNiXFx1ZmUwZicsXG4gICd3ZWlnaHRfbGlmdGluZ193b21hbic6J1xcdWQ4M2NcXHVkZmNiXFx1ZmUwZiZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnd2hhbGUnOidcXHVkODNkXFx1ZGMzMycsXG4gICd3aGFsZTInOidcXHVkODNkXFx1ZGMwYicsXG4gICd3aGVlbF9vZl9kaGFybWEnOidcXHUyNjM4XFx1ZmUwZicsXG4gICd3aGVlbGNoYWlyJzonXFx1MjY3ZlxcdWZlMGYnLFxuICAnd2hpdGVfY2hlY2tfbWFyayc6J1xcdTI3MDUnLFxuICAnd2hpdGVfY2lyY2xlJzonXFx1MjZhYVxcdWZlMGYnLFxuICAnd2hpdGVfZmxhZyc6J1xcdWQ4M2NcXHVkZmYzXFx1ZmUwZicsXG4gICd3aGl0ZV9mbG93ZXInOidcXHVkODNkXFx1ZGNhZScsXG4gICd3aGl0ZV9sYXJnZV9zcXVhcmUnOidcXHUyYjFjXFx1ZmUwZicsXG4gICd3aGl0ZV9tZWRpdW1fc21hbGxfc3F1YXJlJzonXFx1MjVmZFxcdWZlMGYnLFxuICAnd2hpdGVfbWVkaXVtX3NxdWFyZSc6J1xcdTI1ZmJcXHVmZTBmJyxcbiAgJ3doaXRlX3NtYWxsX3NxdWFyZSc6J1xcdTI1YWJcXHVmZTBmJyxcbiAgJ3doaXRlX3NxdWFyZV9idXR0b24nOidcXHVkODNkXFx1ZGQzMycsXG4gICd3aWx0ZWRfZmxvd2VyJzonXFx1ZDgzZVxcdWRkNDAnLFxuICAnd2luZF9jaGltZSc6J1xcdWQ4M2NcXHVkZjkwJyxcbiAgJ3dpbmRfZmFjZSc6J1xcdWQ4M2NcXHVkZjJjJyxcbiAgJ3dpbmVfZ2xhc3MnOidcXHVkODNjXFx1ZGY3NycsXG4gICd3aW5rJzonXFx1ZDgzZFxcdWRlMDknLFxuICAnd29sZic6J1xcdWQ4M2RcXHVkYzNhJyxcbiAgJ3dvbWFuJzonXFx1ZDgzZFxcdWRjNjknLFxuICAnd29tYW5fYXJ0aXN0JzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2NcXHVkZmE4JyxcbiAgJ3dvbWFuX2FzdHJvbmF1dCc6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGU4MCcsXG4gICd3b21hbl9jYXJ0d2hlZWxpbmcnOidcXHVkODNlXFx1ZGQzOCZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnd29tYW5fY29vayc6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNjXFx1ZGY3MycsXG4gICd3b21hbl9mYWNlcGFsbWluZyc6J1xcdWQ4M2VcXHVkZDI2Jnp3ajtcXHUyNjQwXFx1ZmUwZicsXG4gICd3b21hbl9mYWN0b3J5X3dvcmtlcic6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNjXFx1ZGZlZCcsXG4gICd3b21hbl9mYXJtZXInOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzY1xcdWRmM2UnLFxuICAnd29tYW5fZmlyZWZpZ2h0ZXInOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRlOTInLFxuICAnd29tYW5faGVhbHRoX3dvcmtlcic6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHUyNjk1XFx1ZmUwZicsXG4gICd3b21hbl9qdWRnZSc6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHUyNjk2XFx1ZmUwZicsXG4gICd3b21hbl9qdWdnbGluZyc6J1xcdWQ4M2VcXHVkZDM5Jnp3ajtcXHUyNjQwXFx1ZmUwZicsXG4gICd3b21hbl9tZWNoYW5pYyc6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGQyNycsXG4gICd3b21hbl9vZmZpY2Vfd29ya2VyJzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2RcXHVkY2JjJyxcbiAgJ3dvbWFuX3BpbG90JzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdTI3MDhcXHVmZTBmJyxcbiAgJ3dvbWFuX3BsYXlpbmdfaGFuZGJhbGwnOidcXHVkODNlXFx1ZGQzZSZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnd29tYW5fcGxheWluZ193YXRlcl9wb2xvJzonXFx1ZDgzZVxcdWRkM2QmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ3dvbWFuX3NjaWVudGlzdCc6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNkXFx1ZGQyYycsXG4gICd3b21hbl9zaHJ1Z2dpbmcnOidcXHVkODNlXFx1ZGQzNyZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnd29tYW5fc2luZ2VyJzonXFx1ZDgzZFxcdWRjNjkmendqO1xcdWQ4M2NcXHVkZmE0JyxcbiAgJ3dvbWFuX3N0dWRlbnQnOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzY1xcdWRmOTMnLFxuICAnd29tYW5fdGVhY2hlcic6J1xcdWQ4M2RcXHVkYzY5Jnp3ajtcXHVkODNjXFx1ZGZlYicsXG4gICd3b21hbl90ZWNobm9sb2dpc3QnOidcXHVkODNkXFx1ZGM2OSZ6d2o7XFx1ZDgzZFxcdWRjYmInLFxuICAnd29tYW5fd2l0aF90dXJiYW4nOidcXHVkODNkXFx1ZGM3MyZ6d2o7XFx1MjY0MFxcdWZlMGYnLFxuICAnd29tYW5zX2Nsb3RoZXMnOidcXHVkODNkXFx1ZGM1YScsXG4gICd3b21hbnNfaGF0JzonXFx1ZDgzZFxcdWRjNTInLFxuICAnd29tZW5fd3Jlc3RsaW5nJzonXFx1ZDgzZVxcdWRkM2MmendqO1xcdTI2NDBcXHVmZTBmJyxcbiAgJ3dvbWVucyc6J1xcdWQ4M2RcXHVkZWJhJyxcbiAgJ3dvcmxkX21hcCc6J1xcdWQ4M2RcXHVkZGZhJyxcbiAgJ3dvcnJpZWQnOidcXHVkODNkXFx1ZGUxZicsXG4gICd3cmVuY2gnOidcXHVkODNkXFx1ZGQyNycsXG4gICd3cml0aW5nX2hhbmQnOidcXHUyNzBkXFx1ZmUwZicsXG4gICd4JzonXFx1Mjc0YycsXG4gICd5ZWxsb3dfaGVhcnQnOidcXHVkODNkXFx1ZGM5YicsXG4gICd5ZW4nOidcXHVkODNkXFx1ZGNiNCcsXG4gICd5aW5feWFuZyc6J1xcdTI2MmZcXHVmZTBmJyxcbiAgJ3l1bSc6J1xcdWQ4M2RcXHVkZTBiJyxcbiAgJ3phcCc6J1xcdTI2YTFcXHVmZTBmJyxcbiAgJ3ppcHBlcl9tb3V0aF9mYWNlJzonXFx1ZDgzZVxcdWRkMTAnLFxuICAnenp6JzonXFx1ZDgzZFxcdWRjYTQnLFxuXG4gIC8qIHNwZWNpYWwgZW1vamlzIDpQICovXG4gICdvY3RvY2F0JzogICc8aW1nIGFsdD1cIjpvY3RvY2F0OlwiIGhlaWdodD1cIjIwXCIgd2lkdGg9XCIyMFwiIGFsaWduPVwiYWJzbWlkZGxlXCIgc3JjPVwiaHR0cHM6Ly9hc3NldHMtY2RuLmdpdGh1Yi5jb20vaW1hZ2VzL2ljb25zL2Vtb2ppL29jdG9jYXQucG5nXCI+JyxcbiAgJ3Nob3dkb3duJzogJzxzcGFuIHN0eWxlPVwiZm9udC1mYW1pbHk6IFxcJ0Fub255bW91cyBQcm9cXCcsIG1vbm9zcGFjZTsgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7IHRleHQtZGVjb3JhdGlvbi1zdHlsZTogZGFzaGVkOyB0ZXh0LWRlY29yYXRpb24tY29sb3I6ICMzZThiOGE7dGV4dC11bmRlcmxpbmUtcG9zaXRpb246IHVuZGVyO1wiPlM8L3NwYW4+J1xufTtcblxyXG4vKipcbiAqIENyZWF0ZWQgYnkgRXN0ZXZhbyBvbiAzMS0wNS0yMDE1LlxuICovXG5cbi8qKlxuICogU2hvd2Rvd24gQ29udmVydGVyIGNsYXNzXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7b2JqZWN0fSBbY29udmVydGVyT3B0aW9uc11cbiAqIEByZXR1cm5zIHtDb252ZXJ0ZXJ9XG4gKi9cbnNob3dkb3duLkNvbnZlcnRlciA9IGZ1bmN0aW9uIChjb252ZXJ0ZXJPcHRpb25zKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXJcbiAgICAgIC8qKlxuICAgICAgICogT3B0aW9ucyB1c2VkIGJ5IHRoaXMgY29udmVydGVyXG4gICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICogQHR5cGUge3t9fVxuICAgICAgICovXG4gICAgICBvcHRpb25zID0ge30sXG5cbiAgICAgIC8qKlxuICAgICAgICogTGFuZ3VhZ2UgZXh0ZW5zaW9ucyB1c2VkIGJ5IHRoaXMgY29udmVydGVyXG4gICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICogQHR5cGUge0FycmF5fVxuICAgICAgICovXG4gICAgICBsYW5nRXh0ZW5zaW9ucyA9IFtdLFxuXG4gICAgICAvKipcbiAgICAgICAqIE91dHB1dCBtb2RpZmllcnMgZXh0ZW5zaW9ucyB1c2VkIGJ5IHRoaXMgY29udmVydGVyXG4gICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICogQHR5cGUge0FycmF5fVxuICAgICAgICovXG4gICAgICBvdXRwdXRNb2RpZmllcnMgPSBbXSxcblxuICAgICAgLyoqXG4gICAgICAgKiBFdmVudCBsaXN0ZW5lcnNcbiAgICAgICAqIEBwcml2YXRlXG4gICAgICAgKiBAdHlwZSB7e319XG4gICAgICAgKi9cbiAgICAgIGxpc3RlbmVycyA9IHt9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBmbGF2b3Igc2V0IGluIHRoaXMgY29udmVydGVyXG4gICAgICAgKi9cbiAgICAgIHNldENvbnZGbGF2b3IgPSBzZXRGbGF2b3IsXG5cbiAgICAgIC8qKlxuICAgICAgICogTWV0YWRhdGEgb2YgdGhlIGRvY3VtZW50XG4gICAgICAgKiBAdHlwZSB7e3BhcnNlZDoge30sIHJhdzogc3RyaW5nLCBmb3JtYXQ6IHN0cmluZ319XG4gICAgICAgKi9cbiAgICAgIG1ldGFkYXRhID0ge1xuICAgICAgICBwYXJzZWQ6IHt9LFxuICAgICAgICByYXc6ICcnLFxuICAgICAgICBmb3JtYXQ6ICcnXG4gICAgICB9O1xuXG4gIF9jb25zdHJ1Y3RvcigpO1xuXG4gIC8qKlxuICAgKiBDb252ZXJ0ZXIgY29uc3RydWN0b3JcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIF9jb25zdHJ1Y3RvciAoKSB7XG4gICAgY29udmVydGVyT3B0aW9ucyA9IGNvbnZlcnRlck9wdGlvbnMgfHwge307XG5cbiAgICBmb3IgKHZhciBnT3B0IGluIGdsb2JhbE9wdGlvbnMpIHtcbiAgICAgIGlmIChnbG9iYWxPcHRpb25zLmhhc093blByb3BlcnR5KGdPcHQpKSB7XG4gICAgICAgIG9wdGlvbnNbZ09wdF0gPSBnbG9iYWxPcHRpb25zW2dPcHRdO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1lcmdlIG9wdGlvbnNcbiAgICBpZiAodHlwZW9mIGNvbnZlcnRlck9wdGlvbnMgPT09ICdvYmplY3QnKSB7XG4gICAgICBmb3IgKHZhciBvcHQgaW4gY29udmVydGVyT3B0aW9ucykge1xuICAgICAgICBpZiAoY29udmVydGVyT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShvcHQpKSB7XG4gICAgICAgICAgb3B0aW9uc1tvcHRdID0gY29udmVydGVyT3B0aW9uc1tvcHRdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IEVycm9yKCdDb252ZXJ0ZXIgZXhwZWN0cyB0aGUgcGFzc2VkIHBhcmFtZXRlciB0byBiZSBhbiBvYmplY3QsIGJ1dCAnICsgdHlwZW9mIGNvbnZlcnRlck9wdGlvbnMgK1xuICAgICAgJyB3YXMgcGFzc2VkIGluc3RlYWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZXh0ZW5zaW9ucykge1xuICAgICAgc2hvd2Rvd24uaGVscGVyLmZvckVhY2gob3B0aW9ucy5leHRlbnNpb25zLCBfcGFyc2VFeHRlbnNpb24pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSBleHRlbnNpb25cbiAgICogQHBhcmFtIHsqfSBleHRcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtuYW1lPScnXVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gX3BhcnNlRXh0ZW5zaW9uIChleHQsIG5hbWUpIHtcblxuICAgIG5hbWUgPSBuYW1lIHx8IG51bGw7XG4gICAgLy8gSWYgaXQncyBhIHN0cmluZywgdGhlIGV4dGVuc2lvbiB3YXMgcHJldmlvdXNseSBsb2FkZWRcbiAgICBpZiAoc2hvd2Rvd24uaGVscGVyLmlzU3RyaW5nKGV4dCkpIHtcbiAgICAgIGV4dCA9IHNob3dkb3duLmhlbHBlci5zdGRFeHROYW1lKGV4dCk7XG4gICAgICBuYW1lID0gZXh0O1xuXG4gICAgICAvLyBMRUdBQ1lfU1VQUE9SVCBDT0RFXG4gICAgICBpZiAoc2hvd2Rvd24uZXh0ZW5zaW9uc1tleHRdKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignREVQUkVDQVRJT04gV0FSTklORzogJyArIGV4dCArICcgaXMgYW4gb2xkIGV4dGVuc2lvbiB0aGF0IHVzZXMgYSBkZXByZWNhdGVkIGxvYWRpbmcgbWV0aG9kLicgK1xuICAgICAgICAgICdQbGVhc2UgaW5mb3JtIHRoZSBkZXZlbG9wZXIgdGhhdCB0aGUgZXh0ZW5zaW9uIHNob3VsZCBiZSB1cGRhdGVkIScpO1xuICAgICAgICBsZWdhY3lFeHRlbnNpb25Mb2FkaW5nKHNob3dkb3duLmV4dGVuc2lvbnNbZXh0XSwgZXh0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgICAvLyBFTkQgTEVHQUNZIFNVUFBPUlQgQ09ERVxuXG4gICAgICB9IGVsc2UgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoZXh0ZW5zaW9uc1tleHRdKSkge1xuICAgICAgICBleHQgPSBleHRlbnNpb25zW2V4dF07XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IEVycm9yKCdFeHRlbnNpb24gXCInICsgZXh0ICsgJ1wiIGNvdWxkIG5vdCBiZSBsb2FkZWQuIEl0IHdhcyBlaXRoZXIgbm90IGZvdW5kIG9yIGlzIG5vdCBhIHZhbGlkIGV4dGVuc2lvbi4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGV4dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZXh0ID0gZXh0KCk7XG4gICAgfVxuXG4gICAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNBcnJheShleHQpKSB7XG4gICAgICBleHQgPSBbZXh0XTtcbiAgICB9XG5cbiAgICB2YXIgdmFsaWRFeHQgPSB2YWxpZGF0ZShleHQsIG5hbWUpO1xuICAgIGlmICghdmFsaWRFeHQudmFsaWQpIHtcbiAgICAgIHRocm93IEVycm9yKHZhbGlkRXh0LmVycm9yKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4dC5sZW5ndGg7ICsraSkge1xuICAgICAgc3dpdGNoIChleHRbaV0udHlwZSkge1xuXG4gICAgICAgIGNhc2UgJ2xhbmcnOlxuICAgICAgICAgIGxhbmdFeHRlbnNpb25zLnB1c2goZXh0W2ldKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdvdXRwdXQnOlxuICAgICAgICAgIG91dHB1dE1vZGlmaWVycy5wdXNoKGV4dFtpXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoZXh0W2ldLmhhc093blByb3BlcnR5KCdsaXN0ZW5lcnMnKSkge1xuICAgICAgICBmb3IgKHZhciBsbiBpbiBleHRbaV0ubGlzdGVuZXJzKSB7XG4gICAgICAgICAgaWYgKGV4dFtpXS5saXN0ZW5lcnMuaGFzT3duUHJvcGVydHkobG4pKSB7XG4gICAgICAgICAgICBsaXN0ZW4obG4sIGV4dFtpXS5saXN0ZW5lcnNbbG5dKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBMRUdBQ1lfU1VQUE9SVFxuICAgKiBAcGFyYW0geyp9IGV4dFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKi9cbiAgZnVuY3Rpb24gbGVnYWN5RXh0ZW5zaW9uTG9hZGluZyAoZXh0LCBuYW1lKSB7XG4gICAgaWYgKHR5cGVvZiBleHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGV4dCA9IGV4dChuZXcgc2hvd2Rvd24uQ29udmVydGVyKCkpO1xuICAgIH1cbiAgICBpZiAoIXNob3dkb3duLmhlbHBlci5pc0FycmF5KGV4dCkpIHtcbiAgICAgIGV4dCA9IFtleHRdO1xuICAgIH1cbiAgICB2YXIgdmFsaWQgPSB2YWxpZGF0ZShleHQsIG5hbWUpO1xuXG4gICAgaWYgKCF2YWxpZC52YWxpZCkge1xuICAgICAgdGhyb3cgRXJyb3IodmFsaWQuZXJyb3IpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXh0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBzd2l0Y2ggKGV4dFtpXS50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2xhbmcnOlxuICAgICAgICAgIGxhbmdFeHRlbnNpb25zLnB1c2goZXh0W2ldKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnb3V0cHV0JzpcbiAgICAgICAgICBvdXRwdXRNb2RpZmllcnMucHVzaChleHRbaV0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0Oi8vIHNob3VsZCBuZXZlciByZWFjaCBoZXJlXG4gICAgICAgICAgdGhyb3cgRXJyb3IoJ0V4dGVuc2lvbiBsb2FkZXIgZXJyb3I6IFR5cGUgdW5yZWNvZ25pemVkISEhJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIExpc3RlbiB0byBhbiBldmVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cbiAgZnVuY3Rpb24gbGlzdGVuIChuYW1lLCBjYWxsYmFjaykge1xuICAgIGlmICghc2hvd2Rvd24uaGVscGVyLmlzU3RyaW5nKG5hbWUpKSB7XG4gICAgICB0aHJvdyBFcnJvcignSW52YWxpZCBhcmd1bWVudCBpbiBjb252ZXJ0ZXIubGlzdGVuKCkgbWV0aG9kOiBuYW1lIG11c3QgYmUgYSBzdHJpbmcsIGJ1dCAnICsgdHlwZW9mIG5hbWUgKyAnIGdpdmVuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgYXJndW1lbnQgaW4gY29udmVydGVyLmxpc3RlbigpIG1ldGhvZDogY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uLCBidXQgJyArIHR5cGVvZiBjYWxsYmFjayArICcgZ2l2ZW4nKTtcbiAgICB9XG5cbiAgICBpZiAoIWxpc3RlbmVycy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgbGlzdGVuZXJzW25hbWVdID0gW107XG4gICAgfVxuICAgIGxpc3RlbmVyc1tuYW1lXS5wdXNoKGNhbGxiYWNrKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJUcmltSW5wdXRUZXh0ICh0ZXh0KSB7XG4gICAgdmFyIHJzcCA9IHRleHQubWF0Y2goL15cXHMqLylbMF0ubGVuZ3RoLFxuICAgICAgICByZ3ggPSBuZXcgUmVnRXhwKCdeXFxcXHN7MCwnICsgcnNwICsgJ30nLCAnZ20nKTtcbiAgICByZXR1cm4gdGV4dC5yZXBsYWNlKHJneCwgJycpO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoIGFuIGV2ZW50XG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldnROYW1lIEV2ZW50IG5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgVGV4dFxuICAgKiBAcGFyYW0ge3t9fSBvcHRpb25zIENvbnZlcnRlciBPcHRpb25zXG4gICAqIEBwYXJhbSB7e319IGdsb2JhbHNcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHRoaXMuX2Rpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2ggKGV2dE5hbWUsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgICBpZiAobGlzdGVuZXJzLmhhc093blByb3BlcnR5KGV2dE5hbWUpKSB7XG4gICAgICBmb3IgKHZhciBlaSA9IDA7IGVpIDwgbGlzdGVuZXJzW2V2dE5hbWVdLmxlbmd0aDsgKytlaSkge1xuICAgICAgICB2YXIgblRleHQgPSBsaXN0ZW5lcnNbZXZ0TmFtZV1bZWldKGV2dE5hbWUsIHRleHQsIHRoaXMsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgICAgICBpZiAoblRleHQgJiYgdHlwZW9mIG5UZXh0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRleHQgPSBuVGV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGV4dDtcbiAgfTtcblxuICAvKipcbiAgICogTGlzdGVuIHRvIGFuIGV2ZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gICAqIEByZXR1cm5zIHtzaG93ZG93bi5Db252ZXJ0ZXJ9XG4gICAqL1xuICB0aGlzLmxpc3RlbiA9IGZ1bmN0aW9uIChuYW1lLCBjYWxsYmFjaykge1xuICAgIGxpc3RlbihuYW1lLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGEgbWFya2Rvd24gc3RyaW5nIGludG8gSFRNTFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG4gIHRoaXMubWFrZUh0bWwgPSBmdW5jdGlvbiAodGV4dCkge1xuICAgIC8vY2hlY2sgaWYgdGV4dCBpcyBub3QgZmFsc3lcbiAgICBpZiAoIXRleHQpIHtcbiAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cblxuICAgIHZhciBnbG9iYWxzID0ge1xuICAgICAgZ0h0bWxCbG9ja3M6ICAgICBbXSxcbiAgICAgIGdIdG1sTWRCbG9ja3M6ICAgW10sXG4gICAgICBnSHRtbFNwYW5zOiAgICAgIFtdLFxuICAgICAgZ1VybHM6ICAgICAgICAgICB7fSxcbiAgICAgIGdUaXRsZXM6ICAgICAgICAge30sXG4gICAgICBnRGltZW5zaW9uczogICAgIHt9LFxuICAgICAgZ0xpc3RMZXZlbDogICAgICAwLFxuICAgICAgaGFzaExpbmtDb3VudHM6ICB7fSxcbiAgICAgIGxhbmdFeHRlbnNpb25zOiAgbGFuZ0V4dGVuc2lvbnMsXG4gICAgICBvdXRwdXRNb2RpZmllcnM6IG91dHB1dE1vZGlmaWVycyxcbiAgICAgIGNvbnZlcnRlcjogICAgICAgdGhpcyxcbiAgICAgIGdoQ29kZUJsb2NrczogICAgW10sXG4gICAgICBtZXRhZGF0YToge1xuICAgICAgICBwYXJzZWQ6IHt9LFxuICAgICAgICByYXc6ICcnLFxuICAgICAgICBmb3JtYXQ6ICcnXG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIFRoaXMgbGV0cyB1cyB1c2UgwqggdHJlbWEgYXMgYW4gZXNjYXBlIGNoYXIgdG8gYXZvaWQgbWQ1IGhhc2hlc1xuICAgIC8vIFRoZSBjaG9pY2Ugb2YgY2hhcmFjdGVyIGlzIGFyYml0cmFyeTsgYW55dGhpbmcgdGhhdCBpc24ndFxuICAgIC8vIG1hZ2ljIGluIE1hcmtkb3duIHdpbGwgd29yay5cbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC/CqC9nLCAnwqhUJyk7XG5cbiAgICAvLyBSZXBsYWNlICQgd2l0aCDCqERcbiAgICAvLyBSZWdFeHAgaW50ZXJwcmV0cyAkIGFzIGEgc3BlY2lhbCBjaGFyYWN0ZXJcbiAgICAvLyB3aGVuIGl0J3MgaW4gYSByZXBsYWNlbWVudCBzdHJpbmdcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXCQvZywgJ8KoRCcpO1xuXG4gICAgLy8gU3RhbmRhcmRpemUgbGluZSBlbmRpbmdzXG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxyXFxuL2csICdcXG4nKTsgLy8gRE9TIHRvIFVuaXhcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXHIvZywgJ1xcbicpOyAvLyBNYWMgdG8gVW5peFxuXG4gICAgLy8gU3RhcmRhcmRpemUgbGluZSBzcGFjZXNcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXHUwMEEwL2csICcmbmJzcDsnKTtcblxuICAgIGlmIChvcHRpb25zLnNtYXJ0SW5kZW50YXRpb25GaXgpIHtcbiAgICAgIHRleHQgPSByVHJpbUlucHV0VGV4dCh0ZXh0KTtcbiAgICB9XG5cbiAgICAvLyBNYWtlIHN1cmUgdGV4dCBiZWdpbnMgYW5kIGVuZHMgd2l0aCBhIGNvdXBsZSBvZiBuZXdsaW5lczpcbiAgICB0ZXh0ID0gJ1xcblxcbicgKyB0ZXh0ICsgJ1xcblxcbic7XG5cbiAgICAvLyBkZXRhYlxuICAgIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2RldGFiJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgICAvKipcbiAgICAgKiBTdHJpcCBhbnkgbGluZXMgY29uc2lzdGluZyBvbmx5IG9mIHNwYWNlcyBhbmQgdGFicy5cbiAgICAgKiBUaGlzIG1ha2VzIHN1YnNlcXVlbnQgcmVnZXhzIGVhc2llciB0byB3cml0ZSwgYmVjYXVzZSB3ZSBjYW5cbiAgICAgKiBtYXRjaCBjb25zZWN1dGl2ZSBibGFuayBsaW5lcyB3aXRoIC9cXG4rLyBpbnN0ZWFkIG9mIHNvbWV0aGluZ1xuICAgICAqIGNvbnRvcnRlZCBsaWtlIC9bIFxcdF0qXFxuKy9cbiAgICAgKi9cbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9eWyBcXHRdKyQvbWcsICcnKTtcblxuICAgIC8vcnVuIGxhbmd1YWdlRXh0ZW5zaW9uc1xuICAgIHNob3dkb3duLmhlbHBlci5mb3JFYWNoKGxhbmdFeHRlbnNpb25zLCBmdW5jdGlvbiAoZXh0KSB7XG4gICAgICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdydW5FeHRlbnNpb24nKShleHQsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIH0pO1xuXG4gICAgLy8gcnVuIHRoZSBzdWIgcGFyc2Vyc1xuICAgIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ldGFkYXRhJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignaGFzaFByZUNvZGVUYWdzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignZ2l0aHViQ29kZUJsb2NrcycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hIVE1MQmxvY2tzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignaGFzaENvZGVUYWdzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignc3RyaXBMaW5rRGVmaW5pdGlvbnMnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdibG9ja0dhbXV0JykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcigndW5oYXNoSFRNTFNwYW5zJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcigndW5lc2NhcGVTcGVjaWFsQ2hhcnMnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAgIC8vIGF0dGFja2xhYjogUmVzdG9yZSBkb2xsYXIgc2lnbnNcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC/CqEQvZywgJyQkJyk7XG5cbiAgICAvLyBhdHRhY2tsYWI6IFJlc3RvcmUgdHJlbWFzXG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvwqhUL2csICfCqCcpO1xuXG4gICAgLy8gcmVuZGVyIGEgY29tcGxldGUgaHRtbCBkb2N1bWVudCBpbnN0ZWFkIG9mIGEgcGFydGlhbCBpZiB0aGUgb3B0aW9uIGlzIGVuYWJsZWRcbiAgICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdjb21wbGV0ZUhUTUxEb2N1bWVudCcpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gICAgLy8gUnVuIG91dHB1dCBtb2RpZmllcnNcbiAgICBzaG93ZG93bi5oZWxwZXIuZm9yRWFjaChvdXRwdXRNb2RpZmllcnMsIGZ1bmN0aW9uIChleHQpIHtcbiAgICAgIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3J1bkV4dGVuc2lvbicpKGV4dCwgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgfSk7XG5cbiAgICAvLyB1cGRhdGUgbWV0YWRhdGFcbiAgICBtZXRhZGF0YSA9IGdsb2JhbHMubWV0YWRhdGE7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGFuIEhUTUwgc3RyaW5nIGludG8gYSBtYXJrZG93biBzdHJpbmdcbiAgICogQHBhcmFtIHNyY1xuICAgKiBAcGFyYW0gW0hUTUxQYXJzZXJdIEEgV0hBVFdHIERPTSBhbmQgSFRNTCBwYXJzZXIsIHN1Y2ggYXMgSlNET00uIElmIG5vbmUgaXMgc3VwcGxpZWQsIHdpbmRvdy5kb2N1bWVudCB3aWxsIGJlIHVzZWQuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLm1ha2VNYXJrZG93biA9IHRoaXMubWFrZU1kID0gZnVuY3Rpb24gKHNyYywgSFRNTFBhcnNlcikge1xuXG4gICAgLy8gcmVwbGFjZSBcXHJcXG4gd2l0aCBcXG5cbiAgICBzcmMgPSBzcmMucmVwbGFjZSgvXFxyXFxuL2csICdcXG4nKTtcbiAgICBzcmMgPSBzcmMucmVwbGFjZSgvXFxyL2csICdcXG4nKTsgLy8gb2xkIG1hY3NcblxuICAgIC8vIGR1ZSB0byBhbiBlZGdlIGNhc2UsIHdlIG5lZWQgdG8gZmluZCB0aGlzOiA+IDxcbiAgICAvLyB0byBwcmV2ZW50IHJlbW92aW5nIG9mIG5vbiBzaWxlbnQgd2hpdGUgc3BhY2VzXG4gICAgLy8gZXg6IDxlbT50aGlzIGlzPC9lbT4gPHN0cm9uZz5zcGFydGE8L3N0cm9uZz5cbiAgICBzcmMgPSBzcmMucmVwbGFjZSgvPlsgXFx0XSs8LywgJz7CqE5CU1A7PCcpO1xuXG4gICAgaWYgKCFIVE1MUGFyc2VyKSB7XG4gICAgICBpZiAod2luZG93ICYmIHdpbmRvdy5kb2N1bWVudCkge1xuICAgICAgICBIVE1MUGFyc2VyID0gd2luZG93LmRvY3VtZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdIVE1MUGFyc2VyIGlzIHVuZGVmaW5lZC4gSWYgaW4gYSB3ZWJ3b3JrZXIgb3Igbm9kZWpzIGVudmlyb25tZW50LCB5b3UgbmVlZCB0byBwcm92aWRlIGEgV0hBVFdHIERPTSBhbmQgSFRNTCBzdWNoIGFzIEpTRE9NJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRvYyA9IEhUTUxQYXJzZXIuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZG9jLmlubmVySFRNTCA9IHNyYztcblxuICAgIHZhciBnbG9iYWxzID0ge1xuICAgICAgcHJlTGlzdDogc3Vic3RpdHV0ZVByZUNvZGVUYWdzKGRvYylcbiAgICB9O1xuXG4gICAgLy8gcmVtb3ZlIGFsbCBuZXdsaW5lcyBhbmQgY29sbGFwc2Ugc3BhY2VzXG4gICAgY2xlYW4oZG9jKTtcblxuICAgIC8vIHNvbWUgc3R1ZmYsIGxpa2UgYWNjaWRlbnRhbCByZWZlcmVuY2UgbGlua3MgbXVzdCBub3cgYmUgZXNjYXBlZFxuICAgIC8vIFRPRE9cbiAgICAvLyBkb2MuaW5uZXJIVE1MID0gZG9jLmlubmVySFRNTC5yZXBsYWNlKC9cXFtbXFxTXFx0IF1dLyk7XG5cbiAgICB2YXIgbm9kZXMgPSBkb2MuY2hpbGROb2RlcyxcbiAgICAgICAgbWREb2MgPSAnJztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIG1kRG9jICs9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLm5vZGUnKShub2Rlc1tpXSwgZ2xvYmFscyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYW4gKG5vZGUpIHtcbiAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgbm9kZS5jaGlsZE5vZGVzLmxlbmd0aDsgKytuKSB7XG4gICAgICAgIHZhciBjaGlsZCA9IG5vZGUuY2hpbGROb2Rlc1tuXTtcbiAgICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAzKSB7XG4gICAgICAgICAgaWYgKCEvXFxTLy50ZXN0KGNoaWxkLm5vZGVWYWx1ZSkgJiYgIS9eWyBdKyQvLnRlc3QoY2hpbGQubm9kZVZhbHVlKSkge1xuICAgICAgICAgICAgbm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7XG4gICAgICAgICAgICAtLW47XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoaWxkLm5vZGVWYWx1ZSA9IGNoaWxkLm5vZGVWYWx1ZS5zcGxpdCgnXFxuJykuam9pbignICcpO1xuICAgICAgICAgICAgY2hpbGQubm9kZVZhbHVlID0gY2hpbGQubm9kZVZhbHVlLnJlcGxhY2UoLyhcXHMpKy9nLCAnJDEnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgICBjbGVhbihjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBmaW5kIGFsbCBwcmUgdGFncyBhbmQgcmVwbGFjZSBjb250ZW50cyB3aXRoIHBsYWNlaG9sZGVyXG4gICAgLy8gd2UgbmVlZCB0aGlzIHNvIHRoYXQgd2UgY2FuIHJlbW92ZSBhbGwgaW5kZW50YXRpb24gZnJvbSBodG1sXG4gICAgLy8gdG8gZWFzZSB1cCBwYXJzaW5nXG4gICAgZnVuY3Rpb24gc3Vic3RpdHV0ZVByZUNvZGVUYWdzIChkb2MpIHtcblxuICAgICAgdmFyIHByZXMgPSBkb2MucXVlcnlTZWxlY3RvckFsbCgncHJlJyksXG4gICAgICAgICAgcHJlc1BIID0gW107XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlcy5sZW5ndGg7ICsraSkge1xuXG4gICAgICAgIGlmIChwcmVzW2ldLmNoaWxkRWxlbWVudENvdW50ID09PSAxICYmIHByZXNbaV0uZmlyc3RDaGlsZC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdjb2RlJykge1xuICAgICAgICAgIHZhciBjb250ZW50ID0gcHJlc1tpXS5maXJzdENoaWxkLmlubmVySFRNTC50cmltKCksXG4gICAgICAgICAgICAgIGxhbmd1YWdlID0gcHJlc1tpXS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSgnZGF0YS1sYW5ndWFnZScpIHx8ICcnO1xuXG4gICAgICAgICAgLy8gaWYgZGF0YS1sYW5ndWFnZSBhdHRyaWJ1dGUgaXMgbm90IGRlZmluZWQsIHRoZW4gd2UgbG9vayBmb3IgY2xhc3MgbGFuZ3VhZ2UtKlxuICAgICAgICAgIGlmIChsYW5ndWFnZSA9PT0gJycpIHtcbiAgICAgICAgICAgIHZhciBjbGFzc2VzID0gcHJlc1tpXS5maXJzdENoaWxkLmNsYXNzTmFtZS5zcGxpdCgnICcpO1xuICAgICAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCBjbGFzc2VzLmxlbmd0aDsgKytjKSB7XG4gICAgICAgICAgICAgIHZhciBtYXRjaGVzID0gY2xhc3Nlc1tjXS5tYXRjaCgvXmxhbmd1YWdlLSguKykkLyk7XG4gICAgICAgICAgICAgIGlmIChtYXRjaGVzICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbGFuZ3VhZ2UgPSBtYXRjaGVzWzFdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gdW5lc2NhcGUgaHRtbCBlbnRpdGllcyBpbiBjb250ZW50XG4gICAgICAgICAgY29udGVudCA9IHNob3dkb3duLmhlbHBlci51bmVzY2FwZUhUTUxFbnRpdGllcyhjb250ZW50KTtcblxuICAgICAgICAgIHByZXNQSC5wdXNoKGNvbnRlbnQpO1xuICAgICAgICAgIHByZXNbaV0ub3V0ZXJIVE1MID0gJzxwcmVjb2RlIGxhbmd1YWdlPVwiJyArIGxhbmd1YWdlICsgJ1wiIHByZWNvZGVudW09XCInICsgaS50b1N0cmluZygpICsgJ1wiPjwvcHJlY29kZT4nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZXNQSC5wdXNoKHByZXNbaV0uaW5uZXJIVE1MKTtcbiAgICAgICAgICBwcmVzW2ldLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgIHByZXNbaV0uc2V0QXR0cmlidXRlKCdwcmVudW0nLCBpLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJlc1BIO1xuICAgIH1cblxuICAgIHJldHVybiBtZERvYztcbiAgfTtcblxuICAvKipcbiAgICogU2V0IGFuIG9wdGlvbiBvZiB0aGlzIENvbnZlcnRlciBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICovXG4gIHRoaXMuc2V0T3B0aW9uID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICBvcHRpb25zW2tleV0gPSB2YWx1ZTtcbiAgfTtcblxuICAvKipcbiAgICogR2V0IHRoZSBvcHRpb24gb2YgdGhpcyBDb252ZXJ0ZXIgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG4gIHRoaXMuZ2V0T3B0aW9uID0gZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBvcHRpb25zW2tleV07XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgb3B0aW9ucyBvZiB0aGlzIENvbnZlcnRlciBpbnN0YW5jZVxuICAgKiBAcmV0dXJucyB7e319XG4gICAqL1xuICB0aGlzLmdldE9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEFkZCBleHRlbnNpb24gdG8gVEhJUyBjb252ZXJ0ZXJcbiAgICogQHBhcmFtIHt7fX0gZXh0ZW5zaW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZT1udWxsXVxuICAgKi9cbiAgdGhpcy5hZGRFeHRlbnNpb24gPSBmdW5jdGlvbiAoZXh0ZW5zaW9uLCBuYW1lKSB7XG4gICAgbmFtZSA9IG5hbWUgfHwgbnVsbDtcbiAgICBfcGFyc2VFeHRlbnNpb24oZXh0ZW5zaW9uLCBuYW1lKTtcbiAgfTtcblxuICAvKipcbiAgICogVXNlIGEgZ2xvYmFsIHJlZ2lzdGVyZWQgZXh0ZW5zaW9uIHdpdGggVEhJUyBjb252ZXJ0ZXJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV4dGVuc2lvbk5hbWUgTmFtZSBvZiB0aGUgcHJldmlvdXNseSByZWdpc3RlcmVkIGV4dGVuc2lvblxuICAgKi9cbiAgdGhpcy51c2VFeHRlbnNpb24gPSBmdW5jdGlvbiAoZXh0ZW5zaW9uTmFtZSkge1xuICAgIF9wYXJzZUV4dGVuc2lvbihleHRlbnNpb25OYW1lKTtcbiAgfTtcblxuICAvKipcbiAgICogU2V0IHRoZSBmbGF2b3IgVEhJUyBjb252ZXJ0ZXIgc2hvdWxkIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKi9cbiAgdGhpcy5zZXRGbGF2b3IgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIGlmICghZmxhdm9yLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICB0aHJvdyBFcnJvcihuYW1lICsgJyBmbGF2b3Igd2FzIG5vdCBmb3VuZCcpO1xuICAgIH1cbiAgICB2YXIgcHJlc2V0ID0gZmxhdm9yW25hbWVdO1xuICAgIHNldENvbnZGbGF2b3IgPSBuYW1lO1xuICAgIGZvciAodmFyIG9wdGlvbiBpbiBwcmVzZXQpIHtcbiAgICAgIGlmIChwcmVzZXQuaGFzT3duUHJvcGVydHkob3B0aW9uKSkge1xuICAgICAgICBvcHRpb25zW29wdGlvbl0gPSBwcmVzZXRbb3B0aW9uXTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgY3VycmVudGx5IHNldCBmbGF2b3Igb2YgdGhpcyBjb252ZXJ0ZXJcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHRoaXMuZ2V0Rmxhdm9yID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBzZXRDb252Rmxhdm9yO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZW1vdmUgYW4gZXh0ZW5zaW9uIGZyb20gVEhJUyBjb252ZXJ0ZXIuXG4gICAqIE5vdGU6IFRoaXMgaXMgYSBjb3N0bHkgb3BlcmF0aW9uLiBJdCdzIGJldHRlciB0byBpbml0aWFsaXplIGEgbmV3IGNvbnZlcnRlclxuICAgKiBhbmQgc3BlY2lmeSB0aGUgZXh0ZW5zaW9ucyB5b3Ugd2lzaCB0byB1c2VcbiAgICogQHBhcmFtIHtBcnJheX0gZXh0ZW5zaW9uXG4gICAqL1xuICB0aGlzLnJlbW92ZUV4dGVuc2lvbiA9IGZ1bmN0aW9uIChleHRlbnNpb24pIHtcbiAgICBpZiAoIXNob3dkb3duLmhlbHBlci5pc0FycmF5KGV4dGVuc2lvbikpIHtcbiAgICAgIGV4dGVuc2lvbiA9IFtleHRlbnNpb25dO1xuICAgIH1cbiAgICBmb3IgKHZhciBhID0gMDsgYSA8IGV4dGVuc2lvbi5sZW5ndGg7ICsrYSkge1xuICAgICAgdmFyIGV4dCA9IGV4dGVuc2lvblthXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFuZ0V4dGVuc2lvbnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKGxhbmdFeHRlbnNpb25zW2ldID09PSBleHQpIHtcbiAgICAgICAgICBsYW5nRXh0ZW5zaW9ucy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBvdXRwdXRNb2RpZmllcnMubGVuZ3RoOyArK2lpKSB7XG4gICAgICAgIGlmIChvdXRwdXRNb2RpZmllcnNbaWldID09PSBleHQpIHtcbiAgICAgICAgICBvdXRwdXRNb2RpZmllcnMuc3BsaWNlKGlpLCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogR2V0IGFsbCBleHRlbnNpb24gb2YgVEhJUyBjb252ZXJ0ZXJcbiAgICogQHJldHVybnMge3tsYW5ndWFnZTogQXJyYXksIG91dHB1dDogQXJyYXl9fVxuICAgKi9cbiAgdGhpcy5nZXRBbGxFeHRlbnNpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBsYW5ndWFnZTogbGFuZ0V4dGVuc2lvbnMsXG4gICAgICBvdXRwdXQ6IG91dHB1dE1vZGlmaWVyc1xuICAgIH07XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbWV0YWRhdGEgb2YgdGhlIHByZXZpb3VzbHkgcGFyc2VkIGRvY3VtZW50XG4gICAqIEBwYXJhbSByYXdcbiAgICogQHJldHVybnMge3N0cmluZ3x7fX1cbiAgICovXG4gIHRoaXMuZ2V0TWV0YWRhdGEgPSBmdW5jdGlvbiAocmF3KSB7XG4gICAgaWYgKHJhdykge1xuICAgICAgcmV0dXJuIG1ldGFkYXRhLnJhdztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG1ldGFkYXRhLnBhcnNlZDtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbWV0YWRhdGEgZm9ybWF0IG9mIHRoZSBwcmV2aW91c2x5IHBhcnNlZCBkb2N1bWVudFxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgdGhpcy5nZXRNZXRhZGF0YUZvcm1hdCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbWV0YWRhdGEuZm9ybWF0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBQcml2YXRlOiBzZXQgYSBzaW5nbGUga2V5LCB2YWx1ZSBtZXRhZGF0YSBwYWlyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqL1xuICB0aGlzLl9zZXRNZXRhZGF0YVBhaXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIG1ldGFkYXRhLnBhcnNlZFtrZXldID0gdmFsdWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIFByaXZhdGU6IHNldCBtZXRhZGF0YSBmb3JtYXRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZvcm1hdFxuICAgKi9cbiAgdGhpcy5fc2V0TWV0YWRhdGFGb3JtYXQgPSBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgbWV0YWRhdGEuZm9ybWF0ID0gZm9ybWF0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBQcml2YXRlOiBzZXQgbWV0YWRhdGEgcmF3IHRleHRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJhd1xuICAgKi9cbiAgdGhpcy5fc2V0TWV0YWRhdGFSYXcgPSBmdW5jdGlvbiAocmF3KSB7XG4gICAgbWV0YWRhdGEucmF3ID0gcmF3O1xuICB9O1xufTtcblxyXG4vKipcbiAqIFR1cm4gTWFya2Rvd24gbGluayBzaG9ydGN1dHMgaW50byBYSFRNTCA8YT4gdGFncy5cbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdhbmNob3JzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2FuY2hvcnMuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgdmFyIHdyaXRlQW5jaG9yVGFnID0gZnVuY3Rpb24gKHdob2xlTWF0Y2gsIGxpbmtUZXh0LCBsaW5rSWQsIHVybCwgbTUsIG02LCB0aXRsZSkge1xuICAgIGlmIChzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQodGl0bGUpKSB7XG4gICAgICB0aXRsZSA9ICcnO1xuICAgIH1cbiAgICBsaW5rSWQgPSBsaW5rSWQudG9Mb3dlckNhc2UoKTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgZXhwbGljaXQgZW1wdHkgdXJsXG4gICAgaWYgKHdob2xlTWF0Y2guc2VhcmNoKC9cXCg8P1xccyo+PyA/KFsnXCJdLipbJ1wiXSk/XFwpJC9tKSA+IC0xKSB7XG4gICAgICB1cmwgPSAnJztcbiAgICB9IGVsc2UgaWYgKCF1cmwpIHtcbiAgICAgIGlmICghbGlua0lkKSB7XG4gICAgICAgIC8vIGxvd2VyLWNhc2UgYW5kIHR1cm4gZW1iZWRkZWQgbmV3bGluZXMgaW50byBzcGFjZXNcbiAgICAgICAgbGlua0lkID0gbGlua1RleHQudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8gP1xcbi9nLCAnICcpO1xuICAgICAgfVxuICAgICAgdXJsID0gJyMnICsgbGlua0lkO1xuXG4gICAgICBpZiAoIXNob3dkb3duLmhlbHBlci5pc1VuZGVmaW5lZChnbG9iYWxzLmdVcmxzW2xpbmtJZF0pKSB7XG4gICAgICAgIHVybCA9IGdsb2JhbHMuZ1VybHNbbGlua0lkXTtcbiAgICAgICAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoZ2xvYmFscy5nVGl0bGVzW2xpbmtJZF0pKSB7XG4gICAgICAgICAgdGl0bGUgPSBnbG9iYWxzLmdUaXRsZXNbbGlua0lkXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHdob2xlTWF0Y2g7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy91cmwgPSBzaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVycyh1cmwsICcqXycsIGZhbHNlKTsgLy8gcmVwbGFjZWQgbGluZSB0byBpbXByb3ZlIHBlcmZvcm1hbmNlXG4gICAgdXJsID0gdXJsLnJlcGxhY2Uoc2hvd2Rvd24uaGVscGVyLnJlZ2V4ZXMuYXN0ZXJpc2tEYXNoQW5kQ29sb24sIHNob3dkb3duLmhlbHBlci5lc2NhcGVDaGFyYWN0ZXJzQ2FsbGJhY2spO1xuXG4gICAgdmFyIHJlc3VsdCA9ICc8YSBocmVmPVwiJyArIHVybCArICdcIic7XG5cbiAgICBpZiAodGl0bGUgIT09ICcnICYmIHRpdGxlICE9PSBudWxsKSB7XG4gICAgICB0aXRsZSA9IHRpdGxlLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbiAgICAgIC8vdGl0bGUgPSBzaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVycyh0aXRsZSwgJypfJywgZmFsc2UpOyAvLyByZXBsYWNlZCBsaW5lIHRvIGltcHJvdmUgcGVyZm9ybWFuY2VcbiAgICAgIHRpdGxlID0gdGl0bGUucmVwbGFjZShzaG93ZG93bi5oZWxwZXIucmVnZXhlcy5hc3Rlcmlza0Rhc2hBbmRDb2xvbiwgc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnNDYWxsYmFjayk7XG4gICAgICByZXN1bHQgKz0gJyB0aXRsZT1cIicgKyB0aXRsZSArICdcIic7XG4gICAgfVxuXG4gICAgLy8gb3B0aW9uTGlua3NJbk5ld1dpbmRvdyBvbmx5IGFwcGxpZXNcbiAgICAvLyB0byBleHRlcm5hbCBsaW5rcy4gSGFzaCBsaW5rcyAoIykgb3BlbiBpbiBzYW1lIHBhZ2VcbiAgICBpZiAob3B0aW9ucy5vcGVuTGlua3NJbk5ld1dpbmRvdyAmJiAhL14jLy50ZXN0KHVybCkpIHtcbiAgICAgIC8vIGVzY2FwZWQgX1xuICAgICAgcmVzdWx0ICs9ICcgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiIHRhcmdldD1cIsKoRTk1RWJsYW5rXCInO1xuICAgIH1cblxuICAgIHJlc3VsdCArPSAnPicgKyBsaW5rVGV4dCArICc8L2E+JztcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gRmlyc3QsIGhhbmRsZSByZWZlcmVuY2Utc3R5bGUgbGlua3M6IFtsaW5rIHRleHRdIFtpZF1cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxbKCg/OlxcW1teXFxdXSpdfFteXFxbXFxdXSkqKV0gPyg/OlxcbiAqKT9cXFsoLio/KV0oKSgpKCkoKS9nLCB3cml0ZUFuY2hvclRhZyk7XG5cbiAgLy8gTmV4dCwgaW5saW5lLXN0eWxlIGxpbmtzOiBbbGluayB0ZXh0XSh1cmwgXCJvcHRpb25hbCB0aXRsZVwiKVxuICAvLyBjYXNlcyB3aXRoIGNyYXp5IHVybHMgbGlrZSAuL2ltYWdlL2NhdDEpLnBuZ1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXFsoKD86XFxbW15cXF1dKl18W15cXFtcXF1dKSopXSgpWyBcXHRdKlxcKFsgXFx0XT88KFtePl0qKT4oPzpbIFxcdF0qKChbXCInXSkoW15cIl0qPylcXDUpKT9bIFxcdF0/XFwpL2csXG4gICAgd3JpdGVBbmNob3JUYWcpO1xuXG4gIC8vIG5vcm1hbCBjYXNlc1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXFsoKD86XFxbW15cXF1dKl18W15cXFtcXF1dKSopXSgpWyBcXHRdKlxcKFsgXFx0XT88PyhbXFxTXSs/KD86XFwoW1xcU10qP1xcKVtcXFNdKj8pPyk+Pyg/OlsgXFx0XSooKFtcIiddKShbXlwiXSo/KVxcNSkpP1sgXFx0XT9cXCkvZyxcbiAgICB3cml0ZUFuY2hvclRhZyk7XG5cbiAgLy8gaGFuZGxlIHJlZmVyZW5jZS1zdHlsZSBzaG9ydGN1dHM6IFtsaW5rIHRleHRdXG4gIC8vIFRoZXNlIG11c3QgY29tZSBsYXN0IGluIGNhc2UgeW91J3ZlIGFsc28gZ290IFtsaW5rIHRlc3RdWzFdXG4gIC8vIG9yIFtsaW5rIHRlc3RdKC9mb28pXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcWyhbXlxcW1xcXV0rKV0oKSgpKCkoKSgpL2csIHdyaXRlQW5jaG9yVGFnKTtcblxuICAvLyBMYXN0bHkgaGFuZGxlIEdpdGh1Yk1lbnRpb25zIGlmIG9wdGlvbiBpcyBlbmFibGVkXG4gIGlmIChvcHRpb25zLmdoTWVudGlvbnMpIHtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oXnxcXHMpKFxcXFwpPyhAKFthLXpcXGRdKyg/OlthLXpcXGQuLV0rP1thLXpcXGRdKykqKSkvZ21pLCBmdW5jdGlvbiAod20sIHN0LCBlc2NhcGUsIG1lbnRpb25zLCB1c2VybmFtZSkge1xuICAgICAgaWYgKGVzY2FwZSA9PT0gJ1xcXFwnKSB7XG4gICAgICAgIHJldHVybiBzdCArIG1lbnRpb25zO1xuICAgICAgfVxuXG4gICAgICAvL2NoZWNrIGlmIG9wdGlvbnMuZ2hNZW50aW9uc0xpbmsgaXMgYSBzdHJpbmdcbiAgICAgIGlmICghc2hvd2Rvd24uaGVscGVyLmlzU3RyaW5nKG9wdGlvbnMuZ2hNZW50aW9uc0xpbmspKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZ2hNZW50aW9uc0xpbmsgb3B0aW9uIG11c3QgYmUgYSBzdHJpbmcnKTtcbiAgICAgIH1cbiAgICAgIHZhciBsbmsgPSBvcHRpb25zLmdoTWVudGlvbnNMaW5rLnJlcGxhY2UoL1xce3V9L2csIHVzZXJuYW1lKSxcbiAgICAgICAgICB0YXJnZXQgPSAnJztcbiAgICAgIGlmIChvcHRpb25zLm9wZW5MaW5rc0luTmV3V2luZG93KSB7XG4gICAgICAgIHRhcmdldCA9ICcgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiIHRhcmdldD1cIsKoRTk1RWJsYW5rXCInO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0ICsgJzxhIGhyZWY9XCInICsgbG5rICsgJ1wiJyArIHRhcmdldCArICc+JyArIG1lbnRpb25zICsgJzwvYT4nO1xuICAgIH0pO1xuICB9XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnYW5jaG9ycy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuXHJcbi8vIHVybCBhbGxvd2VkIGNoYXJzIFthLXpcXGRfLn46Lz8jW11AISQmJygpKissOz0tXVxuXG52YXIgc2ltcGxlVVJMUmVnZXggID0gLyhbKn5fXSt8XFxiKSgoKGh0dHBzP3xmdHB8ZGljdCk6XFwvXFwvfHd3d1xcLilbXidcIj5cXHNdKz9cXC5bXidcIj5cXHNdKz8pKCkoXFwxKT8oPz1cXHN8JCkoPyFbXCI8Pl0pL2dpLFxuICAgIHNpbXBsZVVSTFJlZ2V4MiA9IC8oWyp+X10rfFxcYikoKChodHRwcz98ZnRwfGRpY3QpOlxcL1xcL3x3d3dcXC4pW14nXCI+XFxzXStcXC5bXidcIj5cXHNdKz8pKFsuIT8sKClcXFtcXF1dKT8oXFwxKT8oPz1cXHN8JCkoPyFbXCI8Pl0pL2dpLFxuICAgIGRlbGltVXJsUmVnZXggICA9IC8oKTwoKChodHRwcz98ZnRwfGRpY3QpOlxcL1xcL3x3d3dcXC4pW14nXCI+XFxzXSspKCk+KCkvZ2ksXG4gICAgc2ltcGxlTWFpbFJlZ2V4ID0gLyhefFxccykoPzptYWlsdG86KT8oW0EtWmEtejAtOSEjJCUmJyorLS89P15fYHt8fX4uXStAWy1hLXowLTldKyhcXC5bLWEtejAtOV0rKSpcXC5bYS16XSspKD89JHxcXHMpL2dtaSxcbiAgICBkZWxpbU1haWxSZWdleCAgPSAvPCgpKD86bWFpbHRvOik/KFstLlxcd10rQFstYS16MC05XSsoXFwuWy1hLXowLTldKykqXFwuW2Etel0rKT4vZ2ksXG5cbiAgICByZXBsYWNlTGluayA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHdtLCBsZWFkaW5nTWFnaWNDaGFycywgbGluaywgbTIsIG0zLCB0cmFpbGluZ1B1bmN0dWF0aW9uLCB0cmFpbGluZ01hZ2ljQ2hhcnMpIHtcbiAgICAgICAgbGluayA9IGxpbmsucmVwbGFjZShzaG93ZG93bi5oZWxwZXIucmVnZXhlcy5hc3Rlcmlza0Rhc2hBbmRDb2xvbiwgc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnNDYWxsYmFjayk7XG4gICAgICAgIHZhciBsbmtUeHQgPSBsaW5rLFxuICAgICAgICAgICAgYXBwZW5kID0gJycsXG4gICAgICAgICAgICB0YXJnZXQgPSAnJyxcbiAgICAgICAgICAgIGxtYyAgICA9IGxlYWRpbmdNYWdpY0NoYXJzIHx8ICcnLFxuICAgICAgICAgICAgdG1jICAgID0gdHJhaWxpbmdNYWdpY0NoYXJzIHx8ICcnO1xuICAgICAgICBpZiAoL153d3dcXC4vaS50ZXN0KGxpbmspKSB7XG4gICAgICAgICAgbGluayA9IGxpbmsucmVwbGFjZSgvXnd3d1xcLi9pLCAnaHR0cDovL3d3dy4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5leGNsdWRlVHJhaWxpbmdQdW5jdHVhdGlvbkZyb21VUkxzICYmIHRyYWlsaW5nUHVuY3R1YXRpb24pIHtcbiAgICAgICAgICBhcHBlbmQgPSB0cmFpbGluZ1B1bmN0dWF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLm9wZW5MaW5rc0luTmV3V2luZG93KSB7XG4gICAgICAgICAgdGFyZ2V0ID0gJyByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCIgdGFyZ2V0PVwiwqhFOTVFYmxhbmtcIic7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxtYyArICc8YSBocmVmPVwiJyArIGxpbmsgKyAnXCInICsgdGFyZ2V0ICsgJz4nICsgbG5rVHh0ICsgJzwvYT4nICsgYXBwZW5kICsgdG1jO1xuICAgICAgfTtcbiAgICB9LFxuXG4gICAgcmVwbGFjZU1haWwgPSBmdW5jdGlvbiAob3B0aW9ucywgZ2xvYmFscykge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBiLCBtYWlsKSB7XG4gICAgICAgIHZhciBocmVmID0gJ21haWx0bzonO1xuICAgICAgICBiID0gYiB8fCAnJztcbiAgICAgICAgbWFpbCA9IHNob3dkb3duLnN1YlBhcnNlcigndW5lc2NhcGVTcGVjaWFsQ2hhcnMnKShtYWlsLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICAgICAgaWYgKG9wdGlvbnMuZW5jb2RlRW1haWxzKSB7XG4gICAgICAgICAgaHJlZiA9IHNob3dkb3duLmhlbHBlci5lbmNvZGVFbWFpbEFkZHJlc3MoaHJlZiArIG1haWwpO1xuICAgICAgICAgIG1haWwgPSBzaG93ZG93bi5oZWxwZXIuZW5jb2RlRW1haWxBZGRyZXNzKG1haWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhyZWYgPSBocmVmICsgbWFpbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYiArICc8YSBocmVmPVwiJyArIGhyZWYgKyAnXCI+JyArIG1haWwgKyAnPC9hPic7XG4gICAgICB9O1xuICAgIH07XG5cbnNob3dkb3duLnN1YlBhcnNlcignYXV0b0xpbmtzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2F1dG9MaW5rcy5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKGRlbGltVXJsUmVnZXgsIHJlcGxhY2VMaW5rKG9wdGlvbnMpKTtcbiAgdGV4dCA9IHRleHQucmVwbGFjZShkZWxpbU1haWxSZWdleCwgcmVwbGFjZU1haWwob3B0aW9ucywgZ2xvYmFscykpO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2F1dG9MaW5rcy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHJldHVybiB0ZXh0O1xufSk7XG5cbnNob3dkb3duLnN1YlBhcnNlcignc2ltcGxpZmllZEF1dG9MaW5rcycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoIW9wdGlvbnMuc2ltcGxpZmllZEF1dG9MaW5rKSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdzaW1wbGlmaWVkQXV0b0xpbmtzLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIGlmIChvcHRpb25zLmV4Y2x1ZGVUcmFpbGluZ1B1bmN0dWF0aW9uRnJvbVVSTHMpIHtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHNpbXBsZVVSTFJlZ2V4MiwgcmVwbGFjZUxpbmsob3B0aW9ucykpO1xuICB9IGVsc2Uge1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2Uoc2ltcGxlVVJMUmVnZXgsIHJlcGxhY2VMaW5rKG9wdGlvbnMpKTtcbiAgfVxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHNpbXBsZU1haWxSZWdleCwgcmVwbGFjZU1haWwob3B0aW9ucywgZ2xvYmFscykpO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ3NpbXBsaWZpZWRBdXRvTGlua3MuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICByZXR1cm4gdGV4dDtcbn0pO1xuXHJcbi8qKlxuICogVGhlc2UgYXJlIGFsbCB0aGUgdHJhbnNmb3JtYXRpb25zIHRoYXQgZm9ybSBibG9jay1sZXZlbFxuICogdGFncyBsaWtlIHBhcmFncmFwaHMsIGhlYWRlcnMsIGFuZCBsaXN0IGl0ZW1zLlxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ2Jsb2NrR2FtdXQnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnYmxvY2tHYW11dC5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAvLyB3ZSBwYXJzZSBibG9ja3F1b3RlcyBmaXJzdCBzbyB0aGF0IHdlIGNhbiBoYXZlIGhlYWRpbmdzIGFuZCBocnNcbiAgLy8gaW5zaWRlIGJsb2NrcXVvdGVzXG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2Jsb2NrUXVvdGVzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2hlYWRlcnMnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAvLyBEbyBIb3Jpem9udGFsIFJ1bGVzOlxuICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdob3Jpem9udGFsUnVsZScpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2xpc3RzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2NvZGVCbG9ja3MnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcigndGFibGVzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgLy8gV2UgYWxyZWFkeSByYW4gX0hhc2hIVE1MQmxvY2tzKCkgYmVmb3JlLCBpbiBNYXJrZG93bigpLCBidXQgdGhhdFxuICAvLyB3YXMgdG8gZXNjYXBlIHJhdyBIVE1MIGluIHRoZSBvcmlnaW5hbCBNYXJrZG93biBzb3VyY2UuIFRoaXMgdGltZSxcbiAgLy8gd2UncmUgZXNjYXBpbmcgdGhlIG1hcmt1cCB3ZSd2ZSBqdXN0IGNyZWF0ZWQsIHNvIHRoYXQgd2UgZG9uJ3Qgd3JhcFxuICAvLyA8cD4gdGFncyBhcm91bmQgYmxvY2stbGV2ZWwgdGFncy5cbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignaGFzaEhUTUxCbG9ja3MnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcigncGFyYWdyYXBocycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2Jsb2NrR2FtdXQuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICByZXR1cm4gdGV4dDtcbn0pO1xuXHJcbnNob3dkb3duLnN1YlBhcnNlcignYmxvY2tRdW90ZXMnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnYmxvY2tRdW90ZXMuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgLy8gYWRkIGEgY291cGxlIGV4dHJhIGxpbmVzIGFmdGVyIHRoZSB0ZXh0IGFuZCBlbmR0ZXh0IG1hcmtcbiAgdGV4dCA9IHRleHQgKyAnXFxuXFxuJztcblxuICB2YXIgcmd4ID0gLyheIHswLDN9PlsgXFx0XT8uK1xcbiguK1xcbikqXFxuKikrL2dtO1xuXG4gIGlmIChvcHRpb25zLnNwbGl0QWRqYWNlbnRCbG9ja3F1b3Rlcykge1xuICAgIHJneCA9IC9eIHswLDN9PltcXHNcXFNdKj8oPzpcXG5cXG4pL2dtO1xuICB9XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZShyZ3gsIGZ1bmN0aW9uIChicSkge1xuICAgIC8vIGF0dGFja2xhYjogaGFjayBhcm91bmQgS29ucXVlcm9yIDMuNS40IGJ1ZzpcbiAgICAvLyBcIi0tLS0tLS0tLS1idWdcIi5yZXBsYWNlKC9eLS9nLFwiXCIpID09IFwiYnVnXCJcbiAgICBicSA9IGJxLnJlcGxhY2UoL15bIFxcdF0qPlsgXFx0XT8vZ20sICcnKTsgLy8gdHJpbSBvbmUgbGV2ZWwgb2YgcXVvdGluZ1xuXG4gICAgLy8gYXR0YWNrbGFiOiBjbGVhbiB1cCBoYWNrXG4gICAgYnEgPSBicS5yZXBsYWNlKC/CqDAvZywgJycpO1xuXG4gICAgYnEgPSBicS5yZXBsYWNlKC9eWyBcXHRdKyQvZ20sICcnKTsgLy8gdHJpbSB3aGl0ZXNwYWNlLW9ubHkgbGluZXNcbiAgICBicSA9IHNob3dkb3duLnN1YlBhcnNlcignZ2l0aHViQ29kZUJsb2NrcycpKGJxLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICBicSA9IHNob3dkb3duLnN1YlBhcnNlcignYmxvY2tHYW11dCcpKGJxLCBvcHRpb25zLCBnbG9iYWxzKTsgLy8gcmVjdXJzZVxuXG4gICAgYnEgPSBicS5yZXBsYWNlKC8oXnxcXG4pL2csICckMSAgJyk7XG4gICAgLy8gVGhlc2UgbGVhZGluZyBzcGFjZXMgc2NyZXcgd2l0aCA8cHJlPiBjb250ZW50LCBzbyB3ZSBuZWVkIHRvIGZpeCB0aGF0OlxuICAgIGJxID0gYnEucmVwbGFjZSgvKFxccyo8cHJlPlteXFxyXSs/PFxcL3ByZT4pL2dtLCBmdW5jdGlvbiAod2hvbGVNYXRjaCwgbTEpIHtcbiAgICAgIHZhciBwcmUgPSBtMTtcbiAgICAgIC8vIGF0dGFja2xhYjogaGFjayBhcm91bmQgS29ucXVlcm9yIDMuNS40IGJ1ZzpcbiAgICAgIHByZSA9IHByZS5yZXBsYWNlKC9eICAvbWcsICfCqDAnKTtcbiAgICAgIHByZSA9IHByZS5yZXBsYWNlKC/CqDAvZywgJycpO1xuICAgICAgcmV0dXJuIHByZTtcbiAgICB9KTtcblxuICAgIHJldHVybiBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hCbG9jaycpKCc8YmxvY2txdW90ZT5cXG4nICsgYnEgKyAnXFxuPC9ibG9ja3F1b3RlPicsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICB9KTtcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdibG9ja1F1b3Rlcy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuXHJcbi8qKlxuICogUHJvY2VzcyBNYXJrZG93biBgPHByZT48Y29kZT5gIGJsb2Nrcy5cbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdjb2RlQmxvY2tzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2NvZGVCbG9ja3MuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgLy8gc2VudGluZWwgd29ya2Fyb3VuZHMgZm9yIGxhY2sgb2YgXFxBIGFuZCBcXFosIHNhZmFyaVxca2h0bWwgYnVnXG4gIHRleHQgKz0gJ8KoMCc7XG5cbiAgdmFyIHBhdHRlcm4gPSAvKD86XFxuXFxufF4pKCg/Oig/OlsgXXs0fXxcXHQpLipcXG4rKSspKFxcbipbIF17MCwzfVteIFxcdFxcbl18KD89wqgwKSkvZztcbiAgdGV4dCA9IHRleHQucmVwbGFjZShwYXR0ZXJuLCBmdW5jdGlvbiAod2hvbGVNYXRjaCwgbTEsIG0yKSB7XG4gICAgdmFyIGNvZGVibG9jayA9IG0xLFxuICAgICAgICBuZXh0Q2hhciA9IG0yLFxuICAgICAgICBlbmQgPSAnXFxuJztcblxuICAgIGNvZGVibG9jayA9IHNob3dkb3duLnN1YlBhcnNlcignb3V0ZGVudCcpKGNvZGVibG9jaywgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgY29kZWJsb2NrID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdlbmNvZGVDb2RlJykoY29kZWJsb2NrLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICBjb2RlYmxvY2sgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2RldGFiJykoY29kZWJsb2NrLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICBjb2RlYmxvY2sgPSBjb2RlYmxvY2sucmVwbGFjZSgvXlxcbisvZywgJycpOyAvLyB0cmltIGxlYWRpbmcgbmV3bGluZXNcbiAgICBjb2RlYmxvY2sgPSBjb2RlYmxvY2sucmVwbGFjZSgvXFxuKyQvZywgJycpOyAvLyB0cmltIHRyYWlsaW5nIG5ld2xpbmVzXG5cbiAgICBpZiAob3B0aW9ucy5vbWl0RXh0cmFXTEluQ29kZUJsb2Nrcykge1xuICAgICAgZW5kID0gJyc7XG4gICAgfVxuXG4gICAgY29kZWJsb2NrID0gJzxwcmU+PGNvZGU+JyArIGNvZGVibG9jayArIGVuZCArICc8L2NvZGU+PC9wcmU+JztcblxuICAgIHJldHVybiBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hCbG9jaycpKGNvZGVibG9jaywgb3B0aW9ucywgZ2xvYmFscykgKyBuZXh0Q2hhcjtcbiAgfSk7XG5cbiAgLy8gc3RyaXAgc2VudGluZWxcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvwqgwLywgJycpO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2NvZGVCbG9ja3MuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcblxyXG4vKipcbiAqXG4gKiAgICogIEJhY2t0aWNrIHF1b3RlcyBhcmUgdXNlZCBmb3IgPGNvZGU+PC9jb2RlPiBzcGFucy5cbiAqXG4gKiAgICogIFlvdSBjYW4gdXNlIG11bHRpcGxlIGJhY2t0aWNrcyBhcyB0aGUgZGVsaW1pdGVycyBpZiB5b3Ugd2FudCB0b1xuICogICAgIGluY2x1ZGUgbGl0ZXJhbCBiYWNrdGlja3MgaW4gdGhlIGNvZGUgc3Bhbi4gU28sIHRoaXMgaW5wdXQ6XG4gKlxuICogICAgICAgICBKdXN0IHR5cGUgYGBmb28gYGJhcmAgYmF6YGAgYXQgdGhlIHByb21wdC5cbiAqXG4gKiAgICAgICBXaWxsIHRyYW5zbGF0ZSB0bzpcbiAqXG4gKiAgICAgICAgIDxwPkp1c3QgdHlwZSA8Y29kZT5mb28gYGJhcmAgYmF6PC9jb2RlPiBhdCB0aGUgcHJvbXB0LjwvcD5cbiAqXG4gKiAgICBUaGVyZSdzIG5vIGFyYml0cmFyeSBsaW1pdCB0byB0aGUgbnVtYmVyIG9mIGJhY2t0aWNrcyB5b3VcbiAqICAgIGNhbiB1c2UgYXMgZGVsaW10ZXJzLiBJZiB5b3UgbmVlZCB0aHJlZSBjb25zZWN1dGl2ZSBiYWNrdGlja3NcbiAqICAgIGluIHlvdXIgY29kZSwgdXNlIGZvdXIgZm9yIGRlbGltaXRlcnMsIGV0Yy5cbiAqXG4gKiAgKiAgWW91IGNhbiB1c2Ugc3BhY2VzIHRvIGdldCBsaXRlcmFsIGJhY2t0aWNrcyBhdCB0aGUgZWRnZXM6XG4gKlxuICogICAgICAgICAuLi4gdHlwZSBgYCBgYmFyYCBgYCAuLi5cbiAqXG4gKiAgICAgICBUdXJucyB0bzpcbiAqXG4gKiAgICAgICAgIC4uLiB0eXBlIDxjb2RlPmBiYXJgPC9jb2RlPiAuLi5cbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdjb2RlU3BhbnMnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnY29kZVNwYW5zLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIGlmICh0eXBlb2YgKHRleHQpID09PSAndW5kZWZpbmVkJykge1xuICAgIHRleHQgPSAnJztcbiAgfVxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oXnxbXlxcXFxdKShgKykoW15cXHJdKj9bXmBdKVxcMig/IWApL2dtLFxuICAgIGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBtMSwgbTIsIG0zKSB7XG4gICAgICB2YXIgYyA9IG0zO1xuICAgICAgYyA9IGMucmVwbGFjZSgvXihbIFxcdF0qKS9nLCAnJyk7XHQvLyBsZWFkaW5nIHdoaXRlc3BhY2VcbiAgICAgIGMgPSBjLnJlcGxhY2UoL1sgXFx0XSokL2csICcnKTtcdC8vIHRyYWlsaW5nIHdoaXRlc3BhY2VcbiAgICAgIGMgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2VuY29kZUNvZGUnKShjLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICAgIGMgPSBtMSArICc8Y29kZT4nICsgYyArICc8L2NvZGU+JztcbiAgICAgIGMgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hIVE1MU3BhbnMnKShjLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICAgIHJldHVybiBjO1xuICAgIH1cbiAgKTtcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdjb2RlU3BhbnMuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcblxyXG4vKipcbiAqIENyZWF0ZSBhIGZ1bGwgSFRNTCBkb2N1bWVudCBmcm9tIHRoZSBwcm9jZXNzZWQgbWFya2Rvd25cbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdjb21wbGV0ZUhUTUxEb2N1bWVudCcsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoIW9wdGlvbnMuY29tcGxldGVIVE1MRG9jdW1lbnQpIHtcbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2NvbXBsZXRlSFRNTERvY3VtZW50LmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHZhciBkb2N0eXBlID0gJ2h0bWwnLFxuICAgICAgZG9jdHlwZVBhcnNlZCA9ICc8IURPQ1RZUEUgSFRNTD5cXG4nLFxuICAgICAgdGl0bGUgPSAnJyxcbiAgICAgIGNoYXJzZXQgPSAnPG1ldGEgY2hhcnNldD1cInV0Zi04XCI+XFxuJyxcbiAgICAgIGxhbmcgPSAnJyxcbiAgICAgIG1ldGFkYXRhID0gJyc7XG5cbiAgaWYgKHR5cGVvZiBnbG9iYWxzLm1ldGFkYXRhLnBhcnNlZC5kb2N0eXBlICE9PSAndW5kZWZpbmVkJykge1xuICAgIGRvY3R5cGVQYXJzZWQgPSAnPCFET0NUWVBFICcgKyAgZ2xvYmFscy5tZXRhZGF0YS5wYXJzZWQuZG9jdHlwZSArICc+XFxuJztcbiAgICBkb2N0eXBlID0gZ2xvYmFscy5tZXRhZGF0YS5wYXJzZWQuZG9jdHlwZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKGRvY3R5cGUgPT09ICdodG1sJyB8fCBkb2N0eXBlID09PSAnaHRtbDUnKSB7XG4gICAgICBjaGFyc2V0ID0gJzxtZXRhIGNoYXJzZXQ9XCJ1dGYtOFwiPic7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgbWV0YSBpbiBnbG9iYWxzLm1ldGFkYXRhLnBhcnNlZCkge1xuICAgIGlmIChnbG9iYWxzLm1ldGFkYXRhLnBhcnNlZC5oYXNPd25Qcm9wZXJ0eShtZXRhKSkge1xuICAgICAgc3dpdGNoIChtZXRhLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgY2FzZSAnZG9jdHlwZSc6XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAndGl0bGUnOlxuICAgICAgICAgIHRpdGxlID0gJzx0aXRsZT4nICsgIGdsb2JhbHMubWV0YWRhdGEucGFyc2VkLnRpdGxlICsgJzwvdGl0bGU+XFxuJztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdjaGFyc2V0JzpcbiAgICAgICAgICBpZiAoZG9jdHlwZSA9PT0gJ2h0bWwnIHx8IGRvY3R5cGUgPT09ICdodG1sNScpIHtcbiAgICAgICAgICAgIGNoYXJzZXQgPSAnPG1ldGEgY2hhcnNldD1cIicgKyBnbG9iYWxzLm1ldGFkYXRhLnBhcnNlZC5jaGFyc2V0ICsgJ1wiPlxcbic7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoYXJzZXQgPSAnPG1ldGEgbmFtZT1cImNoYXJzZXRcIiBjb250ZW50PVwiJyArIGdsb2JhbHMubWV0YWRhdGEucGFyc2VkLmNoYXJzZXQgKyAnXCI+XFxuJztcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnbGFuZ3VhZ2UnOlxuICAgICAgICBjYXNlICdsYW5nJzpcbiAgICAgICAgICBsYW5nID0gJyBsYW5nPVwiJyArIGdsb2JhbHMubWV0YWRhdGEucGFyc2VkW21ldGFdICsgJ1wiJztcbiAgICAgICAgICBtZXRhZGF0YSArPSAnPG1ldGEgbmFtZT1cIicgKyBtZXRhICsgJ1wiIGNvbnRlbnQ9XCInICsgZ2xvYmFscy5tZXRhZGF0YS5wYXJzZWRbbWV0YV0gKyAnXCI+XFxuJztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIG1ldGFkYXRhICs9ICc8bWV0YSBuYW1lPVwiJyArIG1ldGEgKyAnXCIgY29udGVudD1cIicgKyBnbG9iYWxzLm1ldGFkYXRhLnBhcnNlZFttZXRhXSArICdcIj5cXG4nO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRleHQgPSBkb2N0eXBlUGFyc2VkICsgJzxodG1sJyArIGxhbmcgKyAnPlxcbjxoZWFkPlxcbicgKyB0aXRsZSArIGNoYXJzZXQgKyBtZXRhZGF0YSArICc8L2hlYWQ+XFxuPGJvZHk+XFxuJyArIHRleHQudHJpbSgpICsgJ1xcbjwvYm9keT5cXG48L2h0bWw+JztcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdjb21wbGV0ZUhUTUxEb2N1bWVudC5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuXHJcbi8qKlxuICogQ29udmVydCBhbGwgdGFicyB0byBzcGFjZXNcbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdkZXRhYicsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnZGV0YWIuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgLy8gZXhwYW5kIGZpcnN0IG4tMSB0YWJzXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcdCg/PVxcdCkvZywgJyAgICAnKTsgLy8gZ190YWJfd2lkdGhcblxuICAvLyByZXBsYWNlIHRoZSBudGggd2l0aCB0d28gc2VudGluZWxzXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcdC9nLCAnwqhBwqhCJyk7XG5cbiAgLy8gdXNlIHRoZSBzZW50aW5lbCB0byBhbmNob3Igb3VyIHJlZ2V4IHNvIGl0IGRvZXNuJ3QgZXhwbG9kZVxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC/CqEIoLis/KcKoQS9nLCBmdW5jdGlvbiAod2hvbGVNYXRjaCwgbTEpIHtcbiAgICB2YXIgbGVhZGluZ1RleHQgPSBtMSxcbiAgICAgICAgbnVtU3BhY2VzID0gNCAtIGxlYWRpbmdUZXh0Lmxlbmd0aCAlIDQ7ICAvLyBnX3RhYl93aWR0aFxuXG4gICAgLy8gdGhlcmUgKm11c3QqIGJlIGEgYmV0dGVyIHdheSB0byBkbyB0aGlzOlxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtU3BhY2VzOyBpKyspIHtcbiAgICAgIGxlYWRpbmdUZXh0ICs9ICcgJztcbiAgICB9XG5cbiAgICByZXR1cm4gbGVhZGluZ1RleHQ7XG4gIH0pO1xuXG4gIC8vIGNsZWFuIHVwIHNlbnRpbmVsc1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC/CqEEvZywgJyAgICAnKTsgIC8vIGdfdGFiX3dpZHRoXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL8KoQi9nLCAnJyk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnZGV0YWIuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcblxyXG5zaG93ZG93bi5zdWJQYXJzZXIoJ2VsbGlwc2lzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGlmICghb3B0aW9ucy5lbGxpcHNpcykge1xuICAgIHJldHVybiB0ZXh0O1xuICB9XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnZWxsaXBzaXMuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFwuXFwuXFwuL2csICfigKYnKTtcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdlbGxpcHNpcy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHJldHVybiB0ZXh0O1xufSk7XG5cclxuLyoqXG4gKiBUdXJuIGVtb2ppIGNvZGVzIGludG8gZW1vamlzXG4gKlxuICogTGlzdCBvZiBzdXBwb3J0ZWQgZW1vamlzOiBodHRwczovL2dpdGh1Yi5jb20vc2hvd2Rvd25qcy9zaG93ZG93bi93aWtpL0Vtb2ppc1xuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ2Vtb2ppJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGlmICghb3B0aW9ucy5lbW9qaSkge1xuICAgIHJldHVybiB0ZXh0O1xuICB9XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnZW1vamkuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgdmFyIGVtb2ppUmd4ID0gLzooW1xcU10rPyk6L2c7XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZShlbW9qaVJneCwgZnVuY3Rpb24gKHdtLCBlbW9qaUNvZGUpIHtcbiAgICBpZiAoc2hvd2Rvd24uaGVscGVyLmVtb2ppcy5oYXNPd25Qcm9wZXJ0eShlbW9qaUNvZGUpKSB7XG4gICAgICByZXR1cm4gc2hvd2Rvd24uaGVscGVyLmVtb2ppc1tlbW9qaUNvZGVdO1xuICAgIH1cbiAgICByZXR1cm4gd207XG4gIH0pO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2Vtb2ppLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgcmV0dXJuIHRleHQ7XG59KTtcblxyXG4vKipcbiAqIFNtYXJ0IHByb2Nlc3NpbmcgZm9yIGFtcGVyc2FuZHMgYW5kIGFuZ2xlIGJyYWNrZXRzIHRoYXQgbmVlZCB0byBiZSBlbmNvZGVkLlxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ2VuY29kZUFtcHNBbmRBbmdsZXMnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2VuY29kZUFtcHNBbmRBbmdsZXMuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgLy8gQW1wZXJzYW5kLWVuY29kaW5nIGJhc2VkIGVudGlyZWx5IG9uIE5hdCBJcm9ucydzIEFtcHV0YXRvciBNVCBwbHVnaW46XG4gIC8vIGh0dHA6Ly9idW1wcG8ubmV0L3Byb2plY3RzL2FtcHV0YXRvci9cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvJig/ISM/W3hYXT8oPzpbMC05YS1mQS1GXSt8XFx3Kyk7KS9nLCAnJmFtcDsnKTtcblxuICAvLyBFbmNvZGUgbmFrZWQgPCdzXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoLzwoPyFbYS16XFwvPyQhXSkvZ2ksICcmbHQ7Jyk7XG5cbiAgLy8gRW5jb2RlIDxcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvPC9nLCAnJmx0OycpO1xuXG4gIC8vIEVuY29kZSA+XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoLz4vZywgJyZndDsnKTtcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdlbmNvZGVBbXBzQW5kQW5nbGVzLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG5cclxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzdHJpbmcsIHdpdGggYWZ0ZXIgcHJvY2Vzc2luZyB0aGUgZm9sbG93aW5nIGJhY2tzbGFzaCBlc2NhcGUgc2VxdWVuY2VzLlxuICpcbiAqIGF0dGFja2xhYjogVGhlIHBvbGl0ZSB3YXkgdG8gZG8gdGhpcyBpcyB3aXRoIHRoZSBuZXcgZXNjYXBlQ2hhcmFjdGVycygpIGZ1bmN0aW9uOlxuICpcbiAqICAgIHRleHQgPSBlc2NhcGVDaGFyYWN0ZXJzKHRleHQsXCJcXFxcXCIsdHJ1ZSk7XG4gKiAgICB0ZXh0ID0gZXNjYXBlQ2hhcmFjdGVycyh0ZXh0LFwiYCpfe31bXSgpPiMrLS4hXCIsdHJ1ZSk7XG4gKlxuICogLi4uYnV0IHdlJ3JlIHNpZGVzdGVwcGluZyBpdHMgdXNlIG9mIHRoZSAoc2xvdykgUmVnRXhwIGNvbnN0cnVjdG9yXG4gKiBhcyBhbiBvcHRpbWl6YXRpb24gZm9yIEZpcmVmb3guICBUaGlzIGZ1bmN0aW9uIGdldHMgY2FsbGVkIGEgTE9ULlxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ2VuY29kZUJhY2tzbGFzaEVzY2FwZXMnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2VuY29kZUJhY2tzbGFzaEVzY2FwZXMuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxcXChcXFxcKS9nLCBzaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVyc0NhbGxiYWNrKTtcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxcXChbYCpfe31cXFtcXF0oKT4jKy4hfj18Oi1dKS9nLCBzaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVyc0NhbGxiYWNrKTtcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdlbmNvZGVCYWNrc2xhc2hFc2NhcGVzLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG5cclxuLyoqXG4gKiBFbmNvZGUvZXNjYXBlIGNlcnRhaW4gY2hhcmFjdGVycyBpbnNpZGUgTWFya2Rvd24gY29kZSBydW5zLlxuICogVGhlIHBvaW50IGlzIHRoYXQgaW4gY29kZSwgdGhlc2UgY2hhcmFjdGVycyBhcmUgbGl0ZXJhbHMsXG4gKiBhbmQgbG9zZSB0aGVpciBzcGVjaWFsIE1hcmtkb3duIG1lYW5pbmdzLlxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ2VuY29kZUNvZGUnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnZW5jb2RlQ29kZS5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAvLyBFbmNvZGUgYWxsIGFtcGVyc2FuZHM7IEhUTUwgZW50aXRpZXMgYXJlIG5vdFxuICAvLyBlbnRpdGllcyB3aXRoaW4gYSBNYXJrZG93biBjb2RlIHNwYW4uXG4gIHRleHQgPSB0ZXh0XG4gICAgLnJlcGxhY2UoLyYvZywgJyZhbXA7JylcbiAgLy8gRG8gdGhlIGFuZ2xlIGJyYWNrZXQgc29uZyBhbmQgZGFuY2U6XG4gICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgLy8gTm93LCBlc2NhcGUgY2hhcmFjdGVycyB0aGF0IGFyZSBtYWdpYyBpbiBNYXJrZG93bjpcbiAgICAucmVwbGFjZSgvKFsqX3t9XFxbXFxdXFxcXD1+LV0pL2csIHNob3dkb3duLmhlbHBlci5lc2NhcGVDaGFyYWN0ZXJzQ2FsbGJhY2spO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2VuY29kZUNvZGUuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcblxyXG4vKipcbiAqIFdpdGhpbiB0YWdzIC0tIG1lYW5pbmcgYmV0d2VlbiA8IGFuZCA+IC0tIGVuY29kZSBbXFwgYCAqIF8gfiA9XSBzbyB0aGV5XG4gKiBkb24ndCBjb25mbGljdCB3aXRoIHRoZWlyIHVzZSBpbiBNYXJrZG93biBmb3IgY29kZSwgaXRhbGljcyBhbmQgc3Ryb25nLlxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ2VzY2FwZVNwZWNpYWxDaGFyc1dpdGhpblRhZ0F0dHJpYnV0ZXMnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2VzY2FwZVNwZWNpYWxDaGFyc1dpdGhpblRhZ0F0dHJpYnV0ZXMuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgLy8gQnVpbGQgYSByZWdleCB0byBmaW5kIEhUTUwgdGFncy5cbiAgdmFyIHRhZ3MgICAgID0gLzxcXC8/W2EtelxcZF86LV0rKD86W1xcc10rW1xcc1xcU10rPyk/Pi9naSxcbiAgICAgIGNvbW1lbnRzID0gLzwhKC0tKD86KD86W14+LV18LVtePl0pKD86W14tXXwtW14tXSkqKS0tKT4vZ2k7XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZSh0YWdzLCBmdW5jdGlvbiAod2hvbGVNYXRjaCkge1xuICAgIHJldHVybiB3aG9sZU1hdGNoXG4gICAgICAucmVwbGFjZSgvKC4pPFxcLz9jb2RlPig/PS4pL2csICckMWAnKVxuICAgICAgLnJlcGxhY2UoLyhbXFxcXGAqX349fF0pL2csIHNob3dkb3duLmhlbHBlci5lc2NhcGVDaGFyYWN0ZXJzQ2FsbGJhY2spO1xuICB9KTtcblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKGNvbW1lbnRzLCBmdW5jdGlvbiAod2hvbGVNYXRjaCkge1xuICAgIHJldHVybiB3aG9sZU1hdGNoXG4gICAgICAucmVwbGFjZSgvKFtcXFxcYCpffj18XSkvZywgc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnNDYWxsYmFjayk7XG4gIH0pO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2VzY2FwZVNwZWNpYWxDaGFyc1dpdGhpblRhZ0F0dHJpYnV0ZXMuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcblxyXG4vKipcbiAqIEhhbmRsZSBnaXRodWIgY29kZWJsb2NrcyBwcmlvciB0byBydW5uaW5nIEhhc2hIVE1MIHNvIHRoYXRcbiAqIEhUTUwgY29udGFpbmVkIHdpdGhpbiB0aGUgY29kZWJsb2NrIGdldHMgZXNjYXBlZCBwcm9wZXJseVxuICogRXhhbXBsZTpcbiAqIGBgYHJ1YnlcbiAqICAgICBkZWYgaGVsbG9fd29ybGQoeClcbiAqICAgICAgIHB1dHMgXCJIZWxsbywgI3t4fVwiXG4gKiAgICAgZW5kXG4gKiBgYGBcbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdnaXRodWJDb2RlQmxvY2tzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIGVhcmx5IGV4aXQgaWYgb3B0aW9uIGlzIG5vdCBlbmFibGVkXG4gIGlmICghb3B0aW9ucy5naENvZGVCbG9ja3MpIHtcbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2dpdGh1YkNvZGVCbG9ja3MuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgdGV4dCArPSAnwqgwJztcblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oPzpefFxcbikoPzogezAsM30pKGBgYCt8fn5+KykoPzogKikoW15cXHNgfl0qKVxcbihbXFxzXFxTXSo/KVxcbig/OiB7MCwzfSlcXDEvZywgZnVuY3Rpb24gKHdob2xlTWF0Y2gsIGRlbGltLCBsYW5ndWFnZSwgY29kZWJsb2NrKSB7XG4gICAgdmFyIGVuZCA9IChvcHRpb25zLm9taXRFeHRyYVdMSW5Db2RlQmxvY2tzKSA/ICcnIDogJ1xcbic7XG5cbiAgICAvLyBGaXJzdCBwYXJzZSB0aGUgZ2l0aHViIGNvZGUgYmxvY2tcbiAgICBjb2RlYmxvY2sgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2VuY29kZUNvZGUnKShjb2RlYmxvY2ssIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIGNvZGVibG9jayA9IHNob3dkb3duLnN1YlBhcnNlcignZGV0YWInKShjb2RlYmxvY2ssIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIGNvZGVibG9jayA9IGNvZGVibG9jay5yZXBsYWNlKC9eXFxuKy9nLCAnJyk7IC8vIHRyaW0gbGVhZGluZyBuZXdsaW5lc1xuICAgIGNvZGVibG9jayA9IGNvZGVibG9jay5yZXBsYWNlKC9cXG4rJC9nLCAnJyk7IC8vIHRyaW0gdHJhaWxpbmcgd2hpdGVzcGFjZVxuXG4gICAgY29kZWJsb2NrID0gJzxwcmU+PGNvZGUnICsgKGxhbmd1YWdlID8gJyBjbGFzcz1cIicgKyBsYW5ndWFnZSArICcgbGFuZ3VhZ2UtJyArIGxhbmd1YWdlICsgJ1wiJyA6ICcnKSArICc+JyArIGNvZGVibG9jayArIGVuZCArICc8L2NvZGU+PC9wcmU+JztcblxuICAgIGNvZGVibG9jayA9IHNob3dkb3duLnN1YlBhcnNlcignaGFzaEJsb2NrJykoY29kZWJsb2NrLCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAgIC8vIFNpbmNlIEdIQ29kZWJsb2NrcyBjYW4gYmUgZmFsc2UgcG9zaXRpdmVzLCB3ZSBuZWVkIHRvXG4gICAgLy8gc3RvcmUgdGhlIHByaW1pdGl2ZSB0ZXh0IGFuZCB0aGUgcGFyc2VkIHRleHQgaW4gYSBnbG9iYWwgdmFyLFxuICAgIC8vIGFuZCB0aGVuIHJldHVybiBhIHRva2VuXG4gICAgcmV0dXJuICdcXG5cXG7CqEcnICsgKGdsb2JhbHMuZ2hDb2RlQmxvY2tzLnB1c2goe3RleHQ6IHdob2xlTWF0Y2gsIGNvZGVibG9jazogY29kZWJsb2NrfSkgLSAxKSArICdHXFxuXFxuJztcbiAgfSk7XG5cbiAgLy8gYXR0YWNrbGFiOiBzdHJpcCBzZW50aW5lbFxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC/CqDAvLCAnJyk7XG5cbiAgcmV0dXJuIGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnZ2l0aHViQ29kZUJsb2Nrcy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xufSk7XG5cclxuc2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoQmxvY2snLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2hhc2hCbG9jay5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvKF5cXG4rfFxcbiskKS9nLCAnJyk7XG4gIHRleHQgPSAnXFxuXFxuwqhLJyArIChnbG9iYWxzLmdIdG1sQmxvY2tzLnB1c2godGV4dCkgLSAxKSArICdLXFxuXFxuJztcbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnaGFzaEJsb2NrLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG5cclxuLyoqXG4gKiBIYXNoIGFuZCBlc2NhcGUgPGNvZGU+IGVsZW1lbnRzIHRoYXQgc2hvdWxkIG5vdCBiZSBwYXJzZWQgYXMgbWFya2Rvd25cbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoQ29kZVRhZ3MnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2hhc2hDb2RlVGFncy5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICB2YXIgcmVwRnVuYyA9IGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBtYXRjaCwgbGVmdCwgcmlnaHQpIHtcbiAgICB2YXIgY29kZWJsb2NrID0gbGVmdCArIHNob3dkb3duLnN1YlBhcnNlcignZW5jb2RlQ29kZScpKG1hdGNoLCBvcHRpb25zLCBnbG9iYWxzKSArIHJpZ2h0O1xuICAgIHJldHVybiAnwqhDJyArIChnbG9iYWxzLmdIdG1sU3BhbnMucHVzaChjb2RlYmxvY2spIC0gMSkgKyAnQyc7XG4gIH07XG5cbiAgLy8gSGFzaCBuYWtlZCA8Y29kZT5cbiAgdGV4dCA9IHNob3dkb3duLmhlbHBlci5yZXBsYWNlUmVjdXJzaXZlUmVnRXhwKHRleHQsIHJlcEZ1bmMsICc8Y29kZVxcXFxiW14+XSo+JywgJzwvY29kZT4nLCAnZ2ltJyk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnaGFzaENvZGVUYWdzLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG5cclxuc2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoRWxlbWVudCcsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICByZXR1cm4gZnVuY3Rpb24gKHdob2xlTWF0Y2gsIG0xKSB7XG4gICAgdmFyIGJsb2NrVGV4dCA9IG0xO1xuXG4gICAgLy8gVW5kbyBkb3VibGUgbGluZXNcbiAgICBibG9ja1RleHQgPSBibG9ja1RleHQucmVwbGFjZSgvXFxuXFxuL2csICdcXG4nKTtcbiAgICBibG9ja1RleHQgPSBibG9ja1RleHQucmVwbGFjZSgvXlxcbi8sICcnKTtcblxuICAgIC8vIHN0cmlwIHRyYWlsaW5nIGJsYW5rIGxpbmVzXG4gICAgYmxvY2tUZXh0ID0gYmxvY2tUZXh0LnJlcGxhY2UoL1xcbiskL2csICcnKTtcblxuICAgIC8vIFJlcGxhY2UgdGhlIGVsZW1lbnQgdGV4dCB3aXRoIGEgbWFya2VyIChcIsKoS3hLXCIgd2hlcmUgeCBpcyBpdHMga2V5KVxuICAgIGJsb2NrVGV4dCA9ICdcXG5cXG7CqEsnICsgKGdsb2JhbHMuZ0h0bWxCbG9ja3MucHVzaChibG9ja1RleHQpIC0gMSkgKyAnS1xcblxcbic7XG5cbiAgICByZXR1cm4gYmxvY2tUZXh0O1xuICB9O1xufSk7XG5cclxuc2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoSFRNTEJsb2NrcycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnaGFzaEhUTUxCbG9ja3MuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgdmFyIGJsb2NrVGFncyA9IFtcbiAgICAgICAgJ3ByZScsXG4gICAgICAgICdkaXYnLFxuICAgICAgICAnaDEnLFxuICAgICAgICAnaDInLFxuICAgICAgICAnaDMnLFxuICAgICAgICAnaDQnLFxuICAgICAgICAnaDUnLFxuICAgICAgICAnaDYnLFxuICAgICAgICAnYmxvY2txdW90ZScsXG4gICAgICAgICd0YWJsZScsXG4gICAgICAgICdkbCcsXG4gICAgICAgICdvbCcsXG4gICAgICAgICd1bCcsXG4gICAgICAgICdzY3JpcHQnLFxuICAgICAgICAnbm9zY3JpcHQnLFxuICAgICAgICAnZm9ybScsXG4gICAgICAgICdmaWVsZHNldCcsXG4gICAgICAgICdpZnJhbWUnLFxuICAgICAgICAnbWF0aCcsXG4gICAgICAgICdzdHlsZScsXG4gICAgICAgICdzZWN0aW9uJyxcbiAgICAgICAgJ2hlYWRlcicsXG4gICAgICAgICdmb290ZXInLFxuICAgICAgICAnbmF2JyxcbiAgICAgICAgJ2FydGljbGUnLFxuICAgICAgICAnYXNpZGUnLFxuICAgICAgICAnYWRkcmVzcycsXG4gICAgICAgICdhdWRpbycsXG4gICAgICAgICdjYW52YXMnLFxuICAgICAgICAnZmlndXJlJyxcbiAgICAgICAgJ2hncm91cCcsXG4gICAgICAgICdvdXRwdXQnLFxuICAgICAgICAndmlkZW8nLFxuICAgICAgICAncCdcbiAgICAgIF0sXG4gICAgICByZXBGdW5jID0gZnVuY3Rpb24gKHdob2xlTWF0Y2gsIG1hdGNoLCBsZWZ0LCByaWdodCkge1xuICAgICAgICB2YXIgdHh0ID0gd2hvbGVNYXRjaDtcbiAgICAgICAgLy8gY2hlY2sgaWYgdGhpcyBodG1sIGVsZW1lbnQgaXMgbWFya2VkIGFzIG1hcmtkb3duXG4gICAgICAgIC8vIGlmIHNvLCBpdCdzIGNvbnRlbnRzIHNob3VsZCBiZSBwYXJzZWQgYXMgbWFya2Rvd25cbiAgICAgICAgaWYgKGxlZnQuc2VhcmNoKC9cXGJtYXJrZG93blxcYi8pICE9PSAtMSkge1xuICAgICAgICAgIHR4dCA9IGxlZnQgKyBnbG9iYWxzLmNvbnZlcnRlci5tYWtlSHRtbChtYXRjaCkgKyByaWdodDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ1xcblxcbsKoSycgKyAoZ2xvYmFscy5nSHRtbEJsb2Nrcy5wdXNoKHR4dCkgLSAxKSArICdLXFxuXFxuJztcbiAgICAgIH07XG5cbiAgaWYgKG9wdGlvbnMuYmFja3NsYXNoRXNjYXBlc0hUTUxUYWdzKSB7XG4gICAgLy8gZW5jb2RlIGJhY2tzbGFzaCBlc2NhcGVkIEhUTUwgdGFnc1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcXFw8KFxcLz9bXj5dKz8pPi9nLCBmdW5jdGlvbiAod20sIGluc2lkZSkge1xuICAgICAgcmV0dXJuICcmbHQ7JyArIGluc2lkZSArICcmZ3Q7JztcbiAgICB9KTtcbiAgfVxuXG4gIC8vIGhhc2ggSFRNTCBCbG9ja3NcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja1RhZ3MubGVuZ3RoOyArK2kpIHtcblxuICAgIHZhciBvcFRhZ1BvcyxcbiAgICAgICAgcmd4MSAgICAgPSBuZXcgUmVnRXhwKCdeIHswLDN9KDwnICsgYmxvY2tUYWdzW2ldICsgJ1xcXFxiW14+XSo+KScsICdpbScpLFxuICAgICAgICBwYXRMZWZ0ICA9ICc8JyArIGJsb2NrVGFnc1tpXSArICdcXFxcYltePl0qPicsXG4gICAgICAgIHBhdFJpZ2h0ID0gJzwvJyArIGJsb2NrVGFnc1tpXSArICc+JztcbiAgICAvLyAxLiBMb29rIGZvciB0aGUgZmlyc3QgcG9zaXRpb24gb2YgdGhlIGZpcnN0IG9wZW5pbmcgSFRNTCB0YWcgaW4gdGhlIHRleHRcbiAgICB3aGlsZSAoKG9wVGFnUG9zID0gc2hvd2Rvd24uaGVscGVyLnJlZ2V4SW5kZXhPZih0ZXh0LCByZ3gxKSkgIT09IC0xKSB7XG5cbiAgICAgIC8vIGlmIHRoZSBIVE1MIHRhZyBpcyBcXCBlc2NhcGVkLCB3ZSBuZWVkIHRvIGVzY2FwZSBpdCBhbmQgYnJlYWtcblxuXG4gICAgICAvLzIuIFNwbGl0IHRoZSB0ZXh0IGluIHRoYXQgcG9zaXRpb25cbiAgICAgIHZhciBzdWJUZXh0cyA9IHNob3dkb3duLmhlbHBlci5zcGxpdEF0SW5kZXgodGV4dCwgb3BUYWdQb3MpLFxuICAgICAgICAgIC8vMy4gTWF0Y2ggcmVjdXJzaXZlbHlcbiAgICAgICAgICBuZXdTdWJUZXh0MSA9IHNob3dkb3duLmhlbHBlci5yZXBsYWNlUmVjdXJzaXZlUmVnRXhwKHN1YlRleHRzWzFdLCByZXBGdW5jLCBwYXRMZWZ0LCBwYXRSaWdodCwgJ2ltJyk7XG5cbiAgICAgIC8vIHByZXZlbnQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgaWYgKG5ld1N1YlRleHQxID09PSBzdWJUZXh0c1sxXSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHRleHQgPSBzdWJUZXh0c1swXS5jb25jYXQobmV3U3ViVGV4dDEpO1xuICAgIH1cbiAgfVxuICAvLyBIUiBTUEVDSUFMIENBU0VcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvKFxcbiB7MCwzfSg8KGhyKVxcYihbXjw+XSkqP1xcLz8+KVsgXFx0XSooPz1cXG57Mix9KSkvZyxcbiAgICBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hFbGVtZW50JykodGV4dCwgb3B0aW9ucywgZ2xvYmFscykpO1xuXG4gIC8vIFNwZWNpYWwgY2FzZSBmb3Igc3RhbmRhbG9uZSBIVE1MIGNvbW1lbnRzXG4gIHRleHQgPSBzaG93ZG93bi5oZWxwZXIucmVwbGFjZVJlY3Vyc2l2ZVJlZ0V4cCh0ZXh0LCBmdW5jdGlvbiAodHh0KSB7XG4gICAgcmV0dXJuICdcXG5cXG7CqEsnICsgKGdsb2JhbHMuZ0h0bWxCbG9ja3MucHVzaCh0eHQpIC0gMSkgKyAnS1xcblxcbic7XG4gIH0sICdeIHswLDN9PCEtLScsICctLT4nLCAnZ20nKTtcblxuICAvLyBQSFAgYW5kIEFTUC1zdHlsZSBwcm9jZXNzb3IgaW5zdHJ1Y3Rpb25zICg8Py4uLj8+IGFuZCA8JS4uLiU+KVxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oPzpcXG5cXG4pKCB7MCwzfSg/OjwoWz8lXSlbXlxccl0qP1xcMj4pWyBcXHRdKig/PVxcbnsyLH0pKS9nLFxuICAgIHNob3dkb3duLnN1YlBhcnNlcignaGFzaEVsZW1lbnQnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnaGFzaEhUTUxCbG9ja3MuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcblxyXG4vKipcbiAqIEhhc2ggc3BhbiBlbGVtZW50cyB0aGF0IHNob3VsZCBub3QgYmUgcGFyc2VkIGFzIG1hcmtkb3duXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcignaGFzaEhUTUxTcGFucycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnaGFzaEhUTUxTcGFucy5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICBmdW5jdGlvbiBoYXNoSFRNTFNwYW4gKGh0bWwpIHtcbiAgICByZXR1cm4gJ8KoQycgKyAoZ2xvYmFscy5nSHRtbFNwYW5zLnB1c2goaHRtbCkgLSAxKSArICdDJztcbiAgfVxuXG4gIC8vIEhhc2ggU2VsZiBDbG9zaW5nIHRhZ3NcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvPFtePl0rP1xcLz4vZ2ksIGZ1bmN0aW9uICh3bSkge1xuICAgIHJldHVybiBoYXNoSFRNTFNwYW4od20pO1xuICB9KTtcblxuICAvLyBIYXNoIHRhZ3Mgd2l0aG91dCBwcm9wZXJ0aWVzXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoLzwoW14+XSs/KT5bXFxzXFxTXSo/PFxcL1xcMT4vZywgZnVuY3Rpb24gKHdtKSB7XG4gICAgcmV0dXJuIGhhc2hIVE1MU3Bhbih3bSk7XG4gIH0pO1xuXG4gIC8vIEhhc2ggdGFncyB3aXRoIHByb3BlcnRpZXNcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvPChbXj5dKz8pXFxzW14+XSs/PltcXHNcXFNdKj88XFwvXFwxPi9nLCBmdW5jdGlvbiAod20pIHtcbiAgICByZXR1cm4gaGFzaEhUTUxTcGFuKHdtKTtcbiAgfSk7XG5cbiAgLy8gSGFzaCBzZWxmIGNsb3NpbmcgdGFncyB3aXRob3V0IC8+XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoLzxbXj5dKz8+L2dpLCBmdW5jdGlvbiAod20pIHtcbiAgICByZXR1cm4gaGFzaEhUTUxTcGFuKHdtKTtcbiAgfSk7XG5cbiAgLypzaG93ZG93bi5oZWxwZXIubWF0Y2hSZWN1cnNpdmVSZWdFeHAodGV4dCwgJzxjb2RlXFxcXGJbXj5dKj4nLCAnPC9jb2RlPicsICdnaScpOyovXG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnaGFzaEhUTUxTcGFucy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuXG4vKipcbiAqIFVuaGFzaCBIVE1MIHNwYW5zXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcigndW5oYXNoSFRNTFNwYW5zJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCd1bmhhc2hIVE1MU3BhbnMuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBnbG9iYWxzLmdIdG1sU3BhbnMubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcmVwVGV4dCA9IGdsb2JhbHMuZ0h0bWxTcGFuc1tpXSxcbiAgICAgICAgLy8gbGltaXRlciB0byBwcmV2ZW50IGluZmluaXRlIGxvb3AgKGFzc3VtZSAxMCBhcyBsaW1pdCBmb3IgcmVjdXJzZSlcbiAgICAgICAgbGltaXQgPSAwO1xuXG4gICAgd2hpbGUgKC/CqEMoXFxkKylDLy50ZXN0KHJlcFRleHQpKSB7XG4gICAgICB2YXIgbnVtID0gUmVnRXhwLiQxO1xuICAgICAgcmVwVGV4dCA9IHJlcFRleHQucmVwbGFjZSgnwqhDJyArIG51bSArICdDJywgZ2xvYmFscy5nSHRtbFNwYW5zW251bV0pO1xuICAgICAgaWYgKGxpbWl0ID09PSAxMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdtYXhpbXVtIG5lc3Rpbmcgb2YgMTAgc3BhbnMgcmVhY2hlZCEhIScpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgICsrbGltaXQ7XG4gICAgfVxuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoJ8KoQycgKyBpICsgJ0MnLCByZXBUZXh0KTtcbiAgfVxuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ3VuaGFzaEhUTUxTcGFucy5hZnRlcicsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICByZXR1cm4gdGV4dDtcbn0pO1xuXHJcbi8qKlxuICogSGFzaCBhbmQgZXNjYXBlIDxwcmU+PGNvZGU+IGVsZW1lbnRzIHRoYXQgc2hvdWxkIG5vdCBiZSBwYXJzZWQgYXMgbWFya2Rvd25cbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoUHJlQ29kZVRhZ3MnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2hhc2hQcmVDb2RlVGFncy5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICB2YXIgcmVwRnVuYyA9IGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBtYXRjaCwgbGVmdCwgcmlnaHQpIHtcbiAgICAvLyBlbmNvZGUgaHRtbCBlbnRpdGllc1xuICAgIHZhciBjb2RlYmxvY2sgPSBsZWZ0ICsgc2hvd2Rvd24uc3ViUGFyc2VyKCdlbmNvZGVDb2RlJykobWF0Y2gsIG9wdGlvbnMsIGdsb2JhbHMpICsgcmlnaHQ7XG4gICAgcmV0dXJuICdcXG5cXG7CqEcnICsgKGdsb2JhbHMuZ2hDb2RlQmxvY2tzLnB1c2goe3RleHQ6IHdob2xlTWF0Y2gsIGNvZGVibG9jazogY29kZWJsb2NrfSkgLSAxKSArICdHXFxuXFxuJztcbiAgfTtcblxuICAvLyBIYXNoIDxwcmU+PGNvZGU+XG4gIHRleHQgPSBzaG93ZG93bi5oZWxwZXIucmVwbGFjZVJlY3Vyc2l2ZVJlZ0V4cCh0ZXh0LCByZXBGdW5jLCAnXiB7MCwzfTxwcmVcXFxcYltePl0qPlxcXFxzKjxjb2RlXFxcXGJbXj5dKj4nLCAnXiB7MCwzfTwvY29kZT5cXFxccyo8L3ByZT4nLCAnZ2ltJyk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnaGFzaFByZUNvZGVUYWdzLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG5cclxuc2hvd2Rvd24uc3ViUGFyc2VyKCdoZWFkZXJzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2hlYWRlcnMuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgdmFyIGhlYWRlckxldmVsU3RhcnQgPSAoaXNOYU4ocGFyc2VJbnQob3B0aW9ucy5oZWFkZXJMZXZlbFN0YXJ0KSkpID8gMSA6IHBhcnNlSW50KG9wdGlvbnMuaGVhZGVyTGV2ZWxTdGFydCksXG5cbiAgICAgIC8vIFNldCB0ZXh0LXN0eWxlIGhlYWRlcnM6XG4gICAgICAvL1x0SGVhZGVyIDFcbiAgICAgIC8vXHQ9PT09PT09PVxuICAgICAgLy9cbiAgICAgIC8vXHRIZWFkZXIgMlxuICAgICAgLy9cdC0tLS0tLS0tXG4gICAgICAvL1xuICAgICAgc2V0ZXh0UmVnZXhIMSA9IChvcHRpb25zLnNtb290aExpdmVQcmV2aWV3KSA/IC9eKC4rKVsgXFx0XSpcXG49ezIsfVsgXFx0XSpcXG4rL2dtIDogL14oLispWyBcXHRdKlxcbj0rWyBcXHRdKlxcbisvZ20sXG4gICAgICBzZXRleHRSZWdleEgyID0gKG9wdGlvbnMuc21vb3RoTGl2ZVByZXZpZXcpID8gL14oLispWyBcXHRdKlxcbi17Mix9WyBcXHRdKlxcbisvZ20gOiAvXiguKylbIFxcdF0qXFxuLStbIFxcdF0qXFxuKy9nbTtcblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHNldGV4dFJlZ2V4SDEsIGZ1bmN0aW9uICh3aG9sZU1hdGNoLCBtMSkge1xuXG4gICAgdmFyIHNwYW5HYW11dCA9IHNob3dkb3duLnN1YlBhcnNlcignc3BhbkdhbXV0JykobTEsIG9wdGlvbnMsIGdsb2JhbHMpLFxuICAgICAgICBoSUQgPSAob3B0aW9ucy5ub0hlYWRlcklkKSA/ICcnIDogJyBpZD1cIicgKyBoZWFkZXJJZChtMSkgKyAnXCInLFxuICAgICAgICBoTGV2ZWwgPSBoZWFkZXJMZXZlbFN0YXJ0LFxuICAgICAgICBoYXNoQmxvY2sgPSAnPGgnICsgaExldmVsICsgaElEICsgJz4nICsgc3BhbkdhbXV0ICsgJzwvaCcgKyBoTGV2ZWwgKyAnPic7XG4gICAgcmV0dXJuIHNob3dkb3duLnN1YlBhcnNlcignaGFzaEJsb2NrJykoaGFzaEJsb2NrLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgfSk7XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZShzZXRleHRSZWdleEgyLCBmdW5jdGlvbiAobWF0Y2hGb3VuZCwgbTEpIHtcbiAgICB2YXIgc3BhbkdhbXV0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdzcGFuR2FtdXQnKShtMSwgb3B0aW9ucywgZ2xvYmFscyksXG4gICAgICAgIGhJRCA9IChvcHRpb25zLm5vSGVhZGVySWQpID8gJycgOiAnIGlkPVwiJyArIGhlYWRlcklkKG0xKSArICdcIicsXG4gICAgICAgIGhMZXZlbCA9IGhlYWRlckxldmVsU3RhcnQgKyAxLFxuICAgICAgICBoYXNoQmxvY2sgPSAnPGgnICsgaExldmVsICsgaElEICsgJz4nICsgc3BhbkdhbXV0ICsgJzwvaCcgKyBoTGV2ZWwgKyAnPic7XG4gICAgcmV0dXJuIHNob3dkb3duLnN1YlBhcnNlcignaGFzaEJsb2NrJykoaGFzaEJsb2NrLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgfSk7XG5cbiAgLy8gYXR4LXN0eWxlIGhlYWRlcnM6XG4gIC8vICAjIEhlYWRlciAxXG4gIC8vICAjIyBIZWFkZXIgMlxuICAvLyAgIyMgSGVhZGVyIDIgd2l0aCBjbG9zaW5nIGhhc2hlcyAjI1xuICAvLyAgLi4uXG4gIC8vICAjIyMjIyMgSGVhZGVyIDZcbiAgLy9cbiAgdmFyIGF0eFN0eWxlID0gKG9wdGlvbnMucmVxdWlyZVNwYWNlQmVmb3JlSGVhZGluZ1RleHQpID8gL14oI3sxLDZ9KVsgXFx0XSsoLis/KVsgXFx0XSojKlxcbisvZ20gOiAvXigjezEsNn0pWyBcXHRdKiguKz8pWyBcXHRdKiMqXFxuKy9nbTtcblxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKGF0eFN0eWxlLCBmdW5jdGlvbiAod2hvbGVNYXRjaCwgbTEsIG0yKSB7XG4gICAgdmFyIGhUZXh0ID0gbTI7XG4gICAgaWYgKG9wdGlvbnMuY3VzdG9taXplZEhlYWRlcklkKSB7XG4gICAgICBoVGV4dCA9IG0yLnJlcGxhY2UoL1xccz9cXHsoW157XSs/KX1cXHMqJC8sICcnKTtcbiAgICB9XG5cbiAgICB2YXIgc3BhbiA9IHNob3dkb3duLnN1YlBhcnNlcignc3BhbkdhbXV0JykoaFRleHQsIG9wdGlvbnMsIGdsb2JhbHMpLFxuICAgICAgICBoSUQgPSAob3B0aW9ucy5ub0hlYWRlcklkKSA/ICcnIDogJyBpZD1cIicgKyBoZWFkZXJJZChtMikgKyAnXCInLFxuICAgICAgICBoTGV2ZWwgPSBoZWFkZXJMZXZlbFN0YXJ0IC0gMSArIG0xLmxlbmd0aCxcbiAgICAgICAgaGVhZGVyID0gJzxoJyArIGhMZXZlbCArIGhJRCArICc+JyArIHNwYW4gKyAnPC9oJyArIGhMZXZlbCArICc+JztcblxuICAgIHJldHVybiBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hCbG9jaycpKGhlYWRlciwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGhlYWRlcklkIChtKSB7XG4gICAgdmFyIHRpdGxlLFxuICAgICAgICBwcmVmaXg7XG5cbiAgICAvLyBJdCBpcyBzZXBhcmF0ZSBmcm9tIG90aGVyIG9wdGlvbnMgdG8gYWxsb3cgY29tYmluaW5nIHByZWZpeCBhbmQgY3VzdG9taXplZFxuICAgIGlmIChvcHRpb25zLmN1c3RvbWl6ZWRIZWFkZXJJZCkge1xuICAgICAgdmFyIG1hdGNoID0gbS5tYXRjaCgvXFx7KFtee10rPyl9XFxzKiQvKTtcbiAgICAgIGlmIChtYXRjaCAmJiBtYXRjaFsxXSkge1xuICAgICAgICBtID0gbWF0Y2hbMV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGl0bGUgPSBtO1xuXG4gICAgLy8gUHJlZml4IGlkIHRvIHByZXZlbnQgY2F1c2luZyBpbmFkdmVydGVudCBwcmUtZXhpc3Rpbmcgc3R5bGUgbWF0Y2hlcy5cbiAgICBpZiAoc2hvd2Rvd24uaGVscGVyLmlzU3RyaW5nKG9wdGlvbnMucHJlZml4SGVhZGVySWQpKSB7XG4gICAgICBwcmVmaXggPSBvcHRpb25zLnByZWZpeEhlYWRlcklkO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5wcmVmaXhIZWFkZXJJZCA9PT0gdHJ1ZSkge1xuICAgICAgcHJlZml4ID0gJ3NlY3Rpb24tJztcbiAgICB9IGVsc2Uge1xuICAgICAgcHJlZml4ID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKCFvcHRpb25zLnJhd1ByZWZpeEhlYWRlcklkKSB7XG4gICAgICB0aXRsZSA9IHByZWZpeCArIHRpdGxlO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmdoQ29tcGF0aWJsZUhlYWRlcklkKSB7XG4gICAgICB0aXRsZSA9IHRpdGxlXG4gICAgICAgIC5yZXBsYWNlKC8gL2csICctJylcbiAgICAgICAgLy8gcmVwbGFjZSBwcmV2aW91c2x5IGVzY2FwZWQgY2hhcnMgKCYsIMKoIGFuZCAkKVxuICAgICAgICAucmVwbGFjZSgvJmFtcDsvZywgJycpXG4gICAgICAgIC5yZXBsYWNlKC/CqFQvZywgJycpXG4gICAgICAgIC5yZXBsYWNlKC/CqEQvZywgJycpXG4gICAgICAgIC8vIHJlcGxhY2UgcmVzdCBvZiB0aGUgY2hhcnMgKCZ+JCBhcmUgcmVwZWF0ZWQgYXMgdGhleSBtaWdodCBoYXZlIGJlZW4gZXNjYXBlZClcbiAgICAgICAgLy8gYm9ycm93ZWQgZnJvbSBnaXRodWIncyByZWRjYXJwZXQgKHNvbWUgdGhleSBzaG91bGQgcHJvZHVjZSBzaW1pbGFyIHJlc3VsdHMpXG4gICAgICAgIC5yZXBsYWNlKC9bJiskLFxcLzo7PT9AXCIje318XsKoflxcW1xcXWBcXFxcKikoJS4hJzw+XS9nLCAnJylcbiAgICAgICAgLnRvTG93ZXJDYXNlKCk7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLnJhd0hlYWRlcklkKSB7XG4gICAgICB0aXRsZSA9IHRpdGxlXG4gICAgICAgIC5yZXBsYWNlKC8gL2csICctJylcbiAgICAgICAgLy8gcmVwbGFjZSBwcmV2aW91c2x5IGVzY2FwZWQgY2hhcnMgKCYsIMKoIGFuZCAkKVxuICAgICAgICAucmVwbGFjZSgvJmFtcDsvZywgJyYnKVxuICAgICAgICAucmVwbGFjZSgvwqhUL2csICfCqCcpXG4gICAgICAgIC5yZXBsYWNlKC/CqEQvZywgJyQnKVxuICAgICAgICAvLyByZXBsYWNlIFwiIGFuZCAnXG4gICAgICAgIC5yZXBsYWNlKC9bXCInXS9nLCAnLScpXG4gICAgICAgIC50b0xvd2VyQ2FzZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aXRsZSA9IHRpdGxlXG4gICAgICAgIC5yZXBsYWNlKC9bXlxcd10vZywgJycpXG4gICAgICAgIC50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnJhd1ByZWZpeEhlYWRlcklkKSB7XG4gICAgICB0aXRsZSA9IHByZWZpeCArIHRpdGxlO1xuICAgIH1cblxuICAgIGlmIChnbG9iYWxzLmhhc2hMaW5rQ291bnRzW3RpdGxlXSkge1xuICAgICAgdGl0bGUgPSB0aXRsZSArICctJyArIChnbG9iYWxzLmhhc2hMaW5rQ291bnRzW3RpdGxlXSsrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2xvYmFscy5oYXNoTGlua0NvdW50c1t0aXRsZV0gPSAxO1xuICAgIH1cbiAgICByZXR1cm4gdGl0bGU7XG4gIH1cblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdoZWFkZXJzLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG5cclxuLyoqXG4gKiBUdXJuIE1hcmtkb3duIGxpbmsgc2hvcnRjdXRzIGludG8gWEhUTUwgPGE+IHRhZ3MuXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcignaG9yaXpvbnRhbFJ1bGUnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2hvcml6b250YWxSdWxlLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHZhciBrZXkgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hCbG9jaycpKCc8aHIgLz4nLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXiB7MCwyfSggPy0pezMsfVsgXFx0XSokL2dtLCBrZXkpO1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9eIHswLDJ9KCA/XFwqKXszLH1bIFxcdF0qJC9nbSwga2V5KTtcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXiB7MCwyfSggP18pezMsfVsgXFx0XSokL2dtLCBrZXkpO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2hvcml6b250YWxSdWxlLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG5cclxuLyoqXG4gKiBUdXJuIE1hcmtkb3duIGltYWdlIHNob3J0Y3V0cyBpbnRvIDxpbWc+IHRhZ3MuXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcignaW1hZ2VzJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2ltYWdlcy5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICB2YXIgaW5saW5lUmVnRXhwICAgICAgPSAvIVxcWyhbXlxcXV0qPyldWyBcXHRdKigpXFwoWyBcXHRdPzw/KFtcXFNdKz8oPzpcXChbXFxTXSo/XFwpW1xcU10qPyk/KT4/KD86ID0oWypcXGRdK1tBLVphLXolXXswLDR9KXgoWypcXGRdK1tBLVphLXolXXswLDR9KSk/WyBcXHRdKig/OihbXCInXSkoW15cIl0qPylcXDYpP1sgXFx0XT9cXCkvZyxcbiAgICAgIGNyYXp5UmVnRXhwICAgICAgID0gLyFcXFsoW15cXF1dKj8pXVsgXFx0XSooKVxcKFsgXFx0XT88KFtePl0qKT4oPzogPShbKlxcZF0rW0EtWmEteiVdezAsNH0peChbKlxcZF0rW0EtWmEteiVdezAsNH0pKT9bIFxcdF0qKD86KD86KFtcIiddKShbXlwiXSo/KVxcNikpP1sgXFx0XT9cXCkvZyxcbiAgICAgIGJhc2U2NFJlZ0V4cCAgICAgID0gLyFcXFsoW15cXF1dKj8pXVsgXFx0XSooKVxcKFsgXFx0XT88PyhkYXRhOi4rP1xcLy4rPztiYXNlNjQsW0EtWmEtejAtOSsvPVxcbl0rPyk+Pyg/OiA9KFsqXFxkXStbQS1aYS16JV17MCw0fSl4KFsqXFxkXStbQS1aYS16JV17MCw0fSkpP1sgXFx0XSooPzooW1wiJ10pKFteXCJdKj8pXFw2KT9bIFxcdF0/XFwpL2csXG4gICAgICByZWZlcmVuY2VSZWdFeHAgICA9IC8hXFxbKFteXFxdXSo/KV0gPyg/OlxcbiAqKT9cXFsoW1xcc1xcU10qPyldKCkoKSgpKCkoKS9nLFxuICAgICAgcmVmU2hvcnRjdXRSZWdFeHAgPSAvIVxcWyhbXlxcW1xcXV0rKV0oKSgpKCkoKSgpL2c7XG5cbiAgZnVuY3Rpb24gd3JpdGVJbWFnZVRhZ0Jhc2U2NCAod2hvbGVNYXRjaCwgYWx0VGV4dCwgbGlua0lkLCB1cmwsIHdpZHRoLCBoZWlnaHQsIG01LCB0aXRsZSkge1xuICAgIHVybCA9IHVybC5yZXBsYWNlKC9cXHMvZywgJycpO1xuICAgIHJldHVybiB3cml0ZUltYWdlVGFnICh3aG9sZU1hdGNoLCBhbHRUZXh0LCBsaW5rSWQsIHVybCwgd2lkdGgsIGhlaWdodCwgbTUsIHRpdGxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdyaXRlSW1hZ2VUYWcgKHdob2xlTWF0Y2gsIGFsdFRleHQsIGxpbmtJZCwgdXJsLCB3aWR0aCwgaGVpZ2h0LCBtNSwgdGl0bGUpIHtcblxuICAgIHZhciBnVXJscyAgID0gZ2xvYmFscy5nVXJscyxcbiAgICAgICAgZ1RpdGxlcyA9IGdsb2JhbHMuZ1RpdGxlcyxcbiAgICAgICAgZ0RpbXMgICA9IGdsb2JhbHMuZ0RpbWVuc2lvbnM7XG5cbiAgICBsaW5rSWQgPSBsaW5rSWQudG9Mb3dlckNhc2UoKTtcblxuICAgIGlmICghdGl0bGUpIHtcbiAgICAgIHRpdGxlID0gJyc7XG4gICAgfVxuICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgZXhwbGljaXQgZW1wdHkgdXJsXG4gICAgaWYgKHdob2xlTWF0Y2guc2VhcmNoKC9cXCg8P1xccyo+PyA/KFsnXCJdLipbJ1wiXSk/XFwpJC9tKSA+IC0xKSB7XG4gICAgICB1cmwgPSAnJztcblxuICAgIH0gZWxzZSBpZiAodXJsID09PSAnJyB8fCB1cmwgPT09IG51bGwpIHtcbiAgICAgIGlmIChsaW5rSWQgPT09ICcnIHx8IGxpbmtJZCA9PT0gbnVsbCkge1xuICAgICAgICAvLyBsb3dlci1jYXNlIGFuZCB0dXJuIGVtYmVkZGVkIG5ld2xpbmVzIGludG8gc3BhY2VzXG4gICAgICAgIGxpbmtJZCA9IGFsdFRleHQudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8gP1xcbi9nLCAnICcpO1xuICAgICAgfVxuICAgICAgdXJsID0gJyMnICsgbGlua0lkO1xuXG4gICAgICBpZiAoIXNob3dkb3duLmhlbHBlci5pc1VuZGVmaW5lZChnVXJsc1tsaW5rSWRdKSkge1xuICAgICAgICB1cmwgPSBnVXJsc1tsaW5rSWRdO1xuICAgICAgICBpZiAoIXNob3dkb3duLmhlbHBlci5pc1VuZGVmaW5lZChnVGl0bGVzW2xpbmtJZF0pKSB7XG4gICAgICAgICAgdGl0bGUgPSBnVGl0bGVzW2xpbmtJZF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzaG93ZG93bi5oZWxwZXIuaXNVbmRlZmluZWQoZ0RpbXNbbGlua0lkXSkpIHtcbiAgICAgICAgICB3aWR0aCA9IGdEaW1zW2xpbmtJZF0ud2lkdGg7XG4gICAgICAgICAgaGVpZ2h0ID0gZ0RpbXNbbGlua0lkXS5oZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB3aG9sZU1hdGNoO1xuICAgICAgfVxuICAgIH1cblxuICAgIGFsdFRleHQgPSBhbHRUZXh0XG4gICAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpXG4gICAgLy9hbHRUZXh0ID0gc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnMoYWx0VGV4dCwgJypfJywgZmFsc2UpO1xuICAgICAgLnJlcGxhY2Uoc2hvd2Rvd24uaGVscGVyLnJlZ2V4ZXMuYXN0ZXJpc2tEYXNoQW5kQ29sb24sIHNob3dkb3duLmhlbHBlci5lc2NhcGVDaGFyYWN0ZXJzQ2FsbGJhY2spO1xuICAgIC8vdXJsID0gc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnModXJsLCAnKl8nLCBmYWxzZSk7XG4gICAgdXJsID0gdXJsLnJlcGxhY2Uoc2hvd2Rvd24uaGVscGVyLnJlZ2V4ZXMuYXN0ZXJpc2tEYXNoQW5kQ29sb24sIHNob3dkb3duLmhlbHBlci5lc2NhcGVDaGFyYWN0ZXJzQ2FsbGJhY2spO1xuICAgIHZhciByZXN1bHQgPSAnPGltZyBzcmM9XCInICsgdXJsICsgJ1wiIGFsdD1cIicgKyBhbHRUZXh0ICsgJ1wiJztcblxuICAgIGlmICh0aXRsZSAmJiBzaG93ZG93bi5oZWxwZXIuaXNTdHJpbmcodGl0bGUpKSB7XG4gICAgICB0aXRsZSA9IHRpdGxlXG4gICAgICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7JylcbiAgICAgIC8vdGl0bGUgPSBzaG93ZG93bi5oZWxwZXIuZXNjYXBlQ2hhcmFjdGVycyh0aXRsZSwgJypfJywgZmFsc2UpO1xuICAgICAgICAucmVwbGFjZShzaG93ZG93bi5oZWxwZXIucmVnZXhlcy5hc3Rlcmlza0Rhc2hBbmRDb2xvbiwgc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnNDYWxsYmFjayk7XG4gICAgICByZXN1bHQgKz0gJyB0aXRsZT1cIicgKyB0aXRsZSArICdcIic7XG4gICAgfVxuXG4gICAgaWYgKHdpZHRoICYmIGhlaWdodCkge1xuICAgICAgd2lkdGggID0gKHdpZHRoID09PSAnKicpID8gJ2F1dG8nIDogd2lkdGg7XG4gICAgICBoZWlnaHQgPSAoaGVpZ2h0ID09PSAnKicpID8gJ2F1dG8nIDogaGVpZ2h0O1xuXG4gICAgICByZXN1bHQgKz0gJyB3aWR0aD1cIicgKyB3aWR0aCArICdcIic7XG4gICAgICByZXN1bHQgKz0gJyBoZWlnaHQ9XCInICsgaGVpZ2h0ICsgJ1wiJztcbiAgICB9XG5cbiAgICByZXN1bHQgKz0gJyAvPic7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gRmlyc3QsIGhhbmRsZSByZWZlcmVuY2Utc3R5bGUgbGFiZWxlZCBpbWFnZXM6ICFbYWx0IHRleHRdW2lkXVxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHJlZmVyZW5jZVJlZ0V4cCwgd3JpdGVJbWFnZVRhZyk7XG5cbiAgLy8gTmV4dCwgaGFuZGxlIGlubGluZSBpbWFnZXM6ICAhW2FsdCB0ZXh0XSh1cmwgPTx3aWR0aD54PGhlaWdodD4gXCJvcHRpb25hbCB0aXRsZVwiKVxuXG4gIC8vIGJhc2U2NCBlbmNvZGVkIGltYWdlc1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKGJhc2U2NFJlZ0V4cCwgd3JpdGVJbWFnZVRhZ0Jhc2U2NCk7XG5cbiAgLy8gY2FzZXMgd2l0aCBjcmF6eSB1cmxzIGxpa2UgLi9pbWFnZS9jYXQxKS5wbmdcbiAgdGV4dCA9IHRleHQucmVwbGFjZShjcmF6eVJlZ0V4cCwgd3JpdGVJbWFnZVRhZyk7XG5cbiAgLy8gbm9ybWFsIGNhc2VzXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoaW5saW5lUmVnRXhwLCB3cml0ZUltYWdlVGFnKTtcblxuICAvLyBoYW5kbGUgcmVmZXJlbmNlLXN0eWxlIHNob3J0Y3V0czogIVtpbWcgdGV4dF1cbiAgdGV4dCA9IHRleHQucmVwbGFjZShyZWZTaG9ydGN1dFJlZ0V4cCwgd3JpdGVJbWFnZVRhZyk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnaW1hZ2VzLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG5cclxuc2hvd2Rvd24uc3ViUGFyc2VyKCdpdGFsaWNzQW5kQm9sZCcsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdpdGFsaWNzQW5kQm9sZC5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAvLyBpdCdzIGZhc3RlciB0byBoYXZlIDMgc2VwYXJhdGUgcmVnZXhlcyBmb3IgZWFjaCBjYXNlIHRoYW4gaGF2ZSBqdXN0IG9uZVxuICAvLyBiZWNhdXNlIG9mIGJhY2t0cmFjaW5nLCBpbiBzb21lIGNhc2VzLCBpdCBjb3VsZCBsZWFkIHRvIGFuIGV4cG9uZW50aWFsIGVmZmVjdFxuICAvLyBjYWxsZWQgXCJjYXRhc3Ryb3BoaWMgYmFja3RyYWNlXCIuIE9taW5vdXMhXG5cbiAgZnVuY3Rpb24gcGFyc2VJbnNpZGUgKHR4dCwgbGVmdCwgcmlnaHQpIHtcbiAgICAvKlxuICAgIGlmIChvcHRpb25zLnNpbXBsaWZpZWRBdXRvTGluaykge1xuICAgICAgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdzaW1wbGlmaWVkQXV0b0xpbmtzJykodHh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICB9XG4gICAgKi9cbiAgICByZXR1cm4gbGVmdCArIHR4dCArIHJpZ2h0O1xuICB9XG5cbiAgLy8gUGFyc2UgdW5kZXJzY29yZXNcbiAgaWYgKG9wdGlvbnMubGl0ZXJhbE1pZFdvcmRVbmRlcnNjb3Jlcykge1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcYl9fXyhcXFNbXFxzXFxTXSo/KV9fX1xcYi9nLCBmdW5jdGlvbiAod20sIHR4dCkge1xuICAgICAgcmV0dXJuIHBhcnNlSW5zaWRlICh0eHQsICc8c3Ryb25nPjxlbT4nLCAnPC9lbT48L3N0cm9uZz4nKTtcbiAgICB9KTtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXGJfXyhcXFNbXFxzXFxTXSo/KV9fXFxiL2csIGZ1bmN0aW9uICh3bSwgdHh0KSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnNpZGUgKHR4dCwgJzxzdHJvbmc+JywgJzwvc3Ryb25nPicpO1xuICAgIH0pO1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcYl8oXFxTW1xcc1xcU10qPylfXFxiL2csIGZ1bmN0aW9uICh3bSwgdHh0KSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnNpZGUgKHR4dCwgJzxlbT4nLCAnPC9lbT4nKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9fX18oXFxTW1xcc1xcU10qPylfX18vZywgZnVuY3Rpb24gKHdtLCBtKSB7XG4gICAgICByZXR1cm4gKC9cXFMkLy50ZXN0KG0pKSA/IHBhcnNlSW5zaWRlIChtLCAnPHN0cm9uZz48ZW0+JywgJzwvZW0+PC9zdHJvbmc+JykgOiB3bTtcbiAgICB9KTtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9fXyhcXFNbXFxzXFxTXSo/KV9fL2csIGZ1bmN0aW9uICh3bSwgbSkge1xuICAgICAgcmV0dXJuICgvXFxTJC8udGVzdChtKSkgPyBwYXJzZUluc2lkZSAobSwgJzxzdHJvbmc+JywgJzwvc3Ryb25nPicpIDogd207XG4gICAgfSk7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXyhbXlxcc19dW1xcc1xcU10qPylfL2csIGZ1bmN0aW9uICh3bSwgbSkge1xuICAgICAgLy8gIS9eX1teX10vLnRlc3QobSkgLSB0ZXN0IGlmIGl0IGRvZXNuJ3Qgc3RhcnQgd2l0aCBfXyAoc2luY2UgaXQgc2VlbXMgcmVkdW5kYW50LCB3ZSByZW1vdmVkIGl0KVxuICAgICAgcmV0dXJuICgvXFxTJC8udGVzdChtKSkgPyBwYXJzZUluc2lkZSAobSwgJzxlbT4nLCAnPC9lbT4nKSA6IHdtO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gTm93IHBhcnNlIGFzdGVyaXNrc1xuICBpZiAob3B0aW9ucy5saXRlcmFsTWlkV29yZEFzdGVyaXNrcykge1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLyhbXipdfF4pXFxCXFwqXFwqXFwqKFxcU1tcXHNcXFNdKj8pXFwqXFwqXFwqXFxCKD8hXFwqKS9nLCBmdW5jdGlvbiAod20sIGxlYWQsIHR4dCkge1xuICAgICAgcmV0dXJuIHBhcnNlSW5zaWRlICh0eHQsIGxlYWQgKyAnPHN0cm9uZz48ZW0+JywgJzwvZW0+PC9zdHJvbmc+Jyk7XG4gICAgfSk7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvKFteKl18XilcXEJcXCpcXCooXFxTW1xcc1xcU10qPylcXCpcXCpcXEIoPyFcXCopL2csIGZ1bmN0aW9uICh3bSwgbGVhZCwgdHh0KSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnNpZGUgKHR4dCwgbGVhZCArICc8c3Ryb25nPicsICc8L3N0cm9uZz4nKTtcbiAgICB9KTtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oW14qXXxeKVxcQlxcKihcXFNbXFxzXFxTXSo/KVxcKlxcQig/IVxcKikvZywgZnVuY3Rpb24gKHdtLCBsZWFkLCB0eHQpIHtcbiAgICAgIHJldHVybiBwYXJzZUluc2lkZSAodHh0LCBsZWFkICsgJzxlbT4nLCAnPC9lbT4nKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXCpcXCpcXCooXFxTW1xcc1xcU10qPylcXCpcXCpcXCovZywgZnVuY3Rpb24gKHdtLCBtKSB7XG4gICAgICByZXR1cm4gKC9cXFMkLy50ZXN0KG0pKSA/IHBhcnNlSW5zaWRlIChtLCAnPHN0cm9uZz48ZW0+JywgJzwvZW0+PC9zdHJvbmc+JykgOiB3bTtcbiAgICB9KTtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXCpcXCooXFxTW1xcc1xcU10qPylcXCpcXCovZywgZnVuY3Rpb24gKHdtLCBtKSB7XG4gICAgICByZXR1cm4gKC9cXFMkLy50ZXN0KG0pKSA/IHBhcnNlSW5zaWRlIChtLCAnPHN0cm9uZz4nLCAnPC9zdHJvbmc+JykgOiB3bTtcbiAgICB9KTtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXCooW15cXHMqXVtcXHNcXFNdKj8pXFwqL2csIGZ1bmN0aW9uICh3bSwgbSkge1xuICAgICAgLy8gIS9eXFwqW14qXS8udGVzdChtKSAtIHRlc3QgaWYgaXQgZG9lc24ndCBzdGFydCB3aXRoICoqIChzaW5jZSBpdCBzZWVtcyByZWR1bmRhbnQsIHdlIHJlbW92ZWQgaXQpXG4gICAgICByZXR1cm4gKC9cXFMkLy50ZXN0KG0pKSA/IHBhcnNlSW5zaWRlIChtLCAnPGVtPicsICc8L2VtPicpIDogd207XG4gICAgfSk7XG4gIH1cblxuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ2l0YWxpY3NBbmRCb2xkLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHJldHVybiB0ZXh0O1xufSk7XG5cclxuLyoqXG4gKiBGb3JtIEhUTUwgb3JkZXJlZCAobnVtYmVyZWQpIGFuZCB1bm9yZGVyZWQgKGJ1bGxldGVkKSBsaXN0cy5cbiAqL1xuc2hvd2Rvd24uc3ViUGFyc2VyKCdsaXN0cycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogUHJvY2VzcyB0aGUgY29udGVudHMgb2YgYSBzaW5nbGUgb3JkZXJlZCBvciB1bm9yZGVyZWQgbGlzdCwgc3BsaXR0aW5nIGl0XG4gICAqIGludG8gaW5kaXZpZHVhbCBsaXN0IGl0ZW1zLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGlzdFN0clxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHRyaW1UcmFpbGluZ1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZnVuY3Rpb24gcHJvY2Vzc0xpc3RJdGVtcyAobGlzdFN0ciwgdHJpbVRyYWlsaW5nKSB7XG4gICAgLy8gVGhlICRnX2xpc3RfbGV2ZWwgZ2xvYmFsIGtlZXBzIHRyYWNrIG9mIHdoZW4gd2UncmUgaW5zaWRlIGEgbGlzdC5cbiAgICAvLyBFYWNoIHRpbWUgd2UgZW50ZXIgYSBsaXN0LCB3ZSBpbmNyZW1lbnQgaXQ7IHdoZW4gd2UgbGVhdmUgYSBsaXN0LFxuICAgIC8vIHdlIGRlY3JlbWVudC4gSWYgaXQncyB6ZXJvLCB3ZSdyZSBub3QgaW4gYSBsaXN0IGFueW1vcmUuXG4gICAgLy9cbiAgICAvLyBXZSBkbyB0aGlzIGJlY2F1c2Ugd2hlbiB3ZSdyZSBub3QgaW5zaWRlIGEgbGlzdCwgd2Ugd2FudCB0byB0cmVhdFxuICAgIC8vIHNvbWV0aGluZyBsaWtlIHRoaXM6XG4gICAgLy9cbiAgICAvLyAgICBJIHJlY29tbWVuZCB1cGdyYWRpbmcgdG8gdmVyc2lvblxuICAgIC8vICAgIDguIE9vcHMsIG5vdyB0aGlzIGxpbmUgaXMgdHJlYXRlZFxuICAgIC8vICAgIGFzIGEgc3ViLWxpc3QuXG4gICAgLy9cbiAgICAvLyBBcyBhIHNpbmdsZSBwYXJhZ3JhcGgsIGRlc3BpdGUgdGhlIGZhY3QgdGhhdCB0aGUgc2Vjb25kIGxpbmUgc3RhcnRzXG4gICAgLy8gd2l0aCBhIGRpZ2l0LXBlcmlvZC1zcGFjZSBzZXF1ZW5jZS5cbiAgICAvL1xuICAgIC8vIFdoZXJlYXMgd2hlbiB3ZSdyZSBpbnNpZGUgYSBsaXN0IChvciBzdWItbGlzdCksIHRoYXQgbGluZSB3aWxsIGJlXG4gICAgLy8gdHJlYXRlZCBhcyB0aGUgc3RhcnQgb2YgYSBzdWItbGlzdC4gV2hhdCBhIGtsdWRnZSwgaHVoPyBUaGlzIGlzXG4gICAgLy8gYW4gYXNwZWN0IG9mIE1hcmtkb3duJ3Mgc3ludGF4IHRoYXQncyBoYXJkIHRvIHBhcnNlIHBlcmZlY3RseVxuICAgIC8vIHdpdGhvdXQgcmVzb3J0aW5nIHRvIG1pbmQtcmVhZGluZy4gUGVyaGFwcyB0aGUgc29sdXRpb24gaXMgdG9cbiAgICAvLyBjaGFuZ2UgdGhlIHN5bnRheCBydWxlcyBzdWNoIHRoYXQgc3ViLWxpc3RzIG11c3Qgc3RhcnQgd2l0aCBhXG4gICAgLy8gc3RhcnRpbmcgY2FyZGluYWwgbnVtYmVyOyBlLmcuIFwiMS5cIiBvciBcImEuXCIuXG4gICAgZ2xvYmFscy5nTGlzdExldmVsKys7XG5cbiAgICAvLyB0cmltIHRyYWlsaW5nIGJsYW5rIGxpbmVzOlxuICAgIGxpc3RTdHIgPSBsaXN0U3RyLnJlcGxhY2UoL1xcbnsyLH0kLywgJ1xcbicpO1xuXG4gICAgLy8gYXR0YWNrbGFiOiBhZGQgc2VudGluZWwgdG8gZW11bGF0ZSBcXHpcbiAgICBsaXN0U3RyICs9ICfCqDAnO1xuXG4gICAgdmFyIHJneCA9IC8oXFxuKT8oXiB7MCwzfSkoWyorLV18XFxkK1suXSlbIFxcdF0rKChcXFsoeHxYfCApP10pP1sgXFx0XSpbXlxccl0rPyhcXG57MSwyfSkpKD89XFxuKijCqDB8IHswLDN9KFsqKy1dfFxcZCtbLl0pWyBcXHRdKykpL2dtLFxuICAgICAgICBpc1BhcmFncmFwaGVkID0gKC9cXG5bIFxcdF0qXFxuKD8hwqgwKS8udGVzdChsaXN0U3RyKSk7XG5cbiAgICAvLyBTaW5jZSB2ZXJzaW9uIDEuNSwgbmVzdGluZyBzdWJsaXN0cyByZXF1aXJlcyA0IHNwYWNlcyAob3IgMSB0YWIpIGluZGVudGF0aW9uLFxuICAgIC8vIHdoaWNoIGlzIGEgc3ludGF4IGJyZWFraW5nIGNoYW5nZVxuICAgIC8vIGFjdGl2YXRpbmcgdGhpcyBvcHRpb24gcmV2ZXJ0cyB0byBvbGQgYmVoYXZpb3JcbiAgICBpZiAob3B0aW9ucy5kaXNhYmxlRm9yY2VkNFNwYWNlc0luZGVudGVkU3VibGlzdHMpIHtcbiAgICAgIHJneCA9IC8oXFxuKT8oXiB7MCwzfSkoWyorLV18XFxkK1suXSlbIFxcdF0rKChcXFsoeHxYfCApP10pP1sgXFx0XSpbXlxccl0rPyhcXG57MSwyfSkpKD89XFxuKijCqDB8XFwyKFsqKy1dfFxcZCtbLl0pWyBcXHRdKykpL2dtO1xuICAgIH1cblxuICAgIGxpc3RTdHIgPSBsaXN0U3RyLnJlcGxhY2Uocmd4LCBmdW5jdGlvbiAod2hvbGVNYXRjaCwgbTEsIG0yLCBtMywgbTQsIHRhc2tidG4sIGNoZWNrZWQpIHtcbiAgICAgIGNoZWNrZWQgPSAoY2hlY2tlZCAmJiBjaGVja2VkLnRyaW0oKSAhPT0gJycpO1xuXG4gICAgICB2YXIgaXRlbSA9IHNob3dkb3duLnN1YlBhcnNlcignb3V0ZGVudCcpKG00LCBvcHRpb25zLCBnbG9iYWxzKSxcbiAgICAgICAgICBidWxsZXRTdHlsZSA9ICcnO1xuXG4gICAgICAvLyBTdXBwb3J0IGZvciBnaXRodWIgdGFza2xpc3RzXG4gICAgICBpZiAodGFza2J0biAmJiBvcHRpb25zLnRhc2tsaXN0cykge1xuICAgICAgICBidWxsZXRTdHlsZSA9ICcgY2xhc3M9XCJ0YXNrLWxpc3QtaXRlbVwiIHN0eWxlPVwibGlzdC1zdHlsZS10eXBlOiBub25lO1wiJztcbiAgICAgICAgaXRlbSA9IGl0ZW0ucmVwbGFjZSgvXlsgXFx0XSpcXFsoeHxYfCApP10vbSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBvdHAgPSAnPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGRpc2FibGVkIHN0eWxlPVwibWFyZ2luOiAwcHggMC4zNWVtIDAuMjVlbSAtMS42ZW07IHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XCInO1xuICAgICAgICAgIGlmIChjaGVja2VkKSB7XG4gICAgICAgICAgICBvdHAgKz0gJyBjaGVja2VkJztcbiAgICAgICAgICB9XG4gICAgICAgICAgb3RwICs9ICc+JztcbiAgICAgICAgICByZXR1cm4gb3RwO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gSVNTVUUgIzMxMlxuICAgICAgLy8gVGhpcyBpbnB1dDogLSAtIC0gYVxuICAgICAgLy8gY2F1c2VzIHRyb3VibGUgdG8gdGhlIHBhcnNlciwgc2luY2UgaXQgaW50ZXJwcmV0cyBpdCBhczpcbiAgICAgIC8vIDx1bD48bGk+PGxpPjxsaT5hPC9saT48L2xpPjwvbGk+PC91bD5cbiAgICAgIC8vIGluc3RlYWQgb2Y6XG4gICAgICAvLyA8dWw+PGxpPi0gLSBhPC9saT48L3VsPlxuICAgICAgLy8gU28sIHRvIHByZXZlbnQgaXQsIHdlIHdpbGwgcHV0IGEgbWFya2VyICjCqEEpaW4gdGhlIGJlZ2lubmluZyBvZiB0aGUgbGluZVxuICAgICAgLy8gS2luZCBvZiBoYWNraXNoL21vbmtleSBwYXRjaGluZywgYnV0IHNlZW1zIG1vcmUgZWZmZWN0aXZlIHRoYW4gb3ZlcmNvbXBsaWNhdGluZyB0aGUgbGlzdCBwYXJzZXJcbiAgICAgIGl0ZW0gPSBpdGVtLnJlcGxhY2UoL14oWy0qK118XFxkXFwuKVsgXFx0XStbXFxTXFxuIF0qL2csIGZ1bmN0aW9uICh3bTIpIHtcbiAgICAgICAgcmV0dXJuICfCqEEnICsgd20yO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIG0xIC0gTGVhZGluZyBsaW5lIG9yXG4gICAgICAvLyBIYXMgYSBkb3VibGUgcmV0dXJuIChtdWx0aSBwYXJhZ3JhcGgpIG9yXG4gICAgICAvLyBIYXMgc3VibGlzdFxuICAgICAgaWYgKG0xIHx8IChpdGVtLnNlYXJjaCgvXFxuezIsfS8pID4gLTEpKSB7XG4gICAgICAgIGl0ZW0gPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2dpdGh1YkNvZGVCbG9ja3MnKShpdGVtLCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICAgICAgaXRlbSA9IHNob3dkb3duLnN1YlBhcnNlcignYmxvY2tHYW11dCcpKGl0ZW0sIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmVjdXJzaW9uIGZvciBzdWItbGlzdHM6XG4gICAgICAgIGl0ZW0gPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2xpc3RzJykoaXRlbSwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgICAgIGl0ZW0gPSBpdGVtLnJlcGxhY2UoL1xcbiQvLCAnJyk7IC8vIGNob21wKGl0ZW0pXG4gICAgICAgIGl0ZW0gPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2hhc2hIVE1MQmxvY2tzJykoaXRlbSwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgICAgICAgLy8gQ29sYXBzZSBkb3VibGUgbGluZWJyZWFrc1xuICAgICAgICBpdGVtID0gaXRlbS5yZXBsYWNlKC9cXG5cXG4rL2csICdcXG5cXG4nKTtcbiAgICAgICAgaWYgKGlzUGFyYWdyYXBoZWQpIHtcbiAgICAgICAgICBpdGVtID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdwYXJhZ3JhcGhzJykoaXRlbSwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbSA9IHNob3dkb3duLnN1YlBhcnNlcignc3BhbkdhbXV0JykoaXRlbSwgb3B0aW9ucywgZ2xvYmFscyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gbm93IHdlIG5lZWQgdG8gcmVtb3ZlIHRoZSBtYXJrZXIgKMKoQSlcbiAgICAgIGl0ZW0gPSBpdGVtLnJlcGxhY2UoJ8KoQScsICcnKTtcbiAgICAgIC8vIHdlIGNhbiBmaW5hbGx5IHdyYXAgdGhlIGxpbmUgaW4gbGlzdCBpdGVtIHRhZ3NcbiAgICAgIGl0ZW0gPSAgJzxsaScgKyBidWxsZXRTdHlsZSArICc+JyArIGl0ZW0gKyAnPC9saT5cXG4nO1xuXG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9KTtcblxuICAgIC8vIGF0dGFja2xhYjogc3RyaXAgc2VudGluZWxcbiAgICBsaXN0U3RyID0gbGlzdFN0ci5yZXBsYWNlKC/CqDAvZywgJycpO1xuXG4gICAgZ2xvYmFscy5nTGlzdExldmVsLS07XG5cbiAgICBpZiAodHJpbVRyYWlsaW5nKSB7XG4gICAgICBsaXN0U3RyID0gbGlzdFN0ci5yZXBsYWNlKC9cXHMrJC8sICcnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlzdFN0cjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0eWxlU3RhcnROdW1iZXIgKGxpc3QsIGxpc3RUeXBlKSB7XG4gICAgLy8gY2hlY2sgaWYgb2wgYW5kIHN0YXJ0cyBieSBhIG51bWJlciBkaWZmZXJlbnQgdGhhbiAxXG4gICAgaWYgKGxpc3RUeXBlID09PSAnb2wnKSB7XG4gICAgICB2YXIgcmVzID0gbGlzdC5tYXRjaCgvXiAqKFxcZCspXFwuLyk7XG4gICAgICBpZiAocmVzICYmIHJlc1sxXSAhPT0gJzEnKSB7XG4gICAgICAgIHJldHVybiAnIHN0YXJ0PVwiJyArIHJlc1sxXSArICdcIic7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBhbmQgcGFyc2UgY29uc2VjdXRpdmUgbGlzdHMgKGJldHRlciBmaXggZm9yIGlzc3VlICMxNDIpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsaXN0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsaXN0VHlwZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHRyaW1UcmFpbGluZ1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZnVuY3Rpb24gcGFyc2VDb25zZWN1dGl2ZUxpc3RzIChsaXN0LCBsaXN0VHlwZSwgdHJpbVRyYWlsaW5nKSB7XG4gICAgLy8gY2hlY2sgaWYgd2UgY2F1Z2h0IDIgb3IgbW9yZSBjb25zZWN1dGl2ZSBsaXN0cyBieSBtaXN0YWtlXG4gICAgLy8gd2UgdXNlIHRoZSBjb3VudGVyUmd4LCBtZWFuaW5nIGlmIGxpc3RUeXBlIGlzIFVMIHdlIGxvb2sgZm9yIE9MIGFuZCB2aWNlIHZlcnNhXG4gICAgdmFyIG9sUmd4ID0gKG9wdGlvbnMuZGlzYWJsZUZvcmNlZDRTcGFjZXNJbmRlbnRlZFN1Ymxpc3RzKSA/IC9eID9cXGQrXFwuWyBcXHRdL2dtIDogL14gezAsM31cXGQrXFwuWyBcXHRdL2dtLFxuICAgICAgICB1bFJneCA9IChvcHRpb25zLmRpc2FibGVGb3JjZWQ0U3BhY2VzSW5kZW50ZWRTdWJsaXN0cykgPyAvXiA/WyorLV1bIFxcdF0vZ20gOiAvXiB7MCwzfVsqKy1dWyBcXHRdL2dtLFxuICAgICAgICBjb3VudGVyUnhnID0gKGxpc3RUeXBlID09PSAndWwnKSA/IG9sUmd4IDogdWxSZ3gsXG4gICAgICAgIHJlc3VsdCA9ICcnO1xuXG4gICAgaWYgKGxpc3Quc2VhcmNoKGNvdW50ZXJSeGcpICE9PSAtMSkge1xuICAgICAgKGZ1bmN0aW9uIHBhcnNlQ0wgKHR4dCkge1xuICAgICAgICB2YXIgcG9zID0gdHh0LnNlYXJjaChjb3VudGVyUnhnKSxcbiAgICAgICAgICAgIHN0eWxlID0gc3R5bGVTdGFydE51bWJlcihsaXN0LCBsaXN0VHlwZSk7XG4gICAgICAgIGlmIChwb3MgIT09IC0xKSB7XG4gICAgICAgICAgLy8gc2xpY2VcbiAgICAgICAgICByZXN1bHQgKz0gJ1xcblxcbjwnICsgbGlzdFR5cGUgKyBzdHlsZSArICc+XFxuJyArIHByb2Nlc3NMaXN0SXRlbXModHh0LnNsaWNlKDAsIHBvcyksICEhdHJpbVRyYWlsaW5nKSArICc8LycgKyBsaXN0VHlwZSArICc+XFxuJztcblxuICAgICAgICAgIC8vIGludmVydCBjb3VudGVyVHlwZSBhbmQgbGlzdFR5cGVcbiAgICAgICAgICBsaXN0VHlwZSA9IChsaXN0VHlwZSA9PT0gJ3VsJykgPyAnb2wnIDogJ3VsJztcbiAgICAgICAgICBjb3VudGVyUnhnID0gKGxpc3RUeXBlID09PSAndWwnKSA/IG9sUmd4IDogdWxSZ3g7XG5cbiAgICAgICAgICAvL3JlY3Vyc2VcbiAgICAgICAgICBwYXJzZUNMKHR4dC5zbGljZShwb3MpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgKz0gJ1xcblxcbjwnICsgbGlzdFR5cGUgKyBzdHlsZSArICc+XFxuJyArIHByb2Nlc3NMaXN0SXRlbXModHh0LCAhIXRyaW1UcmFpbGluZykgKyAnPC8nICsgbGlzdFR5cGUgKyAnPlxcbic7XG4gICAgICAgIH1cbiAgICAgIH0pKGxpc3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc3R5bGUgPSBzdHlsZVN0YXJ0TnVtYmVyKGxpc3QsIGxpc3RUeXBlKTtcbiAgICAgIHJlc3VsdCA9ICdcXG5cXG48JyArIGxpc3RUeXBlICsgc3R5bGUgKyAnPlxcbicgKyBwcm9jZXNzTGlzdEl0ZW1zKGxpc3QsICEhdHJpbVRyYWlsaW5nKSArICc8LycgKyBsaXN0VHlwZSArICc+XFxuJztcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqIFN0YXJ0IG9mIGxpc3QgcGFyc2luZyAqKi9cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnbGlzdHMuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIC8vIGFkZCBzZW50aW5lbCB0byBoYWNrIGFyb3VuZCBraHRtbC9zYWZhcmkgYnVnOlxuICAvLyBodHRwOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMTIzMVxuICB0ZXh0ICs9ICfCqDAnO1xuXG4gIGlmIChnbG9iYWxzLmdMaXN0TGV2ZWwpIHtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9eKCggezAsM30oWyorLV18XFxkK1suXSlbIFxcdF0rKVteXFxyXSs/KMKoMHxcXG57Mix9KD89XFxTKSg/IVsgXFx0XSooPzpbKistXXxcXGQrWy5dKVsgXFx0XSspKSkvZ20sXG4gICAgICBmdW5jdGlvbiAod2hvbGVNYXRjaCwgbGlzdCwgbTIpIHtcbiAgICAgICAgdmFyIGxpc3RUeXBlID0gKG0yLnNlYXJjaCgvWyorLV0vZykgPiAtMSkgPyAndWwnIDogJ29sJztcbiAgICAgICAgcmV0dXJuIHBhcnNlQ29uc2VjdXRpdmVMaXN0cyhsaXN0LCBsaXN0VHlwZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oXFxuXFxufF5cXG4/KSgoIHswLDN9KFsqKy1dfFxcZCtbLl0pWyBcXHRdKylbXlxccl0rPyjCqDB8XFxuezIsfSg/PVxcUykoPyFbIFxcdF0qKD86WyorLV18XFxkK1suXSlbIFxcdF0rKSkpL2dtLFxuICAgICAgZnVuY3Rpb24gKHdob2xlTWF0Y2gsIG0xLCBsaXN0LCBtMykge1xuICAgICAgICB2YXIgbGlzdFR5cGUgPSAobTMuc2VhcmNoKC9bKistXS9nKSA+IC0xKSA/ICd1bCcgOiAnb2wnO1xuICAgICAgICByZXR1cm4gcGFyc2VDb25zZWN1dGl2ZUxpc3RzKGxpc3QsIGxpc3RUeXBlLCBmYWxzZSk7XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIC8vIHN0cmlwIHNlbnRpbmVsXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL8KoMC8sICcnKTtcbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnbGlzdHMuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcblxyXG4vKipcbiAqIFBhcnNlIG1ldGFkYXRhIGF0IHRoZSB0b3Agb2YgdGhlIGRvY3VtZW50XG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcignbWV0YWRhdGEnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgaWYgKCFvcHRpb25zLm1ldGFkYXRhKSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdtZXRhZGF0YS5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICBmdW5jdGlvbiBwYXJzZU1ldGFkYXRhQ29udGVudHMgKGNvbnRlbnQpIHtcbiAgICAvLyByYXcgaXMgcmF3IHNvIGl0J3Mgbm90IGNoYW5nZWQgaW4gYW55IHdheVxuICAgIGdsb2JhbHMubWV0YWRhdGEucmF3ID0gY29udGVudDtcblxuICAgIC8vIGVzY2FwZSBjaGFycyBmb3JiaWRkZW4gaW4gaHRtbCBhdHRyaWJ1dGVzXG4gICAgLy8gZG91YmxlIHF1b3Rlc1xuICAgIGNvbnRlbnQgPSBjb250ZW50XG4gICAgICAvLyBhbXBlcnNhbmQgZmlyc3RcbiAgICAgIC5yZXBsYWNlKC8mL2csICcmYW1wOycpXG4gICAgICAvLyBkb3VibGUgcXVvdGVzXG4gICAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xuXG4gICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZSgvXFxuIHs0fS9nLCAnICcpO1xuICAgIGNvbnRlbnQucmVwbGFjZSgvXihbXFxTIF0rKTogKyhbXFxzXFxTXSs/KSQvZ20sIGZ1bmN0aW9uICh3bSwga2V5LCB2YWx1ZSkge1xuICAgICAgZ2xvYmFscy5tZXRhZGF0YS5wYXJzZWRba2V5XSA9IHZhbHVlO1xuICAgICAgcmV0dXJuICcnO1xuICAgIH0pO1xuICB9XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXlxccyrCq8KrwqsrKFxcUyo/KVxcbihbXFxzXFxTXSs/KVxcbsK7wrvCuytcXG4vLCBmdW5jdGlvbiAod2hvbGVtYXRjaCwgZm9ybWF0LCBjb250ZW50KSB7XG4gICAgcGFyc2VNZXRhZGF0YUNvbnRlbnRzKGNvbnRlbnQpO1xuICAgIHJldHVybiAnwqhNJztcbiAgfSk7XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXlxccyotLS0rKFxcUyo/KVxcbihbXFxzXFxTXSs/KVxcbi0tLStcXG4vLCBmdW5jdGlvbiAod2hvbGVtYXRjaCwgZm9ybWF0LCBjb250ZW50KSB7XG4gICAgaWYgKGZvcm1hdCkge1xuICAgICAgZ2xvYmFscy5tZXRhZGF0YS5mb3JtYXQgPSBmb3JtYXQ7XG4gICAgfVxuICAgIHBhcnNlTWV0YWRhdGFDb250ZW50cyhjb250ZW50KTtcbiAgICByZXR1cm4gJ8KoTSc7XG4gIH0pO1xuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL8KoTS9nLCAnJyk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnbWV0YWRhdGEuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcblxyXG4vKipcbiAqIFJlbW92ZSBvbmUgbGV2ZWwgb2YgbGluZS1sZWFkaW5nIHRhYnMgb3Igc3BhY2VzXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcignb3V0ZGVudCcsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgnb3V0ZGVudC5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAvLyBhdHRhY2tsYWI6IGhhY2sgYXJvdW5kIEtvbnF1ZXJvciAzLjUuNCBidWc6XG4gIC8vIFwiLS0tLS0tLS0tLWJ1Z1wiLnJlcGxhY2UoL14tL2csXCJcIikgPT0gXCJidWdcIlxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9eKFxcdHxbIF17MSw0fSkvZ20sICfCqDAnKTsgLy8gYXR0YWNrbGFiOiBnX3RhYl93aWR0aFxuXG4gIC8vIGF0dGFja2xhYjogY2xlYW4gdXAgaGFja1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC/CqDAvZywgJycpO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ291dGRlbnQuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcblxyXG4vKipcbiAqXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcigncGFyYWdyYXBocycsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdwYXJhZ3JhcGhzLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAvLyBTdHJpcCBsZWFkaW5nIGFuZCB0cmFpbGluZyBsaW5lczpcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXlxcbisvZywgJycpO1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXG4rJC9nLCAnJyk7XG5cbiAgdmFyIGdyYWZzID0gdGV4dC5zcGxpdCgvXFxuezIsfS9nKSxcbiAgICAgIGdyYWZzT3V0ID0gW10sXG4gICAgICBlbmQgPSBncmFmcy5sZW5ndGg7IC8vIFdyYXAgPHA+IHRhZ3NcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgdmFyIHN0ciA9IGdyYWZzW2ldO1xuICAgIC8vIGlmIHRoaXMgaXMgYW4gSFRNTCBtYXJrZXIsIGNvcHkgaXRcbiAgICBpZiAoc3RyLnNlYXJjaCgvwqgoS3xHKShcXGQrKVxcMS9nKSA+PSAwKSB7XG4gICAgICBncmFmc091dC5wdXNoKHN0cik7XG5cbiAgICAvLyB0ZXN0IGZvciBwcmVzZW5jZSBvZiBjaGFyYWN0ZXJzIHRvIHByZXZlbnQgZW1wdHkgbGluZXMgYmVpbmcgcGFyc2VkXG4gICAgLy8gYXMgcGFyYWdyYXBocyAocmVzdWx0aW5nIGluIHVuZGVzaXJlZCBleHRyYSBlbXB0eSBwYXJhZ3JhcGhzKVxuICAgIH0gZWxzZSBpZiAoc3RyLnNlYXJjaCgvXFxTLykgPj0gMCkge1xuICAgICAgc3RyID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdzcGFuR2FtdXQnKShzdHIsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgICAgc3RyID0gc3RyLnJlcGxhY2UoL14oWyBcXHRdKikvZywgJzxwPicpO1xuICAgICAgc3RyICs9ICc8L3A+JztcbiAgICAgIGdyYWZzT3V0LnB1c2goc3RyKTtcbiAgICB9XG4gIH1cblxuICAvKiogVW5oYXNoaWZ5IEhUTUwgYmxvY2tzICovXG4gIGVuZCA9IGdyYWZzT3V0Lmxlbmd0aDtcbiAgZm9yIChpID0gMDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgdmFyIGJsb2NrVGV4dCA9ICcnLFxuICAgICAgICBncmFmc091dEl0ID0gZ3JhZnNPdXRbaV0sXG4gICAgICAgIGNvZGVGbGFnID0gZmFsc2U7XG4gICAgLy8gaWYgdGhpcyBpcyBhIG1hcmtlciBmb3IgYW4gaHRtbCBibG9jay4uLlxuICAgIC8vIHVzZSBSZWdFeHAudGVzdCBpbnN0ZWFkIG9mIHN0cmluZy5zZWFyY2ggYmVjYXVzZSBvZiBRTUwgYnVnXG4gICAgd2hpbGUgKC/CqChLfEcpKFxcZCspXFwxLy50ZXN0KGdyYWZzT3V0SXQpKSB7XG4gICAgICB2YXIgZGVsaW0gPSBSZWdFeHAuJDEsXG4gICAgICAgICAgbnVtICAgPSBSZWdFeHAuJDI7XG5cbiAgICAgIGlmIChkZWxpbSA9PT0gJ0snKSB7XG4gICAgICAgIGJsb2NrVGV4dCA9IGdsb2JhbHMuZ0h0bWxCbG9ja3NbbnVtXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHdlIG5lZWQgdG8gY2hlY2sgaWYgZ2hCbG9jayBpcyBhIGZhbHNlIHBvc2l0aXZlXG4gICAgICAgIGlmIChjb2RlRmxhZykge1xuICAgICAgICAgIC8vIHVzZSBlbmNvZGVkIHZlcnNpb24gb2YgYWxsIHRleHRcbiAgICAgICAgICBibG9ja1RleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2VuY29kZUNvZGUnKShnbG9iYWxzLmdoQ29kZUJsb2Nrc1tudW1dLnRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJsb2NrVGV4dCA9IGdsb2JhbHMuZ2hDb2RlQmxvY2tzW251bV0uY29kZWJsb2NrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBibG9ja1RleHQgPSBibG9ja1RleHQucmVwbGFjZSgvXFwkL2csICckJCQkJyk7IC8vIEVzY2FwZSBhbnkgZG9sbGFyIHNpZ25zXG5cbiAgICAgIGdyYWZzT3V0SXQgPSBncmFmc091dEl0LnJlcGxhY2UoLyhcXG5cXG4pP8KoKEt8RylcXGQrXFwyKFxcblxcbik/LywgYmxvY2tUZXh0KTtcbiAgICAgIC8vIENoZWNrIGlmIGdyYWZzT3V0SXQgaXMgYSBwcmUtPmNvZGVcbiAgICAgIGlmICgvXjxwcmVcXGJbXj5dKj5cXHMqPGNvZGVcXGJbXj5dKj4vLnRlc3QoZ3JhZnNPdXRJdCkpIHtcbiAgICAgICAgY29kZUZsYWcgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBncmFmc091dFtpXSA9IGdyYWZzT3V0SXQ7XG4gIH1cbiAgdGV4dCA9IGdyYWZzT3V0LmpvaW4oJ1xcbicpO1xuICAvLyBTdHJpcCBsZWFkaW5nIGFuZCB0cmFpbGluZyBsaW5lczpcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXlxcbisvZywgJycpO1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXG4rJC9nLCAnJyk7XG4gIHJldHVybiBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ3BhcmFncmFwaHMuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbn0pO1xuXHJcbi8qKlxuICogUnVuIGV4dGVuc2lvblxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ3J1bkV4dGVuc2lvbicsIGZ1bmN0aW9uIChleHQsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGlmIChleHQuZmlsdGVyKSB7XG4gICAgdGV4dCA9IGV4dC5maWx0ZXIodGV4dCwgZ2xvYmFscy5jb252ZXJ0ZXIsIG9wdGlvbnMpO1xuXG4gIH0gZWxzZSBpZiAoZXh0LnJlZ2V4KSB7XG4gICAgLy8gVE9ETyByZW1vdmUgdGhpcyB3aGVuIG9sZCBleHRlbnNpb24gbG9hZGluZyBtZWNoYW5pc20gaXMgZGVwcmVjYXRlZFxuICAgIHZhciByZSA9IGV4dC5yZWdleDtcbiAgICBpZiAoIShyZSBpbnN0YW5jZW9mIFJlZ0V4cCkpIHtcbiAgICAgIHJlID0gbmV3IFJlZ0V4cChyZSwgJ2cnKTtcbiAgICB9XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZShyZSwgZXh0LnJlcGxhY2UpO1xuICB9XG5cbiAgcmV0dXJuIHRleHQ7XG59KTtcblxyXG4vKipcbiAqIFRoZXNlIGFyZSBhbGwgdGhlIHRyYW5zZm9ybWF0aW9ucyB0aGF0IG9jY3VyICp3aXRoaW4qIGJsb2NrLWxldmVsXG4gKiB0YWdzIGxpa2UgcGFyYWdyYXBocywgaGVhZGVycywgYW5kIGxpc3QgaXRlbXMuXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcignc3BhbkdhbXV0JywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ3NwYW5HYW11dC5iZWZvcmUnLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignY29kZVNwYW5zJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2VzY2FwZVNwZWNpYWxDaGFyc1dpdGhpblRhZ0F0dHJpYnV0ZXMnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignZW5jb2RlQmFja3NsYXNoRXNjYXBlcycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIC8vIFByb2Nlc3MgYW5jaG9yIGFuZCBpbWFnZSB0YWdzLiBJbWFnZXMgbXVzdCBjb21lIGZpcnN0LFxuICAvLyBiZWNhdXNlICFbZm9vXVtmXSBsb29rcyBsaWtlIGFuIGFuY2hvci5cbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignaW1hZ2VzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2FuY2hvcnMnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAvLyBNYWtlIGxpbmtzIG91dCBvZiB0aGluZ3MgbGlrZSBgPGh0dHA6Ly9leGFtcGxlLmNvbS8+YFxuICAvLyBNdXN0IGNvbWUgYWZ0ZXIgYW5jaG9ycywgYmVjYXVzZSB5b3UgY2FuIHVzZSA8IGFuZCA+XG4gIC8vIGRlbGltaXRlcnMgaW4gaW5saW5lIGxpbmtzIGxpa2UgW3RoaXNdKDx1cmw+KS5cbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignYXV0b0xpbmtzJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3NpbXBsaWZpZWRBdXRvTGlua3MnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignZW1vamknKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcigndW5kZXJsaW5lJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2l0YWxpY3NBbmRCb2xkJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG4gIHRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3N0cmlrZXRocm91Z2gnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignZWxsaXBzaXMnKSh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcblxuICAvLyB3ZSBuZWVkIHRvIGhhc2ggSFRNTCB0YWdzIGluc2lkZSBzcGFuc1xuICB0ZXh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdoYXNoSFRNTFNwYW5zJykodGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgLy8gbm93IHdlIGVuY29kZSBhbXBzIGFuZCBhbmdsZXNcbiAgdGV4dCA9IHNob3dkb3duLnN1YlBhcnNlcignZW5jb2RlQW1wc0FuZEFuZ2xlcycpKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIC8vIERvIGhhcmQgYnJlYWtzXG4gIGlmIChvcHRpb25zLnNpbXBsZUxpbmVCcmVha3MpIHtcbiAgICAvLyBHRk0gc3R5bGUgaGFyZCBicmVha3NcbiAgICAvLyBvbmx5IGFkZCBsaW5lIGJyZWFrcyBpZiB0aGUgdGV4dCBkb2VzIG5vdCBjb250YWluIGEgYmxvY2sgKHNwZWNpYWwgY2FzZSBmb3IgbGlzdHMpXG4gICAgaWYgKCEvXFxuXFxuwqhLLy50ZXN0KHRleHQpKSB7XG4gICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXG4rL2csICc8YnIgLz5cXG4nKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gVmFuaWxsYSBoYXJkIGJyZWFrc1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLyAgK1xcbi9nLCAnPGJyIC8+XFxuJyk7XG4gIH1cblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdzcGFuR2FtdXQuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcblxyXG5zaG93ZG93bi5zdWJQYXJzZXIoJ3N0cmlrZXRocm91Z2gnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgZnVuY3Rpb24gcGFyc2VJbnNpZGUgKHR4dCkge1xuICAgIGlmIChvcHRpb25zLnNpbXBsaWZpZWRBdXRvTGluaykge1xuICAgICAgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdzaW1wbGlmaWVkQXV0b0xpbmtzJykodHh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgICB9XG4gICAgcmV0dXJuICc8ZGVsPicgKyB0eHQgKyAnPC9kZWw+JztcbiAgfVxuXG4gIGlmIChvcHRpb25zLnN0cmlrZXRocm91Z2gpIHtcbiAgICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCdzdHJpa2V0aHJvdWdoLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLyg/On4pezJ9KFtcXHNcXFNdKz8pKD86fil7Mn0vZywgZnVuY3Rpb24gKHdtLCB0eHQpIHsgcmV0dXJuIHBhcnNlSW5zaWRlKHR4dCk7IH0pO1xuICAgIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ3N0cmlrZXRocm91Z2guYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgfVxuXG4gIHJldHVybiB0ZXh0O1xufSk7XG5cclxuLyoqXG4gKiBTdHJpcHMgbGluayBkZWZpbml0aW9ucyBmcm9tIHRleHQsIHN0b3JlcyB0aGUgVVJMcyBhbmQgdGl0bGVzIGluXG4gKiBoYXNoIHJlZmVyZW5jZXMuXG4gKiBMaW5rIGRlZnMgYXJlIGluIHRoZSBmb3JtOiBeW2lkXTogdXJsIFwib3B0aW9uYWwgdGl0bGVcIlxuICovXG5zaG93ZG93bi5zdWJQYXJzZXIoJ3N0cmlwTGlua0RlZmluaXRpb25zJywgZnVuY3Rpb24gKHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciByZWdleCAgICAgICA9IC9eIHswLDN9XFxbKFteXFxdXSspXTpbIFxcdF0qXFxuP1sgXFx0XSo8PyhbXj5cXHNdKyk+Pyg/OiA9KFsqXFxkXStbQS1aYS16JV17MCw0fSl4KFsqXFxkXStbQS1aYS16JV17MCw0fSkpP1sgXFx0XSpcXG4/WyBcXHRdKig/OihcXG4qKVtcInwnKF0oLis/KVtcInwnKV1bIFxcdF0qKT8oPzpcXG4rfCg/PcKoMCkpL2dtLFxuICAgICAgYmFzZTY0UmVnZXggPSAvXiB7MCwzfVxcWyhbXlxcXV0rKV06WyBcXHRdKlxcbj9bIFxcdF0qPD8oZGF0YTouKz9cXC8uKz87YmFzZTY0LFtBLVphLXowLTkrLz1cXG5dKz8pPj8oPzogPShbKlxcZF0rW0EtWmEteiVdezAsNH0peChbKlxcZF0rW0EtWmEteiVdezAsNH0pKT9bIFxcdF0qXFxuP1sgXFx0XSooPzooXFxuKilbXCJ8JyhdKC4rPylbXCJ8JyldWyBcXHRdKik/KD86XFxuXFxufCg/PcKoMCl8KD89XFxuXFxbKSkvZ207XG5cbiAgLy8gYXR0YWNrbGFiOiBzZW50aW5lbCB3b3JrYXJvdW5kcyBmb3IgbGFjayBvZiBcXEEgYW5kIFxcWiwgc2FmYXJpXFxraHRtbCBidWdcbiAgdGV4dCArPSAnwqgwJztcblxuICB2YXIgcmVwbGFjZUZ1bmMgPSBmdW5jdGlvbiAod2hvbGVNYXRjaCwgbGlua0lkLCB1cmwsIHdpZHRoLCBoZWlnaHQsIGJsYW5rTGluZXMsIHRpdGxlKSB7XG5cbiAgICAvLyBpZiB0aGVyZSBhcmVuJ3QgdHdvIGluc3RhbmNlcyBvZiBsaW5rSWQgaXQgbXVzdCBub3QgYmUgYSByZWZlcmVuY2UgbGluayBzbyBiYWNrIG91dFxuICAgIGxpbmtJZCA9IGxpbmtJZC50b0xvd2VyQ2FzZSgpO1xuICAgIGlmICh0ZXh0LnRvTG93ZXJDYXNlKCkuc3BsaXQobGlua0lkKS5sZW5ndGggLSAxIDwgMikge1xuICAgICAgcmV0dXJuIHdob2xlTWF0Y2g7XG4gICAgfVxuICAgIGlmICh1cmwubWF0Y2goL15kYXRhOi4rP1xcLy4rPztiYXNlNjQsLykpIHtcbiAgICAgIC8vIHJlbW92ZSBuZXdsaW5lc1xuICAgICAgZ2xvYmFscy5nVXJsc1tsaW5rSWRdID0gdXJsLnJlcGxhY2UoL1xccy9nLCAnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdsb2JhbHMuZ1VybHNbbGlua0lkXSA9IHNob3dkb3duLnN1YlBhcnNlcignZW5jb2RlQW1wc0FuZEFuZ2xlcycpKHVybCwgb3B0aW9ucywgZ2xvYmFscyk7ICAvLyBMaW5rIElEcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuICAgIH1cblxuICAgIGlmIChibGFua0xpbmVzKSB7XG4gICAgICAvLyBPb3BzLCBmb3VuZCBibGFuayBsaW5lcywgc28gaXQncyBub3QgYSB0aXRsZS5cbiAgICAgIC8vIFB1dCBiYWNrIHRoZSBwYXJlbnRoZXRpY2FsIHN0YXRlbWVudCB3ZSBzdG9sZS5cbiAgICAgIHJldHVybiBibGFua0xpbmVzICsgdGl0bGU7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRpdGxlKSB7XG4gICAgICAgIGdsb2JhbHMuZ1RpdGxlc1tsaW5rSWRdID0gdGl0bGUucmVwbGFjZSgvXCJ8Jy9nLCAnJnF1b3Q7Jyk7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5wYXJzZUltZ0RpbWVuc2lvbnMgJiYgd2lkdGggJiYgaGVpZ2h0KSB7XG4gICAgICAgIGdsb2JhbHMuZ0RpbWVuc2lvbnNbbGlua0lkXSA9IHtcbiAgICAgICAgICB3aWR0aDogIHdpZHRoLFxuICAgICAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICAgIC8vIENvbXBsZXRlbHkgcmVtb3ZlIHRoZSBkZWZpbml0aW9uIGZyb20gdGhlIHRleHRcbiAgICByZXR1cm4gJyc7XG4gIH07XG5cbiAgLy8gZmlyc3Qgd2UgdHJ5IHRvIGZpbmQgYmFzZTY0IGxpbmsgcmVmZXJlbmNlc1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKGJhc2U2NFJlZ2V4LCByZXBsYWNlRnVuYyk7XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZShyZWdleCwgcmVwbGFjZUZ1bmMpO1xuXG4gIC8vIGF0dGFja2xhYjogc3RyaXAgc2VudGluZWxcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvwqgwLywgJycpO1xuXG4gIHJldHVybiB0ZXh0O1xufSk7XG5cclxuc2hvd2Rvd24uc3ViUGFyc2VyKCd0YWJsZXMnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgaWYgKCFvcHRpb25zLnRhYmxlcykge1xuICAgIHJldHVybiB0ZXh0O1xuICB9XG5cbiAgdmFyIHRhYmxlUmd4ICAgICAgID0gL14gezAsM31cXHw/LitcXHwuK1xcbiB7MCwzfVxcfD9bIFxcdF0qOj9bIFxcdF0qKD86Wy09XSl7Mix9WyBcXHRdKjo/WyBcXHRdKlxcfFsgXFx0XSo6P1sgXFx0XSooPzpbLT1dKXsyLH1bXFxzXFxTXSs/KD86XFxuXFxufMKoMCkvZ20sXG4gICAgICAvL3NpbmdlQ29sVGJsUmd4ID0gL14gezAsM31cXHwuK1xcfFxcbiB7MCwzfVxcfFsgXFx0XSo6P1sgXFx0XSooPzpbLT1dKXsyLH1bIFxcdF0qOj9bIFxcdF0qXFx8WyBcXHRdKlxcbig/OiB7MCwzfVxcfC4rXFx8XFxuKSsoPzpcXG5cXG58wqgwKS9nbTtcbiAgICAgIHNpbmdlQ29sVGJsUmd4ID0gL14gezAsM31cXHwuK1xcfFsgXFx0XSpcXG4gezAsM31cXHxbIFxcdF0qOj9bIFxcdF0qKD86Wy09XSl7Mix9WyBcXHRdKjo/WyBcXHRdKlxcfFsgXFx0XSpcXG4oIHswLDN9XFx8LitcXHxbIFxcdF0qXFxuKSooPzpcXG58wqgwKS9nbTtcblxuICBmdW5jdGlvbiBwYXJzZVN0eWxlcyAoc0xpbmUpIHtcbiAgICBpZiAoL146WyBcXHRdKi0tKiQvLnRlc3Qoc0xpbmUpKSB7XG4gICAgICByZXR1cm4gJyBzdHlsZT1cInRleHQtYWxpZ246bGVmdDtcIic7XG4gICAgfSBlbHNlIGlmICgvXi0tKlsgXFx0XSo6WyBcXHRdKiQvLnRlc3Qoc0xpbmUpKSB7XG4gICAgICByZXR1cm4gJyBzdHlsZT1cInRleHQtYWxpZ246cmlnaHQ7XCInO1xuICAgIH0gZWxzZSBpZiAoL146WyBcXHRdKi0tKlsgXFx0XSo6JC8udGVzdChzTGluZSkpIHtcbiAgICAgIHJldHVybiAnIHN0eWxlPVwidGV4dC1hbGlnbjpjZW50ZXI7XCInO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VIZWFkZXJzIChoZWFkZXIsIHN0eWxlKSB7XG4gICAgdmFyIGlkID0gJyc7XG4gICAgaGVhZGVyID0gaGVhZGVyLnRyaW0oKTtcbiAgICAvLyBzdXBwb3J0IGJvdGggdGFibGVzSGVhZGVySWQgYW5kIHRhYmxlSGVhZGVySWQgZHVlIHRvIGVycm9yIGluIGRvY3VtZW50YXRpb24gc28gd2UgZG9uJ3QgYnJlYWsgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgICBpZiAob3B0aW9ucy50YWJsZXNIZWFkZXJJZCB8fCBvcHRpb25zLnRhYmxlSGVhZGVySWQpIHtcbiAgICAgIGlkID0gJyBpZD1cIicgKyBoZWFkZXIucmVwbGFjZSgvIC9nLCAnXycpLnRvTG93ZXJDYXNlKCkgKyAnXCInO1xuICAgIH1cbiAgICBoZWFkZXIgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3NwYW5HYW11dCcpKGhlYWRlciwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgICByZXR1cm4gJzx0aCcgKyBpZCArIHN0eWxlICsgJz4nICsgaGVhZGVyICsgJzwvdGg+XFxuJztcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlQ2VsbHMgKGNlbGwsIHN0eWxlKSB7XG4gICAgdmFyIHN1YlRleHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ3NwYW5HYW11dCcpKGNlbGwsIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIHJldHVybiAnPHRkJyArIHN0eWxlICsgJz4nICsgc3ViVGV4dCArICc8L3RkPlxcbic7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZFRhYmxlIChoZWFkZXJzLCBjZWxscykge1xuICAgIHZhciB0YiA9ICc8dGFibGU+XFxuPHRoZWFkPlxcbjx0cj5cXG4nLFxuICAgICAgICB0YmxMZ24gPSBoZWFkZXJzLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGJsTGduOyArK2kpIHtcbiAgICAgIHRiICs9IGhlYWRlcnNbaV07XG4gICAgfVxuICAgIHRiICs9ICc8L3RyPlxcbjwvdGhlYWQ+XFxuPHRib2R5Plxcbic7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgY2VsbHMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHRiICs9ICc8dHI+XFxuJztcbiAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCB0YmxMZ247ICsraWkpIHtcbiAgICAgICAgdGIgKz0gY2VsbHNbaV1baWldO1xuICAgICAgfVxuICAgICAgdGIgKz0gJzwvdHI+XFxuJztcbiAgICB9XG4gICAgdGIgKz0gJzwvdGJvZHk+XFxuPC90YWJsZT5cXG4nO1xuICAgIHJldHVybiB0YjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlVGFibGUgKHJhd1RhYmxlKSB7XG4gICAgdmFyIGksIHRhYmxlTGluZXMgPSByYXdUYWJsZS5zcGxpdCgnXFxuJyk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgdGFibGVMaW5lcy5sZW5ndGg7ICsraSkge1xuICAgICAgLy8gc3RyaXAgd3JvbmcgZmlyc3QgYW5kIGxhc3QgY29sdW1uIGlmIHdyYXBwZWQgdGFibGVzIGFyZSB1c2VkXG4gICAgICBpZiAoL14gezAsM31cXHwvLnRlc3QodGFibGVMaW5lc1tpXSkpIHtcbiAgICAgICAgdGFibGVMaW5lc1tpXSA9IHRhYmxlTGluZXNbaV0ucmVwbGFjZSgvXiB7MCwzfVxcfC8sICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICgvXFx8WyBcXHRdKiQvLnRlc3QodGFibGVMaW5lc1tpXSkpIHtcbiAgICAgICAgdGFibGVMaW5lc1tpXSA9IHRhYmxlTGluZXNbaV0ucmVwbGFjZSgvXFx8WyBcXHRdKiQvLCAnJyk7XG4gICAgICB9XG4gICAgICAvLyBwYXJzZSBjb2RlIHNwYW5zIGZpcnN0LCBidXQgd2Ugb25seSBzdXBwb3J0IG9uZSBsaW5lIGNvZGUgc3BhbnNcbiAgICAgIHRhYmxlTGluZXNbaV0gPSBzaG93ZG93bi5zdWJQYXJzZXIoJ2NvZGVTcGFucycpKHRhYmxlTGluZXNbaV0sIG9wdGlvbnMsIGdsb2JhbHMpO1xuICAgIH1cblxuICAgIHZhciByYXdIZWFkZXJzID0gdGFibGVMaW5lc1swXS5zcGxpdCgnfCcpLm1hcChmdW5jdGlvbiAocykgeyByZXR1cm4gcy50cmltKCk7fSksXG4gICAgICAgIHJhd1N0eWxlcyA9IHRhYmxlTGluZXNbMV0uc3BsaXQoJ3wnKS5tYXAoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMudHJpbSgpO30pLFxuICAgICAgICByYXdDZWxscyA9IFtdLFxuICAgICAgICBoZWFkZXJzID0gW10sXG4gICAgICAgIHN0eWxlcyA9IFtdLFxuICAgICAgICBjZWxscyA9IFtdO1xuXG4gICAgdGFibGVMaW5lcy5zaGlmdCgpO1xuICAgIHRhYmxlTGluZXMuc2hpZnQoKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCB0YWJsZUxpbmVzLmxlbmd0aDsgKytpKSB7XG4gICAgICBpZiAodGFibGVMaW5lc1tpXS50cmltKCkgPT09ICcnKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmF3Q2VsbHMucHVzaChcbiAgICAgICAgdGFibGVMaW5lc1tpXVxuICAgICAgICAgIC5zcGxpdCgnfCcpXG4gICAgICAgICAgLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgcmV0dXJuIHMudHJpbSgpO1xuICAgICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChyYXdIZWFkZXJzLmxlbmd0aCA8IHJhd1N0eWxlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiByYXdUYWJsZTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgcmF3U3R5bGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICBzdHlsZXMucHVzaChwYXJzZVN0eWxlcyhyYXdTdHlsZXNbaV0pKTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgcmF3SGVhZGVycy5sZW5ndGg7ICsraSkge1xuICAgICAgaWYgKHNob3dkb3duLmhlbHBlci5pc1VuZGVmaW5lZChzdHlsZXNbaV0pKSB7XG4gICAgICAgIHN0eWxlc1tpXSA9ICcnO1xuICAgICAgfVxuICAgICAgaGVhZGVycy5wdXNoKHBhcnNlSGVhZGVycyhyYXdIZWFkZXJzW2ldLCBzdHlsZXNbaV0pKTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgcmF3Q2VsbHMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciByb3cgPSBbXTtcbiAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBoZWFkZXJzLmxlbmd0aDsgKytpaSkge1xuICAgICAgICBpZiAoc2hvd2Rvd24uaGVscGVyLmlzVW5kZWZpbmVkKHJhd0NlbGxzW2ldW2lpXSkpIHtcblxuICAgICAgICB9XG4gICAgICAgIHJvdy5wdXNoKHBhcnNlQ2VsbHMocmF3Q2VsbHNbaV1baWldLCBzdHlsZXNbaWldKSk7XG4gICAgICB9XG4gICAgICBjZWxscy5wdXNoKHJvdyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1aWxkVGFibGUoaGVhZGVycywgY2VsbHMpO1xuICB9XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgndGFibGVzLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIC8vIGZpbmQgZXNjYXBlZCBwaXBlIGNoYXJhY3RlcnNcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxcXChcXHwpL2csIHNob3dkb3duLmhlbHBlci5lc2NhcGVDaGFyYWN0ZXJzQ2FsbGJhY2spO1xuXG4gIC8vIHBhcnNlIG11bHRpIGNvbHVtbiB0YWJsZXNcbiAgdGV4dCA9IHRleHQucmVwbGFjZSh0YWJsZVJneCwgcGFyc2VUYWJsZSk7XG5cbiAgLy8gcGFyc2Ugb25lIGNvbHVtbiB0YWJsZXNcbiAgdGV4dCA9IHRleHQucmVwbGFjZShzaW5nZUNvbFRibFJneCwgcGFyc2VUYWJsZSk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgndGFibGVzLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgcmV0dXJuIHRleHQ7XG59KTtcblxyXG5zaG93ZG93bi5zdWJQYXJzZXIoJ3VuZGVybGluZScsIGZ1bmN0aW9uICh0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoIW9wdGlvbnMudW5kZXJsaW5lKSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICB0ZXh0ID0gZ2xvYmFscy5jb252ZXJ0ZXIuX2Rpc3BhdGNoKCd1bmRlcmxpbmUuYmVmb3JlJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgaWYgKG9wdGlvbnMubGl0ZXJhbE1pZFdvcmRVbmRlcnNjb3Jlcykge1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcYl9fXyhcXFNbXFxzXFxTXSo/KV9fX1xcYi9nLCBmdW5jdGlvbiAod20sIHR4dCkge1xuICAgICAgcmV0dXJuICc8dT4nICsgdHh0ICsgJzwvdT4nO1xuICAgIH0pO1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcYl9fKFxcU1tcXHNcXFNdKj8pX19cXGIvZywgZnVuY3Rpb24gKHdtLCB0eHQpIHtcbiAgICAgIHJldHVybiAnPHU+JyArIHR4dCArICc8L3U+JztcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9fX18oXFxTW1xcc1xcU10qPylfX18vZywgZnVuY3Rpb24gKHdtLCBtKSB7XG4gICAgICByZXR1cm4gKC9cXFMkLy50ZXN0KG0pKSA/ICc8dT4nICsgbSArICc8L3U+JyA6IHdtO1xuICAgIH0pO1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL19fKFxcU1tcXHNcXFNdKj8pX18vZywgZnVuY3Rpb24gKHdtLCBtKSB7XG4gICAgICByZXR1cm4gKC9cXFMkLy50ZXN0KG0pKSA/ICc8dT4nICsgbSArICc8L3U+JyA6IHdtO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gZXNjYXBlIHJlbWFpbmluZyB1bmRlcnNjb3JlcyB0byBwcmV2ZW50IHRoZW0gYmVpbmcgcGFyc2VkIGJ5IGl0YWxpYyBhbmQgYm9sZFxuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oXykvZywgc2hvd2Rvd24uaGVscGVyLmVzY2FwZUNoYXJhY3RlcnNDYWxsYmFjayk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgndW5kZXJsaW5lLmFmdGVyJywgdGV4dCwgb3B0aW9ucywgZ2xvYmFscyk7XG5cbiAgcmV0dXJuIHRleHQ7XG59KTtcblxyXG4vKipcbiAqIFN3YXAgYmFjayBpbiBhbGwgdGhlIHNwZWNpYWwgY2hhcmFjdGVycyB3ZSd2ZSBoaWRkZW4uXG4gKi9cbnNob3dkb3duLnN1YlBhcnNlcigndW5lc2NhcGVTcGVjaWFsQ2hhcnMnLCBmdW5jdGlvbiAodGV4dCwgb3B0aW9ucywgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG4gIHRleHQgPSBnbG9iYWxzLmNvbnZlcnRlci5fZGlzcGF0Y2goJ3VuZXNjYXBlU3BlY2lhbENoYXJzLmJlZm9yZScsIHRleHQsIG9wdGlvbnMsIGdsb2JhbHMpO1xuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL8KoRShcXGQrKUUvZywgZnVuY3Rpb24gKHdob2xlTWF0Y2gsIG0xKSB7XG4gICAgdmFyIGNoYXJDb2RlVG9SZXBsYWNlID0gcGFyc2VJbnQobTEpO1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoYXJDb2RlVG9SZXBsYWNlKTtcbiAgfSk7XG5cbiAgdGV4dCA9IGdsb2JhbHMuY29udmVydGVyLl9kaXNwYXRjaCgndW5lc2NhcGVTcGVjaWFsQ2hhcnMuYWZ0ZXInLCB0ZXh0LCBvcHRpb25zLCBnbG9iYWxzKTtcbiAgcmV0dXJuIHRleHQ7XG59KTtcblxyXG5zaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5ibG9ja3F1b3RlJywgZnVuY3Rpb24gKG5vZGUsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciB0eHQgPSAnJztcbiAgaWYgKG5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZE5vZGVzLFxuICAgICAgICBjaGlsZHJlbkxlbmd0aCA9IGNoaWxkcmVuLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGlubmVyVHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ubm9kZScpKGNoaWxkcmVuW2ldLCBnbG9iYWxzKTtcblxuICAgICAgaWYgKGlubmVyVHh0ID09PSAnJykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHR4dCArPSBpbm5lclR4dDtcbiAgICB9XG4gIH1cbiAgLy8gY2xlYW51cFxuICB0eHQgPSB0eHQudHJpbSgpO1xuICB0eHQgPSAnPiAnICsgdHh0LnNwbGl0KCdcXG4nKS5qb2luKCdcXG4+ICcpO1xuICByZXR1cm4gdHh0O1xufSk7XG5cclxuc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24uY29kZUJsb2NrJywgZnVuY3Rpb24gKG5vZGUsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBsYW5nID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2xhbmd1YWdlJyksXG4gICAgICBudW0gID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ3ByZWNvZGVudW0nKTtcbiAgcmV0dXJuICdgYGAnICsgbGFuZyArICdcXG4nICsgZ2xvYmFscy5wcmVMaXN0W251bV0gKyAnXFxuYGBgJztcbn0pO1xuXHJcbnNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmNvZGVTcGFuJywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHJldHVybiAnYCcgKyBub2RlLmlubmVySFRNTCArICdgJztcbn0pO1xuXHJcbnNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmVtcGhhc2lzJywgZnVuY3Rpb24gKG5vZGUsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciB0eHQgPSAnJztcbiAgaWYgKG5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgdHh0ICs9ICcqJztcbiAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkTm9kZXMsXG4gICAgICAgIGNoaWxkcmVuTGVuZ3RoID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7ICsraSkge1xuICAgICAgdHh0ICs9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLm5vZGUnKShjaGlsZHJlbltpXSwgZ2xvYmFscyk7XG4gICAgfVxuICAgIHR4dCArPSAnKic7XG4gIH1cbiAgcmV0dXJuIHR4dDtcbn0pO1xuXHJcbnNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmhlYWRlcicsIGZ1bmN0aW9uIChub2RlLCBnbG9iYWxzLCBoZWFkZXJMZXZlbCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGhlYWRlck1hcmsgPSBuZXcgQXJyYXkoaGVhZGVyTGV2ZWwgKyAxKS5qb2luKCcjJyksXG4gICAgICB0eHQgPSAnJztcblxuICBpZiAobm9kZS5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICB0eHQgPSBoZWFkZXJNYXJrICsgJyAnO1xuICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGROb2RlcyxcbiAgICAgICAgY2hpbGRyZW5MZW5ndGggPSBjaGlsZHJlbi5sZW5ndGg7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyArK2kpIHtcbiAgICAgIHR4dCArPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5ub2RlJykoY2hpbGRyZW5baV0sIGdsb2JhbHMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHh0O1xufSk7XG5cclxuc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24uaHInLCBmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICByZXR1cm4gJy0tLSc7XG59KTtcblxyXG5zaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5pbWFnZScsIGZ1bmN0aW9uIChub2RlKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgdHh0ID0gJyc7XG4gIGlmIChub2RlLmhhc0F0dHJpYnV0ZSgnc3JjJykpIHtcbiAgICB0eHQgKz0gJyFbJyArIG5vZGUuZ2V0QXR0cmlidXRlKCdhbHQnKSArICddKCc7XG4gICAgdHh0ICs9ICc8JyArIG5vZGUuZ2V0QXR0cmlidXRlKCdzcmMnKSArICc+JztcbiAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGUoJ3dpZHRoJykgJiYgbm9kZS5oYXNBdHRyaWJ1dGUoJ2hlaWdodCcpKSB7XG4gICAgICB0eHQgKz0gJyA9JyArIG5vZGUuZ2V0QXR0cmlidXRlKCd3aWR0aCcpICsgJ3gnICsgbm9kZS5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcpO1xuICAgIH1cblxuICAgIGlmIChub2RlLmhhc0F0dHJpYnV0ZSgndGl0bGUnKSkge1xuICAgICAgdHh0ICs9ICcgXCInICsgbm9kZS5nZXRBdHRyaWJ1dGUoJ3RpdGxlJykgKyAnXCInO1xuICAgIH1cbiAgICB0eHQgKz0gJyknO1xuICB9XG4gIHJldHVybiB0eHQ7XG59KTtcblxyXG5zaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5saW5rcycsIGZ1bmN0aW9uIChub2RlLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgdHh0ID0gJyc7XG4gIGlmIChub2RlLmhhc0NoaWxkTm9kZXMoKSAmJiBub2RlLmhhc0F0dHJpYnV0ZSgnaHJlZicpKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZE5vZGVzLFxuICAgICAgICBjaGlsZHJlbkxlbmd0aCA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgICB0eHQgPSAnWyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgKytpKSB7XG4gICAgICB0eHQgKz0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ubm9kZScpKGNoaWxkcmVuW2ldLCBnbG9iYWxzKTtcbiAgICB9XG4gICAgdHh0ICs9ICddKCc7XG4gICAgdHh0ICs9ICc8JyArIG5vZGUuZ2V0QXR0cmlidXRlKCdocmVmJykgKyAnPic7XG4gICAgaWYgKG5vZGUuaGFzQXR0cmlidXRlKCd0aXRsZScpKSB7XG4gICAgICB0eHQgKz0gJyBcIicgKyBub2RlLmdldEF0dHJpYnV0ZSgndGl0bGUnKSArICdcIic7XG4gICAgfVxuICAgIHR4dCArPSAnKSc7XG4gIH1cbiAgcmV0dXJuIHR4dDtcbn0pO1xuXHJcbnNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmxpc3QnLCBmdW5jdGlvbiAobm9kZSwgZ2xvYmFscywgdHlwZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIHR4dCA9ICcnO1xuICBpZiAoIW5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIHZhciBsaXN0SXRlbXMgICAgICAgPSBub2RlLmNoaWxkTm9kZXMsXG4gICAgICBsaXN0SXRlbXNMZW5naHQgPSBsaXN0SXRlbXMubGVuZ3RoLFxuICAgICAgbGlzdE51bSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdzdGFydCcpIHx8IDE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0SXRlbXNMZW5naHQ7ICsraSkge1xuICAgIGlmICh0eXBlb2YgbGlzdEl0ZW1zW2ldLnRhZ05hbWUgPT09ICd1bmRlZmluZWQnIHx8IGxpc3RJdGVtc1tpXS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgIT09ICdsaScpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGRlZmluZSB0aGUgYnVsbGV0IHRvIHVzZSBpbiBsaXN0XG4gICAgdmFyIGJ1bGxldCA9ICcnO1xuICAgIGlmICh0eXBlID09PSAnb2wnKSB7XG4gICAgICBidWxsZXQgPSBsaXN0TnVtLnRvU3RyaW5nKCkgKyAnLiAnO1xuICAgIH0gZWxzZSB7XG4gICAgICBidWxsZXQgPSAnLSAnO1xuICAgIH1cblxuICAgIC8vIHBhcnNlIGxpc3QgaXRlbVxuICAgIHR4dCArPSBidWxsZXQgKyBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5saXN0SXRlbScpKGxpc3RJdGVtc1tpXSwgZ2xvYmFscyk7XG4gICAgKytsaXN0TnVtO1xuICB9XG5cbiAgLy8gYWRkIGNvbW1lbnQgYXQgdGhlIGVuZCB0byBwcmV2ZW50IGNvbnNlY3V0aXZlIGxpc3RzIHRvIGJlIHBhcnNlZCBhcyBvbmVcbiAgdHh0ICs9ICdcXG48IS0tIC0tPlxcbic7XG4gIHJldHVybiB0eHQudHJpbSgpO1xufSk7XG5cclxuc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ubGlzdEl0ZW0nLCBmdW5jdGlvbiAobm9kZSwgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGxpc3RJdGVtVHh0ID0gJyc7XG5cbiAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZE5vZGVzLFxuICAgICAgY2hpbGRyZW5MZW5naHQgPSBjaGlsZHJlbi5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmdodDsgKytpKSB7XG4gICAgbGlzdEl0ZW1UeHQgKz0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ubm9kZScpKGNoaWxkcmVuW2ldLCBnbG9iYWxzKTtcbiAgfVxuICAvLyBpZiBpdCdzIG9ubHkgb25lIGxpbmVyLCB3ZSBuZWVkIHRvIGFkZCBhIG5ld2xpbmUgYXQgdGhlIGVuZFxuICBpZiAoIS9cXG4kLy50ZXN0KGxpc3RJdGVtVHh0KSkge1xuICAgIGxpc3RJdGVtVHh0ICs9ICdcXG4nO1xuICB9IGVsc2Uge1xuICAgIC8vIGl0J3MgbXVsdGlwYXJhZ3JhcGgsIHNvIHdlIG5lZWQgdG8gaW5kZW50XG4gICAgbGlzdEl0ZW1UeHQgPSBsaXN0SXRlbVR4dFxuICAgICAgLnNwbGl0KCdcXG4nKVxuICAgICAgLmpvaW4oJ1xcbiAgICAnKVxuICAgICAgLnJlcGxhY2UoL14gezR9JC9nbSwgJycpXG4gICAgICAucmVwbGFjZSgvXFxuXFxuKy9nLCAnXFxuXFxuJyk7XG4gIH1cblxuICByZXR1cm4gbGlzdEl0ZW1UeHQ7XG59KTtcblxyXG5cblxuc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ubm9kZScsIGZ1bmN0aW9uIChub2RlLCBnbG9iYWxzLCBzcGFuc09ubHkpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHNwYW5zT25seSA9IHNwYW5zT25seSB8fCBmYWxzZTtcblxuICB2YXIgdHh0ID0gJyc7XG5cbiAgLy8gZWRnZSBjYXNlIG9mIHRleHQgd2l0aG91dCB3cmFwcGVyIHBhcmFncmFwaFxuICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMykge1xuICAgIHJldHVybiBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi50eHQnKShub2RlLCBnbG9iYWxzKTtcbiAgfVxuXG4gIC8vIEhUTUwgY29tbWVudFxuICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCkge1xuICAgIHJldHVybiAnPCEtLScgKyBub2RlLmRhdGEgKyAnLS0+XFxuXFxuJztcbiAgfVxuXG4gIC8vIHByb2Nlc3Mgb25seSBub2RlIGVsZW1lbnRzXG4gIGlmIChub2RlLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgdmFyIHRhZ05hbWUgPSBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcblxuICBzd2l0Y2ggKHRhZ05hbWUpIHtcblxuICAgIC8vXG4gICAgLy8gQkxPQ0tTXG4gICAgLy9cbiAgICBjYXNlICdoMSc6XG4gICAgICBpZiAoIXNwYW5zT25seSkgeyB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5oZWFkZXInKShub2RlLCBnbG9iYWxzLCAxKSArICdcXG5cXG4nOyB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdoMic6XG4gICAgICBpZiAoIXNwYW5zT25seSkgeyB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5oZWFkZXInKShub2RlLCBnbG9iYWxzLCAyKSArICdcXG5cXG4nOyB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdoMyc6XG4gICAgICBpZiAoIXNwYW5zT25seSkgeyB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5oZWFkZXInKShub2RlLCBnbG9iYWxzLCAzKSArICdcXG5cXG4nOyB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdoNCc6XG4gICAgICBpZiAoIXNwYW5zT25seSkgeyB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5oZWFkZXInKShub2RlLCBnbG9iYWxzLCA0KSArICdcXG5cXG4nOyB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdoNSc6XG4gICAgICBpZiAoIXNwYW5zT25seSkgeyB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5oZWFkZXInKShub2RlLCBnbG9iYWxzLCA1KSArICdcXG5cXG4nOyB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdoNic6XG4gICAgICBpZiAoIXNwYW5zT25seSkgeyB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5oZWFkZXInKShub2RlLCBnbG9iYWxzLCA2KSArICdcXG5cXG4nOyB9XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3AnOlxuICAgICAgaWYgKCFzcGFuc09ubHkpIHsgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ucGFyYWdyYXBoJykobm9kZSwgZ2xvYmFscykgKyAnXFxuXFxuJzsgfVxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdibG9ja3F1b3RlJzpcbiAgICAgIGlmICghc3BhbnNPbmx5KSB7IHR4dCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmJsb2NrcXVvdGUnKShub2RlLCBnbG9iYWxzKSArICdcXG5cXG4nOyB9XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2hyJzpcbiAgICAgIGlmICghc3BhbnNPbmx5KSB7IHR4dCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmhyJykobm9kZSwgZ2xvYmFscykgKyAnXFxuXFxuJzsgfVxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdvbCc6XG4gICAgICBpZiAoIXNwYW5zT25seSkgeyB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5saXN0Jykobm9kZSwgZ2xvYmFscywgJ29sJykgKyAnXFxuXFxuJzsgfVxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICd1bCc6XG4gICAgICBpZiAoIXNwYW5zT25seSkgeyB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5saXN0Jykobm9kZSwgZ2xvYmFscywgJ3VsJykgKyAnXFxuXFxuJzsgfVxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdwcmVjb2RlJzpcbiAgICAgIGlmICghc3BhbnNPbmx5KSB7IHR4dCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmNvZGVCbG9jaycpKG5vZGUsIGdsb2JhbHMpICsgJ1xcblxcbic7IH1cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAncHJlJzpcbiAgICAgIGlmICghc3BhbnNPbmx5KSB7IHR4dCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLnByZScpKG5vZGUsIGdsb2JhbHMpICsgJ1xcblxcbic7IH1cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAndGFibGUnOlxuICAgICAgaWYgKCFzcGFuc09ubHkpIHsgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24udGFibGUnKShub2RlLCBnbG9iYWxzKSArICdcXG5cXG4nOyB9XG4gICAgICBicmVhaztcblxuICAgIC8vXG4gICAgLy8gU1BBTlNcbiAgICAvL1xuICAgIGNhc2UgJ2NvZGUnOlxuICAgICAgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24uY29kZVNwYW4nKShub2RlLCBnbG9iYWxzKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnZW0nOlxuICAgIGNhc2UgJ2knOlxuICAgICAgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24uZW1waGFzaXMnKShub2RlLCBnbG9iYWxzKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnc3Ryb25nJzpcbiAgICBjYXNlICdiJzpcbiAgICAgIHR4dCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLnN0cm9uZycpKG5vZGUsIGdsb2JhbHMpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdkZWwnOlxuICAgICAgdHh0ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24uc3RyaWtldGhyb3VnaCcpKG5vZGUsIGdsb2JhbHMpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdhJzpcbiAgICAgIHR4dCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLmxpbmtzJykobm9kZSwgZ2xvYmFscyk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2ltZyc6XG4gICAgICB0eHQgPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5pbWFnZScpKG5vZGUsIGdsb2JhbHMpO1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdHh0ID0gbm9kZS5vdXRlckhUTUwgKyAnXFxuXFxuJztcbiAgfVxuXG4gIC8vIGNvbW1vbiBub3JtYWxpemF0aW9uXG4gIC8vIFRPRE8gZXZlbnR1YWxseVxuXG4gIHJldHVybiB0eHQ7XG59KTtcblxyXG5zaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5wYXJhZ3JhcGgnLCBmdW5jdGlvbiAobm9kZSwgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIHR4dCA9ICcnO1xuICBpZiAobm9kZS5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkTm9kZXMsXG4gICAgICAgIGNoaWxkcmVuTGVuZ3RoID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7ICsraSkge1xuICAgICAgdHh0ICs9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLm5vZGUnKShjaGlsZHJlbltpXSwgZ2xvYmFscyk7XG4gICAgfVxuICB9XG5cbiAgLy8gc29tZSB0ZXh0IG5vcm1hbGl6YXRpb25cbiAgdHh0ID0gdHh0LnRyaW0oKTtcblxuICByZXR1cm4gdHh0O1xufSk7XG5cclxuc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24ucHJlJywgZnVuY3Rpb24gKG5vZGUsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBudW0gID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ3ByZW51bScpO1xuICByZXR1cm4gJzxwcmU+JyArIGdsb2JhbHMucHJlTGlzdFtudW1dICsgJzwvcHJlPic7XG59KTtcblxyXG5zaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5zdHJpa2V0aHJvdWdoJywgZnVuY3Rpb24gKG5vZGUsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciB0eHQgPSAnJztcbiAgaWYgKG5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgdHh0ICs9ICd+fic7XG4gICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZE5vZGVzLFxuICAgICAgICBjaGlsZHJlbkxlbmd0aCA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyArK2kpIHtcbiAgICAgIHR4dCArPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5ub2RlJykoY2hpbGRyZW5baV0sIGdsb2JhbHMpO1xuICAgIH1cbiAgICB0eHQgKz0gJ35+JztcbiAgfVxuICByZXR1cm4gdHh0O1xufSk7XG5cclxuc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24uc3Ryb25nJywgZnVuY3Rpb24gKG5vZGUsIGdsb2JhbHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciB0eHQgPSAnJztcbiAgaWYgKG5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgdHh0ICs9ICcqKic7XG4gICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZE5vZGVzLFxuICAgICAgICBjaGlsZHJlbkxlbmd0aCA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyArK2kpIHtcbiAgICAgIHR4dCArPSBzaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi5ub2RlJykoY2hpbGRyZW5baV0sIGdsb2JhbHMpO1xuICAgIH1cbiAgICB0eHQgKz0gJyoqJztcbiAgfVxuICByZXR1cm4gdHh0O1xufSk7XG5cclxuc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24udGFibGUnLCBmdW5jdGlvbiAobm9kZSwgZ2xvYmFscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIHR4dCA9ICcnLFxuICAgICAgdGFibGVBcnJheSA9IFtbXSwgW11dLFxuICAgICAgaGVhZGluZ3MgICA9IG5vZGUucXVlcnlTZWxlY3RvckFsbCgndGhlYWQ+dHI+dGgnKSxcbiAgICAgIHJvd3MgICAgICAgPSBub2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3Rib2R5PnRyJyksXG4gICAgICBpLCBpaTtcbiAgZm9yIChpID0gMDsgaSA8IGhlYWRpbmdzLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGhlYWRDb250ZW50ID0gc2hvd2Rvd24uc3ViUGFyc2VyKCdtYWtlTWFya2Rvd24udGFibGVDZWxsJykoaGVhZGluZ3NbaV0sIGdsb2JhbHMpLFxuICAgICAgICBhbGxpZ24gPSAnLS0tJztcblxuICAgIGlmIChoZWFkaW5nc1tpXS5oYXNBdHRyaWJ1dGUoJ3N0eWxlJykpIHtcbiAgICAgIHZhciBzdHlsZSA9IGhlYWRpbmdzW2ldLmdldEF0dHJpYnV0ZSgnc3R5bGUnKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccy9nLCAnJyk7XG4gICAgICBzd2l0Y2ggKHN0eWxlKSB7XG4gICAgICAgIGNhc2UgJ3RleHQtYWxpZ246bGVmdDsnOlxuICAgICAgICAgIGFsbGlnbiA9ICc6LS0tJztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndGV4dC1hbGlnbjpyaWdodDsnOlxuICAgICAgICAgIGFsbGlnbiA9ICctLS06JztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndGV4dC1hbGlnbjpjZW50ZXI7JzpcbiAgICAgICAgICBhbGxpZ24gPSAnOi0tLTonO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICB0YWJsZUFycmF5WzBdW2ldID0gaGVhZENvbnRlbnQudHJpbSgpO1xuICAgIHRhYmxlQXJyYXlbMV1baV0gPSBhbGxpZ247XG4gIH1cblxuICBmb3IgKGkgPSAwOyBpIDwgcm93cy5sZW5ndGg7ICsraSkge1xuICAgIHZhciByID0gdGFibGVBcnJheS5wdXNoKFtdKSAtIDEsXG4gICAgICAgIGNvbHMgPSByb3dzW2ldLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0ZCcpO1xuXG4gICAgZm9yIChpaSA9IDA7IGlpIDwgaGVhZGluZ3MubGVuZ3RoOyArK2lpKSB7XG4gICAgICB2YXIgY2VsbENvbnRlbnQgPSAnICc7XG4gICAgICBpZiAodHlwZW9mIGNvbHNbaWldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjZWxsQ29udGVudCA9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLnRhYmxlQ2VsbCcpKGNvbHNbaWldLCBnbG9iYWxzKTtcbiAgICAgIH1cbiAgICAgIHRhYmxlQXJyYXlbcl0ucHVzaChjZWxsQ29udGVudCk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNlbGxTcGFjZXNDb3VudCA9IDM7XG4gIGZvciAoaSA9IDA7IGkgPCB0YWJsZUFycmF5Lmxlbmd0aDsgKytpKSB7XG4gICAgZm9yIChpaSA9IDA7IGlpIDwgdGFibGVBcnJheVtpXS5sZW5ndGg7ICsraWkpIHtcbiAgICAgIHZhciBzdHJMZW4gPSB0YWJsZUFycmF5W2ldW2lpXS5sZW5ndGg7XG4gICAgICBpZiAoc3RyTGVuID4gY2VsbFNwYWNlc0NvdW50KSB7XG4gICAgICAgIGNlbGxTcGFjZXNDb3VudCA9IHN0ckxlbjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKGkgPSAwOyBpIDwgdGFibGVBcnJheS5sZW5ndGg7ICsraSkge1xuICAgIGZvciAoaWkgPSAwOyBpaSA8IHRhYmxlQXJyYXlbaV0ubGVuZ3RoOyArK2lpKSB7XG4gICAgICBpZiAoaSA9PT0gMSkge1xuICAgICAgICBpZiAodGFibGVBcnJheVtpXVtpaV0uc2xpY2UoLTEpID09PSAnOicpIHtcbiAgICAgICAgICB0YWJsZUFycmF5W2ldW2lpXSA9IHNob3dkb3duLmhlbHBlci5wYWRFbmQodGFibGVBcnJheVtpXVtpaV0uc2xpY2UoLTEpLCBjZWxsU3BhY2VzQ291bnQgLSAxLCAnLScpICsgJzonO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhYmxlQXJyYXlbaV1baWldID0gc2hvd2Rvd24uaGVscGVyLnBhZEVuZCh0YWJsZUFycmF5W2ldW2lpXSwgY2VsbFNwYWNlc0NvdW50LCAnLScpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YWJsZUFycmF5W2ldW2lpXSA9IHNob3dkb3duLmhlbHBlci5wYWRFbmQodGFibGVBcnJheVtpXVtpaV0sIGNlbGxTcGFjZXNDb3VudCk7XG4gICAgICB9XG4gICAgfVxuICAgIHR4dCArPSAnfCAnICsgdGFibGVBcnJheVtpXS5qb2luKCcgfCAnKSArICcgfFxcbic7XG4gIH1cblxuICByZXR1cm4gdHh0LnRyaW0oKTtcbn0pO1xuXHJcbnNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLnRhYmxlQ2VsbCcsIGZ1bmN0aW9uIChub2RlLCBnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgdHh0ID0gJyc7XG4gIGlmICghbm9kZS5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZE5vZGVzLFxuICAgICAgY2hpbGRyZW5MZW5ndGggPSBjaGlsZHJlbi5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgKytpKSB7XG4gICAgdHh0ICs9IHNob3dkb3duLnN1YlBhcnNlcignbWFrZU1hcmtkb3duLm5vZGUnKShjaGlsZHJlbltpXSwgZ2xvYmFscywgdHJ1ZSk7XG4gIH1cbiAgcmV0dXJuIHR4dC50cmltKCk7XG59KTtcblxyXG5zaG93ZG93bi5zdWJQYXJzZXIoJ21ha2VNYXJrZG93bi50eHQnLCBmdW5jdGlvbiAobm9kZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIHR4dCA9IG5vZGUubm9kZVZhbHVlO1xuXG4gIC8vIG11bHRpcGxlIHNwYWNlcyBhcmUgY29sbGFwc2VkXG4gIHR4dCA9IHR4dC5yZXBsYWNlKC8gKy9nLCAnICcpO1xuXG4gIC8vIHJlcGxhY2UgdGhlIGN1c3RvbSDCqE5CU1A7IHdpdGggYSBzcGFjZVxuICB0eHQgPSB0eHQucmVwbGFjZSgvwqhOQlNQOy9nLCAnICcpO1xuXG4gIC8vIFwiLCA8LCA+IGFuZCAmIHNob3VsZCByZXBsYWNlIGVzY2FwZWQgaHRtbCBlbnRpdGllc1xuICB0eHQgPSBzaG93ZG93bi5oZWxwZXIudW5lc2NhcGVIVE1MRW50aXRpZXModHh0KTtcblxuICAvLyBlc2NhcGUgbWFya2Rvd24gbWFnaWMgY2hhcmFjdGVyc1xuICAvLyBlbXBoYXNpcywgc3Ryb25nIGFuZCBzdHJpa2V0aHJvdWdoIC0gY2FuIGFwcGVhciBldmVyeXdoZXJlXG4gIC8vIHdlIGFsc28gZXNjYXBlIHBpcGUgKHwpIGJlY2F1c2Ugb2YgdGFibGVzXG4gIC8vIGFuZCBlc2NhcGUgYCBiZWNhdXNlIG9mIGNvZGUgYmxvY2tzIGFuZCBzcGFuc1xuICB0eHQgPSB0eHQucmVwbGFjZSgvKFsqX358YF0pL2csICdcXFxcJDEnKTtcblxuICAvLyBlc2NhcGUgPiBiZWNhdXNlIG9mIGJsb2NrcXVvdGVzXG4gIHR4dCA9IHR4dC5yZXBsYWNlKC9eKFxccyopPi9nLCAnXFxcXCQxPicpO1xuXG4gIC8vIGhhc2ggY2hhcmFjdGVyLCBvbmx5IHRyb3VibGVzb21lIGF0IHRoZSBiZWdpbm5pbmcgb2YgYSBsaW5lIGJlY2F1c2Ugb2YgaGVhZGVyc1xuICB0eHQgPSB0eHQucmVwbGFjZSgvXiMvZ20sICdcXFxcIycpO1xuXG4gIC8vIGhvcml6b250YWwgcnVsZXNcbiAgdHh0ID0gdHh0LnJlcGxhY2UoL14oXFxzKikoWy09XXszLH0pKFxccyopJC8sICckMVxcXFwkMiQzJyk7XG5cbiAgLy8gZG90LCBiZWNhdXNlIG9mIG9yZGVyZWQgbGlzdHMsIG9ubHkgdHJvdWJsZXNvbWUgYXQgdGhlIGJlZ2lubmluZyBvZiBhIGxpbmUgd2hlbiBwcmVjZWRlZCBieSBhbiBpbnRlZ2VyXG4gIHR4dCA9IHR4dC5yZXBsYWNlKC9eKCB7MCwzfVxcZCspXFwuL2dtLCAnJDFcXFxcLicpO1xuXG4gIC8vICssICogYW5kIC0sIGF0IHRoZSBiZWdpbm5pbmcgb2YgYSBsaW5lIGJlY29tZXMgYSBsaXN0LCBzbyB3ZSBuZWVkIHRvIGVzY2FwZSB0aGVtIGFsc28gKGFzdGVyaXNrIHdhcyBhbHJlYWR5IGVzY2FwZWQpXG4gIHR4dCA9IHR4dC5yZXBsYWNlKC9eKCB7MCwzfSkoWystXSkvZ20sICckMVxcXFwkMicpO1xuXG4gIC8vIGltYWdlcyBhbmQgbGlua3MsIF0gZm9sbG93ZWQgYnkgKCBpcyBwcm9ibGVtYXRpYywgc28gd2UgZXNjYXBlIGl0XG4gIHR4dCA9IHR4dC5yZXBsYWNlKC9dKFtcXHNdKilcXCgvZywgJ1xcXFxdJDFcXFxcKCcpO1xuXG4gIC8vIHJlZmVyZW5jZSBVUklzIG11c3QgYWxzbyBiZSBlc2NhcGVkXG4gIHR4dCA9IHR4dC5yZXBsYWNlKC9eIHswLDN9XFxbKFtcXFMgXFx0XSo/KV06L2dtLCAnXFxcXFskMV06Jyk7XG5cbiAgcmV0dXJuIHR4dDtcbn0pO1xuXHJcbnZhciByb290ID0gdGhpcztcblxuLy8gQU1EIExvYWRlclxuaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICByZXR1cm4gc2hvd2Rvd247XG4gIH0pO1xuXG4vLyBDb21tb25KUy9ub2RlSlMgTG9hZGVyXG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gc2hvd2Rvd247XG5cbi8vIFJlZ3VsYXIgQnJvd3NlciBsb2FkZXJcbn0gZWxzZSB7XG4gIHJvb3Quc2hvd2Rvd24gPSBzaG93ZG93bjtcbn1cbn0pLmNhbGwodGhpcyk7XHJcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hvd2Rvd24uanMubWFwXHJcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwidmFyIGRlZmVycmVkID0gW107XG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8gPSAocmVzdWx0LCBjaHVua0lkcywgZm4sIHByaW9yaXR5KSA9PiB7XG5cdGlmKGNodW5rSWRzKSB7XG5cdFx0cHJpb3JpdHkgPSBwcmlvcml0eSB8fCAwO1xuXHRcdGZvcih2YXIgaSA9IGRlZmVycmVkLmxlbmd0aDsgaSA+IDAgJiYgZGVmZXJyZWRbaSAtIDFdWzJdID4gcHJpb3JpdHk7IGktLSkgZGVmZXJyZWRbaV0gPSBkZWZlcnJlZFtpIC0gMV07XG5cdFx0ZGVmZXJyZWRbaV0gPSBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV07XG5cdFx0cmV0dXJuO1xuXHR9XG5cdHZhciBub3RGdWxmaWxsZWQgPSBJbmZpbml0eTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZWZlcnJlZC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV0gPSBkZWZlcnJlZFtpXTtcblx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcblx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGNodW5rSWRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRpZiAoKHByaW9yaXR5ICYgMSA9PT0gMCB8fCBub3RGdWxmaWxsZWQgPj0gcHJpb3JpdHkpICYmIE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uTykuZXZlcnkoKGtleSkgPT4gKF9fd2VicGFja19yZXF1aXJlX18uT1trZXldKGNodW5rSWRzW2pdKSkpKSB7XG5cdFx0XHRcdGNodW5rSWRzLnNwbGljZShqLS0sIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZnVsZmlsbGVkID0gZmFsc2U7XG5cdFx0XHRcdGlmKHByaW9yaXR5IDwgbm90RnVsZmlsbGVkKSBub3RGdWxmaWxsZWQgPSBwcmlvcml0eTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYoZnVsZmlsbGVkKSB7XG5cdFx0XHRkZWZlcnJlZC5zcGxpY2UoaS0tLCAxKVxuXHRcdFx0dmFyIHIgPSBmbigpO1xuXHRcdFx0aWYgKHIgIT09IHVuZGVmaW5lZCkgcmVzdWx0ID0gcjtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn07IiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmYgPSB7fTtcbi8vIFRoaXMgZmlsZSBjb250YWlucyBvbmx5IHRoZSBlbnRyeSBjaHVuay5cbi8vIFRoZSBjaHVuayBsb2FkaW5nIGZ1bmN0aW9uIGZvciBhZGRpdGlvbmFsIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5lID0gKGNodW5rSWQpID0+IHtcblx0cmV0dXJuIFByb21pc2UuYWxsKE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uZikucmVkdWNlKChwcm9taXNlcywga2V5KSA9PiB7XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mW2tleV0oY2h1bmtJZCwgcHJvbWlzZXMpO1xuXHRcdHJldHVybiBwcm9taXNlcztcblx0fSwgW10pKTtcbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYXN5bmMgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnUgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwiXCIgKyBjaHVua0lkICsgXCIuanNcIjtcbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYXN5bmMgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm1pbmlDc3NGID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgY2h1bmtJZCArIFwiLmNzc1wiO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJ2YXIgaW5Qcm9ncmVzcyA9IHt9O1xudmFyIGRhdGFXZWJwYWNrUHJlZml4ID0gXCJldmVucGllcnJlOlwiO1xuLy8gbG9hZFNjcmlwdCBmdW5jdGlvbiB0byBsb2FkIGEgc2NyaXB0IHZpYSBzY3JpcHQgdGFnXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmwgPSAodXJsLCBkb25lLCBrZXksIGNodW5rSWQpID0+IHtcblx0aWYoaW5Qcm9ncmVzc1t1cmxdKSB7IGluUHJvZ3Jlc3NbdXJsXS5wdXNoKGRvbmUpOyByZXR1cm47IH1cblx0dmFyIHNjcmlwdCwgbmVlZEF0dGFjaDtcblx0aWYoa2V5ICE9PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgcyA9IHNjcmlwdHNbaV07XG5cdFx0XHRpZihzLmdldEF0dHJpYnV0ZShcInNyY1wiKSA9PSB1cmwgfHwgcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIikgPT0gZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpIHsgc2NyaXB0ID0gczsgYnJlYWs7IH1cblx0XHR9XG5cdH1cblx0aWYoIXNjcmlwdCkge1xuXHRcdG5lZWRBdHRhY2ggPSB0cnVlO1xuXHRcdHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG5cdFx0c2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnO1xuXHRcdHNjcmlwdC50aW1lb3V0ID0gMTIwO1xuXHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKSB7XG5cdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgX193ZWJwYWNrX3JlcXVpcmVfXy5uYyk7XG5cdFx0fVxuXHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIiwgZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpO1xuXG5cdFx0c2NyaXB0LnNyYyA9IHVybDtcblx0fVxuXHRpblByb2dyZXNzW3VybF0gPSBbZG9uZV07XG5cdHZhciBvblNjcmlwdENvbXBsZXRlID0gKHByZXYsIGV2ZW50KSA9PiB7XG5cdFx0Ly8gYXZvaWQgbWVtIGxlYWtzIGluIElFLlxuXHRcdHNjcmlwdC5vbmVycm9yID0gc2NyaXB0Lm9ubG9hZCA9IG51bGw7XG5cdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXHRcdHZhciBkb25lRm5zID0gaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdGRlbGV0ZSBpblByb2dyZXNzW3VybF07XG5cdFx0c2NyaXB0LnBhcmVudE5vZGUgJiYgc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcblx0XHRkb25lRm5zICYmIGRvbmVGbnMuZm9yRWFjaCgoZm4pID0+IChmbihldmVudCkpKTtcblx0XHRpZihwcmV2KSByZXR1cm4gcHJldihldmVudCk7XG5cdH1cblx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCB1bmRlZmluZWQsIHsgdHlwZTogJ3RpbWVvdXQnLCB0YXJnZXQ6IHNjcmlwdCB9KSwgMTIwMDAwKTtcblx0c2NyaXB0Lm9uZXJyb3IgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9uZXJyb3IpO1xuXHRzY3JpcHQub25sb2FkID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmxvYWQpO1xuXHRuZWVkQXR0YWNoICYmIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbn07IiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0ICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQudGFnTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnU0NSSVBUJylcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSB7XG5cdFx0XHR2YXIgaSA9IHNjcmlwdHMubGVuZ3RoIC0gMTtcblx0XHRcdHdoaWxlIChpID4gLTEgJiYgKCFzY3JpcHRVcmwgfHwgIS9eaHR0cChzPyk6Ly50ZXN0KHNjcmlwdFVybCkpKSBzY3JpcHRVcmwgPSBzY3JpcHRzW2ktLV0uc3JjO1xuXHRcdH1cblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuO1xudmFyIGNyZWF0ZVN0eWxlc2hlZXQgPSAoY2h1bmtJZCwgZnVsbGhyZWYsIG9sZFRhZywgcmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdHZhciBsaW5rVGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0bGlua1RhZy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblx0bGlua1RhZy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5uYykge1xuXHRcdGxpbmtUYWcubm9uY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm5jO1xuXHR9XG5cdHZhciBvbkxpbmtDb21wbGV0ZSA9IChldmVudCkgPT4ge1xuXHRcdC8vIGF2b2lkIG1lbSBsZWFrcy5cblx0XHRsaW5rVGFnLm9uZXJyb3IgPSBsaW5rVGFnLm9ubG9hZCA9IG51bGw7XG5cdFx0aWYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJykge1xuXHRcdFx0cmVzb2x2ZSgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgZXZlbnQudHlwZTtcblx0XHRcdHZhciByZWFsSHJlZiA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuaHJlZiB8fCBmdWxsaHJlZjtcblx0XHRcdHZhciBlcnIgPSBuZXcgRXJyb3IoXCJMb2FkaW5nIENTUyBjaHVuayBcIiArIGNodW5rSWQgKyBcIiBmYWlsZWQuXFxuKFwiICsgZXJyb3JUeXBlICsgXCI6IFwiICsgcmVhbEhyZWYgKyBcIilcIik7XG5cdFx0XHRlcnIubmFtZSA9IFwiQ2h1bmtMb2FkRXJyb3JcIjtcblx0XHRcdGVyci5jb2RlID0gXCJDU1NfQ0hVTktfTE9BRF9GQUlMRURcIjtcblx0XHRcdGVyci50eXBlID0gZXJyb3JUeXBlO1xuXHRcdFx0ZXJyLnJlcXVlc3QgPSByZWFsSHJlZjtcblx0XHRcdGlmIChsaW5rVGFnLnBhcmVudE5vZGUpIGxpbmtUYWcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChsaW5rVGFnKVxuXHRcdFx0cmVqZWN0KGVycik7XG5cdFx0fVxuXHR9XG5cdGxpbmtUYWcub25lcnJvciA9IGxpbmtUYWcub25sb2FkID0gb25MaW5rQ29tcGxldGU7XG5cdGxpbmtUYWcuaHJlZiA9IGZ1bGxocmVmO1xuXG5cblx0aWYgKG9sZFRhZykge1xuXHRcdG9sZFRhZy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShsaW5rVGFnLCBvbGRUYWcubmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobGlua1RhZyk7XG5cdH1cblx0cmV0dXJuIGxpbmtUYWc7XG59O1xudmFyIGZpbmRTdHlsZXNoZWV0ID0gKGhyZWYsIGZ1bGxocmVmKSA9PiB7XG5cdHZhciBleGlzdGluZ0xpbmtUYWdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJsaW5rXCIpO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgZXhpc3RpbmdMaW5rVGFncy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciB0YWcgPSBleGlzdGluZ0xpbmtUYWdzW2ldO1xuXHRcdHZhciBkYXRhSHJlZiA9IHRhZy5nZXRBdHRyaWJ1dGUoXCJkYXRhLWhyZWZcIikgfHwgdGFnLmdldEF0dHJpYnV0ZShcImhyZWZcIik7XG5cdFx0aWYodGFnLnJlbCA9PT0gXCJzdHlsZXNoZWV0XCIgJiYgKGRhdGFIcmVmID09PSBocmVmIHx8IGRhdGFIcmVmID09PSBmdWxsaHJlZikpIHJldHVybiB0YWc7XG5cdH1cblx0dmFyIGV4aXN0aW5nU3R5bGVUYWdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzdHlsZVwiKTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IGV4aXN0aW5nU3R5bGVUYWdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIHRhZyA9IGV4aXN0aW5nU3R5bGVUYWdzW2ldO1xuXHRcdHZhciBkYXRhSHJlZiA9IHRhZy5nZXRBdHRyaWJ1dGUoXCJkYXRhLWhyZWZcIik7XG5cdFx0aWYoZGF0YUhyZWYgPT09IGhyZWYgfHwgZGF0YUhyZWYgPT09IGZ1bGxocmVmKSByZXR1cm4gdGFnO1xuXHR9XG59O1xudmFyIGxvYWRTdHlsZXNoZWV0ID0gKGNodW5rSWQpID0+IHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHR2YXIgaHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18ubWluaUNzc0YoY2h1bmtJZCk7XG5cdFx0dmFyIGZ1bGxocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgaHJlZjtcblx0XHRpZihmaW5kU3R5bGVzaGVldChocmVmLCBmdWxsaHJlZikpIHJldHVybiByZXNvbHZlKCk7XG5cdFx0Y3JlYXRlU3R5bGVzaGVldChjaHVua0lkLCBmdWxsaHJlZiwgbnVsbCwgcmVzb2x2ZSwgcmVqZWN0KTtcblx0fSk7XG59XG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIENTUyBjaHVua3NcbnZhciBpbnN0YWxsZWRDc3NDaHVua3MgPSB7XG5cdFwiaW5kZXhcIjogMFxufTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5mLm1pbmlDc3MgPSAoY2h1bmtJZCwgcHJvbWlzZXMpID0+IHtcblx0dmFyIGNzc0NodW5rcyA9IHtcInZlbmRvcnMtbm9kZV9tb2R1bGVzX3ByaXNtanNfcGx1Z2luc19hdXRvbGlua2VyX3ByaXNtLWF1dG9saW5rZXJfY3NzLW5vZGVfbW9kdWxlc19wcmlzbWpzX3BsdS03MGMxMjJcIjoxfTtcblx0aWYoaW5zdGFsbGVkQ3NzQ2h1bmtzW2NodW5rSWRdKSBwcm9taXNlcy5wdXNoKGluc3RhbGxlZENzc0NodW5rc1tjaHVua0lkXSk7XG5cdGVsc2UgaWYoaW5zdGFsbGVkQ3NzQ2h1bmtzW2NodW5rSWRdICE9PSAwICYmIGNzc0NodW5rc1tjaHVua0lkXSkge1xuXHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ3NzQ2h1bmtzW2NodW5rSWRdID0gbG9hZFN0eWxlc2hlZXQoY2h1bmtJZCkudGhlbigoKSA9PiB7XG5cdFx0XHRpbnN0YWxsZWRDc3NDaHVua3NbY2h1bmtJZF0gPSAwO1xuXHRcdH0sIChlKSA9PiB7XG5cdFx0XHRkZWxldGUgaW5zdGFsbGVkQ3NzQ2h1bmtzW2NodW5rSWRdO1xuXHRcdFx0dGhyb3cgZTtcblx0XHR9KSk7XG5cdH1cbn07XG5cbi8vIG5vIGhtclxuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWQiLCIvLyBubyBiYXNlVVJJXG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0XCJpbmRleFwiOiAwXG59O1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmYuaiA9IChjaHVua0lkLCBwcm9taXNlcykgPT4ge1xuXHRcdC8vIEpTT05QIGNodW5rIGxvYWRpbmcgZm9yIGphdmFzY3JpcHRcblx0XHR2YXIgaW5zdGFsbGVkQ2h1bmtEYXRhID0gX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgPyBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gOiB1bmRlZmluZWQ7XG5cdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhICE9PSAwKSB7IC8vIDAgbWVhbnMgXCJhbHJlYWR5IGluc3RhbGxlZFwiLlxuXG5cdFx0XHQvLyBhIFByb21pc2UgbWVhbnMgXCJjdXJyZW50bHkgbG9hZGluZ1wiLlxuXHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhKSB7XG5cdFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ2h1bmtEYXRhWzJdKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmKHRydWUpIHsgLy8gYWxsIGNodW5rcyBoYXZlIEpTXG5cdFx0XHRcdFx0Ly8gc2V0dXAgUHJvbWlzZSBpbiBjaHVuayBjYWNoZVxuXHRcdFx0XHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gKGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IFtyZXNvbHZlLCByZWplY3RdKSk7XG5cdFx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0gPSBwcm9taXNlKTtcblxuXHRcdFx0XHRcdC8vIHN0YXJ0IGNodW5rIGxvYWRpbmdcblx0XHRcdFx0XHR2YXIgdXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgX193ZWJwYWNrX3JlcXVpcmVfXy51KGNodW5rSWQpO1xuXHRcdFx0XHRcdC8vIGNyZWF0ZSBlcnJvciBiZWZvcmUgc3RhY2sgdW53b3VuZCB0byBnZXQgdXNlZnVsIHN0YWNrdHJhY2UgbGF0ZXJcblx0XHRcdFx0XHR2YXIgZXJyb3IgPSBuZXcgRXJyb3IoKTtcblx0XHRcdFx0XHR2YXIgbG9hZGluZ0VuZGVkID0gKGV2ZW50KSA9PiB7XG5cdFx0XHRcdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSkge1xuXHRcdFx0XHRcdFx0XHRpbnN0YWxsZWRDaHVua0RhdGEgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG5cdFx0XHRcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSAhPT0gMCkgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyA/ICdtaXNzaW5nJyA6IGV2ZW50LnR5cGUpO1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZWFsU3JjID0gZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5zcmM7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IubWVzc2FnZSA9ICdMb2FkaW5nIGNodW5rICcgKyBjaHVua0lkICsgJyBmYWlsZWQuXFxuKCcgKyBlcnJvclR5cGUgKyAnOiAnICsgcmVhbFNyYyArICcpJztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5uYW1lID0gJ0NodW5rTG9hZEVycm9yJztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci50eXBlID0gZXJyb3JUeXBlO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLnJlcXVlc3QgPSByZWFsU3JjO1xuXHRcdFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YVsxXShlcnJvcik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubCh1cmwsIGxvYWRpbmdFbmRlZCwgXCJjaHVuay1cIiArIGNodW5rSWQsIGNodW5rSWQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxufTtcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5PLmogPSAoY2h1bmtJZCkgPT4gKGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9PT0gMCk7XG5cbi8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xudmFyIHdlYnBhY2tKc29ucENhbGxiYWNrID0gKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uLCBkYXRhKSA9PiB7XG5cdHZhciBbY2h1bmtJZHMsIG1vcmVNb2R1bGVzLCBydW50aW1lXSA9IGRhdGE7XG5cdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuXHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcblx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMDtcblx0aWYoY2h1bmtJZHMuc29tZSgoaWQpID0+IChpbnN0YWxsZWRDaHVua3NbaWRdICE9PSAwKSkpIHtcblx0XHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcblx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKHJ1bnRpbWUpIHZhciByZXN1bHQgPSBydW50aW1lKF9fd2VicGFja19yZXF1aXJlX18pO1xuXHR9XG5cdGlmKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKSBwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbihkYXRhKTtcblx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcblx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiYgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG5cdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0oKTtcblx0XHR9XG5cdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcblx0fVxuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5PKHJlc3VsdCk7XG59XG5cbnZhciBjaHVua0xvYWRpbmdHbG9iYWwgPSBzZWxmW1wid2VicGFja0NodW5rZXZlbnBpZXJyZVwiXSA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtldmVucGllcnJlXCJdIHx8IFtdO1xuY2h1bmtMb2FkaW5nR2xvYmFsLmZvckVhY2god2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCAwKSk7XG5jaHVua0xvYWRpbmdHbG9iYWwucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2guYmluZChjaHVua0xvYWRpbmdHbG9iYWwpKTsiLCJyZXF1aXJlKCcuLi9zdHlsZXNoZWV0cy9sYXlvdXQuc2NzcycpO1xyXG5cclxuaW1wb3J0ICcuL2hhbmRsZWJhcnNfaGVscGVycyc7XHJcblxyXG4vL0BGSVggOiBkb24ndCBpbXBvcnRpbmcgdGhpcyBjYXVzZSBhIHdlaXJkIGlzc3VlIHdoZW4gcmVuZGVyaW5nIHBkZi4uLlxyXG5yZXF1aXJlKCcuLi9lbWJlZF92aWV3ZXJzL2N1c3RvbV9lbGVtZW50cy9wZGZfdmlld2VyL3BkZi12aWV3ZXIuaGJzJylcclxucmVxdWlyZSgnLi4vZW1iZWRfdmlld2Vycy9jdXN0b21fZWxlbWVudHMvZG9jdW1lbnQvY29kZScpXHJcbnJlcXVpcmUoJy4uL2VtYmVkX3ZpZXdlcnMvY3VzdG9tX2VsZW1lbnRzL2RvY3VtZW50L21hcmtkb3duJylcclxucmVxdWlyZSgnLi4vZW1iZWRfdmlld2Vycy9jdXN0b21fZWxlbWVudHMvcGRmX3ZpZXdlci9wZGYtdmlld2VyJylcclxuXHJcbi8qIFdJREdFVFMgKi9cclxuaW1wb3J0ICcuL3dpZGdldHMvYXV0aC9hdXRoLmpzJztcclxuaW1wb3J0ICcuL3dpZGdldHMvY3JlYXRlX3JlcG9zL2NyZWF0ZS1yZXBvcy1mb3JtLmpzJztcclxuaW1wb3J0ICcuL3dpZGdldHMvdmlld3BvcnQvcmVwb3NfYnVpbGRlci5qcyc7XHJcbmltcG9ydCAnLi93aWRnZXRzL2RlbGV0ZV9yZXBvcy9kZWxldGVfcmVwb3NfZm9ybS5qcyc7XHJcbmltcG9ydCAnLi93aWRnZXRzL2VkaXRfcmVwb3MvZWRpdF9yZXBvc19mb3JtLmpzJztcclxuaW1wb3J0ICcuL2Ryb3BfYm94LmpzJztcclxuaW1wb3J0ICcuL3dpZGdldHMvdXNlcl9zZXR0aW5ncy91c2VyX3NldHRpbmdzLmpzJztcclxuaW1wb3J0ICcuL3dpZGdldHMvcmVwb3Nfc2V0dGluZ3MvcmVwb3Nfc2V0dGluZ3MuanMnO1xyXG5pbXBvcnQgJy4vd2lkZ2V0cy92aWV3cG9ydC9maWxlX2xpc3RfY3VzdG9taXphdGlvbi5qcydcclxuXHJcbi8qIFZJRVdQT1JUICovXHJcbmltcG9ydCAnLi93aWRnZXRzL3VwbG9hZC91cGxvYWRfZm9ybS5qcyc7XHJcblxyXG5pbXBvcnQgJy4vYWRtaW5pc3RyYXRpb24vYWRtaW5pc3RyYXRpb25fcGFuZWwnOyJdLCJuYW1lcyI6WyJDbGllbnRTdHJpbmciLCJjb25zdHJ1Y3RvciIsImRhdGEiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJfZW5jb2RlZF9zdHJpbmdfZGF0YSIsImNvbnNvbGUiLCJhc3NlcnQiLCJGcm9tQ2xpZW50IiwiRGJEYXRhIiwib2JqZWN0IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicGxhaW4iLCJkZWNvZGVVUklDb21wb25lbnQiLCJlbmNvZGVkIiwiZm9yX3VybCIsInRvU3RyaW5nIiwiVXJsUGF0aCIsImFic29sdXRlX3VybCIsIm1pbWUiLCJyZXF1aXJlIiwicHJlcGFyZV9maWxlIiwiZmlsZSIsImRpcmVjdG9yeSIsImNhbGxiYWNrX3JlbW92ZWQiLCJyZW1vdmUiLCJyZW1vdmVfZmlsZSIsImFic29sdXRlX3BhdGgiLCJuYW1lIiwiaXNfZmlsZSIsImlzX2RpcmVjdG9yeSIsInRpbWVzdGFtcCIsImxhc3RNb2RpZmllZCIsIm1pbWV0eXBlIiwidHlwZSIsImdldFR5cGUiLCJjbGVhcl9maWxlIiwiRGlyZWN0b3J5IiwicGFyZW50Iiwic2l6ZSIsImNvbnRlbnRfc2l6ZSIsImNvbnRlbnRfZmlsZXMiLCJkaXJlY3RvcmllcyIsImZpbGVzIiwiY2FsbGJhY2tfZmlsZV9hZGRlZCIsImNhbGxiYWNrX2RpcmVjdG9yeV9hZGRlZCIsImNhbGxiYWNrX3N0YXRzX3VwZGF0ZWQiLCJhZGRfZmlsZSIsImRpciIsInBhcmVudF9kaXJzIiwiTnVtYmVyIiwicHVzaCIsIl9yZW1vdmVfaWZfZW1wdHlfaW50ZXJuYWwiLCJPYmplY3QiLCJ2YWx1ZXMiLCJmb3VuZCIsImkiLCJzcGxpY2UiLCJleGNsdWRlX3Jvb3QiLCJjb25jYXQiLCJGaWxlc3lzdGVtIiwicm9vdF9uYW1lIiwicm9vdCIsInBhdGgiLCJkaXJlY3RvcnlfZnJvbV9wYXRoIiwiY3JlYXRlX2lmX25vdF9mb3VuZCIsImxpc3RfcGF0aCIsIml0ZW0iLCJzcGxpdCIsInJldmVyc2UiLCJpdGUiLCJyZW1haW5pbmciLCJwb3AiLCJnZXRfcmFuZG9tX2ZpbGUiLCJpbnRlcm5hbF9nZXRfcmFuZG9tX2ZpbGUiLCJkaXJzIiwiY2xlYXIiLCJtb2R1bGUiLCJleHBvcnRzIiwicHJpbnRfbWVzc2FnZSIsIlJFUE9TX0JVSUxERVIiLCJGaWxlc3lzdGVtT2JqZWN0IiwiUEFHRV9DT05URVhUIiwiVHJhbnNmZXJTdGF0cyIsInBlcmZvcm1hbmNlIiwibm93IiwibGFzdF9zZW50IiwidG90YWwiLCJzcGVlZF9tZWFzdXJlcyIsInNwZWVkIiwiYXZlcmFnZSIsIm1lYXN1cmUiLCJ1cGRhdGUiLCJzZW50IiwiYWRkZWQiLCJlbGFwc2VkIiwibG9jYWxfc3BlZWQiLCJDaHVua2VkRmlsZVN0cmVhbSIsIk1BWF9CQVRDSF9TSVpFIiwibWF4X2JhdGNoX3NpemUiLCJfY3Vyc29yIiwiX2xhc3RfY3Vyc29yIiwic3RyZWFtX2lkIiwiZ2V0X25leHRfY2h1bmsiLCJNYXRoIiwibWluIiwic2xpY2UiLCJjYW5jZWxfY2h1bmsiLCJjaHVua19udW1iZXIiLCJjZWlsIiwic2VudF9jaHVuayIsImZsb29yIiwiVXBsb2FkU3RyZWFtIiwiZmlsZV9zdHJlYW0iLCJ1cmwiLCJvbl9wcm9ncmVzcyIsIm9uX2ZpbGVfc2VudCIsIm9uX2NhbmNlbCIsIl9vbl9maWxlX3NlbnQiLCJfb25fY2FuY2VsIiwiX29uX3Byb2dyZXNzIiwiX3VybCIsIl9maWxlX3N0cmVhbSIsIl9yZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJ0aGlzX3JlZiIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsIl9ydW5uaW5nIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsInJlc3BvbnNlIiwiX2hhbmRsZV9yZXN1bHQiLCJKU09OIiwicGFyc2UiLCJ1cGxvYWQiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJfY2h1bmtfcHJvZ3Jlc3MiLCJsb2FkZWQiLCJfdXBkYXRlX3Byb2dyZXNzIiwiX3N0cmVhbV9pZCIsIl9wcm9jZXNzX3BlcmNlbnQiLCJnbyIsIl9wdXNoX25leHRfY2h1bmsiLCJob2xkIiwiYWJvcnQiLCJjb2RlIiwibWVzc2FnZSIsInRpdGxlIiwiY29udGVudCIsImVycm9yIiwicHJvY2Vzc19wZXJjZW50IiwiY3JlYXRlZF9kaXJlY3RvcmllcyIsImZpbGVzeXN0ZW0iLCJhZGRfb2JqZWN0IiwiRnJvbVNlcnZlckRhdGEiLCJjaHVuayIsInNldFRpbWVvdXQiLCJvcGVuIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJuYXZpZ2F0b3IiLCJtYWtlX3N0cmluZ19wYXRoX3RvX29iamVjdCIsImdldF9jdXJyZW50X2RpcmVjdG9yeSIsInJlcGxhY2VBbGwiLCJkZXNjcmlwdGlvbiIsIkZpbGVzeXN0ZW1VcGxvYWQiLCJfZmlsZXN5c3RlbSIsImlzX3J1bm5pbmciLCJyZXBvc19wYXRoIiwidG90YWxfY29udGVudF9zaXplIiwidG90YWxfY29udGVudF9zZW50IiwidG90YWxfZmlsZV9jb3VudCIsInRvdGFsX2ZpbGVfc2VudCIsImNhbGxiYWNrX2ZpbmlzaGVkIiwiY2FsbGJhY2tfZmlsZV91cGxvYWRlZCIsIl9jdXJyZW50X3N0cmVhbSIsImNhbGxiYWNrX3VwZGF0ZV9wcm9ncmVzcyIsIm9uX3N0b3AiLCJzdGFydCIsInRyYW5zZmVyX3N0YXRzIiwiX25leHQiLCJuZXdfZmlsZSIsInN0b3AiLCJzZW50X2NodW5rcyIsInRvdGFsX2NodW5rcyIsInNlbnRfYnl0ZXMiLCJ0b3RhbF9ieXRlcyIsInBhdXNlIiwiZmluaXNoZWQiLCJodW1hbkZpbGVTaXplIiwiTE9DQUxfVVNFUiIsInBhcnNlX2ZldGNoX3Jlc3VsdCIsInNlcnZlcl9kYXRhIiwiaWQiLCJyZXBvcyIsIm93bmVyIiwiaXNfcmVndWxhcl9maWxlIiwicGFyZW50X2l0ZW0iLCJpc190cmFzaCIsIm9wZW5fdXBsb2FkIiwiRmV0Y2hGcm9tU2VydmVyIiwib2JqZWN0X2lkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJmZXRjaCIsImhlYWRlcnMiLCJnZXRfdG9rZW4iLCJ0aGVuIiwianNvbiIsIk9iamVjdExpc3RlbmVyIiwib25fYWRkX29iamVjdCIsIm9uX3VwZGF0ZV9vYmplY3QiLCJvbl9yZW1vdmVfb2JqZWN0IiwiX2lkIiwiX3BhcmVudCIsImRlc3Ryb3kiLCJsaXN0ZW5lcnMiLCJkZWxldGUiLCJPYmplY3RJbnRlcm5hbE1ldGFkYXRhIiwiY2hpbGRyZW4iLCJTZXQiLCJNYXAiLCJjb250ZW50X2NvdW50IiwiZmlsZXN5c3RlbV9uYW1lIiwiX2NvbnRlbnQiLCJfb2JqZWN0X2ludGVybmFsX21ldGFkYXRhIiwiX3Jvb3RfbWV0YV9kYXRhIiwiX3Jvb3RzIiwiX3Jvb3RfZGlydHkiLCJzZXQiLCJhZGQiLCJvYmplY3RfbWV0YWRhdGEiLCJnZXQiLCJwYXJlbnRfbWV0YWRhdGEiLCJfIiwibGlzdGVuZXIiLCJwYXJlbnRfb2JqZWN0IiwicGFyZW50X2lkIiwicGFyZW50X29iamVjdF9tZXRhZGF0YSIsInJlbW92ZV9vYmplY3QiLCJvbmx5X2RlcmVmZXJlbmNlIiwibWV0YWRhdGEiLCJjaGlsZCIsImhhcyIsImdldF9yb290cyIsImdldF9vYmplY3RfZGF0YSIsImZpbGVfaWQiLCJnZXRfb2JqZWN0c19pbl9kaXJlY3RvcnkiLCJvYmplY3RzIiwiQXJyYXkiLCJmcm9tIiwiZ2V0X29iamVjdHNfaW5fZGlyZWN0b3J5X3JlY3Vyc2l2ZSIsImtleXMiLCJzdGFydHNXaXRoIiwiZ2V0X29iamVjdF9mcm9tX3BhdGgiLCJ0cmltIiwic3Vic3RyaW5nIiwiZW5kc1dpdGgiLCJwYXRoX25hbWUiLCJjaGlsZF9vYmplY3QiLCJjcmVhdGVfbGlzdGVuZXIiLCJyYW5kb20iLCJtYWtlX3BhdGhfdG9fb2JqZWN0IiwicmVzdWx0IiwiZ2V0X29iamVjdF9jb250ZW50X3N0YXRzIiwiY291bnQiLCJnZXRfbWltZV9pY29uX3BhdGgiLCJmcm9tX2Rpc3RhbnRfcmVwb3MiLCJmcm9tX2xvY2FsX3BhdGgiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJIYW5kbGViYXJzIiwiZ2V0X21pbWVfYWxpYXMiLCJpc19taW1ldHlwZV92YWxpZCIsIm1pbWVfbGVmdCIsIm1pbWVfcmlnaHQiLCJtaW1lX2ljb25zIiwiZ2V0X21pbWVfaWNvbnMiLCJtaW1lX2NhdGVnb3J5IiwibWltZV90eXBlIiwiYmFzZSIsIlVOREVGSU5FRF9NSU1FX1NUUklORyIsInNwYXduX2l0ZW1fY29udGV4dF9hY3Rpb24iLCJOYXZpZ2F0b3IiLCJyZXBvc19idWlsZGVyIiwibGFzdF9ob3Zlcl9pdGVtIiwiaG92ZXJfaXRlbV9jYWxsYmFja3MiLCJzZWxlY3RlZF9pdGVtcyIsImxhc3Rfc2VsZWN0ZWRfaXRlbSIsInNlbGVjdGVkX2l0ZW1fY2FsbGJhY2tzIiwiY3VycmVudF9kaXJlY3RvcnkiLCJjaGFuZ2VkX2Rpcl9jYWxsYmFja3MiLCJzZXRfaG92ZXJfaXRlbSIsImNhbGxiYWNrIiwiZ2V0X2hvdmVyX2l0ZW0iLCJvbl9ob3Zlcl9pdGVtIiwiZW50ZXJfdG91Y2hfc2VsZWN0aW9uX21vZGUiLCJlbnRlciIsImlzX3RvdWNoX3NlbGVjdGlvbl9tb2RlIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImNsYXNzTGlzdCIsIm9uY2xpY2siLCJhY3Rpb25fZGl2IiwiaW5uZXJIVE1MIiwiY3V0X2J1dHRvbiIsImNyZWF0ZUVsZW1lbnQiLCJjdXRfaW1hZ2UiLCJzcmMiLCJhcHBlbmQiLCJjdXRfc2VsZWN0aW9uIiwibW9yZV9idXR0b24iLCJyZW1vdmVfaW1hZ2UiLCJjbGVhcl9zZWxlY3Rpb24iLCJzZWxlY3RfaXRlbSIsInNoaWZ0X2tleSIsImN0cmxfa2V5IiwiZm9yY2Vfc2VsZWN0IiwiZGlyX2NvbnRlbnQiLCJkaXJlY3RvcnlfY29udGVudCIsInN0YXJ0X2luZGV4IiwiZW5kX2luZGV4IiwiaXRlbXNfdG9fa2VlcF9zZWxlY3RlZCIsInNlbGVjdGVkIiwiX3NlbGVjdF9pdGVtX2ludGVybmFsIiwiZWxlbSIsImlubmVyVGV4dCIsInZpZXdfaXRlbSIsImJpbmRfb25fc2VsZWN0X2l0ZW0iLCJzZXRfY3VycmVudF9kaXIiLCJza2lwX3B1c2hfc3RhdGUiLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwiZ2V0X3N0cmluZ19wYXRoX3RvX2RpcmVjdG9yeSIsImZ1bGxfcGF0aF9zdHJpbmciLCJkaXJfZGF0YSIsIm9uX2NoYW5nZWRfZGlyIiwiY2xpcGJvYXJkX2l0ZW1zIiwibW92ZV9jbGlwYm9hcmRfdG9fcGFyZW50IiwicmVzIiwibWV0aG9kIiwiYm9keSIsInN0cmluZ2lmeSIsIml0ZW1faWRzIiwib2xkX2l0ZW0iLCJkYXlqcyIsInV0YyIsImV4dGVuZCIsIkNvb2tpZVN0cmluZyIsIl9jb29raWVzIiwiY2EiLCJjIiwicyIsImtleSIsInZhbHVlIiwiZXhwIiwicmVhZCIsImNvb2tpZSIsInNhdmUiLCJEYXRlIiwidG9VVENTdHJpbmciLCJlbnRyaWVzIiwidW5peCIsInRvRGF0ZSIsIlVzZXIiLCJjb29raWVzIiwiX2F1dGh0b2tlbiIsIl9sYXN0X3VyaSIsImRvY3VtZW50VVJJIiwiX2F1dGh0b2tlbl9leHAiLCJfbGFzdF9yZXBvcyIsInNhdmVfY29va2llcyIsImdldF9sYXN0X3JlcG9zIiwiZmlsdGVyIiwiQm9vbGVhbiIsInB1c2hfbGFzdF9yZXBvcyIsInJlcG9zX2lkIiwicmVwb3NfbGlzdCIsIm5ld19yZXBvc19saXN0IiwicmVwbyIsIlN0cmluZyIsImF1dGhfaGVhZGVyIiwiaGVhZGVyIiwibG9naW4iLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiYXV0aHRva2VuIiwiZGV2aWNlIiwidXNlckFnZW50IiwidG9rZW4iLCJleHBpcmF0aW9uX2RhdGUiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInJlbG9hZCIsInJlZ2lzdGVyIiwiZW1haWwiLCJsb2dvdXQiLCJieXRlcyIsInRocmVzaCIsImFicyIsInVuaXRzIiwidSIsInIiLCJyb3VuZCIsInRvRml4ZWQiLCJzZWNvbmRzX3RvX3N0ciIsImluX3NlY29uZHMiLCJtaWxsaXNlY29uZHMiLCJudW1iZXJFbmRpbmciLCJudW1iZXIiLCJ0ZW1wIiwieWVhcnMiLCJkYXlzIiwiaG91cnMiLCJtaW51dGVzIiwic2Vjb25kcyIsImh1bWFuX3JlYWRhYmxlX3RpbWVzdGFtcCIsImxvY2FsZSIsImZvcm1hdCIsIlBhZ2VDb250ZXh0IiwiY29ubmVjdGVkX3VzZXIiLCJkaXNwbGF5X3VzZXIiLCJkaXNwbGF5X3JlcG9zIiwiZGlzcGxheV9uYW1lIiwicmVxdWVzdF9wYXRoIiwiZGVjb2RlVVJJIiwidXNlcl9wYXRoIiwiX19QQUdFX0NPTlRFWFQiLCJQZXJtaXNzaW9ucyIsImNhbl91c2VyX2VkaXRfcmVwb3MiLCJyZXBvc191cmwiLCJjYW5fdXNlcl91cGxvYWRfdG9fcmVwb3MiLCJjYW5fdXNlcl9lZGl0X2l0ZW0iLCJpdGVtX2lkIiwiY2FuX3VzZXJfdXBsb2FkX3RvX2RpcmVjdG9yeSIsImlzX3RvdWNoX2RldmljZSIsIm1hdGNoTWVkaWEiLCJtYXRjaGVzIiwicGVybWlzc2lvbnMiLCJvYmplY3RfdG9fZGVjb2RlZF9zdHJpbmciLCJmaWVsZCIsInV0aWxzIiwiRG9jdW1lbnRDb2RlIiwiSFRNTEVsZW1lbnQiLCJzdHlsZSIsIndpZHRoIiwiaGVpZ2h0IiwibWF4SGVpZ2h0Iiwib3ZlcmZsb3ciLCJoYXNBdHRyaWJ1dGUiLCJnZXRBdHRyaWJ1dGUiLCJ0ZXh0IiwicHJlIiwicHJpc21fbG9hZGVyIiwiYnVpbGQiLCJjdXN0b21FbGVtZW50cyIsImRlZmluZSIsIkRvY3VtZW50TWFya2Rvd24iLCJiYWNrZ3JvdW5kQ29sb3IiLCJjb2xvciIsInNob3dkb3duX2xvYWRlciIsImNvbnZlcnRfdGV4dCIsIlBkZlZpZXdlciIsInBkZkRvYyIsInBhZ2VOdW0iLCJwYWdlUmVuZGVyaW5nIiwicGFnZU51bVBlbmRpbmciLCJzY2FsZSIsImRpc3BsYXkiLCJwYWdlX25leHQiLCJhc2tfZm9yX3BhZ2UiLCJwYWdlX3ByZXYiLCJ6b29tIiwiZGV6b29tIiwiY2FudmFzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJhdHRhY2hTaGFkb3ciLCJtb2RlIiwicGRmanMiLCJnZXRfcGRmX2pzX2Rpc3QiLCJnZXREb2N1bWVudCIsInByb21pc2UiLCJwZGZEb2N1bWVudCIsInJlbmRlcl9wYWdlIiwibmV3X2xldmVsIiwicGFnZV9udW1iZXIiLCJnZXRQYWdlIiwicGRmUGFnZSIsInZpZXdwb3J0IiwiZ2V0Vmlld3BvcnQiLCJjdHgiLCJnZXRDb250ZXh0IiwicmVuZGVyVGFzayIsInJlbmRlciIsImNhbnZhc0NvbnRleHQiLCJ1c2VyX2hicyIsInJlcG9zX2hicyIsInN0YXRzX2hicyIsIkFkbWluaXN0cmF0aW9uUGFuZWwiLCJzdGF0X2RpdiIsInVzZXJfbGlzdF9kaXYiLCJyZXBvX2xpc3RfZGl2IiwicmVmcmVzaF9kYXRhIiwiZWZmZWN0aXZlX3NpemUiLCJ1c2VyX2xpc3QiLCJ1c2VyIiwiaXNfZ3Vlc3QiLCJyb2xlIiwiaXNfdmlwIiwiaXNfYWRtaW4iLCJhbGxvd19jb250YWN0Iiwic2V0X3JvbGUiLCJ0YXJnZXQiLCJkZWxldGVfdXNlciIsInJlc2V0X3Bhc3N3b3JkIiwidmlzaXRvcl9maWxlX2xpZmV0aW1lIiwibWF4X2ZpbGVfc2l6ZSIsImFsbG93X3Zpc2l0b3JfdXBsb2FkIiwiYWRtaW5pc3RyYXRpb24iLCJkcm9wX2JveCIsIldJTExfRFJPUCIsInJlc2V0X3N0eWxlIiwicHJldmVudERlZmF1bHQiLCJkYXRhVHJhbnNmZXIiLCJpdGVtcyIsImZvckVhY2giLCJwcm9jZXNzX2VudHJ5IiwiZW50cnkiLCJpc0RpcmVjdG9yeSIsImNyZWF0ZVJlYWRlciIsInJlYWRFbnRyaWVzIiwibmV3X2VudHJ5IiwiYWRkX2ZpbGVfdG9fdXBsb2FkIiwia2luZCIsIkRhdGFUcmFuc2Zlckl0ZW0iLCJwcm90b3R5cGUiLCJnZXRBc0VudHJ5Iiwid2Via2l0R2V0QXNFbnRyeSIsImdldF9pdGVtX3RodW1ibmFpbCIsInJlZ2lzdGVySGVscGVyIiwiU2FmZVN0cmluZyIsIm9wdGlvbnMiLCJjb252ZXJ0ZXIiLCJDb252ZXJ0ZXIiLCJtYWtlSHRtbCIsImNsb3NlX21vZGFsIiwib3Blbl9tb2RhbCIsInNpZ25pbiIsInNpZ251cCIsIm9wZW5fbW9kYWxfc2lnbmluIiwiZSIsIm9wZW5fbW9kYWxfc2lnbnVwIiwidmFsaWRpdHkiLCJ2YWxpZCIsIm9wZW5fbW9kYWxfcmVzZXRfcGFzc3dvcmQiLCJyZXNldF90b2tlbiIsInJlc2V0IiwiaHJlZiIsImF1dGgiLCJDYXJvdXNlbFZpZXdwb3J0IiwiQ2Fyb3VzZWxPdmVybGF5IiwiY2Fyb3VzZWxfZnVsbHNjcmVlbl9oYnMiLCJGVUxMU0NSRUVOX0NPTlRBSU5FUiIsIkNhcm91c2VsIiwibGlzdCIsImNvbnRhaW5lciIsImJhc2VfaXRlbSIsIm9uX3NlbGVjdF9pdGVtIiwiZ2V0X2Z1bGxzY3JlZW5fY29udGFpbmVyIiwibmV3X2NvbnRhaW5lciIsImJhY2tncm91bmRfY29udGFpbmVyIiwibGlzdF9jb250YWluZXIiLCJjbG9zZSIsIm9uX2Nsb3NlIiwiY2Fyb3VzZWxfbGlzdF9oYnMiLCJjYXJvdXNlbF9saXN0X2l0ZW1faGJzIiwiQ2Fyb3VzZWxMaXN0IiwiX2xhc3Rfc2VsZWN0ZWQiLCJlbGVtZW50X21hcCIsIm1ldGFfZGF0YSIsInNjcm9sbF9jZW50ZXIiLCJzY3JvbGxJbnRvVmlldyIsImJlaGF2aW9yIiwiaW5saW5lIiwidXBkYXRlX2xlZnRfcmlnaHRfYnV0dG9ucyIsInNlbGVjdF9uZXh0IiwibmV4dFNpYmxpbmciLCJzZWxlY3RfcHJldmlvdXMiLCJwcmV2aW91c1NpYmxpbmciLCJidWlsZF92aXN1YWwiLCJjYXJvdXNlbF9saXN0IiwibW92ZV9sZWZ0IiwibW92ZV9yaWdodCIsIm1vdmVfbGVmdF9idXR0b24iLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwibW92ZV9yaWdodF9idXR0b24iLCJjYXJvdXNlbF9saXN0X2RpdiIsInNjcm9sbExlZnQiLCJkZWx0YVkiLCJsZWZ0X3NwYWNlciIsImNhbGxiYWNrcyIsIm9uX2NsaWNrIiwicmlnaHRfc3BhY2VyIiwiY29udGFpbnMiLCJjYXJvdXNlbCIsImNhcm91c2VsX292ZXJsYXkiLCJmaWxlX3NpemUiLCJjbG9zZV9jYXJvdXNlbCIsImRvd25sb2FkIiwiZm9jdXMiLCJzaGFyZSIsIm9yaWdpbiIsImNsaXBib2FyZCIsIndyaXRlVGV4dCIsImZpcnN0Q2hpbGQiLCJiZWZvcmUiLCJjYXJvdXNlbF9pdGVtX2hicyIsImNsYW1wIiwiYSIsImIiLCJ2aXN1YWwiLCJzaG93ZG93biIsImRpcmVjdG9yeV9kZXNjcmlwdGlvbiIsInBhZGRpbmciLCJ0cmFuc2xhdGlvblgiLCJ0cmFuc2xhdGlvblkiLCJjdHJsS2V5Iiwic3RvcFByb3BhZ2F0aW9uIiwib2Zmc2V0WCIsImNsaWVudFgiLCJvZmZzZXRZIiwiY2xpZW50WSIsInRyYW5zZm9ybSIsImNvbnRleHRfYWN0aW9uX2hicyIsIm1vdXNlX3BvcyIsIngiLCJ5IiwibGFzdF9jb250ZXh0X2FjdGlvbiIsIm9uY29udGV4dG1lbnUiLCJjbGlja19vYmplY3QiLCJzcGF3bl9jb250ZXh0X2FjdGlvbiIsImFjdGlvbnMiLCJhY3Rpb24iLCJsZWZ0IiwiaW5uZXJXaWR0aCIsInRvcCIsImlubmVySGVpZ2h0IiwiY29udGV4dF9hY3Rpb24iLCJtZXNzYWdlX2JveCIsIm1lc3NhZ2VfYm94X21lc3NhZ2UiLCJtZXNzYWdlX3RpbWVvdXQiLCJzZXZlcml0eSIsIndhcm4iLCJxdWVyeVNlbGVjdG9yIiwiY2xlYXJUaW1lb3V0IiwicmVkaXJlY3RlZCIsImpzb25EYXRhIiwic3RhdHVzVGV4dCIsImNsb3NlX21lc3NhZ2UiLCJtb2RhbCIsIm1vZGFsX2NvbnRlbnQiLCJvbl9jbG9zZV9tb2RhbCIsImN1c3RvbV93aWR0aCIsImN1c3RvbV9oZWlnaHQiLCJtb2RhbF9jbGFzcyIsImlucHV0cyIsImlzX21vZGFsX29wZW4iLCJpc19vcGVuZWQiLCJjcmVhdGVfcmVwb3MiLCJvcGVuX2NyZWF0ZV9yZXBvc19tb2RhbCIsImRlbGV0ZV9yZXBvc19mb3JtIiwiZGVsZXRlX3JlcG9zIiwiY2xpY2tlZCIsInJlbWFpbmluZ19zIiwiY291bnRkb3duX2JhciIsImNvdW50ZG93bl9idXR0b24iLCJkaXNhYmxlZCIsImNvdW50ZG93biIsImVkaXRfcmVwb3NfZm9ybSIsImVkaXRfcmVwb3MiLCJwcm9wX3B1YmxpYyIsInByb3BfaGlkZGVuIiwicHJvcF9wcml2YXRlIiwic3VibWl0IiwiZ3Vlc3RfZmlsZV9saWZldGltZSIsImNoZWNrZWQiLCJvbl9kZWxldGVfcmVwb3MiLCJhdXRob3JpemF0aW9uX2hicyIsImluZm9zX2hicyIsImFkZF9hdXRob3JpemF0aW9uX2hicyIsIlJlcG9zU2V0dGluZ3MiLCJmaWxsX2F1dGhvcml6YXRpb25zIiwiZmlsbF9pbmZvcm1hdGlvbiIsInRyYXNoX2NvbnRlbnQiLCJyZXBvc19jb250ZW50IiwidG90YWxfY291bnQiLCJ0b3RhbF9zaXplIiwidG90YWxfZGlyZWN0b3JpZXMiLCJ0cmFzaF9jb3VudCIsInRyYXNoX3NpemUiLCJ0cmFzaF9kaXJlY3RvcmllcyIsImV4dGVuc2lvbnMiLCJjb250cmlidXRvcnMiLCJleHRfYXJyYXkiLCJjb250cmliX2FycmF5IiwiaW5mb19kaXZfY29udGFpbmVyIiwiaW5mb19kaXYiLCJ0b3RhbF9kaXJzIiwidHJhc2hfZGlycyIsIm51bV9leHRlbnNpb25zIiwic29ydCIsIm51bV9jb250cmlidXRvcnMiLCJhdXRob3JpemF0aW9ucyIsImF1dGhvcml6YXRpb25zX2RpdiIsImF1dGhvcml6YXRpb24iLCJhdXRob3JpemF0aW9uX2RpdiIsInJvb3RfaXRlbSIsImFjY2Vzc190eXBlIiwiaXNfcmVhZF9vbmx5IiwiaXNfY29udHJpYnV0b3IiLCJpc19tb2RlcmF0b3IiLCJzZXRfYWNjZXNzX3R5cGUiLCJwYXJlbnRFbGVtZW50IiwiYWRkX2F1dGhvcml6YXRpb24iLCJlZGl0X3NldHRpbmdzIiwicmVwb3NfZGF0YSIsIlJFUE9TX1NFVFRJTkdTIiwicmVwb3Nfc2V0dGluZ3MiLCJsb2FkIiwidG9vbGJhcl9tZW51X2hicyIsImVkaXRfZGlyX2hicyIsIkxleGljb2dyYXBoaWNGaWx0ZXIiLCJUeXBlRmlsdGVyIiwiU2l6ZUZpbHRlciIsIkRhdGVGaWx0ZXIiLCJUb29sYmFyIiwibmV3X2RpciIsInVwZGF0ZV9wYXRoIiwidG9vbF9idXR0b25zIiwibWVudSIsInNlYXJjaCIsInN3aXRjaF9zZWFyY2hfbW9kZSIsIm1vcmUiLCJpbWFnZSIsIm9wZW5fc29ydF9ieV9tZW51IiwiZ2V0X2ZpbHRlciIsIl9maWxlc19yZWN1cnNpdmUiLCJvbmx5X2ZpbGVzX3JlY3Vyc2l2ZSIsInVwZGF0ZWRfaXRlbSIsImdvX3RvX3RyYXNoIiwidXBkYXRlX3NlYXJjaCIsImZpbHRlcl90ZXh0IiwiY3VycmVudF9wYXRoIiwiY29udGVudF90ZXh0Iiwic3RhdHMiLCJpc19sb29raW5nX3RyYXNoIiwidHJhc2hfaW1nIiwiZXhpdF9idXR0b24iLCJleGl0X3RleHQiLCJleGl0X3RyYXNoIiwiYnV0dG9uIiwiaG9tZV9pbWciLCJwYXRoX3RvX29iaiIsInNlcGFyYXRvciIsImVuYWJsZWQiLCJzZWFyY2hfYnV0dG9uIiwic2VhcmNoX3RleHQiLCJwb2ludGVyRXZlbnRzIiwic2VhcmNoX2hhbmRsZSIsInNldF9maWx0ZXIiLCJyZXZlcnNlX2ZpbHRlciIsInVwbG9hZF9oYnMiLCJmaWxlX2hicyIsImRpcmVjdG9yeV9oYnMiLCJzdG9wX3Byb2Nlc3MiLCJhZGRfZmlsZV9idXR0b24iLCJjYW5jZWxfdXBsb2FkIiwidXBsb2FkX2J1dHRvbiIsImdsb2JhbF9zdGF0dXNfZGl2IiwiZ2xvYmFsX3N0YXR1c190ZXh0Iiwib3Blbl91cGxvYWRfbW9kYWxfZm9yX2ZpbGVzIiwib3Blbl91cGxvYWRfbW9kYWxfdGltZW91dCIsIm9wZW5fb3JfdXBkYXRlX21vZGFsIiwiY2xlYW51cF9wYXRoIiwidmlld3BvcnRfZmlsZXN5c3RlbSIsInNlYXJjaF9kaXIiLCJ2aWV3cG9ydF9pZCIsInNlcnZlcl9vYmplY3RzIiwiY2xpZW50X2ZpbGVzIiwiY2xpZW50X2RpcnMiLCJ2aWV3cG9ydF9vYmpfZGF0YSIsImNsaWVudF9vYmplY3QiLCJsb2NhbF9kaXIiLCJjbGVhbnVwX2J1dHRvbiIsImZpbGVzeXN0ZW1fdXBsb2FkIiwiY29udGV4dCIsImdlbl9kaXIiLCJwYXJlbnRfZGl2Iiwib3BhY2l0eSIsImxlYXZlIiwiZXhwYW5kZWQiLCJnZW5lcmF0ZV9jb250ZW50IiwiY2hpbGRfZGlyIiwiZ2VuX2ZpbGUiLCJyZW1vdmVkIiwiZmlsZV9kb20iLCJtb2RhbF9wYXJlbnQiLCJzdGFydF91cGxvYWQiLCJwYXVzZWQiLCJnbG9iYWxfcHJvZ3Jlc3NfYmFyIiwiZ2xvYmFsX3N1Yl9wcm9ncmVzc19iYXIiLCJmaWxlX25hbWUiLCJmaWxlX3NlbnQiLCJ0b3RhbF9maWxlcyIsInVwbG9hZGVkX2J5dGVzIiwiZmlsZV91cGxvYWRlZF9ieXRlcyIsImNvbmZpcm0iLCJvcGVuX2ZpbGVfYnJvd3NlciIsImlucHV0RWxlbWVudCIsIndlYmtpdGRpcmVjdG9yeSIsIm11bHRpcGxlIiwid2Via2l0UmVsYXRpdmVQYXRoIiwiam9pbiIsImRpc3BhdGNoRXZlbnQiLCJNb3VzZUV2ZW50Iiwib3Blbl9maWxlX2RpYWxvZyIsInVzZXJfaW5mb3NfaGJzIiwiVXNlclNldHRpbmdzIiwiY2xlYXJfcGFnZSIsImdvX3RvX3VzZXIiLCJ0b2tlbnMiLCJleHBkYXRlIiwiZGVsZXRlX2F1dGhfdG9rZW4iLCJnb190b19yZXBvcyIsIlVTRVJfU0VUVElOR1MiLCJ1c2VyX3NldHRpbmdzIiwibWFrZV9kaXJlY3RvcnlfaGJzIiwibGFzdF9maWx0ZXIiLCJzaG93X2FsbF9maWxlcyIsInN0cmluZ19maWx0ZXIiLCJEaXJlY3RvcnlDb250ZW50Iiwidmlld3BvcnRfY29udGFpbmVyIiwiZW50cnlfd2lkZ2V0cyIsIml0ZW1fY2Fyb3VzZWwiLCJfdXBkYXRlX2RpcmVjdG9yeV9saXN0ZW5lciIsInNob3VsZF9zZWxlY3QiLCJ3aWRnZXQiLCJibG9jayIsInJlZ2VuX2NvbnRlbnQiLCJmaWxlX2JhY2tncm91bmQiLCJtYWtlX2RpcmVjdG9yeSIsIm1rZGlyIiwicmUiLCJ0ZXN0IiwiRXJyb3IiLCJjdXJyZW50X2RpcmVjdG9yeV9saXN0ZW5lciIsIl9vbl9maWxlX2FkZGVkIiwiX29uX2RpcmVjdG9yeV9hZGRlZCIsIl9vbl9pdGVtX3JlbW92ZWQiLCJuZXdfZGF0YSIsIm5ld19maWx0ZXIiLCJzZXRfbmFtZV9maWx0ZXIiLCJkaXJlY3Rvcmllc19kYXRhIiwiZmlsZXNfZGF0YSIsImZpbHRlcmVkX2VsZW1lbnRzIiwiZ2V0X2RpcmVjdG9yeV9jb250ZW50IiwiX2FkZF9lbGVtZW50X2RlY29yYXRpb25zIiwiZWxlbWVudCIsInVzZXJfaWNvbiIsIm9wZW5fdXBsb2FkX2ljb24iLCJkaXJfZGl2IiwiZGJsY2xpY2tlZCIsInNoaWZ0S2V5IiwiY29udGV4dF9tZW51IiwiZGlzcGxheV9zaXplIiwiZGlzcGxheV9kYXRlIiwiZmlsZV9kaXYiLCJvcGVuX2l0ZW1fY2Fyb3VzZWwiLCJnZXRfaXRlbV9pbmRleCIsImdldF9pdGVtX2F0X2luZGV4IiwiaW5kZXgiLCJnZXRfaXRlbV9hZnRlciIsIm9ubHlfZmlsZXMiLCJmaWxlX2luZGV4IiwiZ2V0X2l0ZW1fYmVmb3JlIiwiaXRlbV9saXN0IiwidXBkYXRlX2xhc3RfcmVwb3MiLCJlbGVtZW50cyIsImJ1dHRvbl9pbWciLCJidXR0b25fdGV4dCIsIm9wZW5fcmVwb3NfY29udGV4dF9tZW51IiwicGF0aF9idWlsZGVyIiwiZmlsZV9saXN0IiwiUmVwb3NGaWx0ZXIiLCJuYW1lX2ZpbHRlciIsImVuYWJsZSIsInBhcmVudF9kaXJlY3RvcnkiLCJ0b0xvd2VyQ2FzZSIsImZpbHRlcmVkX2NvbnRlbnQiLCJpbmNsdWRlcyIsImxleF9zb3J0X2VudHJpZXMiLCJsb2NhbGVDb21wYXJlIiwiZWRpdF9maWxlX2hicyIsImV4dF9zcGxpdCIsImV4dGVuc2lvbiIsImZpbmFsX25hbWUiLCJmaW5hbF9leHRlbnNpb24iLCJkaXYiLCJwIiwibm9fYnV0dG9uIiwiY29uZmlybV9idXR0b24iLCJtb3ZlX3NlbGVjdGlvbl90b190cmFzaCIsIlJlcG9zQnVpbGRlciIsInVwbG9hZF9idXR0b25fY29udGFpbmVyIiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJmZXRjaF9yZXBvc19jb250ZW50Iiwic3RhdGUiLCJjdXJyZW50X2RhdGEiLCJzZWxlY3RfbmV4dF9lbGVtZW50Iiwic2VsZWN0X3ByZXZpb3VzX2VsZW1lbnQiLCJpdGVtX3Blcl9yb3ciLCJyZW1vdmVkX2VsZW1zIiwidGltZV9hIiwidGltZV9iIiwidGltZV9jIiwiaW5mbyJdLCJzb3VyY2VSb290IjoiIn0=